{"sha": "b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "node_id": "C_kwDOAAsO6NoAKGIyZWQyZGNhYWVkZjBhOTZkZWNlODVhNTQwOWIzYTFmMzBhODQzNjA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-29T03:53:33Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:59Z"}, "message": "Rename some variants", "tree": {"sha": "09e5929727f25e3cec44443f4f9fdf857cddc0f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e5929727f25e3cec44443f4f9fdf857cddc0f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "html_url": "https://github.com/rust-lang/rust/commit/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf", "html_url": "https://github.com/rust-lang/rust/commit/12ec2f0e34e230a5d95d7ef06c6de92efcdcbedf"}], "stats": {"total": 94, "additions": 38, "deletions": 56}, "files": [{"sha": "d2a54df10b5714d5dbff65714f90dffe805c7286", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -31,8 +31,8 @@ use rustc_middle::ty::subst::{GenericArgKind, SubstsRef, UserSubsts};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{\n     self, Binder, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, Dynamic,\n-    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, TraitObjectRepresentation, Ty, TyCtxt,\n-    UserType, UserTypeAnnotationIndex,\n+    OpaqueHiddenType, OpaqueTypeKey, RegionVid, ToPredicate, Ty, TyCtxt, UserType,\n+    UserTypeAnnotationIndex,\n };\n use rustc_span::def_id::CRATE_DEF_ID;\n use rustc_span::{Span, DUMMY_SP};\n@@ -2015,9 +2015,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         //\n                         // apply them to prove that the source type `Foo` implements `Clone` etc\n                         let (existential_predicates, region) = match ty.kind() {\n-                            Dynamic(predicates, region, TraitObjectRepresentation::Sized) => {\n-                                (predicates, region)\n-                            }\n+                            Dynamic(predicates, region, ty::DynStar) => (predicates, region),\n                             _ => panic!(\"Invalid dyn* cast_ty\"),\n                         };\n "}, {"sha": "59bae7f7e91fa7d0abb27730c0a7a110ae582b92", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -16,7 +16,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n-use rustc_middle::ty::{self, Instance, TraitObjectRepresentation, Ty, TypeVisitable};\n+use rustc_middle::ty::{self, Instance, Ty, TypeVisitable};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, Symbol};\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n@@ -398,7 +398,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let (drop_fn, fn_abi) = match ty.kind() {\n             // FIXME(eddyb) perhaps move some of this logic into\n             // `Instance::resolve_drop_in_place`?\n-            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) => {\n+            ty::Dynamic(_, _, ty::Dyn) => {\n                 // IN THIS ARM, WE HAVE:\n                 // ty = *mut (dyn Trait)\n                 // which is: exists<T> ( *mut T,    Vtable<T: Trait> )\n@@ -428,7 +428,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     fn_abi,\n                 )\n             }\n-            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n+            ty::Dynamic(_, _, ty::DynStar) => {\n                 // IN THIS ARM, WE HAVE:\n                 // ty = *mut (dyn* Trait)\n                 // which is: *mut exists<T: sizeof(T) == sizeof(usize)> (T, Vtable<T: Trait>)"}, {"sha": "56852b0fcc821e1107d918da2dbfd05f1f9745df", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             OperandValue::Pair(_, _) => todo!(),\n                         };\n                         let trait_ref =\n-                            if let ty::Dynamic(data, _, ty::TraitObjectRepresentation::Sized) = cast.ty.kind() {\n+                            if let ty::Dynamic(data, _, ty::DynStar) = cast.ty.kind() {\n                                 data.principal()\n                             } else {\n                                 bug!(\"Only valid to do a DynStar cast into a DynStar type\")"}, {"sha": "5301266b82452b4179f6c4928b771fd49300b330", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -110,7 +110,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             DynStar => {\n-                if let ty::Dynamic(data, _, ty::TraitObjectRepresentation::Sized) = cast_ty.kind() {\n+                if let ty::Dynamic(data, _, ty::DynStar) = cast_ty.kind() {\n                     // Initial cast from sized to dyn trait\n                     let vtable = self.get_vtable_ptr(src.layout.ty, data.principal())?;\n                     let ptr = self.read_immediate(src)?.to_scalar();"}, {"sha": "981e2d3b6d2d3ea952bb49c047ea9c792985698d", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -4,7 +4,6 @@\n use crate::ty::{self, Ty};\n \n use rustc_macros::HashStable;\n-use rustc_type_ir::TraitObjectRepresentation;\n \n /// Types that are represented as ints.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -71,7 +70,7 @@ impl<'tcx> CastTy<'tcx> {\n             ty::Adt(d, _) if d.is_enum() && d.is_payloadfree() => Some(CastTy::Int(IntTy::CEnum)),\n             ty::RawPtr(mt) => Some(CastTy::Ptr(mt)),\n             ty::FnPtr(..) => Some(CastTy::FnPtr),\n-            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => Some(CastTy::DynStar),\n+            ty::Dynamic(_, _, ty::DynStar) => Some(CastTy::DynStar),\n             _ => None,\n         }\n     }"}, {"sha": "93597034721503651ed572fe8b8c53311ee5d949", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -63,9 +63,7 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{Layout, LayoutS, TargetDataLayout, VariantIdx};\n use rustc_target::spec::abi;\n use rustc_type_ir::sty::TyKind::*;\n-use rustc_type_ir::{\n-    InternAs, InternIteratorElement, Interner, TraitObjectRepresentation, TypeFlags,\n-};\n+use rustc_type_ir::{DynKind, InternAs, InternIteratorElement, Interner, TypeFlags};\n \n use std::any::Any;\n use std::borrow::Borrow;\n@@ -2547,7 +2545,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,\n         reg: ty::Region<'tcx>,\n-        repr: TraitObjectRepresentation,\n+        repr: DynKind,\n     ) -> Ty<'tcx> {\n         self.mk_ty(Dynamic(obj, reg, repr))\n     }"}, {"sha": "922891ecc3435dca5dbb22702aef329e9d6f1932", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -21,7 +21,6 @@ use rustc_target::abi::call::{\n };\n use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy, Target};\n-use rustc_type_ir::TraitObjectRepresentation;\n \n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -626,7 +625,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.intern_layout(self.scalar_pair(data_ptr, metadata))\n             }\n \n-            ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n+            ty::Dynamic(_, _, ty::DynStar) => {\n                 let mut pointer = scalar_unit(Pointer);\n                 pointer.valid_range_mut().start = 1;\n                 let mut vtable = scalar_unit(Pointer);\n@@ -688,7 +687,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n             // Odd unit types.\n             ty::FnDef(..) => univariant(&[], &ReprOptions::default(), StructKind::AlwaysSized)?,\n-            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) | ty::Foreign(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) | ty::Foreign(..) => {\n                 let mut unit = self.univariant_uninterned(\n                     ty,\n                     &[],\n@@ -2444,7 +2443,7 @@ where\n                 | ty::FnDef(..)\n                 | ty::GeneratorWitness(..)\n                 | ty::Foreign(..)\n-                | ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) => {\n+                | ty::Dynamic(_, _, ty::Dyn) => {\n                     bug!(\"TyAndLayout::field({:?}): not applicable\", this)\n                 }\n \n@@ -2546,9 +2545,7 @@ where\n                 }\n \n                 // dyn* (both fields are usize-sized)\n-                ty::Dynamic(_, _, TraitObjectRepresentation::Sized) => {\n-                    TyMaybeWithLayout::Ty(tcx.types.usize)\n-                }\n+                ty::Dynamic(_, _, ty::DynStar) => TyMaybeWithLayout::Ty(tcx.types.usize),\n \n                 ty::Projection(_)\n                 | ty::Bound(..)"}, {"sha": "e80cc2ed5fab7c02788baa37536a1468c7c52a81", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -58,6 +58,7 @@ use std::ops::ControlFlow;\n use std::{fmt, str};\n \n pub use crate::ty::diagnostics::*;\n+pub use rustc_type_ir::DynKind::*;\n pub use rustc_type_ir::InferTy::*;\n pub use rustc_type_ir::RegionKind::*;\n pub use rustc_type_ir::TyKind::*;"}, {"sha": "f7d5d3116afb71300e9e2788be8e266e88e13e7a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -16,7 +16,6 @@ use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n-use rustc_type_ir::TraitObjectRepresentation;\n \n use std::cell::Cell;\n use std::char;\n@@ -626,8 +625,8 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(\"(\");\n                 }\n                 match repr {\n-                    TraitObjectRepresentation::Unsized => p!(\"dyn \"),\n-                    TraitObjectRepresentation::Sized => p!(\"dyn* \"),\n+                    ty::Dyn => p!(\"dyn \"),\n+                    ty::DynStar => p!(\"dyn* \"),\n                 }\n                 p!(print(data));\n                 if print_r {"}, {"sha": "18169045c901cf513ec0e509f86090874fdc9ccc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -31,7 +31,7 @@ use ty::util::IntTypeExt;\n \n use rustc_type_ir::sty::TyKind::*;\n use rustc_type_ir::RegionKind as IrRegionKind;\n-use rustc_type_ir::{TraitObjectRepresentation, TyKind as IrTyKind};\n+use rustc_type_ir::TyKind as IrTyKind;\n \n // Re-export the `TyKind` from `rustc_type_ir` here for convenience\n #[rustc_diagnostic_item = \"TyKind\"]\n@@ -1852,12 +1852,12 @@ impl<'tcx> Ty<'tcx> {\n \n     #[inline]\n     pub fn is_trait(self) -> bool {\n-        matches!(self.kind(), Dynamic(_, _, TraitObjectRepresentation::Unsized))\n+        matches!(self.kind(), Dynamic(_, _, ty::Dyn))\n     }\n \n     #[inline]\n     pub fn is_dyn_star(self) -> bool {\n-        matches!(self.kind(), Dynamic(_, _, TraitObjectRepresentation::Sized))\n+        matches!(self.kind(), Dynamic(_, _, ty::DynStar))\n     }\n \n     #[inline]"}, {"sha": "4e7eba2d02fef2571989f099f9273785166d16d4", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -189,8 +189,7 @@ use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n-    self, GenericParamDefKind, Instance, TraitObjectRepresentation, Ty, TyCtxt, TypeFoldable,\n-    TypeVisitable, VtblEntry,\n+    self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n };\n use rustc_middle::{middle::codegen_fn_attrs::CodegenFnAttrFlags, mir::visit::TyContext};\n use rustc_session::config::EntryFnType;\n@@ -1115,9 +1114,7 @@ fn find_vtable_types_for_unsizing<'tcx>(\n         }\n \n         // T as dyn* Trait\n-        (_, &ty::Dynamic(_, _, TraitObjectRepresentation::Sized)) => {\n-            ptr_vtable(source_ty, target_ty)\n-        }\n+        (_, &ty::Dynamic(_, _, ty::DynStar)) => ptr_vtable(source_ty, target_ty),\n \n         (&ty::Adt(source_adt_def, source_substs), &ty::Adt(target_adt_def, target_substs)) => {\n             assert_eq!(source_adt_def, target_adt_def);"}, {"sha": "f2779ce2db140afbd75f212334508d5e5cec7178", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -20,8 +20,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::abstract_const::{walk_abstract_const, AbstractConst};\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, EarlyBinder, TraitObjectRepresentation, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable,\n-    TypeVisitor,\n+    self, EarlyBinder, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -601,8 +600,7 @@ fn object_ty_for_trait<'tcx>(\n     let existential_predicates = tcx\n         .mk_poly_existential_predicates(iter::once(trait_predicate).chain(projection_predicates));\n \n-    let object_ty =\n-        tcx.mk_dynamic(existential_predicates, lifetime, TraitObjectRepresentation::Unsized);\n+    let object_ty = tcx.mk_dynamic(existential_predicates, lifetime, ty::Dyn);\n \n     debug!(\"object_ty_for_trait: object_ty=`{}`\", object_ty);\n "}, {"sha": "9efc95b4405cea59184ca4295076723582423acc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -38,7 +38,6 @@ use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n-use rustc_middle::ty::TraitObjectRepresentation;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_span::symbol::sym;\n@@ -1866,7 +1865,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Array(..)\n             | ty::Closure(..)\n             | ty::Never\n-            | ty::Dynamic(_, _, TraitObjectRepresentation::Sized)\n+            | ty::Dynamic(_, _, ty::DynStar)\n             | ty::Error(_) => {\n                 // safe for everything\n                 Where(ty::Binder::dummy(Vec::new()))"}, {"sha": "f8090cd9dd83177afbc1f3dc2067ec1e67da0680", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -20,16 +20,16 @@ use rustc_serialize::{Decodable, Decoder, Encodable};\n \n /// Specifies how a trait object is represented.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n-pub enum TraitObjectRepresentation {\n+pub enum DynKind {\n     /// An unsized `dyn Trait` object\n-    Unsized,\n+    Dyn,\n     /// A sized `dyn* Trait` object\n-    Sized,\n+    DynStar,\n }\n \n // Manually implemented because deriving HashStable requires rustc_query_system, which would\n // create a cyclic dependency.\n-impl<CTX> HashStable<CTX> for TraitObjectRepresentation {\n+impl<CTX> HashStable<CTX> for DynKind {\n     fn hash_stable(\n         &self,\n         hcx: &mut CTX,\n@@ -116,7 +116,7 @@ pub enum TyKind<I: Interner> {\n     FnPtr(I::PolyFnSig),\n \n     /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.\n-    Dynamic(I::ListBinderExistentialPredicate, I::Region, TraitObjectRepresentation),\n+    Dynamic(I::ListBinderExistentialPredicate, I::Region, DynKind),\n \n     /// The anonymous type of a closure. Used to represent the type of `|a| a`.\n     ///"}, {"sha": "38128081e85429663af78925fecc57a0021a4126", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -27,8 +27,8 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use rustc_middle::ty::DynKind;\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::TraitObjectRepresentation;\n use rustc_middle::ty::{\n     self, Const, DefIdTree, EarlyBinder, IsSuggestable, Ty, TyCtxt, TypeVisitable,\n };\n@@ -1253,7 +1253,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n         lifetime: &hir::Lifetime,\n         borrowed: bool,\n-        representation: TraitObjectRepresentation,\n+        representation: DynKind,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx();\n \n@@ -2623,10 +2623,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::TraitObject(bounds, ref lifetime, repr) => {\n                 self.maybe_lint_bare_trait(ast_ty, in_path);\n                 let repr = match repr {\n-                    TraitObjectSyntax::Dyn | TraitObjectSyntax::None => {\n-                        TraitObjectRepresentation::Unsized\n-                    }\n-                    TraitObjectSyntax::DynStar => TraitObjectRepresentation::Sized,\n+                    TraitObjectSyntax::Dyn | TraitObjectSyntax::None => ty::Dyn,\n+                    TraitObjectSyntax::DynStar => ty::DynStar,\n                 };\n                 self.conv_object_ty_poly_trait_ref(ast_ty.span, bounds, lifetime, borrowed, repr)\n             }"}, {"sha": "640aa8c65ed83cf73c37996e627a2225f8abc5f5", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2ed2dcaaedf0a96dece85a5409b3a1f30a84360/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=b2ed2dcaaedf0a96dece85a5409b3a1f30a84360", "patch": "@@ -41,9 +41,7 @@ use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{\n-    self, Binder, TraitObjectRepresentation, Ty, TypeAndMut, TypeVisitable, VariantDef,\n-};\n+use rustc_middle::ty::{self, Binder, Ty, TypeAndMut, TypeVisitable, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -241,7 +239,7 @@ fn check_dyn_star_cast<'tcx>(\n     //\n     // this would return `existential_predicates = [?Self: Clone, ?Self: Debug]` and `region = 'static`.\n     let (existential_predicates, region) = match cast_ty.kind() {\n-        ty::Dynamic(predicates, region, TraitObjectRepresentation::Sized) => (predicates, region),\n+        ty::Dynamic(predicates, region, ty::DynStar) => (predicates, region),\n         _ => panic!(\"Invalid dyn* cast_ty\"),\n     };\n \n@@ -289,7 +287,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         // cases now. We do a more thorough check at the end, once\n         // inference is more completely known.\n         match cast_ty.kind() {\n-            ty::Dynamic(_, _, TraitObjectRepresentation::Unsized) | ty::Slice(..) => {\n+            ty::Dynamic(_, _, ty::Dyn) | ty::Slice(..) => {\n                 let reported = check.report_cast_to_unsized_type(fcx);\n                 Err(reported)\n             }"}]}