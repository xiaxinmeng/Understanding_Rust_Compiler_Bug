{"sha": "ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "node_id": "C_kwDOAAsO6NoAKGRkZjIzY2JlYmFhNzQ4OTdhM2IxZDFmMTQ0NjNmZTIxYjE3MWZkZWI", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-08-17T10:21:03Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-08-17T10:21:03Z"}, "message": "add new test and combine old ones", "tree": {"sha": "b651868fadc1dd58ff39c4a20e0f278d591654e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b651868fadc1dd58ff39c4a20e0f278d591654e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "html_url": "https://github.com/rust-lang/rust/commit/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "html_url": "https://github.com/rust-lang/rust/commit/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5"}], "stats": {"total": 112, "additions": 65, "deletions": 47}, "files": [{"sha": "3053d97345320d8e28e6487c84b5b72080c7aa02", "filename": "src/test/ui/or-patterns/inner-or-pat-2.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-2.rs?ref=661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "patch": "@@ -1,13 +0,0 @@\n-#[allow(unused_variables)]\n-#[allow(unused_parens)]\n-fn main() {\n-    let x = \"foo\";\n-    match x {\n-        x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | () | \"nop\") | (\"hey\" | \"gg\")) |\n-        //~^ ERROR mismatched types\n-        x @ (\"black\" | \"pink\") |\n-        x @ (\"red\" | \"blue\") => {\n-        }\n-        _ => (),\n-    }\n-}"}, {"sha": "f6fe8a4dd59dc7a33feae238ac5d2d2cba35b4d5", "filename": "src/test/ui/or-patterns/inner-or-pat-3.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-3.rs?ref=661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "patch": "@@ -1,15 +0,0 @@\n-// run-pass\n-\n-#[allow(unreachable_patterns)]\n-#[allow(unused_variables)]\n-#[allow(unused_parens)]\n-fn main() {\n-    let x = \"foo\";\n-\n-    match x {\n-        x @ (\"foo\" | \"bar\") |\n-        (x @ \"red\" | (x @ \"blue\" | x @ \"red\")) => {\n-        }\n-        _ => (),\n-    }\n-}"}, {"sha": "fe771e2e9301f252bfe1fcf32b078b2141649630", "filename": "src/test/ui/or-patterns/inner-or-pat-4.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661d488bfd7cd4888400a23b9f6ea9bb15cacaf5/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat-4.rs?ref=661d488bfd7cd4888400a23b9f6ea9bb15cacaf5", "patch": "@@ -1,13 +0,0 @@\n-#[allow(unused_variables)]\n-#[allow(unused_parens)]\n-fn main() {\n-    let x = \"foo\";\n-\n-    match x {\n-        x @ (\"foo\" | \"bar\") |\n-        (x @ \"red\" | (x @ \"blue\" |  \"red\")) => {\n-        //~^ variable `x` is not bound in all patterns\n-        }\n-        _ => (),\n-    }\n-}"}, {"sha": "2236a38c37b2bf0ff9b56beba8e19fe3accfa7f0", "filename": "src/test/ui/or-patterns/inner-or-pat.or3.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr?ref=ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/inner-or-pat-2.rs:6:54\n+  --> $DIR/inner-or-pat.rs:38:54\n    |\n LL |     match x {\n    |           - this expression has type `&str`", "previous_filename": "src/test/ui/or-patterns/inner-or-pat-2.stderr"}, {"sha": "058873ff5ff9e13c735be21f5e4dd6c3feb656b7", "filename": "src/test/ui/or-patterns/inner-or-pat.or4.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr?ref=ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "patch": "@@ -1,5 +1,5 @@\n error[E0408]: variable `x` is not bound in all patterns\n-  --> $DIR/inner-or-pat-4.rs:8:37\n+  --> $DIR/inner-or-pat.rs:53:37\n    |\n LL |         (x @ \"red\" | (x @ \"blue\" |  \"red\")) => {\n    |                       -             ^^^^^ pattern doesn't bind `x`", "previous_filename": "src/test/ui/or-patterns/inner-or-pat-4.stderr"}, {"sha": "f4cf4b0c188902e09fe6d17d089a83d1179c9049", "filename": "src/test/ui/or-patterns/inner-or-pat.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs?ref=ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "patch": "@@ -1,8 +1,16 @@\n-// run-pass\n+// revisions: or1 or2 or3 or4 or5\n+// [or1] run-pass\n+// [or2] run-pass\n+// [or5] run-pass\n \n-#[allow(unused_variables)]\n-#[allow(unused_parens)]\n-fn main() {\n+#![allow(unreachable_patterns)]\n+#![allow(unused_variables)]\n+#![allow(unused_parens)]\n+#![allow(dead_code)]\n+\n+\n+\n+fn foo() {\n     let x = \"foo\";\n     match x {\n         x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | \"no\" | \"nop\") | (\"hey\" | \"gg\")) |\n@@ -12,3 +20,54 @@ fn main() {\n         _ => (),\n     }\n }\n+\n+fn bar() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (\"foo\" | \"bar\") |\n+        (x @ \"red\" | (x @ \"blue\" | x @ \"red\")) => {\n+        }\n+        _ => (),\n+    }\n+}\n+\n+#[cfg(or3)]\n+fn zot() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | () | \"nop\") | (\"hey\" | \"gg\")) |\n+        //[or3]~^ ERROR mismatched types\n+        x @ (\"black\" | \"pink\") |\n+        x @ (\"red\" | \"blue\") => {\n+        }\n+        _ => (),\n+    }\n+}\n+\n+\n+#[cfg(or4)]\n+fn hey() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (\"foo\" | \"bar\") |\n+        (x @ \"red\" | (x @ \"blue\" |  \"red\")) => {\n+        //[or4]~^ variable `x` is not bound in all patterns\n+        }\n+        _ => (),\n+    }\n+}\n+\n+fn don() {\n+    enum Foo {\n+        A,\n+        B,\n+        C,\n+    }\n+\n+    match Foo::A {\n+        | _foo @ (Foo::A | Foo::B) => {}\n+        Foo::C => {}\n+    };\n+}\n+\n+fn main(){}"}]}