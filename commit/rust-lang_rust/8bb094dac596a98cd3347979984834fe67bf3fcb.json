{"sha": "8bb094dac596a98cd3347979984834fe67bf3fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjA5NGRhYzU5NmE5OGNkMzM0Nzk3OTk4NDgzNGZlNjdiZjNmY2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-30T17:19:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T01:33:59Z"}, "message": "Add more detail to type inference error\n\nWhen encountering code where type inference fails, add more actionable\ninformation:\n\n```\nfn main() {\n    let foo = Vec::new();\n}\n```\n\n```\nerror[E0282]: type annotations needed for `std::vec::Vec<_>`\n  --> $DIR/vector-no-ann.rs:2:16\n   |\nLL |     let foo = Vec::new();\n   |         ---   ^^^^^^^^ cannot infer type for `T`\n   |         |\n   |         consider giving `foo` the type `std::vec::Vec<_>` with the type parameter `T` specified\n```\n\nWe still need to modify type printing to optionally accept a\n`TypeVariableTable` in order to properly print `std::vec::Vec<T>`.\n\nCC #25633.", "tree": {"sha": "47aaf9ba899ba93541dc261700c641d90ba62b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47aaf9ba899ba93541dc261700c641d90ba62b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb094dac596a98cd3347979984834fe67bf3fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb094dac596a98cd3347979984834fe67bf3fcb", "html_url": "https://github.com/rust-lang/rust/commit/8bb094dac596a98cd3347979984834fe67bf3fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb094dac596a98cd3347979984834fe67bf3fcb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7840a0b753a065a41999f1fb6028f67d33e3fdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7840a0b753a065a41999f1fb6028f67d33e3fdd5", "html_url": "https://github.com/rust-lang/rust/commit/7840a0b753a065a41999f1fb6028f67d33e3fdd5"}], "stats": {"total": 124, "additions": 82, "deletions": 42}, "files": [{"sha": "173f916c2824ddf59b6b7f6cf28a8635de61746e", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -15,17 +15,18 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n+    found_ty: Option<Ty<'tcx>>,\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n-    fn node_matches_type(&mut self, hir_id: HirId) -> bool {\n+    fn node_matches_type(&mut self, hir_id: HirId) -> Option<Ty<'tcx>> {\n         let ty_opt = self.infcx.in_progress_tables.and_then(|tables| {\n             tables.borrow().node_type_opt(hir_id)\n         });\n         match ty_opt {\n             Some(ty) => {\n                 let ty = self.infcx.resolve_vars_if_possible(&ty);\n-                ty.walk().any(|inner_ty| {\n+                if ty.walk().any(|inner_ty| {\n                     inner_ty == self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n                         (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => {\n                             self.infcx\n@@ -35,9 +36,13 @@ impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n                         }\n                         _ => false,\n                     }\n-                })\n+                }) {\n+                    Some(ty)\n+                } else {\n+                    None\n+                }\n             }\n-            None => false,\n+            None => None,\n         }\n     }\n }\n@@ -48,16 +53,21 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n     }\n \n     fn visit_local(&mut self, local: &'gcx Local) {\n-        if self.found_local_pattern.is_none() && self.node_matches_type(local.hir_id) {\n+        if let (None, Some(ty)) = (self.found_local_pattern, self.node_matches_type(local.hir_id)) {\n             self.found_local_pattern = Some(&*local.pat);\n+            self.found_ty = Some(ty);\n         }\n         intravisit::walk_local(self, local);\n     }\n \n     fn visit_body(&mut self, body: &'gcx Body) {\n         for argument in &body.arguments {\n-            if self.found_arg_pattern.is_none() && self.node_matches_type(argument.hir_id) {\n+            if let (None, Some(ty)) = (\n+                self.found_arg_pattern,\n+                self.node_matches_type(argument.hir_id),\n+            ) {\n                 self.found_arg_pattern = Some(&*argument.pat);\n+                self.found_ty = Some(ty);\n             }\n         }\n         intravisit::walk_body(self, body);\n@@ -106,13 +116,18 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             hir_map: &self.tcx.hir(),\n             found_local_pattern: None,\n             found_arg_pattern: None,\n+            found_ty: None,\n         };\n \n         if let Some(body_id) = body_id {\n             let expr = self.tcx.hir().expect_expr_by_hir_id(body_id.hir_id);\n             local_visitor.visit_expr(expr);\n         }\n \n+        let ty_msg = match local_visitor.found_ty {\n+            Some(ty) if &ty.to_string() != \"_\" => format!(\" for `{}`\", ty),\n+            _ => String::new(),\n+        };\n         if let Some(pattern) = local_visitor.found_arg_pattern {\n             err_span = pattern.span;\n             // We don't want to show the default label for closures.\n@@ -131,13 +146,35 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             //          ^ consider giving this closure parameter a type\n             // ```\n             labels.clear();\n-            labels.push(\n-                (pattern.span, \"consider giving this closure parameter a type\".to_owned()));\n+            labels.push((pattern.span, format!(\n+                \"consider giving this closure parameter {}\",\n+                match local_visitor.found_ty {\n+                    Some(ty) if &ty.to_string() != \"_\" => format!(\n+                        \"the type `{}` with the type parameter `{}` specified\",\n+                        ty,\n+                        name,\n+                    ),\n+                    _ => \"a type\".to_owned(),\n+                },\n+            )));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.compiler_desugaring_kind() {\n-                    None => labels.push((pattern.span,\n-                                         format!(\"consider giving `{}` a type\", simple_ident))),\n+                    None => labels.push((\n+                        pattern.span,\n+                        format!(\n+                            \"consider giving `{}` {}\",\n+                            simple_ident,\n+                            match local_visitor.found_ty {\n+                                Some(ty) if &ty.to_string() != \"_\" => format!(\n+                                    \"the type `{}` with the type parameter `{}` specified\",\n+                                    ty,\n+                                    name,\n+                                ),\n+                                _ => \"a type\".to_owned(),\n+                            },\n+                        ),\n+                    )),\n                     Some(CompilerDesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n                         \"the element type for this iterator is not specified\".to_owned(),\n@@ -147,12 +184,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             } else {\n                 labels.push((pattern.span, \"consider giving the pattern a type\".to_owned()));\n             }\n-        }\n+        };\n \n-        let mut err = struct_span_err!(self.tcx.sess,\n-                                       err_span,\n-                                       E0282,\n-                                       \"type annotations needed\");\n+        let mut err = struct_span_err!(\n+            self.tcx.sess,\n+            err_span,\n+            E0282,\n+            \"type annotations needed{}\",\n+            ty_msg,\n+        );\n \n         for (target_span, label_message) in labels {\n             err.span_label(target_span, label_message);"}, {"sha": "86128ed94bd71f5d90ea8029714152b239143682", "filename": "src/test/ui/issues/issue-12187-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.rs?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -4,5 +4,5 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "77aa736873b5cec2da7a9519d289df9182d18cb9", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&_`\n   --> $DIR/issue-12187-1.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "080a6206be76df188986bb11f8c12b367e2f7ebf", "filename": "src/test/ui/issues/issue-12187-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.rs?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -4,5 +4,5 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "4953c2b11b50a946b072d8dcfd37100ef3ba5351", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&_`\n   --> $DIR/issue-12187-2.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "3e99d307b3b6ab3c08a81b9ae5e44962df0ad5d8", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `B<_>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n    |         ---   ^ cannot infer type for `T`\n    |         |\n-   |         consider giving `foo` a type\n+   |         consider giving `foo` the type `B<_>` with the type parameter `T` specified\n \n error: aborting due to previous error\n "}, {"sha": "c6c3f32dfe7d8f3a8a8f8fe6a578dd16acc9bb24", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&(_,)`\n   --> $DIR/issue-20261.rs:4:11\n    |\n LL |     for (ref i,) in [].iter() {"}, {"sha": "2ce775764045aa682601eaed388d3772dfa131a9", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `Expr<'_, _>`\n   --> $DIR/issue-23046.rs:17:15\n    |\n LL |     let ex = |x| {\n-   |               ^ consider giving this closure parameter a type\n+   |               ^ consider giving this closure parameter the type `Expr<'_, _>` with the type parameter `VAR` specified\n \n error: aborting due to previous error\n "}, {"sha": "3b2c3bfe4ff958d0f4f5b19ffab342b70896ad1b", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();"}, {"sha": "8e2a69dd9e30cea6a8ef7e6b5d64de4c25943640", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `&[_; 0]`\n   --> $DIR/issue-7813.rs:2:13\n    |\n LL |     let v = &[];\n    |         -   ^^^ cannot infer type\n    |         |\n-   |         consider giving `v` a type\n+   |         consider giving `v` the type `&[_; 0]` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "e33f23c64dbe14a33fcea4afa6d6236bb07d1ca4", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -22,7 +22,7 @@ impl Foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n     x.foo();\n }\n "}, {"sha": "bae675526bd1fde4673e06ee8793ed538a14f6b4", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<_>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n    |         -----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `std::vec::Vec<_>` with the type parameter `T` specified\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "9b0d56e38b768d19db94b7450c44d9bb1ecafc52", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::option::Option<_>`\n   --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n    |\n LL |     let x: Option<_> = None;\n-   |         - consider giving `x` a type\n+   |         - consider giving `x` the type `std::option::Option<_>` with the type parameter `T` specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n    |     ^^^^^^^^^^ cannot infer type for `T`\n    |"}, {"sha": "115808b3b3e8e56a9a0569e4056d3eccb89d80ce", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `[_; 0]`\n   --> $DIR/cannot_infer_local_or_array.rs:2:13\n    |\n LL |     let x = [];\n    |         -   ^^ cannot infer type\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `[_; 0]` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "49b4330b51e2d1feb570225ae4390e06fd840a56", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<_>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n    |         -   ^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `std::vec::Vec<_>` with the type parameter `T` specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "57eb185a36af2bb299bea3cb78e9bcdd39cf2b31", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `(std::vec::Vec<_>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );"}, {"sha": "d0d8aed0cb8d834f767a88759169a2f971a5ab38", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::option::Option<_>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;\n-   |         ------------ consider giving `closure0` a type\n+   |         ------------ consider giving `closure0` the type `std::option::Option<_>` with the type parameter `_` specified\n ...\n LL |                         return c();\n    |                                ^^^ cannot infer type"}, {"sha": "1f11d9c8dffc7e044eecf357059b4b7b77c8a744", "filename": "src/test/ui/vector-no-ann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.rs?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR type annotations needed [E0282]\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "6aa925e07157f8ee89975bac9b5c3d10a4cf5c01", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb094dac596a98cd3347979984834fe67bf3fcb/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=8bb094dac596a98cd3347979984834fe67bf3fcb", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed\n+error[E0282]: type annotations needed for `std::vec::Vec<_>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n    |         ----   ^^^^^^^^ cannot infer type for `T`\n    |         |\n-   |         consider giving `_foo` a type\n+   |         consider giving `_foo` the type `std::vec::Vec<_>` with the type parameter `T` specified\n \n error: aborting due to previous error\n "}]}