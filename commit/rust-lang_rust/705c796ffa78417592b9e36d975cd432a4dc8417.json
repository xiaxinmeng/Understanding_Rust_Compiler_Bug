{"sha": "705c796ffa78417592b9e36d975cd432a4dc8417", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNWM3OTZmZmE3ODQxNzU5MmI5ZTM2ZDk3NWNkNDMyYTRkYzg0MTc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-22T22:07:09Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-22T22:08:56Z"}, "message": "remove obsolete purity workarounds", "tree": {"sha": "d63888e2cef3056a8276149f660a05441d2c1b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63888e2cef3056a8276149f660a05441d2c1b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/705c796ffa78417592b9e36d975cd432a4dc8417", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/705c796ffa78417592b9e36d975cd432a4dc8417", "html_url": "https://github.com/rust-lang/rust/commit/705c796ffa78417592b9e36d975cd432a4dc8417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/705c796ffa78417592b9e36d975cd432a4dc8417/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8c3b42326c17d59204106d120508969e2b338c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8c3b42326c17d59204106d120508969e2b338c", "html_url": "https://github.com/rust-lang/rust/commit/0c8c3b42326c17d59204106d120508969e2b338c"}], "stats": {"total": 218, "additions": 101, "deletions": 117}, "files": [{"sha": "ff00d26882d32f22aaff4bef7f2047f1e5235dab", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/705c796ffa78417592b9e36d975cd432a4dc8417/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705c796ffa78417592b9e36d975cd432a4dc8417/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=705c796ffa78417592b9e36d975cd432a4dc8417", "patch": "@@ -112,7 +112,7 @@ pub impl <T:Ord> PriorityQueue<T> {\n         while end > 1 {\n             end -= 1;\n             q.data[end] <-> q.data[0];\n-            unsafe { q.siftdown_range(0, end) } // purity-checking workaround\n+            q.siftdown_range(0, end)\n         }\n         q.to_vec()\n     }\n@@ -126,7 +126,7 @@ pub impl <T:Ord> PriorityQueue<T> {\n         let mut n = q.len() / 2;\n         while n > 0 {\n             n -= 1;\n-            unsafe { q.siftdown(n) }; // purity-checking workaround\n+            q.siftdown(n)\n         }\n         q\n     }"}, {"sha": "242ffd07881dee00fb445e1dccaf01ba94916671", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 99, "deletions": 115, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/705c796ffa78417592b9e36d975cd432a4dc8417/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/705c796ffa78417592b9e36d975cd432a4dc8417/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=705c796ffa78417592b9e36d975cd432a4dc8417", "patch": "@@ -43,11 +43,9 @@ impl<K: Eq + TotalOrd, V: Eq> Eq for TreeMap<K, V> {\n             let mut x = self.iter();\n             let mut y = other.iter();\n             for self.len().times {\n-                unsafe { // unsafe as a purity workaround\n-                    if map_next(&mut x).unwrap() !=\n-                       map_next(&mut y).unwrap() {\n-                        return false\n-                    }\n+                if map_next(&mut x).unwrap() !=\n+                   map_next(&mut y).unwrap() {\n+                    return false\n                 }\n             }\n             true\n@@ -64,12 +62,10 @@ fn lt<K: Ord + TotalOrd, V>(a: &TreeMap<K, V>,\n \n     let (a_len, b_len) = (a.len(), b.len());\n     for uint::min(a_len, b_len).times {\n-        unsafe { // purity workaround\n-            let (key_a,_) = map_next(&mut x).unwrap();\n-            let (key_b,_) = map_next(&mut y).unwrap();\n-            if *key_a < *key_b { return true; }\n-            if *key_a > *key_b { return false; }\n-        }\n+        let (key_a,_) = map_next(&mut x).unwrap();\n+        let (key_b,_) = map_next(&mut y).unwrap();\n+        if *key_a < *key_b { return true; }\n+        if *key_a > *key_b { return false; }\n     };\n \n     a_len < b_len\n@@ -311,17 +307,15 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     fn is_disjoint(&self, other: &TreeSet<T>) -> bool {\n         let mut x = self.iter();\n         let mut y = other.iter();\n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n-            while a.is_some() && b.is_some() {\n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n-                match a1.cmp(b1) {\n-                  Less => a = set_next(&mut x),\n-                  Greater => b = set_next(&mut y),\n-                  Equal => return false\n-                }\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n+        while a.is_some() && b.is_some() {\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n+            match a1.cmp(b1) {\n+              Less => a = set_next(&mut x),\n+              Greater => b = set_next(&mut y),\n+              Equal => return false\n             }\n         }\n         true\n@@ -337,25 +331,23 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n     fn is_superset(&self, other: &TreeSet<T>) -> bool {\n         let mut x = self.iter();\n         let mut y = other.iter();\n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n-            while b.is_some() {\n-                if a.is_none() {\n-                    return false\n-                }\n-\n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n+        while b.is_some() {\n+            if a.is_none() {\n+                return false\n+            }\n \n-                match a1.cmp(b1) {\n-                  Less => (),\n-                  Greater => return false,\n-                  Equal => b = set_next(&mut y),\n-                }\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n \n-                a = set_next(&mut x);\n+            match a1.cmp(b1) {\n+              Less => (),\n+              Greater => return false,\n+              Equal => b = set_next(&mut y),\n             }\n+\n+            a = set_next(&mut x);\n         }\n         true\n     }\n@@ -365,29 +357,27 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n         let mut x = self.iter();\n         let mut y = other.iter();\n \n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n \n-            while a.is_some() {\n-                if b.is_none() {\n-                    return do a.while_some() |a1| {\n-                        if f(a1) { set_next(&mut x) } else { None }\n-                    }\n+        while a.is_some() {\n+            if b.is_none() {\n+                return do a.while_some() |a1| {\n+                    if f(a1) { set_next(&mut x) } else { None }\n                 }\n+            }\n \n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n \n-                let cmp = a1.cmp(b1);\n+            let cmp = a1.cmp(b1);\n \n-                if cmp == Less {\n-                    if !f(a1) { return }\n-                    a = set_next(&mut x);\n-                } else {\n-                    if cmp == Equal { a = set_next(&mut x) }\n-                    b = set_next(&mut y);\n-                }\n+            if cmp == Less {\n+                if !f(a1) { return }\n+                a = set_next(&mut x);\n+            } else {\n+                if cmp == Equal { a = set_next(&mut x) }\n+                b = set_next(&mut y);\n             }\n         }\n     }\n@@ -398,37 +388,35 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n         let mut x = self.iter();\n         let mut y = other.iter();\n \n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n \n-            while a.is_some() {\n-                if b.is_none() {\n-                    return do a.while_some() |a1| {\n-                        if f(a1) { set_next(&mut x) } else { None }\n-                    }\n+        while a.is_some() {\n+            if b.is_none() {\n+                return do a.while_some() |a1| {\n+                    if f(a1) { set_next(&mut x) } else { None }\n                 }\n+            }\n \n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n \n-                let cmp = a1.cmp(b1);\n+            let cmp = a1.cmp(b1);\n \n-                if cmp == Less {\n-                    if !f(a1) { return }\n-                    a = set_next(&mut x);\n+            if cmp == Less {\n+                if !f(a1) { return }\n+                a = set_next(&mut x);\n+            } else {\n+                if cmp == Greater {\n+                    if !f(b1) { return }\n                 } else {\n-                    if cmp == Greater {\n-                        if !f(b1) { return }\n-                    } else {\n-                        a = set_next(&mut x);\n-                    }\n-                    b = set_next(&mut y);\n+                    a = set_next(&mut x);\n                 }\n+                b = set_next(&mut y);\n             }\n-            do b.while_some |b1| {\n-                if f(b1) { set_next(&mut y) } else { None }\n-            }\n+        }\n+        do b.while_some |b1| {\n+            if f(b1) { set_next(&mut y) } else { None }\n         }\n     }\n \n@@ -437,24 +425,22 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n         let mut x = self.iter();\n         let mut y = other.iter();\n \n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n \n-            while a.is_some() && b.is_some() {\n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n+        while a.is_some() && b.is_some() {\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n \n-                let cmp = a1.cmp(b1);\n+            let cmp = a1.cmp(b1);\n \n-                if cmp == Less {\n-                    a = set_next(&mut x);\n-                } else {\n-                    if cmp == Equal {\n-                        if !f(a1) { return }\n-                    }\n-                    b = set_next(&mut y);\n+            if cmp == Less {\n+                a = set_next(&mut x);\n+            } else {\n+                if cmp == Equal {\n+                    if !f(a1) { return }\n                 }\n+                b = set_next(&mut y);\n             }\n         }\n     }\n@@ -464,36 +450,34 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n         let mut x = self.iter();\n         let mut y = other.iter();\n \n-        unsafe { // purity workaround\n-            let mut a = set_next(&mut x);\n-            let mut b = set_next(&mut y);\n+        let mut a = set_next(&mut x);\n+        let mut b = set_next(&mut y);\n \n-            while a.is_some() {\n-                if b.is_none() {\n-                    return do a.while_some() |a1| {\n-                        if f(a1) { set_next(&mut x) } else { None }\n-                    }\n+        while a.is_some() {\n+            if b.is_none() {\n+                return do a.while_some() |a1| {\n+                    if f(a1) { set_next(&mut x) } else { None }\n                 }\n+            }\n \n-                let a1 = a.unwrap();\n-                let b1 = b.unwrap();\n+            let a1 = a.unwrap();\n+            let b1 = b.unwrap();\n \n-                let cmp = a1.cmp(b1);\n+            let cmp = a1.cmp(b1);\n \n-                if cmp == Greater {\n-                    if !f(b1) { return }\n+            if cmp == Greater {\n+                if !f(b1) { return }\n+                b = set_next(&mut y);\n+            } else {\n+                if !f(a1) { return }\n+                if cmp == Equal {\n                     b = set_next(&mut y);\n-                } else {\n-                    if !f(a1) { return }\n-                    if cmp == Equal {\n-                        b = set_next(&mut y);\n-                    }\n-                    a = set_next(&mut x);\n                 }\n+                a = set_next(&mut x);\n             }\n-            do b.while_some |b1| {\n-                if f(b1) { set_next(&mut y) } else { None }\n-            }\n+        }\n+        do b.while_some |b1| {\n+            if f(b1) { set_next(&mut y) } else { None }\n         }\n     }\n }"}]}