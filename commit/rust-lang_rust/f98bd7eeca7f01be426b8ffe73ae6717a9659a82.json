{"sha": "f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OGJkN2VlY2E3ZjAxYmU0MjZiOGZmZTczYWU2NzE3YTk2NTlhODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T17:38:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-22T17:38:15Z"}, "message": "Auto merge of #85078 - RalfJung:const_fn_unsize, r=oli-obk\n\nstabilize const_fn_unsize\n\nI will post a stabilization report and ask for FCP in https://github.com/rust-lang/rust/issues/64992.\nThis PR is for the implementation side of stabilization.\n\nr? `@oli-obk`\nFixes https://github.com/rust-lang/rust/issues/64992", "tree": {"sha": "3db235399455d1cf28eade2b5927b80da740e628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3db235399455d1cf28eade2b5927b80da740e628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "html_url": "https://github.com/rust-lang/rust/commit/f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "html_url": "https://github.com/rust-lang/rust/commit/ed20e1e533f70644bc583b3c4e4f85426b98bb4d"}, {"sha": "5c6f41e349a08e792d7635dc88a6ca9fc51050d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c6f41e349a08e792d7635dc88a6ca9fc51050d3", "html_url": "https://github.com/rust-lang/rust/commit/5c6f41e349a08e792d7635dc88a6ca9fc51050d3"}], "stats": {"total": 162, "additions": 45, "deletions": 117}, "files": [{"sha": "8061e0b83c0dc82671dc97d9103a9d8f55a03491", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -10,8 +10,8 @@\n )]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n+// On bootstrap bump, this will likely have to become const_fn_unsize\n #![cfg_attr(bootstrap, feature(const_fn))] // For the `transmute` in `P::new`\n-#![cfg_attr(not(bootstrap), feature(const_fn_unsize))] // For the `transmute` in `P::new`\n #![feature(const_fn_transmute)]\n #![feature(const_panic)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "945406aed4bb0b1788726710838deb96d2e40eb8", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -283,6 +283,8 @@ declare_features! (\n     (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n     /// Allows arbitrary expressions in key-value attributes at parse time.\n     (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n+    /// Allows unsizing coercions in `const fn`.\n+    (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "62d813041343fd59c83882258122966e325cdf83", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -644,9 +644,6 @@ declare_features! (\n     /// Allows trait bounds in `const fn`.\n     (active, const_fn_trait_bound, \"1.53.0\", Some(57563), None),\n \n-    /// Allows unsizing coercions in `const fn`.\n-    (active, const_fn_unsize, \"1.53.0\", Some(64992), None),\n-\n     /// Allows `async {}` expressions in const contexts.\n     (active, const_async_blocks, \"1.53.0\", Some(85368), None),\n "}, {"sha": "dcbc9c523dc1946f55687f59f0b8281d4f8e5d9e", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -541,30 +541,6 @@ impl NonConstOp for UnionAccess {\n     }\n }\n \n-/// See [#64992].\n-///\n-/// [#64992]: https://github.com/rust-lang/rust/issues/64992\n-#[derive(Debug)]\n-pub struct UnsizingCast;\n-impl NonConstOp for UnsizingCast {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        if ccx.const_kind() != hir::ConstContext::ConstFn {\n-            Status::Allowed\n-        } else {\n-            Status::Unstable(sym::const_fn_unsize)\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_fn_unsize,\n-            span,\n-            \"unsizing casts to types besides slices are not allowed in const fn\",\n-        )\n-    }\n-}\n-\n // Types that cannot appear in the signature or locals of a `const fn`.\n pub mod ty {\n     use super::*;"}, {"sha": "41d9d0d04b50cb71f41d5344a7f832055a872256", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -10,9 +10,7 @@ use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceC\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{\n-    self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt, TypeAndMut,\n-};\n+use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -636,17 +634,9 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 _,\n             ) => self.check_op(ops::FnPtrCast),\n \n-            Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, cast_ty) => {\n-                if let Some(TypeAndMut { ty, .. }) = cast_ty.builtin_deref(true) {\n-                    let unsized_ty = self.tcx.struct_tail_erasing_lifetimes(ty, self.param_env);\n-\n-                    // Casting/coercing things to slices is fine.\n-                    if let ty::Slice(_) | ty::Str = unsized_ty.kind() {\n-                        return;\n-                    }\n-                }\n-\n-                self.check_op(ops::UnsizingCast);\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => {\n+                // Nothing to check here (`check_local_or_return_ty` ensures no trait objects occur\n+                // in the type of any local, which also excludes casts).\n             }\n \n             Rvalue::Cast(CastKind::Misc, ref operand, cast_ty) => {"}, {"sha": "8a65c274ca933fb0aed2d17c3bffc539d4b2cc3e", "filename": "src/test/ui/consts/const_fn_unsize.gated.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.gated.stderr?ref=ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "patch": "@@ -1,8 +0,0 @@\n-error: fatal error triggered by #[rustc_error]\n-  --> $DIR/const_fn_unsize.rs:16:1\n-   |\n-LL | fn main() {}\n-   | ^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "01da57320c280a82d57e369d27a049800fe42cc2", "filename": "src/test/ui/consts/const_fn_unsize.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -1,16 +1,21 @@\n-// gate-test-const_fn_unsize\n-\n-// revisions: stock gated\n-\n-#![feature(rustc_attrs)]\n-#![cfg_attr(gated, feature(const_fn_unsize))]\n+// run-pass\n+#![feature(slice_ptr_len)]\n \n use std::ptr::NonNull;\n \n+#[allow(unused)]\n const fn test() {\n     let _x = NonNull::<[i32; 0]>::dangling() as NonNull<[i32]>;\n-    //[stock]~^ unsizing cast\n }\n \n-#[rustc_error]\n-fn main() {} //[gated]~ fatal error triggered by #[rustc_error]\n+// Regression test for #75118.\n+pub const fn dangling_slice<T>() -> NonNull<[T]> {\n+    NonNull::<[T; 1]>::dangling()\n+}\n+\n+const C: NonNull<[i32]> = dangling_slice();\n+\n+fn main() {\n+    assert_eq!(C.as_ptr(), NonNull::<[i32; 1]>::dangling().as_ptr() as *mut _);\n+    assert_eq!(C.as_ptr().len(), 1);\n+}"}, {"sha": "cc746d4f175cabd8a88254d95cef111a1b1dabd6", "filename": "src/test/ui/consts/const_fn_unsize.stock.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_unsize.stock.stderr?ref=ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n-  --> $DIR/const_fn_unsize.rs:11:14\n-   |\n-LL |     let _x = NonNull::<[i32; 0]>::dangling() as NonNull<[i32]>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b7904e6841b5d448a26b48b9916757fd99993bbd", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -133,13 +133,13 @@ const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n //~^ ERROR trait bounds other than `Sized`\n const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n //~^ ERROR trait bounds other than `Sized`\n-//~| ERROR unsizing cast\n-//~| ERROR unsizing cast\n \n const fn no_unsafe() { unsafe {} }\n \n const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-//~^ ERROR unsizing cast\n+//~^ ERROR trait bounds other than `Sized`\n+//~| ERROR trait bounds other than `Sized`\n+//~| ERROR trait bounds other than `Sized`\n \n const fn no_fn_ptrs(_x: fn()) {}\n //~^ ERROR function pointer"}, {"sha": "d31d4121936981f3b0b991c7a8905ad419d00d10", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -288,32 +288,32 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:134:63\n+error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:139:41\n    |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                               ^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:134:63\n+error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:139:42\n    |\n-LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n-   |                                                               ^^^\n+LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n-  --> $DIR/min_const_fn.rs:141:42\n+error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n+  --> $DIR/min_const_fn.rs:139:42\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n-   |                                          ^^^\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error[E0658]: function pointers cannot appear in constant functions\n   --> $DIR/min_const_fn.rs:144:21"}, {"sha": "6ca1e59b3af106815ab316f2ceb094b9a3e6084a", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.rs?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -10,6 +10,6 @@ const fn no_inner_dyn_trait2(x: Hide) {\n //~^ ERROR trait bounds other than `Sized`\n }\n const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n-//~^ ERROR unsizing cast\n+//~^ ERROR trait bounds other than `Sized`\n \n fn main() {}"}, {"sha": "ce844a2f0716425574d4188d2ee02ed39833055c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f98bd7eeca7f01be426b8ffe73ae6717a9659a82/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=f98bd7eeca7f01be426b8ffe73ae6717a9659a82", "patch": "@@ -7,14 +7,14 @@ LL |     x.0.field;\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n+error[E0658]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n    |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n+   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n+   = help: add `#![feature(const_fn_trait_bound)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "af6bc2d85fdd68770ecec1fd5167087415837af3", "filename": "src/test/ui/consts/unsizing-cast-non-null.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.rs?ref=ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "patch": "@@ -1,10 +0,0 @@\n-// Regression test for #75118.\n-\n-use std::ptr::NonNull;\n-\n-pub const fn dangling_slice<T>() -> NonNull<[T]> {\n-    NonNull::<[T; 0]>::dangling()\n-    //~^ ERROR: unsizing casts to types besides slices\n-}\n-\n-fn main() {}"}, {"sha": "79691cddfb40311e4e0bd6a29cdd704ec8a28e37", "filename": "src/test/ui/consts/unsizing-cast-non-null.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed20e1e533f70644bc583b3c4e4f85426b98bb4d/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funsizing-cast-non-null.stderr?ref=ed20e1e533f70644bc583b3c4e4f85426b98bb4d", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: unsizing casts to types besides slices are not allowed in const fn\n-  --> $DIR/unsizing-cast-non-null.rs:6:5\n-   |\n-LL |     NonNull::<[T; 0]>::dangling()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64992 <https://github.com/rust-lang/rust/issues/64992> for more information\n-   = help: add `#![feature(const_fn_unsize)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}]}