{"sha": "694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "node_id": "C_kwDOAAsO6NoAKDY5NGEwMTBhNWM1Yzc3ZjhhZWY4MjJkNWE3YjJmM2FiZWNlMWFkMzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-05T16:43:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-05T16:44:01Z"}, "message": "move DiagnosticArgFromDisplay into rustc_errors", "tree": {"sha": "d19d9841a507554743a01a346542918dbe8c41c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19d9841a507554743a01a346542918dbe8c41c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "html_url": "https://github.com/rust-lang/rust/commit/694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad57d8502435aeed18f489f6a40fe36bc7fa73f", "html_url": "https://github.com/rust-lang/rust/commit/0ad57d8502435aeed18f489f6a40fe36bc7fa73f"}], "stats": {"total": 67, "additions": 36, "deletions": 31}, "files": [{"sha": "17e6c9e9575fd28dd56922b981051a44233a4113", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "patch": "@@ -40,6 +40,26 @@ pub trait IntoDiagnosticArg {\n     fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n }\n \n+pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n+\n+impl IntoDiagnosticArg for DiagnosticArgFromDisplay<'_> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.0.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> From<&'a dyn fmt::Display> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a dyn fmt::Display) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n+impl<'a, T: fmt::Display> From<&'a T> for DiagnosticArgFromDisplay<'a> {\n+    fn from(t: &'a T) -> Self {\n+        DiagnosticArgFromDisplay(t)\n+    }\n+}\n+\n macro_rules! into_diagnostic_arg_using_display {\n     ($( $ty:ty ),+ $(,)?) => {\n         $("}, {"sha": "2d3155a70edb357ffd5eae3832c9122b15100307", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "patch": "@@ -371,8 +371,8 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n-    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n+    AddSubdiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgFromDisplay,\n+    DiagnosticArgValue, DiagnosticId, DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, LintDiagnosticBuilder};\n use std::backtrace::Backtrace;"}, {"sha": "aca7d770f3495c0b15a802856fb5b55fca8c6a8a", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "patch": "@@ -1,6 +1,4 @@\n-use std::fmt::Display;\n-\n-use rustc_errors::IntoDiagnosticArg;\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_span::{Span, Symbol};\n \n@@ -38,7 +36,7 @@ pub struct ItemIsPrivate<'a> {\n     #[label]\n     pub span: Span,\n     pub kind: &'a str,\n-    pub descr: FromDisplay<'a>,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -58,7 +56,7 @@ pub struct InPublicInterfaceTraits<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: FromDisplay<'a>,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -72,7 +70,7 @@ pub struct InPublicInterface<'a> {\n     pub span: Span,\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: FromDisplay<'a>,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     #[label(privacy::visibility_label)]\n     pub vis_span: Span,\n }\n@@ -81,7 +79,7 @@ pub struct InPublicInterface<'a> {\n #[lint(privacy::from_private_dep_in_public_interface)]\n pub struct FromPrivateDependencyInPublicInterface<'a> {\n     pub kind: &'a str,\n-    pub descr: FromDisplay<'a>,\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n     pub krate: Symbol,\n }\n \n@@ -90,13 +88,5 @@ pub struct FromPrivateDependencyInPublicInterface<'a> {\n pub struct PrivateInPublicLint<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n-    pub descr: FromDisplay<'a>,\n-}\n-\n-pub struct FromDisplay<'a>(pub &'a dyn Display);\n-\n-impl IntoDiagnosticArg for FromDisplay<'_> {\n-    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n-        self.0.to_string().into_diagnostic_arg()\n-    }\n+    pub descr: DiagnosticArgFromDisplay<'a>,\n }"}, {"sha": "c28d0569d4ce9390708e96233ad94a726b24275e", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/694a010a5c5c77f8aef822d5a7b2f3abece1ad36/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=694a010a5c5c77f8aef822d5a7b2f3abece1ad36", "patch": "@@ -38,9 +38,8 @@ use std::ops::ControlFlow;\n use std::{cmp, fmt, mem};\n \n use errors::{\n-    FieldIsPrivate, FieldIsPrivateLabel, FromDisplay, FromPrivateDependencyInPublicInterface,\n-    InPublicInterface, InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint,\n-    UnnamedItemIsPrivate,\n+    FieldIsPrivate, FieldIsPrivateLabel, FromPrivateDependencyInPublicInterface, InPublicInterface,\n+    InPublicInterfaceTraits, ItemIsPrivate, PrivateInPublicLint, UnnamedItemIsPrivate,\n };\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -1080,11 +1079,7 @@ impl<'tcx> TypePrivacyVisitor<'tcx> {\n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         let is_error = !self.item_is_accessible(def_id);\n         if is_error {\n-            self.tcx.sess.emit_err(ItemIsPrivate {\n-                span: self.span,\n-                kind,\n-                descr: FromDisplay(descr),\n-            });\n+            self.tcx.sess.emit_err(ItemIsPrivate { span: self.span, kind, descr: descr.into() });\n         }\n         is_error\n     }\n@@ -1257,7 +1252,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 let kind = kind.descr(def_id);\n                 let _ = match name {\n                     Some(name) => {\n-                        sess.emit_err(ItemIsPrivate { span, kind, descr: FromDisplay(&name) })\n+                        sess.emit_err(ItemIsPrivate { span, kind, descr: (&name).into() })\n                     }\n                     None => sess.emit_err(UnnamedItemIsPrivate { span, kind }),\n                 };\n@@ -1726,7 +1721,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                 self.tcx.def_span(self.item_def_id.to_def_id()),\n                 FromPrivateDependencyInPublicInterface {\n                     kind,\n-                    descr: FromDisplay(descr),\n+                    descr: descr.into(),\n                     krate: self.tcx.crate_name(def_id.krate),\n                 },\n             );\n@@ -1763,15 +1758,15 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr: FromDisplay(descr),\n+                        descr: descr.into(),\n                         vis_span,\n                     });\n                 } else {\n                     self.tcx.sess.emit_err(InPublicInterface {\n                         span,\n                         vis_descr,\n                         kind,\n-                        descr: FromDisplay(descr),\n+                        descr: descr.into(),\n                         vis_span,\n                     });\n                 }\n@@ -1780,7 +1775,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n-                    PrivateInPublicLint { vis_descr, kind, descr: FromDisplay(descr) },\n+                    PrivateInPublicLint { vis_descr, kind, descr: descr.into() },\n                 );\n             }\n         }"}]}