{"sha": "aa8931c61235d4ff3a87665229614da6ac0a0ee5", "node_id": "C_kwDOAAsO6NoAKGFhODkzMWM2MTIzNWQ0ZmYzYTg3NjY1MjI5NjE0ZGE2YWMwYTBlZTU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-16T18:48:28Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-22T06:52:12Z"}, "message": "Introduce subst_iter and subst_iter_copied on EarlyBinder", "tree": {"sha": "9824b793dc8bae557df8e845de2a9aa10ebf1349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9824b793dc8bae557df8e845de2a9aa10ebf1349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa8931c61235d4ff3a87665229614da6ac0a0ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa8931c61235d4ff3a87665229614da6ac0a0ee5", "html_url": "https://github.com/rust-lang/rust/commit/aa8931c61235d4ff3a87665229614da6ac0a0ee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa8931c61235d4ff3a87665229614da6ac0a0ee5/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eecde5850cade0c058dc12330081329b31a826c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eecde5850cade0c058dc12330081329b31a826c7", "html_url": "https://github.com/rust-lang/rust/commit/eecde5850cade0c058dc12330081329b31a826c7"}], "stats": {"total": 116, "additions": 59, "deletions": 57}, "files": [{"sha": "3469ec4767b7cdb685646b146f7517dadb1120bf", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -664,10 +664,7 @@ impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n             });\n             self.types.insert(proj.item_def_id, (infer_ty, proj.substs));\n             // Recurse into bounds\n-            for pred in self.tcx().bound_explicit_item_bounds(proj.item_def_id).transpose_iter() {\n-                let pred_span = pred.0.1;\n-\n-                let pred = pred.map_bound(|(pred, _)| *pred).subst(self.tcx(), proj.substs);\n+            for (pred, pred_span) in self.tcx().bound_explicit_item_bounds(proj.item_def_id).subst_iter_copied(self.tcx(), proj.substs) {\n                 let pred = pred.fold_with(self);\n                 let pred = self.ocx.normalize(\n                     ObligationCause::misc(self.span, self.body_id),\n@@ -1752,15 +1749,10 @@ pub fn check_type_bounds<'tcx>(\n \n     let obligations = tcx\n         .bound_explicit_item_bounds(trait_ty.def_id)\n-        .transpose_iter()\n-        .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-        .map(|(bound, span)| {\n-            debug!(?bound);\n-            // this is where opaque type is found\n-            let concrete_ty_bound = bound.subst(tcx, rebased_substs);\n+        .subst_iter_copied(tcx, rebased_substs)\n+        .map(|(concrete_ty_bound, span)| {\n             debug!(\"check_type_bounds: concrete_ty_bound = {:?}\", concrete_ty_bound);\n-\n-            traits::Obligation::new(mk_cause(span.0), param_env, concrete_ty_bound)\n+            traits::Obligation::new(mk_cause(span), param_env, concrete_ty_bound)\n         })\n         .collect();\n     debug!(\"check_type_bounds: item_bounds={:?}\", obligations);"}, {"sha": "2b15d4dcd084849def308fecfec0c8f668ebfd2d", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -514,8 +514,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 for ty in [first_ty, second_ty] {\n-                    for pred in self.tcx.bound_explicit_item_bounds(rpit_def_id).transpose_iter() {\n-                        let pred = pred.map_bound(|(pred, _)| *pred).subst(self.tcx, substs);\n+                    for (pred, _) in self\n+                        .tcx\n+                        .bound_explicit_item_bounds(rpit_def_id)\n+                        .subst_iter_copied(self.tcx, substs)\n+                    {\n                         let pred = match pred.kind().skip_binder() {\n                             ty::PredicateKind::Trait(mut trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);"}, {"sha": "a5a45f75e0e240c25a0ec8fb1bcad01d5b6dfa14", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -176,24 +176,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         match *expected_ty.kind() {\n             ty::Opaque(def_id, substs) => {\n                 let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n-                let sig = bounds\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .find_map(|(pred, span)| match pred.0.kind().skip_binder() {\n+                let sig =\n+                    bounds.subst_iter_copied(self.tcx, substs).find_map(|(pred, span)| match pred\n+                        .kind()\n+                        .skip_binder()\n+                    {\n                         ty::PredicateKind::Projection(proj_predicate) => self\n                             .deduce_sig_from_projection(\n-                                Some(span.0),\n-                                pred.0\n-                                    .kind()\n-                                    .rebind(pred.rebind(proj_predicate).subst(self.tcx, substs)),\n+                                Some(span),\n+                                pred.kind().rebind(proj_predicate),\n                             ),\n                         _ => None,\n                     });\n \n                 let kind = bounds\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .filter_map(|(pred, _)| match pred.0.kind().skip_binder() {\n+                    .0\n+                    .iter()\n+                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n                         ty::PredicateKind::Trait(tp) => {\n                             self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n                         }\n@@ -697,18 +696,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Opaque(def_id, substs) => self\n                 .tcx\n                 .bound_explicit_item_bounds(def_id)\n-                .transpose_iter()\n-                .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                .find_map(|(p, s)| get_future_output(p.subst(self.tcx, substs), s.0))?,\n+                .subst_iter_copied(self.tcx, substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n             ty::Projection(proj)\n                 if self.tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder =>\n             {\n                 self.tcx\n                     .bound_explicit_item_bounds(proj.item_def_id)\n-                    .transpose_iter()\n-                    .map(|e| e.map_bound(|e| *e).transpose_tuple2())\n-                    .find_map(|(p, s)| get_future_output(p.subst(self.tcx, proj.substs), s.0))?\n+                    .subst_iter_copied(self.tcx, proj.substs)\n+                    .find_map(|(p, s)| get_future_output(p, s))?\n             }\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),"}, {"sha": "2fe6f63a9c639ef25c37a94180f3b80fb444852d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -338,8 +338,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n             let bounds = self.tcx.bound_explicit_item_bounds(*def_id);\n \n-            for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-                let predicate = predicate.subst(self.tcx, substs);\n+            for (predicate, _) in bounds.subst_iter_copied(self.tcx, substs) {\n                 let output = predicate\n                     .kind()\n                     .map_bound(|kind| match kind {"}, {"sha": "80ecd737829e6e2195c1db2b713c03bf361fbcb2", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -543,10 +543,7 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let item_bounds = tcx.bound_explicit_item_bounds(def_id.to_def_id());\n \n-        for predicate in item_bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-            debug!(?predicate);\n-            let predicate = predicate.subst(tcx, substs);\n-\n+        for (predicate, _) in item_bounds.subst_iter_copied(tcx, substs) {\n             let predicate = predicate.fold_with(&mut BottomUpFolder {\n                 tcx,\n                 ty_op: |ty| match *ty.kind() {"}, {"sha": "e0958b039dc5620c2b8837bffd11c005b41bbb6c", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -91,14 +91,12 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n             // For example, in `impl Trait<Assoc = impl Send>`, for all of the bounds on `Assoc`,\n             // e.g. `type Assoc: OtherTrait`, replace `<impl Trait as Trait>::Assoc: OtherTrait`\n             // with `impl Send: OtherTrait`.\n-            for assoc_pred_and_span in\n-                cx.tcx.bound_explicit_item_bounds(proj.projection_ty.item_def_id).transpose_iter()\n+            for (assoc_pred, assoc_pred_span) in cx\n+                .tcx\n+                .bound_explicit_item_bounds(proj.projection_ty.item_def_id)\n+                .subst_iter_copied(cx.tcx, &proj.projection_ty.substs)\n             {\n-                let assoc_pred_span = assoc_pred_and_span.0.1;\n-                let assoc_pred = assoc_pred_and_span\n-                    .map_bound(|(pred, _)| *pred)\n-                    .subst(cx.tcx, &proj.projection_ty.substs)\n-                    .fold_with(proj_replacer);\n+                let assoc_pred = assoc_pred.fold_with(proj_replacer);\n                 let Ok(assoc_pred) = traits::fully_normalize(infcx, traits::ObligationCause::dummy(), cx.param_env, assoc_pred) else {\n                     continue;\n                 };"}, {"sha": "93d8797553fdbe1330ac9731bc5beb87c49f83ab", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -795,8 +795,7 @@ pub trait PrettyPrinter<'tcx>:\n         let mut fn_traits = FxIndexMap::default();\n         let mut is_sized = false;\n \n-        for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n-            let predicate = predicate.subst(tcx, substs);\n+        for (predicate, _) in bounds.subst_iter_copied(tcx, substs) {\n             let bound_predicate = predicate.kind();\n \n             match bound_predicate.skip_binder() {"}, {"sha": "e0493f45067af7b98bf331754c901db243e91690", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -6,6 +6,7 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -550,6 +551,28 @@ impl<T, U> EarlyBinder<(T, U)> {\n     }\n }\n \n+impl<'tcx, 's, T: IntoIterator<Item = I>, I: TypeFoldable<'tcx>> EarlyBinder<T> {\n+    pub fn subst_iter(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'s [GenericArg<'tcx>],\n+    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> {\n+        self.0.into_iter().map(move |t| EarlyBinder(t).subst(tcx, substs))\n+    }\n+}\n+\n+impl<'tcx, 's, 'a, T: IntoIterator<Item = &'a I>, I: Copy + TypeFoldable<'tcx> + 'a>\n+    EarlyBinder<T>\n+{\n+    pub fn subst_iter_copied(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'s [GenericArg<'tcx>],\n+    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> + Captures<'a> {\n+        self.0.into_iter().map(move |t| EarlyBinder(*t).subst(tcx, substs))\n+    }\n+}\n+\n pub struct EarlyBinderIter<T> {\n     t: T,\n }"}, {"sha": "3b5a9ba83568c05d2c979d05634ac5d408fc1b5d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aa8931c61235d4ff3a87665229614da6ac0a0ee5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa8931c61235d4ff3a87665229614da6ac0a0ee5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=aa8931c61235d4ff3a87665229614da6ac0a0ee5", "patch": "@@ -657,21 +657,18 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n     let mut output = None;\n     let lang_items = cx.tcx.lang_items();\n \n-    for pred in cx\n+    for (pred, _) in cx\n         .tcx\n         .bound_explicit_item_bounds(ty.item_def_id)\n-        .transpose_iter()\n-        .map(|x| x.map_bound(|(p, _)| p))\n+        .subst_iter_copied(cx.tcx, ty.substs)\n     {\n-        match pred.0.kind().skip_binder() {\n+        match pred.kind().skip_binder() {\n             PredicateKind::Trait(p)\n                 if (lang_items.fn_trait() == Some(p.def_id())\n                     || lang_items.fn_mut_trait() == Some(p.def_id())\n                     || lang_items.fn_once_trait() == Some(p.def_id())) =>\n             {\n-                let i = pred\n-                    .map_bound(|pred| pred.kind().rebind(p.trait_ref.substs.type_at(1)))\n-                    .subst(cx.tcx, ty.substs);\n+                let i = pred.kind().rebind(p.trait_ref.substs.type_at(1));\n \n                 if inputs.map_or(false, |inputs| inputs != i) {\n                     // Multiple different fn trait impls. Is this even allowed?\n@@ -684,10 +681,7 @@ fn sig_for_projection<'tcx>(cx: &LateContext<'tcx>, ty: ProjectionTy<'tcx>) -> O\n                     // Multiple different fn trait impls. Is this even allowed?\n                     return None;\n                 }\n-                output = Some(\n-                    pred.map_bound(|pred| pred.kind().rebind(p.term.ty().unwrap()))\n-                        .subst(cx.tcx, ty.substs),\n-                );\n+                output = pred.kind().rebind(p.term.ty()).transpose();\n             },\n             _ => (),\n         }"}]}