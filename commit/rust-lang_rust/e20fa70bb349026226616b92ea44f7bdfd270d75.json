{"sha": "e20fa70bb349026226616b92ea44f7bdfd270d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMGZhNzBiYjM0OTAyNjIyNjYxNmI5MmVhNDRmN2JkZmQyNzBkNzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-18T13:00:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-19T13:34:28Z"}, "message": "suppress duplicate -- or near duplicate -- type test errors", "tree": {"sha": "485403f6d182cba48565675e2fefdba395235493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/485403f6d182cba48565675e2fefdba395235493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e20fa70bb349026226616b92ea44f7bdfd270d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e20fa70bb349026226616b92ea44f7bdfd270d75", "html_url": "https://github.com/rust-lang/rust/commit/e20fa70bb349026226616b92ea44f7bdfd270d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e20fa70bb349026226616b92ea44f7bdfd270d75/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357", "html_url": "https://github.com/rust-lang/rust/commit/bfb1d959c3cc64d54d1a1f3d586d90b6ce0d5357"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "df30ad360062c22083a3a4df3471b8c30352fd04", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e20fa70bb349026226616b92ea44f7bdfd270d75/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fa70bb349026226616b92ea44f7bdfd270d75/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e20fa70bb349026226616b92ea44f7bdfd270d75", "patch": "@@ -149,7 +149,7 @@ pub struct Verify<'tcx> {\n     pub bound: VerifyBound<'tcx>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),"}, {"sha": "95b3943746d1bbd9b0c937ce46d4a8506b992d3e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e20fa70bb349026226616b92ea44f7bdfd270d75/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e20fa70bb349026226616b92ea44f7bdfd270d75/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=e20fa70bb349026226616b92ea44f7bdfd270d75", "patch": "@@ -25,7 +25,7 @@ use rustc::mir::{\n use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common;\n use rustc_data_structures::bit_set::BitSet;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n@@ -580,6 +580,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         let tcx = infcx.tcx;\n \n+        // Sometimes we register equivalent type-tests that would\n+        // result in basically the exact same error being reported to\n+        // the user. Avoid that.\n+        let mut deduplicate_errors = FxHashSet::default();\n+\n         for type_test in &self.type_tests {\n             debug!(\"check_type_test: {:?}\", type_test);\n \n@@ -605,11 +610,29 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 }\n             }\n \n-            // Oh the humanity. Obviously we will do better than this error eventually.\n+            // Type-test failed. Report the error.\n+\n+            // Try to convert the lower-bound region into something named we can print for the user.\n             let lower_bound_region = self.to_error_region(type_test.lower_bound);\n+\n+            // Skip duplicate-ish errors.\n+            let type_test_span = type_test.locations.span(mir);\n+            let erased_generic_kind = tcx.erase_regions(&type_test.generic_kind);\n+            if !deduplicate_errors.insert((erased_generic_kind, lower_bound_region, type_test.locations)) {\n+                continue;\n+            } else {\n+                debug!(\n+                    \"check_type_test: reporting error for erased_generic_kind={:?}, \\\n+                     lower_bound_region={:?}, \\\n+                     type_test.locations={:?}\",\n+                    erased_generic_kind,\n+                    lower_bound_region,\n+                    type_test.locations,\n+                );\n+            }\n+\n             if let Some(lower_bound_region) = lower_bound_region {\n                 let region_scope_tree = &tcx.region_scope_tree(mir_def_id);\n-                let type_test_span = type_test.locations.span(mir);\n                 infcx\n                     .construct_generic_bound_failure(\n                         region_scope_tree,\n@@ -629,7 +652,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // to report it; we could probably handle it by\n                 // iterating over the universal regions and reporting\n                 // an error that multiple bounds are required.\n-                let type_test_span = type_test.locations.span(mir);\n                 tcx.sess\n                     .struct_span_err(\n                         type_test_span,"}]}