{"sha": "bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjZlNGZjZjVlZDhiOGZlM2MyODEwNDA0MTRlNGY2YTZhZmI4ZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-04T12:16:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-04T12:16:51Z"}, "message": "Auto merge of #22920 - tshepang:remove-some-warnings, r=huonw", "tree": {"sha": "609f5fc3b538d928ad4f36691110c2928779c358", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/609f5fc3b538d928ad4f36691110c2928779c358"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "html_url": "https://github.com/rust-lang/rust/commit/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e055c3f0041067000dfae7bbc2b0383a8fed19e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e055c3f0041067000dfae7bbc2b0383a8fed19e", "html_url": "https://github.com/rust-lang/rust/commit/6e055c3f0041067000dfae7bbc2b0383a8fed19e"}, {"sha": "55ce45e7b52a0a360cf88cba71f59f7d3e9b2346", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ce45e7b52a0a360cf88cba71f59f7d3e9b2346", "html_url": "https://github.com/rust-lang/rust/commit/55ce45e7b52a0a360cf88cba71f59f7d3e9b2346"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "7c65a99d4b06ede290b8ad00d72819e093f477ba", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -73,7 +73,6 @@\n #![feature(unboxed_closures)]\n #![feature(unsafe_no_drop_flag)]\n #![feature(core)]\n-#![feature(unique)]\n #![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]"}, {"sha": "23b256568dae416be84828fbee86873943122925", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -2176,8 +2176,8 @@ mod tests {\n     fn test_connect() {\n         let v: [Vec<i32>; 0] = [];\n         assert_eq!(v.connect(&0), []);\n-        assert_eq!([vec![1i], vec![2, 3]].connect(&0), [1, 0, 2, 3]);\n-        assert_eq!([vec![1i], vec![2], vec![3]].connect(&0), [1, 0, 2, 0, 3]);\n+        assert_eq!([vec![1], vec![2, 3]].connect(&0), [1, 0, 2, 3]);\n+        assert_eq!([vec![1], vec![2], vec![3]].connect(&0), [1, 0, 2, 0, 3]);\n \n         let v: [&[_]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect(&0), [1, 0, 2, 3]);"}, {"sha": "3433813e7b5e6dc821205fe656d5b0437df1a3e1", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -86,7 +86,7 @@ struct CustomHasher { output: u64 }\n \n impl Hasher for CustomHasher {\n     fn finish(&self) -> u64 { self.output }\n-    fn write(&mut self, data: &[u8]) { panic!() }\n+    fn write(&mut self, _: &[u8]) { panic!() }\n     fn write_u64(&mut self, data: u64) { self.output = data; }\n }\n "}, {"sha": "a89d3380707051cbdf8613a9484464f82699d133", "filename": "src/libcoretest/str.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcoretest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibcoretest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fstr.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -188,15 +188,13 @@ fn trim_ws() {\n \n mod pattern {\n     use std::str::Pattern;\n-    use std::str::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n+    use std::str::{Searcher, ReverseSearcher};\n     use std::str::SearchStep::{self, Match, Reject, Done};\n \n     macro_rules! make_test {\n         ($name:ident, $p:expr, $h:expr, [$($e:expr,)*]) => {\n             mod $name {\n-                use std::str::Pattern;\n-                use std::str::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n-                use std::str::SearchStep::{self, Match, Reject, Done};\n+                use std::str::SearchStep::{Match, Reject};\n                 use super::{cmp_search_to_vec};\n                 #[test]\n                 fn fwd() {"}, {"sha": "e2a5276cc78abf8e8782dd8c7e597d58541b9b88", "filename": "src/librand/rand_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibrand%2Frand_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibrand%2Frand_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Frand_impls.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -214,7 +214,6 @@ impl<T:Rand> Rand for Option<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::v1::*;\n     use std::rand::{Rng, thread_rng, Open01, Closed01};\n \n     struct ConstantRng(u64);"}, {"sha": "fc0a9d29ed6f2b7fcf8b7e132a7fe82c46b467d6", "filename": "src/librbml/io.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibrbml%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibrbml%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Fio.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -140,32 +140,32 @@ mod tests {\n     fn test_seekable_mem_writer() {\n         let mut writer = SeekableMemWriter::new();\n         assert_eq!(writer.tell(), Ok(0));\n-        writer.write(&[0]).unwrap();\n+        writer.write_all(&[0]).unwrap();\n         assert_eq!(writer.tell(), Ok(1));\n-        writer.write(&[1, 2, 3]).unwrap();\n-        writer.write(&[4, 5, 6, 7]).unwrap();\n+        writer.write_all(&[1, 2, 3]).unwrap();\n+        writer.write_all(&[4, 5, 6, 7]).unwrap();\n         assert_eq!(writer.tell(), Ok(8));\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n         writer.seek(0, old_io::SeekSet).unwrap();\n         assert_eq!(writer.tell(), Ok(0));\n-        writer.write(&[3, 4]).unwrap();\n+        writer.write_all(&[3, 4]).unwrap();\n         let b: &[_] = &[3, 4, 2, 3, 4, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n         writer.seek(1, old_io::SeekCur).unwrap();\n-        writer.write(&[0, 1]).unwrap();\n+        writer.write_all(&[0, 1]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 7];\n         assert_eq!(writer.get_ref(), b);\n \n         writer.seek(-1, old_io::SeekEnd).unwrap();\n-        writer.write(&[1, 2]).unwrap();\n+        writer.write_all(&[1, 2]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2];\n         assert_eq!(writer.get_ref(), b);\n \n         writer.seek(1, old_io::SeekEnd).unwrap();\n-        writer.write(&[1]).unwrap();\n+        writer.write_all(&[1]).unwrap();\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2, 0, 1];\n         assert_eq!(writer.get_ref(), b);\n     }\n@@ -174,7 +174,7 @@ mod tests {\n     fn seek_past_end() {\n         let mut r = SeekableMemWriter::new();\n         r.seek(10, old_io::SeekSet).unwrap();\n-        assert!(r.write(&[3]).is_ok());\n+        assert!(r.write_all(&[3]).is_ok());\n     }\n \n     #[test]\n@@ -190,7 +190,7 @@ mod tests {\n         b.iter(|| {\n             let mut wr = SeekableMemWriter::new();\n             for _ in 0..times {\n-                wr.write(&src).unwrap();\n+                wr.write_all(&src).unwrap();\n             }\n \n             let v = wr.unwrap();"}, {"sha": "c94edb9d2a1c52d53d773a9f68899d1316bb2f57", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -422,15 +422,14 @@ mod tests {\n     use prelude::v1::*;\n     use super::*;\n     use libc;\n-    use mem;\n \n     #[test]\n     fn c_to_rust() {\n         let data = b\"123\\0\";\n         let ptr = data.as_ptr() as *const libc::c_char;\n         unsafe {\n-            assert_eq!(c_str_to_bytes(&ptr), b\"123\");\n-            assert_eq!(c_str_to_bytes_with_nul(&ptr), b\"123\\0\");\n+            assert_eq!(CStr::from_ptr(ptr).to_bytes(), b\"123\");\n+            assert_eq!(CStr::from_ptr(ptr).to_bytes_with_nul(), b\"123\\0\");\n         }\n     }\n "}, {"sha": "46547ac583637c808990357679c553c42cb04141", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -975,7 +975,7 @@ mod tests {\n         struct R;\n \n         impl Read for R {\n-            fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n+            fn read(&mut self, _: &mut [u8]) -> io::Result<usize> {\n                 Err(io::Error::new(io::ErrorKind::Other, \"\", None))\n             }\n         }"}, {"sha": "569906047aab3523371fdf69ead368c4cd6ff5d9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -125,7 +125,7 @@\n #![feature(hash)]\n #![feature(int_uint)]\n #![feature(unique)]\n-#![cfg_attr(test, feature(test, rustc_private, env))]\n+#![cfg_attr(test, feature(test, rustc_private))]\n \n // Don't link to std. We are std.\n #![feature(no_std)]"}, {"sha": "79028f49e68bfa17efcc7009500550d02a9a865d", "filename": "src/libstd/process.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -803,14 +803,13 @@ mod tests {\n     #[cfg(not(target_os=\"android\"))]\n     #[test]\n     fn test_inherit_env() {\n-        use os;\n+        use std::env;\n         if running_on_valgrind() { return; }\n \n         let result = env_cmd().output().unwrap();\n         let output = String::from_utf8(result.stdout).unwrap();\n \n-        let r = os::env();\n-        for &(ref k, ref v) in &r {\n+        for (ref k, ref v) in env::vars() {\n             // don't check windows magical empty-named variables\n             assert!(k.is_empty() ||\n                     output.contains(format!(\"{}={}\", *k, *v).as_slice()),"}, {"sha": "15f7f3884ecac6a9c02543f8678171a3f80c663c", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -96,17 +96,17 @@ pub fn open(term: &str) -> Result<File, String> {\n fn test_get_dbpath_for_term() {\n     // woefully inadequate test coverage\n     // note: current tests won't work with non-standard terminfo hierarchies (e.g. OS X's)\n-    use std::os::{setenv, unsetenv};\n+    use std::env;\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     fn x(t: &str) -> String {\n         let p = get_dbpath_for_term(t).expect(\"no terminfo entry found\");\n         p.as_str().unwrap().to_string()\n     };\n     assert!(x(\"screen\") == \"/usr/share/terminfo/s/screen\");\n     assert!(get_dbpath_for_term(\"\") == None);\n-    setenv(\"TERMINFO_DIRS\", \":\");\n+    env::set_var(\"TERMINFO_DIRS\", \":\");\n     assert!(x(\"screen\") == \"/usr/share/terminfo/s/screen\");\n-    unsetenv(\"TERMINFO_DIRS\");\n+    env::remove_var(\"TERMINFO_DIRS\");\n }\n \n #[test]"}, {"sha": "3fbb07d03a8625bedaf981f7053d141d2de054e9", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=bdf6e4fcf5ed8b8fe3c281040414e4f6a6afb8d6", "patch": "@@ -732,8 +732,8 @@ fn should_sort_failures_before_printing_them() {\n         Pretty(_) => unreachable!()\n     };\n \n-    let apos = s.find_str(\"a\").unwrap();\n-    let bpos = s.find_str(\"b\").unwrap();\n+    let apos = s.find(\"a\").unwrap();\n+    let bpos = s.find(\"b\").unwrap();\n     assert!(apos < bpos);\n }\n "}]}