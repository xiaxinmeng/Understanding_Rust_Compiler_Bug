{"sha": "beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGExZjg4YTdkODdjZjk5NGZlOGUzYTViMmZlMTI2ZTMxZmNhZTk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-02T17:06:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:19Z"}, "message": "Provide span for visit_struct_def + remove some dead code", "tree": {"sha": "89547bb03a86be3fc38b6ceb6f5335a7aea502dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89547bb03a86be3fc38b6ceb6f5335a7aea502dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "html_url": "https://github.com/rust-lang/rust/commit/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877c35e8a212d2a4f61c528b93097d185725630b", "url": "https://api.github.com/repos/rust-lang/rust/commits/877c35e8a212d2a4f61c528b93097d185725630b", "html_url": "https://github.com/rust-lang/rust/commit/877c35e8a212d2a4f61c528b93097d185725630b"}], "stats": {"total": 77, "additions": 26, "deletions": 51}, "files": [{"sha": "dcccd9f2c9770e2ee8d15fa25370401bc2a0ca66", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -665,7 +665,8 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n                         s: &hir::StructDef,\n                         name: ast::Name,\n                         g: &hir::Generics,\n-                        item_id: ast::NodeId) {\n+                        item_id: ast::NodeId,\n+                        _: Span) {\n         run_lints!(self, check_struct_def, late_passes, s, name, g, item_id);\n         hir_visit::walk_struct_def(self, s);\n         run_lints!(self, check_struct_def_post, late_passes, s, name, g, item_id);\n@@ -814,7 +815,8 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n                         s: &ast::StructDef,\n                         ident: ast::Ident,\n                         g: &ast::Generics,\n-                        item_id: ast::NodeId) {\n+                        item_id: ast::NodeId,\n+                        _: Span) {\n         run_lints!(self, check_struct_def, early_passes, s, ident, g, item_id);\n         ast_visit::walk_struct_def(self, s);\n         run_lints!(self, check_struct_def_post, early_passes, s, ident, g, item_id);"}, {"sha": "8b52536a4a02bc65ba3f5d4539f2c51b459aea5a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -216,7 +216,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n \n     fn visit_struct_def(&mut self, def: &hir::StructDef, _: ast::Name,\n-                        _: &hir::Generics, _: ast::NodeId) {\n+                        _: &hir::Generics, _: ast::NodeId, _: codemap::Span) {\n         let has_extern_repr = self.struct_has_extern_repr;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n         let live_fields = def.fields.iter().filter(|f| {"}, {"sha": "4b235534bf3385ef51980d7d54e71c9018725d5e", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -301,7 +301,8 @@ mod svh_visitor {\n     }\n \n     impl<'a, 'v> Visitor<'v> for StrictVersionHashVisitor<'a> {\n-        fn visit_struct_def(&mut self, s: &StructDef, name: Name, g: &Generics, _: NodeId) {\n+        fn visit_struct_def(&mut self, s: &StructDef, name: Name,\n+                            g: &Generics, _: NodeId, _: Span) {\n             SawStructDef(name.as_str()).hash(self.st);\n             visit::walk_generics(self, g);\n             visit::walk_struct_def(self, s)"}, {"sha": "2cd49bedae3f2f94e2abbab5b9986f674898020a", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -247,10 +247,6 @@ pub trait Folder : Sized {\n         noop_fold_opt_lifetime(o_lt, self)\n     }\n \n-    fn fold_variant_arg(&mut self, va: VariantArg) -> VariantArg {\n-        noop_fold_variant_arg(va, self)\n-    }\n-\n     fn fold_opt_bounds(&mut self,\n                        b: Option<OwnedSlice<TyParamBound>>)\n                        -> Option<OwnedSlice<TyParamBound>> {\n@@ -766,15 +762,6 @@ fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T) -> TyParam\n     bounds.move_map(|bound| folder.fold_ty_param_bound(bound))\n }\n \n-fn noop_fold_variant_arg<T: Folder>(VariantArg { id, ty }: VariantArg,\n-                                    folder: &mut T)\n-                                    -> VariantArg {\n-    VariantArg {\n-        id: folder.new_id(id),\n-        ty: folder.fold_ty(ty),\n-    }\n-}\n-\n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n     b.map(|Block { id, stmts, expr, rules, span }| {\n         Block {"}, {"sha": "b55bfc395b4ab2e5ef7327f6573e891f4a853d54", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -1014,12 +1014,6 @@ pub struct ForeignMod {\n     pub items: Vec<P<ForeignItem>>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct VariantArg {\n-    pub ty: P<Ty>,\n-    pub id: NodeId,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,"}, {"sha": "16299a83c6687175ea736acdb930c468898d5750", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -285,7 +285,8 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n                         struct_def: &StructDef,\n                         _: Name,\n                         _: &hir::Generics,\n-                        _: NodeId) {\n+                        _: NodeId,\n+                        _: Span) {\n         self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }"}, {"sha": "2bbaeaefa0fab5c49a0b01ad1f717b3501c31249", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -112,7 +112,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_struct_def(&mut self, s: &'v StructDef, _: Name, _: &'v Generics, _: NodeId) {\n+    fn visit_struct_def(&mut self, s: &'v StructDef, _: Name,\n+                        _: &'v Generics, _: NodeId, _: Span) {\n         walk_struct_def(self, s)\n     }\n     fn visit_struct_field(&mut self, s: &'v StructField) {\n@@ -309,7 +310,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition, item.name, generics, item.id);\n+            visitor.visit_struct_def(struct_definition, item.name,\n+                                     generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n@@ -334,7 +336,8 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         generics: &'v Generics,\n                                         item_id: NodeId) {\n     visitor.visit_name(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name,\n+                             generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}, {"sha": "6ff8239d3aedb459a0b8681af30eecc6d7783968", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -129,7 +129,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n     }\n \n     fn visit_struct_def(&mut self, s: &hir::StructDef, _: ast::Name,\n-                        _: &'v hir::Generics, item_id: ast::NodeId) {\n+                        _: &'v hir::Generics, item_id: ast::NodeId, _: Span) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n         if s.kind != hir::VariantKind::Dict {"}, {"sha": "b71f89a75be9969dfd5f6733cc58cc15f388694b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -501,7 +501,8 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n         }\n \n         // `visit::walk_variant` without the discriminant expression.\n-        self.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n+        self.visit_struct_def(&variant.node.def, variant.node.name,\n+                              generics, item_id, variant.span);\n     }\n     fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem) {\n         execute_callback!(hir_map::Node::NodeForeignItem(foreign_item), self);"}, {"sha": "b786e778edb11dab22dd29fce0b588a17a8b474f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -1570,12 +1570,6 @@ pub struct ForeignMod {\n     pub items: Vec<P<ForeignItem>>,\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub struct VariantArg {\n-    pub ty: P<Ty>,\n-    pub id: NodeId,\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,"}, {"sha": "c52c5984858a91cc6b3ce1199cdc0f1d53dbc8c9", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -456,7 +456,8 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n                         struct_def: &StructDef,\n                         _: ast::Ident,\n                         _: &ast::Generics,\n-                        _: NodeId) {\n+                        _: NodeId,\n+                        _: Span) {\n         self.operation.visit_id(struct_def.id);\n         visit::walk_struct_def(self, struct_def);\n     }"}, {"sha": "144eab92795b27682561c6152c0d814337539f69", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -271,10 +271,6 @@ pub trait Folder : Sized {\n         noop_fold_opt_lifetime(o_lt, self)\n     }\n \n-    fn fold_variant_arg(&mut self, va: VariantArg) -> VariantArg {\n-        noop_fold_variant_arg(va, self)\n-    }\n-\n     fn fold_opt_bounds(&mut self, b: Option<OwnedSlice<TyParamBound>>)\n                        -> Option<OwnedSlice<TyParamBound>> {\n         noop_fold_opt_bounds(b, self)\n@@ -884,14 +880,6 @@ fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T)\n     bounds.move_map(|bound| folder.fold_ty_param_bound(bound))\n }\n \n-fn noop_fold_variant_arg<T: Folder>(VariantArg {id, ty}: VariantArg, folder: &mut T)\n-                                    -> VariantArg {\n-    VariantArg {\n-        id: folder.new_id(id),\n-        ty: folder.fold_ty(ty)\n-    }\n-}\n-\n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n     b.map(|Block {id, stmts, expr, rules, span}| Block {\n         id: folder.new_id(id),"}, {"sha": "b547f8c019c6e7a60dfc64443955de0befff09c4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "patch": "@@ -80,7 +80,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef, m: &'v TraitBoundModifier) {\n         walk_poly_trait_ref(self, t, m)\n     }\n-    fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident, _: &'v Generics, _: NodeId) {\n+    fn visit_struct_def(&mut self, s: &'v StructDef, _: Ident,\n+                        _: &'v Generics, _: NodeId, _: Span) {\n         walk_struct_def(self, s)\n     }\n     fn visit_struct_field(&mut self, s: &'v StructField) { walk_struct_field(self, s) }\n@@ -288,7 +289,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n-            visitor.visit_struct_def(struct_definition, item.ident, generics, item.id);\n+            visitor.visit_struct_def(struct_definition, item.ident,\n+                                     generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n@@ -314,7 +316,8 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         generics: &'v Generics,\n                                         item_id: NodeId) {\n     visitor.visit_ident(variant.span, variant.node.name);\n-    visitor.visit_struct_def(&variant.node.def, variant.node.name, generics, item_id);\n+    visitor.visit_struct_def(&variant.node.def, variant.node.name,\n+                             generics, item_id, variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }"}]}