{"sha": "2870d269f5eb26e77ccf7718080afc62edaca8da", "node_id": "C_kwDOAAsO6NoAKDI4NzBkMjY5ZjVlYjI2ZTc3Y2NmNzcxODA4MGFmYzYyZWRhY2E4ZGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-18T16:11:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-21T21:34:59Z"}, "message": "Actually keep `PlaceMention` if requested.", "tree": {"sha": "a90661423986bc752943a3817b4e9dcfacbfd7f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90661423986bc752943a3817b4e9dcfacbfd7f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2870d269f5eb26e77ccf7718080afc62edaca8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2870d269f5eb26e77ccf7718080afc62edaca8da", "html_url": "https://github.com/rust-lang/rust/commit/2870d269f5eb26e77ccf7718080afc62edaca8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2870d269f5eb26e77ccf7718080afc62edaca8da/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d", "html_url": "https://github.com/rust-lang/rust/commit/ddfa2463e205a1bcae51aeb2698f09b4b8288e3d"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "6ce10672a6145f192674dbafd6db796b4194bf8a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -757,14 +757,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                 }\n             }\n-            StatementKind::PlaceMention(..) => {\n-                if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n-                    self.fail(\n-                        location,\n-                        \"`PlaceMention` should have been removed after drop lowering phase\",\n-                    );\n-                }\n-            }\n             StatementKind::AscribeUserType(..) => {\n                 if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial) {\n                     self.fail(\n@@ -874,6 +866,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             StatementKind::StorageDead(_)\n             | StatementKind::Coverage(_)\n             | StatementKind::ConstEvalCounter\n+            | StatementKind::PlaceMention(..)\n             | StatementKind::Nop => {}\n         }\n "}, {"sha": "7b0b5102c2db655a8c0c7fbdcf6eb222ee1b59c0", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -768,6 +768,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_enable_passes, vec![(\"DestProp\".to_string(), false)]);\n+    tracked!(mir_keep_place_mention, true);\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, false);"}, {"sha": "306cb4fa5ed0d162821dc51cdb4c78912a32a8af", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -333,8 +333,6 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// When executed at runtime, this computes the given place, but then discards\n     /// it without doing a load. It is UB if the place is not pointing to live memory.\n-    ///\n-    /// Disallowed after drop elaboration.\n     PlaceMention(Box<Place<'tcx>>),\n \n     /// Encodes a user's type ascription. These need to be preserved"}, {"sha": "d435d3ee69b76a94eda4fe73a4ff40d60eb8aa0d", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -24,7 +24,6 @@ impl<'tcx> MirPass<'tcx> for CleanupPostBorrowck {\n             for statement in basic_block.statements.iter_mut() {\n                 match statement.kind {\n                     StatementKind::AscribeUserType(..)\n-                    | StatementKind::PlaceMention(..)\n                     | StatementKind::Assign(box (_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n                     | StatementKind::FakeRead(..) => statement.make_nop(),\n                     _ => (),"}, {"sha": "7bc5183a00a8255658f64d25cb6d58b377b8bb79", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -54,11 +54,10 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::Coverage(_)\n                 | StatementKind::Intrinsic(_)\n                 | StatementKind::ConstEvalCounter\n+                | StatementKind::PlaceMention(_)\n                 | StatementKind::Nop => (),\n \n-                StatementKind::FakeRead(_)\n-                | StatementKind::PlaceMention(_)\n-                | StatementKind::AscribeUserType(_, _) => {\n+                StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n                     bug!(\"{:?} not found in this MIR phase!\", &statement.kind)\n                 }\n             }"}, {"sha": "78758e2db28abfdb7ad77277ac6c5c65d83a9b16", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -582,10 +582,9 @@ impl WriteInfo {\n             | StatementKind::Nop\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageLive(_)\n-            | StatementKind::StorageDead(_) => (),\n-            StatementKind::FakeRead(_)\n-            | StatementKind::AscribeUserType(_, _)\n-            | StatementKind::PlaceMention(_) => {\n+            | StatementKind::StorageDead(_)\n+            | StatementKind::PlaceMention(_) => (),\n+            StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {\n                 bug!(\"{:?} not found in this MIR phase\", statement)\n             }\n         }"}, {"sha": "03e9fdef56ee5a01a9e67b26b214966970762a20", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -48,6 +48,7 @@ mod add_retag;\n mod check_const_item_mutation;\n mod check_packed_ref;\n pub mod check_unsafety;\n+mod remove_place_mention;\n // This pass is public to allow external drivers to perform MIR cleanup\n pub mod cleanup_post_borrowck;\n mod const_debuginfo;\n@@ -460,8 +461,11 @@ fn run_runtime_lowering_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n \n /// Returns the sequence of passes that do the initial cleanup of runtime MIR.\n fn run_runtime_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let passes: &[&dyn MirPass<'tcx>] =\n-        &[&lower_intrinsics::LowerIntrinsics, &simplify::SimplifyCfg::ElaborateDrops];\n+    let passes: &[&dyn MirPass<'tcx>] = &[\n+        &lower_intrinsics::LowerIntrinsics,\n+        &remove_place_mention::RemovePlaceMention,\n+        &simplify::SimplifyCfg::ElaborateDrops,\n+    ];\n \n     pm::run_passes(tcx, body, passes, Some(MirPhase::Runtime(RuntimePhase::PostCleanup)));\n "}, {"sha": "8be1c37572d14d5cded6c477ffeb9e4899ef0632", "filename": "compiler/rustc_mir_transform/src/remove_place_mention.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_place_mention.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -0,0 +1,23 @@\n+//! This pass removes `PlaceMention` statement, which has no effect at codegen.\n+\n+use crate::MirPass;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct RemovePlaceMention;\n+\n+impl<'tcx> MirPass<'tcx> for RemovePlaceMention {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        !sess.opts.unstable_opts.mir_keep_place_mention\n+    }\n+\n+    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        trace!(\"Running RemovePlaceMention on {:?}\", body.source);\n+        for data in body.basic_blocks.as_mut_preserves_cfg() {\n+            data.statements.retain(|statement| match statement.kind {\n+                StatementKind::PlaceMention(..) | StatementKind::Nop => false,\n+                _ => true,\n+            })\n+        }\n+    }\n+}"}, {"sha": "d9f03fe14072ee9ca13971c44b870ebe7fb196cb", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -1558,6 +1558,9 @@ options! {\n         \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n         enabled, overriding all other checks. Passes that are not specified are enabled or \\\n         disabled by other flags as usual.\"),\n+    mir_keep_place_mention: bool = (false, parse_bool, [TRACKED],\n+        \"keep place mention MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n+        (default: no)\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\")]\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),"}, {"sha": "fc938080a0efdb102ad1a0557e96aa6f1d78a982", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -130,6 +130,7 @@ pub const MIRI_DEFAULT_ARGS: &[&str] = &[\n     \"-Zalways-encode-mir\",\n     \"-Zextra-const-ub-checks\",\n     \"-Zmir-emit-retag\",\n+    \"-Zmir-keep-place-mention\",\n     \"-Zmir-opt-level=0\",\n     \"-Zmir-enable-passes=-CheckAlignment\",\n ];"}, {"sha": "7c5f440b774f2bb9b7d3b8cb0e7a63b9b50da16d", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.rs?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -6,6 +6,8 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let _ = unsafe { *p }; //~ ERROR: dereferenced after this allocation got freed\n+    unsafe {\n+        let _ = *p; //~ ERROR: dereferenced after this allocation got freed\n+    }\n     panic!(\"this should never print\");\n }"}, {"sha": "7b76389c753594a5282c902e62b975600c7e29d2", "filename": "src/tools/miri/tests/fail/dangling_pointers/dangling_pointer_deref_underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2870d269f5eb26e77ccf7718080afc62edaca8da/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref_underscore.stderr?ref=2870d269f5eb26e77ccf7718080afc62edaca8da", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: pointer to ALLOC was dereferenced after this allocation got freed\n   --> $DIR/dangling_pointer_deref_underscore.rs:LL:CC\n    |\n-LL |     let _ = unsafe { *p };\n-   |                      ^^ pointer to ALLOC was dereferenced after this allocation got freed\n+LL |         let _ = *p;\n+   |                 ^^ pointer to ALLOC was dereferenced after this allocation got freed\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}]}