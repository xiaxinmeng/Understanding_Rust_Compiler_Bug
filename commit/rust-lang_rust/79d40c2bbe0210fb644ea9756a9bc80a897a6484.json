{"sha": "79d40c2bbe0210fb644ea9756a9bc80a897a6484", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDQwYzJiYmUwMjEwZmI2NDRlYTk3NTZhOWJjODBhODk3YTY0ODQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-12T17:41:45Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2016-12-19T17:23:37Z"}, "message": "implement cabi for 32-bit sparc", "tree": {"sha": "3b4fab9df4490982796e6081878a7f06cf0a88b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4fab9df4490982796e6081878a7f06cf0a88b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d40c2bbe0210fb644ea9756a9bc80a897a6484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d40c2bbe0210fb644ea9756a9bc80a897a6484", "html_url": "https://github.com/rust-lang/rust/commit/79d40c2bbe0210fb644ea9756a9bc80a897a6484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d40c2bbe0210fb644ea9756a9bc80a897a6484/comments", "author": null, "committer": null, "parents": [{"sha": "bea6ab23f9db9daa481187e2feea46f26da01a72", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea6ab23f9db9daa481187e2feea46f26da01a72", "html_url": "https://github.com/rust-lang/rust/commit/bea6ab23f9db9daa481187e2feea46f26da01a72"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "7502ae14ebcf07aeadd30a515c34f43e13cf3c3c", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=79d40c2bbe0210fb644ea9756a9bc80a897a6484", "patch": "@@ -25,6 +25,7 @@ use cabi_mips;\n use cabi_mips64;\n use cabi_asmjs;\n use cabi_msp430;\n+use cabi_sparc;\n use machine::{llalign_of_min, llsize_of, llsize_of_alloc};\n use type_::Type;\n use type_of;\n@@ -609,6 +610,7 @@ impl FnType {\n             \"asmjs\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"wasm32\" => cabi_asmjs::compute_abi_info(ccx, self),\n             \"msp430\" => cabi_msp430::compute_abi_info(ccx, self),\n+            \"sparc\" => cabi_sparc::compute_abi_info(ccx, self),\n             a => ccx.sess().fatal(&format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "25fe53e7ef40f88ab96ba44d3ed6198a9af6fd24", "filename": "src/librustc_trans/cabi_sparc.rs", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Fcabi_sparc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Fcabi_sparc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_sparc.rs?ref=79d40c2bbe0210fb644ea9756a9bc80a897a6484", "patch": "@@ -0,0 +1,108 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(non_upper_case_globals)]\n+\n+use libc::c_uint;\n+use std::cmp;\n+use llvm;\n+use llvm::{Integer, Pointer, Float, Double, Vector};\n+use abi::{self, align_up_to, ArgType, FnType};\n+use context::CrateContext;\n+use type_::Type;\n+\n+fn ty_align(ty: Type) -> usize {\n+    abi::ty_align(ty, 4)\n+}\n+\n+fn ty_size(ty: Type) -> usize {\n+    abi::ty_size(ty, 4)\n+}\n+\n+fn classify_ret_ty(ccx: &CrateContext, ret: &mut ArgType) {\n+    if is_reg_ty(ret.ty) {\n+        ret.extend_integer_width_to(32);\n+    } else {\n+        ret.make_indirect(ccx);\n+    }\n+}\n+\n+fn classify_arg_ty(ccx: &CrateContext, arg: &mut ArgType, offset: &mut usize) {\n+    let orig_offset = *offset;\n+    let size = ty_size(arg.ty) * 8;\n+    let mut align = ty_align(arg.ty);\n+\n+    align = cmp::min(cmp::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    if !is_reg_ty(arg.ty) {\n+        arg.cast = Some(struct_ty(ccx, arg.ty));\n+        arg.pad = padding_ty(ccx, align, orig_offset);\n+    } else {\n+        arg.extend_integer_width_to(32);\n+    }\n+}\n+\n+fn is_reg_ty(ty: Type) -> bool {\n+    return match ty.kind() {\n+        Integer\n+        | Pointer\n+        | Float\n+        | Double\n+        | Vector => true,\n+        _ => false\n+    };\n+}\n+\n+fn padding_ty(ccx: &CrateContext, align: usize, offset: usize) -> Option<Type> {\n+    if ((align - 1 ) & offset) > 0 {\n+        Some(Type::i32(ccx))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn coerce_to_int(ccx: &CrateContext, size: usize) -> Vec<Type> {\n+    let int_ty = Type::i32(ccx);\n+    let mut args = Vec::new();\n+\n+    let mut n = size / 32;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 32;\n+    if r > 0 {\n+        unsafe {\n+            args.push(Type::from_ref(llvm::LLVMIntTypeInContext(ccx.llcx(), r as c_uint)));\n+        }\n+    }\n+\n+    args\n+}\n+\n+fn struct_ty(ccx: &CrateContext, ty: Type) -> Type {\n+    let size = ty_size(ty) * 8;\n+    Type::struct_(ccx, &coerce_to_int(ccx, size), false)\n+}\n+\n+pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(ccx, &mut fty.ret);\n+    }\n+\n+    let mut offset = if fty.ret.is_indirect() { 4 } else { 0 };\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(ccx, arg, &mut offset);\n+    }\n+}"}, {"sha": "0032ca1a68a62e46c343e6f2b411f3894f7d81a8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d40c2bbe0210fb644ea9756a9bc80a897a6484/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=79d40c2bbe0210fb644ea9756a9bc80a897a6484", "patch": "@@ -107,6 +107,7 @@ mod cabi_msp430;\n mod cabi_powerpc;\n mod cabi_powerpc64;\n mod cabi_s390x;\n+mod cabi_sparc;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;"}]}