{"sha": "0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMTZkOWE0MjVkOTFjYmNmOWVlZDg4ZjE5NmI4ZWM2ZjhmMzE0ZTI=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-04-20T19:11:29Z"}, "committer": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-04-20T19:11:29Z"}, "message": "Merge pull request #866 from cramertj/master\n\nAdd UNSAFE_REMOVED_FROM_NAME lint", "tree": {"sha": "e7243d9cefd82f356bf67d69eaf1f537df688e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7243d9cefd82f356bf67d69eaf1f537df688e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "html_url": "https://github.com/rust-lang/rust/commit/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bc067089eae3011b92aed71191a48bf2b9a0d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc067089eae3011b92aed71191a48bf2b9a0d58", "html_url": "https://github.com/rust-lang/rust/commit/0bc067089eae3011b92aed71191a48bf2b9a0d58"}, {"sha": "ed65b259ffb67babc36d621b3e2989eed3ab0853", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed65b259ffb67babc36d621b3e2989eed3ab0853", "html_url": "https://github.com/rust-lang/rust/commit/ed65b259ffb67babc36d621b3e2989eed3ab0853"}], "stats": {"total": 122, "additions": 120, "deletions": 2}, "files": [{"sha": "272f5d77f350755480f319c11468a74f8551f0cb", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "patch": "@@ -2,7 +2,7 @@\n All notable changes to this project will be documented in this file.\n \n ## Unreleased\n-* New lint: [`temporary_cstring_as_ptr`]\n+* New lint: [`temporary_cstring_as_ptr`] and [`unsafe_removed_from_name`]\n \n ## 0.0.63 \u2014 2016-04-08\n * Rustup to *rustc 1.9.0-nightly (7979dd608 2016-04-07)*\n@@ -198,6 +198,7 @@ All notable changes to this project will be documented in this file.\n [`unit_cmp`]: https://github.com/Manishearth/rust-clippy/wiki#unit_cmp\n [`unnecessary_mut_passed`]: https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed\n [`unneeded_field_pattern`]: https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern\n+[`unsafe_removed_from_name`]: https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name\n [`unstable_as_mut_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_mut_slice\n [`unstable_as_slice`]: https://github.com/Manishearth/rust-clippy/wiki#unstable_as_slice\n [`unused_collect`]: https://github.com/Manishearth/rust-clippy/wiki#unused_collect"}, {"sha": "6aa1e1ecf340a6dd3c1d29c326112d863d5d1fae", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 142 lints included in this crate:\n+There are 143 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -146,6 +146,7 @@ name\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n [unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | Struct fields are bound to a wildcard instead of using `..`\n+[unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                 | warn    | unsafe removed from name\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                         | warn    | unused label\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                 | warn    | unused lifetimes in function definitions"}, {"sha": "5774f3bf7af4b067183367d868a629ab257a8453", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "patch": "@@ -108,6 +108,7 @@ pub mod temporary_assignment;\n pub mod transmute;\n pub mod types;\n pub mod unicode;\n+pub mod unsafe_removed_from_name;\n pub mod unused_label;\n pub mod vec;\n pub mod zero_div_zero;\n@@ -234,6 +235,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n     reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n     reg.register_late_lint_pass(box neg_multiply::NegMultiply);\n+    reg.register_late_lint_pass(box unsafe_removed_from_name::UnsafeNameRemoval);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -378,6 +380,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::TYPE_COMPLEXITY,\n         types::UNIT_CMP,\n         unicode::ZERO_WIDTH_SPACE,\n+        unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n         unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,"}, {"sha": "404d6d936041c637bd1ac831325e9df4acc27cbe", "filename": "src/unsafe_removed_from_name.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/src%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/src%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsafe_removed_from_name.rs?ref=0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "patch": "@@ -0,0 +1,81 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::ast::Name;\n+use syntax::codemap::Span;\n+use syntax::parse::token::InternedString;\n+use utils::span_lint;\n+\n+/// **What it does:** This lint checks for imports that remove \"unsafe\" from an item's name\n+///\n+/// **Why is this bad?** Renaming makes it less clear which traits and structures are unsafe.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// use std::cell::{UnsafeCell as TotallySafeCell};\n+///\n+/// extern crate crossbeam;\n+/// use crossbeam::{spawn_unsafe as spawn};\n+/// ```\n+declare_lint! {\n+    pub UNSAFE_REMOVED_FROM_NAME,\n+    Warn,\n+    \"unsafe removed from name\"\n+}\n+\n+pub struct UnsafeNameRemoval;\n+\n+impl LintPass for UnsafeNameRemoval {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNSAFE_REMOVED_FROM_NAME)\n+    }\n+}\n+\n+impl LateLintPass for UnsafeNameRemoval {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        if let ItemUse(ref item_use) = item.node {\n+            match item_use.node {\n+                ViewPath_::ViewPathSimple(ref name, ref path) => {\n+                    unsafe_to_safe_check(\n+                        path.segments\n+                            .last()\n+                            .expect(\"use paths cannot be empty\")\n+                            .identifier.name,\n+                        *name,\n+                        cx, &item.span\n+                        );\n+                },\n+                ViewPath_::ViewPathList(_, ref path_list_items) => {\n+                    for path_list_item in path_list_items.iter() {\n+                        let plid = path_list_item.node;\n+                        if let (Some(name), Some(rename)) = (plid.name(), plid.rename()) {\n+                            unsafe_to_safe_check(name, rename, cx, &item.span);\n+                        };\n+                    }\n+                },\n+                ViewPath_::ViewPathGlob(_) => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn unsafe_to_safe_check(old_name: Name, new_name: Name, cx: &LateContext, span: &Span) {\n+    let old_str = old_name.as_str();\n+    let new_str = new_name.as_str();\n+    if contains_unsafe(&old_str) && !contains_unsafe(&new_str) {\n+        span_lint(\n+            cx,\n+            UNSAFE_REMOVED_FROM_NAME,\n+            *span,\n+            &format!(\n+                \"removed \\\"unsafe\\\" from the name of `{}` in use as `{}`\",\n+                old_str,\n+                new_str\n+            ));\n+    }\n+}\n+\n+fn contains_unsafe(name: &InternedString) -> bool {\n+    name.contains(\"Unsafe\") || name.contains(\"unsafe\")\n+}"}, {"sha": "3e5f6e58c90a3fc77037638ad7c65aa40502dc92", "filename": "tests/compile-fail/unsafe_removed_from_name.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funsafe_removed_from_name.rs?ref=0e16d9a425d91cbcf9eed88f196b8ec6f8f314e2", "patch": "@@ -0,0 +1,32 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![allow(unused_imports)]\n+#![allow(dead_code)]\n+#![deny(unsafe_removed_from_name)]\n+\n+use std::cell::{UnsafeCell as TotallySafeCell};\n+//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCell`\n+\n+use std::cell::UnsafeCell as TotallySafeCellAgain;\n+//~^ ERROR removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n+\n+// Shouldn't error\n+use std::cell::{UnsafeCell as SuperDangerousUnsafeCell};\n+use std::cell::{UnsafeCell as Dangerunsafe};\n+use std::cell::UnsafeCell as Bombsawayunsafe;\n+use std::cell::{RefCell as ProbablyNotUnsafe};\n+use std::cell::RefCell as RefCellThatCantBeUnsafe;\n+\n+mod mod_with_some_unsafe_things {\n+    pub struct Safe {}\n+    pub struct Unsafe {}\n+}\n+\n+use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;\n+//~^ ERROR removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n+\n+// Shouldn't error\n+use mod_with_some_unsafe_things::Safe as IPromiseItsSafeThisTime;\n+use mod_with_some_unsafe_things::Unsafe as SuperUnsafeModThing;\n+\n+fn main() {}"}]}