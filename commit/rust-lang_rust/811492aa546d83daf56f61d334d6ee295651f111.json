{"sha": "811492aa546d83daf56f61d334d6ee295651f111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTQ5MmFhNTQ2ZDgzZGFmNTZmNjFkMzM0ZDZlZTI5NTY1MWYxMTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-06T12:54:49Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-06T12:54:49Z"}, "message": "Merge #1657\n\n1657: Ignore r=matklad a=matklad\n\ncloses #1616 \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "066a13499c26738cae11a34819b6048c5123d88b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/066a13499c26738cae11a34819b6048c5123d88b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/811492aa546d83daf56f61d334d6ee295651f111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/811492aa546d83daf56f61d334d6ee295651f111", "html_url": "https://github.com/rust-lang/rust/commit/811492aa546d83daf56f61d334d6ee295651f111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/811492aa546d83daf56f61d334d6ee295651f111/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c9718691043b041f5db878caea687b5a029d4475", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9718691043b041f5db878caea687b5a029d4475", "html_url": "https://github.com/rust-lang/rust/commit/c9718691043b041f5db878caea687b5a029d4475"}, {"sha": "3d45da9bca7ab772ea483b496a901fc500e22033", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d45da9bca7ab772ea483b496a901fc500e22033", "html_url": "https://github.com/rust-lang/rust/commit/3d45da9bca7ab772ea483b496a901fc500e22033"}], "stats": {"total": 380, "additions": 217, "deletions": 163}, "files": [{"sha": "365b77f41d3904a16663c0a61fc17fa6ed04808d", "filename": "Cargo.lock", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -117,6 +117,14 @@ dependencies = [\n  \"byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bstr\"\n+version = \"0.2.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"memchr 2.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"byte-tools\"\n version = \"0.3.1\"\n@@ -478,6 +486,11 @@ dependencies = [\n  \"yansi 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"fnv\"\n+version = \"1.0.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"format-buf\"\n version = \"1.0.0\"\n@@ -571,6 +584,18 @@ name = \"glob\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"globset\"\n+version = \"0.4.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"aho-corasick 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"heck\"\n version = \"0.3.1\"\n@@ -1145,6 +1170,7 @@ dependencies = [\n  \"ra_ide_api 0.1.0\",\n  \"ra_project_model 0.1.0\",\n  \"ra_vfs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs_glob 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1250,6 +1276,7 @@ dependencies = [\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"ra_vfs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs_glob 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1301,7 +1328,6 @@ dependencies = [\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n- \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.98 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1369,6 +1395,14 @@ dependencies = [\n  \"walkdir 2.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"ra_vfs_glob\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rand\"\n version = \"0.6.5\"\n@@ -2116,6 +2150,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n \"checksum block-buffer 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n \"checksum block-padding 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d4dc3af3ee2e12f3e5d224e5e1e3d73668abbeb69e566d361f7d5563a4fdf09\"\n+\"checksum bstr 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e0a692f1c740e7e821ca71a22cf99b9b2322dfa94d10f71443befb1797b3946a\"\n \"checksum byte-tools 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n \"checksum byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7c3dd8985a7111efc5c80b44e23ecdd8c007de8ade3b96595387e812b957cf5\"\n \"checksum c2-chacha 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7d64d04786e0f528460fc884753cf8dddcc466be308f6026f8e355c41a0e4101\"\n@@ -2158,6 +2193,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum filetime 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f8c63033fcba1f51ef744505b3cad42510432b904c062afa67ad7ece008429d\"\n \"checksum fixedbitset 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33\"\n \"checksum flexi_logger 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2be2727ae1f60711d1991788605245e70cc500bd1d92edb909af160634e1a869\"\n+\"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f7aea5a5909a74969507051a3b17adc84737e31a5f910559892aedce026f4d53\"\n \"checksum fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5f2a4a2034423744d2cc7ca2068453168dcdb82c438419e639a26bd87839c674\"\n \"checksum fsevent 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5ab7d1bd1bd33cc98b0889831b72da23c0aa4df9cec7e0702f46ecea04b35db6\"\n@@ -2170,6 +2206,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum getrandom 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34f33de6f0ae7c9cb5e574502a562e2b512799e32abb801cd1e79ad952b62b49\"\n \"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n \"checksum glob 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n+\"checksum globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925aa2cac82d8834e2b2a4415b6f6879757fb5c0928fc445ae76461a12eed8f2\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humansize 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b6cab2627acfc432780848602f3f558f7e9dd427352224b0d9324025796d2a5e\"\n \"checksum idna 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"38f09e0f0b1fb55fdee1f17470ad800da77af5186a1a76c026b679358b7e844e\""}, {"sha": "8e23826a41c2605a9e1ce8ca83e09a0ef09db8da", "filename": "crates/ra_batch/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_batch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_batch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2FCargo.toml?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -9,6 +9,7 @@ log = \"0.4.5\"\n rustc-hash = \"1.0\"\n \n ra_vfs = \"0.2.0\"\n+ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n ra_db = { path = \"../ra_db\" }\n ra_ide_api = { path = \"../ra_ide_api\" }\n ra_hir = { path = \"../ra_hir\" }"}, {"sha": "0db7514658efa5a0978f1e9bb79ad23a4e06a2a8", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -1,14 +1,12 @@\n-mod vfs_filter;\n-\n use std::{collections::HashSet, error::Error, path::Path};\n \n use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide_api::{AnalysisChange, AnalysisHost};\n use ra_project_model::{PackageRoot, ProjectWorkspace};\n-use ra_vfs::{Vfs, VfsChange};\n-use vfs_filter::IncludeRustFiles;\n+use ra_vfs::{RootEntry, Vfs, VfsChange};\n+use ra_vfs_glob::RustPackageFilterBuilder;\n \n type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n@@ -23,7 +21,19 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(root.as_ref())?;\n     let project_roots = ws.to_roots();\n-    let (mut vfs, roots) = Vfs::new(IncludeRustFiles::from_roots(project_roots.clone()).collect());\n+    let (mut vfs, roots) = Vfs::new(\n+        project_roots\n+            .iter()\n+            .map(|pkg_root| {\n+                RootEntry::new(\n+                    pkg_root.path().clone(),\n+                    RustPackageFilterBuilder::default()\n+                        .set_member(pkg_root.is_member())\n+                        .into_vfs_filter(),\n+                )\n+            })\n+            .collect(),\n+    );\n     let crate_graph = ws.to_crate_graph(&mut |path: &Path| {\n         let vfs_file = vfs.load(path);\n         log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);"}, {"sha": "63bf77704ad9aa689862d748185c09c5bed3afa8", "filename": "crates/ra_batch/src/vfs_filter.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c9718691043b041f5db878caea687b5a029d4475/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9718691043b041f5db878caea687b5a029d4475/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Fvfs_filter.rs?ref=c9718691043b041f5db878caea687b5a029d4475", "patch": "@@ -1,54 +0,0 @@\n-use ra_project_model::PackageRoot;\n-use ra_vfs::{Filter, RelativePath, RootEntry};\n-use std::path::PathBuf;\n-\n-/// `IncludeRustFiles` is used to convert\n-/// from `PackageRoot` to `RootEntry` for VFS\n-pub struct IncludeRustFiles {\n-    root: PackageRoot,\n-}\n-\n-impl IncludeRustFiles {\n-    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\n-    where\n-        R: IntoIterator<Item = PackageRoot>,\n-    {\n-        roots.into_iter().map(IncludeRustFiles::from_root)\n-    }\n-\n-    pub fn from_root(root: PackageRoot) -> RootEntry {\n-        IncludeRustFiles::from(root).into()\n-    }\n-\n-    #[allow(unused)]\n-    pub fn external(path: PathBuf) -> RootEntry {\n-        IncludeRustFiles::from_root(PackageRoot::new(path, false))\n-    }\n-\n-    pub fn member(path: PathBuf) -> RootEntry {\n-        IncludeRustFiles::from_root(PackageRoot::new(path, true))\n-    }\n-}\n-\n-impl Filter for IncludeRustFiles {\n-    fn include_dir(&self, dir_path: &RelativePath) -> bool {\n-        self.root.include_dir(dir_path)\n-    }\n-\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\n-        self.root.include_file(file_path)\n-    }\n-}\n-\n-impl From<PackageRoot> for IncludeRustFiles {\n-    fn from(v: PackageRoot) -> IncludeRustFiles {\n-        IncludeRustFiles { root: v }\n-    }\n-}\n-\n-impl From<IncludeRustFiles> for RootEntry {\n-    fn from(v: IncludeRustFiles) -> RootEntry {\n-        let path = v.root.path().clone();\n-        RootEntry::new(path, Box::new(v))\n-    }\n-}"}, {"sha": "c282d6db8e35b940c8c8162205ca8a6ce1fd4004", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -25,6 +25,7 @@ ra_ide_api = { path = \"../ra_ide_api\" }\n gen_lsp_server = { path = \"../gen_lsp_server\" }\n ra_project_model = { path = \"../ra_project_model\" }\n ra_prof = { path = \"../ra_prof\" }\n+ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "6dcdc695a79e41db7bb05ed07ac02495d5c9f80a", "filename": "crates/ra_lsp_server/src/config.rs", "status": "renamed", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -1,9 +1,9 @@\n use serde::{Deserialize, Deserializer};\n \n /// Client provided initialization options\n-#[derive(Deserialize, Clone, Copy, Debug, PartialEq, Eq)]\n+#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n #[serde(rename_all = \"camelCase\", default)]\n-pub struct InitializationOptions {\n+pub struct ServerConfig {\n     /// Whether the client supports our custom highlighting publishing decorations.\n     /// This is different to the highlightingOn setting, which is whether the user\n     /// wants our custom highlighting to be used.\n@@ -18,14 +18,17 @@ pub struct InitializationOptions {\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub show_workspace_loaded: bool,\n \n+    pub exclude_globs: Vec<String>,\n+\n     pub lru_capacity: Option<usize>,\n }\n \n-impl Default for InitializationOptions {\n-    fn default() -> InitializationOptions {\n-        InitializationOptions {\n+impl Default for ServerConfig {\n+    fn default() -> ServerConfig {\n+        ServerConfig {\n             publish_decorations: false,\n             show_workspace_loaded: true,\n+            exclude_globs: Vec::new(),\n             lru_capacity: None,\n         }\n     }\n@@ -56,7 +59,7 @@ mod test {\n     #[test]\n     fn deserialize_init_options_defaults() {\n         // check that null == default for both fields\n-        let default = InitializationOptions::default();\n+        let default = ServerConfig::default();\n         assert_eq!(default, serde_json::from_str(r#\"{}\"#).unwrap());\n         assert_eq!(\n             default,", "previous_filename": "crates/ra_lsp_server/src/init.rs"}, {"sha": "795f863838c6c223d8a80537b7a3c60671efc8a7", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -4,13 +4,11 @@ mod conv;\n mod main_loop;\n mod markdown;\n mod project_model;\n-mod vfs_filter;\n pub mod req;\n-pub mod init;\n+pub mod config;\n mod world;\n \n pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n pub use crate::{\n-    caps::server_capabilities, init::InitializationOptions, main_loop::main_loop,\n-    main_loop::LspError,\n+    caps::server_capabilities, config::ServerConfig, main_loop::main_loop, main_loop::LspError,\n };"}, {"sha": "1a2ab1bc2f1596fcd6bd99b94fb15e31a6b7bb81", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -2,7 +2,7 @@ use flexi_logger::{Duplicate, Logger};\n use gen_lsp_server::{run_server, stdio_transport};\n use serde::Deserialize;\n \n-use ra_lsp_server::{InitializationOptions, Result};\n+use ra_lsp_server::{Result, ServerConfig};\n use ra_prof;\n \n fn main() -> Result<()> {\n@@ -48,7 +48,7 @@ fn main_inner() -> Result<()> {\n \n         let opts = params\n             .initialization_options\n-            .and_then(|v| InitializationOptions::deserialize(v).ok())\n+            .and_then(|v| ServerConfig::deserialize(v).ok())\n             .unwrap_or_default();\n \n         ra_lsp_server::main_loop(workspace_roots, params.capabilities, opts, r, s)"}, {"sha": "9d540a87e6eb5e7a5a17126ee79f2d0c1c9eb5bd", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     project_model::workspace_loader,\n     req,\n     world::{Options, WorldSnapshot, WorldState},\n-    InitializationOptions, Result,\n+    Result, ServerConfig,\n };\n \n const THREADPOOL_SIZE: usize = 8;\n@@ -52,10 +52,11 @@ impl Error for LspError {}\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     client_caps: ClientCapabilities,\n-    options: InitializationOptions,\n+    config: ServerConfig,\n     msg_receiver: &Receiver<RawMessage>,\n     msg_sender: &Sender<RawMessage>,\n ) -> Result<()> {\n+    log::debug!(\"server_config: {:?}\", config);\n     // FIXME: support dynamic workspace loading.\n     let workspaces = {\n         let ws_worker = workspace_loader();\n@@ -77,14 +78,19 @@ pub fn main_loop(\n         }\n         loaded_workspaces\n     };\n-\n+    let globs = config\n+        .exclude_globs\n+        .iter()\n+        .map(|glob| ra_vfs_glob::Glob::new(glob))\n+        .collect::<std::result::Result<Vec<_>, _>>()?;\n     let mut state = WorldState::new(\n         ws_roots,\n         workspaces,\n-        options.lru_capacity,\n+        config.lru_capacity,\n+        &globs,\n         Options {\n-            publish_decorations: options.publish_decorations,\n-            show_workspace_loaded: options.show_workspace_loaded,\n+            publish_decorations: config.publish_decorations,\n+            show_workspace_loaded: config.show_workspace_loaded,\n             supports_location_link: client_caps\n                 .text_document\n                 .and_then(|it| it.definition)"}, {"sha": "abdc8dbad2405200ce4af4a8c4c8027e9b44d9d8", "filename": "crates/ra_lsp_server/src/vfs_filter.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c9718691043b041f5db878caea687b5a029d4475/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9718691043b041f5db878caea687b5a029d4475/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fvfs_filter.rs?ref=c9718691043b041f5db878caea687b5a029d4475", "patch": "@@ -1,54 +0,0 @@\n-use ra_project_model::PackageRoot;\r\n-use ra_vfs::{Filter, RelativePath, RootEntry};\r\n-use std::path::PathBuf;\r\n-\r\n-/// `IncludeRustFiles` is used to convert\r\n-/// from `PackageRoot` to `RootEntry` for VFS\r\n-pub struct IncludeRustFiles {\r\n-    root: PackageRoot,\r\n-}\r\n-\r\n-impl IncludeRustFiles {\r\n-    pub fn from_roots<R>(roots: R) -> impl Iterator<Item = RootEntry>\r\n-    where\r\n-        R: IntoIterator<Item = PackageRoot>,\r\n-    {\r\n-        roots.into_iter().map(IncludeRustFiles::from_root)\r\n-    }\r\n-\r\n-    pub fn from_root(root: PackageRoot) -> RootEntry {\r\n-        IncludeRustFiles::from(root).into()\r\n-    }\r\n-\r\n-    #[allow(unused)]\r\n-    pub fn external(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(PackageRoot::new(path, false))\r\n-    }\r\n-\r\n-    pub fn member(path: PathBuf) -> RootEntry {\r\n-        IncludeRustFiles::from_root(PackageRoot::new(path, true))\r\n-    }\r\n-}\r\n-\r\n-impl Filter for IncludeRustFiles {\r\n-    fn include_dir(&self, dir_path: &RelativePath) -> bool {\r\n-        self.root.include_dir(dir_path)\r\n-    }\r\n-\r\n-    fn include_file(&self, file_path: &RelativePath) -> bool {\r\n-        self.root.include_file(file_path)\r\n-    }\r\n-}\r\n-\r\n-impl std::convert::From<PackageRoot> for IncludeRustFiles {\r\n-    fn from(v: PackageRoot) -> IncludeRustFiles {\r\n-        IncludeRustFiles { root: v }\r\n-    }\r\n-}\r\n-\r\n-impl std::convert::From<IncludeRustFiles> for RootEntry {\r\n-    fn from(v: IncludeRustFiles) -> RootEntry {\r\n-        let path = v.root.path().clone();\r\n-        RootEntry::new(path, Box::new(v))\r\n-    }\r\n-}\r"}, {"sha": "9990ef62e163928691fb8265607ba22bd84608b6", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -9,13 +9,13 @@ use parking_lot::RwLock;\n use ra_ide_api::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n+use ra_vfs::{RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n+use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n \n use crate::{\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     project_model::ProjectWorkspace,\n-    vfs_filter::IncludeRustFiles,\n     LspError, Result,\n };\n \n@@ -56,14 +56,28 @@ impl WorldState {\n         folder_roots: Vec<PathBuf>,\n         workspaces: Vec<ProjectWorkspace>,\n         lru_capacity: Option<usize>,\n+        exclude_globs: &[Glob],\n         options: Options,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n-        roots.extend(folder_roots.iter().cloned().map(IncludeRustFiles::member));\n+        roots.extend(folder_roots.iter().map(|path| {\n+            let mut filter = RustPackageFilterBuilder::default().set_member(true);\n+            for glob in exclude_globs.iter() {\n+                filter = filter.exclude(glob.clone());\n+            }\n+            RootEntry::new(path.clone(), filter.into_vfs_filter())\n+        }));\n         for ws in workspaces.iter() {\n-            roots.extend(IncludeRustFiles::from_roots(ws.to_roots()));\n+            roots.extend(ws.to_roots().into_iter().map(|pkg_root| {\n+                let mut filter =\n+                    RustPackageFilterBuilder::default().set_member(pkg_root.is_member());\n+                for glob in exclude_globs.iter() {\n+                    filter = filter.exclude(glob.clone());\n+                }\n+                RootEntry::new(pkg_root.path().clone(), filter.into_vfs_filter())\n+            }));\n         }\n \n         let (mut vfs, vfs_roots) = Vfs::new(roots);"}, {"sha": "ba8ee8b062e16d39afbc162067aa820e735f2e5c", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -22,7 +22,7 @@ use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n use thread_worker::Worker;\n \n-use ra_lsp_server::{main_loop, req, InitializationOptions};\n+use ra_lsp_server::{main_loop, req, ServerConfig};\n \n pub struct Project<'a> {\n     fixture: &'a str,\n@@ -107,7 +107,7 @@ impl Server {\n                         window: None,\n                         experimental: None,\n                     },\n-                    InitializationOptions::default(),\n+                    ServerConfig::default(),\n                     &msg_receiver,\n                     &msg_sender,\n                 )"}, {"sha": "4fd6c75efb392f3e0a389d7f93e9f5d4ae3ee7fe", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -7,7 +7,6 @@ authors = [\"rust-analyzer developers\"]\n [dependencies]\n log = \"0.4.5\"\n rustc-hash = \"1.0\"\n-relative-path = \"0.4.0\"\n \n cargo_metadata = \"0.8.0\"\n "}, {"sha": "55b94b91137a96aea866b7d1965a2c3115993a8d", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -10,7 +10,6 @@ use std::{\n };\n \n use ra_db::{CrateGraph, Edition, FileId};\n-use relative_path::RelativePath;\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -54,28 +53,6 @@ impl PackageRoot {\n     pub fn is_member(&self) -> bool {\n         self.is_member\n     }\n-\n-    pub fn include_dir(&self, dir_path: &RelativePath) -> bool {\n-        const COMMON_IGNORED_DIRS: &[&str] = &[\"node_modules\", \"target\", \".git\"];\n-        const EXTERNAL_IGNORED_DIRS: &[&str] = &[\"examples\", \"tests\", \"benches\"];\n-\n-        let is_ignored = if self.is_member {\n-            dir_path.components().any(|c| COMMON_IGNORED_DIRS.contains(&c.as_str()))\n-        } else {\n-            dir_path.components().any(|c| {\n-                let path = c.as_str();\n-                COMMON_IGNORED_DIRS.contains(&path) || EXTERNAL_IGNORED_DIRS.contains(&path)\n-            })\n-        };\n-\n-        let hidden = dir_path.components().any(|c| c.as_str().starts_with('.'));\n-\n-        !is_ignored && !hidden\n-    }\n-\n-    pub fn include_file(&self, file_path: &RelativePath) -> bool {\n-        file_path.extension() == Some(\"rs\")\n-    }\n }\n \n impl ProjectWorkspace {"}, {"sha": "0390d7da16731506aaf6a37a2b64498e66cfe774", "filename": "crates/ra_vfs_glob/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_vfs_glob%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_vfs_glob%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs_glob%2FCargo.toml?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+edition = \"2018\"\n+name = \"ra_vfs_glob\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+\n+[dependencies]\n+ra_vfs = \"0.2.0\"\n+globset = \"0.4.4\""}, {"sha": "12401d75a82d2feed80b0dc438e1ba4c36921636", "filename": "crates/ra_vfs_glob/src/lib.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_vfs_glob%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/crates%2Fra_vfs_glob%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs_glob%2Fsrc%2Flib.rs?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -0,0 +1,94 @@\n+//! `ra_vfs_glob` crate implements exclusion rules for vfs.\n+//!\n+//! By default, we include only `.rs` files, and skip some know offenders like\n+//! `/target` or `/node_modules` altogether.\n+//!\n+//! It's also possible to add custom exclusion globs.\n+\n+use globset::{GlobSet, GlobSetBuilder};\n+use ra_vfs::{Filter, RelativePath};\n+\n+pub use globset::{Glob, GlobBuilder};\n+\n+const ALWAYS_IGNORED: &[&str] = &[\"target/**\", \"**/node_modules/**\", \"**/.git/**\"];\n+const IGNORED_FOR_NON_MEMBERS: &[&str] = &[\"examples/**\", \"tests/**\", \"benches/**\"];\n+\n+pub struct RustPackageFilterBuilder {\n+    is_member: bool,\n+    exclude: GlobSetBuilder,\n+}\n+\n+impl Default for RustPackageFilterBuilder {\n+    fn default() -> RustPackageFilterBuilder {\n+        RustPackageFilterBuilder { is_member: false, exclude: GlobSetBuilder::new() }\n+    }\n+}\n+\n+impl RustPackageFilterBuilder {\n+    pub fn set_member(mut self, is_member: bool) -> RustPackageFilterBuilder {\n+        self.is_member = is_member;\n+        self\n+    }\n+    pub fn exclude(mut self, glob: Glob) -> RustPackageFilterBuilder {\n+        self.exclude.add(glob);\n+        self\n+    }\n+    pub fn into_vfs_filter(self) -> Box<dyn Filter> {\n+        let RustPackageFilterBuilder { is_member, mut exclude } = self;\n+        for &glob in ALWAYS_IGNORED {\n+            exclude.add(Glob::new(glob).unwrap());\n+        }\n+        if !is_member {\n+            for &glob in IGNORED_FOR_NON_MEMBERS {\n+                exclude.add(Glob::new(glob).unwrap());\n+            }\n+        }\n+        Box::new(RustPackageFilter { exclude: exclude.build().unwrap() })\n+    }\n+}\n+\n+struct RustPackageFilter {\n+    exclude: GlobSet,\n+}\n+\n+impl Filter for RustPackageFilter {\n+    fn include_dir(&self, dir_path: &RelativePath) -> bool {\n+        !self.exclude.is_match(dir_path.as_str())\n+    }\n+\n+    fn include_file(&self, file_path: &RelativePath) -> bool {\n+        file_path.extension() == Some(\"rs\")\n+    }\n+}\n+\n+#[test]\n+fn test_globs() {\n+    let filter = RustPackageFilterBuilder::default().set_member(true).into_vfs_filter();\n+\n+    assert!(filter.include_dir(RelativePath::new(\"src/tests\")));\n+    assert!(filter.include_dir(RelativePath::new(\"src/target\")));\n+    assert!(filter.include_dir(RelativePath::new(\"tests\")));\n+    assert!(filter.include_dir(RelativePath::new(\"benches\")));\n+\n+    assert!(!filter.include_dir(RelativePath::new(\"target\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"src/foo/.git\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"foo/node_modules\")));\n+\n+    let filter = RustPackageFilterBuilder::default().set_member(false).into_vfs_filter();\n+\n+    assert!(filter.include_dir(RelativePath::new(\"src/tests\")));\n+    assert!(filter.include_dir(RelativePath::new(\"src/target\")));\n+\n+    assert!(!filter.include_dir(RelativePath::new(\"target\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"src/foo/.git\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"foo/node_modules\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"tests\")));\n+    assert!(!filter.include_dir(RelativePath::new(\"benches\")));\n+\n+    let filter = RustPackageFilterBuilder::default()\n+        .set_member(true)\n+        .exclude(Glob::new(\"src/llvm-project/**\").unwrap())\n+        .into_vfs_filter();\n+\n+    assert!(!filter.include_dir(RelativePath::new(\"src/llvm-project/clang\")));\n+}"}, {"sha": "7990d1d31b12f4b642a6bcb2e331b4150b1ed6bd", "filename": "docs/user/README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -71,6 +71,9 @@ See https://github.com/microsoft/vscode/issues/72308[microsoft/vscode#72308] for\n * `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n * `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n   watch` for live error highlighting (note, this **does not** use rust-analyzer)\n+* `rust-analyzer.excludeGlobs`: a list of glob-patterns for exclusion (see globset [docs](https://docs.rs/globset) for syntax).\n+  Note: glob patterns are applied to all Cargo packages and a rooted at a package root.\n+  This is not very intuitive and a limitation of a current implementation.\n * `rust-analyzer.cargo-watch.check-arguments`: cargo-watch check arguments.\n   (e.g: `--features=\"shumway,pdf\"` will run as `cargo watch -x \"check --features=\"shumway,pdf\"\"` )\n * `rust-analyzer.trace.server`: enables internal logging"}, {"sha": "48ab886bf87dd20c74ddb8eea72ea5ab1d34126e", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -197,6 +197,11 @@\n                     ],\n                     \"description\": \"Whether to run `cargo watch` on startup\"\n                 },\n+                \"rust-analyzer.excludeGlobs\": {\n+                    \"type\": \"array\",\n+                    \"default\": \"[]\",\n+                    \"description\": \"Paths to exclude from analysis\"\n+                },\n                 \"rust-analyzer.cargo-watch.arguments\": {\n                     \"type\": \"string\",\n                     \"description\": \"`cargo-watch` arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\","}, {"sha": "4df6b50ef7908ce9d6cb6e6e680230d56e241fd6", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -22,6 +22,7 @@ export class Config {\n     public showWorkspaceLoadedNotification = true;\n     public lruCapacity: null | number = null;\n     public displayInlayHints = true;\n+    public excludeGlobs = [];\n     public cargoWatchOptions: CargoWatchOptions = {\n         enableOnStartup: 'ask',\n         trace: 'off',\n@@ -128,5 +129,8 @@ export class Config {\n         if (config.has('displayInlayHints')) {\n             this.displayInlayHints = config.get('displayInlayHints') as boolean;\n         }\n+        if (config.has('excludeGlobs')) {\n+            this.excludeGlobs = config.get('excludeGlobs') || [];\n+        }\n     }\n }"}, {"sha": "2b4c25c284469e36a3145459c77f5bd4449b7bdf", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/811492aa546d83daf56f61d334d6ee295651f111/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=811492aa546d83daf56f61d334d6ee295651f111", "patch": "@@ -36,7 +36,8 @@ export class Server {\n                 publishDecorations: true,\n                 showWorkspaceLoaded:\n                     Server.config.showWorkspaceLoadedNotification,\n-                lruCapacity: Server.config.lruCapacity\n+                lruCapacity: Server.config.lruCapacity,\n+                excludeGlobs: Server.config.excludeGlobs\n             },\n             traceOutputChannel\n         };"}]}