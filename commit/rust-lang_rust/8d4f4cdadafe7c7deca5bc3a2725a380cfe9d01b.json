{"sha": "8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNGY0Y2RhZGFmZTdjN2RlY2E1YmMzYTI3MjVhMzgwY2ZlOWQwMWI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-03-29T09:52:09Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T08:07:01Z"}, "message": "Reuse the pretty printing architecture for printing of constants", "tree": {"sha": "bd3c49b645decde412da33aa3655a23fb3568d4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3c49b645decde412da33aa3655a23fb3568d4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "html_url": "https://github.com/rust-lang/rust/commit/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d85e866c0d28fce32856d200fd534ac1c2c721c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d85e866c0d28fce32856d200fd534ac1c2c721c8", "html_url": "https://github.com/rust-lang/rust/commit/d85e866c0d28fce32856d200fd534ac1c2c721c8"}], "stats": {"total": 180, "additions": 100, "deletions": 80}, "files": [{"sha": "e44493dec2cf482e0caa6998fb90db0c93c410ef", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 67, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "patch": "@@ -9,8 +9,6 @@ use crate::hir::def_id::DefId;\n use crate::hir::{self, InlineAsm as HirInlineAsm};\n use crate::mir::interpret::{ConstValue, InterpError, Scalar};\n use crate::mir::visit::MirVisitable;\n-use rustc_apfloat::ieee::{Double, Single};\n-use rustc_apfloat::Float;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n@@ -21,13 +19,13 @@ use rustc_macros::HashStable;\n use crate::rustc_serialize::{self as serialize};\n use smallvec::SmallVec;\n use std::borrow::Cow;\n-use std::fmt::{self, Debug, Formatter, Write};\n+use std::fmt::{self, Debug, Formatter, Write, Display};\n use std::iter::FusedIterator;\n use std::ops::{Index, IndexMut};\n use std::slice;\n use std::vec::IntoIter;\n use std::{iter, mem, option, u32};\n-use syntax::ast::{self, Name};\n+use syntax::ast::Name;\n use syntax::symbol::{InternedString, Symbol};\n use syntax_pos::{Span, DUMMY_SP};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n@@ -1670,18 +1668,15 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 values\n                     .iter()\n                     .map(|&u| {\n-                        let mut s = String::new();\n-                        let c = ty::Const {\n+                        (&ty::Const {\n                             val: ConstValue::Scalar(\n                                 Scalar::Bits {\n                                     bits: u,\n                                     size: size.bytes() as u8,\n                                 }.into(),\n                             ),\n                             ty: switch_ty,\n-                        };\n-                        fmt_const_val(&mut s, c).unwrap();\n-                        s.into()\n+                        }).to_string().into()\n                     }).chain(iter::once(\"otherwise\".into()))\n                     .collect()\n             }\n@@ -2827,67 +2822,15 @@ newtype_index! {\n \n impl<'tcx> Debug for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"const \")?;\n-        fmt_const_val(fmt, *self.literal)\n-    }\n-}\n-/// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n-pub fn fmt_const_val(f: &mut impl Write, const_val: ty::Const<'_>) -> fmt::Result {\n-    use crate::ty::TyKind::*;\n-    let value = const_val.val;\n-    let ty = const_val.ty;\n-    // print some primitives\n-    if let ConstValue::Scalar(Scalar::Bits { bits, .. }) = value {\n-        match ty.sty {\n-            Bool if bits == 0 => return write!(f, \"false\"),\n-            Bool if bits == 1 => return write!(f, \"true\"),\n-            Float(ast::FloatTy::F32) => return write!(f, \"{}f32\", Single::from_bits(bits)),\n-            Float(ast::FloatTy::F64) => return write!(f, \"{}f64\", Double::from_bits(bits)),\n-            Uint(ui) => return write!(f, \"{:?}{}\", bits, ui),\n-            Int(i) => {\n-                let bit_width = ty::tls::with(|tcx| {\n-                    let ty = tcx.lift_to_global(&ty).unwrap();\n-                    tcx.layout_of(ty::ParamEnv::empty().and(ty))\n-                        .unwrap()\n-                        .size\n-                        .bits()\n-                });\n-                let shift = 128 - bit_width;\n-                return write!(f, \"{:?}{}\", ((bits as i128) << shift) >> shift, i);\n-            }\n-            Char => return write!(f, \"{:?}\", ::std::char::from_u32(bits as u32).unwrap()),\n-            _ => {}\n-        }\n+        write!(fmt, \"{}\", self)\n     }\n-    // print function definitions\n-    if let FnDef(did, _) = ty.sty {\n-        return write!(f, \"{}\", def_path_str(did));\n-    }\n-    // print string literals\n-    if let ConstValue::Slice(ptr, len) = value {\n-        if let Scalar::Ptr(ptr) = ptr {\n-            if let Ref(_, &ty::TyS { sty: Str, .. }, _) = ty.sty {\n-                return ty::tls::with(|tcx| {\n-                    let alloc = tcx.alloc_map.lock().get(ptr.alloc_id);\n-                    if let Some(interpret::AllocKind::Memory(alloc)) = alloc {\n-                        assert_eq!(len as usize as u64, len);\n-                        let slice =\n-                            &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n-                        let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n-                        write!(f, \"{:?}\", s)\n-                    } else {\n-                        write!(f, \"pointer to erroneous constant {:?}, {:?}\", ptr, len)\n-                    }\n-                });\n-            }\n-        }\n-    }\n-    // just raw dump everything else\n-    write!(f, \"{:?} : {}\", value, ty)\n }\n \n-fn def_path_str(def_id: DefId) -> String {\n-    ty::tls::with(|tcx| tcx.def_path_str(def_id))\n+impl<'tcx> Display for Constant<'tcx> {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        write!(fmt, \"const \")?;\n+        write!(fmt, \"{}\", self.literal)\n+    }\n }\n \n impl<'tcx> graph::DirectedGraph for Mir<'tcx> {"}, {"sha": "87be78857e325768d4097b2b64a7ba8bc798b1bc", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 52, "deletions": 7, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "patch": "@@ -6,7 +6,10 @@ use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use crate::ty::subst::{Kind, Subst, UnpackedKind};\n-use crate::mir::interpret::ConstValue;\n+use crate::mir::interpret::{ConstValue, sign_extend, Scalar};\n+use syntax::ast;\n+use rustc_apfloat::ieee::{Double, Single};\n+use rustc_apfloat::Float;\n use rustc_target::spec::abi::Abi;\n use syntax::symbol::{kw, InternedString};\n \n@@ -1533,12 +1536,54 @@ define_print_and_forward_display! {\n         p!(print_def_path(self.def_id, self.substs));\n     }\n \n-    &'tcx ty::Const<'tcx> {\n-        match self.val {\n-            ConstValue::Unevaluated(..) |\n-            ConstValue::Infer(..) => p!(write(\"_\")),\n-            ConstValue::Param(ParamConst { name, .. }) => p!(write(\"{}\", name)),\n-            _ => p!(write(\"{:?}\", self)),\n+    ty::Const<'tcx> {\n+        match (self.val, &self.ty.sty) {\n+            | (ConstValue::Unevaluated(..), _)\n+            | (ConstValue::Infer(..), _)\n+            => p!(write(\"_: \"), print(self.ty)),\n+            (ConstValue::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n+            (ConstValue::Scalar(Scalar::Bits { bits: 0, .. }), ty::Bool) => p!(write(\"false\")),\n+            (ConstValue::Scalar(Scalar::Bits { bits: 1, .. }), ty::Bool) => p!(write(\"true\")),\n+            (ConstValue::Scalar(Scalar::Bits { bits, .. }), ty::Float(ast::FloatTy::F32)) =>\n+                p!(write(\n+                    \"{}f32\",\n+                    Single::from_bits(bits)\n+                )),\n+            (ConstValue::Scalar(Scalar::Bits { bits, .. }), ty::Float(ast::FloatTy::F64)) =>\n+                p!(write(\n+                    \"{}f64\",\n+                    Double::from_bits(bits)\n+                )),\n+            (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Uint(ui)) =>\n+                p!(write(\"{}{}\", bits, ui)),\n+            (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Int(i)) => {\n+                let size = ty::tls::with(|tcx| {\n+                    let ty = tcx.lift_to_global(&self.ty).unwrap();\n+                    tcx.layout_of(ty::ParamEnv::empty().and(ty))\n+                        .unwrap()\n+                        .size\n+                });\n+                p!(write(\"{}{}\", sign_extend(bits, size) as i128, i))\n+            },\n+            (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Char)\n+                => p!(write(\"{}\", ::std::char::from_u32(bits as u32).unwrap())),\n+            (_, ty::FnDef(did, _)) => p!(write(\"{}\", ty::tls::with(|tcx| tcx.def_path_str(*did)))),\n+            (ConstValue::Slice(_, 0), ty::Ref(_, &ty::TyS { sty: ty::Str, .. }, _)) =>\n+                p!(write(\"\\\"\\\"\")),\n+            (\n+                ConstValue::Slice(Scalar::Ptr(ptr), len),\n+                ty::Ref(_, &ty::TyS { sty: ty::Str, .. }, _),\n+            ) => {\n+                ty::tls::with(|tcx| {\n+                    let alloc = tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id);\n+                    assert_eq!(len as usize as u64, len);\n+                    let slice =\n+                        &alloc.bytes[(ptr.offset.bytes() as usize)..][..(len as usize)];\n+                    let s = ::std::str::from_utf8(slice).expect(\"non utf8 str from miri\");\n+                    Ok(p!(write(\"{:?}\", s)))\n+                })?;\n+            },\n+            _ => p!(write(\"{:?} : \", self.val), print(self.ty)),\n         }\n     }\n "}, {"sha": "35d0359dbcfd255406490a2a3a12a7610c3ea2ba", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "patch": "@@ -295,6 +295,9 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n+    u32,\n+    crate::ty::BoundVar,\n+    crate::ty::DebruijnIndex,\n     crate::ty::layout::VariantIdx,\n     u64,\n     String,\n@@ -311,6 +314,8 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::Local,\n     crate::mir::Promoted,\n+    crate::mir::interpret::Scalar,\n+    crate::mir::interpret::Pointer,\n     crate::traits::Reveal,\n     crate::ty::adjustment::AutoBorrowMutability,\n     crate::ty::AdtKind,\n@@ -788,6 +793,34 @@ BraceStructLiftImpl! {\n     }\n }\n \n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ty::Const<'a> {\n+        type Lifted = ty::Const<'tcx>;\n+        val, ty\n+    }\n+}\n+\n+EnumLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for interpret::ConstValue<'a> {\n+        type Lifted = interpret::ConstValue<'tcx>;\n+        (interpret::ConstValue::Unevaluated)(a, b),\n+        (interpret::ConstValue::Param)(a),\n+        (interpret::ConstValue::Infer)(a),\n+        (interpret::ConstValue::Scalar)(a),\n+        (interpret::ConstValue::Slice)(a, b),\n+        (interpret::ConstValue::ByRef)(a, b),\n+    }\n+}\n+\n+EnumLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for ty::InferConst<'a> {\n+        type Lifted = ty::InferConst<'tcx>;\n+        (ty::InferConst::Var)(a),\n+        (ty::InferConst::Fresh)(a),\n+        (ty::InferConst::Canonical)(a, b),\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for ConstVid<'a> {\n     type Lifted = ConstVid<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, _: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {"}, {"sha": "a3e43d648192611281050a710ade01bdc82c4e10", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "patch": "@@ -10,7 +10,7 @@ use crate::const_eval::{const_field, const_variant_index};\n use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::constant::*;\n \n-use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n+use rustc::mir::{Field, BorrowKind, Mutability};\n use rustc::mir::{UserTypeProjection};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, sign_extend};\n use rustc::ty::{self, Region, TyCtxt, AdtDef, Ty, UserType, DefIdTree};\n@@ -291,15 +291,15 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 write!(f, \"{}\", subpattern)\n             }\n             PatternKind::Constant { value } => {\n-                fmt_const_val(f, value)\n+                write!(f, \"{}\", &value)\n             }\n             PatternKind::Range(PatternRange { lo, hi, ty: _, end }) => {\n-                fmt_const_val(f, lo)?;\n+                write!(f, \"{}\", &lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n                     RangeEnd::Excluded => write!(f, \"..\")?,\n                 }\n-                fmt_const_val(f, hi)\n+                write!(f, \"{}\", &hi)\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {"}, {"sha": "f344c529c59e432b252d7d67a6b1326fffd627cd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8d4f4cdadafe7c7deca5bc3a2725a380cfe9d01b", "patch": "@@ -4136,8 +4136,7 @@ fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n             }\n         },\n         _ => {\n-            let mut s = String::new();\n-            ::rustc::mir::fmt_const_val(&mut s, n).expect(\"fmt_const_val failed\");\n+            let mut s = n.to_string();\n             // array lengths are obviously usize\n             if s.ends_with(\"usize\") {\n                 let n = s.len() - \"usize\".len();"}]}