{"sha": "d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxNDFmZGMzYmZjZTVhYjY3NWEwYzc0YjJmZDZjZjg5YWM0ZWYzZjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T15:41:31Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-20T16:10:00Z"}, "message": "Revert \"Stabilize the TryFrom and TryInto traits\"\n\nThis reverts commit e53a2a72743810e05f58c61c9d8a4c89b712ad2e.", "tree": {"sha": "125d6981205fb48744f95640e23a1d8dd14748b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125d6981205fb48744f95640e23a1d8dd14748b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "html_url": "https://github.com/rust-lang/rust/commit/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaefa947ac507ff77049d27f927ddffe1b73cb18", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaefa947ac507ff77049d27f927ddffe1b73cb18", "html_url": "https://github.com/rust-lang/rust/commit/aaefa947ac507ff77049d27f927ddffe1b73cb18"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "3d24f8902bd83827be8aee45f393f9cf9f9e33a6", "filename": "src/libcore/array.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -59,7 +59,7 @@ unsafe impl<T, A: Unsize<[T]>> FixedSizeArray<T> for A {\n }\n \n /// The error type returned when a conversion from a slice to an array fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromSliceError(());\n \n@@ -148,7 +148,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n             impl<'a, T> TryFrom<&'a [T]> for &'a [T; $N] {\n                 type Error = TryFromSliceError;\n \n@@ -162,7 +162,7 @@ macro_rules! array_impls {\n                 }\n             }\n \n-            #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+            #[unstable(feature = \"try_from\", issue = \"33417\")]\n             impl<'a, T> TryFrom<&'a mut [T]> for &'a mut [T; $N] {\n                 type Error = TryFromSliceError;\n "}, {"sha": "803a924eb3a469f49b20f21ccbe55bd81176dd3c", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -204,7 +204,7 @@ impl FromStr for char {\n }\n \n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl TryFrom<u32> for char {\n     type Error = CharTryFromError;\n \n@@ -219,11 +219,11 @@ impl TryFrom<u32> for char {\n }\n \n /// The error type returned when a conversion from u32 to char fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct CharTryFromError(());\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl fmt::Display for CharTryFromError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         \"converted integer out of range for `char`\".fmt(f)"}, {"sha": "210eceebc51010c74879667d4018a47fc7486d18", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -40,7 +40,7 @@ pub use self::convert::{from_u32, from_digit};\n pub use self::convert::from_u32_unchecked;\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use self::convert::ParseCharError;\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub use self::convert::CharTryFromError;\n #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};"}, {"sha": "7324df95bc5d5691306ba78924148e593abb4ed4", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -322,26 +322,22 @@ pub trait From<T>: Sized {\n ///\n /// [`TryFrom`]: trait.TryFrom.html\n /// [`Into`]: trait.Into.html\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_into(self) -> Result<T, Self::Error>;\n }\n \n /// Attempt to construct `Self` via a conversion.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     type Error;\n \n     /// Performs the conversion.\n-    #[stable(feature = \"try_from\", since = \"1.26.0\")]\n     fn try_from(value: T) -> Result<Self, Self::Error>;\n }\n \n@@ -409,7 +405,7 @@ impl<T> From<T> for T {\n \n \n // TryFrom implies TryInto\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryInto<U> for T where U: TryFrom<T>\n {\n     type Error = U::Error;\n@@ -421,7 +417,7 @@ impl<T, U> TryInto<U> for T where U: TryFrom<T>\n \n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl<T, U> TryFrom<U> for T where T: From<U> {\n     type Error = !;\n "}, {"sha": "801e2328a4bfb87697c38c2de78e5236593e86f1", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -4192,7 +4192,7 @@ macro_rules! from_str_radix_int_impl {\n from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n #[derive(Debug, Copy, Clone)]\n pub struct TryFromIntError(());\n \n@@ -4207,14 +4207,14 @@ impl TryFromIntError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl fmt::Display for TryFromIntError {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         self.__description().fmt(fmt)\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         never\n@@ -4224,7 +4224,7 @@ impl From<!> for TryFromIntError {\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4243,7 +4243,7 @@ macro_rules! try_from_lower_bounded {\n // unsigned to signed (only positive bound)\n macro_rules! try_from_upper_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n \n@@ -4262,7 +4262,7 @@ macro_rules! try_from_upper_bounded {\n // all other cases\n macro_rules! try_from_both_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n+        #[unstable(feature = \"try_from\", issue = \"33417\")]\n         impl TryFrom<$source> for $target {\n             type Error = TryFromIntError;\n "}, {"sha": "3b080689cb3667a01792ac340c271a2981062cef", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -36,6 +36,7 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(trusted_len)]\n+#![feature(try_from)]\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![cfg_attr(stage0, feature(atomic_nand))]"}, {"sha": "08438805a703e759f5823ab6b4a1a7b830dc616b", "filename": "src/librustc_apfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibrustc_apfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibrustc_apfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Flib.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -45,6 +45,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![forbid(unsafe_code)]\n \n+#![feature(try_from)]\n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n #[allow(unused_extern_crates)]\n extern crate rustc_cratesio_shim;"}, {"sha": "749b8ccc13da642c1efca75057f2baa136494e17", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -284,14 +284,14 @@ impl Error for num::ParseIntError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for num::TryFromIntError {\n     fn description(&self) -> &str {\n         self.__description()\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for array::TryFromSliceError {\n     fn description(&self) -> &str {\n         self.__description()\n@@ -365,7 +365,7 @@ impl Error for cell::BorrowMutError {\n     }\n }\n \n-#[stable(feature = \"try_from\", since = \"1.26.0\")]\n+#[unstable(feature = \"try_from\", issue = \"33417\")]\n impl Error for char::CharTryFromError {\n     fn description(&self) -> &str {\n         \"converted integer out of range for `char`\""}, {"sha": "e53e009678c1030e0d4dba2ffb4a8419615b7477", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -307,6 +307,7 @@\n #![feature(test, rustc_private)]\n #![feature(thread_local)]\n #![feature(toowned_clone_into)]\n+#![feature(try_from)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(untagged_unions)]"}, {"sha": "ed9033ad53d565f0314f1d714004c60226a7da02", "filename": "src/test/ui/e0119/conflict-with-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.rs?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(try_from)]\n+\n use std::marker::PhantomData;\n use std::convert::{TryFrom, AsRef};\n "}, {"sha": "e8b2c84c0df0bbd11f7db7a7da0e8365168ce2ff", "filename": "src/test/ui/e0119/conflict-with-std.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fconflict-with-std.stderr?ref=d141fdc3bfce5ab675a0c74b2fd6cf89ac4ef3f8", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `std::convert::AsRef<Q>` for type `std::boxed::Box<Q>`:\n-  --> $DIR/conflict-with-std.rs:15:1\n+  --> $DIR/conflict-with-std.rs:17:1\n    |\n LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL | impl AsRef<Q> for Box<Q> { //~ ERROR conflicting implementations\n              where T: ?Sized;\n \n error[E0119]: conflicting implementations of trait `std::convert::From<S>` for type `S`:\n-  --> $DIR/conflict-with-std.rs:22:1\n+  --> $DIR/conflict-with-std.rs:24:1\n    |\n LL | impl From<S> for S { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL | impl From<S> for S { //~ ERROR conflicting implementations\n            - impl<T> std::convert::From<T> for T;\n \n error[E0119]: conflicting implementations of trait `std::convert::TryFrom<X>` for type `X`:\n-  --> $DIR/conflict-with-std.rs:29:1\n+  --> $DIR/conflict-with-std.rs:31:1\n    |\n LL | impl TryFrom<X> for X { //~ ERROR conflicting implementations\n    | ^^^^^^^^^^^^^^^^^^^^^"}]}