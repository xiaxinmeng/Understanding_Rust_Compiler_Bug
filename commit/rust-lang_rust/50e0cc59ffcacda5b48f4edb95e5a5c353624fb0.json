{"sha": "50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZTBjYzU5ZmZjYWNkYTViNDhmNGVkYjk1ZTVhNWMzNTM2MjRmYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T06:47:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-25T06:47:30Z"}, "message": "Auto merge of #86151 - scottmcm:simple-hash-of, r=joshtriplett\n\nAdd `BuildHasher::hash_one` as unstable\n\nInspired by https://github.com/rust-lang/rust/pull/86140/files#diff-246941135168fbc44fce120385ee9c3156e08a1c3e2697985b56dcb8d728eedeR2416, where I wanted to write a quick test for a `Hash` implementation and it took more of a dance than I'd hoped.\n\nIt looks like this would be handy in hashtable implementations, too -- a quick look at hashbrown found two places where it needs to do the same dance:\nhttps://github.com/rust-lang/hashbrown/blob/6302512a8a514fe5bd442464ebcd78139c82e1e2/src/map.rs#L247-L270\n\nI wanted to get a \"seems plausible\" from a libs member before making a tracking issue, so random-sampling the intersection of highfive and governance gave me...\nr? `@joshtriplett`\n\n(As always, bikeshed away!  And let me know if I missed something obvious again that I should have used instead.)", "tree": {"sha": "e439eaa42d3072e2b5882ca004fb696aa8742583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e439eaa42d3072e2b5882ca004fb696aa8742583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "html_url": "https://github.com/rust-lang/rust/commit/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a908121620edbef02d124e8d7d94943c50d4a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a908121620edbef02d124e8d7d94943c50d4a1", "html_url": "https://github.com/rust-lang/rust/commit/50a908121620edbef02d124e8d7d94943c50d4a1"}, {"sha": "579d19bc6ac91548e8b256656ca1d7fbceb53197", "url": "https://api.github.com/repos/rust-lang/rust/commits/579d19bc6ac91548e8b256656ca1d7fbceb53197", "html_url": "https://github.com/rust-lang/rust/commit/579d19bc6ac91548e8b256656ca1d7fbceb53197"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "4ac28b8308e73126a111d8a21da78c0a9f349e50", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "patch": "@@ -2411,18 +2411,13 @@ impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {\n /// as required by the `core::borrow::Borrow` implementation.\n ///\n /// ```\n-/// use std::hash::{BuildHasher, Hash, Hasher};\n-///\n-/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n-///     let mut h = b.build_hasher();\n-///     x.hash(&mut h);\n-///     h.finish()\n-/// }\n+/// #![feature(build_hasher_simple_hash_one)]\n+/// use std::hash::BuildHasher;\n ///\n /// let b = std::collections::hash_map::RandomState::new();\n /// let v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\n /// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n-/// assert_eq!(hash_of(v, &b), hash_of(s, &b));\n+/// assert_eq!(b.hash_one(v), b.hash_one(s));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, A: Allocator> Hash for Vec<T, A> {"}, {"sha": "030b42a53d05d757f0b35953ce9f268fed89e8a7", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "patch": "@@ -143,18 +143,13 @@ impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n /// as required by the `Borrow` implementation.\n ///\n /// ```\n-/// use std::hash::{BuildHasher, Hash, Hasher};\n-///\n-/// fn hash_of(x: impl Hash, b: &impl BuildHasher) -> u64 {\n-///     let mut h = b.build_hasher();\n-///     x.hash(&mut h);\n-///     h.finish()\n-/// }\n+/// #![feature(build_hasher_simple_hash_one)]\n+/// use std::hash::BuildHasher;\n ///\n /// let b = std::collections::hash_map::RandomState::new();\n /// let a: [u8; 3] = [0xa8, 0x3c, 0x09];\n /// let s: &[u8] = &[0xa8, 0x3c, 0x09];\n-/// assert_eq!(hash_of(a, &b), hash_of(s, &b));\n+/// assert_eq!(b.hash_one(a), b.hash_one(s));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Hash, const N: usize> Hash for [T; N] {"}, {"sha": "9dbefe0822e36ce6142a15ff6510eb6894c4f226", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50e0cc59ffcacda5b48f4edb95e5a5c353624fb0/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=50e0cc59ffcacda5b48f4edb95e5a5c353624fb0", "patch": "@@ -481,6 +481,50 @@ pub trait BuildHasher {\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n     fn build_hasher(&self) -> Self::Hasher;\n+\n+    /// Calculates the hash of a single value.\n+    ///\n+    /// This is intended as a convenience for code which *consumes* hashes, such\n+    /// as the implementation of a hash table or in unit tests that check\n+    /// whether a custom [`Hash`] implementation behaves as expected.\n+    ///\n+    /// This must not be used in any code which *creates* hashes, such as in an\n+    /// implementation of [`Hash`].  The way to create a combined hash of\n+    /// multiple values is to call [`Hash::hash`] multiple times using the same\n+    /// [`Hasher`], not to call this method repeatedly and combine the results.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(build_hasher_simple_hash_one)]\n+    ///\n+    /// use std::cmp::{max, min};\n+    /// use std::hash::{BuildHasher, Hash, Hasher};\n+    /// struct OrderAmbivalentPair<T: Ord>(T, T);\n+    /// impl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n+    ///     fn hash<H: Hasher>(&self, hasher: &mut H) {\n+    ///         min(&self.0, &self.1).hash(hasher);\n+    ///         max(&self.0, &self.1).hash(hasher);\n+    ///     }\n+    /// }\n+    ///\n+    /// // Then later, in a `#[test]` for the type...\n+    /// let bh = std::collections::hash_map::RandomState::new();\n+    /// assert_eq!(\n+    ///     bh.hash_one(OrderAmbivalentPair(1, 2)),\n+    ///     bh.hash_one(OrderAmbivalentPair(2, 1))\n+    /// );\n+    /// assert_eq!(\n+    ///     bh.hash_one(OrderAmbivalentPair(10, 2)),\n+    ///     bh.hash_one(&OrderAmbivalentPair(2, 10))\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"build_hasher_simple_hash_one\", issue = \"86161\")]\n+    fn hash_one<T: Hash>(&self, x: T) -> u64 {\n+        let mut hasher = self.build_hasher();\n+        x.hash(&mut hasher);\n+        hasher.finish()\n+    }\n }\n \n /// Used to create a default [`BuildHasher`] instance for types that implement"}]}