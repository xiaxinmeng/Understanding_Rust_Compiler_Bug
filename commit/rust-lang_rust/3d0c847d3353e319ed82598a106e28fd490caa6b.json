{"sha": "3d0c847d3353e319ed82598a106e28fd490caa6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMGM4NDdkMzM1M2UzMTllZDgyNTk4YTEwNmUyOGZkNDkwY2FhNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T15:48:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-27T15:48:56Z"}, "message": "Auto merge of #74941 - dylanmckay:replace-broken-avr-unknown-unknown-target, r=oli-obk\n\n[AVR] Replace broken 'avr-unknown-unknown' target with 'avr-unknown-gnu-atmega328' target\n\nThe `avr-unknown-unknown` target has never worked correctly, always trying to invoke\nthe host linker and failing. It aimed to be a mirror of AVR-GCC's\ndefault handling of the `avr-unknown-unknown' triple (assume bare\nminimum chip features, silently skip linking runtime libraries, etc).\nThis behaviour is broken-by-default as it will cause a miscompiled executable\nwhen flashed.\n\nThis patch improves the AVR builtin target specifications to instead\nexpose only a 'avr-unknown-gnu-atmega328' target. This target system is\n`gnu`, as it uses the AVR-GCC frontend along with avr-binutils. The\ntarget triple ABI is 'atmega328'.\n\nIn the future, it should be possible to replace the dependency on\nAVR-GCC and binutils by using the in-progress AVR LLD and compiler-rt support.\nPerhaps at that point it would make sense to add an\n'avr-unknown-unknown-atmega328' target as a better default when\nimplemented.\n\nThere is no current intention to add in-tree AVR target specifications for other\nAVR microcontrollers - this one can serve as a reference implementation\nfor other devices via `rustc --print target-spec-json\navr-unknown-gnu-atmega328p`.\n\nThere should be no users of the existing 'avr-unknown-unknown' Rust\ntarget as a custom target specification JSON has always been\nrecommended, and the avr-unknown-unknown target could never pass the\nlinking step anyway.", "tree": {"sha": "35e6357444c3d1fb46c52eeaa80a67b79966c3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35e6357444c3d1fb46c52eeaa80a67b79966c3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d0c847d3353e319ed82598a106e28fd490caa6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0c847d3353e319ed82598a106e28fd490caa6b", "html_url": "https://github.com/rust-lang/rust/commit/3d0c847d3353e319ed82598a106e28fd490caa6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d0c847d3353e319ed82598a106e28fd490caa6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "118860a7e76daaac3564c7655d46ac65a14fc612", "url": "https://api.github.com/repos/rust-lang/rust/commits/118860a7e76daaac3564c7655d46ac65a14fc612", "html_url": "https://github.com/rust-lang/rust/commit/118860a7e76daaac3564c7655d46ac65a14fc612"}, {"sha": "c9ead8c895593452677a229fd19909c83283b33f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9ead8c895593452677a229fd19909c83283b33f", "html_url": "https://github.com/rust-lang/rust/commit/c9ead8c895593452677a229fd19909c83283b33f"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "95675630837c257621fff8b2e41c4eceb9dabffa", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -65,7 +65,7 @@ cfg_if::cfg_if! {\n         // - os=none (\"bare metal\" targets)\n         // - os=uefi\n         // - nvptx64-nvidia-cuda\n-        // - avr-unknown-unknown\n+        // - arch=avr\n         #[path = \"dummy.rs\"]\n         mod real_imp;\n     }"}, {"sha": "a787e6d43fc99d74b8bd099b734920872a8a7d9d", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -83,7 +83,7 @@ fn main() {\n         // - os=none (\"bare metal\" targets)\n         // - mipsel-sony-psp\n         // - nvptx64-nvidia-cuda\n-        // - avr-unknown-unknown\n+        // - arch=avr\n         // - tvos (aarch64-apple-tvos, x86_64-apple-tvos)\n         // - uefi (x86_64-unknown-uefi, i686-unknown-uefi)\n         // - JSON targets"}, {"sha": "546eb74b2cb5d0c90333e3d1c812f8ff72b7c852", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -165,7 +165,7 @@ target | std | host | notes\n `armv7-wrs-vxworks-eabihf` | ? |  |\n `armv7a-none-eabihf` | * | | ARM Cortex-A, hardfloat\n `armv7s-apple-ios` | \u2713[^apple] |  |\n-`avr-unknown-unknown` | ? |  | AVR\n+`avr-unknown-gnu-atmega328` | \u2717 |  | AVR. Requires `-Z build-std=core`\n `hexagon-unknown-linux-musl` | ? |  |\n `i386-apple-ios` | \u2713[^apple] |  | 32-bit x86 iOS\n `i686-apple-darwin` | \u2713 | \u2713 | 32-bit OSX (10.7+, Lion+)"}, {"sha": "ff559c2bfd684704edf616e683c36381b968a02b", "filename": "src/librustc_target/spec/avr_gnu_base.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Favr_gnu_base.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -0,0 +1,51 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+/// A base target for AVR devices using the GNU toolchain.\n+///\n+/// Requires GNU avr-gcc and avr-binutils on the host system.\n+pub fn target(target_cpu: String) -> TargetResult {\n+    Ok(Target {\n+        arch: \"avr\".to_string(),\n+        data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n+        llvm_target: \"avr-unknown-unknown\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"16\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        target_os: \"unknown\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        target_c_int_width: 16.to_string(),\n+        options: TargetOptions {\n+            cpu: target_cpu.clone(),\n+            exe_suffix: \".elf\".to_string(),\n+\n+            linker: Some(\"avr-gcc\".to_owned()),\n+            dynamic_linking: false,\n+            executables: true,\n+            linker_is_gnu: true,\n+            has_rpath: false,\n+            position_independent_executables: false,\n+            eh_frame_header: false,\n+            pre_link_args: vec![(\n+                LinkerFlavor::Gcc,\n+                vec![\n+                    format!(\"-mmcu={}\", target_cpu),\n+                    // We want to be able to strip as much executable code as possible\n+                    // from the linker command line, and this flag indicates to the\n+                    // linker that it can avoid linking in dynamic libraries that don't\n+                    // actually satisfy any symbols up to that point (as with many other\n+                    // resolutions the linker does). This option only applies to all\n+                    // following libraries so we're sure to pass it as one of the first\n+                    // arguments.\n+                    \"-Wl,--as-needed\".to_string(),\n+                ],\n+            )]\n+            .into_iter()\n+            .collect(),\n+            late_link_args: vec![(LinkerFlavor::Gcc, vec![\"-lgcc\".to_owned()])]\n+                .into_iter()\n+                .collect(),\n+            ..TargetOptions::default()\n+        },\n+    })\n+}"}, {"sha": "5d22598b57b87fa05c18359237c9a5c650af1e6b", "filename": "src/librustc_target/spec/avr_unknown_gnu_atmega328.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Favr_unknown_gnu_atmega328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Favr_unknown_gnu_atmega328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Favr_unknown_gnu_atmega328.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -0,0 +1,5 @@\n+use crate::spec::TargetResult;\n+\n+pub fn target() -> TargetResult {\n+    super::avr_gnu_base::target(\"atmega328\".to_owned())\n+}"}, {"sha": "f90a8def0aa2f8699086d546426f3e3d0d697f2a", "filename": "src/librustc_target/spec/avr_unknown_unknown.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/118860a7e76daaac3564c7655d46ac65a14fc612/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118860a7e76daaac3564c7655d46ac65a14fc612/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Favr_unknown_unknown.rs?ref=118860a7e76daaac3564c7655d46ac65a14fc612", "patch": "@@ -1,17 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    Ok(Target {\n-        llvm_target: \"avr-unknown-unknown\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"16\".to_string(),\n-        data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".to_string(),\n-        arch: \"avr\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        target_os: \"unknown\".to_string(),\n-        target_env: \"\".to_string(),\n-        target_vendor: \"unknown\".to_string(),\n-        target_c_int_width: 16.to_string(),\n-        options: super::freestanding_base::opts(),\n-    })\n-}"}, {"sha": "c338856228dc66b607304672531fe61243f4b3ce", "filename": "src/librustc_target/spec/freestanding_base.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/118860a7e76daaac3564c7655d46ac65a14fc612/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/118860a7e76daaac3564c7655d46ac65a14fc612/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Ffreestanding_base.rs?ref=118860a7e76daaac3564c7655d46ac65a14fc612", "patch": "@@ -1,31 +0,0 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n-use std::default::Default;\n-\n-pub fn opts() -> TargetOptions {\n-    let mut args = LinkArgs::new();\n-\n-    args.insert(\n-        LinkerFlavor::Gcc,\n-        vec![\n-            // We want to be able to strip as much executable code as possible\n-            // from the linker command line, and this flag indicates to the\n-            // linker that it can avoid linking in dynamic libraries that don't\n-            // actually satisfy any symbols up to that point (as with many other\n-            // resolutions the linker does). This option only applies to all\n-            // following libraries so we're sure to pass it as one of the first\n-            // arguments.\n-            \"-Wl,--as-needed\".to_string(),\n-        ],\n-    );\n-\n-    TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        linker_is_gnu: true,\n-        has_rpath: false,\n-        pre_link_args: args,\n-        position_independent_executables: false,\n-        eh_frame_header: false,\n-        ..Default::default()\n-    }\n-}"}, {"sha": "d6e8b304380ca51a383dc927839164bedb20239f", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -51,10 +51,10 @@ mod android_base;\n mod apple_base;\n mod apple_sdk_base;\n mod arm_base;\n+mod avr_gnu_base;\n mod cloudabi_base;\n mod dragonfly_base;\n mod freebsd_base;\n-mod freestanding_base;\n mod fuchsia_base;\n mod haiku_base;\n mod hermit_base;\n@@ -581,7 +581,7 @@ supported_targets! {\n     (\"aarch64-fuchsia\", aarch64_fuchsia),\n     (\"x86_64-fuchsia\", x86_64_fuchsia),\n \n-    (\"avr-unknown-unknown\", avr_unknown_unknown),\n+    (\"avr-unknown-gnu-atmega328\", avr_unknown_gnu_atmega328),\n \n     (\"x86_64-unknown-l4re-uclibc\", x86_64_unknown_l4re_uclibc),\n "}, {"sha": "0f15729158df16399717e0b85864b7ab09bd0426", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d0c847d3353e319ed82598a106e28fd490caa6b/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=3d0c847d3353e319ed82598a106e28fd490caa6b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -O --target=avr-unknown-unknown --crate-type=rlib\n+// compile-flags: -O --target=avr-unknown-gnu-atmega328 --crate-type=rlib\n // needs-llvm-components: avr\n \n // This test validates that function pointers can be stored in global variables"}]}