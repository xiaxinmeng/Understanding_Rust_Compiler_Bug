{"sha": "7326da7ce3750087fe13effd595c73caf92f5cdf", "node_id": "C_kwDOAAsO6NoAKDczMjZkYTdjZTM3NTAwODdmZTEzZWZmZDU5NWM3M2NhZjkyZjVjZGY", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:40:02Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-06-21T18:46:09Z"}, "message": "Manual adjustments", "tree": {"sha": "3e7ae58d50d5b01a64410b3671f4c41faefbaaa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e7ae58d50d5b01a64410b3671f4c41faefbaaa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7326da7ce3750087fe13effd595c73caf92f5cdf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmKyEfEACgkQ+boUO5X/\nbYJQzRAAi1p6EbbdRRiYllK6VI+ziBmtOQfveIvJWhlf2kDK69oxFpZUsJfxdUaG\nyaxRG4fg0sciEUdun1LHWaQhc07nn7/nnp0tRbqG2Q0vx+9mtGI23upFItyHqC0E\nvYMm6f3nn9yDVpZvCLGlnBrmIJV/2lQZPrw+XNelfll5/RbtWs7/wRrLC6zto/kt\npIstmyTaAMSO7x6HWjY6MiIPNhvnShCfhZ+/qB78XT1IOyRHMRZnvfBHZl6HoKyA\nLUqH4DgRb2xOOd2fkd5/deFSFCUh71XR8E4y+Y0TEcaQxE1mjIhaffAjhtLGMUJS\nSeeHZNXtaCH8OwXZaGF5A3eC75iQZJBf4Ug3EhVM7dk1FZVdfl8c5OK6R7J9g8pp\nTaGp5R+lHJn31cLswcmqJ/rnJT6KloO6b3U2fgr0lwV+jDEnn2MYOEIecZVuzUn6\ny+RqJUwQy7ZA4rcpR1sfxjfpvIXFz17BHlSXePseyjPDF9m6HTSL9H+JexXlGS8f\nfUMmmbveFyGDnTpjNI0ePgUU8DFFS+t9bkUHQvARkh4RgtZbqRA0eKElbyMtMmRj\nCf96eC3aFjvKY6QSbUuYxltpYKjj0ONUFHf4wc2Q+lvFxDfyzhx9OHmulfpfGBEY\na5zIWQTprO8VJlJLyyJLw8m6FYhTFR7lPdwbeQgQCFlynso/RRw=\n=3FhC\n-----END PGP SIGNATURE-----", "payload": "tree 3e7ae58d50d5b01a64410b3671f4c41faefbaaa6\nparent 6827ac2f37908f328305bae91d2e5387975da64e\nauthor David Tolnay <dtolnay@gmail.com> 1655836802 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1655837169 -0700\n\nManual adjustments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7326da7ce3750087fe13effd595c73caf92f5cdf", "html_url": "https://github.com/rust-lang/rust/commit/7326da7ce3750087fe13effd595c73caf92f5cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7326da7ce3750087fe13effd595c73caf92f5cdf/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6827ac2f37908f328305bae91d2e5387975da64e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6827ac2f37908f328305bae91d2e5387975da64e", "html_url": "https://github.com/rust-lang/rust/commit/6827ac2f37908f328305bae91d2e5387975da64e"}], "stats": {"total": 204, "additions": 102, "deletions": 102}, "files": [{"sha": "c1fec28ae3b7b3f5b8d8d426862abfb5cc910a85", "filename": "tests/fail/box-cell-alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,8 +7,8 @@ use std::cell::Cell;\n fn helper(val: Box<Cell<u8>>, ptr: *const Cell<u8>) -> u8 {\n     val.set(10);\n     unsafe {\n-        (*ptr).set(20);\n-    } //~ ERROR does not exist in the borrow stack\n+        (*ptr).set(20); //~ ERROR does not exist in the borrow stack\n+    }\n     val.get()\n }\n "}, {"sha": "3115da436be843e6e50ad8586f458bebbe8327d5", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -8,6 +8,6 @@ fn main() {\n     let zst_val = [1u8; 0];\n     let ptr = (&0u8 as *const u8).wrapping_sub(0x800) as *mut [u8; 0];\n     unsafe {\n-        *ptr = zst_val;\n-    } //~ ERROR out-of-bounds\n+        *ptr = zst_val; //~ ERROR out-of-bounds\n+    }\n }"}, {"sha": "7ab41232498ea9b1aed39df63a69f3284549b3de", "filename": "tests/fail/intrinsics/copy_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_null.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n     unsafe {\n-        copy_nonoverlapping(std::ptr::null(), ptr, 0);\n-    } //~ ERROR: memory access failed: null pointer is not a valid pointer\n+        copy_nonoverlapping(std::ptr::null(), ptr, 0); //~ ERROR: memory access failed: null pointer is not a valid pointer\n+    }\n }"}, {"sha": "162f06bfacd9b9d6bc319063fb6b82fc5fbb2df6", "filename": "tests/fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n     unsafe {\n-        copy_nonoverlapping(&data[5], ptr, 0);\n-    } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n+        copy_nonoverlapping(&data[5], ptr, 0); //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n+    }\n }"}, {"sha": "d8af789e99a20bb70a60bbd98cb1e987b8cd5bda", "filename": "tests/fail/intrinsics/exact_div1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // divison by 0\n     unsafe {\n-        std::intrinsics::exact_div(2, 0);\n-    } //~ ERROR divisor of zero\n+        std::intrinsics::exact_div(2, 0); //~ ERROR divisor of zero\n+    }\n }"}, {"sha": "80f9131bab799916ff65c269c6b152a8fb07750d", "filename": "tests/fail/intrinsics/exact_div2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // divison with a remainder\n     unsafe {\n-        std::intrinsics::exact_div(2u16, 3);\n-    } //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n+        std::intrinsics::exact_div(2u16, 3); //~ ERROR 2_u16 cannot be divided by 3_u16 without remainder\n+    }\n }"}, {"sha": "976fca29f9bac59c1e65c50cb2dcdbc17e9910df", "filename": "tests/fail/intrinsics/exact_div3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // signed divison with a remainder\n     unsafe {\n-        std::intrinsics::exact_div(-19i8, 2);\n-    } //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n+        std::intrinsics::exact_div(-19i8, 2); //~ ERROR -19_i8 cannot be divided by 2_i8 without remainder\n+    }\n }"}, {"sha": "5f4ca587e6d77ca3d4c26875caa7c22ea2fa8384", "filename": "tests/fail/intrinsics/exact_div4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // divison of MIN by -1\n     unsafe {\n-        std::intrinsics::exact_div(i64::MIN, -1);\n-    } //~ ERROR overflow in signed remainder (dividing MIN by -1)\n+        std::intrinsics::exact_div(i64::MIN, -1); //~ ERROR overflow in signed remainder (dividing MIN by -1)\n+    }\n }"}, {"sha": "a57845426d582ccf4a028233bf225fa1e152f1ce", "filename": "tests/fail/intrinsics/float_to_int_32_inf1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, i32>(f32::INFINITY);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f32, i32>(f32::INFINITY); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "d383fc5b50ac11f45b115d5b8cc5318e4230e029", "filename": "tests/fail/intrinsics/float_to_int_32_infneg1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "a39a5066b6f8b86eb48dbc35ddfcc663f9ce53d0", "filename": "tests/fail/intrinsics/float_to_int_32_nan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, u32>(f32::NAN);\n-    } //~ ERROR: cannot be represented in target type `u32`\n+        float_to_int_unchecked::<f32, u32>(f32::NAN); //~ ERROR: cannot be represented in target type `u32`\n+    }\n }"}, {"sha": "71436eb3ba846b2023a40b0351c609c3100a0177", "filename": "tests/fail/intrinsics/float_to_int_32_nanneg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, u32>(-f32::NAN);\n-    } //~ ERROR: cannot be represented in target type `u32`\n+        float_to_int_unchecked::<f32, u32>(-f32::NAN); //~ ERROR: cannot be represented in target type `u32`\n+    }\n }"}, {"sha": "98ba964e47c2a78905cac8a587655357f217b746", "filename": "tests/fail/intrinsics/float_to_int_32_neg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, u32>(-1.000000001f32);\n-    } //~ ERROR: cannot be represented in target type `u32`\n+        float_to_int_unchecked::<f32, u32>(-1.000000001f32); //~ ERROR: cannot be represented in target type `u32`\n+    }\n }"}, {"sha": "424b8fd965e9c65223f52158c1e8006a86ae950f", "filename": "tests/fail/intrinsics/float_to_int_32_too_big1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, i32>(2147483648.0f32);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f32, i32>(2147483648.0f32); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "5c50926c4df3e85530b15531312f7ac9632068ce", "filename": "tests/fail/intrinsics/float_to_int_32_too_big2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32);\n-    } //~ ERROR: cannot be represented in target type `u32`\n+        float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32); //~ ERROR: cannot be represented in target type `u32`\n+    }\n }"}, {"sha": "e0abd19d03fc9a4be314d049fd683eaf6073b58c", "filename": "tests/fail/intrinsics/float_to_int_32_too_small1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f32, i32>(-2147483904.0f32);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f32, i32>(-2147483904.0f32); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "f5f842e58ece4adc4f84c14c88b5de19f3c86e20", "filename": "tests/fail/intrinsics/float_to_int_64_inf1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u128>(f64::INFINITY);\n-    } //~ ERROR: cannot be represented in target type `u128`\n+        float_to_int_unchecked::<f64, u128>(f64::INFINITY); //~ ERROR: cannot be represented in target type `u128`\n+    }\n }"}, {"sha": "244c25b31cbfc6b791963a584fdcde690d2ad045", "filename": "tests/fail/intrinsics/float_to_int_64_infneg1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY);\n-    } //~ ERROR: cannot be represented in target type `u128`\n+        float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY); //~ ERROR: cannot be represented in target type `u128`\n+    }\n }"}, {"sha": "f7a663d12a56c3ecbb0cfd1726081997d3f33b7a", "filename": "tests/fail/intrinsics/float_to_int_64_infneg2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY);\n-    } //~ ERROR: cannot be represented in target type `i128`\n+        float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY); //~ ERROR: cannot be represented in target type `i128`\n+    }\n }"}, {"sha": "171cbcc59344ffaef7d57ec8c585ea3077e0d7dc", "filename": "tests/fail/intrinsics/float_to_int_64_nan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u32>(f64::NAN);\n-    } //~ ERROR: cannot be represented in target type `u32`\n+        float_to_int_unchecked::<f64, u32>(f64::NAN); //~ ERROR: cannot be represented in target type `u32`\n+    }\n }"}, {"sha": "40b67e173b97a1dd91b651ec4f6f4c56b3f7ff39", "filename": "tests/fail/intrinsics/float_to_int_64_neg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u128>(-1.0000000000001f64);\n-    } //~ ERROR: cannot be represented in target type `u128`\n+        float_to_int_unchecked::<f64, u128>(-1.0000000000001f64); //~ ERROR: cannot be represented in target type `u128`\n+    }\n }"}, {"sha": "e785123c4ca91b9c5460a01a30b07905552b6ffc", "filename": "tests/fail/intrinsics/float_to_int_64_too_big1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i32>(2147483648.0f64);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f64, i32>(2147483648.0f64); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "4bf31d8ac0271a28757db815608e79440ba90bf0", "filename": "tests/fail/intrinsics/float_to_int_64_too_big2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64);\n-    } //~ ERROR: cannot be represented in target type `i64`\n+        float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64); //~ ERROR: cannot be represented in target type `i64`\n+    }\n }"}, {"sha": "9775a56724bc2540c042d93a0887691f6a1051b6", "filename": "tests/fail/intrinsics/float_to_int_64_too_big3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64);\n-    } //~ ERROR: cannot be represented in target type `u64`\n+        float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64); //~ ERROR: cannot be represented in target type `u64`\n+    }\n }"}, {"sha": "53ff06e1e4678d2747e2403de16d889b5085768e", "filename": "tests/fail/intrinsics/float_to_int_64_too_big4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u128>(u128::MAX as f64);\n-    } //~ ERROR: cannot be represented in target type `u128`\n+        float_to_int_unchecked::<f64, u128>(u128::MAX as f64); //~ ERROR: cannot be represented in target type `u128`\n+    }\n }"}, {"sha": "44356ff1771b11d87bc658b1b52f376c0a263e45", "filename": "tests/fail/intrinsics/float_to_int_64_too_big5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64);\n-    } //~ ERROR: cannot be represented in target type `i128`\n+        float_to_int_unchecked::<f64, i128>(240282366920938463463374607431768211455.0f64); //~ ERROR: cannot be represented in target type `i128`\n+    }\n }"}, {"sha": "66f5be96bfd0eac53113ff4a827823ff6770ea3c", "filename": "tests/fail/intrinsics/float_to_int_64_too_big6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, u128>(f64::MAX);\n-    } //~ ERROR: cannot be represented in target type `u128`\n+        float_to_int_unchecked::<f64, u128>(f64::MAX); //~ ERROR: cannot be represented in target type `u128`\n+    }\n }"}, {"sha": "18b380e8575ee2ab62ca666156e0bfadde052890", "filename": "tests/fail/intrinsics/float_to_int_64_too_big7.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i128>(f64::MIN);\n-    } //~ ERROR: cannot be represented in target type `i128`\n+        float_to_int_unchecked::<f64, i128>(f64::MIN); //~ ERROR: cannot be represented in target type `i128`\n+    }\n }"}, {"sha": "2a23b1dc8a4b857190b595a8ec9feea9a2973efe", "filename": "tests/fail/intrinsics/float_to_int_64_too_small1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i32>(-2147483649.0f64);\n-    } //~ ERROR: cannot be represented in target type `i32`\n+        float_to_int_unchecked::<f64, i32>(-2147483649.0f64); //~ ERROR: cannot be represented in target type `i32`\n+    }\n }"}, {"sha": "7fc3effda5dffacbd0386871336334fdd00022ad", "filename": "tests/fail/intrinsics/float_to_int_64_too_small2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64);\n-    } //~ ERROR: cannot be represented in target type `i64`\n+        float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64); //~ ERROR: cannot be represented in target type `i64`\n+    }\n }"}, {"sha": "2a8f9c366425d54080fed6ce49ab321cf94c9d9a", "filename": "tests/fail/intrinsics/float_to_int_64_too_small3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,6 +7,6 @@ extern \"rust-intrinsic\" {\n \n fn main() {\n     unsafe {\n-        float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64);\n-    } //~ ERROR: cannot be represented in target type `i128`\n+        float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431768211455.0f64); //~ ERROR: cannot be represented in target type `i128`\n+    }\n }"}, {"sha": "5409f66e805eab537fc0649ca0d22806976d044b", "filename": "tests/fail/intrinsics/unchecked_add1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_add(40000u16, 30000);\n-    } //~ ERROR overflow executing `unchecked_add`\n+        std::intrinsics::unchecked_add(40000u16, 30000); //~ ERROR overflow executing `unchecked_add`\n+    }\n }"}, {"sha": "5deef7ee5ccd32780185d9f93cdb9f92b051b49d", "filename": "tests/fail/intrinsics/unchecked_add2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_add(-30000i16, -8000);\n-    } //~ ERROR overflow executing `unchecked_add`\n+        std::intrinsics::unchecked_add(-30000i16, -8000); //~ ERROR overflow executing `unchecked_add`\n+    }\n }"}, {"sha": "c06a5bdce93e6771a3858709fe321c7712daae1f", "filename": "tests/fail/intrinsics/unchecked_div1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_div1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN/-1 cannot be represented\n     unsafe {\n-        std::intrinsics::unchecked_div(i16::MIN, -1);\n-    } //~ ERROR overflow in signed division (dividing MIN by -1)\n+        std::intrinsics::unchecked_div(i16::MIN, -1); //~ ERROR overflow in signed division (dividing MIN by -1)\n+    }\n }"}, {"sha": "140bc9e6c75b25cb2031fb16ec30c165442acc3b", "filename": "tests/fail/intrinsics/unchecked_mul1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_mul(300u16, 250u16);\n-    } //~ ERROR overflow executing `unchecked_mul`\n+        std::intrinsics::unchecked_mul(300u16, 250u16); //~ ERROR overflow executing `unchecked_mul`\n+    }\n }"}, {"sha": "c4d16084b3f03cc025c693ad0ab4699292712aa3", "filename": "tests/fail/intrinsics/unchecked_mul2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_mul(1_000_000_000i32, -4);\n-    } //~ ERROR overflow executing `unchecked_mul`\n+        std::intrinsics::unchecked_mul(1_000_000_000i32, -4); //~ ERROR overflow executing `unchecked_mul`\n+    }\n }"}, {"sha": "cff79f9135f1fc048fa52e6b96af2949da31ffde", "filename": "tests/fail/intrinsics/unchecked_sub1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MIN overflow\n     unsafe {\n-        std::intrinsics::unchecked_sub(14u32, 22);\n-    } //~ ERROR overflow executing `unchecked_sub`\n+        std::intrinsics::unchecked_sub(14u32, 22); //~ ERROR overflow executing `unchecked_sub`\n+    }\n }"}, {"sha": "9b741c2663d89ef1b1bc635e0d77a3f71976374d", "filename": "tests/fail/intrinsics/unchecked_sub2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -2,6 +2,6 @@\n fn main() {\n     // MAX overflow\n     unsafe {\n-        std::intrinsics::unchecked_sub(30000i16, -7000);\n-    } //~ ERROR overflow executing `unchecked_sub`\n+        std::intrinsics::unchecked_sub(30000i16, -7000); //~ ERROR overflow executing `unchecked_sub`\n+    }\n }"}, {"sha": "6afcd7ae7ff1fe5be79e75fad8e6ab483633fd24", "filename": "tests/fail/panic/unwind_panic_abort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -8,6 +8,6 @@ extern \"Rust\" {\n \n fn main() {\n     unsafe {\n-        miri_start_panic(&mut 0);\n-    } //~ ERROR unwinding past a stack frame that does not allow unwinding\n+        miri_start_panic(&mut 0); //~ ERROR unwinding past a stack frame that does not allow unwinding\n+    }\n }"}, {"sha": "3b67accbbd2eb6771923403cd214e98e145687b4", "filename": "tests/fail/stacked_borrows/illegal_write1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -4,8 +4,8 @@ fn main() {\n     {\n         let x: *mut u32 = xref as *const _ as *mut _;\n         unsafe {\n-            *x = 42;\n-        } // invalidates shared ref, activates raw\n+            *x = 42; // invalidates shared ref, activates raw\n+        }\n     }\n     let _x = *xref; //~ ERROR borrow stack\n }"}, {"sha": "a106b4240c3c0d4ca5f07023ab34c2902c970add", "filename": "tests/fail/stacked_borrows/illegal_write2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     drop(&mut *target); // reborrow\n     // Now make sure our ref is still the only one.\n     unsafe {\n-        *target2 = 13;\n-    } //~ ERROR borrow stack\n+        *target2 = 13; //~ ERROR borrow stack\n+    }\n     let _val = *target;\n }"}, {"sha": "5bf651b33aa08619a82af3d8cb8898122f2bf184", "filename": "tests/fail/stacked_borrows/illegal_write3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let r#ref = &target; // freeze\n     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n     unsafe {\n-        *ptr = 42;\n-    } //~ ERROR only grants SharedReadOnly permission\n+        *ptr = 42; //~ ERROR only grants SharedReadOnly permission\n+    }\n     let _val = *r#ref;\n }"}, {"sha": "07d57241205f371efbc48eb31b23dcd38c955e12", "filename": "tests/fail/stacked_borrows/illegal_write6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -8,7 +8,7 @@ fn foo(a: &mut u32, y: *mut u32) -> u32 {\n     *a = 1;\n     let _b = &*a;\n     unsafe {\n-        *y = 2;\n-    } //~ ERROR: not granting access to tag\n+        *y = 2; //~ ERROR: not granting access to tag\n+    }\n     return *a;\n }"}, {"sha": "0a99e4ce47e7ff0d3daa8c4776875f249781a33b", "filename": "tests/fail/stacked_borrows/raw_tracking.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -8,8 +8,8 @@ fn main() {\n     // Without raw pointer tracking, Stacked Borrows cannot distinguish raw1 and raw2, and thus\n     // fails to realize that raw1 should not be used any more.\n     unsafe {\n-        *raw1 = 13;\n-    } //~ ERROR does not exist in the borrow stack\n+        *raw1 = 13; //~ ERROR does not exist in the borrow stack\n+    }\n     unsafe {\n         *raw2 = 13;\n     }"}, {"sha": "a6dd9ef4c2eeffd3c1ebbeebd73837cad8f3a258", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -10,6 +10,6 @@ fn main() {\n \n fn unknown_code(x: &i32) {\n     unsafe {\n-        *(x as *const i32 as *mut i32) = 7;\n-    } //~ ERROR only grants SharedReadOnly permission\n+        *(x as *const i32 as *mut i32) = 7; //~ ERROR only grants SharedReadOnly permission\n+    }\n }"}, {"sha": "e23c893d6aaa3a5dfd9da917ae8256c50f4b71f0", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     // `raw` still carries a tag, so we get another pointer to the same location that does not carry a tag\n     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n     unsafe {\n-        *raw = 13;\n-    } //~ ERROR borrow stack\n+        *raw = 13; //~ ERROR borrow stack\n+    }\n }"}, {"sha": "bfc937bb12b7f92cd6a18dfedc47f0bea4f94d90", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -5,6 +5,6 @@ fn main() {\n     let raw = &mut x as *mut i32 as usize as *mut i32;\n     let _ptr = &mut x;\n     unsafe {\n-        *raw = 13;\n-    } //~ ERROR borrow stack\n+        *raw = 13; //~ ERROR borrow stack\n+    }\n }"}, {"sha": "e96f08fc9a7a9ae5d702a8692c092e7fea27154d", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -13,7 +13,7 @@ fn main() {\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr + 1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n     unsafe {\n-        *u16_ptr = 2;\n-    } //~ERROR memory with alignment 1, but alignment 2 is required\n+        *u16_ptr = 2; //~ERROR memory with alignment 1, but alignment 2 is required\n+    }\n     println!(\"{:?}\", x);\n }"}, {"sha": "4af3b8aef6aaab785a8725c0722e41dd74449b4e", "filename": "tests/fail/validity/transmute_through_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Ftransmute_through_ptr.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -7,8 +7,8 @@ enum Bool {\n fn evil(x: &mut Bool) {\n     let x = x as *mut _ as *mut u32;\n     unsafe {\n-        *x = 44;\n-    } // out-of-bounds enum tag\n+        *x = 44; // out-of-bounds enum tag\n+    }\n }\n \n #[rustfmt::skip] // rustfmt bug: https://github.com/rust-lang/rustfmt/issues/5391"}, {"sha": "2499f79142dbe784f590b53aae9a128ce192b390", "filename": "tests/fail/zst2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let x = &mut *x_box as *mut _ as *mut [u8; 0];\n     drop(x_box);\n     unsafe {\n-        *x = zst_val;\n-    } //~ ERROR dereferenced after this allocation got freed\n+        *x = zst_val; //~ ERROR dereferenced after this allocation got freed\n+    }\n }"}, {"sha": "741374c7ad98857f74352694135cec37ee2e93bd", "filename": "tests/fail/zst3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7326da7ce3750087fe13effd595c73caf92f5cdf/tests%2Ffail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.rs?ref=7326da7ce3750087fe13effd595c73caf92f5cdf", "patch": "@@ -17,6 +17,6 @@ fn main() {\n     // One byte further is OOB.\n     let x = x.wrapping_offset(1);\n     unsafe {\n-        *(x as *mut [u8; 0]) = zst_val;\n-    } //~ ERROR out-of-bounds\n+        *(x as *mut [u8; 0]) = zst_val; //~ ERROR out-of-bounds\n+    }\n }"}]}