{"sha": "82dd54baf3fda351abd56ee4bda9f8464da2df67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZGQ1NGJhZjNmZGEzNTFhYmQ1NmVlNGJkYTlmODQ2NGRhMmRmNjc=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-22T21:31:35Z"}, "committer": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-07-23T14:14:46Z"}, "message": "Modify CloudABI ReentrantMutex to use MaybeUninit\n\nRemove uses of mem::uninitialized, which is now deprecated", "tree": {"sha": "868de9600669cd44ffc32156448697bd3d937596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/868de9600669cd44ffc32156448697bd3d937596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82dd54baf3fda351abd56ee4bda9f8464da2df67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82dd54baf3fda351abd56ee4bda9f8464da2df67", "html_url": "https://github.com/rust-lang/rust/commit/82dd54baf3fda351abd56ee4bda9f8464da2df67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82dd54baf3fda351abd56ee4bda9f8464da2df67/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e0df8a49d8c172261be1d71e33632200629cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e0df8a49d8c172261be1d71e33632200629cce", "html_url": "https://github.com/rust-lang/rust/commit/e1e0df8a49d8c172261be1d71e33632200629cce"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "d1203a3536971efbacf28b97649044996b4cf8c1", "filename": "src/libstd/sys/cloudabi/mutex.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/82dd54baf3fda351abd56ee4bda9f8464da2df67/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82dd54baf3fda351abd56ee4bda9f8464da2df67/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmutex.rs?ref=82dd54baf3fda351abd56ee4bda9f8464da2df67", "patch": "@@ -1,5 +1,6 @@\n use crate::cell::UnsafeCell;\n use crate::mem;\n+use crate::mem::MaybeUninit;\n use crate::sync::atomic::{AtomicU32, Ordering};\n use crate::sys::cloudabi::abi;\n use crate::sys::rwlock::{self, RWLock};\n@@ -47,25 +48,28 @@ impl Mutex {\n }\n \n pub struct ReentrantMutex {\n-    lock: UnsafeCell<AtomicU32>,\n-    recursion: UnsafeCell<u32>,\n+    lock: UnsafeCell<MaybeUninit<AtomicU32>>,\n+    recursion: UnsafeCell<MaybeUninit<u32>>,\n }\n \n impl ReentrantMutex {\n     pub unsafe fn uninitialized() -> ReentrantMutex {\n-        mem::uninitialized()\n+        ReentrantMutex { \n+            lock: UnsafeCell::new(MaybeUninit::uninit()),\n+            recursion: UnsafeCell::new(MaybeUninit::uninit())\n+        }\n     }\n \n     pub unsafe fn init(&mut self) {\n-        self.lock = UnsafeCell::new(AtomicU32::new(abi::LOCK_UNLOCKED.0));\n-        self.recursion = UnsafeCell::new(0);\n+        self.lock = UnsafeCell::new(MaybeUninit::new(AtomicU32::new(abi::LOCK_UNLOCKED.0)));\n+        self.recursion = UnsafeCell::new(MaybeUninit::new(0));\n     }\n \n     pub unsafe fn try_lock(&self) -> bool {\n         // Attempt to acquire the lock.\n         let lock = self.lock.get();\n         let recursion = self.recursion.get();\n-        if let Err(old) = (*lock).compare_exchange(\n+        if let Err(old) = (*(*lock).as_mut_ptr()).compare_exchange(\n             abi::LOCK_UNLOCKED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             Ordering::Acquire,\n@@ -74,14 +78,14 @@ impl ReentrantMutex {\n             // If we fail to acquire the lock, it may be the case\n             // that we've already acquired it and may need to recurse.\n             if old & !abi::LOCK_KERNEL_MANAGED.0 == __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0 {\n-                *recursion += 1;\n+                *(*recursion).as_mut_ptr() += 1;\n                 true\n             } else {\n                 false\n             }\n         } else {\n             // Success.\n-            assert_eq!(*recursion, 0, \"Mutex has invalid recursion count\");\n+            assert_eq!(*(*recursion).as_mut_ptr(), 0, \"Mutex has invalid recursion count\");\n             true\n         }\n     }\n@@ -112,14 +116,14 @@ impl ReentrantMutex {\n         let lock = self.lock.get();\n         let recursion = self.recursion.get();\n         assert_eq!(\n-            (*lock).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n+            (*(*lock).as_mut_ptr()).load(Ordering::Relaxed) & !abi::LOCK_KERNEL_MANAGED.0,\n             __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n             \"This mutex is locked by a different thread\"\n         );\n \n-        if *recursion > 0 {\n-            *recursion -= 1;\n-        } else if !(*lock)\n+        if *(*recursion).as_mut_ptr() > 0 {\n+            *(*recursion).as_mut_ptr() -= 1;\n+        } else if !(*(*lock).as_mut_ptr())\n             .compare_exchange(\n                 __pthread_thread_id.0 | abi::LOCK_WRLOCKED.0,\n                 abi::LOCK_UNLOCKED.0,\n@@ -139,10 +143,10 @@ impl ReentrantMutex {\n         let lock = self.lock.get();\n         let recursion = self.recursion.get();\n         assert_eq!(\n-            (*lock).load(Ordering::Relaxed),\n+            (*(*lock).as_mut_ptr()).load(Ordering::Relaxed),\n             abi::LOCK_UNLOCKED.0,\n             \"Attempted to destroy locked mutex\"\n         );\n-        assert_eq!(*recursion, 0, \"Recursion counter invalid\");\n+        assert_eq!(*(*recursion).as_mut_ptr(), 0, \"Recursion counter invalid\");\n     }\n }"}]}