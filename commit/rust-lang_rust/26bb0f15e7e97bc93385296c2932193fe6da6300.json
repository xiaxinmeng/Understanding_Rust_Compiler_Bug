{"sha": "26bb0f15e7e97bc93385296c2932193fe6da6300", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YmIwZjE1ZTdlOTdiYzkzMzg1Mjk2YzI5MzIxOTNmZTZkYTYzMDA=", "commit": {"author": {"name": "John VanEnk", "email": "jvanenk@fastly.com", "date": "2020-01-11T01:59:18Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:17:03Z"}, "message": "Add similar examples that work to each test.", "tree": {"sha": "0f0cc13e1d43f4579fe70da6c24e3a61228aa6b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f0cc13e1d43f4579fe70da6c24e3a61228aa6b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26bb0f15e7e97bc93385296c2932193fe6da6300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26bb0f15e7e97bc93385296c2932193fe6da6300", "html_url": "https://github.com/rust-lang/rust/commit/26bb0f15e7e97bc93385296c2932193fe6da6300", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26bb0f15e7e97bc93385296c2932193fe6da6300/comments", "author": {"login": "sw17ch", "id": 95705, "node_id": "MDQ6VXNlcjk1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/95705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sw17ch", "html_url": "https://github.com/sw17ch", "followers_url": "https://api.github.com/users/sw17ch/followers", "following_url": "https://api.github.com/users/sw17ch/following{/other_user}", "gists_url": "https://api.github.com/users/sw17ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/sw17ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sw17ch/subscriptions", "organizations_url": "https://api.github.com/users/sw17ch/orgs", "repos_url": "https://api.github.com/users/sw17ch/repos", "events_url": "https://api.github.com/users/sw17ch/events{/privacy}", "received_events_url": "https://api.github.com/users/sw17ch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b52b34f201456d8a0e9da907e3e5619fa24ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b52b34f201456d8a0e9da907e3e5619fa24ac7", "html_url": "https://github.com/rust-lang/rust/commit/f1b52b34f201456d8a0e9da907e3e5619fa24ac7"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "8f75076a30e99755010823e39ecade089ac9b842", "filename": "src/test/run-make-fulldeps/arguments-non-c-like-enum/nonclike.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Fnonclike.rs?ref=26bb0f15e7e97bc93385296c2932193fe6da6300", "patch": "@@ -1,15 +1,31 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"nonclike\"]\n \n-#[repr(C,u8)]\n+#[repr(C, u8)]\n+pub enum TT {\n+    AA(u64, u64),\n+    BB,\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn tt_add(a: TT, b: TT) -> u64 {\n+    match (a, b) {\n+        (TT::AA(a1, b1), TT::AA(a2, b2)) => a1 + a2 + b1 + b2,\n+        (TT::AA(a1, b1), TT::BB) => a1 + b1,\n+        (TT::BB, TT::AA(a1, b1)) => a1 + b1,\n+        _ => 0,\n+    }\n+}\n+\n+#[repr(C, u8)]\n pub enum T {\n     A(u64),\n     B,\n }\n \n #[no_mangle]\n pub extern \"C\" fn t_add(a: T, b: T) -> u64 {\n-    match (a,b) {\n+    match (a, b) {\n         (T::A(a), T::A(b)) => a + b,\n         (T::A(a), T::B) => a,\n         (T::B, T::A(b)) => b,"}, {"sha": "d34babcf3d33de7ae5f08997f8afe5f819e4437e", "filename": "src/test/run-make-fulldeps/arguments-non-c-like-enum/test.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Farguments-non-c-like-enum%2Ftest.c?ref=26bb0f15e7e97bc93385296c2932193fe6da6300", "patch": "@@ -3,6 +3,26 @@\n \n #include <stdio.h>\n \n+/* This is the code generated by cbindgen 0.12.1 for the `enum TT`\n+ * type in nonclike.rs . */\n+enum TT_Tag {\n+  AA,\n+  BB,\n+};\n+typedef uint8_t TT_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+  uint64_t _1;\n+} AA_Body;\n+\n+typedef struct {\n+  TT_Tag tag;\n+  union {\n+    AA_Body aa;\n+  };\n+} TT;\n+\n /* This is the code generated by cbindgen 0.12.1 for the `enum T` type\n  * in nonclike.rs . */\n enum T_Tag {\n@@ -22,18 +42,24 @@ typedef struct {\n   };\n } T;\n \n-/* This symbol is defined by the Rust staticlib built from\n+/* These symbols are defined by the Rust staticlib built from\n  * nonclike.rs. */\n extern uint64_t t_add(T a, T b);\n+extern uint64_t tt_add(TT a, TT b);\n \n int main(int argc, char *argv[]) {\n   (void)argc; (void)argv;\n \n+  /* This example works. */\n+  TT xx = { .tag = AA, .aa = { ._0 = 1, ._1 = 2 } };\n+  TT yy = { .tag = AA, .aa = { ._0 = 10, ._1 = 20 } };\n+  uint64_t rr = tt_add(xx, yy);\n+  assert(33 == rr);\n+\n+  /* This one returns an incorrect result. */\n   T x = { .tag = A, .a = { ._0 = 1 } };\n   T y = { .tag = A, .a = { ._0 = 10 } };\n-\n   uint64_t r = t_add(x, y);\n-\n   assert(11 == r);\n \n   return 0;"}, {"sha": "700d2df1f3811da4706c7ff0e8546615775975da", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum/nonclike.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Fnonclike.rs?ref=26bb0f15e7e97bc93385296c2932193fe6da6300", "patch": "@@ -1,6 +1,17 @@\n #![crate_type = \"lib\"]\n #![crate_name = \"nonclike\"]\n \n+#[repr(C, u8)]\n+pub enum TT {\n+    AA(u64, u64),\n+    BB,\n+}\n+\n+#[no_mangle]\n+pub extern \"C\" fn tt_new(a: u64, b: u64) -> TT {\n+    TT::AA(a, b)\n+}\n+\n #[repr(C,u8)]\n pub enum T {\n     A(u64),"}, {"sha": "3cbd8e6a20cb28c596406d902dcb2a7c2c24a3e6", "filename": "src/test/run-make-fulldeps/return-non-c-like-enum/test.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/26bb0f15e7e97bc93385296c2932193fe6da6300/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Freturn-non-c-like-enum%2Ftest.c?ref=26bb0f15e7e97bc93385296c2932193fe6da6300", "patch": "@@ -1,6 +1,26 @@\n #include <stdint.h>\n #include <assert.h>\n \n+/* This is the code generated by cbindgen 0.12.1 for the `enum TT`\n+ * type in nonclike.rs . */\n+enum TT_Tag {\n+  AA,\n+  BB,\n+};\n+typedef uint8_t TT_Tag;\n+\n+typedef struct {\n+  uint64_t _0;\n+  uint64_t _1;\n+} AA_Body;\n+\n+typedef struct {\n+  TT_Tag tag;\n+  union {\n+    AA_Body aa;\n+  };\n+} TT;\n+\n /* This is the code generated by cbindgen 0.12.1 for the `enum T` type\n  * in nonclike.rs . */\n enum T_Tag {\n@@ -20,13 +40,21 @@ typedef struct {\n   };\n } T;\n \n-/* This symbol is defined by the Rust staticlib built from\n+/* These symbols are defined by the Rust staticlib built from\n  * nonclike.rs. */\n+extern TT tt_new(uint64_t a, uint64_t b);\n extern T t_new(uint64_t v);\n \n int main(int argc, char *argv[]) {\n   (void)argc; (void)argv;\n \n+  /* This example works. */\n+  TT tt = tt_new(10, 20);\n+  assert(AA == tt.tag);\n+  assert(10 == tt.aa._0);\n+  assert(20 == tt.aa._1);\n+\n+  /* This one segfaults. */\n   T t = t_new(10);\n   assert(A == t.tag);\n   assert(10 == t.a._0);"}]}