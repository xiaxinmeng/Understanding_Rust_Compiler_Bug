{"sha": "4400d8fce79ab2a610f05479413397464052e9c0", "node_id": "C_kwDOAAsO6NoAKDQ0MDBkOGZjZTc5YWIyYTYxMGYwNTQ3OTQxMzM5NzQ2NDA1MmU5YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T04:41:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-23T04:41:44Z"}, "message": "Auto merge of #110204 - compiler-errors:new-solver-hir-typeck-hacks, r=lcnr\n\nDeal with unnormalized projections when structurally resolving types with new solver\n\n1. Normalize types in `structurally_resolved_type` when the new solver is enabled\n2. Normalize built-in autoderef targets in `Autoderef` when the new solver is enabled\n3. Normalize-erasing-regions in `resolve_type` in writeback\n\nThis is motivated by the UI test provided, which currently fails with:\n\n```\nerror[E0609]: no field `x` on type `<usize as SliceIndex<[Foo]>>::Output`\n --> <source>:9:11\n  |\n9 |     xs[0].x = 1;\n  |           ^\n```\n\n I'm pretty happy with the approach in (1.) and (2.) and think we'll inevitably need something like this in the long-term, but (3.) seems like a hack to me. It's a *lot* of work to add tons of new calls to every user of these typeck results though (mir build, late lints, etc). Happy to discuss further.\n\nr? `@lcnr`", "tree": {"sha": "54921e091d07237928966e3a80fc537f41f9568c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54921e091d07237928966e3a80fc537f41f9568c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4400d8fce79ab2a610f05479413397464052e9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4400d8fce79ab2a610f05479413397464052e9c0", "html_url": "https://github.com/rust-lang/rust/commit/4400d8fce79ab2a610f05479413397464052e9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4400d8fce79ab2a610f05479413397464052e9c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b4b20836b832e91aa605a2faf5e2a55190202c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8", "html_url": "https://github.com/rust-lang/rust/commit/8b4b20836b832e91aa605a2faf5e2a55190202c8"}, {"sha": "4cfafb275e8d9049c26ab58831d58254a09b9f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfafb275e8d9049c26ab58831d58254a09b9f61", "html_url": "https://github.com/rust-lang/rust/commit/4cfafb275e8d9049c26ab58831d58254a09b9f61"}], "stats": {"total": 236, "additions": 196, "deletions": 40}, "files": [{"sha": "d6d1498d708eda8e4008041a146cdf724811d178", "filename": "compiler/rustc_hir_analysis/src/autoderef.rs", "status": "modified", "additions": 54, "deletions": 22, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fautoderef.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -1,6 +1,5 @@\n use crate::errors::AutoDerefReachedRecursionLimit;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n-use crate::traits::NormalizeExt;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::TypeVisitableExt;\n@@ -9,6 +8,7 @@ use rustc_session::Limit;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n+use rustc_trait_selection::traits::StructurallyNormalizeExt;\n \n #[derive(Copy, Clone, Debug)]\n pub enum AutoderefKind {\n@@ -66,14 +66,27 @@ impl<'a, 'tcx> Iterator for Autoderef<'a, 'tcx> {\n         }\n \n         // Otherwise, deref if type is derefable:\n-        let (kind, new_ty) =\n-            if let Some(mt) = self.state.cur_ty.builtin_deref(self.include_raw_pointers) {\n-                (AutoderefKind::Builtin, mt.ty)\n-            } else if let Some(ty) = self.overloaded_deref_ty(self.state.cur_ty) {\n-                (AutoderefKind::Overloaded, ty)\n+        let (kind, new_ty) = if let Some(ty::TypeAndMut { ty, .. }) =\n+            self.state.cur_ty.builtin_deref(self.include_raw_pointers)\n+        {\n+            debug_assert_eq!(ty, self.infcx.resolve_vars_if_possible(ty));\n+            // NOTE: we may still need to normalize the built-in deref in case\n+            // we have some type like `&<Ty as Trait>::Assoc`, since users of\n+            // autoderef expect this type to have been structurally normalized.\n+            if self.infcx.tcx.trait_solver_next()\n+                && let ty::Alias(ty::Projection, _) = ty.kind()\n+            {\n+                let (normalized_ty, obligations) = self.structurally_normalize(ty)?;\n+                self.state.obligations.extend(obligations);\n+                (AutoderefKind::Builtin, normalized_ty)\n             } else {\n-                return None;\n-            };\n+                (AutoderefKind::Builtin, ty)\n+            }\n+        } else if let Some(ty) = self.overloaded_deref_ty(self.state.cur_ty) {\n+            (AutoderefKind::Overloaded, ty)\n+        } else {\n+            return None;\n+        };\n \n         if new_ty.references_error() {\n             return None;\n@@ -119,14 +132,11 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n \n     fn overloaded_deref_ty(&mut self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         debug!(\"overloaded_deref_ty({:?})\", ty);\n-\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n         let trait_ref = ty::TraitRef::new(tcx, tcx.lang_items().deref_trait()?, [ty]);\n-\n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n-\n         let obligation = traits::Obligation::new(\n             tcx,\n             cause.clone(),\n@@ -138,26 +148,48 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n             return None;\n         }\n \n-        let normalized_ty = self\n+        let (normalized_ty, obligations) =\n+            self.structurally_normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, [ty]))?;\n+        debug!(\"overloaded_deref_ty({:?}) = ({:?}, {:?})\", ty, normalized_ty, obligations);\n+        self.state.obligations.extend(obligations);\n+\n+        Some(self.infcx.resolve_vars_if_possible(normalized_ty))\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    pub fn structurally_normalize(\n+        &self,\n+        ty: Ty<'tcx>,\n+    ) -> Option<(Ty<'tcx>, Vec<traits::PredicateObligation<'tcx>>)> {\n+        let tcx = self.infcx.tcx;\n+        let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n+\n+        let cause = traits::ObligationCause::misc(self.span, self.body_id);\n+        let normalized_ty = match self\n             .infcx\n             .at(&cause, self.param_env)\n-            .normalize(tcx.mk_projection(tcx.lang_items().deref_target()?, trait_ref.substs));\n-        let mut fulfillcx = <dyn TraitEngine<'tcx>>::new_in_snapshot(tcx);\n-        let normalized_ty =\n-            normalized_ty.into_value_registering_obligations(self.infcx, &mut *fulfillcx);\n-        let errors = fulfillcx.select_where_possible(&self.infcx);\n+            .structurally_normalize(ty, &mut *fulfill_cx)\n+        {\n+            Ok(normalized_ty) => normalized_ty,\n+            Err(errors) => {\n+                // This shouldn't happen, except for evaluate/fulfill mismatches,\n+                // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n+                // by design).\n+                debug!(?errors, \"encountered errors while fulfilling\");\n+                return None;\n+            }\n+        };\n+\n+        let errors = fulfill_cx.select_where_possible(&self.infcx);\n         if !errors.is_empty() {\n             // This shouldn't happen, except for evaluate/fulfill mismatches,\n             // but that's not a reason for an ICE (`predicate_may_hold` is conservative\n             // by design).\n-            debug!(\"overloaded_deref_ty: encountered errors {:?} while fulfilling\", errors);\n+            debug!(?errors, \"encountered errors while fulfilling\");\n             return None;\n         }\n-        let obligations = fulfillcx.pending_obligations();\n-        debug!(\"overloaded_deref_ty({:?}) = ({:?}, {:?})\", ty, normalized_ty, obligations);\n-        self.state.obligations.extend(obligations);\n \n-        Some(self.infcx.resolve_vars_if_possible(normalized_ty))\n+        Some((normalized_ty, fulfill_cx.pending_obligations()))\n     }\n \n     /// Returns the final type we ended up with, which may be an inference"}, {"sha": "9721e3b427d2bdf80ab523ffebf0476f65ffeed6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -35,7 +35,9 @@ use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n-use rustc_trait_selection::traits::{self, NormalizeExt, ObligationCauseCode, ObligationCtxt};\n+use rustc_trait_selection::traits::{\n+    self, NormalizeExt, ObligationCauseCode, ObligationCtxt, StructurallyNormalizeExt,\n+};\n \n use std::collections::hash_map::Entry;\n use std::slice;\n@@ -1460,10 +1462,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Resolves `typ` by a single level if `typ` is a type variable.\n+    ///\n+    /// When the new solver is enabled, this will also attempt to normalize\n+    /// the type if it's a projection (note that it will not deeply normalize\n+    /// projections within the type, just the outermost layer of the type).\n+    ///\n     /// If no resolution is possible, then an error is reported.\n     /// Numeric inference variables may be left unresolved.\n     pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let ty = self.resolve_vars_with_obligations(ty);\n+        let mut ty = self.resolve_vars_with_obligations(ty);\n+\n+        if self.tcx.trait_solver_next()\n+            && let ty::Alias(ty::Projection, _) = ty.kind()\n+        {\n+            match self\n+                .at(&self.misc(sp), self.param_env)\n+                .structurally_normalize(ty, &mut **self.fulfillment_cx.borrow_mut())\n+            {\n+                Ok(normalized_ty) => {\n+                    ty = normalized_ty;\n+                },\n+                Err(errors) => {\n+                    let guar = self.err_ctxt().report_fulfillment_errors(&errors);\n+                    return self.tcx.ty_error(guar);\n+                }\n+            }\n+        }\n+\n         if !ty.is_ty_var() {\n             ty\n         } else {"}, {"sha": "2daec205cfc281cc4d4949386011d01d66a1eec1", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -9,7 +9,6 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n-use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, PointerCast};\n@@ -737,8 +736,7 @@ impl Locatable for hir::HirId {\n /// The Resolver. This is the type folding engine that detects\n /// unresolved types and so forth.\n struct Resolver<'cx, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    infcx: &'cx InferCtxt<'tcx>,\n+    fcx: &'cx FnCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n \n@@ -752,18 +750,18 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: None }\n+        Resolver { fcx, span, body, replaced_with_error: None }\n     }\n \n     fn report_error(&self, p: impl Into<ty::GenericArg<'tcx>>) -> ErrorGuaranteed {\n-        match self.tcx.sess.has_errors() {\n+        match self.fcx.tcx.sess.has_errors() {\n             Some(e) => e,\n             None => self\n-                .infcx\n+                .fcx\n                 .err_ctxt()\n                 .emit_inference_failure_err(\n-                    self.tcx.hir().body_owner_def_id(self.body.id()),\n-                    self.span.to_span(self.tcx),\n+                    self.fcx.tcx.hir().body_owner_def_id(self.body.id()),\n+                    self.span.to_span(self.fcx.tcx),\n                     p.into(),\n                     E0282,\n                     false,\n@@ -795,40 +793,46 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n \n impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n     fn interner(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n+        self.fcx.tcx\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        match self.infcx.fully_resolve(t) {\n+        match self.fcx.fully_resolve(t) {\n+            Ok(t) if self.fcx.tcx.trait_solver_next() => {\n+                // We must normalize erasing regions here, since later lints\n+                // expect that types that show up in the typeck are fully\n+                // normalized.\n+                self.fcx.tcx.try_normalize_erasing_regions(self.fcx.param_env, t).unwrap_or(t)\n+            }\n             Ok(t) => {\n                 // Do not anonymize late-bound regions\n                 // (e.g. keep `for<'a>` named `for<'a>`).\n                 // This allows NLL to generate error messages that\n                 // refer to the higher-ranked lifetime names written by the user.\n-                EraseEarlyRegions { tcx: self.tcx }.fold_ty(t)\n+                EraseEarlyRegions { tcx: self.fcx.tcx }.fold_ty(t)\n             }\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 let e = self.report_error(t);\n                 self.replaced_with_error = Some(e);\n-                self.interner().ty_error(e)\n+                self.fcx.tcx.ty_error(e)\n             }\n         }\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         debug_assert!(!r.is_late_bound(), \"Should not be resolving bound region.\");\n-        self.tcx.lifetimes.re_erased\n+        self.fcx.tcx.lifetimes.re_erased\n     }\n \n     fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        match self.infcx.fully_resolve(ct) {\n-            Ok(ct) => self.tcx.erase_regions(ct),\n+        match self.fcx.fully_resolve(ct) {\n+            Ok(ct) => self.fcx.tcx.erase_regions(ct),\n             Err(_) => {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 let e = self.report_error(ct);\n                 self.replaced_with_error = Some(e);\n-                self.interner().const_error(ct.ty(), e)\n+                self.fcx.tcx.const_error(ct.ty(), e)\n             }\n         }\n     }"}, {"sha": "f265230ff772d59004b848010df780dc085471db", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -17,6 +17,7 @@ pub mod query;\n mod select;\n mod specialize;\n mod structural_match;\n+mod structural_normalize;\n mod util;\n mod vtable;\n pub mod wf;\n@@ -62,6 +63,7 @@ pub use self::specialize::{\n pub use self::structural_match::{\n     search_for_adt_const_param_violation, search_for_structural_match_violation,\n };\n+pub use self::structural_normalize::StructurallyNormalizeExt;\n pub use self::util::elaborate;\n pub use self::util::{expand_trait_aliases, TraitAliasExpander};\n pub use self::util::{get_vtable_index_of_object_method, impl_item_is_final, upcast_choices};"}, {"sha": "af8dd0da5792a54e9c34931a204140ec9b784fbb", "filename": "compiler/rustc_trait_selection/src/traits/structural_normalize.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_normalize.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -0,0 +1,55 @@\n+use rustc_infer::infer::at::At;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_infer::traits::{FulfillmentError, TraitEngine};\n+use rustc_middle::ty::{self, Ty};\n+\n+use crate::traits::{query::evaluate_obligation::InferCtxtExt, NormalizeExt, Obligation};\n+\n+pub trait StructurallyNormalizeExt<'tcx> {\n+    fn structurally_normalize(\n+        &self,\n+        ty: Ty<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n+    ) -> Result<Ty<'tcx>, Vec<FulfillmentError<'tcx>>>;\n+}\n+\n+impl<'tcx> StructurallyNormalizeExt<'tcx> for At<'_, 'tcx> {\n+    fn structurally_normalize(\n+        &self,\n+        mut ty: Ty<'tcx>,\n+        fulfill_cx: &mut dyn TraitEngine<'tcx>,\n+    ) -> Result<Ty<'tcx>, Vec<FulfillmentError<'tcx>>> {\n+        assert!(!ty.is_ty_var(), \"should have resolved vars before calling\");\n+\n+        if self.infcx.tcx.trait_solver_next() {\n+            while let ty::Alias(ty::Projection, projection_ty) = *ty.kind() {\n+                let new_infer_ty = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::NormalizeProjectionType,\n+                    span: self.cause.span,\n+                });\n+                let obligation = Obligation::new(\n+                    self.infcx.tcx,\n+                    self.cause.clone(),\n+                    self.param_env,\n+                    ty::Binder::dummy(ty::ProjectionPredicate {\n+                        projection_ty,\n+                        term: new_infer_ty.into(),\n+                    }),\n+                );\n+                if self.infcx.predicate_may_hold(&obligation) {\n+                    fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n+                    let errors = fulfill_cx.select_where_possible(self.infcx);\n+                    if !errors.is_empty() {\n+                        return Err(errors);\n+                    }\n+                    ty = self.infcx.resolve_vars_if_possible(new_infer_ty);\n+                } else {\n+                    break;\n+                }\n+            }\n+            Ok(ty)\n+        } else {\n+            Ok(self.normalize(ty).into_value_registering_obligations(self.infcx, fulfill_cx))\n+        }\n+    }\n+}"}, {"sha": "d70534feb072f26097336dd4a0eccaf5ff2cb7f9", "filename": "tests/ui/traits/new-solver/normalize-rcvr-for-inherent.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fnormalize-rcvr-for-inherent.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+// Verify that we can assemble inherent impl candidates on a possibly\n+// unnormalized self type.\n+\n+trait Foo {\n+    type Assoc;\n+}\n+impl Foo for i32 {\n+    type Assoc = Bar;\n+}\n+\n+struct Bar;\n+impl Bar {\n+    fn method(&self) {}\n+}\n+\n+fn build<T: Foo>(_: T) -> T::Assoc {\n+    todo!()\n+}\n+\n+fn main() {\n+    build(1i32).method();\n+}"}, {"sha": "01899c9ad645f2994c08090a7fad4f19c40068ab", "filename": "tests/ui/traits/new-solver/structural-resolve-field.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4400d8fce79ab2a610f05479413397464052e9c0/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4400d8fce79ab2a610f05479413397464052e9c0/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs?ref=4400d8fce79ab2a610f05479413397464052e9c0", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+#[derive(Default)]\n+struct Foo {\n+    x: i32,\n+}\n+\n+fn main() {\n+    let mut xs = <[Foo; 1]>::default();\n+    xs[0].x = 1;\n+    (&mut xs[0]).x = 2;\n+}"}]}