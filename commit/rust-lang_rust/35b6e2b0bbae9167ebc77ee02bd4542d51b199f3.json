{"sha": "35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YjZlMmIwYmJhZTkxNjdlYmM3N2VlMDJiZDQ1NDJkNTFiMTk5ZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-29T20:04:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-02-05T18:19:55Z"}, "message": "Instrument a bunch of tasks that employ the HIR map in one way or\nanother and were not previously instrumented.", "tree": {"sha": "cdc2fe59c6aa256ed84540f1e84f9a460f521d58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdc2fe59c6aa256ed84540f1e84f9a460f521d58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "html_url": "https://github.com/rust-lang/rust/commit/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8", "html_url": "https://github.com/rust-lang/rust/commit/d09fd1a5295f12158849d66f388cbf3ee1fc2bc8"}], "stats": {"total": 165, "additions": 123, "deletions": 42}, "files": [{"sha": "faf97f5808e36b1b490431dfda73f633976e3e88", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -40,8 +40,21 @@ pub enum DepNode {\n     Hir(DefId),\n \n     // Represents different phases in the compiler.\n+    CrateReader,\n+    CollectLanguageItems,\n+    CheckStaticRecursion,\n+    ResolveLifetimes,\n+    RegionResolveCrate,\n+    CheckLoops,\n+    PluginRegistrar,\n+    StabilityIndex,\n     CollectItem(DefId),\n     Coherence,\n+    EffectCheck,\n+    Liveness,\n+    Resolve,\n+    EntryPoint,\n+    CheckEntryFn,\n     CoherenceCheckImpl(DefId),\n     CoherenceOverlapCheck(DefId),\n     CoherenceOverlapCheckSpecial(DefId),"}, {"sha": "c27d029374affc8ebb07a04ad0824c57537dcaba", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -12,6 +12,7 @@\n //! `unsafe`.\n use self::RootUnsafeContext::*;\n \n+use dep_graph::DepNode;\n use middle::def::Def;\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n@@ -182,6 +183,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n+    let _task = tcx.dep_graph.in_task(DepNode::EffectCheck);\n+\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n         unsafe_context: UnsafeContext::new(SafeContext),"}, {"sha": "67e96816abf96c49db7ed10f38de12a0c8298d02", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n \n+use dep_graph::DepNode;\n use front::map as ast_map;\n use middle::def_id::{CRATE_DEF_INDEX};\n use session::{config, Session};\n@@ -48,6 +49,8 @@ impl<'a, 'tcx> Visitor<'tcx> for EntryContext<'a, 'tcx> {\n }\n \n pub fn find_entry_point(session: &Session, ast_map: &ast_map::Map) {\n+    let _task = ast_map.dep_graph.in_task(DepNode::EntryPoint);\n+\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n     });"}, {"sha": "f77ca10e88f0ed967350a7386ca8a82c0c58fa66", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -21,6 +21,7 @@\n \n pub use self::LangItem::*;\n \n+use dep_graph::DepNode;\n use front::map as hir_map;\n use session::Session;\n use middle::cstore::CrateStore;\n@@ -234,6 +235,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> {\n pub fn collect_language_items(session: &Session,\n                               map: &hir_map::Map)\n                               -> LanguageItems {\n+    let _task = map.dep_graph.in_task(DepNode::CollectLanguageItems);\n     let krate: &hir::Crate = map.krate();\n     let mut collector = LanguageItemCollector::new(session, map);\n     collector.collect(krate);"}, {"sha": "5fa9d45934571105dbb43418fe0ac542e7877c4c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -109,6 +109,7 @@ use self::LoopKind::*;\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n+use dep_graph::DepNode;\n use middle::def::*;\n use middle::pat_util;\n use middle::ty;\n@@ -192,6 +193,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IrMaps<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt) {\n+    let _task = tcx.dep_graph.in_task(DepNode::Liveness);\n     tcx.map.krate().visit_all_items(&mut IrMaps::new(tcx));\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "bf21b607b778d7f57dab82347ca0742dc520db36", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -16,6 +16,7 @@\n //! Most of the documentation on regions can be found in\n //! `middle/infer/region_inference/README.md`\n \n+use dep_graph::DepNode;\n use front::map as ast_map;\n use session::Session;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n@@ -1224,7 +1225,10 @@ impl<'a, 'v> Visitor<'v> for RegionResolutionVisitor<'a> {\n     }\n }\n \n-pub fn resolve_crate(sess: &Session, krate: &hir::Crate) -> RegionMaps {\n+pub fn resolve_crate(sess: &Session, map: &ast_map::Map) -> RegionMaps {\n+    let _task = map.dep_graph.in_task(DepNode::RegionResolveCrate);\n+    let krate = map.krate();\n+\n     let maps = RegionMaps {\n         code_extents: RefCell::new(vec![]),\n         code_extent_interner: RefCell::new(FnvHashMap()),"}, {"sha": "4bdf716e6370904dd4a01a9927e7650addbc848f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -18,6 +18,8 @@\n pub use self::DefRegion::*;\n use self::ScopeChain::*;\n \n+use dep_graph::DepNode;\n+use front::map::Map;\n use session::Session;\n use middle::def::{Def, DefMap};\n use middle::region;\n@@ -94,9 +96,11 @@ type Scope<'a> = &'a ScopeChain<'a>;\n static ROOT_SCOPE: ScopeChain<'static> = RootScope;\n \n pub fn krate(sess: &Session,\n-             krate: &hir::Crate,\n+             hir_map: &Map,\n              def_map: &DefMap)\n              -> Result<NamedRegionMap, usize> {\n+    let _task = hir_map.dep_graph.in_task(DepNode::ResolveLifetimes);\n+    let krate = hir_map.krate();\n     let mut named_region_map = NodeMap();\n     try!(sess.track_errors(|| {\n         krate.visit_all_items(&mut LifetimeContext {"}, {"sha": "7835f333f192e77efb8597f5a7c17d5e38358ca8", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -14,6 +14,7 @@\n pub use self::StabilityLevel::*;\n \n use dep_graph::DepNode;\n+use front::map as hir_map;\n use session::Session;\n use lint;\n use middle::cstore::{CrateStore, LOCAL_CRATE};\n@@ -30,7 +31,7 @@ use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use rustc_front::hir;\n-use rustc_front::hir::{Crate, Item, Generics, StructField, Variant};\n+use rustc_front::hir::{Item, Generics, StructField, Variant};\n use rustc_front::intravisit::{self, Visitor};\n \n use std::mem::replace;\n@@ -278,7 +279,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n \n impl<'tcx> Index<'tcx> {\n     /// Construct the stability index for a crate being compiled.\n-    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, krate: &Crate, access_levels: &AccessLevels) {\n+    pub fn build(&mut self, tcx: &ty::ctxt<'tcx>, access_levels: &AccessLevels) {\n+        let _task = tcx.dep_graph.in_task(DepNode::StabilityIndex);\n+        let krate = tcx.map.krate();\n         let mut annotator = Annotator {\n             tcx: tcx,\n             index: self,\n@@ -291,7 +294,10 @@ impl<'tcx> Index<'tcx> {\n                            |v| intravisit::walk_crate(v, krate));\n     }\n \n-    pub fn new(krate: &Crate) -> Index<'tcx> {\n+    pub fn new(hir_map: &hir_map::Map) -> Index<'tcx> {\n+        let _task = hir_map.dep_graph.in_task(DepNode::StabilityIndex);\n+        let krate = hir_map.krate();\n+\n         let mut is_staged_api = false;\n         for attr in &krate.attrs {\n             if attr.name() == \"stable\" || attr.name() == \"unstable\" {"}, {"sha": "e506639932324ab0dc334b832bcacb8fadf58cc0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::dep_graph::DepGraph;\n use rustc::front;\n use rustc::front::map as hir_map;\n use rustc_mir as mir;\n@@ -115,9 +116,11 @@ pub fn compile_input(sess: &Session,\n         let expanded_crate = assign_node_ids(sess, expanded_crate);\n         // Lower ast -> hir.\n         let lcx = LoweringContext::new(sess, Some(&expanded_crate));\n+        let dep_graph = DepGraph::new(sess.opts.build_dep_graph);\n         let mut hir_forest = time(sess.time_passes(),\n                                   \"lowering ast -> hir\",\n-                                  || hir_map::Forest::new(lower_crate(&lcx, &expanded_crate)));\n+                                  || hir_map::Forest::new(lower_crate(&lcx, &expanded_crate),\n+                                                          dep_graph));\n \n         // Discard MTWT tables that aren't required past lowering to HIR.\n         if !sess.opts.debugging_opts.keep_mtwt_tables &&\n@@ -130,17 +133,20 @@ pub fn compile_input(sess: &Session,\n \n         write_out_deps(sess, &outputs, &id);\n \n-        controller_entry_point!(after_write_deps,\n-                                sess,\n-                                CompileState::state_after_write_deps(input,\n-                                                                     sess,\n-                                                                     outdir,\n-                                                                     &hir_map,\n-                                                                     &expanded_crate,\n-                                                                     &hir_map.krate(),\n-                                                                     &id[..],\n-                                                                     &lcx),\n-                                Ok(()));\n+        {\n+            let _ignore = hir_map.dep_graph.in_ignore();\n+            controller_entry_point!(after_write_deps,\n+                                    sess,\n+                                    CompileState::state_after_write_deps(input,\n+                                                                         sess,\n+                                                                         outdir,\n+                                                                         &hir_map,\n+                                                                         &expanded_crate,\n+                                                                         &hir_map.krate(),\n+                                                                         &id[..],\n+                                                                         &lcx),\n+                                    Ok(()));\n+        }\n \n         time(sess.time_passes(), \"attribute checking\", || {\n             front::check_attr::check_crate(sess, &expanded_crate);\n@@ -166,6 +172,9 @@ pub fn compile_input(sess: &Session,\n                                               control.make_glob_map,\n                                               |tcx, mir_map, analysis, result| {\n             {\n+                // Eventually, we will want to track plugins.\n+                let _ignore = tcx.dep_graph.in_ignore();\n+\n                 let state = CompileState::state_after_analysis(input,\n                                                                &tcx.sess,\n                                                                outdir,\n@@ -735,11 +744,10 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     }\n \n     let time_passes = sess.time_passes();\n-    let krate = hir_map.krate();\n \n     time(time_passes,\n          \"external crate/lib resolution\",\n-         || LocalCrateReader::new(sess, cstore, &hir_map).read_crates(krate));\n+         || LocalCrateReader::new(sess, cstore, &hir_map).read_crates());\n \n     let lang_items = try!(time(time_passes, \"language item collection\", || {\n         sess.track_errors(|| {\n@@ -769,28 +777,30 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let named_region_map = try!(time(time_passes,\n                                      \"lifetime resolution\",\n                                      || middle::resolve_lifetime::krate(sess,\n-                                                                        krate,\n+                                                                        &hir_map,\n                                                                         &def_map.borrow())));\n \n     time(time_passes,\n          \"looking for entry point\",\n          || middle::entry::find_entry_point(sess, &hir_map));\n \n     sess.plugin_registrar_fn.set(time(time_passes, \"looking for plugin registrar\", || {\n-        plugin::build::find_plugin_registrar(sess.diagnostic(), krate)\n+        plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n     }));\n \n     let region_map = time(time_passes,\n                           \"region resolution\",\n-                          || middle::region::resolve_crate(sess, krate));\n+                          || middle::region::resolve_crate(sess, &hir_map));\n \n     time(time_passes,\n          \"loop checking\",\n-         || loops::check_crate(sess, krate));\n+         || loops::check_crate(sess, &hir_map));\n \n     try!(time(time_passes,\n               \"static item recursion checking\",\n-              || static_recursion::check_crate(sess, krate, &def_map.borrow(), &hir_map)));\n+              || static_recursion::check_crate(sess, &def_map.borrow(), &hir_map)));\n+\n+    let index = stability::Index::new(&hir_map);\n \n     ty::ctxt::create_and_enter(sess,\n                                arenas,\n@@ -800,7 +810,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                freevars,\n                                region_map,\n                                lang_items,\n-                               stability::Index::new(krate),\n+                               index,\n                                |tcx| {\n         // passes are timed inside typeck\n         try_with_f!(typeck::check_crate(tcx, trait_map), (tcx, None, analysis));\n@@ -818,7 +828,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n         // Do not move this check past lint\n         time(time_passes, \"stability index\", || {\n-            tcx.stability.borrow_mut().build(tcx, krate, &analysis.access_levels)\n+            tcx.stability.borrow_mut().build(tcx, &analysis.access_levels)\n         });\n \n         time(time_passes,"}, {"sha": "58043f385fedf3ee716fa39bd2997179832b52cb", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -19,6 +19,7 @@ use rustc_trans::back::link;\n \n use {driver, abort_on_err};\n \n+use rustc::dep_graph::DepGraph;\n use rustc::middle::ty;\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n@@ -183,15 +184,15 @@ impl PpSourceMode {\n                     sess: sess,\n                     ast_map: Some(ast_map.clone()),\n                 };\n-                f(&annotation, payload, &ast_map.forest.krate)\n+                f(&annotation, payload, ast_map.forest.krate())\n             }\n \n             PpmIdentified => {\n                 let annotation = IdentifiedAnnotation {\n                     sess: sess,\n                     ast_map: Some(ast_map.clone()),\n                 };\n-                f(&annotation, payload, &ast_map.forest.krate)\n+                f(&annotation, payload, ast_map.forest.krate())\n             }\n             PpmTyped => {\n                 abort_on_err(driver::phase_3_run_analysis_passes(sess,\n@@ -207,7 +208,7 @@ impl PpSourceMode {\n                     let _ignore = tcx.dep_graph.in_ignore();\n                     f(&annotation,\n                       payload,\n-                      &ast_map.forest.krate)\n+                      ast_map.forest.krate())\n                 }), sess)\n             }\n             _ => panic!(\"Should use call_with_pp_support\"),\n@@ -706,8 +707,10 @@ pub fn pretty_print_input(sess: Session,\n     let mut hir_forest;\n     let lcx = LoweringContext::new(&sess, Some(&krate));\n     let arenas = ty::CtxtArenas::new();\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n     let ast_map = if compute_ast_map {\n-        hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n+        hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph.clone());\n         let map = driver::make_map(&sess, &mut hir_forest);\n         Some(map)\n     } else {"}, {"sha": "3736e045bd19a57420b8f454959024ad4816c24a", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -11,6 +11,7 @@\n //! # Standalone Tests for the Inference Module\n \n use driver;\n+use rustc::dep_graph::DepGraph;\n use rustc_lint;\n use rustc_resolve as resolve;\n use rustc_typeck::middle::lang_items;\n@@ -118,17 +119,19 @@ fn test_env<F>(source_string: &str,\n \n     let krate = driver::assign_node_ids(&sess, krate);\n     let lcx = LoweringContext::new(&sess, Some(&krate));\n-    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n+    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph.clone());\n     let arenas = ty::CtxtArenas::new();\n     let ast_map = driver::make_map(&sess, &mut hir_forest);\n-    let krate = ast_map.krate();\n \n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &ast_map);\n     let resolve::CrateMap { def_map, freevars, .. } =\n         resolve::resolve_crate(&sess, &ast_map, resolve::MakeGlobMap::No);\n-    let named_region_map = resolve_lifetime::krate(&sess, krate, &def_map.borrow());\n-    let region_map = region::resolve_crate(&sess, krate);\n+    let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &def_map.borrow());\n+    let region_map = region::resolve_crate(&sess, &ast_map);\n+    let index = stability::Index::new(&ast_map);\n     ty::ctxt::create_and_enter(&sess,\n                                &arenas,\n                                def_map,\n@@ -137,7 +140,7 @@ fn test_env<F>(source_string: &str,\n                                freevars,\n                                region_map,\n                                lang_items,\n-                               stability::Index::new(krate),\n+                               index,\n                                |tcx| {\n                                    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None);\n                                    body(Env { infcx: &infcx });"}, {"sha": "7b094a5900a05e158dff0327361a13075c458f5c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -18,6 +18,7 @@ use decoder;\n use loader::{self, CratePaths};\n \n use rustc::back::svh::Svh;\n+use rustc::dep_graph::DepNode;\n use rustc::session::{config, Session};\n use rustc::session::search_paths::PathKind;\n use rustc::middle::cstore::{CrateStore, validate_crate_name};\n@@ -723,7 +724,10 @@ impl<'a, 'b> LocalCrateReader<'a, 'b> {\n     // Traverses an AST, reading all the information about use'd crates and\n     // extern libraries necessary for later resolving, typechecking, linking,\n     // etc.\n-    pub fn read_crates(&mut self, krate: &hir::Crate) {\n+    pub fn read_crates(&mut self) {\n+        let _task = self.ast_map.dep_graph.in_task(DepNode::CrateReader);\n+        let krate = self.ast_map.krate();\n+\n         self.process_crate(krate);\n         krate.visit_all_items(self);\n         self.creader.inject_allocator_crate();"}, {"sha": "bce18d3fe6eedfa72f3c14752c64d5d8b7beb57f", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -11,9 +11,11 @@ use self::Context::*;\n \n use rustc::session::Session;\n \n-use syntax::codemap::Span;\n+use rustc::dep_graph::DepNode;\n+use rustc::front::map::Map;\n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n+use syntax::codemap::Span;\n \n #[derive(Clone, Copy, PartialEq)]\n enum Context {\n@@ -26,7 +28,9 @@ struct CheckLoopVisitor<'a> {\n     cx: Context\n }\n \n-pub fn check_crate(sess: &Session, krate: &hir::Crate) {\n+pub fn check_crate(sess: &Session, map: &Map) {\n+    let _task = map.dep_graph.in_task(DepNode::CheckLoops);\n+    let krate = map.krate();\n     krate.visit_all_items(&mut CheckLoopVisitor { sess: sess, cx: Normal });\n }\n "}, {"sha": "329ce21edbef40deaa2ed58ecb569641054c7e09", "filename": "src/librustc_passes/static_recursion.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_passes%2Fstatic_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_passes%2Fstatic_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstatic_recursion.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -11,6 +11,7 @@\n // This compiler pass detects constants that refer to themselves\n // recursively.\n \n+use rustc::dep_graph::DepNode;\n use rustc::front::map as ast_map;\n use rustc::session::{Session, CompileResult};\n use rustc::middle::def::{Def, DefMap};\n@@ -90,17 +91,19 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n }\n \n pub fn check_crate<'ast>(sess: &Session,\n-                         krate: &'ast hir::Crate,\n                          def_map: &DefMap,\n-                         ast_map: &ast_map::Map<'ast>) -> CompileResult {\n+                         ast_map: &ast_map::Map<'ast>)\n+                         -> CompileResult {\n+    let _task = ast_map.dep_graph.in_task(DepNode::CheckStaticRecursion);\n+\n     let mut visitor = CheckCrateVisitor {\n         sess: sess,\n         def_map: def_map,\n         ast_map: ast_map,\n         discriminant_map: RefCell::new(NodeMap()),\n     };\n     sess.track_errors(|| {\n-        krate.visit_all_items(&mut visitor);\n+        ast_map.krate().visit_all_items(&mut visitor);\n     })\n }\n "}, {"sha": "fe83b609334497f1ff09e99382da95f897f21f7f", "filename": "src/librustc_plugin/build.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_plugin%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_plugin%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fbuild.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -14,6 +14,8 @@ use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n use syntax::errors;\n+use rustc::dep_graph::DepNode;\n+use rustc::front::map::Map;\n use rustc_front::intravisit::Visitor;\n use rustc_front::hir;\n \n@@ -34,8 +36,11 @@ impl<'v> Visitor<'v> for RegistrarFinder {\n \n /// Find the function marked with `#[plugin_registrar]`, if any.\n pub fn find_plugin_registrar(diagnostic: &errors::Handler,\n-                             krate: &hir::Crate)\n+                             hir_map: &Map)\n                              -> Option<ast::NodeId> {\n+    let _task = hir_map.dep_graph.in_task(DepNode::PluginRegistrar);\n+    let krate = hir_map.krate();\n+\n     let mut finder = RegistrarFinder { registrars: Vec::new() };\n     krate.visit_all_items(&mut finder);\n "}, {"sha": "054aa1d5f555ba641cbbd703e5cf380c4c86ba5c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -47,6 +47,7 @@ use self::BareIdentifierPatternResolution::*;\n use self::ParentLink::*;\n use self::FallbackChecks::*;\n \n+use rustc::dep_graph::DepNode;\n use rustc::front::map as hir_map;\n use rustc::session::Session;\n use rustc::lint;\n@@ -3596,6 +3597,15 @@ pub fn resolve_crate<'a, 'tcx>(session: &'a Session,\n                                ast_map: &'a hir_map::Map<'tcx>,\n                                make_glob_map: MakeGlobMap)\n                                -> CrateMap {\n+    // Currently, we ignore the name resolution data structures for\n+    // the purposes of dependency tracking. Instead we will run name\n+    // resolution and include its output in the hash of each item,\n+    // much like we do for macro expansion. In other words, the hash\n+    // reflects not just its contents but the results of name\n+    // resolution on those contents. Hopefully we'll push this back at\n+    // some point.\n+    let _task = ast_map.dep_graph.in_task(DepNode::Resolve);\n+\n     let krate = ast_map.krate();\n     let arenas = Resolver::arenas();\n     let mut resolver = create_resolver(session, ast_map, krate, make_glob_map, &arenas, None);"}, {"sha": "083eeff9f90c125cfc995ffca869b64f7ec413cc", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35b6e2b0bbae9167ebc77ee02bd4542d51b199f3/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=35b6e2b0bbae9167ebc77ee02bd4542d51b199f3", "patch": "@@ -100,6 +100,7 @@ pub use rustc::middle;\n pub use rustc::session;\n pub use rustc::util;\n \n+use dep_graph::DepNode;\n use front::map as hir_map;\n use middle::def::Def;\n use middle::infer::{self, TypeOrigin};\n@@ -312,6 +313,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n \n fn check_for_entry_fn(ccx: &CrateCtxt) {\n     let tcx = ccx.tcx;\n+    let _task = tcx.dep_graph.in_task(DepNode::CheckEntryFn);\n     match *tcx.sess.entry_fn.borrow() {\n         Some((id, sp)) => match tcx.sess.entry_type.get() {\n             Some(config::EntryMain) => check_main_fn_ty(ccx, id, sp),"}]}