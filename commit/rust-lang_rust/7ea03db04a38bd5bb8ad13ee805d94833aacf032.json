{"sha": "7ea03db04a38bd5bb8ad13ee805d94833aacf032", "node_id": "C_kwDOAAsO6NoAKDdlYTAzZGIwNGEzOGJkNWJiOGFkMTNlZTgwNWQ5NDgzM2FhY2YwMzI", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-01-06T14:50:46Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-01-06T14:59:33Z"}, "message": "Add diagnostic items for macros", "tree": {"sha": "a3ee65214a393efaa5070dc186444ac51a83a23b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ee65214a393efaa5070dc186444ac51a83a23b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea03db04a38bd5bb8ad13ee805d94833aacf032", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea03db04a38bd5bb8ad13ee805d94833aacf032", "html_url": "https://github.com/rust-lang/rust/commit/7ea03db04a38bd5bb8ad13ee805d94833aacf032", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea03db04a38bd5bb8ad13ee805d94833aacf032/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ce0e6a00593493a12e0e3662119786c761f375", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce0e6a00593493a12e0e3662119786c761f375", "html_url": "https://github.com/rust-lang/rust/commit/f1ce0e6a00593493a12e0e3662119786c761f375"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "afad98b20c5d5883a89982aa3f74afb75544c447", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ea03db04a38bd5bb8ad13ee805d94833aacf032/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea03db04a38bd5bb8ad13ee805d94833aacf032/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7ea03db04a38bd5bb8ad13ee805d94833aacf032", "patch": "@@ -334,8 +334,10 @@ symbols! {\n         asm_sym,\n         asm_unwind,\n         assert,\n+        assert_eq_macro,\n         assert_inhabited,\n         assert_macro,\n+        assert_ne_macro,\n         assert_receiver_is_total_eq,\n         assert_uninit_valid,\n         assert_zero_valid,\n@@ -405,6 +407,7 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n+        cfg_macro,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -432,15 +435,18 @@ symbols! {\n         coerce_unsized,\n         cold,\n         column,\n+        column_macro,\n         compare_and_swap,\n         compare_exchange,\n         compare_exchange_weak,\n         compile_error,\n+        compile_error_macro,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n         concat_bytes,\n         concat_idents,\n+        concat_macro,\n         conservative_impl_trait,\n         console,\n         const_allocate,\n@@ -520,10 +526,13 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         d,\n+        dbg_macro,\n         dead_code,\n         dealloc,\n         debug,\n+        debug_assert_eq_macro,\n         debug_assert_macro,\n+        debug_assert_ne_macro,\n         debug_assertions,\n         debug_struct,\n         debug_trait_builder,\n@@ -593,6 +602,9 @@ symbols! {\n         enclosing_scope,\n         encode,\n         env,\n+        env_macro,\n+        eprint_macro,\n+        eprintln_macro,\n         eq,\n         ermsb_target_feature,\n         exact_div,\n@@ -640,6 +652,7 @@ symbols! {\n         field,\n         field_init_shorthand,\n         file,\n+        file_macro,\n         fill,\n         finish,\n         flags,\n@@ -662,6 +675,7 @@ symbols! {\n         format,\n         format_args,\n         format_args_capture,\n+        format_args_macro,\n         format_args_nl,\n         format_macro,\n         freeze,\n@@ -728,7 +742,10 @@ symbols! {\n         in_band_lifetimes,\n         include,\n         include_bytes,\n+        include_bytes_macro,\n+        include_macro,\n         include_str,\n+        include_str_macro,\n         inclusive_range_syntax,\n         index,\n         index_mut,\n@@ -776,6 +793,7 @@ symbols! {\n         lifetime,\n         likely,\n         line,\n+        line_macro,\n         link,\n         link_args,\n         link_cfg,\n@@ -819,6 +837,7 @@ symbols! {\n         masked,\n         match_beginning_vert,\n         match_default_bindings,\n+        matches_macro,\n         maxnumf32,\n         maxnumf64,\n         may_dangle,\n@@ -855,6 +874,7 @@ symbols! {\n         modifiers,\n         module,\n         module_path,\n+        module_path_macro,\n         more_qualified_paths,\n         more_struct_aliases,\n         movbe_target_feature,\n@@ -938,6 +958,7 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         option_env,\n+        option_env_macro,\n         options,\n         or,\n         or_patterns,\n@@ -1001,6 +1022,8 @@ symbols! {\n         prelude_import,\n         preserves_flags,\n         primitive,\n+        print_macro,\n+        println_macro,\n         proc_dash_macro: \"proc-macro\",\n         proc_macro,\n         proc_macro_attribute,\n@@ -1288,6 +1311,7 @@ symbols! {\n         str,\n         str_alloc,\n         stringify,\n+        stringify_macro,\n         struct_field_attributes,\n         struct_inherit,\n         struct_variant,\n@@ -1331,6 +1355,8 @@ symbols! {\n         then_with,\n         thread,\n         thread_local,\n+        thread_local_macro,\n+        todo_macro,\n         tool_attributes,\n         tool_lints,\n         trace_macros,\n@@ -1381,6 +1407,7 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n+        unimplemented_macro,\n         unit,\n         universal_impl_trait,\n         unix,\n@@ -1389,6 +1416,7 @@ symbols! {\n         unpin,\n         unreachable,\n         unreachable_code,\n+        unreachable_macro,\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,\n         unsafe_cell,\n@@ -1419,6 +1447,7 @@ symbols! {\n         var,\n         variant_count,\n         vec,\n+        vec_macro,\n         version,\n         vis,\n         visible_private_types,\n@@ -1443,7 +1472,9 @@ symbols! {\n         wrapping_sub,\n         wreg,\n         write_bytes,\n+        write_macro,\n         write_str,\n+        writeln_macro,\n         x87_reg,\n         xer,\n         xmm_reg,"}, {"sha": "d3e9e65c3fe57b493001b6c77c9afc99287ff126", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=7ea03db04a38bd5bb8ad13ee805d94833aacf032", "patch": "@@ -37,6 +37,7 @@\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"vec_macro\"]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]\n macro_rules! vec {\n     () => ("}, {"sha": "d5cda360bba3ae962e9c721e2ac1c11bf329078d", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=7ea03db04a38bd5bb8ad13ee805d94833aacf032", "patch": "@@ -31,6 +31,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_eq_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_eq {\n     ($left:expr, $right:expr $(,)?) => ({\n@@ -80,6 +81,7 @@ macro_rules! assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_ne_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_ne {\n     ($left:expr, $right:expr $(,)?) => ({\n@@ -236,6 +238,7 @@ macro_rules! debug_assert {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_eq_macro\")]\n macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n@@ -261,6 +264,7 @@ macro_rules! debug_assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_ne_macro\")]\n macro_rules! debug_assert_ne {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n@@ -320,6 +324,7 @@ pub macro debug_assert_matches($($arg:tt)*) {\n /// ```\n #[macro_export]\n #[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\n macro_rules! matches {\n     ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $expression {\n@@ -475,6 +480,7 @@ macro_rules! r#try {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\n macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n }\n@@ -525,6 +531,7 @@ macro_rules! write {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n     ($dst:expr $(,)?) => (\n@@ -589,6 +596,7 @@ macro_rules! writeln {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! unreachable {\n     () => ({\n@@ -675,6 +683,7 @@ macro_rules! unreachable {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unimplemented_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! unimplemented {\n     () => ($crate::panicking::panic(\"not implemented\"));\n@@ -737,6 +746,7 @@ macro_rules! unimplemented {\n /// ```\n #[macro_export]\n #[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"todo_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! todo {\n     () => ($crate::panicking::panic(\"not yet implemented\"));\n@@ -786,6 +796,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"compile_error_macro\")]\n     macro_rules! compile_error {\n         ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -835,6 +846,7 @@ pub(crate) mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"format_args_macro\")]\n     #[allow_internal_unsafe]\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n@@ -905,6 +917,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"env_macro\")]\n     macro_rules! env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n@@ -930,6 +943,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"option_env_macro\")]\n     macro_rules! option_env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1015,6 +1029,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"concat_macro\")]\n     macro_rules! concat {\n         ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1040,6 +1055,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"line_macro\")]\n     macro_rules! line {\n         () => {\n             /* compiler built-in */\n@@ -1079,6 +1095,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"column_macro\")]\n     macro_rules! column {\n         () => {\n             /* compiler built-in */\n@@ -1104,6 +1121,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"file_macro\")]\n     macro_rules! file {\n         () => {\n             /* compiler built-in */\n@@ -1128,6 +1146,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"stringify_macro\")]\n     macro_rules! stringify {\n         ($($t:tt)*) => {\n             /* compiler built-in */\n@@ -1169,6 +1188,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_str_macro\")]\n     macro_rules! include_str {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1208,6 +1228,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_bytes_macro\")]\n     macro_rules! include_bytes {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1232,6 +1253,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"module_path_macro\")]\n     macro_rules! module_path {\n         () => {\n             /* compiler built-in */\n@@ -1265,6 +1287,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"cfg_macro\")]\n     macro_rules! cfg {\n         ($($cfg:tt)*) => {\n             /* compiler built-in */\n@@ -1315,6 +1338,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_macro\")]\n     macro_rules! include {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }"}, {"sha": "23cbfaeef485ab0711b0f85b12d2bb4fc317f204", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=7ea03db04a38bd5bb8ad13ee805d94833aacf032", "patch": "@@ -57,6 +57,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"print_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n@@ -90,6 +91,7 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"println_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n     () => ($crate::print!(\"\\n\"));\n@@ -121,6 +123,7 @@ macro_rules! println {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"eprint_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n@@ -149,6 +152,7 @@ macro_rules! eprint {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"eprintln_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n     () => ($crate::eprint!(\"\\n\"));\n@@ -282,6 +286,7 @@ macro_rules! eprintln {\n /// [`debug!`]: https://docs.rs/log/*/log/macro.debug.html\n /// [`log`]: https://crates.io/crates/log\n #[macro_export]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"dbg_macro\")]\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     // NOTE: We cannot use `concat!` to make a static string as a format argument"}, {"sha": "1be3ed757ba295c97ebf613d2ff38563e1c3f4f8", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea03db04a38bd5bb8ad13ee805d94833aacf032/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=7ea03db04a38bd5bb8ad13ee805d94833aacf032", "patch": "@@ -142,6 +142,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// [`std::thread::LocalKey`]: crate::thread::LocalKey\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"thread_local_macro\")]\n #[allow_internal_unstable(thread_local_internals)]\n macro_rules! thread_local {\n     // empty (base case for the recursion)"}]}