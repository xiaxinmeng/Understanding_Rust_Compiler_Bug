{"sha": "e8566fba0e8b48ec2378301c34b5ecc91d331488", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTY2ZmJhMGU4YjQ4ZWMyMzc4MzAxYzM0YjVlY2M5MWQzMzE0ODg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-14T14:07:16Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-25T22:28:50Z"}, "message": "Move handling of `#[track_caller]` to `check_attr`", "tree": {"sha": "ce56b776aedf32f5888c51ab98711b3dae4f0663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce56b776aedf32f5888c51ab98711b3dae4f0663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8566fba0e8b48ec2378301c34b5ecc91d331488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8566fba0e8b48ec2378301c34b5ecc91d331488", "html_url": "https://github.com/rust-lang/rust/commit/e8566fba0e8b48ec2378301c34b5ecc91d331488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8566fba0e8b48ec2378301c34b5ecc91d331488/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b925eb5f42a70a481ae75495c25818c1cc4cea46", "url": "https://api.github.com/repos/rust-lang/rust/commits/b925eb5f42a70a481ae75495c25818c1cc4cea46", "html_url": "https://github.com/rust-lang/rust/commit/b925eb5f42a70a481ae75495c25818c1cc4cea46"}], "stats": {"total": 219, "additions": 95, "deletions": 124}, "files": [{"sha": "3e35add9616bd676144310764dc1e8af0b4e9c1b", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -2219,7 +2219,7 @@ rejected in your own crates.\n \"##,\n \n E0736: r##\"\n-#[track_caller] and #[naked] cannot be applied to the same function.\n+`#[track_caller]` and `#[naked]` cannot both be applied to the same function.\n \n Erroneous code example:\n \n@@ -2237,6 +2237,57 @@ See [RFC 2091] for details on this and other limitations.\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n+E0738: r##\"\n+`#[track_caller]` cannot be used in traits yet. This is due to limitations in\n+the compiler which are likely to be temporary. See [RFC 2091] for details on\n+this and other restrictions.\n+\n+Erroneous example with a trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+impl Foo for u64 {\n+    #[track_caller]\n+    fn bar(&self) {}\n+}\n+```\n+\n+Erroneous example with a blanket trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    #[track_caller]\n+    fn bar(&self) {}\n+    fn baz(&self);\n+}\n+```\n+\n+Erroneous example with a trait method declaration:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self) {}\n+\n+    #[track_caller]\n+    fn baz(&self);\n+}\n+```\n+\n+Note that while the compiler may be able to support the attribute in traits in\n+the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n ;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282"}, {"sha": "55ac95f4ac4b7876d5487003481daf480211b6d3", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -206,27 +206,37 @@ impl CheckAttrVisitor<'tcx> {\n         span: &Span,\n         target: Target,\n     ) -> bool {\n-        if target != Target::Fn {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                *attr_span,\n-                E0739,\n-                \"attribute should be applied to function\"\n-            )\n-            .span_label(*span, \"not a function\")\n-            .emit();\n-            false\n-        } else if attr::contains_name(attrs, sym::naked) {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                *attr_span,\n-                E0736,\n-                \"cannot use `#[track_caller]` with `#[naked]`\",\n-            )\n-            .emit();\n-            false\n-        } else {\n-            true\n+        match target {\n+            Target::Fn if attr::contains_name(attrs, sym::naked) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0736,\n+                    \"cannot use `#[track_caller]` with `#[naked]`\",\n+                ).emit();\n+                false\n+            }\n+            Target::Fn => true,\n+            Target::Method { .. } => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0738,\n+                    \"`#[track_caller]` may not be used on trait methods\",\n+                ).emit();\n+                false\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0739,\n+                    \"attribute should be applied to function\"\n+                )\n+                .span_label(*span, \"not a function\")\n+                .emit();\n+                false\n+            }\n         }\n     }\n "}, {"sha": "0edc41e6b4881390b8134d6244c73fc01ebbeea9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -2756,10 +2756,10 @@ bitflags! {\n         /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n         /// linker can!).\n         const USED                      = 1 << 9;\n-        /// #[ffi_returns_twice], indicates that an extern function can return\n+        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n         /// multiple times\n         const FFI_RETURNS_TWICE         = 1 << 10;\n-        /// #[track_caller]: allow access to the caller location\n+        /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n     }\n }"}, {"sha": "905655176d1e79131d524c9ecc3823c699a23ea4", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -172,18 +172,6 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n-\n-    // Prohibits applying `#[track_caller]` to trait decls\n-    for attr in &trait_item.attrs {\n-        if attr.check_name(sym::track_caller) {\n-            struct_span_err!(\n-                tcx.sess,\n-                attr.span,\n-                E0738,\n-                \"`#[track_caller]` is not supported in trait declarations.\"\n-            ).emit();\n-        }\n-    }\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -195,29 +183,6 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n \n-    // Prohibits applying `#[track_caller]` to trait impls\n-    if method_sig.is_some() {\n-        let track_caller_attr = impl_item.attrs.iter()\n-            .find(|a| a.check_name(sym::track_caller));\n-        if let Some(tc_attr) = track_caller_attr {\n-            let parent_hir_id = tcx.hir().get_parent_item(hir_id);\n-            let containing_item = tcx.hir().expect_item(parent_hir_id);\n-            let containing_impl_is_for_trait = match &containing_item.kind {\n-                hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n-                _ => bug!(\"parent of an ImplItem must be an Impl\"),\n-            };\n-\n-            if containing_impl_is_for_trait {\n-                struct_span_err!(\n-                    tcx.sess,\n-                    tc_attr.span,\n-                    E0738,\n-                    \"`#[track_caller]` is not supported in traits yet.\"\n-                ).emit();\n-            }\n-        }\n-    }\n-\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n "}, {"sha": "026a3d0122d192867db62d0200ff197087070a2b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -2640,7 +2640,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     tcx.sess,\n                     attr.span,\n                     E0737,\n-                    \"rust ABI is required to use `#[track_caller]`\"\n+                    \"Rust ABI is required to use `#[track_caller]`\"\n                 ).emit();\n             }\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;"}, {"sha": "8990ee2eaccc69ac75b878be52fabda022c9ca11", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -4938,7 +4938,7 @@ and the pin is required to keep it in the same place in memory.\n \"##,\n \n E0737: r##\"\n-#[track_caller] requires functions to have the \"Rust\" ABI for implicitly\n+`#[track_caller]` requires functions to have the `\"Rust\"` ABI for implicitly\n receiving caller location. See [RFC 2091] for details on this and other\n restrictions.\n \n@@ -4954,57 +4954,6 @@ extern \"C\" fn foo() {}\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n-E0738: r##\"\n-#[track_caller] cannot be used in traits yet.  This is due to limitations in the\n-compiler which are likely to be temporary. See [RFC 2091] for details on this\n-and other restrictions.\n-\n-Erroneous example with a trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self);\n-}\n-\n-impl Foo for u64 {\n-    #[track_caller]\n-    fn bar(&self) {}\n-}\n-```\n-\n-Erroneous example with a blanket trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    #[track_caller]\n-    fn bar(&self) {}\n-    fn baz(&self);\n-}\n-```\n-\n-Erroneous example with a trait method declaration:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self) {}\n-\n-    #[track_caller]\n-    fn baz(&self);\n-}\n-```\n-\n-Note that while the compiler may be able to support the attribute in traits in\n-the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n-\n-[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n-\"##,\n-\n E0741: r##\"\n Only `structural_match` types (that is, types that derive `PartialEq` and `Eq`)\n may be used as the types of const generic parameters."}, {"sha": "162c6387088e76f9a472c713045affe4d5b54b65", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -1,7 +1,6 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n-#[track_caller]\n+#[track_caller] //~ ERROR Rust ABI is required to use `#[track_caller]`\n extern \"C\" fn f() {}\n-//~^^ ERROR rust ABI is required to use `#[track_caller]`\n \n fn main() {}"}, {"sha": "ad89b142f0ec8b0b0e19bf36c78c5c72ec9e53b2", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0737]: rust ABI is required to use `#[track_caller]`\n+error[E0737]: Rust ABI is required to use `#[track_caller]`\n   --> $DIR/error-with-invalid-abi.rs:3:1\n    |\n LL | #[track_caller]"}, {"sha": "4fd768d640a551532802cc0d74134a7fa4565d20", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self);\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n impl Trait for u64 {"}, {"sha": "72ed6f89faa964bfdc232e81a8f56a2d8175f5ff", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-decl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "2139ba5de10c364f26ab55b39a8408fcc9d215f6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n fn main() {}"}, {"sha": "05689c9468becf6d6074161f0a4b875fb0960e9c", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-default-impl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "9b97df2e4eb33b6cfdba192a2cb93c9f7f0e6e13", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -5,9 +5,8 @@ trait Trait {\n }\n \n impl Trait for u64 {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in traits yet.\n }\n \n fn main() {}"}, {"sha": "9646cb1ac0b086f1add101e53c536aba08f7e012", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8566fba0e8b48ec2378301c34b5ecc91d331488/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=e8566fba0e8b48ec2378301c34b5ecc91d331488", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in traits yet.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-fn-impl.rs:8:5\n    |\n LL |     #[track_caller]"}]}