{"sha": "952f3856822d471cf5062e82f544c901c385f3ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmYzODU2ODIyZDQ3MWNmNTA2MmU4MmY1NDRjOTAxYzM4NWYzYWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T10:36:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-09-03T16:36:07Z"}, "message": "Impl make::blank_line", "tree": {"sha": "fd622081afc58b83eb4a1fae231fb3e575904ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd622081afc58b83eb4a1fae231fb3e575904ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952f3856822d471cf5062e82f544c901c385f3ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952f3856822d471cf5062e82f544c901c385f3ae", "html_url": "https://github.com/rust-lang/rust/commit/952f3856822d471cf5062e82f544c901c385f3ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952f3856822d471cf5062e82f544c901c385f3ae/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ff9eeca8136563e7d1c09ec82cff9a67ed975a", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ff9eeca8136563e7d1c09ec82cff9a67ed975a", "html_url": "https://github.com/rust-lang/rust/commit/07ff9eeca8136563e7d1c09ec82cff9a67ed975a"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "07afa64ffd29c2ae29bd0187cc27ee47637899c5", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=952f3856822d471cf5062e82f544c901c385f3ae", "patch": "@@ -16,7 +16,7 @@ use syntax::{\n \n use crate::assist_config::SnippetCap;\n \n-pub(crate) use insert_use::{find_insert_use_container, insert_use_statement};\n+pub(crate) use insert_use::{find_insert_use_container, insert_use, MergeBehaviour};\n \n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)"}, {"sha": "030a5a9356d810972f6b93b5f41cebc91507decf", "filename": "crates/assists/src/utils/insert_use.rs", "status": "modified", "additions": 8, "deletions": 25, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils%2Finsert_use.rs?ref=952f3856822d471cf5062e82f544c901c385f3ae", "patch": "@@ -9,13 +9,12 @@ use syntax::{\n     Direction, InsertPosition, SyntaxElement, SyntaxNode, T,\n };\n \n-use crate::assist_context::AssistContext;\n use test_utils::mark;\n \n /// Determines the containing syntax node in which to insert a `use` statement affecting `position`.\n pub(crate) fn find_insert_use_container(\n     position: &SyntaxNode,\n-    ctx: &AssistContext,\n+    ctx: &crate::assist_context::AssistContext,\n ) -> Option<Either<ast::ItemList, ast::SourceFile>> {\n     ctx.sema.ancestors_with_macros(position.clone()).find_map(|n| {\n         if let Some(module) = ast::Module::cast(n.clone()) {\n@@ -25,19 +24,9 @@ pub(crate) fn find_insert_use_container(\n     })\n }\n \n-pub(crate) fn insert_use_statement(\n-    // Ideally the position of the cursor, used to\n-    position: &SyntaxNode,\n-    path_to_import: &str,\n-    ctx: &crate::assist_context::AssistContext,\n-    builder: &mut text_edit::TextEditBuilder,\n-) {\n-    insert_use(position.clone(), make::path_from_text(path_to_import), Some(MergeBehaviour::Full));\n-}\n-\n /// Insert an import path into the given file/node. A `merge` value of none indicates that no import merging is allowed to occur.\n pub fn insert_use(\n-    where_: SyntaxNode,\n+    where_: &SyntaxNode,\n     path: ast::Path,\n     merge: Option<MergeBehaviour>,\n ) -> SyntaxNode {\n@@ -49,42 +38,36 @@ pub fn insert_use(\n                 let to_delete: SyntaxElement = existing_use.syntax().clone().into();\n                 let to_delete = to_delete.clone()..=to_delete;\n                 let to_insert = iter::once(merged.syntax().clone().into());\n-                return algo::replace_children(&where_, to_delete, to_insert);\n+                return algo::replace_children(where_, to_delete, to_insert);\n             }\n         }\n     }\n \n     // either we weren't allowed to merge or there is no import that fits the merge conditions\n     // so look for the place we have to insert to\n-    let (insert_position, add_blank) = find_insert_position(&where_, path);\n+    let (insert_position, add_blank) = find_insert_position(where_, path);\n \n     let to_insert: Vec<SyntaxElement> = {\n         let mut buf = Vec::new();\n \n         match add_blank {\n             AddBlankLine::Before => buf.push(make::tokens::single_newline().into()),\n-            AddBlankLine::BeforeTwice => {\n-                buf.push(make::tokens::single_newline().into());\n-                buf.push(make::tokens::single_newline().into());\n-            }\n+            AddBlankLine::BeforeTwice => buf.push(make::tokens::blank_line().into()),\n             _ => (),\n         }\n \n         buf.push(use_item.syntax().clone().into());\n \n         match add_blank {\n             AddBlankLine::After => buf.push(make::tokens::single_newline().into()),\n-            AddBlankLine::AfterTwice => {\n-                buf.push(make::tokens::single_newline().into());\n-                buf.push(make::tokens::single_newline().into());\n-            }\n+            AddBlankLine::AfterTwice => buf.push(make::tokens::blank_line().into()),\n             _ => (),\n         }\n \n         buf\n     };\n \n-    algo::insert_children(&where_, insert_position, to_insert)\n+    algo::insert_children(where_, insert_position, to_insert)\n }\n \n fn try_merge_imports(\n@@ -613,7 +596,7 @@ use foo::bar;\",\n             .find_map(ast::Path::cast)\n             .unwrap();\n \n-        let result = insert_use(file, path, mb).to_string();\n+        let result = insert_use(&file, path, mb).to_string();\n         assert_eq_text!(&result, ra_fixture_after);\n     }\n "}, {"sha": "33f1ad7b34e1da6fe7bf892b3c05bc4e66f17d5e", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952f3856822d471cf5062e82f544c901c385f3ae/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=952f3856822d471cf5062e82f544c901c385f3ae", "patch": "@@ -339,7 +339,7 @@ pub mod tokens {\n     use crate::{ast, AstNode, Parse, SourceFile, SyntaxKind::*, SyntaxToken};\n \n     pub(super) static SOURCE_FILE: Lazy<Parse<SourceFile>> =\n-        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2, !true)\\n;\"));\n+        Lazy::new(|| SourceFile::parse(\"const C: <()>::Item = (1 != 1, 2 == 2, !true)\\n;\\n\\n\"));\n \n     pub fn single_space() -> SyntaxToken {\n         SOURCE_FILE\n@@ -379,6 +379,16 @@ pub mod tokens {\n             .unwrap()\n     }\n \n+    pub fn blank_line() -> SyntaxToken {\n+        SOURCE_FILE\n+            .tree()\n+            .syntax()\n+            .descendants_with_tokens()\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\\n\")\n+            .unwrap()\n+    }\n+\n     pub struct WsBuilder(SourceFile);\n \n     impl WsBuilder {"}]}