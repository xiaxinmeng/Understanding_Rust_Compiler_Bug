{"sha": "93eeb127241928a2c64b0bd8c81d5ed859b864aa", "node_id": "C_kwDOAAsO6NoAKDkzZWViMTI3MjQxOTI4YTJjNjRiMGJkOGM4MWQ1ZWQ4NTliODY0YWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-01T05:47:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-03-20T22:28:52Z"}, "message": "Refactor `handle_missing_lit`.", "tree": {"sha": "d0725bf7bd14314a0c405cc91bcfb8b94920263d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0725bf7bd14314a0c405cc91bcfb8b94920263d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93eeb127241928a2c64b0bd8c81d5ed859b864aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93eeb127241928a2c64b0bd8c81d5ed859b864aa", "html_url": "https://github.com/rust-lang/rust/commit/93eeb127241928a2c64b0bd8c81d5ed859b864aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93eeb127241928a2c64b0bd8c81d5ed859b864aa/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8826b68c623619161d499f8138614a0edd741bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8826b68c623619161d499f8138614a0edd741bc8", "html_url": "https://github.com/rust-lang/rust/commit/8826b68c623619161d499f8138614a0edd741bc8"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "8b69b3cb03683fd34beb71478b34ca44e2fec322", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/93eeb127241928a2c64b0bd8c81d5ed859b864aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93eeb127241928a2c64b0bd8c81d5ed859b864aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=93eeb127241928a2c64b0bd8c81d5ed859b864aa", "patch": "@@ -1843,20 +1843,14 @@ impl<'a> Parser<'a> {\n         &mut self,\n         mk_lit_char: impl FnOnce(Symbol, Span) -> L,\n     ) -> PResult<'a, L> {\n-        if let token::Interpolated(inner) = &self.token.kind {\n-            let expr = match inner.as_ref() {\n-                token::NtExpr(expr) => Some(expr),\n-                token::NtLiteral(expr) => Some(expr),\n-                _ => None,\n-            };\n-            if let Some(expr) = expr {\n-                if matches!(expr.kind, ExprKind::Err) {\n-                    let mut err = errors::InvalidInterpolatedExpression { span: self.token.span }\n-                        .into_diagnostic(&self.sess.span_diagnostic);\n-                    err.downgrade_to_delayed_bug();\n-                    return Err(err);\n-                }\n-            }\n+        if let token::Interpolated(nt) = &self.token.kind\n+            && let token::NtExpr(e) | token::NtLiteral(e) = &**nt\n+            && matches!(e.kind, ExprKind::Err)\n+        {\n+            let mut err = errors::InvalidInterpolatedExpression { span: self.token.span }\n+                .into_diagnostic(&self.sess.span_diagnostic);\n+            err.downgrade_to_delayed_bug();\n+            return Err(err);\n         }\n         let token = self.token.clone();\n         let err = |self_: &Self| {"}]}