{"sha": "795d718ba17545aedb0475051332aed6db2104ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWQ3MThiYTE3NTQ1YWVkYjA0NzUwNTEzMzJhZWQ2ZGIyMTA0ZWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-17T13:43:59Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-17T13:44:39Z"}, "message": "Unify with the autorefed/autoderefed receiver type during method resolution", "tree": {"sha": "652dac8b0a8dbd299f9b2a6696c1714076aab341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/652dac8b0a8dbd299f9b2a6696c1714076aab341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795d718ba17545aedb0475051332aed6db2104ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795d718ba17545aedb0475051332aed6db2104ed", "html_url": "https://github.com/rust-lang/rust/commit/795d718ba17545aedb0475051332aed6db2104ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795d718ba17545aedb0475051332aed6db2104ed/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1bda3fc084bb6aa4979282b4907db9885fac9af", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1bda3fc084bb6aa4979282b4907db9885fac9af", "html_url": "https://github.com/rust-lang/rust/commit/a1bda3fc084bb6aa4979282b4907db9885fac9af"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "562ad1f4961ba8322515d60000bbc41270fa8986", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=795d718ba17545aedb0475051332aed6db2104ed", "patch": "@@ -1381,12 +1381,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::MethodCall { receiver, args, method_name, generic_args } => {\n                 let receiver_ty = self.infer_expr(*receiver, &Expectation::none());\n                 let resolved = receiver_ty.clone().lookup_method(self.db, method_name);\n-                let (method_ty, def_generics) = match resolved {\n-                    Some(func) => {\n+                let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n+                    Some((ty, func)) => {\n                         self.write_method_resolution(tgt_expr, func);\n-                        (self.db.type_for_def(func.into()), Some(func.generic_params(self.db)))\n+                        (ty, self.db.type_for_def(func.into()), Some(func.generic_params(self.db)))\n                     }\n-                    None => (Ty::Unknown, None),\n+                    None => (Ty::Unknown, receiver_ty, None),\n                 };\n                 // handle provided type arguments\n                 let method_ty = if let Some(generic_args) = generic_args {\n@@ -1429,9 +1429,13 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     }\n                     _ => (Ty::Unknown, Vec::new(), Ty::Unknown),\n                 };\n-                // TODO we would have to apply the autoderef/autoref steps here\n-                // to get the correct receiver type to unify...\n-                self.unify(&expected_receiver_ty, &receiver_ty);\n+                // Apply autoref so the below unification works correctly\n+                let actual_receiver_ty = match expected_receiver_ty {\n+                    Ty::Ref(_, mutability) => Ty::Ref(Arc::new(derefed_receiver_ty), mutability),\n+                    _ => derefed_receiver_ty,\n+                };\n+                self.unify(&expected_receiver_ty, &actual_receiver_ty);\n+\n                 let param_iter = param_tys.into_iter().chain(repeat(Ty::Unknown));\n                 for (arg, param) in args.iter().zip(param_iter) {\n                     self.infer_expr(*arg, &Expectation::has_type(param));"}, {"sha": "94b757af2102ddbb830f102f7101a62aec7735e7", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=795d718ba17545aedb0475051332aed6db2104ed", "patch": "@@ -118,11 +118,13 @@ impl Ty {\n     // TODO: cache this as a query?\n     // - if so, what signature? (TyFingerprint, Name)?\n     // - or maybe cache all names and def_ids of methods per fingerprint?\n-    pub fn lookup_method(self, db: &impl HirDatabase, name: &Name) -> Option<Function> {\n-        self.iterate_methods(db, |f| {\n+    /// Look up the method with the given name, returning the actual autoderefed\n+    /// receiver type (but without autoref applied yet).\n+    pub fn lookup_method(self, db: &impl HirDatabase, name: &Name) -> Option<(Ty, Function)> {\n+        self.iterate_methods(db, |ty, f| {\n             let sig = f.signature(db);\n             if sig.name() == name && sig.has_self_param() {\n-                Some(f)\n+                Some((ty.clone(), f))\n             } else {\n                 None\n             }\n@@ -134,7 +136,7 @@ impl Ty {\n     pub fn iterate_methods<T>(\n         self,\n         db: &impl HirDatabase,\n-        mut callback: impl FnMut(Function) -> Option<T>,\n+        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n     ) -> Option<T> {\n         // For method calls, rust first does any number of autoderef, and then one\n         // autoref (i.e. when the method takes &self or &mut self). We just ignore\n@@ -156,7 +158,7 @@ impl Ty {\n                 for item in impl_block.items(db) {\n                     match item {\n                         ImplItem::Method(f) => {\n-                            if let Some(result) = callback(f) {\n+                            if let Some(result) = callback(&derefed_ty, f) {\n                                 return Some(result);\n                             }\n                         }"}, {"sha": "f609eaf7ccc05768dd6d64290323257d1dd97c03", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_impl_generics_with_autoderef.snap", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap", "raw_url": "https://github.com/rust-lang/rust/raw/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_impl_generics_with_autoderef.snap?ref=795d718ba17545aedb0475051332aed6db2104ed", "patch": "@@ -0,0 +1,16 @@\n+---\n+created: \"2019-02-17T13:35:06.385679926Z\"\n+creator: insta@0.6.2\n+source: crates/ra_hir/src/ty/tests.rs\n+expression: \"&result\"\n+---\n+[78; 82) 'self': &Option<T>\n+[98; 100) '{}': ()\n+[111; 112) 'o': Option<u32>\n+[127; 165) '{     ...f(); }': ()\n+[133; 146) '(&o).as_ref()': Option<&u32>\n+[134; 136) '&o': &Option<u32>\n+[135; 136) 'o': Option<u32>\n+[152; 153) 'o': Option<u32>\n+[152; 162) 'o.as_ref()': Option<&u32>\n+"}, {"sha": "5eb9c4f5bcc8c7de160167f902ddeab9017624ba", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=795d718ba17545aedb0475051332aed6db2104ed", "patch": "@@ -538,6 +538,26 @@ fn test() -> i128 {\n     );\n }\n \n+#[test]\n+fn infer_impl_generics_with_autoderef() {\n+    check_inference(\n+        \"infer_impl_generics_with_autoderef\",\n+        r#\"\n+enum Option<T> {\n+    Some(T),\n+    None,\n+}\n+impl<T> Option<T> {\n+    fn as_ref(&self) -> Option<&T> {}\n+}\n+fn test(o: Option<u32>) {\n+    (&o).as_ref();\n+    o.as_ref();\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_generic_chain() {\n     check_inference("}, {"sha": "20fa323ce9903f821a1c888f6bda5b009d78c48c", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d718ba17545aedb0475051332aed6db2104ed/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=795d718ba17545aedb0475051332aed6db2104ed", "patch": "@@ -63,7 +63,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n }\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n-    receiver.iterate_methods(ctx.db, |func| {\n+    receiver.iterate_methods(ctx.db, |_ty, func| {\n         let sig = func.signature(ctx.db);\n         if sig.has_self_param() {\n             CompletionItem::new("}]}