{"sha": "5d30ab85b29c217760506770cdce7ee2617d8314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMzBhYjg1YjI5YzIxNzc2MDUwNjc3MGNkY2U3ZWUyNjE3ZDgzMTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-04T21:13:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-04T21:13:43Z"}, "message": "Rollup merge of #85966 - alexcrichton:wasm-simd-indirect, r=workingjubilee\n\nwasm: Make simd types passed via indirection again\n\nThis commit updates wasm target specs to use `simd_types_indirect: true`\nagain. Long ago this was added since wasm simd types were always\ntranslated to `v128` under-the-hood in LLVM, meaning that it didn't\nmatter whether that target feature was enabled or not. Now, however,\n`v128` is conditionally used in codegen depending on target features\nenabled, meaning that it's possible to get linker errors about different\nsignatures in code that correctly uses simd types. The fix is the same\nas for all other platforms, which is to pass the type indirectly.", "tree": {"sha": "bfee0f789f9a2350868d3cf950e43d2cc29d6c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfee0f789f9a2350868d3cf950e43d2cc29d6c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d30ab85b29c217760506770cdce7ee2617d8314", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgupeICRBK7hj4Ov3rIwAAX7EIAEXjqqwERg1FJwidVVqBTYDs\nj3Mp3z7kZ6Pgxq5TleU3ZYLFVZvlNc1PWPK+bF3Fez2UrGWqJ3K1sTH/jGURKRUx\nlIMC1FF1D1PUKCXtgdqG0Kfo7sEf3rWTFyi4C/a+nX6ZZD9l7Tmz4Q2WfTAc/AZV\nW1u9S1MxDmnPqOxtr+nd2hYZvGiCbqKZwHR4ouH8FykM/C1kSsow/+mGuh5lkRjQ\nx1ePQJATCERUaB5zSg3bYpPhVadDXtuersGQRi4rodL2Iqsn4/uZ2MQSn4nkfdSs\n2LuUXG8m1liIkCxM7YkOTAP++EjtomL0lu+6+iZyD4xbOHiWV5fcsIdiTkG+MOw=\n=t++7\n-----END PGP SIGNATURE-----\n", "payload": "tree bfee0f789f9a2350868d3cf950e43d2cc29d6c35\nparent 5ebc4d3697ee12a1484ebc28d0e18d69834b7154\nparent 55769a5ca98452967deb66dc1043a45fe0b2ddba\nauthor Yuki Okushi <jtitor@2k36.org> 1622841223 +0900\ncommitter GitHub <noreply@github.com> 1622841223 +0900\n\nRollup merge of #85966 - alexcrichton:wasm-simd-indirect, r=workingjubilee\n\nwasm: Make simd types passed via indirection again\n\nThis commit updates wasm target specs to use `simd_types_indirect: true`\nagain. Long ago this was added since wasm simd types were always\ntranslated to `v128` under-the-hood in LLVM, meaning that it didn't\nmatter whether that target feature was enabled or not. Now, however,\n`v128` is conditionally used in codegen depending on target features\nenabled, meaning that it's possible to get linker errors about different\nsignatures in code that correctly uses simd types. The fix is the same\nas for all other platforms, which is to pass the type indirectly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d30ab85b29c217760506770cdce7ee2617d8314", "html_url": "https://github.com/rust-lang/rust/commit/5d30ab85b29c217760506770cdce7ee2617d8314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d30ab85b29c217760506770cdce7ee2617d8314/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebc4d3697ee12a1484ebc28d0e18d69834b7154", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebc4d3697ee12a1484ebc28d0e18d69834b7154", "html_url": "https://github.com/rust-lang/rust/commit/5ebc4d3697ee12a1484ebc28d0e18d69834b7154"}, {"sha": "55769a5ca98452967deb66dc1043a45fe0b2ddba", "url": "https://api.github.com/repos/rust-lang/rust/commits/55769a5ca98452967deb66dc1043a45fe0b2ddba", "html_url": "https://github.com/rust-lang/rust/commit/55769a5ca98452967deb66dc1043a45fe0b2ddba"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "6c8977351949de691b2cdc16e7c51ce3355c41a0", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d30ab85b29c217760506770cdce7ee2617d8314/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d30ab85b29c217760506770cdce7ee2617d8314/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=5d30ab85b29c217760506770cdce7ee2617d8314", "patch": "@@ -103,12 +103,6 @@ pub fn options() -> TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         lld_flavor: LldFlavor::Wasm,\n \n-        // No need for indirection here, simd types can always be passed by\n-        // value as the whole module either has simd or not, which is different\n-        // from x86 (for example) where programs can have functions that don't\n-        // enable simd features.\n-        simd_types_indirect: false,\n-\n         pre_link_args,\n \n         crt_objects_fallback: Some(CrtObjectsFallback::Wasm),"}, {"sha": "deac593df43f1e1d3ff84056e1ac644feb82a5e8", "filename": "src/test/ui/simd/wasm-simd-indirect.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5d30ab85b29c217760506770cdce7ee2617d8314/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d30ab85b29c217760506770cdce7ee2617d8314/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fwasm-simd-indirect.rs?ref=5d30ab85b29c217760506770cdce7ee2617d8314", "patch": "@@ -0,0 +1,33 @@\n+// build-pass\n+\n+#![cfg_attr(target_arch = \"wasm32\", feature(wasm_simd, wasm_target_feature))]\n+\n+#[cfg(target_arch = \"wasm32\")]\n+fn main() {\n+    unsafe {\n+        a::api_with_simd_feature();\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+mod a {\n+    use std::arch::wasm32::*;\n+\n+    #[target_feature(enable = \"simd128\")]\n+    pub unsafe fn api_with_simd_feature() {\n+        crate::b::api_takes_v128(u64x2(0, 1));\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+mod b {\n+    use std::arch::wasm32::*;\n+\n+    #[inline(never)]\n+    pub fn api_takes_v128(a: v128) -> v128 {\n+        a\n+    }\n+}\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+fn main() {}"}]}