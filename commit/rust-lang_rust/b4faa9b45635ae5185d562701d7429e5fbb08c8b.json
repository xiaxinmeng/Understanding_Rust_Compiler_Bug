{"sha": "b4faa9b45635ae5185d562701d7429e5fbb08c8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZmFhOWI0NTYzNWFlNTE4NWQ1NjI3MDFkNzQyOWU1ZmJiMDhjOGI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T22:57:09Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T22:57:09Z"}, "message": "Remove ASCII_CHARACTER_CLASS table, use `match` with range patterns instead.", "tree": {"sha": "325c561bedf3676dc493dbe20607d1d9231c3206", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/325c561bedf3676dc493dbe20607d1d9231c3206"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4faa9b45635ae5185d562701d7429e5fbb08c8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4faa9b45635ae5185d562701d7429e5fbb08c8b", "html_url": "https://github.com/rust-lang/rust/commit/b4faa9b45635ae5185d562701d7429e5fbb08c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4faa9b45635ae5185d562701d7429e5fbb08c8b/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3840b23a185d057cc9792a2516e6a71887f277", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3840b23a185d057cc9792a2516e6a71887f277", "html_url": "https://github.com/rust-lang/rust/commit/6d3840b23a185d057cc9792a2516e6a71887f277"}], "stats": {"total": 75, "additions": 20, "deletions": 55}, "files": [{"sha": "64469a4b7e43cb1629add77f5c4f019b30b56a3b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 55, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b4faa9b45635ae5185d562701d7429e5fbb08c8b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4faa9b45635ae5185d562701d7429e5fbb08c8b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b4faa9b45635ae5185d562701d7429e5fbb08c8b", "patch": "@@ -3958,9 +3958,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphabetic(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            L | Lx | U | Ux => true,\n+        match *self {\n+            b'A'...b'Z' | b'a'...b'z' => true,\n             _ => false\n         }\n     }\n@@ -3994,9 +3993,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_uppercase(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            U | Ux => true,\n+        match *self {\n+            b'A'...b'Z' => true,\n             _ => false\n         }\n     }\n@@ -4030,9 +4028,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_lowercase(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            L | Lx => true,\n+        match *self {\n+            b'a'...b'z' => true,\n             _ => false\n         }\n     }\n@@ -4069,9 +4066,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_alphanumeric(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D | L | Lx | U | Ux => true,\n+        match *self {\n+            b'0'...b'9' | b'A'...b'Z' | b'a'...b'z' => true,\n             _ => false\n         }\n     }\n@@ -4105,9 +4101,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_digit(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D => true,\n+        match *self {\n+            b'0'...b'9' => true,\n             _ => false\n         }\n     }\n@@ -4144,9 +4139,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_hexdigit(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            D | Lx | Ux => true,\n+        match *self {\n+            b'0'...b'9' | b'A'...b'F' | b'a'...b'f' => true,\n             _ => false\n         }\n     }\n@@ -4184,9 +4178,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_punctuation(&self) -> bool {\n-        if *self >= 0x80 { return false }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            P => true,\n+        match *self {\n+            b'!'...b'/' | b':'...b'@' | b'['...b'`' | b'{'...b'~' => true,\n             _ => false\n         }\n     }\n@@ -4220,9 +4213,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_graphic(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            Ux | U | Lx | L | D | P => true,\n+        match *self {\n+            b'!'...b'~' => true,\n             _ => false\n         }\n     }\n@@ -4273,9 +4265,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_whitespace(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            Cw | W => true,\n+        match *self {\n+            b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ' => true,\n             _ => false\n         }\n     }\n@@ -4311,9 +4302,8 @@ impl u8 {\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n     #[inline]\n     pub fn is_ascii_control(&self) -> bool {\n-        if *self >= 0x80 { return false; }\n-        match ASCII_CHARACTER_CLASS[*self as usize] {\n-            C | Cw => true,\n+        match *self {\n+            b'\\0'...b'\\x1F' | b'\\x7F' => true,\n             _ => false\n         }\n     }\n@@ -4979,28 +4969,3 @@ impl_from! { u32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\"\n \n // Float -> Float\n impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n-\n-enum AsciiCharacterClass {\n-    C,  // control\n-    Cw, // control whitespace\n-    W,  // whitespace\n-    D,  // digit\n-    L,  // lowercase\n-    Lx, // lowercase hex digit\n-    U,  // uppercase\n-    Ux, // uppercase hex digit\n-    P,  // punctuation\n-}\n-use self::AsciiCharacterClass::*;\n-\n-static ASCII_CHARACTER_CLASS: [AsciiCharacterClass; 128] = [\n-//  _0 _1 _2 _3 _4 _5 _6 _7 _8 _9 _a _b _c _d _e _f\n-    C, C, C, C, C, C, C, C, C, Cw,Cw,C, Cw,Cw,C, C, // 0_\n-    C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, // 1_\n-    W, P, P, P, P, P, P, P, P, P, P, P, P, P, P, P, // 2_\n-    D, D, D, D, D, D, D, D, D, D, P, P, P, P, P, P, // 3_\n-    P, Ux,Ux,Ux,Ux,Ux,Ux,U, U, U, U, U, U, U, U, U, // 4_\n-    U, U, U, U, U, U, U, U, U, U, U, P, P, P, P, P, // 5_\n-    P, Lx,Lx,Lx,Lx,Lx,Lx,L, L, L, L, L, L, L, L, L, // 6_\n-    L, L, L, L, L, L, L, L, L, L, L, P, P, P, P, C, // 7_\n-];"}]}