{"sha": "c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NDNkZDJlYzhmZWQyODUyZjVlZWU4Zjc3NmQ2NTcyOTNhNmE4ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T18:29:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T18:29:38Z"}, "message": "Auto merge of #79243 - Nadrieril:consolidate-tests, r=varkor\n\nConsolidate exhaustiveness-related tests\n\nI hunted for tests that only exercised the match exhaustiveness algorithm and regrouped them. I also improved integer-range tests since I had found them lacking while hacking around.\nThe interest is mainly so that one can pass `--test-args patterns` and catch most relevant tests.\n\nr? `@varkor`\n`@rustbot` modify labels: +A-exhaustiveness-checking", "tree": {"sha": "af4808d37329c7591dead286316631357f5f7947", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4808d37329c7591dead286316631357f5f7947"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "html_url": "https://github.com/rust-lang/rust/commit/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "url": "https://api.github.com/repos/rust-lang/rust/commits/52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "html_url": "https://github.com/rust-lang/rust/commit/52e3cf13aa9716f6648b1cad286ccd8d37aa315f"}, {"sha": "3213efcd9ab32cbe4e69c4322e6a992a9e64f0ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/3213efcd9ab32cbe4e69c4322e6a992a9e64f0ff", "html_url": "https://github.com/rust-lang/rust/commit/3213efcd9ab32cbe4e69c4322e6a992a9e64f0ff"}], "stats": {"total": 1573, "additions": 908, "deletions": 665}, "files": [{"sha": "79a74e387435c5caeef98f45a67e9a0cecfe349a", "filename": "compiler/rustc_mir_build/src/thir/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2F_match.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -3,6 +3,7 @@\n //!     - ui/or-patterns\n //!     - ui/consts/const_in_pattern\n //!     - ui/rfc-2008-non-exhaustive\n+//!     - ui/half-open-range-patterns\n //!     - probably many others\n //! I (Nadrieril) prefer to put new tests in `ui/pattern/usefulness` unless there's a specific\n //! reason not to, for example if they depend on a particular feature like or_patterns."}, {"sha": "d42fbf22938c0503f3dd859f84d10cbb41dca0f7", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,14 +1,19 @@\n-#![feature(exclusive_range_pattern)]\n-\n-use std::usize::MAX;\n+use std::{isize, usize};\n \n fn main() {\n-    match 0usize { //~ERROR non-exhaustive patterns: `_` not covered\n-        0..=MAX => {}\n+    match 0usize {\n+        //~^ ERROR non-exhaustive patterns: `_` not covered\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `usize`\n+        //~| NOTE `usize` does not have a fixed maximum value\n+        0..=usize::MAX => {}\n     }\n \n-    match 0isize { //~ERROR non-exhaustive patterns: `_` not covered\n-        1..=20 => {}\n-        -5..3 => {}\n+    match 0isize {\n+        //~^ ERROR non-exhaustive patterns: `_` not covered\n+        //~| NOTE pattern `_` not covered\n+        //~| NOTE the matched value is of type `isize`\n+        //~| NOTE `isize` does not have a fixed maximum value\n+        isize::MIN..=isize::MAX => {}\n     }\n }"}, {"sha": "da308c292dfab954c0cd045885a5128a64f67eb0", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-precise_pointer_size_matching.rs:6:11\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:4:11\n    |\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -10,7 +10,7 @@ LL |     match 0usize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n+  --> $DIR/feature-gate-precise_pointer_size_matching.rs:12:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered"}, {"sha": "ff065882d96e291407dab5eb429d67dc3e8959d5", "filename": "src/test/ui/pattern/integer-range-binding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Finteger-range-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Finteger-range-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Finteger-range-binding.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/usefulness/irrefutable-exhaustive-integer-binding.rs"}, {"sha": "abfacf3936b6dd61d00415f37fcaa0d74a456769", "filename": "src/test/ui/pattern/usefulness/const-pat-ice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-pat-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-pat-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-pat-ice.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/const-pat-ice.rs"}, {"sha": "14040c8ada67d17f54efb881af4e7a1f6e991196", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.rs"}, {"sha": "308a6c7c58e6631f1d9c13017203fdbe735ce741", "filename": "src/test/ui/pattern/usefulness/deny-irrefutable-let-patterns.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fdeny-irrefutable-let-patterns.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/deny-irrefutable-let-patterns.stderr"}, {"sha": "78cc0d28fb0375b56f314e9079ef3815eabde3eb", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.rs", "status": "removed", "additions": 0, "deletions": 172, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.rs?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,172 +0,0 @@\n-#![feature(precise_pointer_size_matching)]\n-#![feature(exclusive_range_pattern)]\n-#![deny(unreachable_patterns)]\n-#![deny(overlapping_patterns)]\n-\n-use std::{char, u8, u16, u32, u64, u128, i8, i16, i32, i64, i128};\n-\n-fn main() {\n-    let x: u8 = 0;\n-\n-    // A single range covering the entire domain.\n-    match x {\n-        0 ..= 255 => {} // ok\n-    }\n-\n-    // A combination of ranges and values.\n-    // These are currently allowed to be overlapping.\n-    match x {\n-        0 ..= 32 => {}\n-        33 => {}\n-        34 .. 128 => {}\n-        100 ..= 200 => {}\n-        200 => {} //~ ERROR unreachable pattern\n-        201 ..= 255 => {}\n-    }\n-\n-    // An incomplete set of values.\n-    match x { //~ ERROR non-exhaustive patterns\n-        0 .. 128 => {}\n-    }\n-\n-    // A more incomplete set of values.\n-    match x { //~ ERROR non-exhaustive patterns\n-        0 ..= 10 => {}\n-        20 ..= 30 => {}\n-        35 => {}\n-        70 .. 255 => {}\n-    }\n-\n-    let x: i8 = 0;\n-    match x { //~ ERROR non-exhaustive patterns\n-        -7 => {}\n-        -5..=120 => {}\n-        -2..=20 => {}\n-        //~^ ERROR unreachable pattern\n-        125 => {}\n-    }\n-\n-    // Let's test other types too!\n-    let c: char = '\\u{0}';\n-    match c {\n-        '\\u{0}' ..= char::MAX => {} // ok\n-    }\n-\n-    // We can actually get away with just covering the\n-    // following two ranges, which correspond to all\n-    // valid Unicode Scalar Values.\n-    match c {\n-        '\\u{0000}' ..= '\\u{D7FF}' => {}\n-        '\\u{E000}' ..= '\\u{10_FFFF}' => {}\n-    }\n-\n-    match 0u16 {\n-        0 ..= u16::MAX => {} // ok\n-    }\n-\n-    match 0u32 {\n-        0 ..= u32::MAX => {} // ok\n-    }\n-\n-    match 0u64 {\n-        0 ..= u64::MAX => {} // ok\n-    }\n-\n-    match 0u128 {\n-        0 ..= u128::MAX => {} // ok\n-    }\n-\n-    match 0i8 {\n-        -128 ..= 127 => {} // ok\n-    }\n-\n-    match 0i8 { //~ ERROR non-exhaustive patterns\n-        -127 ..= 127 => {}\n-    }\n-\n-    match 0i16 {\n-        i16::MIN ..= i16::MAX => {} // ok\n-    }\n-\n-    match 0i16 { //~ ERROR non-exhaustive patterns\n-        i16::MIN ..= -1 => {}\n-        1 ..= i16::MAX => {}\n-    }\n-\n-    match 0i32 {\n-        i32::MIN ..= i32::MAX => {} // ok\n-    }\n-\n-    match 0i64 {\n-        i64::MIN ..= i64::MAX => {} // ok\n-    }\n-\n-    match 0i128 {\n-        i128::MIN ..= i128::MAX => {} // ok\n-    }\n-\n-    // Make sure that guards don't factor into the exhaustiveness checks.\n-    match 0u8 { //~ ERROR non-exhaustive patterns\n-        0 .. 128 => {}\n-        128 ..= 255 if true => {}\n-    }\n-\n-    match 0u8 {\n-        0 .. 128 => {}\n-        128 ..= 255 if false => {}\n-        128 ..= 255 => {} // ok, because previous arm was guarded\n-    }\n-\n-    // Now things start getting a bit more interesting. Testing products!\n-    match (0u8, Some(())) { //~ ERROR non-exhaustive patterns\n-        (1, _) => {}\n-        (_, None) => {}\n-    }\n-\n-    match (0u8, true) { //~ ERROR non-exhaustive patterns\n-        (0 ..= 125, false) => {}\n-        (128 ..= 255, false) => {}\n-        (0 ..= 255, true) => {}\n-    }\n-\n-    match (0u8, true) { // ok\n-        (0 ..= 125, false) => {}\n-        (128 ..= 255, false) => {}\n-        (0 ..= 255, true) => {}\n-        (125 .. 128, false) => {}\n-    }\n-\n-    match 0u8 {\n-        0 .. 2 => {}\n-        1 ..= 2 => {} //~ ERROR multiple patterns covering the same range\n-        _ => {}\n-    }\n-\n-    const LIM: u128 = u128::MAX - 1;\n-    match 0u128 { //~ ERROR non-exhaustive patterns\n-        0 ..= LIM => {}\n-    }\n-\n-    match 0u128 { //~ ERROR non-exhaustive patterns\n-        0 ..= 4 => {}\n-    }\n-\n-    match 0u128 { //~ ERROR non-exhaustive patterns\n-        4 ..= u128::MAX => {}\n-    }\n-\n-    const FOO: i32 = 42;\n-    const BAR: &i32 = &42;\n-    match &0 {\n-        &42 => {}\n-        &FOO => {} //~ ERROR unreachable pattern\n-        BAR => {} //~ ERROR unreachable pattern\n-        _ => {}\n-    }\n-\n-    // Regression test, see https://github.com/rust-lang/rust/pull/66326#issuecomment-552889933\n-    match &0 {\n-        BAR => {} // ok\n-        _ => {}\n-    }\n-}"}, {"sha": "9f076c50a8f09999c167d3aaf5ea37918c39d397", "filename": "src/test/ui/pattern/usefulness/exhaustive_integer_patterns.stderr", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fexhaustive_integer_patterns.stderr?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,146 +0,0 @@\n-error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:23:9\n-   |\n-LL |         200 => {}\n-   |         ^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/exhaustive_integer_patterns.rs:3:9\n-   |\n-LL | #![deny(unreachable_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:28:11\n-   |\n-LL |     match x {\n-   |           ^ pattern `128_u8..=u8::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u8`\n-\n-error[E0004]: non-exhaustive patterns: `11_u8..=19_u8`, `31_u8..=34_u8`, `36_u8..=69_u8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:33:11\n-   |\n-LL |     match x {\n-   |           ^ patterns `11_u8..=19_u8`, `31_u8..=34_u8`, `36_u8..=69_u8` and 1 more not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u8`\n-\n-error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:44:9\n-   |\n-LL |         -2..=20 => {}\n-   |         ^^^^^^^\n-\n-error[E0004]: non-exhaustive patterns: `i8::MIN..=-8_i8`, `-6_i8`, `121_i8..=124_i8` and 1 more not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:41:11\n-   |\n-LL |     match x {\n-   |           ^ patterns `i8::MIN..=-8_i8`, `-6_i8`, `121_i8..=124_i8` and 1 more not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `i8`\n-\n-error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:83:11\n-   |\n-LL |     match 0i8 {\n-   |           ^^^ pattern `i8::MIN` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `i8`\n-\n-error[E0004]: non-exhaustive patterns: `0_i16` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:91:11\n-   |\n-LL |     match 0i16 {\n-   |           ^^^^ pattern `0_i16` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `i16`\n-\n-error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:109:11\n-   |\n-LL |     match 0u8 {\n-   |           ^^^ pattern `128_u8..=u8::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u8`\n-\n-error[E0004]: non-exhaustive patterns: `(0_u8, Some(_))` and `(2_u8..=u8::MAX, Some(_))` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:121:11\n-   |\n-LL |     match (0u8, Some(())) {\n-   |           ^^^^^^^^^^^^^^^ patterns `(0_u8, Some(_))` and `(2_u8..=u8::MAX, Some(_))` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `(u8, Option<()>)`\n-\n-error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:126:11\n-   |\n-LL |     match (0u8, true) {\n-   |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `(u8, bool)`\n-\n-error: multiple patterns covering the same range\n-  --> $DIR/exhaustive_integer_patterns.rs:141:9\n-   |\n-LL |         0 .. 2 => {}\n-   |         ------ this range overlaps on `1_u8`\n-LL |         1 ..= 2 => {}\n-   |         ^^^^^^^ overlapping patterns\n-   |\n-note: the lint level is defined here\n-  --> $DIR/exhaustive_integer_patterns.rs:4:9\n-   |\n-LL | #![deny(overlapping_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:146:11\n-   |\n-LL |     match 0u128 {\n-   |           ^^^^^ pattern `u128::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u128`\n-\n-error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:150:11\n-   |\n-LL |     match 0u128 {\n-   |           ^^^^^ pattern `5_u128..=u128::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u128`\n-\n-error[E0004]: non-exhaustive patterns: `0_u128..=3_u128` not covered\n-  --> $DIR/exhaustive_integer_patterns.rs:154:11\n-   |\n-LL |     match 0u128 {\n-   |           ^^^^^ pattern `0_u128..=3_u128` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `u128`\n-\n-error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:162:9\n-   |\n-LL |         &FOO => {}\n-   |         ^^^^\n-\n-error: unreachable pattern\n-  --> $DIR/exhaustive_integer_patterns.rs:163:9\n-   |\n-LL |         BAR => {}\n-   |         ^^^\n-\n-error: aborting due to 16 previous errors\n-\n-For more information about this error, try `rustc --explain E0004`."}, {"sha": "095f5ac9a89701f87170782c40f080feb85a439c", "filename": "src/test/ui/pattern/usefulness/floats.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -10,4 +10,10 @@ fn main() {\n     match 0.0 { //~ ERROR non-exhaustive patterns\n       0.0..=1.0 => {}\n     }\n+\n+    match 1.0f64 {\n+      0.01f64 ..= 6.5f64 => {}\n+      0.02f64 => {} //~ ERROR unreachable pattern\n+      _ => {}\n+    };\n }", "previous_filename": "src/test/ui/pattern/usefulness/non-exhaustive-float-range-match.rs"}, {"sha": "464bfbdb2c3b2a864d72c0ed341b097ef6cd9d7c", "filename": "src/test/ui/pattern/usefulness/floats.stderr", "status": "renamed", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ffloats.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,12 +1,24 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/non-exhaustive-float-range-match.rs:10:11\n+  --> $DIR/floats.rs:10:11\n    |\n LL |     match 0.0 {\n    |           ^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `f64`\n \n-error: aborting due to previous error\n+error: unreachable pattern\n+  --> $DIR/floats.rs:16:7\n+   |\n+LL |       0.02f64 => {}\n+   |       ^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/floats.rs:2:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0004`.", "previous_filename": "src/test/ui/pattern/usefulness/non-exhaustive-float-range-match.stderr"}, {"sha": "b74f162c0c62225cb8dcb9c0fe0bea3148d9f3f6", "filename": "src/test/ui/pattern/usefulness/guards-not-exhaustive.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards-not-exhaustive.rs?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,18 +0,0 @@\n-// run-pass\n-\n-#![allow(non_snake_case)]\n-\n-#[derive(Copy, Clone)]\n-enum Q { R(Option<usize>) }\n-\n-fn xyzzy(q: Q) -> usize {\n-    match q {\n-        Q::R(S) if S.is_some() => { 0 }\n-        _ => 1\n-    }\n-}\n-\n-\n-pub fn main() {\n-    assert_eq!(xyzzy(Q::R(Some(5))), 0);\n-}"}, {"sha": "b15440cf608bd3fe9d35e88fb5fd2b80eb129770", "filename": "src/test/ui/pattern/usefulness/guards.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,22 @@\n+#![feature(exclusive_range_pattern)]\n+#![deny(unreachable_patterns)]\n+\n+enum Q { R(Option<usize>) }\n+\n+pub fn main() {\n+    match Q::R(None) {\n+        Q::R(S) if S.is_some() => {}\n+        _ => {}\n+    }\n+\n+    match 0u8 { //~ ERROR non-exhaustive patterns\n+        0 .. 128 => {}\n+        128 ..= 255 if true => {}\n+    }\n+\n+    match 0u8 {\n+        0 .. 128 => {}\n+        128 ..= 255 if false => {}\n+        128 ..= 255 => {} // ok, because previous arm was guarded\n+    }\n+}"}, {"sha": "61f7facb330da959681c000eb5bd0f0600ad0352", "filename": "src/test/ui/pattern/usefulness/guards.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fguards.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,12 @@\n+error[E0004]: non-exhaustive patterns: `128_u8..=u8::MAX` not covered\n+  --> $DIR/guards.rs:12:11\n+   |\n+LL |     match 0u8 {\n+   |           ^^^ pattern `128_u8..=u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "5a44dfc28bb45200787cb5cf0d85f3f4e072297f", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,101 @@\n+#![feature(exclusive_range_pattern)]\n+#![feature(assoc_char_consts)]\n+#![deny(unreachable_patterns)]\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+macro_rules! test_int {\n+    ($s:expr, $min:path, $max:path) => {\n+        m!($s, $min..=$max);\n+        m!($s, $min..5 | 5..=$max);\n+        m!($s, $min..=4 | 5..=$max);\n+        m!($s, $min..$max | $max);\n+        m!(($s, true), ($min..5, true) | (5..=$max, true) | ($min..=$max, false));\n+    }\n+}\n+\n+fn main() {\n+    test_int!(0u8, u8::MIN, u8::MAX);\n+    test_int!(0u16, u16::MIN, u16::MAX);\n+    test_int!(0u32, u32::MIN, u32::MAX);\n+    test_int!(0u64, u64::MIN, u64::MAX);\n+    test_int!(0u128, u128::MIN, u128::MAX);\n+\n+    test_int!(0i8, i8::MIN, i8::MAX);\n+    test_int!(0i16, i16::MIN, i16::MAX);\n+    test_int!(0i32, i32::MIN, i32::MAX);\n+    test_int!(0i64, i64::MIN, i64::MAX);\n+    test_int!(0i128, i128::MIN, i128::MAX);\n+\n+    m!('a', '\\u{0}'..=char::MAX);\n+    m!('a', '\\u{0}'..='\\u{10_FFFF}');\n+    // We can get away with just covering the following two ranges, which correspond to all valid\n+    // Unicode Scalar Values.\n+    m!('a', '\\u{0}'..='\\u{D7FF}' | '\\u{E000}'..=char::MAX);\n+    m!('a', '\\u{0}'..'\\u{D7FF}' | '\\u{D7FF}' | '\\u{E000}'..=char::MAX);\n+\n+    let 0..=255 = 0u8;\n+    let -128..=127 = 0i8;\n+    let -2147483648..=2147483647 = 0i32;\n+    let '\\u{0000}'..='\\u{10FFFF}' = 'v';\n+\n+    // Almost exhaustive\n+    m!(0u8, 0..255); //~ ERROR non-exhaustive patterns\n+    m!(0u8, 0..=254); //~ ERROR non-exhaustive patterns\n+    m!(0u8, 1..=255); //~ ERROR non-exhaustive patterns\n+    m!(0u8, 0..42 | 43..=255); //~ ERROR non-exhaustive patterns\n+    m!(0i8, -128..127); //~ ERROR non-exhaustive patterns\n+    m!(0i8, -128..=126); //~ ERROR non-exhaustive patterns\n+    m!(0i8, -127..=127); //~ ERROR non-exhaustive patterns\n+    match 0i8 { //~ ERROR non-exhaustive patterns\n+        i8::MIN ..= -1 => {}\n+        1 ..= i8::MAX => {}\n+    }\n+    const ALMOST_MAX: u128 = u128::MAX - 1;\n+    m!(0u128, 0..=ALMOST_MAX); //~ ERROR non-exhaustive patterns\n+    m!(0u128, 0..=4); //~ ERROR non-exhaustive patterns\n+    m!(0u128, 1..=u128::MAX); //~ ERROR non-exhaustive patterns\n+\n+    // More complicatedly (non-)exhaustive\n+    match 0u8 {\n+        0 ..= 30 => {}\n+        20 ..= 70 => {}\n+        50 ..= 255 => {}\n+    }\n+    match (0u8, true) { //~ ERROR non-exhaustive patterns\n+        (0 ..= 125, false) => {}\n+        (128 ..= 255, false) => {}\n+        (0 ..= 255, true) => {}\n+    }\n+    match (0u8, true) { // ok\n+        (0 ..= 125, false) => {}\n+        (128 ..= 255, false) => {}\n+        (0 ..= 255, true) => {}\n+        (125 .. 128, false) => {}\n+    }\n+    match (true, 0u8) {\n+        (true, 0 ..= 255) => {}\n+        (false, 0 ..= 125) => {}\n+        (false, 128 ..= 255) => {}\n+        (false, 125 .. 128) => {}\n+    }\n+    match Some(0u8) {\n+        None => {}\n+        Some(0 ..= 125) => {}\n+        Some(128 ..= 255) => {}\n+        Some(125 .. 128) => {}\n+    }\n+    const FOO: u8 = 41;\n+    const BAR: &u8 = &42;\n+    match &0u8 {\n+        0..41 => {}\n+        &FOO => {}\n+        BAR => {}\n+        43..=255 => {}\n+    }\n+\n+}"}, {"sha": "2e0023348e4d837f526c7c81018f7d484b3335a5", "filename": "src/test/ui/pattern/usefulness/integer-ranges/exhaustiveness.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fexhaustiveness.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,111 @@\n+error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:47:8\n+   |\n+LL |     m!(0u8, 0..255);\n+   |        ^^^ pattern `u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n+\n+error[E0004]: non-exhaustive patterns: `u8::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:48:8\n+   |\n+LL |     m!(0u8, 0..=254);\n+   |        ^^^ pattern `u8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n+\n+error[E0004]: non-exhaustive patterns: `0_u8` not covered\n+  --> $DIR/exhaustiveness.rs:49:8\n+   |\n+LL |     m!(0u8, 1..=255);\n+   |        ^^^ pattern `0_u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n+\n+error[E0004]: non-exhaustive patterns: `42_u8` not covered\n+  --> $DIR/exhaustiveness.rs:50:8\n+   |\n+LL |     m!(0u8, 0..42 | 43..=255);\n+   |        ^^^ pattern `42_u8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u8`\n+\n+error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:51:8\n+   |\n+LL |     m!(0i8, -128..127);\n+   |        ^^^ pattern `i8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n+\n+error[E0004]: non-exhaustive patterns: `i8::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:52:8\n+   |\n+LL |     m!(0i8, -128..=126);\n+   |        ^^^ pattern `i8::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n+\n+error[E0004]: non-exhaustive patterns: `i8::MIN` not covered\n+  --> $DIR/exhaustiveness.rs:53:8\n+   |\n+LL |     m!(0i8, -127..=127);\n+   |        ^^^ pattern `i8::MIN` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n+\n+error[E0004]: non-exhaustive patterns: `0_i8` not covered\n+  --> $DIR/exhaustiveness.rs:54:11\n+   |\n+LL |     match 0i8 {\n+   |           ^^^ pattern `0_i8` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `i8`\n+\n+error[E0004]: non-exhaustive patterns: `u128::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:59:8\n+   |\n+LL |     m!(0u128, 0..=ALMOST_MAX);\n+   |        ^^^^^ pattern `u128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n+\n+error[E0004]: non-exhaustive patterns: `5_u128..=u128::MAX` not covered\n+  --> $DIR/exhaustiveness.rs:60:8\n+   |\n+LL |     m!(0u128, 0..=4);\n+   |        ^^^^^ pattern `5_u128..=u128::MAX` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n+\n+error[E0004]: non-exhaustive patterns: `0_u128` not covered\n+  --> $DIR/exhaustiveness.rs:61:8\n+   |\n+LL |     m!(0u128, 1..=u128::MAX);\n+   |        ^^^^^ pattern `0_u128` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `u128`\n+\n+error[E0004]: non-exhaustive patterns: `(126_u8..=127_u8, false)` not covered\n+  --> $DIR/exhaustiveness.rs:69:11\n+   |\n+LL |     match (0u8, true) {\n+   |           ^^^^^^^^^^^ pattern `(126_u8..=127_u8, false)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(u8, bool)`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "af720a056932208ed385db8f8ae84b40c31264ac", "filename": "src/test/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,53 @@\n+#![feature(exclusive_range_pattern)]\n+#![deny(overlapping_patterns)]\n+\n+macro_rules! m {\n+    ($s:expr, $t1:pat, $t2:pat) => {\n+        match $s {\n+            $t1 => {}\n+            $t2 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn main() {\n+    m!(0u8, 20..=30, 30..=40); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 30..=40, 20..=30); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 31..=40);\n+    m!(0u8, 20..=30, 29..=40);\n+    m!(0u8, 20.. 30, 29..=40); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20.. 30, 28..=40);\n+    m!(0u8, 20.. 30, 30..=40);\n+    m!(0u8, 20..=30, 30..=30);\n+    m!(0u8, 20..=30, 30..=31); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 29..=30);\n+    m!(0u8, 20..=30, 20..=20);\n+    m!(0u8, 20..=30, 20..=21);\n+    m!(0u8, 20..=30, 19..=20); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 20..=30, 20);\n+    m!(0u8, 20..=30, 25);\n+    m!(0u8, 20..=30, 30);\n+    m!(0u8, 20.. 30, 29);\n+    m!(0u8, 20, 20..=30); //~ ERROR multiple patterns covering the same range\n+    m!(0u8, 25, 20..=30);\n+    m!(0u8, 30, 20..=30); //~ ERROR multiple patterns covering the same range\n+\n+    match (0u8, true) {\n+        (0..=10, true) => {}\n+        (10..20, true) => {} // not detected\n+        (10..20, false) => {}\n+        _ => {}\n+    }\n+    match (true, 0u8) {\n+        (true, 0..=10) => {}\n+        (true, 10..20) => {} //~ ERROR multiple patterns covering the same range\n+        (false, 10..20) => {}\n+        _ => {}\n+    }\n+    match Some(0u8) {\n+        Some(0..=10) => {}\n+        Some(10..20) => {} //~ ERROR multiple patterns covering the same range\n+        _ => {}\n+    }\n+}"}, {"sha": "7bb747cdf6fc12409763e9faa53cc7819bb85530", "filename": "src/test/ui/pattern/usefulness/integer-ranges/overlapping_range_endpoints.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Foverlapping_range_endpoints.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,80 @@\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:15:22\n+   |\n+LL |     m!(0u8, 20..=30, 30..=40);\n+   |             -------  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `30_u8`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/overlapping_range_endpoints.rs:2:9\n+   |\n+LL | #![deny(overlapping_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:16:22\n+   |\n+LL |     m!(0u8, 30..=40, 20..=30);\n+   |             -------  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `30_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:19:22\n+   |\n+LL |     m!(0u8, 20.. 30, 29..=40);\n+   |             -------  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `29_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:23:22\n+   |\n+LL |     m!(0u8, 20..=30, 30..=31);\n+   |             -------  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `30_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:27:22\n+   |\n+LL |     m!(0u8, 20..=30, 19..=20);\n+   |             -------  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `20_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:32:17\n+   |\n+LL |     m!(0u8, 20, 20..=30);\n+   |             --  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `20_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:34:17\n+   |\n+LL |     m!(0u8, 30, 20..=30);\n+   |             --  ^^^^^^^ overlapping patterns\n+   |             |\n+   |             this range overlaps on `30_u8`\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:44:16\n+   |\n+LL |         (true, 0..=10) => {}\n+   |                ------ this range overlaps on `10_u8`\n+LL |         (true, 10..20) => {}\n+   |                ^^^^^^ overlapping patterns\n+\n+error: multiple patterns covering the same range\n+  --> $DIR/overlapping_range_endpoints.rs:50:14\n+   |\n+LL |         Some(0..=10) => {}\n+   |              ------ this range overlaps on `10_u8`\n+LL |         Some(10..20) => {}\n+   |              ^^^^^^ overlapping patterns\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "6173053cc4f3cd730f9b0c5cd77719fd6dd1de3d", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-allow.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,38 @@\n+#![feature(precise_pointer_size_matching)]\n+#![feature(exclusive_range_pattern)]\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+fn main() {\n+    match 0usize {\n+        0 ..= usize::MAX => {}\n+    }\n+\n+    match 0isize {\n+        isize::MIN ..= isize::MAX => {}\n+    }\n+\n+    m!(0usize, 0..=usize::MAX);\n+    m!(0usize, 0..5 | 5..=usize::MAX);\n+    m!(0usize, 0..usize::MAX | usize::MAX);\n+    m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n+\n+    m!(0isize, isize::MIN..=isize::MAX);\n+    m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n+    m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n+    m!((0isize, true), (isize::MIN..5, true)\n+        | (5..=isize::MAX, true) | (isize::MIN..=isize::MAX, false));\n+\n+    match 0isize {\n+        isize::MIN ..= -1 => {}\n+        0 => {}\n+        1 ..= isize::MAX => {}\n+    }\n+\n+    match 7usize {}\n+    //~^ ERROR non-exhaustive patterns\n+}"}, {"sha": "0b3c65166ee18ca206c09a38f049869735cf18b0", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-allow.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-allow.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,12 @@\n+error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n+  --> $DIR/pointer-sized-int-allow.rs:36:11\n+   |\n+LL |     match 7usize {}\n+   |           ^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "9292f22e09e05fe01d01b4b94c67b5eb288d4543", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-deny.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,48 @@\n+#![feature(exclusive_range_pattern)]\n+\n+macro_rules! m {\n+    ($s:expr, $($t:tt)+) => {\n+        match $s { $($t)+ => {} }\n+    }\n+}\n+\n+fn main() {\n+    match 0usize {\n+        //~^ ERROR non-exhaustive patterns\n+        0 ..= usize::MAX => {}\n+    }\n+\n+    match 0isize {\n+        //~^ ERROR non-exhaustive patterns\n+        isize::MIN ..= isize::MAX => {}\n+    }\n+\n+    m!(0usize, 0..=usize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!(0usize, 0..5 | 5..=usize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!(0usize, 0..usize::MAX | usize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n+    //~^ ERROR non-exhaustive patterns\n+\n+    m!(0isize, isize::MIN..=isize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n+    //~^ ERROR non-exhaustive patterns\n+    m!((0isize, true), (isize::MIN..5, true)\n+        | (5..=isize::MAX, true) | (isize::MIN..=isize::MAX, false));\n+    //~^^ ERROR non-exhaustive patterns\n+\n+    match 0isize {\n+        //~^ ERROR non-exhaustive patterns\n+        isize::MIN ..= -1 => {}\n+        0 => {}\n+        1 ..= isize::MAX => {}\n+    }\n+\n+    match 7usize {}\n+    //~^ ERROR non-exhaustive patterns\n+}"}, {"sha": "9d566b0e7751f3549d1a9854b2a0225bfba40dcb", "filename": "src/test/ui/pattern/usefulness/integer-ranges/pointer-sized-int-deny.stderr", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fpointer-sized-int-deny.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,129 @@\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:10:11\n+   |\n+LL |     match 0usize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:15:11\n+   |\n+LL |     match 0isize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:20:8\n+   |\n+LL |     m!(0usize, 0..=usize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:22:8\n+   |\n+LL |     m!(0usize, 0..5 | 5..=usize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:24:8\n+   |\n+LL |     m!(0usize, 0..usize::MAX | usize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n+\n+error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:26:8\n+   |\n+LL |     m!((0usize, true), (0..5, true) | (5..=usize::MAX, true) | (0..=usize::MAX, false));\n+   |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(usize, bool)`\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:29:8\n+   |\n+LL |     m!(0isize, isize::MIN..=isize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:31:8\n+   |\n+LL |     m!(0isize, isize::MIN..5 | 5..=isize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:33:8\n+   |\n+LL |     m!(0isize, isize::MIN..isize::MAX | isize::MAX);\n+   |        ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: `(_, _)` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:35:8\n+   |\n+LL |     m!((0isize, true), (isize::MIN..5, true)\n+   |        ^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `(isize, bool)`\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/pointer-sized-int-deny.rs:39:11\n+   |\n+LL |     match 0isize {\n+   |           ^^^^^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `isize`\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n+\n+error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n+  --> $DIR/pointer-sized-int-deny.rs:46:11\n+   |\n+LL |     match 7usize {}\n+   |           ^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "a2aa655ca5413f1e1bb8bf81293f99045e0cea46", "filename": "src/test/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.rs", "status": "renamed", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,23 +1,18 @@\n-use std::{usize, isize};\n-\n+// This tests that the lint message explains the reason for the error.\n fn main() {\n     match 0usize {\n-        //~^ ERROR non-exhaustive patterns\n+        //~^ ERROR non-exhaustive patterns: `_` not covered\n         //~| NOTE pattern `_` not covered\n         //~| NOTE the matched value is of type `usize`\n         //~| NOTE `usize` does not have a fixed maximum value\n-        0 ..= usize::MAX => {}\n+        0..=usize::MAX => {}\n     }\n \n     match 0isize {\n-        //~^ ERROR non-exhaustive patterns\n+        //~^ ERROR non-exhaustive patterns: `_` not covered\n         //~| NOTE pattern `_` not covered\n         //~| NOTE the matched value is of type `isize`\n         //~| NOTE `isize` does not have a fixed maximum value\n-        isize::MIN ..= isize::MAX => {}\n+        isize::MIN..=isize::MAX => {}\n     }\n-\n-    match 7usize {}\n-    //~^ ERROR non-exhaustive patterns\n-    //~| NOTE the matched value is of type `usize`\n }", "previous_filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.rs"}, {"sha": "37e73a68f22bb005a707afcba4f4dae662687abd", "filename": "src/test/ui/pattern/usefulness/integer-ranges/precise_pointer_matching-message.stderr", "status": "renamed", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Fprecise_pointer_matching-message.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -1,5 +1,5 @@\n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:4:11\n+  --> $DIR/precise_pointer_matching-message.rs:3:11\n    |\n LL |     match 0usize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -10,7 +10,7 @@ LL |     match 0usize {\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:12:11\n+  --> $DIR/precise_pointer_matching-message.rs:11:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n@@ -20,15 +20,6 @@ LL |     match 0isize {\n    = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n    = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n-error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n-  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:20:11\n-   |\n-LL |     match 7usize {}\n-   |           ^^^^^^\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `usize`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0004`.", "previous_filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.stderr"}, {"sha": "9078e65f66781dc39db8ef1f1a6d2039ee191911", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,112 @@\n+#![feature(exclusive_range_pattern)]\n+#![deny(unreachable_patterns)]\n+\n+macro_rules! m {\n+    ($s:expr, $t1:pat, $t2:pat) => {\n+        match $s {\n+            $t1 => {}\n+            $t2 => {}\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn main() {\n+    m!(0u8, 42, 41);\n+    m!(0u8, 42, 42); //~ ERROR unreachable pattern\n+    m!(0u8, 42, 43);\n+\n+    m!(0u8, 20..=30, 19);\n+    m!(0u8, 20..=30, 20); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 21); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 25); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 29); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 30); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 31);\n+    m!(0u8, 20..30, 19);\n+    m!(0u8, 20..30, 20); //~ ERROR unreachable pattern\n+    m!(0u8, 20..30, 21); //~ ERROR unreachable pattern\n+    m!(0u8, 20..30, 25); //~ ERROR unreachable pattern\n+    m!(0u8, 20..30, 29); //~ ERROR unreachable pattern\n+    m!(0u8, 20..30, 30);\n+    m!(0u8, 20..30, 31);\n+\n+    m!(0u8, 20..=30, 20..=30); //~ ERROR unreachable pattern\n+    m!(0u8, 20.. 30, 20.. 30); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 20.. 30); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 19..=30);\n+    m!(0u8, 20..=30, 21..=30); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 20..=29); //~ ERROR unreachable pattern\n+    m!(0u8, 20..=30, 20..=31);\n+    m!('a', 'A'..='z', 'a'..='z'); //~ ERROR unreachable pattern\n+\n+    match 0u8 {\n+        5 => {},\n+        6 => {},\n+        7 => {},\n+        8 => {},\n+        5..=8 => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+    match 0u8 {\n+        0..10 => {},\n+        10..20 => {},\n+        5..15 => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+    match 0u8 {\n+        0..10 => {},\n+        10..20 => {},\n+        20..30 => {},\n+        5..25 => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+    match 0u8 {\n+        0..10 => {},\n+        10 => {},\n+        11..=23 => {},\n+        19..30 => {},\n+        5..25 => {}, //~ ERROR unreachable pattern\n+        _ => {},\n+    }\n+    match 0usize {\n+        0..10 => {},\n+        10..20 => {},\n+        5..15 => {}, // FIXME: should be unreachable\n+        _ => {},\n+    }\n+    // Chars between '\\u{D7FF}' and '\\u{E000}' are invalid even though ranges that contain them are\n+    // allowed.\n+    match 'a' {\n+        _ => {},\n+        '\\u{D7FF}'..='\\u{E000}' => {}, //~ ERROR unreachable pattern\n+    }\n+    match 'a' {\n+        '\\u{0}'..='\\u{D7FF}' => {},\n+        '\\u{E000}'..='\\u{10_FFFF}' => {},\n+        '\\u{D7FF}'..='\\u{E000}' => {}, // FIXME should be unreachable\n+    }\n+\n+    match (0u8, true) {\n+        (0..=255, false) => {}\n+        (0..=255, true) => {} // ok\n+    }\n+    match (true, 0u8) {\n+        (false, 0..=255) => {}\n+        (true, 0..=255) => {} // ok\n+    }\n+\n+    const FOO: i32 = 42;\n+    const BAR: &i32 = &42;\n+    match &0 {\n+        &42 => {}\n+        &FOO => {} //~ ERROR unreachable pattern\n+        BAR => {} //~ ERROR unreachable pattern\n+        _ => {}\n+    }\n+    // Regression test, see https://github.com/rust-lang/rust/pull/66326#issuecomment-552889933\n+    match &0 {\n+        BAR => {} // ok\n+        _ => {}\n+    }\n+}"}, {"sha": "8baf0d50c889b4c74c40b0a10354ce99e221c40c", "filename": "src/test/ui/pattern/usefulness/integer-ranges/reachability.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Finteger-ranges%2Freachability.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "patch": "@@ -0,0 +1,146 @@\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:16:17\n+   |\n+LL |     m!(0u8, 42, 42);\n+   |                 ^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/reachability.rs:2:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:20:22\n+   |\n+LL |     m!(0u8, 20..=30, 20);\n+   |                      ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:21:22\n+   |\n+LL |     m!(0u8, 20..=30, 21);\n+   |                      ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:22:22\n+   |\n+LL |     m!(0u8, 20..=30, 25);\n+   |                      ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:23:22\n+   |\n+LL |     m!(0u8, 20..=30, 29);\n+   |                      ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:24:22\n+   |\n+LL |     m!(0u8, 20..=30, 30);\n+   |                      ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:27:21\n+   |\n+LL |     m!(0u8, 20..30, 20);\n+   |                     ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:28:21\n+   |\n+LL |     m!(0u8, 20..30, 21);\n+   |                     ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:29:21\n+   |\n+LL |     m!(0u8, 20..30, 25);\n+   |                     ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:30:21\n+   |\n+LL |     m!(0u8, 20..30, 29);\n+   |                     ^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:34:22\n+   |\n+LL |     m!(0u8, 20..=30, 20..=30);\n+   |                      ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:35:22\n+   |\n+LL |     m!(0u8, 20.. 30, 20.. 30);\n+   |                      ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:36:22\n+   |\n+LL |     m!(0u8, 20..=30, 20.. 30);\n+   |                      ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:38:22\n+   |\n+LL |     m!(0u8, 20..=30, 21..=30);\n+   |                      ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:39:22\n+   |\n+LL |     m!(0u8, 20..=30, 20..=29);\n+   |                      ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:41:24\n+   |\n+LL |     m!('a', 'A'..='z', 'a'..='z');\n+   |                        ^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:48:9\n+   |\n+LL |         5..=8 => {},\n+   |         ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:54:9\n+   |\n+LL |         5..15 => {},\n+   |         ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:61:9\n+   |\n+LL |         5..25 => {},\n+   |         ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:69:9\n+   |\n+LL |         5..25 => {},\n+   |         ^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:82:9\n+   |\n+LL |         '\\u{D7FF}'..='\\u{E000}' => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:103:9\n+   |\n+LL |         &FOO => {}\n+   |         ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/reachability.rs:104:9\n+   |\n+LL |         BAR => {}\n+   |         ^^^\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "d400ef0bbd64ca834336ee85950ad5fa56d67736", "filename": "src/test/ui/pattern/usefulness/irrefutable-let-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-let-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-let-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Firrefutable-let-patterns.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/irrefutable-let-patterns.rs"}, {"sha": "8b391cd95d7f78c1fb4d348a6d71a119e6ae7b14", "filename": "src/test/ui/pattern/usefulness/issue-12116.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-12116.rs"}, {"sha": "4d162eb77e725879e71ea638d717474ee730f0c3", "filename": "src/test/ui/pattern/usefulness/issue-12116.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12116.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-12116.stderr"}, {"sha": "0481c1fd9e1bbdb4e5d67e96396ce3087b6c9e6e", "filename": "src/test/ui/pattern/usefulness/issue-12369.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-12369.rs"}, {"sha": "aab2be78c9a4c6cbb0f9c7deb6d4e3fa1b26f855", "filename": "src/test/ui/pattern/usefulness/issue-12369.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-12369.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-12369.stderr"}, {"sha": "7fb565ef3bf331f207afe0dfd833c5d7e6cd570b", "filename": "src/test/ui/pattern/usefulness/issue-13727.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-13727.rs"}, {"sha": "07ca56a566ff12a4b0ad7409529aae8300415c83", "filename": "src/test/ui/pattern/usefulness/issue-13727.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-13727.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-13727.stderr"}, {"sha": "ed134c175eddbe722df82d90934b41a78e858fb1", "filename": "src/test/ui/pattern/usefulness/issue-15129.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-15129.rs"}, {"sha": "aa4434e72b5c7d0328c9b2e9e41b7faf85156785", "filename": "src/test/ui/pattern/usefulness/issue-15129.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-15129.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-15129.stderr"}, {"sha": "7e5835e8697a331553fbd0948e45d434c91b0599", "filename": "src/test/ui/pattern/usefulness/issue-2111.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-2111.rs"}, {"sha": "a39a479e078d928d5f95131ebded1aba3961227a", "filename": "src/test/ui/pattern/usefulness/issue-2111.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-2111.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-2111.stderr"}, {"sha": "01a6e7d8cb9a8f39d7f8ae65d527c98f6a2970a3", "filename": "src/test/ui/pattern/usefulness/issue-30240-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-30240-b.rs"}, {"sha": "59d64bc256b507f4e027dc12abe9bd137d6aabc3", "filename": "src/test/ui/pattern/usefulness/issue-30240-b.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-b.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-30240-b.stderr"}, {"sha": "ab16614fd3084678ecd8c71ab8bc8cab8f0f86ec", "filename": "src/test/ui/pattern/usefulness/issue-30240-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240-rpass.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-30240-rpass.rs"}, {"sha": "a0c0d1626ec45d3ddb19fa669834140ca43d7a8b", "filename": "src/test/ui/pattern/usefulness/issue-30240.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-30240.rs"}, {"sha": "a2c58d6e051b54214ddd332fa42edf8feca04d2e", "filename": "src/test/ui/pattern/usefulness/issue-30240.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-30240.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-30240.stderr"}, {"sha": "edc3b322305c8379e27ba2f9b3013572b03f8ba2", "filename": "src/test/ui/pattern/usefulness/issue-3096-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3096-1.rs"}, {"sha": "97c34755189de9115a62fcaad0267619ae3d06fb", "filename": "src/test/ui/pattern/usefulness/issue-3096-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-1.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3096-1.stderr"}, {"sha": "a26e425809fbb037910f1adad1a53de3ca766b37", "filename": "src/test/ui/pattern/usefulness/issue-3096-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3096-2.rs"}, {"sha": "472d1a91e6a15835c94e5b936c43119ed0543c84", "filename": "src/test/ui/pattern/usefulness/issue-3096-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3096-2.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3096-2.stderr"}, {"sha": "e03f1ec5bc2099f4bb95ae495974e5f57f0a65fd", "filename": "src/test/ui/pattern/usefulness/issue-31221.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-31221.rs"}, {"sha": "7d349144456374732b7918f3c02b56d3de10cb0f", "filename": "src/test/ui/pattern/usefulness/issue-31221.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31221.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-31221.stderr"}, {"sha": "813b2409cc8e1748307a1596c84c88e49fce52e5", "filename": "src/test/ui/pattern/usefulness/issue-31561.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-31561.rs"}, {"sha": "2f562b23692deffc3128c6a612eb893d436977b5", "filename": "src/test/ui/pattern/usefulness/issue-31561.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-31561.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-31561.stderr"}, {"sha": "e33359beccdefb5d437d6e8894b9696968676163", "filename": "src/test/ui/pattern/usefulness/issue-3601.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3601.rs"}, {"sha": "c873c20cca81bd2f8d70d1a6408a866a07c43603", "filename": "src/test/ui/pattern/usefulness/issue-3601.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-3601.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-3601.stderr"}, {"sha": "ea3c8f88e0b36cf2629da444f7c1af7f4eb07724", "filename": "src/test/ui/pattern/usefulness/issue-39362.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-39362.rs"}, {"sha": "8c162e55619e005b5e6aac41e9970f510d64c9ba", "filename": "src/test/ui/pattern/usefulness/issue-39362.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-39362.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-39362.stderr"}, {"sha": "e1f7e975b80e4288f4a370af12105119296d5e5b", "filename": "src/test/ui/pattern/usefulness/issue-40221.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/missing/missing-items/issue-40221.rs"}, {"sha": "98efe805a0b3491fde73c71445fa608e9119296a", "filename": "src/test/ui/pattern/usefulness/issue-40221.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-40221.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/missing/missing-items/issue-40221.stderr"}, {"sha": "9715f2eba2fc8873ca513f1acae61fcd2e435c1d", "filename": "src/test/ui/pattern/usefulness/issue-4321.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-4321.rs"}, {"sha": "1e8852556b161690c46dfb8ba5fdff3346c278d4", "filename": "src/test/ui/pattern/usefulness/issue-4321.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-4321.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-4321.stderr"}, {"sha": "349ba11a7cdffd096166f47a9f1be5080c2b8fbb", "filename": "src/test/ui/pattern/usefulness/issue-43253.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.rs?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,47 +0,0 @@\n-// check-pass\n-#![feature(exclusive_range_pattern)]\n-#![warn(unreachable_patterns)]\n-#![warn(overlapping_patterns)]\n-\n-fn main() {\n-    // These cases should generate no warning.\n-    match 10 {\n-        1..10 => {},\n-        10 => {},\n-        _ => {},\n-    }\n-\n-    match 10 {\n-        1..10 => {},\n-        9..=10 => {}, //~ WARNING multiple patterns covering the same range\n-        _ => {},\n-    }\n-\n-    match 10 {\n-        1..10 => {},\n-        10..=10 => {},\n-        _ => {},\n-    }\n-\n-    // These cases should generate \"unreachable pattern\" warnings.\n-    match 10 {\n-        1..10 => {},\n-        9 => {}, //~ WARNING unreachable pattern\n-        _ => {},\n-    }\n-\n-    match 10 {\n-        1..10 => {},\n-        8..=9 => {}, //~ WARNING unreachable pattern\n-        _ => {},\n-    }\n-\n-    match 10 {\n-        5..7 => {},\n-        6 => {}, //~ WARNING unreachable pattern\n-        1..10 => {},\n-        9..=9 => {}, //~ WARNING unreachable pattern\n-        6 => {}, //~ WARNING unreachable pattern\n-        _ => {},\n-    }\n-}"}, {"sha": "04feef1706cf433dff5f486f86d5da353d7a932c", "filename": "src/test/ui/pattern/usefulness/issue-43253.stderr", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-43253.stderr?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,52 +0,0 @@\n-warning: multiple patterns covering the same range\n-  --> $DIR/issue-43253.rs:16:9\n-   |\n-LL |         1..10 => {},\n-   |         ----- this range overlaps on `9_i32`\n-LL |         9..=10 => {},\n-   |         ^^^^^^ overlapping patterns\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-43253.rs:4:9\n-   |\n-LL | #![warn(overlapping_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:29:9\n-   |\n-LL |         9 => {},\n-   |         ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/issue-43253.rs:3:9\n-   |\n-LL | #![warn(unreachable_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:35:9\n-   |\n-LL |         8..=9 => {},\n-   |         ^^^^^\n-\n-warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:41:9\n-   |\n-LL |         6 => {},\n-   |         ^\n-\n-warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:43:9\n-   |\n-LL |         9..=9 => {},\n-   |         ^^^^^\n-\n-warning: unreachable pattern\n-  --> $DIR/issue-43253.rs:44:9\n-   |\n-LL |         6 => {},\n-   |         ^\n-\n-warning: 6 warnings emitted\n-"}, {"sha": "27135af9575819f2eec093641c58a7f7bd5cc8e3", "filename": "src/test/ui/pattern/usefulness/issue-50900.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/match/issue-50900.rs"}, {"sha": "d378b6e8efe370a84ac92491ae3ceb4853ad9b55", "filename": "src/test/ui/pattern/usefulness/issue-50900.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-50900.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/match/issue-50900.stderr"}, {"sha": "1131006374c64eb70672e54783d1351ef6ef8401", "filename": "src/test/ui/pattern/usefulness/issue-57472.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-57472.rs"}, {"sha": "26efdf6dbaf348ba3f21d761fdb1fe79b9ccbeac", "filename": "src/test/ui/pattern/usefulness/issue-57472.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-57472.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/issues/issue-57472.stderr"}, {"sha": "ffcfd4ad83e1f8e36fb49a89ce9892261c623561", "filename": "src/test/ui/pattern/usefulness/issue-66501.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-66501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-66501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-66501.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/pattern/issue-66501.rs"}, {"sha": "37c4ccda0f5e34ebfd4790c314cd56bf947fcab5", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.rs?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,49 +0,0 @@\n-#![deny(unreachable_patterns, overlapping_patterns)]\n-\n-fn main() {\n-    match 5 {\n-      1 ..= 10 => { }\n-      5 ..= 6 => { }\n-      //~^ ERROR unreachable pattern\n-      _ => {}\n-    };\n-\n-    match 5 {\n-      3 ..= 6 => { }\n-      4 ..= 6 => { }\n-      //~^ ERROR unreachable pattern\n-      _ => {}\n-    };\n-\n-    match 5 {\n-      4 ..= 6 => { }\n-      4 ..= 6 => { }\n-      //~^ ERROR unreachable pattern\n-      _ => {}\n-    };\n-\n-    match 'c' {\n-      'A' ..= 'z' => {}\n-      'a' ..= 'z' => {}\n-      //~^ ERROR unreachable pattern\n-      _ => {}\n-    };\n-\n-    match 1.0f64 {\n-      0.01f64 ..= 6.5f64 => {}\n-      //~^ WARNING floating-point types cannot be used in patterns\n-      //~| WARNING floating-point types cannot be used in patterns\n-      //~| WARNING floating-point types cannot be used in patterns\n-      //~| WARNING floating-point types cannot be used in patterns\n-      //~| WARNING this was previously accepted by the compiler\n-      //~| WARNING this was previously accepted by the compiler\n-      //~| WARNING this was previously accepted by the compiler\n-      //~| WARNING this was previously accepted by the compiler\n-      0.02f64 => {} //~ ERROR unreachable pattern\n-      //~^ WARNING floating-point types cannot be used in patterns\n-      //~| WARNING floating-point types cannot be used in patterns\n-      //~| WARNING this was previously accepted by the compiler\n-      //~| WARNING this was previously accepted by the compiler\n-      _ => {}\n-    };\n-}"}, {"sha": "6922170fccbc8f748cf44185fb2f27eba53468d4", "filename": "src/test/ui/pattern/usefulness/match-range-fail-dominate.stderr", "status": "removed", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fmatch-range-fail-dominate.stderr?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,93 +0,0 @@\n-error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:6:7\n-   |\n-LL |       5 ..= 6 => { }\n-   |       ^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/match-range-fail-dominate.rs:1:9\n-   |\n-LL | #![deny(unreachable_patterns, overlapping_patterns)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-\n-error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:13:7\n-   |\n-LL |       4 ..= 6 => { }\n-   |       ^^^^^^^\n-\n-error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:20:7\n-   |\n-LL |       4 ..= 6 => { }\n-   |       ^^^^^^^\n-\n-error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:27:7\n-   |\n-LL |       'a' ..= 'z' => {}\n-   |       ^^^^^^^^^^^\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:33:7\n-   |\n-LL |       0.01f64 ..= 6.5f64 => {}\n-   |       ^^^^^^^\n-   |\n-   = note: `#[warn(illegal_floating_point_literal_pattern)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:33:19\n-   |\n-LL |       0.01f64 ..= 6.5f64 => {}\n-   |                   ^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:42:7\n-   |\n-LL |       0.02f64 => {}\n-   |       ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-error: unreachable pattern\n-  --> $DIR/match-range-fail-dominate.rs:42:7\n-   |\n-LL |       0.02f64 => {}\n-   |       ^^^^^^^\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:33:7\n-   |\n-LL |       0.01f64 ..= 6.5f64 => {}\n-   |       ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:33:19\n-   |\n-LL |       0.01f64 ..= 6.5f64 => {}\n-   |                   ^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-range-fail-dominate.rs:42:7\n-   |\n-LL |       0.02f64 => {}\n-   |       ^^^^^^^\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n-\n-error: aborting due to 5 previous errors; 6 warnings emitted\n-"}, {"sha": "cb44c1da76ba5e22f58ddace30ac630c624deae8", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.rs?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/match/type_polymorphic_byte_str_literals.rs"}, {"sha": "6ce53a4f21ea21ed1402d490fdb54b34fef3ab8a", "filename": "src/test/ui/pattern/usefulness/type_polymorphic_byte_str_literals.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c643dd2ec8fed2852f5eee8f776d657293a6a8f2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftype_polymorphic_byte_str_literals.stderr?ref=c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "previous_filename": "src/test/ui/match/type_polymorphic_byte_str_literals.stderr"}, {"sha": "54aeb8616d959f4bb02f601e13627cab2e808304", "filename": "src/test/ui/precise_pointer_size_matching.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.rs?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,33 +0,0 @@\n-// normalize-stderr-32bit: \"-2147483648isize\" -> \"$$ISIZE_MIN\"\n-// normalize-stderr-64bit: \"-9223372036854775808isize\" -> \"$$ISIZE_MIN\"\n-// normalize-stderr-32bit: \"2147483647isize\" -> \"$$ISIZE_MAX\"\n-// normalize-stderr-64bit: \"9223372036854775807isize\" -> \"$$ISIZE_MAX\"\n-// normalize-stderr-32bit: \"4294967295usize\" -> \"$$USIZE_MAX\"\n-// normalize-stderr-64bit: \"18446744073709551615usize\" -> \"$$USIZE_MAX\"\n-\n-#![feature(precise_pointer_size_matching)]\n-#![feature(exclusive_range_pattern)]\n-\n-#![deny(unreachable_patterns, overlapping_patterns)]\n-\n-use std::{usize, isize};\n-\n-fn main() {\n-    match 0isize {\n-        isize::MIN ..= isize::MAX => {} // ok\n-    }\n-\n-    match 0usize {\n-        0 ..= usize::MAX => {} // ok\n-    }\n-\n-    match 0isize { //~ ERROR non-exhaustive patterns\n-        1 ..= 8 => {}\n-        -5 ..= 20 => {}\n-    }\n-\n-    match 0usize { //~ ERROR non-exhaustive patterns\n-        1 ..= 8 => {}\n-        5 ..= 20 => {}\n-    }\n-}"}, {"sha": "9a34171a391c456d4a6399b41acb540358cb1b6e", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52e3cf13aa9716f6648b1cad286ccd8d37aa315f/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=52e3cf13aa9716f6648b1cad286ccd8d37aa315f", "patch": "@@ -1,21 +0,0 @@\n-error[E0004]: non-exhaustive patterns: `isize::MIN..=-6_isize` and `21_isize..=isize::MAX` not covered\n-  --> $DIR/precise_pointer_size_matching.rs:24:11\n-   |\n-LL |     match 0isize {\n-   |           ^^^^^^ patterns `isize::MIN..=-6_isize` and `21_isize..=isize::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `isize`\n-\n-error[E0004]: non-exhaustive patterns: `0_usize` and `21_usize..=usize::MAX` not covered\n-  --> $DIR/precise_pointer_size_matching.rs:29:11\n-   |\n-LL |     match 0usize {\n-   |           ^^^^^^ patterns `0_usize` and `21_usize..=usize::MAX` not covered\n-   |\n-   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n-   = note: the matched value is of type `usize`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0004`."}]}