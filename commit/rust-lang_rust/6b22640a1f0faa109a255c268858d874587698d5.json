{"sha": "6b22640a1f0faa109a255c268858d874587698d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjI2NDBhMWYwZmFhMTA5YTI1NWMyNjg4NThkODc0NTg3Njk4ZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-31T23:56:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-01T19:14:31Z"}, "message": "Convert std::test to istrs. Issue #855", "tree": {"sha": "98a06fd6b230f23131cdf14148b1a3ecb6d2ff43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98a06fd6b230f23131cdf14148b1a3ecb6d2ff43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b22640a1f0faa109a255c268858d874587698d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b22640a1f0faa109a255c268858d874587698d5", "html_url": "https://github.com/rust-lang/rust/commit/6b22640a1f0faa109a255c268858d874587698d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b22640a1f0faa109a255c268858d874587698d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775b64c955b9b61117c7bb8acf489e0311d8351b", "url": "https://api.github.com/repos/rust-lang/rust/commits/775b64c955b9b61117c7bb8acf489e0311d8351b", "html_url": "https://github.com/rust-lang/rust/commit/775b64c955b9b61117c7bb8acf489e0311d8351b"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "1f9a1f869f3850464f6aafb276f3fb9f4c1494a7", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b22640a1f0faa109a255c268858d874587698d5/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b22640a1f0faa109a255c268858d874587698d5/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=6b22640a1f0faa109a255c268858d874587698d5", "patch": "@@ -253,7 +253,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n              ast_util::path_name_i(path)];\n \n     let name_lit: ast::lit =\n-        nospan(ast::lit_str(ast_util::path_name_i(path), ast::sk_rc));\n+        nospan(ast::lit_str(ast_util::path_name_i(path), ast::sk_unique));\n     let name_expr: ast::expr =\n         {id: cx.next_node_id(),\n          node: ast::expr_lit(@name_lit),\n@@ -291,7 +291,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n \n fn mk_main(cx: &test_ctxt) -> @ast::item {\n \n-    let args_mt: ast::mt = {ty: @nospan(ast::ty_str), mut: ast::imm};\n+    let args_mt: ast::mt = {ty: @nospan(ast::ty_istr), mut: ast::imm};\n     let args_ty: ast::ty = nospan(ast::ty_vec(args_mt));\n \n     let args_arg: ast::arg ="}, {"sha": "10ee548f0eeafea92e5649b7cae31fa527192306", "filename": "src/lib/test.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b22640a1f0faa109a255c268858d874587698d5/src%2Flib%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b22640a1f0faa109a255c268858d874587698d5/src%2Flib%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ftest.rs?ref=6b22640a1f0faa109a255c268858d874587698d5", "patch": "@@ -35,7 +35,7 @@ native \"rust\" mod rustrt {\n // paths, i.e it should be a series of identifiers seperated by double\n // colons. This way if some test runner wants to arrange the tests\n // heirarchically it may.\n-type test_name = str;\n+type test_name = istr;\n \n // A function that runs a test. If the function returns successfully,\n // the test succeeds; if the function fails then the test fails. We\n@@ -49,7 +49,7 @@ type test_desc = {name: test_name, fn: test_fn, ignore: bool};\n \n // The default console test runner. It accepts the command line\n // arguments and a vector of test_descs (generated at compile time).\n-fn test_main(args: &[str], tests: &[test_desc]) {\n+fn test_main(args: &[istr], tests: &[test_desc]) {\n     check (vec::is_not_empty(args));\n     let opts =\n         alt parse_opts(args) {\n@@ -59,26 +59,26 @@ fn test_main(args: &[str], tests: &[test_desc]) {\n     if !run_tests_console(opts, tests) { fail \"Some tests failed\"; }\n }\n \n-type test_opts = {filter: option::t<str>, run_ignored: bool};\n+type test_opts = {filter: option::t<istr>, run_ignored: bool};\n \n-type opt_res = either::t<test_opts, str>;\n+type opt_res = either::t<test_opts, istr>;\n \n // Parses command line arguments into test options\n-fn parse_opts(args: &[str]) : vec::is_not_empty(args) -> opt_res {\n+fn parse_opts(args: &[istr]) : vec::is_not_empty(args) -> opt_res {\n \n-    let args_ = istr::from_estrs(vec::tail(args));\n+    let args_ = vec::tail(args);\n     let opts = [getopts::optflag(~\"ignored\")];\n     let match =\n         alt getopts::getopts(args_, opts) {\n           getopts::success(m) { m }\n           getopts::failure(f) {\n-            ret either::right(istr::to_estr(getopts::fail_str(f)))\n+            ret either::right(getopts::fail_str(f))\n           }\n         };\n \n     let filter =\n         if vec::len(match.free) > 0u {\n-            option::some(istr::to_estr(match.free[0]))\n+            option::some(match.free[0])\n         } else { option::none };\n \n     let run_ignored = getopts::opt_present(match, ~\"ignored\");\n@@ -124,7 +124,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n           }\n           te_wait(test) {\n             st.out.write_str(\n-                #ifmt[\"test %s ... \", istr::from_estr(test.name)]);\n+                #ifmt[\"test %s ... \", test.name]);\n           }\n           te_result(test, result) {\n             alt result {\n@@ -167,7 +167,7 @@ fn run_tests_console_(opts: &test_opts, tests: &[test_desc],\n         st.out.write_line(~\"\\nfailures:\");\n         for test: test_desc in st.failures {\n             let testname = test.name; // Satisfy alias analysis\n-            st.out.write_line(#ifmt[\"    %s\", istr::from_estr(testname)]);\n+            st.out.write_line(#ifmt[\"    %s\", testname]);\n         }\n     }\n \n@@ -259,13 +259,13 @@ fn filter_tests(opts: &test_opts, tests: &[test_desc]) -> [test_desc] {\n             let filter_str =\n                 alt opts.filter {\n                   option::some(f) { f }\n-                  option::none. { \"\" }\n+                  option::none. { ~\"\" }\n                 };\n \n             let filter =\n-                bind fn (test: &test_desc, filter_str: str) ->\n+                bind fn (test: &test_desc, filter_str: &istr) ->\n                         option::t<test_desc> {\n-                         if str::find(test.name, filter_str) >= 0 {\n+                         if istr::find(test.name, filter_str) >= 0 {\n                              ret option::some(test);\n                          } else { ret option::none; }\n                      }(_, filter_str);\n@@ -296,7 +296,7 @@ fn filter_tests(opts: &test_opts, tests: &[test_desc]) -> [test_desc] {\n     filtered =\n         {\n             fn lteq(t1: &test_desc, t2: &test_desc) -> bool {\n-                str::lteq(t1.name, t2.name)\n+                istr::lteq(t1.name, t2.name)\n             }\n             sort::merge_sort(lteq, filtered)\n         };"}, {"sha": "e70139a4d909e08d30bf39f84b36ade3efebd227", "filename": "src/test/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b22640a1f0faa109a255c268858d874587698d5/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b22640a1f0faa109a255c268858d874587698d5/src%2Ftest%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fcompiletest.rs?ref=6b22640a1f0faa109a255c268858d874587698d5", "patch": "@@ -130,7 +130,7 @@ fn run_tests(config: &config) {\n fn test_opts(config: &config) -> test::test_opts {\n     {\n         filter: alt config.filter {\n-          option::some(s) { option::some(istr::to_estr(s)) }\n+          option::some(s) { option::some(s) }\n           option::none. { option::none }\n         },\n         run_ignored: config.run_ignored\n@@ -183,10 +183,8 @@ fn make_test(cx: &cx, testfile: &istr, configport: &port<[u8]>) ->\n      ignore: header::is_test_ignored(cx.config, testfile)}\n }\n \n-fn make_test_name(config: &config, testfile: &istr) -> str {\n-    istr::to_estr(\n-        #ifmt[\"[%s] %s\", mode_str(config.mode),\n-              testfile])\n+fn make_test_name(config: &config, testfile: &istr) -> istr {\n+    #ifmt[\"[%s] %s\", mode_str(config.mode), testfile]\n }\n \n /*"}, {"sha": "d32930893e95ce35f447230c87200ced81ed545e", "filename": "src/test/stdtest/test.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6b22640a1f0faa109a255c268858d874587698d5/src%2Ftest%2Fstdtest%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b22640a1f0faa109a255c268858d874587698d5/src%2Ftest%2Fstdtest%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Ftest.rs?ref=6b22640a1f0faa109a255c268858d874587698d5", "patch": "@@ -1,5 +1,5 @@\n import std::test;\n-import std::str;\n+import std::istr;\n import std::option;\n import std::either;\n import std::vec;\n@@ -9,7 +9,7 @@ fn do_not_run_ignored_tests() {\n     let ran = @mutable false;\n     let f = bind fn (ran: @mutable bool) { *ran = true; }(ran);\n \n-    let desc = {name: \"whatever\", fn: f, ignore: true};\n+    let desc = {name: ~\"whatever\", fn: f, ignore: true};\n \n     test::run_test(desc, test::default_test_to_task);\n \n@@ -19,22 +19,22 @@ fn do_not_run_ignored_tests() {\n #[test]\n fn ignored_tests_result_in_ignored() {\n     fn f() { }\n-    let desc = {name: \"whatever\", fn: f, ignore: true};\n+    let desc = {name: ~\"whatever\", fn: f, ignore: true};\n     let res = test::run_test(desc, test::default_test_to_task).wait();\n     assert (res == test::tr_ignored);\n }\n \n #[test]\n fn first_free_arg_should_be_a_filter() {\n-    let args = [\"progname\", \"filter\"];\n+    let args = [~\"progname\", ~\"filter\"];\n     check (vec::is_not_empty(args));\n     let opts = alt test::parse_opts(args) { either::left(o) { o } };\n-    assert (str::eq(\"filter\", option::get(opts.filter)));\n+    assert (istr::eq(~\"filter\", option::get(opts.filter)));\n }\n \n #[test]\n fn parse_ignored_flag() {\n-    let args = [\"progname\", \"filter\", \"--ignored\"];\n+    let args = [~\"progname\", ~\"filter\", ~\"--ignored\"];\n     check (vec::is_not_empty(args));\n     let opts = alt test::parse_opts(args) { either::left(o) { o } };\n     assert (opts.run_ignored);\n@@ -47,12 +47,12 @@ fn filter_for_ignored_option() {\n \n     let opts = {filter: option::none, run_ignored: true};\n     let tests =\n-        [{name: \"1\", fn: fn () { }, ignore: true},\n-         {name: \"2\", fn: fn () { }, ignore: false}];\n+        [{name: ~\"1\", fn: fn () { }, ignore: true},\n+         {name: ~\"2\", fn: fn () { }, ignore: false}];\n     let filtered = test::filter_tests(opts, tests);\n \n     assert (vec::len(filtered) == 1u);\n-    assert (filtered[0].name == \"1\");\n+    assert (filtered[0].name == ~\"1\");\n     assert (filtered[0].ignore == false);\n }\n \n@@ -61,17 +61,17 @@ fn sort_tests() {\n     let opts = {filter: option::none, run_ignored: false};\n \n     let names =\n-        [\"sha1::test\", \"int::test_to_str\", \"int::test_pow\",\n-         \"test::do_not_run_ignored_tests\",\n-         \"test::ignored_tests_result_in_ignored\",\n-         \"test::first_free_arg_should_be_a_filter\",\n-         \"test::parse_ignored_flag\", \"test::filter_for_ignored_option\",\n-         \"test::sort_tests\"];\n+        [~\"sha1::test\", ~\"int::test_to_str\", ~\"int::test_pow\",\n+         ~\"test::do_not_run_ignored_tests\",\n+         ~\"test::ignored_tests_result_in_ignored\",\n+         ~\"test::first_free_arg_should_be_a_filter\",\n+         ~\"test::parse_ignored_flag\", ~\"test::filter_for_ignored_option\",\n+         ~\"test::sort_tests\"];\n     let tests =\n         {\n             let testfn = fn () { };\n             let tests = [];\n-            for name: str in names {\n+            for name: istr in names {\n                 let test = {name: name, fn: testfn, ignore: false};\n                 tests += [test];\n             }\n@@ -80,11 +80,13 @@ fn sort_tests() {\n     let filtered = test::filter_tests(opts, tests);\n \n     let expected =\n-        [\"int::test_pow\", \"int::test_to_str\", \"sha1::test\",\n-         \"test::do_not_run_ignored_tests\", \"test::filter_for_ignored_option\",\n-         \"test::first_free_arg_should_be_a_filter\",\n-         \"test::ignored_tests_result_in_ignored\", \"test::parse_ignored_flag\",\n-         \"test::sort_tests\"];\n+        [~\"int::test_pow\", ~\"int::test_to_str\", ~\"sha1::test\",\n+         ~\"test::do_not_run_ignored_tests\",\n+         ~\"test::filter_for_ignored_option\",\n+         ~\"test::first_free_arg_should_be_a_filter\",\n+         ~\"test::ignored_tests_result_in_ignored\",\n+         ~\"test::parse_ignored_flag\",\n+         ~\"test::sort_tests\"];\n \n     check vec::same_length(expected, filtered);\n     let pairs = vec::zip(expected, filtered);"}]}