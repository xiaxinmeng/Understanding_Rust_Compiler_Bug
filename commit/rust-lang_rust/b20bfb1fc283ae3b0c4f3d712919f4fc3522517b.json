{"sha": "b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMGJmYjFmYzI4M2FlM2IwYzRmM2Q3MTI5MTlmNGZjMzUyMjUxN2I=", "commit": {"author": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2017-11-21T07:27:20Z"}, "committer": {"name": "Gianni Ciccarelli", "email": "gianni.ciccarelli@gmail.com", "date": "2018-02-07T18:31:39Z"}, "message": "support `default impl` for specialization\n\nnot skipping any wfchecks on default impls", "tree": {"sha": "c910e34ab7db3d436a0d65ed4a1d57e57af9fa01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c910e34ab7db3d436a0d65ed4a1d57e57af9fa01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "html_url": "https://github.com/rust-lang/rust/commit/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/comments", "author": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "giannicic", "id": 10560238, "node_id": "MDQ6VXNlcjEwNTYwMjM4", "avatar_url": "https://avatars.githubusercontent.com/u/10560238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/giannicic", "html_url": "https://github.com/giannicic", "followers_url": "https://api.github.com/users/giannicic/followers", "following_url": "https://api.github.com/users/giannicic/following{/other_user}", "gists_url": "https://api.github.com/users/giannicic/gists{/gist_id}", "starred_url": "https://api.github.com/users/giannicic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/giannicic/subscriptions", "organizations_url": "https://api.github.com/users/giannicic/orgs", "repos_url": "https://api.github.com/users/giannicic/repos", "events_url": "https://api.github.com/users/giannicic/events{/privacy}", "received_events_url": "https://api.github.com/users/giannicic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13e80af159a709e5bb9a178b19b4319716261661", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e80af159a709e5bb9a178b19b4319716261661", "html_url": "https://github.com/rust-lang/rust/commit/13e80af159a709e5bb9a178b19b4319716261661"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "a2d5af67516028a7c9e3fbd19b372d9eb609b916", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -181,6 +181,9 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // obligations within. This is expected to be done 'late enough'\n     // that all type inference variables have been bound and so forth.\n     region_obligations: RefCell<Vec<(ast::NodeId, RegionObligation<'tcx>)>>,\n+\n+    // true if trait selection in this context should emit `default impl` candiates\n+    pub emit_defaul_impl_candidates: Cell<bool>,\n }\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n@@ -452,6 +455,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             err_count_on_creation: tcx.sess.err_count(),\n             in_snapshot: Cell::new(false),\n             region_obligations: RefCell::new(vec![]),\n+            emit_defaul_impl_candidates: Cell::new(false)\n         }))\n     }\n }"}, {"sha": "b58a154275ca9eeac4838d2a536bb49eb30a593b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -1296,6 +1296,12 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return false;\n         }\n \n+        // Using local cache if the infcx can emit `default impls`\n+        if self.infcx.emit_defaul_impl_candidates.get() {\n+            return false;\n+        }\n+\n+\n         // Otherwise, we can use the global cache.\n         true\n     }\n@@ -1714,18 +1720,21 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             obligation.predicate.def_id(),\n             obligation.predicate.0.trait_ref.self_ty(),\n             |impl_def_id| {\n-                self.probe(|this, snapshot| { /* [1] */\n-                    match this.match_impl(impl_def_id, obligation, snapshot) {\n-                        Ok(skol_map) => {\n-                            candidates.vec.push(ImplCandidate(impl_def_id));\n-\n-                            // NB: we can safely drop the skol map\n-                            // since we are in a probe [1]\n-                            mem::drop(skol_map);\n+                if self.infcx().emit_defaul_impl_candidates.get() ||\n+                   !self.tcx().impl_is_default(impl_def_id) {\n+                    self.probe(|this, snapshot| { /* [1] */\n+                        match this.match_impl(impl_def_id, obligation, snapshot) {\n+                            Ok(skol_map) => {\n+                                candidates.vec.push(ImplCandidate(impl_def_id));\n+\n+                                // NB: we can safely drop the skol map\n+                                // since we are in a probe [1]\n+                                mem::drop(skol_map);\n+                            }\n+                            Err(_) => { }\n                         }\n-                        Err(_) => { }\n-                    }\n-                });\n+                    });\n+                }\n             }\n         );\n "}, {"sha": "0fbf9f1bd587bffc070f41544d43532dc455089c", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -92,16 +92,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                                    self_ty: Ty<'tcx>,\n                                                    mut f: F)\n     {\n-        let mut emit_impl = |impl_def_id: DefId| {\n-            if !self.impl_is_default(impl_def_id) {\n-                f(impl_def_id);\n-            }\n-        };\n-\n         let impls = self.trait_impls_of(def_id);\n \n         for &impl_def_id in impls.blanket_impls.iter() {\n-            emit_impl(impl_def_id);\n+            f(impl_def_id);\n         }\n \n         // simplify_type(.., false) basically replaces type parameters and\n@@ -132,13 +126,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if let Some(simp) = fast_reject::simplify_type(self, self_ty, true) {\n             if let Some(impls) = impls.non_blanket_impls.get(&simp) {\n                 for &impl_def_id in impls {\n-                    emit_impl(impl_def_id);\n+                    f(impl_def_id);\n                 }\n             }\n         } else {\n             for v in impls.non_blanket_impls.values() {\n                 for &impl_def_id in v {\n-                    emit_impl(impl_def_id);\n+                    f(impl_def_id);\n                 }\n             }\n         }"}, {"sha": "a622f0b67322007cda0e7723e1f9e564d97647c3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -1745,6 +1745,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                param_env: ty::ParamEnv<'tcx>,\n                body_id: ast::NodeId)\n                -> FnCtxt<'a, 'gcx, 'tcx> {\n+        FnCtxt::set_emit_default_impl_candidates(inh, body_id);\n+\n         FnCtxt {\n             body_id,\n             param_env,\n@@ -1763,6 +1765,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn set_emit_default_impl_candidates(inh: &'a Inherited<'a, 'gcx, 'tcx>,\n+                                        body_id: ast::NodeId) {\n+        inh.infcx.emit_defaul_impl_candidates.set(\n+            match inh.tcx.hir.find(body_id) {\n+                Some(Node::NodeItem(..)) => {\n+                    if inh.tcx.impl_is_default(inh.tcx.hir.local_def_id(body_id)) {\n+                        true\n+                    } else {\n+                        false\n+                    }\n+                },\n+                _ => false\n+            }\n+        );\n+    }\n+\n     pub fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }"}, {"sha": "3668fc46ddc27b0e0fbba290fa762cc4f809f757", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -343,18 +343,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                                                   fcx.body_id,\n                                                   &trait_ref,\n                                                   ast_trait_ref.path.span);\n-\n-                    // not registering predicates associcated with a `default impl`\n-                    let impl_is_default = fcx.tcx.impl_is_default(item_def_id);\n                     for obligation in obligations {\n-                        let register = match obligation.predicate {\n-                            ty::Predicate::Trait(..)  => !impl_is_default,\n-                            _ => true\n-                        };\n-\n-                        if register {\n-                            fcx.register_predicate(obligation);\n-                        }\n+                        fcx.register_predicate(obligation);\n                     }\n                 }\n                 None => {"}, {"sha": "5f6844d0c8289da84ee395374408d8607728fb1c", "filename": "src/test/compile-fail/specialization/defaultimpl/specialization-wfcheck.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20bfb1fc283ae3b0c4f3d712919f4fc3522517b/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.rs?ref=b20bfb1fc283ae3b0c4f3d712919f4fc3522517b", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Foo<'a, T: Eq + 'a> { }\n+\n+default impl<U> Foo<'static, U> for () {}\n+//~^ ERROR the trait bound `U: std::cmp::Eq` is not satisfied\n+\n+fn main(){}\n\\ No newline at end of file"}]}