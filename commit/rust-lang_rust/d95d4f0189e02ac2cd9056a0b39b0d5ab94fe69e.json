{"sha": "d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWQ0ZjAxODllMDJhYzJjZDkwNTZhMGIzOWIwZDVhYjk0ZmU2OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T23:15:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-02T23:15:22Z"}, "message": "Auto merge of #81678 - jackh726:rollup-3nerni4, r=jackh726\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #80593 (Upgrade Chalk)\n - #81260 (Add .editorconfig)\n - #81455 (Add AArch64 big-endian and ILP32 targets)\n - #81517 (Remove remnants of the santizer runtime crates from bootstrap)\n - #81530 (sys: use `process::abort()` instead of `arch::wasm32::unreachable()`)\n - #81544 (Add better diagnostic for unbounded Abst. Const)\n - #81588 (Add doc aliases for \"delete\")\n - #81603 (rustbuild: Don't build compiler twice for error-index-generator.)\n - #81634 (Add long explanation e0521)\n - #81636 (Directly use `Option<&[T]>` instead of converting from `Option<&Vec<T>>` later on)\n - #81647 (Fix bug with assert!() calling the wrong edition of panic!().)\n - #81655 (Improve wording of suggestion about accessing field)\n - #81665 (Fix out of date `Scalar` documentation)\n - #81671 (Add more associated type tests)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a90c3339a7ce44551ae29dac4a3b5d5ea554b58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90c3339a7ce44551ae29dac4a3b5d5ea554b58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "html_url": "https://github.com/rust-lang/rust/commit/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "368275062fb655c1f36e0398f88b15379a1f3c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/368275062fb655c1f36e0398f88b15379a1f3c93", "html_url": "https://github.com/rust-lang/rust/commit/368275062fb655c1f36e0398f88b15379a1f3c93"}, {"sha": "81c64b34330090acf82285c3e9de67f876b3a98b", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c64b34330090acf82285c3e9de67f876b3a98b", "html_url": "https://github.com/rust-lang/rust/commit/81c64b34330090acf82285c3e9de67f876b3a98b"}], "stats": {"total": 847, "additions": 645, "deletions": 202}, "files": [{"sha": "ec6e107d547f0e6d7ff63e4866a641e3d2c4d1a5", "filename": ".editorconfig", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,21 @@\n+# EditorConfig helps developers define and maintain consistent\n+# coding styles between different editors and IDEs\n+# editorconfig.org\n+\n+root = true\n+\n+[*]\n+end_of_line = lf\n+charset = utf-8\n+trim_trailing_whitespace = true\n+insert_final_newline = true\n+indent_style = space\n+indent_size = 4\n+\n+[*.md]\n+# double whitespace at end of line\n+# denotes a line break in Markdown\n+trim_trailing_whitespace = false\n+\n+[*.yml]\n+indent_size = 2"}, {"sha": "fb401ed4cd0bbba208e4d7770f3c5ddbcbeffcbb", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -496,9 +496,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9f88ce4deae1dace71e49b7611cfae2d5489de3530d6daba5758043c47ac3a10\"\n+checksum = \"3983193cacd81f0f924acb666b7fe5e1a0d81db9f113fa69203eda7ea8ce8b6c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -508,9 +508,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0e34c9b1b10616782143d7f49490f91ae94afaf2202de3ab0b2835e78b4f0ccc\"\n+checksum = \"05a171ce5abbf0fbd06f221ab80ab182c7ef78603d23b858bc44e7ce8a86a396\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -521,19 +521,20 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"63362c629c2014ab639b04029070763fb8224df136d1363d30e9ece4c8877da3\"\n+checksum = \"a522f53af971e7678f472d687e053120157b3ae26e2ebd5ecbc0f5ab124f2cb6\"\n dependencies = [\n+ \"bitflags\",\n  \"chalk-derive\",\n  \"lazy_static\",\n ]\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.36.0\"\n+version = \"0.55.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cac338a67af52a7f50bb2f8232e730a3518ce432dbe303246acfe525ddd838c7\"\n+checksum = \"cdf79fb77a567e456a170f7ec84ea6584163d4ba3f13660cd182013d34ca667c\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -1783,9 +1784,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.79\"\n+version = \"0.2.85\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2448f6066e80e3bfc792e9c98bf705b4b0fc6e8ef5b43e5889aff0eaa9c58743\"\n+checksum = \"7ccac4b00700875e6a07c6cde370d44d32fa01c5a65cdd2fca6858c479d28bb3\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -4313,6 +4314,7 @@ dependencies = [\n  \"chalk-ir\",\n  \"chalk-solve\",\n  \"rustc_ast\",\n+ \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_index\","}, {"sha": "93ba54da3424e2bcc41ad15676d907999bbf1e03", "filename": "compiler/rustc_builtin_macros/src/assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -29,11 +29,11 @@ pub fn expand_assert<'cx>(\n \n     let panic_call = if let Some(tokens) = custom_message {\n         let path = if span.rust_2021() {\n-            // On edition 2021, we always call `$crate::panic!()`.\n+            // On edition 2021, we always call `$crate::panic::panic_2021!()`.\n             Path {\n                 span: sp,\n                 segments: cx\n-                    .std_path(&[sym::panic])\n+                    .std_path(&[sym::panic, sym::panic_2021])\n                     .into_iter()\n                     .map(|ident| PathSegment::from_ident(ident))\n                     .collect(),"}, {"sha": "39d08fbee3b7fbc01a72522aef5d18d308f5a871", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -105,7 +105,6 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert_eq!(bx.tcx().sess.target.endian, Endian::Little);\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n@@ -144,9 +143,14 @@ fn emit_aapcs_va_arg(\n     let top = in_reg.load(top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);\n-    let top = in_reg.gep(top, &[reg_off_v]);\n-    let top = in_reg.bitcast(top, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n-    let reg_value = in_reg.load(top, layout.align.abi);\n+    let mut reg_addr = in_reg.gep(top, &[reg_off_v]);\n+    if bx.tcx().sess.target.endian == Endian::Big && layout.size.bytes() != slot_size {\n+        // On big-endian systems the value is right-aligned in its slot.\n+        let offset = bx.const_i32((slot_size - layout.size.bytes()) as i32);\n+        reg_addr = in_reg.gep(reg_addr, &[offset]);\n+    }\n+    let reg_addr = in_reg.bitcast(reg_addr, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n+    let reg_value = in_reg.load(reg_addr, layout.align.abi);\n     in_reg.br(&end.llbb());\n \n     // On Stack block"}, {"sha": "9ce74dd9b5a791275878c9ce52c56c3e95b90351", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -267,6 +267,7 @@ E0516: include_str!(\"./error_codes/E0516.md\"),\n E0517: include_str!(\"./error_codes/E0517.md\"),\n E0518: include_str!(\"./error_codes/E0518.md\"),\n E0520: include_str!(\"./error_codes/E0520.md\"),\n+E0521: include_str!(\"./error_codes/E0521.md\"),\n E0522: include_str!(\"./error_codes/E0522.md\"),\n E0524: include_str!(\"./error_codes/E0524.md\"),\n E0525: include_str!(\"./error_codes/E0525.md\"),\n@@ -597,7 +598,6 @@ E0780: include_str!(\"./error_codes/E0780.md\"),\n     E0514, // metadata version mismatch\n     E0519, // local crate and dependency have same (crate-name, disambiguator)\n     // two dependencies have same (crate-name, disambiguator) but different SVH\n-    E0521, // borrowed data escapes outside of closure\n     E0523,\n //  E0526, // shuffle indices are not constant\n //  E0540, // multiple rustc_deprecated attributes"}, {"sha": "65dcac983acd5feac6fc1b3b151098c1480a9ef3", "filename": "compiler/rustc_error_codes/src/error_codes/E0521.md", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0521.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0521.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0521.md?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,28 @@\n+Borrowed data escapes outside of closure.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0521\n+let mut list: Vec<&str> = Vec::new();\n+\n+let _add = |el: &str| {\n+    list.push(el); // error: `el` escapes the closure body here\n+};\n+```\n+\n+A type anotation of a closure parameter implies a new lifetime declaration.\n+Consider to drop it, the compiler is reliably able to infer them.\n+\n+```\n+let mut list: Vec<&str> = Vec::new();\n+\n+let _add = |el| {\n+    list.push(el);\n+};\n+```\n+\n+See the [Closure type inference and annotation][closure-infere-annotation] and\n+[Lifetime elision][lifetime-elision] sections of the Book for more details.\n+\n+[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n+[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html"}, {"sha": "aa4fd055d5ee01ff85fa184b284a0b409c7ef74e", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -353,10 +353,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `TyVar(vid)` is unresolved, track its universe index in the canonicalized\n                     // result.\n                     Err(mut ui) => {\n-                        if !self.infcx.unwrap().tcx.sess.opts.debugging_opts.chalk {\n-                            // FIXME: perf problem described in #55921.\n-                            ui = ty::UniverseIndex::ROOT;\n-                        }\n+                        // FIXME: perf problem described in #55921.\n+                        ui = ty::UniverseIndex::ROOT;\n                         self.canonicalize_ty_var(\n                             CanonicalVarInfo {\n                                 kind: CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n@@ -440,10 +438,8 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n                     // `ConstVar(vid)` is unresolved, track its universe index in the\n                     // canonicalized result\n                     Err(mut ui) => {\n-                        if !self.infcx.unwrap().tcx.sess.opts.debugging_opts.chalk {\n-                            // FIXME: perf problem described in #55921.\n-                            ui = ty::UniverseIndex::ROOT;\n-                        }\n+                        // FIXME: perf problem described in #55921.\n+                        ui = ty::UniverseIndex::ROOT;\n                         return self.canonicalize_const_var(\n                             CanonicalVarInfo { kind: CanonicalVarKind::Const(ui) },\n                             ct,"}, {"sha": "84aa19aedebf8ef4cdf48092916df6c93c2071dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -1855,7 +1855,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         diag.span_suggestion(\n                             span,\n                             &format!(\n-                                \"you might have meant to use field `{}` of type `{}`\",\n+                                \"you might have meant to use field `{}` whose type is `{}`\",\n                                 name, ty\n                             ),\n                             suggestion,"}, {"sha": "d33aad3b71040e1ba5195d75a6043bb89ccfdf6a", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -26,7 +26,7 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.36.0\"\n+chalk-ir = \"0.55.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"9.0.0\"\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "4bb39fe4a527e83d83d9ba6324ecc48d20db06f1", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> ConstValue<'tcx> {\n }\n \n /// A `Scalar` represents an immediate, primitive value existing outside of a\n-/// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n+/// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 16 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]"}, {"sha": "74873778f74ba16dc213d9edbd9a6a98a80c3ac3", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -72,6 +72,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n+    type InternedVariances = Vec<chalk_ir::Variance>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n     type DefId = DefId;\n     type InternedAdtId = &'tcx AdtDef;\n@@ -86,17 +87,34 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n             write!(fmt, \"{:?}\", pci.consequence)?;\n \n             let conditions = pci.conditions.interned();\n+            let constraints = pci.constraints.interned();\n \n             let conds = conditions.len();\n-            if conds == 0 {\n+            let consts = constraints.len();\n+            if conds == 0 && consts == 0 {\n                 return Ok(());\n             }\n \n             write!(fmt, \" :- \")?;\n-            for cond in &conditions[..conds - 1] {\n-                write!(fmt, \"{:?}, \", cond)?;\n+\n+            if conds != 0 {\n+                for cond in &conditions[..conds - 1] {\n+                    write!(fmt, \"{:?}, \", cond)?;\n+                }\n+                write!(fmt, \"{:?}\", conditions[conds - 1])?;\n+            }\n+\n+            if conds != 0 && consts != 0 {\n+                write!(fmt, \" ; \")?;\n             }\n-            write!(fmt, \"{:?}\", conditions[conds - 1])?;\n+\n+            if consts != 0 {\n+                for constraint in &constraints[..consts - 1] {\n+                    write!(fmt, \"{:?}, \", constraint)?;\n+                }\n+                write!(fmt, \"{:?}\", constraints[consts - 1])?;\n+            }\n+\n             Ok(())\n         };\n         Some(write())\n@@ -351,6 +369,20 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     ) -> &'a [chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>] {\n         constraints\n     }\n+\n+    fn intern_variances<E>(\n+        &self,\n+        data: impl IntoIterator<Item = Result<chalk_ir::Variance, E>>,\n+    ) -> Result<Self::InternedVariances, E> {\n+        data.into_iter().collect::<Result<Vec<_>, _>>()\n+    }\n+\n+    fn variances_data<'a>(\n+        &self,\n+        variances: &'a Self::InternedVariances,\n+    ) -> &'a [chalk_ir::Variance] {\n+        variances\n+    }\n }\n \n impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {"}, {"sha": "0bab33976b29dc950e8542ccc0f044a23b49b30c", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -2415,7 +2415,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                     _ => break,\n                                 }\n                             }\n-                            break Some(e);\n+                            break Some(&e[..]);\n                         }\n                         Elide::Forbid => break None,\n                     };\n@@ -2445,7 +2445,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             lifetime_refs.len(),\n             &lifetime_names,\n             lifetime_spans,\n-            error.map(|p| &p[..]).unwrap_or(&[]),\n+            error.unwrap_or(&[]),\n         );\n         err.emit();\n     }"}, {"sha": "a5e985d4712711c57d3e14217fcd7752a43c1338", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -40,17 +40,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     ret.make_indirect();\n@@ -72,17 +62,7 @@ where\n     let size = arg.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        arg.cast_to(Uniform { unit, total: size });\n+        arg.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     arg.make_indirect();"}, {"sha": "b560e11fe1c5e0ecb9ef8810377eb0ac61550c1f", "filename": "compiler/rustc_target/src/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -45,14 +45,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 32 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else {\n-            Reg::i32()\n-        };\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i32(), total: size });\n         return;\n     }\n     ret.make_indirect();"}, {"sha": "192c4661c7ce6d90d420ae2b6b0f23582db17a49", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,20 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64_be-unknown-linux-gnu\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            endian: Endian::Big,\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "5b9e9c9519c5480065e1d0d6b7be411b3d8af12b", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,20 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64_be-unknown-linux-gnu_ilp32\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            endian: Endian::Big,\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "f2d7576280fd98e2e1121839a10cded3891c1a61", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,18 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64-unknown-linux-gnu_ilp32\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "7a93bac72ca0717c93e38d77407f145acf8994f6", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -808,6 +808,10 @@ supported_targets! {\n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n     (\"mipsel-unknown-none\", mipsel_unknown_none),\n     (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n+\n+    (\"aarch64_be-unknown-linux-gnu\", aarch64_be_unknown_linux_gnu),\n+    (\"aarch64-unknown-linux-gnu_ilp32\", aarch64_unknown_linux_gnu_ilp32),\n+    (\"aarch64_be-unknown-linux-gnu_ilp32\", aarch64_be_unknown_linux_gnu_ilp32),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "89820bb1417ebd60600590cb3510a76bc906bee5", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -16,8 +16,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::abstract_const::{Node, NodeId};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n-use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::{DefId, LocalDefId};\n@@ -43,10 +42,6 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                 for pred in param_env.caller_bounds() {\n                     match pred.kind().skip_binder() {\n                         ty::PredicateKind::ConstEvaluatable(b_def, b_substs) => {\n-                            debug!(\n-                                \"is_const_evaluatable: caller_bound={:?}, {:?}\",\n-                                b_def, b_substs\n-                            );\n                             if b_def == def && b_substs == substs {\n                                 debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n                                 return Ok(());\n@@ -113,15 +108,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     }\n                     FailureKind::MentionsParam => {\n                         // FIXME(const_evaluatable_checked): Better error message.\n-                        infcx\n-                            .tcx\n-                            .sess\n-                            .struct_span_err(span, \"unconstrained generic constant\")\n-                            .span_help(\n+                        let mut err =\n+                            infcx.tcx.sess.struct_span_err(span, \"unconstrained generic constant\");\n+                        let const_span = tcx.def_span(def.did);\n+                        // FIXME(const_evaluatable_checked): Update this suggestion once\n+                        // explicit const evaluatable bounds are implemented.\n+                        if let Ok(snippet) = infcx.tcx.sess.source_map().span_to_snippet(const_span)\n+                        {\n+                            err.span_help(\n                                 tcx.def_span(def.did),\n+                                &format!(\"try adding a `where` bound using this expression: where [u8; {}]: Sized\", snippet),\n+                            );\n+                        } else {\n+                            err.span_help(\n+                                const_span,\n                                 \"consider adding a `where` bound for this expression\",\n-                            )\n-                            .emit();\n+                            );\n+                        }\n+                        err.emit();\n                         return Err(ErrorHandled::Reported(ErrorReported));\n                     }\n                     FailureKind::Concrete => {"}, {"sha": "8fdbc3b76b45933afda7b00d8a731f98ad539103", "filename": "compiler/rustc_traits/Cargo.toml", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2FCargo.toml?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -6,15 +6,16 @@ edition = \"2018\"\n \n [dependencies]\n tracing = \"0.1\"\n+rustc_attr = { path = \"../rustc_attr\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-chalk-ir = \"0.36.0\"\n-chalk-solve = \"0.36.0\"\n-chalk-engine = \"0.36.0\"\n+chalk-ir = \"0.55.0\"\n+chalk-solve = \"0.55.0\"\n+chalk-engine = \"0.55.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "916186f4204e2c200f8a3ab30f4c53ebe11df1fd", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,6 +10,9 @@ use rustc_middle::traits::ChalkRustInterner as RustInterner;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, AssocItemContainer, AssocKind, TyCtxt, TypeFoldable};\n \n+use rustc_ast::ast;\n+use rustc_attr as attr;\n+\n use rustc_hir::def_id::DefId;\n \n use rustc_span::symbol::sym;\n@@ -18,7 +21,6 @@ use std::fmt;\n use std::sync::Arc;\n \n use crate::chalk::lowering::{self, LowerInto};\n-use rustc_ast::ast;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n@@ -205,12 +207,32 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn adt_repr(\n         &self,\n         adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n-    ) -> chalk_solve::rust_ir::AdtRepr {\n+    ) -> Arc<chalk_solve::rust_ir::AdtRepr<RustInterner<'tcx>>> {\n         let adt_def = adt_id.0;\n-        chalk_solve::rust_ir::AdtRepr {\n-            repr_c: adt_def.repr.c(),\n-            repr_packed: adt_def.repr.packed(),\n-        }\n+        let int = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Int(i)).intern(&self.interner);\n+        let uint = |i| chalk_ir::TyKind::Scalar(chalk_ir::Scalar::Uint(i)).intern(&self.interner);\n+        Arc::new(chalk_solve::rust_ir::AdtRepr {\n+            c: adt_def.repr.c(),\n+            packed: adt_def.repr.packed(),\n+            int: adt_def.repr.int.map(|i| match i {\n+                attr::IntType::SignedInt(ty) => match ty {\n+                    ast::IntTy::Isize => int(chalk_ir::IntTy::Isize),\n+                    ast::IntTy::I8 => int(chalk_ir::IntTy::I8),\n+                    ast::IntTy::I16 => int(chalk_ir::IntTy::I16),\n+                    ast::IntTy::I32 => int(chalk_ir::IntTy::I32),\n+                    ast::IntTy::I64 => int(chalk_ir::IntTy::I64),\n+                    ast::IntTy::I128 => int(chalk_ir::IntTy::I128),\n+                },\n+                attr::IntType::UnsignedInt(ty) => match ty {\n+                    ast::UintTy::Usize => uint(chalk_ir::UintTy::Usize),\n+                    ast::UintTy::U8 => uint(chalk_ir::UintTy::U8),\n+                    ast::UintTy::U16 => uint(chalk_ir::UintTy::U16),\n+                    ast::UintTy::U32 => uint(chalk_ir::UintTy::U32),\n+                    ast::UintTy::U64 => uint(chalk_ir::UintTy::U64),\n+                    ast::UintTy::U128 => uint(chalk_ir::UintTy::U128),\n+                },\n+            }),\n+        })\n     }\n \n     fn fn_def_datum(\n@@ -316,7 +338,11 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(&self.interner);\n \n-            parameters[0].assert_ty_ref(&self.interner).could_match(&self.interner, &lowered_ty)\n+            parameters[0].assert_ty_ref(&self.interner).could_match(\n+                &self.interner,\n+                self.unification_database(),\n+                &lowered_ty,\n+            )\n         });\n \n         let impls = matched_impls.map(chalk_ir::ImplId).collect();\n@@ -541,6 +567,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             Unsize => lang_items.unsize_trait(),\n             Unpin => lang_items.unpin_trait(),\n             CoerceUnsized => lang_items.coerce_unsized_trait(),\n+            DiscriminantKind => lang_items.discriminant_kind_trait(),\n         };\n         def_id.map(chalk_ir::TraitId)\n     }\n@@ -586,7 +613,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let sig = &substs.as_slice(&self.interner)[substs.len(&self.interner) - 2];\n         match sig.assert_ty_ref(&self.interner).kind(&self.interner) {\n             chalk_ir::TyKind::Function(f) => {\n-                let substitution = f.substitution.as_slice(&self.interner);\n+                let substitution = f.substitution.0.as_slice(&self.interner);\n                 let return_type =\n                     substitution.last().unwrap().assert_ty_ref(&self.interner).clone();\n                 // Closure arguments are tupled\n@@ -644,6 +671,51 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     ) -> Arc<chalk_solve::rust_ir::GeneratorWitnessDatum<RustInterner<'tcx>>> {\n         unimplemented!()\n     }\n+\n+    fn unification_database(&self) -> &dyn chalk_ir::UnificationDatabase<RustInterner<'tcx>> {\n+        self\n+    }\n+\n+    fn discriminant_type(\n+        &self,\n+        _: chalk_ir::Ty<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Ty<RustInterner<'tcx>> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<'tcx> chalk_ir::UnificationDatabase<RustInterner<'tcx>> for RustIrDatabase<'tcx> {\n+    fn fn_def_variance(\n+        &self,\n+        def_id: chalk_ir::FnDefId<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n+        let variances = self.interner.tcx.variances_of(def_id.0);\n+        chalk_ir::Variances::from_iter(\n+            &self.interner,\n+            variances.iter().map(|v| match v {\n+                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+                ty::Variance::Bivariant => unimplemented!(),\n+            }),\n+        )\n+    }\n+\n+    fn adt_variance(\n+        &self,\n+        def_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+    ) -> chalk_ir::Variances<RustInterner<'tcx>> {\n+        let variances = self.interner.tcx.variances_of(def_id.0.did);\n+        chalk_ir::Variances::from_iter(\n+            &self.interner,\n+            variances.iter().map(|v| match v {\n+                ty::Variance::Invariant => chalk_ir::Variance::Invariant,\n+                ty::Variance::Covariant => chalk_ir::Variance::Covariant,\n+                ty::Variance::Contravariant => chalk_ir::Variance::Contravariant,\n+                ty::Variance::Bivariant => unimplemented!(),\n+            }),\n+        )\n+    }\n }\n \n /// Creates a `InternalSubsts` that maps each generic parameter to a higher-ranked"}, {"sha": "7d3589c4b6bd870420e484f6329fb3eb31eac97b", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -287,12 +287,12 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: binders.len(interner),\n                     sig: sig.lower_into(interner),\n-                    substitution: chalk_ir::Substitution::from_iter(\n+                    substitution: chalk_ir::FnSubst(chalk_ir::Substitution::from_iter(\n                         interner,\n                         inputs_and_outputs.iter().map(|ty| {\n                             chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner)\n                         }),\n-                    ),\n+                    )),\n                 })\n             }\n             ty::Dynamic(predicates, region) => chalk_ir::TyKind::Dyn(chalk_ir::DynTy {\n@@ -478,6 +478,10 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n             }\n             chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n             chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n+            chalk_ir::LifetimeData::Empty(ui) => {\n+                ty::RegionKind::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n+            }\n+            chalk_ir::LifetimeData::Erased => ty::RegionKind::ReErased,\n         };\n         interner.tcx.mk_region(kind)\n     }"}, {"sha": "d98f18182c843194f82d12d665a8641af0fb7cf0", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -105,14 +105,40 @@ crate fn evaluate_goal<'tcx>(\n     // really need this and so it's really minimal.\n     // Right now, we also treat a `Unique` solution the same as\n     // `Ambig(Definite)`. This really isn't right.\n-    let make_solution = |subst: chalk_ir::Substitution<_>| {\n+    let make_solution = |subst: chalk_ir::Substitution<_>,\n+                         binders: chalk_ir::CanonicalVarKinds<_>| {\n+        use rustc_middle::infer::canonical::CanonicalVarInfo;\n+\n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n         subst.as_slice(&interner).iter().for_each(|p| {\n             var_values.push(p.lower_into(&interner));\n         });\n+        let variables: Vec<_> = binders\n+            .iter(&interner)\n+            .map(|var| {\n+                let kind = match var.kind {\n+                    chalk_ir::VariableKind::Ty(ty_kind) => CanonicalVarKind::Ty(match ty_kind {\n+                        chalk_ir::TyVariableKind::General => CanonicalTyVarKind::General(\n+                            ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                        ),\n+                        chalk_ir::TyVariableKind::Integer => CanonicalTyVarKind::Int,\n+                        chalk_ir::TyVariableKind::Float => CanonicalTyVarKind::Float,\n+                    }),\n+                    chalk_ir::VariableKind::Lifetime => CanonicalVarKind::Region(\n+                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                    ),\n+                    chalk_ir::VariableKind::Const(_) => CanonicalVarKind::Const(\n+                        ty::UniverseIndex::from_usize(var.skip_kind().counter),\n+                    ),\n+                };\n+                CanonicalVarInfo { kind }\n+            })\n+            .collect();\n+        let max_universe =\n+            binders.iter(&interner).map(|v| v.skip_kind().counter).max().unwrap_or(0);\n         let sol = Canonical {\n-            max_universe: ty::UniverseIndex::from_usize(0),\n-            variables: obligation.variables.clone(),\n+            max_universe: ty::UniverseIndex::from_usize(max_universe),\n+            variables: tcx.intern_canonical_var_infos(&variables),\n             value: QueryResponse {\n                 var_values: CanonicalVarValues { var_values },\n                 region_constraints: QueryRegionConstraints::default(),\n@@ -126,11 +152,13 @@ crate fn evaluate_goal<'tcx>(\n         .map(|s| match s {\n             Solution::Unique(subst) => {\n                 // FIXME(chalk): handle constraints\n-                make_solution(subst.value.subst)\n+                make_solution(subst.value.subst, subst.binders)\n             }\n             Solution::Ambig(guidance) => {\n                 match guidance {\n-                    chalk_solve::Guidance::Definite(subst) => make_solution(subst.value),\n+                    chalk_solve::Guidance::Definite(subst) => {\n+                        make_solution(subst.value, subst.binders)\n+                    }\n                     chalk_solve::Guidance::Suggested(_) => unimplemented!(),\n                     chalk_solve::Guidance::Unknown => {\n                         // chalk_fulfill doesn't use the var_values here, so"}, {"sha": "5554a448b5c59e67c01dabfc7c5351470b3ed0b5", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -823,6 +823,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n+    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>\n     where"}, {"sha": "d39eb1fd4f955d32c7fd521b849d3d7381348dc2", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -770,6 +770,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n+    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n     where"}, {"sha": "6a7e4b2ba257369a5b1d0a1a44e9b68da647c410", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -1234,7 +1234,7 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[macro_export]\n     #[rustc_diagnostic_item = \"assert_macro\"]\n-    #[allow_internal_unstable(core_panic)]\n+    #[allow_internal_unstable(core_panic, edition_panic)]\n     macro_rules! assert {\n         ($cond:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};"}, {"sha": "778e34e634f64919c3a5eea25f917d57d880e06d", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -889,6 +889,7 @@ pub fn replace<T>(dest: &mut T, mut src: T) -> T {\n /// ```\n ///\n /// [`RefCell`]: crate::cell::RefCell\n+#[doc(alias = \"delete\")]\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn drop<T>(_x: T) {}"}, {"sha": "27f7191831d41f96885510d888d97601cb9e776c", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -859,6 +859,7 @@ where\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n+    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>"}, {"sha": "912e975aa0a4ca1dd108c178fb235255c2550803", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -874,6 +874,7 @@ where\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n+    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool"}, {"sha": "43119c36cfec730175d95b3f9b712e55eb141653", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -1524,6 +1524,7 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::unlink(path.as_ref())\n@@ -1958,6 +1959,7 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::rmdir(path.as_ref())\n@@ -1995,6 +1997,7 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n+#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::remove_dir_all(path.as_ref())"}, {"sha": "525102212c41e0999c9770bf85c7cd71ef15f1ac", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -247,17 +247,17 @@ mod arch {\n     use crate::os::raw::{c_int, c_long};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blkcnt_t = u64;\n+    pub type blkcnt_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blksize_t = u64;\n+    pub type blksize_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type nlink_t = u64;\n+    pub type nlink_t = u32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type off_t = u64;\n+    pub type off_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type time_t = i64;\n+    pub type time_t = c_long;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -288,15 +288,15 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: i64,\n+        pub st_atime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: i64,\n+        pub st_mtime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: i64,\n+        pub st_ctime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "5eafb77da1dcdc5883b27b079cf81c8c1f911e61", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -86,7 +86,7 @@ pub fn my_id() -> u32 {\n         if MY_ID == 0 {\n             let mut cur = NEXT_ID.load(SeqCst);\n             MY_ID = loop {\n-                let next = cur.checked_add(1).unwrap_or_else(|| crate::arch::wasm32::unreachable());\n+                let next = cur.checked_add(1).unwrap_or_else(|| crate::process::abort());\n                 match NEXT_ID.compare_exchange(cur, next, SeqCst, SeqCst) {\n                     Ok(_) => break next,\n                     Err(i) => cur = i,"}, {"sha": "faf554d285a9a294d57dec8d4d6290ed831fd34e", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -36,9 +36,12 @@ pub const unwinder_private_data_size: usize = 20;\n #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n pub const unwinder_private_data_size: usize = 5;\n \n-#[cfg(target_arch = \"aarch64\")]\n+#[cfg(all(target_arch = \"aarch64\", target_pointer_width = \"64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(all(target_arch = \"aarch64\", target_pointer_width = \"32\"))]\n+pub const unwinder_private_data_size: usize = 5;\n+\n #[cfg(target_arch = \"mips\")]\n pub const unwinder_private_data_size: usize = 2;\n "}, {"sha": "885fcfff030a2094e75c71dfbc5ede75573167f3", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -146,7 +146,7 @@ mod defaults {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 0 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),\n@@ -556,7 +556,7 @@ mod dist {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),\n@@ -594,7 +594,7 @@ mod dist {\n         // rustdoc tool.\n         assert_eq!(\n             first(builder.cache.all::<doc::ErrorIndex>()),\n-            &[doc::ErrorIndex { compiler: Compiler { host: a, stage: 1 }, target: a },]\n+            &[doc::ErrorIndex { target: a },]\n         );\n         assert_eq!(\n             first(builder.cache.all::<tool::ErrorIndex>()),"}, {"sha": "c4b3e4cf95dae1424a7c503bb96342da08a65687", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -636,7 +636,6 @@ impl Step for Rustdoc {\n \n #[derive(Ord, PartialOrd, Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n-    pub compiler: Compiler,\n     pub target: TargetSelection,\n }\n \n@@ -652,12 +651,7 @@ impl Step for ErrorIndex {\n \n     fn make_run(run: RunConfig<'_>) {\n         let target = run.target;\n-        // error_index_generator depends on librustdoc. Use the compiler that\n-        // is normally used to build rustdoc for other documentation so that\n-        // it shares the same artifacts.\n-        let compiler =\n-            run.builder.compiler_for(run.builder.top_stage, run.builder.config.build, target);\n-        run.builder.ensure(ErrorIndex { compiler, target });\n+        run.builder.ensure(ErrorIndex { target });\n     }\n \n     /// Generates the HTML rendered error-index by running the\n@@ -666,7 +660,7 @@ impl Step for ErrorIndex {\n         builder.info(&format!(\"Documenting error index ({})\", self.target));\n         let out = builder.doc_out(self.target);\n         t!(fs::create_dir_all(&out));\n-        let mut index = tool::ErrorIndex::command(builder, self.compiler);\n+        let mut index = tool::ErrorIndex::command(builder);\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n         index.arg(&builder.version);"}, {"sha": "f0e33be757d161f1c4210d2fea7b4485636ff704", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -14,7 +14,7 @@ use std::process::Command;\n use build_helper::{self, output, t};\n \n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n-use crate::cache::{Interned, INTERNER};\n+use crate::cache::Interned;\n use crate::compile;\n use crate::config::TargetSelection;\n use crate::dist;\n@@ -1482,7 +1482,7 @@ impl Step for ErrorIndex {\n         // error_index_generator depends on librustdoc. Use the compiler that\n         // is normally used to build rustdoc for other tests (like compiletest\n         // tests in src/test/rustdoc) so that it shares the same artifacts.\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, run.target, run.target);\n+        let compiler = run.builder.compiler(run.builder.top_stage, run.builder.config.build);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n \n@@ -1499,19 +1499,16 @@ impl Step for ErrorIndex {\n         t!(fs::create_dir_all(&dir));\n         let output = dir.join(\"error-index.md\");\n \n-        let mut tool = tool::ErrorIndex::command(builder, compiler);\n+        let mut tool = tool::ErrorIndex::command(builder);\n         tool.arg(\"markdown\").arg(&output);\n \n-        // Use the rustdoc that was built by self.compiler. This copy of\n-        // rustdoc is shared with other tests (like compiletest tests in\n-        // src/test/rustdoc). This helps avoid building rustdoc multiple\n-        // times.\n-        let rustdoc_compiler = builder.compiler(builder.top_stage, builder.config.build);\n-        builder.info(&format!(\"Testing error-index stage{}\", rustdoc_compiler.stage));\n+        builder.info(&format!(\"Testing error-index stage{}\", compiler.stage));\n         let _time = util::timeit(&builder);\n         builder.run_quiet(&mut tool);\n-        builder.ensure(compile::Std { compiler: rustdoc_compiler, target: rustdoc_compiler.host });\n-        markdown_test(builder, rustdoc_compiler, &output);\n+        // The tests themselves need to link to std, so make sure it is\n+        // available.\n+        builder.ensure(compile::Std { compiler, target: compiler.host });\n+        markdown_test(builder, compiler, &output);\n     }\n }\n \n@@ -1613,55 +1610,6 @@ impl Step for CrateLibrustc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct CrateNotDefault {\n-    compiler: Compiler,\n-    target: TargetSelection,\n-    test_kind: TestKind,\n-    krate: &'static str,\n-}\n-\n-impl Step for CrateNotDefault {\n-    type Output = ();\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/librustc_asan\")\n-            .path(\"src/librustc_lsan\")\n-            .path(\"src/librustc_msan\")\n-            .path(\"src/librustc_tsan\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        let builder = run.builder;\n-        let compiler = builder.compiler(builder.top_stage, run.build_triple());\n-\n-        let test_kind = builder.kind.into();\n-\n-        builder.ensure(CrateNotDefault {\n-            compiler,\n-            target: run.target,\n-            test_kind,\n-            krate: match run.path {\n-                _ if run.path.ends_with(\"src/librustc_asan\") => \"rustc_asan\",\n-                _ if run.path.ends_with(\"src/librustc_lsan\") => \"rustc_lsan\",\n-                _ if run.path.ends_with(\"src/librustc_msan\") => \"rustc_msan\",\n-                _ if run.path.ends_with(\"src/librustc_tsan\") => \"rustc_tsan\",\n-                _ => panic!(\"unexpected path {:?}\", run.path),\n-            },\n-        });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(Crate {\n-            compiler: self.compiler,\n-            target: self.target,\n-            mode: Mode::Std,\n-            test_kind: self.test_kind,\n-            krate: INTERNER.intern_str(self.krate),\n-        });\n-    }\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Crate {\n     pub compiler: Compiler,"}, {"sha": "bf6bea539e5c2b1638107b94a818cb95eba0248b", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -376,7 +376,15 @@ pub struct ErrorIndex {\n }\n \n impl ErrorIndex {\n-    pub fn command(builder: &Builder<'_>, compiler: Compiler) -> Command {\n+    pub fn command(builder: &Builder<'_>) -> Command {\n+        // This uses stage-1 to match the behavior of building rustdoc.\n+        // Error-index-generator links with the rustdoc library, so we want to\n+        // use the same librustdoc to avoid building rustdoc twice (and to\n+        // avoid building the compiler an extra time). This uses\n+        // saturating_sub to deal with building with stage 0. (Using stage 0\n+        // isn't recommended, since it will fail if any new error index tests\n+        // use new syntax, but it should work otherwise.)\n+        let compiler = builder.compiler(builder.top_stage.saturating_sub(1), builder.config.build);\n         let mut cmd = Command::new(builder.ensure(ErrorIndex { compiler }));\n         add_dylib_path(\n             vec![PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host))],\n@@ -396,8 +404,14 @@ impl Step for ErrorIndex {\n     fn make_run(run: RunConfig<'_>) {\n         // Compile the error-index in the same stage as rustdoc to avoid\n         // recompiling rustdoc twice if we can.\n-        let host = run.builder.config.build;\n-        let compiler = run.builder.compiler_for(run.builder.top_stage, host, host);\n+        //\n+        // NOTE: This `make_run` isn't used in normal situations, only if you\n+        // manually build the tool with `x.py build\n+        // src/tools/error-index-generator` which almost nobody does.\n+        // Normally, `x.py test` or `x.py doc` will use the\n+        // `ErrorIndex::command` function instead.\n+        let compiler =\n+            run.builder.compiler(run.builder.top_stage.saturating_sub(1), run.builder.config.build);\n         run.builder.ensure(ErrorIndex { compiler });\n     }\n "}, {"sha": "eb740419647013fd47c343eb44a39ef020827a13", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -156,11 +156,14 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n `aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n `aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n `aarch64-uwp-windows-msvc` | ? |  |\n `aarch64-wrs-vxworks` | ? |  |\n+`aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n+`aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD"}, {"sha": "70d09f218d1c84fedabdb74881e214dacd5b0c3d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -1 +1 @@\n-Subproject commit f9a8d70b6e0365ac2172ca6b7f1de0341297458d\n+Subproject commit 70d09f218d1c84fedabdb74881e214dacd5b0c3d"}, {"sha": "49753e7bf1660e37a64df62566149d17600becb0", "filename": "src/test/ui/associated-types/issue-24159.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-24159.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+\n+#![allow(unused)]\n+\n+trait Bar<T> {\n+    fn dummy(&self);\n+}\n+\n+trait Foo {\n+    type A;\n+    type B: Bar<Self::A>;\n+\n+    fn get_b(&self) -> &Self::B;\n+}\n+\n+fn test_bar<A, B: Bar<A>>(_: &B) {}\n+\n+fn test<A, F: Foo<A = A>>(f: &F) {\n+    test_bar(f.get_b());\n+}\n+\n+trait Bar1<T> {}\n+trait Caz1 {\n+    type A;\n+    type B: Bar1<Self::A>;\n+}\n+\n+fn test1<T, U>() where T: Caz1, U: Caz1<A = T::A> {}\n+\n+trait Bar2<T> {}\n+trait Caz2 {\n+    type A;\n+    type B: Bar2<Self::A>;\n+}\n+fn test2<T: Caz2<A = ()>>() {}\n+\n+fn main() {}"}, {"sha": "3701c37d0c86fdedae94e1e66dc639ba244aafc7", "filename": "src/test/ui/associated-types/issue-37808.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37808.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+trait Parent {\n+    type Ty;\n+    type Assoc: Child<Self::Ty>;\n+}\n+\n+trait Child<T> {}\n+\n+struct ChildWrapper<T>(T);\n+impl<A, T> Child<A> for ChildWrapper<T> where T: Child<A> {}\n+\n+struct ParentWrapper<T>(T);\n+impl<A, T: Parent<Ty = A>> Parent for ParentWrapper<T> {\n+    type Ty = A;\n+    type Assoc = ChildWrapper<T::Assoc>;\n+}\n+\n+fn main() {}"}, {"sha": "d854f6af3ea94b5e724f4425ff00639ee941d72b", "filename": "src/test/ui/associated-types/issue-37883.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-37883.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+use std::ops::Mul;\n+\n+fn main() {}\n+\n+trait Ring {}\n+trait Real: Ring {}\n+\n+trait Module: Sized + Mul<<Self as Module>::Ring, Output = Self> {\n+    type Ring: Ring;\n+}\n+\n+trait EuclideanSpace {\n+    type Coordinates: Module<Ring = Self::Real>;\n+    type Real: Real;\n+}\n+\n+trait Translation<E: EuclideanSpace> {\n+    fn to_vector(&self) -> E::Coordinates;\n+\n+    fn powf(&self, n: <E::Coordinates as Module>::Ring) -> E::Coordinates {\n+        self.to_vector() * n\n+    }\n+}"}, {"sha": "52652cedec961824ce6b2203ca46e7e751d88aec", "filename": "src/test/ui/associated-types/issue-39532.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-39532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fassociated-types%2Fissue-39532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-39532.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+#![allow(unused)]\n+\n+trait Foo {\n+    type Bar;\n+    type Baz: Bar<Self::Bar>;\n+}\n+\n+trait Bar<T> {}\n+\n+fn x<T: Foo<Bar = U>, U>(t: &T) {}\n+\n+fn main() {}"}, {"sha": "ab10e5f1810bdb63fba5094931b31e7d617c569f", "filename": "src/test/ui/async-await/issues/issue-62097.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -26,4 +26,5 @@ LL |         foo(|| self.bar()).await;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0373`.\n+Some errors have detailed explanations: E0373, E0521.\n+For more information about an error, try `rustc --explain E0373`."}, {"sha": "feb098c598588ac24209c0601882919364ad60c6", "filename": "src/test/ui/borrowck/issue-45983.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,3 +10,4 @@ LL |     give_any(|y| x = Some(y));\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "9d86286b8676c7095ddb820c08c5511bcf73d2dc", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -12,3 +12,4 @@ LL |         lines_to_use.push(installed_id);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "14393bc8eeede5574d85b92a57934430f4e599ef", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,3 +10,4 @@ LL |     with_int(|y| x = Some(y));\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "a23fdacdee641bb89013fa3693e36daeb1fcf292", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,3 +10,4 @@ LL |     with_int(|y| x = Some(y));\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "153f77c8913acac41c4ca987826366ecae98e28b", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,3 +10,4 @@ LL |     with_int(&mut |y| x = Some(y));\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "0d97fa7e230149898257e83c906c3de1e69eff1b", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -20,3 +20,4 @@ LL |         f = Some(x);\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "92547ca4796a4304131889cbc305423e1dca5deb", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -16,7 +16,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n@@ -28,7 +28,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n@@ -40,7 +40,7 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; std::mem::size_of::<T>() - 1]: Sized\n   --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]"}, {"sha": "00efb61000401b3d3a6147b7e17827ab0cfbb09e", "filename": "src/test/ui/const-generics/const_evaluatable_checked/different-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fdifferent-fn.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -4,7 +4,7 @@ error: unconstrained generic constant\n LL |     [0; size_of::<Foo<T>>()]\n    |         ^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider adding a `where` bound for this expression\n+help: try adding a `where` bound using this expression: where [u8; size_of::<Foo<T>>()]: Sized\n   --> $DIR/different-fn.rs:10:9\n    |\n LL |     [0; size_of::<Foo<T>>()]"}, {"sha": "498a2ae753361358dc0cd056633e46ad4fec46ca", "filename": "src/test/ui/const_evaluatable/needs_where_clause.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,14 @@\n+#![crate_type = \"lib\"]\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+const fn complex_maths<T>(n : usize) -> usize {\n+  2 * n + 1\n+}\n+\n+struct Example<T, const N: usize> {\n+  a: [f32; N],\n+  b: [f32; complex_maths::<T>(N)],\n+  //~^ ERROR unconstrained\n+  c: T,\n+}"}, {"sha": "e991c508c03f38aaa4b455381ee7030476c6ed7c", "filename": "src/test/ui/const_evaluatable/needs_where_clause.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fneeds_where_clause.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/needs_where_clause.rs:11:6\n+   |\n+LL |   b: [f32; complex_maths::<T>(N)],\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try adding a `where` bound using this expression: where [u8; complex_maths::<T>(N)]: Sized\n+  --> $DIR/needs_where_clause.rs:11:12\n+   |\n+LL |   b: [f32; complex_maths::<T>(N)],\n+   |            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "12f4a22038ef77c92d2a7ca25dbfb891bead2e7b", "filename": "src/test/ui/const_evaluatable/no_where_clause.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,29 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features, unused)]\n+\n+const fn complex_maths(n : usize) -> usize {\n+  2 * n + 1\n+}\n+\n+pub struct Example<const N: usize> {\n+  a: [f32; N],\n+  b: [f32; complex_maths(N)],\n+  //~^ ERROR unconstrained generic\n+}\n+\n+impl<const N: usize> Example<N> {\n+  pub fn new() -> Self {\n+    Self {\n+      a: [0.; N],\n+      b: [0.; complex_maths(N)],\n+    }\n+  }\n+}\n+\n+impl Example<2> {\n+  pub fn sum(&self) -> f32 {\n+    self.a.iter().sum::<f32>() + self.b.iter().sum::<f32>()\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "65100909e53d508fb33f75dbb2c6e1bc06b0d501", "filename": "src/test/ui/const_evaluatable/no_where_clause.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst_evaluatable%2Fno_where_clause.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,14 @@\n+error: unconstrained generic constant\n+  --> $DIR/no_where_clause.rs:10:6\n+   |\n+LL |   b: [f32; complex_maths(N)],\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try adding a `where` bound using this expression: where [u8; complex_maths(N)]: Sized\n+  --> $DIR/no_where_clause.rs:10:12\n+   |\n+LL |   b: [f32; complex_maths(N)],\n+   |            ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5fc810040982201142ee2cbcf5044662f4875344", "filename": "src/test/ui/generator/ref-escapes-but-not-over-yield.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-escapes-but-not-over-yield.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -12,3 +12,4 @@ LL |         a = &b;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "d72435bc631114bfbf98b95ac6f940f070cbd4c7", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -10,3 +10,4 @@ LL |     static_val(x);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "51d86eaf9e60c4c977d34c90ee56a5604e929410", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -8,3 +8,4 @@ LL |         self.a();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "075c141ed7af6f61d4cc074deadcd9dfe454ac18", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -8,3 +8,4 @@ LL |         self.foo();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "57dab46df6b6a297d550594c02cd6a8110e13b79", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -22,3 +22,4 @@ LL |     lib::ref_obj(x)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "0932f9415480c907924b838f37867c236f156830", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -83,4 +83,5 @@ LL | }\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors have detailed explanations: E0521, E0597.\n+For more information about an error, try `rustc --explain E0521`."}, {"sha": "bf6e2a922ed088f0112f71f0e5997c3cfdd37396", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -51,3 +51,4 @@ LL | |     });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "a3d993848cbaad75b097d6bbc2425ced11ae3b18", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -51,3 +51,4 @@ LL | |     });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "bfe98a71a99b16832dd00e1207426960d110e838", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -106,3 +106,4 @@ LL |         Bar2::new(&self)\n \n error: aborting due to 9 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "37e751aeb67b7adbdc899197e27ba50dabd6450f", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -38,3 +38,4 @@ LL |         b(x);\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "42dae7e40dbb376f8726c4626b2d96fd7621f4f8", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -23,3 +23,4 @@ LL |     load0(ss)\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "e606612e1086248f13b8988f3242b3b87df9d832", "filename": "src/test/ui/panics/panic-2021.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,9 @@\n+// edition:2021\n+\n+fn main() {\n+    panic!(123); //~ ERROR: format argument must be a string literal\n+    panic!(\"{}\"); //~ ERROR: 1 positional argument in format string\n+    core::panic!(\"{}\"); //~ ERROR: 1 positional argument in format string\n+    assert!(false, 123); //~ ERROR: format argument must be a string literal\n+    assert!(false, \"{}\"); //~ ERROR: 1 positional argument in format string\n+}"}, {"sha": "59b1e4f7a985871fcb1c11212957898faccebab9", "filename": "src/test/ui/panics/panic-2021.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-2021.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -0,0 +1,42 @@\n+error: format argument must be a string literal\n+  --> $DIR/panic-2021.rs:4:12\n+   |\n+LL |     panic!(123);\n+   |            ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     panic!(\"{}\", 123);\n+   |            ^^^^^\n+\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/panic-2021.rs:5:13\n+   |\n+LL |     panic!(\"{}\");\n+   |             ^^\n+\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/panic-2021.rs:6:19\n+   |\n+LL |     core::panic!(\"{}\");\n+   |                   ^^\n+\n+error: format argument must be a string literal\n+  --> $DIR/panic-2021.rs:7:20\n+   |\n+LL |     assert!(false, 123);\n+   |                    ^^^\n+   |\n+help: you might be missing a string literal to format with\n+   |\n+LL |     assert!(false, \"{}\", 123);\n+   |                    ^^^^^\n+\n+error: 1 positional argument in format string, but no arguments were given\n+  --> $DIR/panic-2021.rs:8:21\n+   |\n+LL |     assert!(false, \"{}\");\n+   |                     ^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "fafff35e4155f8bb0ec9e3b6349b47551cd5227e", "filename": "src/test/ui/regions/issue-78262.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-78262.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -8,3 +8,4 @@ LL |     let f = |x: &dyn TT| x.func();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "89a22adc8f02128e7cfd0b636c830f0d1fdd75a7", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -11,3 +11,4 @@ LL |         x.unwrap()\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "ed7b17c207c30d62c4da8196530da024293738c6", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -13,3 +13,4 @@ LL |     f.method(b);\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "60754f4c2284cd477323bed63b8b72e91f26723a", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -50,4 +50,5 @@ LL |         if false { return x; }\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0597`.\n+Some errors have detailed explanations: E0521, E0597.\n+For more information about an error, try `rustc --explain E0521`."}, {"sha": "ed9aef6e374449989eaa0980bb2279370c676db0", "filename": "src/test/ui/suggestions/field-access.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.fixed?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -18,17 +18,17 @@ union Foo {\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a.b {}; //~ ERROR mismatched types [E0308]\n-    //~^ HELP you might have meant to use field `b` of type `B`\n+    //~^ HELP you might have meant to use field `b` whose type is `B`\n     match a.b {\n-        //~^ HELP you might have meant to use field `b` of type `B`\n-        //~| HELP you might have meant to use field `b` of type `B`\n+        //~^ HELP you might have meant to use field `b` whose type is `B`\n+        //~| HELP you might have meant to use field `b` whose type is `B`\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n \n     let foo = Foo { bar: 42 };\n     match unsafe { foo.bar } {\n-        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        //~^ HELP you might have meant to use field `bar` whose type is `u32`\n         1u32 => (), //~ ERROR mismatched types [E0308]\n         _ => (),\n     }"}, {"sha": "d80488e8a45f51725334465c12a5874ef8f952c6", "filename": "src/test/ui/suggestions/field-access.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -18,17 +18,17 @@ union Foo {\n fn main() {\n     let a = A { b: B::Fst };\n     if let B::Fst = a {}; //~ ERROR mismatched types [E0308]\n-    //~^ HELP you might have meant to use field `b` of type `B`\n+    //~^ HELP you might have meant to use field `b` whose type is `B`\n     match a {\n-        //~^ HELP you might have meant to use field `b` of type `B`\n-        //~| HELP you might have meant to use field `b` of type `B`\n+        //~^ HELP you might have meant to use field `b` whose type is `B`\n+        //~| HELP you might have meant to use field `b` whose type is `B`\n         B::Fst => (), //~ ERROR mismatched types [E0308]\n         B::Snd => (), //~ ERROR mismatched types [E0308]\n     }\n \n     let foo = Foo { bar: 42 };\n     match foo {\n-        //~^ HELP you might have meant to use field `bar` of type `u32`\n+        //~^ HELP you might have meant to use field `bar` whose type is `u32`\n         1u32 => (), //~ ERROR mismatched types [E0308]\n         _ => (),\n     }"}, {"sha": "b113b3746d87ef3de0fb1a6d010a3214c89d877a", "filename": "src/test/ui/suggestions/field-access.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffield-access.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -9,7 +9,7 @@ LL |     if let B::Fst = a {};\n    |            |\n    |            expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     if let B::Fst = a.b {};\n    |                     ^^^\n@@ -26,7 +26,7 @@ LL |     match a {\n LL |         B::Fst => (),\n    |         ^^^^^^ expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     match a.b {\n    |           ^^^\n@@ -43,7 +43,7 @@ LL |     match a {\n LL |         B::Snd => (),\n    |         ^^^^^^ expected struct `A`, found enum `B`\n    |\n-help: you might have meant to use field `b` of type `B`\n+help: you might have meant to use field `b` whose type is `B`\n    |\n LL |     match a.b {\n    |           ^^^\n@@ -57,7 +57,7 @@ LL |\n LL |         1u32 => (),\n    |         ^^^^ expected union `Foo`, found `u32`\n    |\n-help: you might have meant to use field `bar` of type `u32`\n+help: you might have meant to use field `bar` whose type is `u32`\n    |\n LL |     match unsafe { foo.bar } {\n    |           ^^^^^^^^^^^^^^^^^^"}, {"sha": "6c235ae8f02773e1d8fa02ea1edb0e10b2ff0f08", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -40,3 +40,4 @@ LL |         MyTrait::use_self(val)\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "ec6e107d547f0e6d7ff63e4866a641e3d2c4d1a5", "filename": "src/tools/clippy/.editorconfig", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftools%2Fclippy%2F.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftools%2Fclippy%2F.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.editorconfig?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -13,6 +13,8 @@ indent_style = space\n indent_size = 4\n \n [*.md]\n+# double whitespace at end of line\n+# denotes a line break in Markdown\n trim_trailing_whitespace = false\n \n [*.yml]"}, {"sha": "292850bd9e277f55771afbe6e90428ac42ffd437", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=d95d4f0189e02ac2cd9056a0b39b0d5ab94fe69e", "patch": "@@ -38,6 +38,7 @@ const OS_TABLE: &[(&str, &str)] = &[\n \n const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"aarch64\", \"aarch64\"),\n+    (\"aarch64_be\", \"aarch64\"),\n     (\"amd64\", \"x86_64\"),\n     (\"arm\", \"arm\"),\n     (\"arm64\", \"aarch64\"),\n@@ -110,6 +111,7 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n ];\n \n const BIG_ENDIAN: &[&str] = &[\n+    \"aarch64_be\",\n     \"armebv7r\",\n     \"mips\",\n     \"mips64\",\n@@ -160,7 +162,9 @@ pub fn matches_env(triple: &str, name: &str) -> bool {\n }\n \n pub fn get_pointer_width(triple: &str) -> &'static str {\n-    if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\")) || triple.starts_with(\"s390x\") {\n+    if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\") && !triple.ends_with(\"gnu_ilp32\"))\n+        || triple.starts_with(\"s390x\")\n+    {\n         \"64bit\"\n     } else if triple.starts_with(\"avr\") {\n         \"16bit\""}]}