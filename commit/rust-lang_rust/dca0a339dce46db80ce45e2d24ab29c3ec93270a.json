{"sha": "dca0a339dce46db80ce45e2d24ab29c3ec93270a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTBhMzM5ZGNlNDZkYjgwY2U0NWUyZDI0YWIyOWMzZWM5MzI3MGE=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2019-12-24T08:30:27Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2019-12-25T01:12:08Z"}, "message": "Run RustFmt", "tree": {"sha": "9541aec4a6c0a65432abd45c36790857f306d1b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9541aec4a6c0a65432abd45c36790857f306d1b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca0a339dce46db80ce45e2d24ab29c3ec93270a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca0a339dce46db80ce45e2d24ab29c3ec93270a", "html_url": "https://github.com/rust-lang/rust/commit/dca0a339dce46db80ce45e2d24ab29c3ec93270a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca0a339dce46db80ce45e2d24ab29c3ec93270a/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e", "html_url": "https://github.com/rust-lang/rust/commit/d0dc9323e18f8e1884b571a3968c13d0cf1d5a1e"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "a89b170c649f6ac6dd9ddc6ab669d455bd72b8fe", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dca0a339dce46db80ce45e2d24ab29c3ec93270a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca0a339dce46db80ce45e2d24ab29c3ec93270a/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=dca0a339dce46db80ce45e2d24ab29c3ec93270a", "patch": "@@ -625,7 +625,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     projection: &[],\n                                 } = place.as_ref()\n                                 {\n-                                    let c = bx.tcx().const_eval_promoted(Instance::new(def_id, self.monomorphize(&substs)), promoted);\n+                                    let c = bx.tcx().const_eval_promoted(\n+                                        Instance::new(def_id, self.monomorphize(&substs)),\n+                                        promoted,\n+                                    );\n                                     let (llval, ty) = self.simd_shuffle_indices(\n                                         &bx,\n                                         terminator.source_info.span,"}]}