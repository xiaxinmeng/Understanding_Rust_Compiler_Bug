{"sha": "828febf9e0fbd653cdcb2a949ec3defded69dc3f", "node_id": "C_kwDOAAsO6NoAKDgyOGZlYmY5ZTBmYmQ2NTNjZGNiMmE5NDllYzNkZWZkZWQ2OWRjM2Y", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2022-01-16T04:24:38Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2022-01-16T04:24:38Z"}, "message": "Clear up discriminants with more examples", "tree": {"sha": "cabb69305fd9303ca34674df12b6dd02c4bbf1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabb69305fd9303ca34674df12b6dd02c4bbf1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828febf9e0fbd653cdcb2a949ec3defded69dc3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828febf9e0fbd653cdcb2a949ec3defded69dc3f", "html_url": "https://github.com/rust-lang/rust/commit/828febf9e0fbd653cdcb2a949ec3defded69dc3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828febf9e0fbd653cdcb2a949ec3defded69dc3f/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f33b4eed15a6c6e620e502e74f8c01e6f0702e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f33b4eed15a6c6e620e502e74f8c01e6f0702e9", "html_url": "https://github.com/rust-lang/rust/commit/8f33b4eed15a6c6e620e502e74f8c01e6f0702e9"}], "stats": {"total": 70, "additions": 52, "deletions": 18}, "files": [{"sha": "a404b699de1617df2c335132d40c583b9a018fa8", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/828febf9e0fbd653cdcb2a949ec3defded69dc3f/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828febf9e0fbd653cdcb2a949ec3defded69dc3f/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=828febf9e0fbd653cdcb2a949ec3defded69dc3f", "patch": "@@ -661,20 +661,37 @@ impl<T: Clone> Clone for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n-/// This means variants at the top are less than variants at the bottom.\n-/// Here's an example:\n+/// This trait can be used with `#[derive]`.\n ///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n+/// }\n+///\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n+///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+////\n /// ```\n /// #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-/// enum Size {\n-///     Small,\n-///     Large,\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n /// }\n ///\n-/// assert!(Size::Small < Size::Large);\n+/// assert!(E::Bottom < E::Top);\n /// ```\n ///\n /// ## Lexicographical comparison\n@@ -895,20 +912,37 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n-/// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n-/// This means variants at the top are less than variants at the bottom.\n-/// Here's an example:\n+/// This trait can be used with `#[derive]`.\n+///\n+/// When `derive`d on structs, it will produce a\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering\n+/// based on the top-to-bottom declaration order of the struct's members.\n+///\n+/// When `derive`d on enums, variants are ordered by their discriminants.\n+/// By default, the discriminant is smallest for variants at the top, and\n+/// largest for variants at the bottom. Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum E {\n+///     Top,\n+///     Bottom,\n+/// }\n+///\n+/// assert!(E::Top < E::Bottom);\n+/// ```\n ///\n+/// However, manually setting the discriminants can override this default\n+/// behavior:\n+////\n /// ```\n /// #[derive(PartialEq, PartialOrd)]\n-/// enum Size {\n-///     Small,\n-///     Large,\n+/// enum E {\n+///     Top = 2,\n+///     Bottom = 1,\n /// }\n ///\n-/// assert!(Size::Small < Size::Large);\n+/// assert!(E::Bottom < E::Top);\n /// ```\n ///\n /// ## How can I implement `PartialOrd`?"}]}