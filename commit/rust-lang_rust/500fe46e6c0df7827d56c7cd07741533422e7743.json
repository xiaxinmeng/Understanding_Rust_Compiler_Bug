{"sha": "500fe46e6c0df7827d56c7cd07741533422e7743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGZlNDZlNmMwZGY3ODI3ZDU2YzdjZDA3NzQxNTMzNDIyZTc3NDM=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:34:51Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-25T16:37:40Z"}, "message": "Remove cargo watch supporting code and tests from vscode extension", "tree": {"sha": "7759cb6da5faa35954d85f3a091a62bba2b4142d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7759cb6da5faa35954d85f3a091a62bba2b4142d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500fe46e6c0df7827d56c7cd07741533422e7743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500fe46e6c0df7827d56c7cd07741533422e7743", "html_url": "https://github.com/rust-lang/rust/commit/500fe46e6c0df7827d56c7cd07741533422e7743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500fe46e6c0df7827d56c7cd07741533422e7743/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "url": "https://api.github.com/repos/rust-lang/rust/commits/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "html_url": "https://github.com/rust-lang/rust/commit/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29"}], "stats": {"total": 1684, "additions": 0, "deletions": 1684}, "files": [{"sha": "d874e99bc556dc198bc44ff0fd494c66c1d44caf", "filename": "editors/code/src/test/fixtures/rust-diagnostics/clippy/trivially_copy_pass_by_ref.json", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fclippy%2Ftrivially_copy_pass_by_ref.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,110 +0,0 @@\n-{\n-    \"message\": \"this argument is passed by reference, but would be more efficient if passed by value\",\n-    \"code\": {\n-        \"code\": \"clippy::trivially_copy_pass_by_ref\",\n-        \"explanation\": null\n-    },\n-    \"level\": \"warning\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"compiler/mir/tagset.rs\",\n-            \"byte_start\": 941,\n-            \"byte_end\": 946,\n-            \"line_start\": 42,\n-            \"line_end\": 42,\n-            \"column_start\": 24,\n-            \"column_end\": 29,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n-                    \"highlight_start\": 24,\n-                    \"highlight_end\": 29\n-                }\n-            ],\n-            \"label\": null,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [\n-        {\n-            \"message\": \"lint level defined here\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"compiler/lib.rs\",\n-                    \"byte_start\": 8,\n-                    \"byte_end\": 19,\n-                    \"line_start\": 1,\n-                    \"line_end\": 1,\n-                    \"column_start\": 9,\n-                    \"column_end\": 20,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"#![warn(clippy::all)]\",\n-                            \"highlight_start\": 9,\n-                            \"highlight_end\": 20\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"consider passing by value instead\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"compiler/mir/tagset.rs\",\n-                    \"byte_start\": 941,\n-                    \"byte_end\": 946,\n-                    \"line_start\": 42,\n-                    \"line_end\": 42,\n-                    \"column_start\": 24,\n-                    \"column_end\": 29,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"    pub fn is_disjoint(&self, other: Self) -> bool {\",\n-                            \"highlight_start\": 24,\n-                            \"highlight_end\": 29\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": \"self\",\n-                    \"suggestion_applicability\": \"Unspecified\",\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        }\n-    ],\n-    \"rendered\": \"warning: this argument is passed by reference, but would be more efficient if passed by value\\n  --> compiler/mir/tagset.rs:42:24\\n   |\\n42 |     pub fn is_disjoint(&self, other: Self) -> bool {\\n   |                        ^^^^^ help: consider passing by value instead: `self`\\n   |\\nnote: lint level defined here\\n  --> compiler/lib.rs:1:9\\n   |\\n1  | #![warn(clippy::all)]\\n   |         ^^^^^^^^^^^\\n   = note: #[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]\\n   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\\n\\n\"\n-}"}, {"sha": "ea5c976d1d4198f68a3cb07947625357884791cc", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0053.json", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0053.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,42 +0,0 @@\n-{\n-    \"message\": \"method `next` has an incompatible type for trait\",\n-    \"code\": {\n-        \"code\": \"E0053\",\n-        \"explanation\": \"\\nThe parameters of any trait method must match between a trait implementation\\nand the trait definition.\\n\\nHere are a couple examples of this error:\\n\\n```compile_fail,E0053\\ntrait Foo {\\n    fn foo(x: u16);\\n    fn bar(&self);\\n}\\n\\nstruct Bar;\\n\\nimpl Foo for Bar {\\n    // error, expected u16, found i16\\n    fn foo(x: i16) { }\\n\\n    // error, types differ in mutability\\n    fn bar(&mut self) { }\\n}\\n```\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"compiler/ty/list_iter.rs\",\n-            \"byte_start\": 1307,\n-            \"byte_end\": 1350,\n-            \"line_start\": 52,\n-            \"line_end\": 52,\n-            \"column_start\": 5,\n-            \"column_end\": 48,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    fn next(&self) -> Option<&'list ty::Ref<M>> {\",\n-                    \"highlight_start\": 5,\n-                    \"highlight_end\": 48\n-                }\n-            ],\n-            \"label\": \"types differ in mutability\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [\n-        {\n-            \"message\": \"expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        }\n-    ],\n-    \"rendered\": \"error[E0053]: method `next` has an incompatible type for trait\\n  --> compiler/ty/list_iter.rs:52:5\\n   |\\n52 |     fn next(&self) -> Option<&'list ty::Ref<M>> {\\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ in mutability\\n   |\\n   = note: expected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n              found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\\n\\n\"\n-}"}, {"sha": "3154d1098cdccd54ce706625cfa0191ffe284556", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0061.json", "status": "removed", "additions": 0, "deletions": 114, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0061.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,114 +0,0 @@\n-{\n-    \"message\": \"this function takes 2 parameters but 3 parameters were supplied\",\n-    \"code\": {\n-        \"code\": \"E0061\",\n-        \"explanation\": \"\\nThe number of arguments passed to a function must match the number of arguments\\nspecified in the function signature.\\n\\nFor example, a function like:\\n\\n```\\nfn f(a: u16, b: &str) {}\\n```\\n\\nMust always be called with exactly two arguments, e.g., `f(2, \\\"test\\\")`.\\n\\nNote that Rust does not have a notion of optional function arguments or\\nvariadic functions (except for its C-FFI).\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"compiler/ty/select.rs\",\n-            \"byte_start\": 8787,\n-            \"byte_end\": 9241,\n-            \"line_start\": 219,\n-            \"line_end\": 231,\n-            \"column_start\": 5,\n-            \"column_end\": 6,\n-            \"is_primary\": false,\n-            \"text\": [\n-                {\n-                    \"text\": \"    pub fn add_evidence(\",\n-                    \"highlight_start\": 5,\n-                    \"highlight_end\": 25\n-                },\n-                {\n-                    \"text\": \"        &mut self,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 19\n-                },\n-                {\n-                    \"text\": \"        target_poly: &ty::Ref<ty::Poly>,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 41\n-                },\n-                {\n-                    \"text\": \"        evidence_poly: &ty::Ref<ty::Poly>,\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 43\n-                },\n-                {\n-                    \"text\": \"    ) {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 8\n-                },\n-                {\n-                    \"text\": \"        match target_poly {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 28\n-                },\n-                {\n-                    \"text\": \"            ty::Ref::Var(tvar, _) => self.add_var_evidence(tvar, evidence_poly),\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 81\n-                },\n-                {\n-                    \"text\": \"            ty::Ref::Fixed(target_ty) => {\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 43\n-                },\n-                {\n-                    \"text\": \"                let evidence_ty = evidence_poly.resolve_to_ty();\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 65\n-                },\n-                {\n-                    \"text\": \"                self.add_evidence_ty(target_ty, evidence_poly, evidence_ty)\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 76\n-                },\n-                {\n-                    \"text\": \"            }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 14\n-                },\n-                {\n-                    \"text\": \"        }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 10\n-                },\n-                {\n-                    \"text\": \"    }\",\n-                    \"highlight_start\": 1,\n-                    \"highlight_end\": 6\n-                }\n-            ],\n-            \"label\": \"defined here\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        },\n-        {\n-            \"file_name\": \"compiler/ty/select.rs\",\n-            \"byte_start\": 4045,\n-            \"byte_end\": 4057,\n-            \"line_start\": 104,\n-            \"line_end\": 104,\n-            \"column_start\": 18,\n-            \"column_end\": 30,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"            self.add_evidence(target_fixed, evidence_fixed, false);\",\n-                    \"highlight_start\": 18,\n-                    \"highlight_end\": 30\n-                }\n-            ],\n-            \"label\": \"expected 2 parameters\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [],\n-    \"rendered\": \"error[E0061]: this function takes 2 parameters but 3 parameters were supplied\\n   --> compiler/ty/select.rs:104:18\\n    |\\n104 |               self.add_evidence(target_fixed, evidence_fixed, false);\\n    |                    ^^^^^^^^^^^^ expected 2 parameters\\n...\\n219 | /     pub fn add_evidence(\\n220 | |         &mut self,\\n221 | |         target_poly: &ty::Ref<ty::Poly>,\\n222 | |         evidence_poly: &ty::Ref<ty::Poly>,\\n...   |\\n230 | |         }\\n231 | |     }\\n    | |_____- defined here\\n\\n\"\n-}"}, {"sha": "bfef33c7de786dd8f8dfd2a5a415b96767ac62bf", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0277.json", "status": "removed", "additions": 0, "deletions": 261, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0277.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,261 +0,0 @@\n-{\n-    \"rendered\": \"error[E0277]: can't compare `{integer}` with `&str`\\n --> src/main.rs:2:5\\n  |\\n2 |     assert_eq!(1, \\\"love\\\");\\n  |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &str`\\n  |\\n  = help: the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\\n  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\\n\\n\",\n-    \"children\": [\n-        {\n-            \"children\": [],\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"message\": \"the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n-            \"rendered\": null,\n-            \"spans\": []\n-        }\n-    ],\n-    \"code\": {\n-        \"code\": \"E0277\",\n-        \"explanation\": \"\\nYou tried to use a type which doesn't implement some trait in a place which\\nexpected that trait. Erroneous code example:\\n\\n```compile_fail,E0277\\n// here we declare the Foo trait with a bar method\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\n// we now declare a function which takes an object implementing the Foo trait\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar();\\n}\\n\\nfn main() {\\n    // we now call the method with the i32 type, which doesn't implement\\n    // the Foo trait\\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\\n}\\n```\\n\\nIn order to fix this error, verify that the type you're using does implement\\nthe trait. Example:\\n\\n```\\ntrait Foo {\\n    fn bar(&self);\\n}\\n\\nfn some_func<T: Foo>(foo: T) {\\n    foo.bar(); // we can now use this method since i32 implements the\\n               // Foo trait\\n}\\n\\n// we implement the trait on the i32 type\\nimpl Foo for i32 {\\n    fn bar(&self) {}\\n}\\n\\nfn main() {\\n    some_func(5i32); // ok!\\n}\\n```\\n\\nOr in a generic context, an erroneous code example would look like:\\n\\n```compile_fail,E0277\\nfn some_func<T>(foo: T) {\\n    println!(\\\"{:?}\\\", foo); // error: the trait `core::fmt::Debug` is not\\n                           //        implemented for the type `T`\\n}\\n\\nfn main() {\\n    // We now call the method with the i32 type,\\n    // which *does* implement the Debug trait.\\n    some_func(5i32);\\n}\\n```\\n\\nNote that the error here is in the definition of the generic function: Although\\nwe only call it with a parameter that does implement `Debug`, the compiler\\nstill rejects the function: It must work with all possible input types. In\\norder to make this example compile, we need to restrict the generic type we're\\naccepting:\\n\\n```\\nuse std::fmt;\\n\\n// Restrict the input type to types that implement Debug.\\nfn some_func<T: fmt::Debug>(foo: T) {\\n    println!(\\\"{:?}\\\", foo);\\n}\\n\\nfn main() {\\n    // Calling the method is still fine, as i32 implements Debug.\\n    some_func(5i32);\\n\\n    // This would fail to compile now:\\n    // struct WithoutDebug;\\n    // some_func(WithoutDebug);\\n}\\n```\\n\\nRust only looks at the signature of the called function, as such it must\\nalready specify all requirements that will be used for every type parameter.\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"message\": \"can't compare `{integer}` with `&str`\",\n-    \"spans\": [\n-        {\n-            \"byte_end\": 155,\n-            \"byte_start\": 153,\n-            \"column_end\": 33,\n-            \"column_start\": 31,\n-            \"expansion\": {\n-                \"def_site_span\": {\n-                    \"byte_end\": 940,\n-                    \"byte_start\": 0,\n-                    \"column_end\": 6,\n-                    \"column_start\": 1,\n-                    \"expansion\": null,\n-                    \"file_name\": \"<::core::macros::assert_eq macros>\",\n-                    \"is_primary\": false,\n-                    \"label\": null,\n-                    \"line_end\": 36,\n-                    \"line_start\": 1,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"text\": [\n-                        {\n-                            \"highlight_end\": 35,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"($ left : expr, $ right : expr) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 3,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({\"\n-                        },\n-                        {\n-                            \"highlight_end\": 33,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     match (& $ left, & $ right)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 34,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         (left_val, right_val) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 46,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             if ! (* left_val == * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 25,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 panic !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 57,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n-                        },\n-                        {\n-                            \"highlight_end\": 16,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"  left: `{:?}`,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 18,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" right: `{:?}`\\\"#,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 47,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  & * left_val, & * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 42,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" }) ; ($ left : expr, $ right : expr,) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 49,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({ $ crate :: assert_eq ! ($ left, $ right) }) ;\"\n-                        },\n-                        {\n-                            \"highlight_end\": 53,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"($ left : expr, $ right : expr, $ ($ arg : tt) +) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 3,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"({\"\n-                        },\n-                        {\n-                            \"highlight_end\": 37,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     match (& ($ left), & ($ right))\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 34,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         (left_val, right_val) =>\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 46,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             if ! (* left_val == * right_val)\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             {\"\n-                        },\n-                        {\n-                            \"highlight_end\": 25,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 panic !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 57,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                 (r#\\\"assertion failed: `(left == right)`\"\n-                        },\n-                        {\n-                            \"highlight_end\": 16,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"  left: `{:?}`,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 22,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" right: `{:?}`: {}\\\"#,\"\n-                        },\n-                        {\n-                            \"highlight_end\": 72,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  & * left_val, & * right_val, $ crate :: format_args !\"\n-                        },\n-                        {\n-                            \"highlight_end\": 33,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"                  ($ ($ arg) +))\"\n-                        },\n-                        {\n-                            \"highlight_end\": 15,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"             }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 11,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"         }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 7,\n-                            \"highlight_start\": 1,\n-                            \"text\": \"     }\"\n-                        },\n-                        {\n-                            \"highlight_end\": 6,\n-                            \"highlight_start\": 1,\n-                            \"text\": \" }) ;\"\n-                        }\n-                    ]\n-                },\n-                \"macro_decl_name\": \"assert_eq!\",\n-                \"span\": {\n-                    \"byte_end\": 38,\n-                    \"byte_start\": 16,\n-                    \"column_end\": 27,\n-                    \"column_start\": 5,\n-                    \"expansion\": null,\n-                    \"file_name\": \"src/main.rs\",\n-                    \"is_primary\": false,\n-                    \"label\": null,\n-                    \"line_end\": 2,\n-                    \"line_start\": 2,\n-                    \"suggested_replacement\": null,\n-                    \"suggestion_applicability\": null,\n-                    \"text\": [\n-                        {\n-                            \"highlight_end\": 27,\n-                            \"highlight_start\": 5,\n-                            \"text\": \"    assert_eq!(1, \\\"love\\\");\"\n-                        }\n-                    ]\n-                }\n-            },\n-            \"file_name\": \"<::core::macros::assert_eq macros>\",\n-            \"is_primary\": true,\n-            \"label\": \"no implementation for `{integer} == &str`\",\n-            \"line_end\": 7,\n-            \"line_start\": 7,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"text\": [\n-                {\n-                    \"highlight_end\": 33,\n-                    \"highlight_start\": 31,\n-                    \"text\": \"             if ! (* left_val == * right_val)\"\n-                }\n-            ]\n-        }\n-    ]\n-}"}, {"sha": "fb23824a3c7fef3983f81688a7925cb71ac27648", "filename": "editors/code/src/test/fixtures/rust-diagnostics/error/E0308.json", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Ferror%2FE0308.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,33 +0,0 @@\n-{\n-    \"message\": \"mismatched types\",\n-    \"code\": {\n-        \"code\": \"E0308\",\n-        \"explanation\": \"\\nThis error occurs when the compiler was unable to infer the concrete type of a\\nvariable. It can occur for several cases, the most common of which is a\\nmismatch in the expected type that the compiler inferred for a variable's\\ninitializing expression, and the actual type explicitly assigned to the\\nvariable.\\n\\nFor example:\\n\\n```compile_fail,E0308\\nlet x: i32 = \\\"I am not a number!\\\";\\n//     ~~~   ~~~~~~~~~~~~~~~~~~~~\\n//      |             |\\n//      |    initializing expression;\\n//      |    compiler infers type `&str`\\n//      |\\n//    type `i32` assigned to variable `x`\\n```\\n\"\n-    },\n-    \"level\": \"error\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"runtime/compiler_support.rs\",\n-            \"byte_start\": 1589,\n-            \"byte_end\": 1594,\n-            \"line_start\": 48,\n-            \"line_end\": 48,\n-            \"column_start\": 65,\n-            \"column_end\": 70,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    let layout = alloc::Layout::from_size_align_unchecked(size, align);\",\n-                    \"highlight_start\": 65,\n-                    \"highlight_end\": 70\n-                }\n-            ],\n-            \"label\": \"expected usize, found u32\",\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [],\n-    \"rendered\": \"error[E0308]: mismatched types\\n  --> runtime/compiler_support.rs:48:65\\n   |\\n48 |     let layout = alloc::Layout::from_size_align_unchecked(size, align);\\n   |                                                                 ^^^^^ expected usize, found u32\\n\\n\"\n-}"}, {"sha": "d1e2be722147045a184d14fe1c1cc5864b730059", "filename": "editors/code/src/test/fixtures/rust-diagnostics/warning/unused_variables.json", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Ffixtures%2Frust-diagnostics%2Fwarning%2Funused_variables.json?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,72 +0,0 @@\n-{\n-    \"message\": \"unused variable: `foo`\",\n-    \"code\": {\n-        \"code\": \"unused_variables\",\n-        \"explanation\": null\n-    },\n-    \"level\": \"warning\",\n-    \"spans\": [\n-        {\n-            \"file_name\": \"driver/subcommand/repl.rs\",\n-            \"byte_start\": 9228,\n-            \"byte_end\": 9231,\n-            \"line_start\": 291,\n-            \"line_end\": 291,\n-            \"column_start\": 9,\n-            \"column_end\": 12,\n-            \"is_primary\": true,\n-            \"text\": [\n-                {\n-                    \"text\": \"    let foo = 42;\",\n-                    \"highlight_start\": 9,\n-                    \"highlight_end\": 12\n-                }\n-            ],\n-            \"label\": null,\n-            \"suggested_replacement\": null,\n-            \"suggestion_applicability\": null,\n-            \"expansion\": null\n-        }\n-    ],\n-    \"children\": [\n-        {\n-            \"message\": \"#[warn(unused_variables)] on by default\",\n-            \"code\": null,\n-            \"level\": \"note\",\n-            \"spans\": [],\n-            \"children\": [],\n-            \"rendered\": null\n-        },\n-        {\n-            \"message\": \"consider prefixing with an underscore\",\n-            \"code\": null,\n-            \"level\": \"help\",\n-            \"spans\": [\n-                {\n-                    \"file_name\": \"driver/subcommand/repl.rs\",\n-                    \"byte_start\": 9228,\n-                    \"byte_end\": 9231,\n-                    \"line_start\": 291,\n-                    \"line_end\": 291,\n-                    \"column_start\": 9,\n-                    \"column_end\": 12,\n-                    \"is_primary\": true,\n-                    \"text\": [\n-                        {\n-                            \"text\": \"    let foo = 42;\",\n-                            \"highlight_start\": 9,\n-                            \"highlight_end\": 12\n-                        }\n-                    ],\n-                    \"label\": null,\n-                    \"suggested_replacement\": \"_foo\",\n-                    \"suggestion_applicability\": \"MachineApplicable\",\n-                    \"expansion\": null\n-                }\n-            ],\n-            \"children\": [],\n-            \"rendered\": null\n-        }\n-    ],\n-    \"rendered\": \"warning: unused variable: `foo`\\n   --> driver/subcommand/repl.rs:291:9\\n    |\\n291 |     let foo = 42;\\n    |         ^^^ help: consider prefixing with an underscore: `_foo`\\n    |\\n    = note: #[warn(unused_variables)] on by default\\n\\n\"\n-}"}, {"sha": "2b25eb705dd35743f432df559326249c34ba4244", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFix.test.ts", "status": "removed", "additions": 0, "deletions": 134, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFix.test.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,134 +0,0 @@\n-import * as assert from 'assert';\n-import * as vscode from 'vscode';\n-\n-import { SuggestionApplicability } from '../../../utils/diagnostics/rust';\n-import SuggestedFix from '../../../utils/diagnostics/SuggestedFix';\n-\n-const location1 = new vscode.Location(\n-    vscode.Uri.file('/file/1'),\n-    new vscode.Range(new vscode.Position(1, 2), new vscode.Position(3, 4)),\n-);\n-\n-const location2 = new vscode.Location(\n-    vscode.Uri.file('/file/2'),\n-    new vscode.Range(new vscode.Position(5, 6), new vscode.Position(7, 8)),\n-);\n-\n-describe('SuggestedFix', () => {\n-    describe('isEqual', () => {\n-        it('should treat identical instances as equal', () => {\n-            const suggestion1 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            const suggestion2 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            assert(suggestion1.isEqual(suggestion2));\n-        });\n-\n-        it('should treat instances with different titles as inequal', () => {\n-            const suggestion1 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            const suggestion2 = new SuggestedFix(\n-                'Not the same title!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            assert(!suggestion1.isEqual(suggestion2));\n-        });\n-\n-        it('should treat instances with different replacements as inequal', () => {\n-            const suggestion1 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            const suggestion2 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With something else!',\n-            );\n-\n-            assert(!suggestion1.isEqual(suggestion2));\n-        });\n-\n-        it('should treat instances with different locations as inequal', () => {\n-            const suggestion1 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            const suggestion2 = new SuggestedFix(\n-                'Replace me!',\n-                location2,\n-                'With this!',\n-            );\n-\n-            assert(!suggestion1.isEqual(suggestion2));\n-        });\n-\n-        it('should treat instances with different applicability as inequal', () => {\n-            const suggestion1 = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-                SuggestionApplicability.MachineApplicable,\n-            );\n-\n-            const suggestion2 = new SuggestedFix(\n-                'Replace me!',\n-                location2,\n-                'With this!',\n-                SuggestionApplicability.HasPlaceholders,\n-            );\n-\n-            assert(!suggestion1.isEqual(suggestion2));\n-        });\n-    });\n-\n-    describe('toCodeAction', () => {\n-        it('should map a simple suggestion', () => {\n-            const suggestion = new SuggestedFix(\n-                'Replace me!',\n-                location1,\n-                'With this!',\n-            );\n-\n-            const codeAction = suggestion.toCodeAction();\n-            assert.strictEqual(codeAction.kind, vscode.CodeActionKind.QuickFix);\n-            assert.strictEqual(codeAction.title, 'Replace me!');\n-            assert.strictEqual(codeAction.isPreferred, false);\n-\n-            const edit = codeAction.edit;\n-            if (!edit) {\n-                assert.fail('Code Action edit unexpectedly missing');\n-                return;\n-            }\n-\n-            const editEntries = edit.entries();\n-            assert.strictEqual(editEntries.length, 1);\n-\n-            const [[editUri, textEdits]] = editEntries;\n-            assert.strictEqual(editUri.toString(), location1.uri.toString());\n-\n-            assert.strictEqual(textEdits.length, 1);\n-            const [textEdit] = textEdits;\n-\n-            assert(textEdit.range.isEqual(location1.range));\n-            assert.strictEqual(textEdit.newText, 'With this!');\n-        });\n-    });\n-});"}, {"sha": "ef09013f413040e763c942dad1bc006a118a1312", "filename": "editors/code/src/test/utils/diagnotics/SuggestedFixCollection.test.ts", "status": "removed", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2FSuggestedFixCollection.test.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,127 +0,0 @@\n-import * as assert from 'assert';\n-import * as vscode from 'vscode';\n-\n-import SuggestedFix from '../../../utils/diagnostics/SuggestedFix';\n-import SuggestedFixCollection from '../../../utils/diagnostics/SuggestedFixCollection';\n-\n-const uri1 = vscode.Uri.file('/file/1');\n-const uri2 = vscode.Uri.file('/file/2');\n-\n-const mockDocument1 = ({\n-    uri: uri1,\n-} as unknown) as vscode.TextDocument;\n-\n-const mockDocument2 = ({\n-    uri: uri2,\n-} as unknown) as vscode.TextDocument;\n-\n-const range1 = new vscode.Range(\n-    new vscode.Position(1, 2),\n-    new vscode.Position(3, 4),\n-);\n-const range2 = new vscode.Range(\n-    new vscode.Position(5, 6),\n-    new vscode.Position(7, 8),\n-);\n-\n-const diagnostic1 = new vscode.Diagnostic(range1, 'First diagnostic');\n-const diagnostic2 = new vscode.Diagnostic(range2, 'Second diagnostic');\n-\n-// This is a mutable object so return a fresh instance every time\n-function suggestion1(): SuggestedFix {\n-    return new SuggestedFix(\n-        'Replace me!',\n-        new vscode.Location(uri1, range1),\n-        'With this!',\n-    );\n-}\n-\n-describe('SuggestedFixCollection', () => {\n-    it('should add a suggestion then return it as a code action', () => {\n-        const suggestedFixes = new SuggestedFixCollection();\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n-\n-        // Specify the document and range that exactly matches\n-        const codeActions = suggestedFixes.provideCodeActions(\n-            mockDocument1,\n-            range1,\n-        );\n-\n-        assert.strictEqual(codeActions.length, 1);\n-        const [codeAction] = codeActions;\n-        assert.strictEqual(codeAction.title, suggestion1().title);\n-\n-        const { diagnostics } = codeAction;\n-        if (!diagnostics) {\n-            assert.fail('Diagnostics unexpectedly missing');\n-            return;\n-        }\n-\n-        assert.strictEqual(diagnostics.length, 1);\n-        assert.strictEqual(diagnostics[0], diagnostic1);\n-    });\n-\n-    it('should not return code actions for different ranges', () => {\n-        const suggestedFixes = new SuggestedFixCollection();\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n-\n-        const codeActions = suggestedFixes.provideCodeActions(\n-            mockDocument1,\n-            range2,\n-        );\n-\n-        assert(!codeActions || codeActions.length === 0);\n-    });\n-\n-    it('should not return code actions for different documents', () => {\n-        const suggestedFixes = new SuggestedFixCollection();\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n-\n-        const codeActions = suggestedFixes.provideCodeActions(\n-            mockDocument2,\n-            range1,\n-        );\n-\n-        assert(!codeActions || codeActions.length === 0);\n-    });\n-\n-    it('should not return code actions that have been cleared', () => {\n-        const suggestedFixes = new SuggestedFixCollection();\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n-        suggestedFixes.clear();\n-\n-        const codeActions = suggestedFixes.provideCodeActions(\n-            mockDocument1,\n-            range1,\n-        );\n-\n-        assert(!codeActions || codeActions.length === 0);\n-    });\n-\n-    it('should merge identical suggestions together', () => {\n-        const suggestedFixes = new SuggestedFixCollection();\n-\n-        // Add the same suggestion for two diagnostics\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic1);\n-        suggestedFixes.addSuggestedFixForDiagnostic(suggestion1(), diagnostic2);\n-\n-        const codeActions = suggestedFixes.provideCodeActions(\n-            mockDocument1,\n-            range1,\n-        );\n-\n-        assert.strictEqual(codeActions.length, 1);\n-        const [codeAction] = codeActions;\n-        const { diagnostics } = codeAction;\n-\n-        if (!diagnostics) {\n-            assert.fail('Diagnostics unexpectedly missing');\n-            return;\n-        }\n-\n-        // We should be associated with both diagnostics\n-        assert.strictEqual(diagnostics.length, 2);\n-        assert.strictEqual(diagnostics[0], diagnostic1);\n-        assert.strictEqual(diagnostics[1], diagnostic2);\n-    });\n-});"}, {"sha": "358325cc8dde6082cb0eda52f1fbdbe38483bf34", "filename": "editors/code/src/test/utils/diagnotics/rust.test.ts", "status": "removed", "additions": 0, "deletions": 236, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Frust.test.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,236 +0,0 @@\n-import * as assert from 'assert';\n-import * as fs from 'fs';\n-import * as vscode from 'vscode';\n-\n-import {\n-    MappedRustDiagnostic,\n-    mapRustDiagnosticToVsCode,\n-    RustDiagnostic,\n-    SuggestionApplicability,\n-} from '../../../utils/diagnostics/rust';\n-\n-function loadDiagnosticFixture(name: string): RustDiagnostic {\n-    const jsonText = fs\n-        .readFileSync(\n-            // We're actually in our JavaScript output directory, climb out\n-            `${__dirname}/../../../../src/test/fixtures/rust-diagnostics/${name}.json`,\n-        )\n-        .toString();\n-\n-    return JSON.parse(jsonText);\n-}\n-\n-function mapFixtureToVsCode(name: string): MappedRustDiagnostic {\n-    const rd = loadDiagnosticFixture(name);\n-    const mapResult = mapRustDiagnosticToVsCode(rd);\n-\n-    if (!mapResult) {\n-        return assert.fail('Mapping unexpectedly failed');\n-    }\n-    return mapResult;\n-}\n-\n-describe('mapRustDiagnosticToVsCode', () => {\n-    it('should map an incompatible type for trait error', () => {\n-        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0053',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        assert.strictEqual(diagnostic.source, 'rustc');\n-        assert.strictEqual(\n-            diagnostic.message,\n-            [\n-                `method \\`next\\` has an incompatible type for trait`,\n-                `expected type \\`fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>\\``,\n-                `   found type \\`fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>\\``,\n-            ].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'E0053');\n-        assert.deepStrictEqual(diagnostic.tags, []);\n-\n-        // No related information\n-        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n-\n-        // There are no suggested fixes\n-        assert.strictEqual(suggestedFixes.length, 0);\n-    });\n-\n-    it('should map an unused variable warning', () => {\n-        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'warning/unused_variables',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Warning,\n-        );\n-        assert.strictEqual(\n-            diagnostic.message,\n-            [\n-                'unused variable: `foo`',\n-                '#[warn(unused_variables)] on by default',\n-            ].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'unused_variables');\n-        assert.strictEqual(diagnostic.source, 'rustc');\n-        assert.deepStrictEqual(diagnostic.tags, [\n-            vscode.DiagnosticTag.Unnecessary,\n-        ]);\n-\n-        // No related information\n-        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n-\n-        // One suggested fix available to prefix the variable\n-        assert.strictEqual(suggestedFixes.length, 1);\n-        const [suggestedFix] = suggestedFixes;\n-        assert.strictEqual(\n-            suggestedFix.title,\n-            'consider prefixing with an underscore: `_foo`',\n-        );\n-        assert.strictEqual(\n-            suggestedFix.applicability,\n-            SuggestionApplicability.MachineApplicable,\n-        );\n-    });\n-\n-    it('should map a wrong number of parameters error', () => {\n-        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0061',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        assert.strictEqual(\n-            diagnostic.message,\n-            [\n-                'this function takes 2 parameters but 3 parameters were supplied',\n-                'expected 2 parameters',\n-            ].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'E0061');\n-        assert.strictEqual(diagnostic.source, 'rustc');\n-        assert.deepStrictEqual(diagnostic.tags, []);\n-\n-        // One related information for the original definition\n-        const relatedInformation = diagnostic.relatedInformation;\n-        if (!relatedInformation) {\n-            assert.fail('Related information unexpectedly undefined');\n-            return;\n-        }\n-        assert.strictEqual(relatedInformation.length, 1);\n-        const [related] = relatedInformation;\n-        assert.strictEqual(related.message, 'defined here');\n-\n-        // There are no suggested fixes\n-        assert.strictEqual(suggestedFixes.length, 0);\n-    });\n-\n-    it('should map a Clippy copy pass by ref warning', () => {\n-        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'clippy/trivially_copy_pass_by_ref',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Warning,\n-        );\n-        assert.strictEqual(diagnostic.source, 'clippy');\n-        assert.strictEqual(\n-            diagnostic.message,\n-            [\n-                'this argument is passed by reference, but would be more efficient if passed by value',\n-                '#[warn(clippy::trivially_copy_pass_by_ref)] implied by #[warn(clippy::all)]',\n-                'for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref',\n-            ].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'trivially_copy_pass_by_ref');\n-        assert.deepStrictEqual(diagnostic.tags, []);\n-\n-        // One related information for the lint definition\n-        const relatedInformation = diagnostic.relatedInformation;\n-        if (!relatedInformation) {\n-            assert.fail('Related information unexpectedly undefined');\n-            return;\n-        }\n-        assert.strictEqual(relatedInformation.length, 1);\n-        const [related] = relatedInformation;\n-        assert.strictEqual(related.message, 'lint level defined here');\n-\n-        // One suggested fix to pass by value\n-        assert.strictEqual(suggestedFixes.length, 1);\n-        const [suggestedFix] = suggestedFixes;\n-        assert.strictEqual(\n-            suggestedFix.title,\n-            'consider passing by value instead: `self`',\n-        );\n-        // Clippy does not mark this with any applicability\n-        assert.strictEqual(\n-            suggestedFix.applicability,\n-            SuggestionApplicability.Unspecified,\n-        );\n-    });\n-\n-    it('should map a mismatched type error', () => {\n-        const { diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0308',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        assert.strictEqual(\n-            diagnostic.message,\n-            ['mismatched types', 'expected usize, found u32'].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'E0308');\n-        assert.strictEqual(diagnostic.source, 'rustc');\n-        assert.deepStrictEqual(diagnostic.tags, []);\n-\n-        // No related information\n-        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n-\n-        // There are no suggested fixes\n-        assert.strictEqual(suggestedFixes.length, 0);\n-    });\n-\n-    it('should map a macro invocation location to normal file path', () => {\n-        const { location, diagnostic, suggestedFixes } = mapFixtureToVsCode(\n-            'error/E0277',\n-        );\n-\n-        assert.strictEqual(\n-            diagnostic.severity,\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        assert.strictEqual(\n-            diagnostic.message,\n-            [\n-                \"can't compare `{integer}` with `&str`\",\n-                'the trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`',\n-            ].join('\\n'),\n-        );\n-        assert.strictEqual(diagnostic.code, 'E0277');\n-        assert.strictEqual(diagnostic.source, 'rustc');\n-        assert.deepStrictEqual(diagnostic.tags, []);\n-\n-        // No related information\n-        assert.deepStrictEqual(diagnostic.relatedInformation, []);\n-\n-        // There are no suggested fixes\n-        assert.strictEqual(suggestedFixes.length, 0);\n-\n-        // The file url should be normal file\n-        // Ignore the first part because it depends on vs workspace location\n-        assert.strictEqual(\n-            location.uri.path.substr(-'src/main.rs'.length),\n-            'src/main.rs',\n-        );\n-    });\n-});"}, {"sha": "4944dd0328ce3ff6000c300a90d5e9687b2fa7a3", "filename": "editors/code/src/test/utils/diagnotics/vscode.test.ts", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftest%2Futils%2Fdiagnotics%2Fvscode.test.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,98 +0,0 @@\n-import * as assert from 'assert';\n-import * as vscode from 'vscode';\n-\n-import { areDiagnosticsEqual } from '../../../utils/diagnostics/vscode';\n-\n-const range1 = new vscode.Range(\n-    new vscode.Position(1, 2),\n-    new vscode.Position(3, 4),\n-);\n-\n-const range2 = new vscode.Range(\n-    new vscode.Position(5, 6),\n-    new vscode.Position(7, 8),\n-);\n-\n-describe('areDiagnosticsEqual', () => {\n-    it('should treat identical diagnostics as equal', () => {\n-        const diagnostic1 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        const diagnostic2 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        assert(areDiagnosticsEqual(diagnostic1, diagnostic2));\n-    });\n-\n-    it('should treat diagnostics with different sources as inequal', () => {\n-        const diagnostic1 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        diagnostic1.source = 'rustc';\n-\n-        const diagnostic2 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-        diagnostic2.source = 'clippy';\n-\n-        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n-    });\n-\n-    it('should treat diagnostics with different ranges as inequal', () => {\n-        const diagnostic1 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        const diagnostic2 = new vscode.Diagnostic(\n-            range2,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n-    });\n-\n-    it('should treat diagnostics with different messages as inequal', () => {\n-        const diagnostic1 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        const diagnostic2 = new vscode.Diagnostic(\n-            range1,\n-            'Goodbye!, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n-    });\n-\n-    it('should treat diagnostics with different severities as inequal', () => {\n-        const diagnostic1 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Warning,\n-        );\n-\n-        const diagnostic2 = new vscode.Diagnostic(\n-            range1,\n-            'Hello, world!',\n-            vscode.DiagnosticSeverity.Error,\n-        );\n-\n-        assert(!areDiagnosticsEqual(diagnostic1, diagnostic2));\n-    });\n-});"}, {"sha": "6e660bb61d95517f4476512019c88addb9b7e861", "filename": "editors/code/src/utils/diagnostics/SuggestedFix.ts", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFix.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,67 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-import { SuggestionApplicability } from './rust';\n-\n-/**\n- * Model object for text replacements suggested by the Rust compiler\n- *\n- * This is an intermediate form between the raw `rustc` JSON and a\n- * `vscode.CodeAction`. It's optimised for the use-cases of\n- * `SuggestedFixCollection`.\n- */\n-export default class SuggestedFix {\n-    public readonly title: string;\n-    public readonly location: vscode.Location;\n-    public readonly replacement: string;\n-    public readonly applicability: SuggestionApplicability;\n-\n-    /**\n-     * Diagnostics this suggested fix could resolve\n-     */\n-    public diagnostics: vscode.Diagnostic[];\n-\n-    constructor(\n-        title: string,\n-        location: vscode.Location,\n-        replacement: string,\n-        applicability: SuggestionApplicability = SuggestionApplicability.Unspecified,\n-    ) {\n-        this.title = title;\n-        this.location = location;\n-        this.replacement = replacement;\n-        this.applicability = applicability;\n-        this.diagnostics = [];\n-    }\n-\n-    /**\n-     * Determines if this suggested fix is equivalent to another instance\n-     */\n-    public isEqual(other: SuggestedFix): boolean {\n-        return (\n-            this.title === other.title &&\n-            this.location.range.isEqual(other.location.range) &&\n-            this.replacement === other.replacement &&\n-            this.applicability === other.applicability\n-        );\n-    }\n-\n-    /**\n-     * Converts this suggested fix to a VS Code Quick Fix code action\n-     */\n-    public toCodeAction(): vscode.CodeAction {\n-        const codeAction = new vscode.CodeAction(\n-            this.title,\n-            vscode.CodeActionKind.QuickFix,\n-        );\n-\n-        const edit = new vscode.WorkspaceEdit();\n-        edit.replace(this.location.uri, this.location.range, this.replacement);\n-        codeAction.edit = edit;\n-\n-        codeAction.isPreferred =\n-            this.applicability === SuggestionApplicability.MachineApplicable;\n-\n-        codeAction.diagnostics = [...this.diagnostics];\n-        return codeAction;\n-    }\n-}"}, {"sha": "57c9856cfa3cb7ebdad64c3d78622e296d9c7aa5", "filename": "editors/code/src/utils/diagnostics/SuggestedFixCollection.ts", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2FSuggestedFixCollection.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,77 +0,0 @@\n-import * as vscode from 'vscode';\n-import SuggestedFix from './SuggestedFix';\n-\n-/**\n- * Collection of suggested fixes across multiple documents\n- *\n- * This stores `SuggestedFix` model objects and returns them via the\n- * `vscode.CodeActionProvider` interface.\n- */\n-export default class SuggestedFixCollection\n-    implements vscode.CodeActionProvider {\n-    public static PROVIDED_CODE_ACTION_KINDS = [vscode.CodeActionKind.QuickFix];\n-\n-    /**\n-     * Map of document URI strings to suggested fixes\n-     */\n-    private suggestedFixes: Map<string, SuggestedFix[]>;\n-\n-    constructor() {\n-        this.suggestedFixes = new Map();\n-    }\n-\n-    /**\n-     * Clears all suggested fixes across all documents\n-     */\n-    public clear(): void {\n-        this.suggestedFixes = new Map();\n-    }\n-\n-    /**\n-     * Adds a suggested fix for the given diagnostic\n-     *\n-     * Some suggested fixes will appear in multiple diagnostics. For example,\n-     * forgetting a `mut` on a variable will suggest changing the delaration on\n-     * every mutable usage site. If the suggested fix has already been added\n-     * this method will instead associate the existing fix with the new\n-     * diagnostic.\n-     */\n-    public addSuggestedFixForDiagnostic(\n-        suggestedFix: SuggestedFix,\n-        diagnostic: vscode.Diagnostic,\n-    ): void {\n-        const fileUriString = suggestedFix.location.uri.toString();\n-        const fileSuggestions = this.suggestedFixes.get(fileUriString) || [];\n-\n-        const existingSuggestion = fileSuggestions.find(s =>\n-            s.isEqual(suggestedFix),\n-        );\n-\n-        if (existingSuggestion) {\n-            // The existing suggestion also applies to this new diagnostic\n-            existingSuggestion.diagnostics.push(diagnostic);\n-        } else {\n-            // We haven't seen this suggestion before\n-            suggestedFix.diagnostics.push(diagnostic);\n-            fileSuggestions.push(suggestedFix);\n-        }\n-\n-        this.suggestedFixes.set(fileUriString, fileSuggestions);\n-    }\n-\n-    /**\n-     * Filters suggested fixes by their document and range and converts them to\n-     * code actions\n-     */\n-    public provideCodeActions(\n-        document: vscode.TextDocument,\n-        range: vscode.Range,\n-    ): vscode.CodeAction[] {\n-        const documentUriString = document.uri.toString();\n-\n-        const suggestedFixes = this.suggestedFixes.get(documentUriString);\n-        return (suggestedFixes || [])\n-            .filter(({ location }) => location.range.intersection(range))\n-            .map(suggestedEdit => suggestedEdit.toCodeAction());\n-    }\n-}"}, {"sha": "1f0c0d3e4057a85d6dcca373474b421f177c53be", "filename": "editors/code/src/utils/diagnostics/rust.ts", "status": "removed", "additions": 0, "deletions": 299, "changes": 299, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Frust.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,299 +0,0 @@\n-import * as path from 'path';\n-import * as vscode from 'vscode';\n-\n-import SuggestedFix from './SuggestedFix';\n-\n-export enum SuggestionApplicability {\n-    MachineApplicable = 'MachineApplicable',\n-    HasPlaceholders = 'HasPlaceholders',\n-    MaybeIncorrect = 'MaybeIncorrect',\n-    Unspecified = 'Unspecified',\n-}\n-\n-export interface RustDiagnosticSpanMacroExpansion {\n-    span: RustDiagnosticSpan;\n-    macro_decl_name: string;\n-    def_site_span?: RustDiagnosticSpan;\n-}\n-\n-// Reference:\n-// https://github.com/rust-lang/rust/blob/master/src/libsyntax/json.rs\n-export interface RustDiagnosticSpan {\n-    line_start: number;\n-    line_end: number;\n-    column_start: number;\n-    column_end: number;\n-    is_primary: boolean;\n-    file_name: string;\n-    label?: string;\n-    expansion?: RustDiagnosticSpanMacroExpansion;\n-    suggested_replacement?: string;\n-    suggestion_applicability?: SuggestionApplicability;\n-}\n-\n-export interface RustDiagnostic {\n-    spans: RustDiagnosticSpan[];\n-    rendered: string;\n-    message: string;\n-    level: string;\n-    code?: {\n-        code: string;\n-    };\n-    children: RustDiagnostic[];\n-}\n-\n-export interface MappedRustDiagnostic {\n-    location: vscode.Location;\n-    diagnostic: vscode.Diagnostic;\n-    suggestedFixes: SuggestedFix[];\n-}\n-\n-interface MappedRustChildDiagnostic {\n-    related?: vscode.DiagnosticRelatedInformation;\n-    suggestedFix?: SuggestedFix;\n-    messageLine?: string;\n-}\n-\n-/**\n- * Converts a Rust level string to a VsCode severity\n- */\n-function mapLevelToSeverity(s: string): vscode.DiagnosticSeverity {\n-    if (s === 'error') {\n-        return vscode.DiagnosticSeverity.Error;\n-    }\n-    if (s.startsWith('warn')) {\n-        return vscode.DiagnosticSeverity.Warning;\n-    }\n-    return vscode.DiagnosticSeverity.Information;\n-}\n-\n-/**\n- * Check whether a file name is from macro invocation\n- */\n-function isFromMacro(fileName: string): boolean {\n-    return fileName.startsWith('<') && fileName.endsWith('>');\n-}\n-\n-/**\n- * Converts a Rust macro span to a VsCode location recursively\n- */\n-function mapMacroSpanToLocation(\n-    spanMacro: RustDiagnosticSpanMacroExpansion,\n-): vscode.Location | undefined {\n-    if (!isFromMacro(spanMacro.span.file_name)) {\n-        return mapSpanToLocation(spanMacro.span);\n-    }\n-\n-    if (spanMacro.span.expansion) {\n-        return mapMacroSpanToLocation(spanMacro.span.expansion);\n-    }\n-\n-    return;\n-}\n-\n-/**\n- * Converts a Rust span to a VsCode location\n- */\n-function mapSpanToLocation(span: RustDiagnosticSpan): vscode.Location {\n-    if (isFromMacro(span.file_name) && span.expansion) {\n-        const macroLoc = mapMacroSpanToLocation(span.expansion);\n-        if (macroLoc) {\n-            return macroLoc;\n-        }\n-    }\n-\n-    const fileName = path.join(vscode.workspace.rootPath || '', span.file_name);\n-    const fileUri = vscode.Uri.file(fileName);\n-\n-    const range = new vscode.Range(\n-        new vscode.Position(span.line_start - 1, span.column_start - 1),\n-        new vscode.Position(span.line_end - 1, span.column_end - 1),\n-    );\n-\n-    return new vscode.Location(fileUri, range);\n-}\n-\n-/**\n- * Converts a secondary Rust span to a VsCode related information\n- *\n- * If the span is unlabelled this will return `undefined`.\n- */\n-function mapSecondarySpanToRelated(\n-    span: RustDiagnosticSpan,\n-): vscode.DiagnosticRelatedInformation | undefined {\n-    if (!span.label) {\n-        // Nothing to label this with\n-        return;\n-    }\n-\n-    const location = mapSpanToLocation(span);\n-    return new vscode.DiagnosticRelatedInformation(location, span.label);\n-}\n-\n-/**\n- * Determines if diagnostic is related to unused code\n- */\n-function isUnusedOrUnnecessary(rd: RustDiagnostic): boolean {\n-    if (!rd.code) {\n-        return false;\n-    }\n-\n-    return [\n-        'dead_code',\n-        'unknown_lints',\n-        'unreachable_code',\n-        'unused_attributes',\n-        'unused_imports',\n-        'unused_macros',\n-        'unused_variables',\n-    ].includes(rd.code.code);\n-}\n-\n-/**\n- * Determines if diagnostic is related to deprecated code\n- */\n-function isDeprecated(rd: RustDiagnostic): boolean {\n-    if (!rd.code) {\n-        return false;\n-    }\n-\n-    return ['deprecated'].includes(rd.code.code);\n-}\n-\n-/**\n- * Converts a Rust child diagnostic to a VsCode related information\n- *\n- * This can have three outcomes:\n- *\n- * 1. If this is no primary span this will return a `noteLine`\n- * 2. If there is a primary span with a suggested replacement it will return a\n- *    `codeAction`.\n- * 3. If there is a primary span without a suggested replacement it will return\n- *    a `related`.\n- */\n-function mapRustChildDiagnostic(rd: RustDiagnostic): MappedRustChildDiagnostic {\n-    const span = rd.spans.find(s => s.is_primary);\n-\n-    if (!span) {\n-        // `rustc` uses these spanless children as a way to print multi-line\n-        // messages\n-        return { messageLine: rd.message };\n-    }\n-\n-    // If we have a primary span use its location, otherwise use the parent\n-    const location = mapSpanToLocation(span);\n-\n-    // We need to distinguish `null` from an empty string\n-    if (span && typeof span.suggested_replacement === 'string') {\n-        // Include our replacement in the title unless it's empty\n-        const title = span.suggested_replacement\n-            ? `${rd.message}: \\`${span.suggested_replacement}\\``\n-            : rd.message;\n-\n-        return {\n-            suggestedFix: new SuggestedFix(\n-                title,\n-                location,\n-                span.suggested_replacement,\n-                span.suggestion_applicability,\n-            ),\n-        };\n-    } else {\n-        const related = new vscode.DiagnosticRelatedInformation(\n-            location,\n-            rd.message,\n-        );\n-\n-        return { related };\n-    }\n-}\n-\n-/**\n- * Converts a Rust root diagnostic to VsCode form\n- *\n- * This flattens the Rust diagnostic by:\n- *\n- * 1. Creating a `vscode.Diagnostic` with the root message and primary span.\n- * 2. Adding any labelled secondary spans to `relatedInformation`\n- * 3. Categorising child diagnostics as either `SuggestedFix`es,\n- *    `relatedInformation` or additional message lines.\n- *\n- * If the diagnostic has no primary span this will return `undefined`\n- */\n-export function mapRustDiagnosticToVsCode(\n-    rd: RustDiagnostic,\n-): MappedRustDiagnostic | undefined {\n-    const primarySpan = rd.spans.find(s => s.is_primary);\n-    if (!primarySpan) {\n-        return;\n-    }\n-\n-    const location = mapSpanToLocation(primarySpan);\n-    const secondarySpans = rd.spans.filter(s => !s.is_primary);\n-\n-    const severity = mapLevelToSeverity(rd.level);\n-    let primarySpanLabel = primarySpan.label;\n-\n-    const vd = new vscode.Diagnostic(location.range, rd.message, severity);\n-\n-    let source = 'rustc';\n-    let code = rd.code && rd.code.code;\n-    if (code) {\n-        // See if this is an RFC #2103 scoped lint (e.g. from Clippy)\n-        const scopedCode = code.split('::');\n-        if (scopedCode.length === 2) {\n-            [source, code] = scopedCode;\n-        }\n-    }\n-\n-    vd.source = source;\n-    vd.code = code;\n-    vd.relatedInformation = [];\n-    vd.tags = [];\n-\n-    for (const secondarySpan of secondarySpans) {\n-        const related = mapSecondarySpanToRelated(secondarySpan);\n-        if (related) {\n-            vd.relatedInformation.push(related);\n-        }\n-    }\n-\n-    const suggestedFixes = [];\n-    for (const child of rd.children) {\n-        const { related, suggestedFix, messageLine } = mapRustChildDiagnostic(\n-            child,\n-        );\n-\n-        if (related) {\n-            vd.relatedInformation.push(related);\n-        }\n-        if (suggestedFix) {\n-            suggestedFixes.push(suggestedFix);\n-        }\n-        if (messageLine) {\n-            vd.message += `\\n${messageLine}`;\n-\n-            // These secondary messages usually duplicate the content of the\n-            // primary span label.\n-            primarySpanLabel = undefined;\n-        }\n-    }\n-\n-    if (primarySpanLabel) {\n-        vd.message += `\\n${primarySpanLabel}`;\n-    }\n-\n-    if (isUnusedOrUnnecessary(rd)) {\n-        vd.tags.push(vscode.DiagnosticTag.Unnecessary);\n-    }\n-\n-    if (isDeprecated(rd)) {\n-        vd.tags.push(vscode.DiagnosticTag.Deprecated);\n-    }\n-\n-    return {\n-        location,\n-        diagnostic: vd,\n-        suggestedFixes,\n-    };\n-}"}, {"sha": "f4a5450e2b8c19bc946f2fc6a4488d8797ef583f", "filename": "editors/code/src/utils/diagnostics/vscode.ts", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fdiagnostics%2Fvscode.ts?ref=c21fbc3e87d1e701f29fafcdad0a73e8d69a2f29", "patch": "@@ -1,14 +0,0 @@\n-import * as vscode from 'vscode';\n-\n-/** Compares two `vscode.Diagnostic`s for equality */\n-export function areDiagnosticsEqual(\n-    left: vscode.Diagnostic,\n-    right: vscode.Diagnostic,\n-): boolean {\n-    return (\n-        left.source === right.source &&\n-        left.severity === right.severity &&\n-        left.range.isEqual(right.range) &&\n-        left.message === right.message\n-    );\n-}"}]}