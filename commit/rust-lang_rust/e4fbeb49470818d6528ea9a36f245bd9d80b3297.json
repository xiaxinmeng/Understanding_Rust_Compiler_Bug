{"sha": "e4fbeb49470818d6528ea9a36f245bd9d80b3297", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZmJlYjQ5NDcwODE4ZDY1MjhlYTlhMzZmMjQ1YmQ5ZDgwYjMyOTc=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-23T01:12:08Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-12-23T01:12:08Z"}, "message": "Don't trigger block_in_if_condition_expr lint if the block is unsafe", "tree": {"sha": "8726a89e58c7571c8760da2e945cad90a49fa38a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8726a89e58c7571c8760da2e945cad90a49fa38a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4fbeb49470818d6528ea9a36f245bd9d80b3297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4fbeb49470818d6528ea9a36f245bd9d80b3297", "html_url": "https://github.com/rust-lang/rust/commit/e4fbeb49470818d6528ea9a36f245bd9d80b3297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4fbeb49470818d6528ea9a36f245bd9d80b3297/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd16ac2ad7eeae85bfb9dccb6d57428bce1fbbdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd16ac2ad7eeae85bfb9dccb6d57428bce1fbbdf", "html_url": "https://github.com/rust-lang/rust/commit/dd16ac2ad7eeae85bfb9dccb6d57428bce1fbbdf"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "f7c181f5fd8b6a8b2c6f2623e756242942dc9efb", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4fbeb49470818d6528ea9a36f245bd9d80b3297/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fbeb49470818d6528ea9a36f245bd9d80b3297/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=e4fbeb49470818d6528ea9a36f245bd9d80b3297", "patch": "@@ -74,23 +74,25 @@ impl LateLintPass for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprIf(ref check, ref then, _) = expr.node {\n             if let ExprBlock(ref block) = check.node {\n-                if block.stmts.is_empty() {\n-                    if let Some(ref ex) = block.expr {\n-                        // don't dig into the expression here, just suggest that they remove\n-                        // the block\n+                if block.rules == DefaultBlock {\n+                    if block.stmts.is_empty() {\n+                        if let Some(ref ex) = block.expr {\n+                            // don't dig into the expression here, just suggest that they remove\n+                            // the block\n \n-                        span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_EXPR, check.span,\n-                            BRACED_EXPR_MESSAGE,\n-                            &format!(\"try\\nif {} {} ... \", snippet_block(cx, ex.span, \"..\"),\n+                            span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_EXPR, check.span,\n+                                BRACED_EXPR_MESSAGE,\n+                                &format!(\"try\\nif {} {} ... \", snippet_block(cx, ex.span, \"..\"),\n+                                snippet_block(cx, then.span, \"..\")));\n+                        }\n+                    } else {\n+                        // move block higher\n+                        span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_STMT, check.span,\n+                            COMPLEX_BLOCK_MESSAGE,\n+                            &format!(\"try\\nlet res = {};\\nif res {} ... \",\n+                            snippet_block(cx, block.span, \"..\"),\n                             snippet_block(cx, then.span, \"..\")));\n                     }\n-                } else {\n-                    // move block higher\n-                    span_help_and_lint(cx, BLOCK_IN_IF_CONDITION_STMT, check.span,\n-                        COMPLEX_BLOCK_MESSAGE,\n-                        &format!(\"try\\nlet res = {};\\nif res {} ... \",\n-                        snippet_block(cx, block.span, \"..\"),\n-                        snippet_block(cx, then.span, \"..\")));\n                 }\n             } else {\n                 let mut visitor = ExVisitor { found_block: None };"}, {"sha": "cd95fbd202c29be08c731d71761fdc5892ffbd01", "filename": "tests/compile-fail/block_in_if_condition.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e4fbeb49470818d6528ea9a36f245bd9d80b3297/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4fbeb49470818d6528ea9a36f245bd9d80b3297/tests%2Fcompile-fail%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblock_in_if_condition.rs?ref=e4fbeb49470818d6528ea9a36f245bd9d80b3297", "patch": "@@ -60,5 +60,14 @@ fn closure_without_block() {\n     }\n }\n \n+fn condition_is_unsafe_block() {\n+    let a: i32 = 1;\n+\n+    // this should not warn because the condition is an unsafe block\n+    if unsafe { 1u32 == std::mem::transmute(a) } {\n+        println!(\"1u32 == a\");\n+    }\n+}\n+\n fn main() {\n }"}]}