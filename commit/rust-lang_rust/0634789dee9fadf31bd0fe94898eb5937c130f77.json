{"sha": "0634789dee9fadf31bd0fe94898eb5937c130f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzQ3ODlkZWU5ZmFkZjMxYmQwZmU5NDg5OGViNTkzN2MxMzBmNzc=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T19:59:13Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-12T20:01:55Z"}, "message": "Remove usage of `DUMMY_HIR_ID` in `Scope::hir_id`", "tree": {"sha": "00901d14b32ed5b104eb397bbc407ff799577b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00901d14b32ed5b104eb397bbc407ff799577b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0634789dee9fadf31bd0fe94898eb5937c130f77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0634789dee9fadf31bd0fe94898eb5937c130f77", "html_url": "https://github.com/rust-lang/rust/commit/0634789dee9fadf31bd0fe94898eb5937c130f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0634789dee9fadf31bd0fe94898eb5937c130f77/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502ae0e8988c1fa3ffc109c0d924e20c85f9426d", "url": "https://api.github.com/repos/rust-lang/rust/commits/502ae0e8988c1fa3ffc109c0d924e20c85f9426d", "html_url": "https://github.com/rust-lang/rust/commit/502ae0e8988c1fa3ffc109c0d924e20c85f9426d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "db81ceea43f01329ce2e65fe56de5b7c1680276c", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0634789dee9fadf31bd0fe94898eb5937c130f77/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0634789dee9fadf31bd0fe94898eb5937c130f77/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0634789dee9fadf31bd0fe94898eb5937c130f77", "patch": "@@ -93,7 +93,8 @@ pub(super) fn note_and_explain_region(\n             let unknown_scope =\n                 || format!(\"{}unknown scope: {:?}{}.  Please report a bug.\", prefix, scope, suffix);\n             let span = scope.span(tcx, region_scope_tree);\n-            let tag = match tcx.hir().find(scope.hir_id(region_scope_tree)) {\n+            let hir_id = scope.hir_id(region_scope_tree);\n+            let tag = match hir_id.and_then(|hir_id| tcx.hir().find(hir_id)) {\n                 Some(Node::Block(_)) => \"block\",\n                 Some(Node::Expr(expr)) => match expr.kind {\n                     hir::ExprKind::Call(..) => \"call\","}, {"sha": "2ad6fe14ec716fbfb1474b95541b2d6985044ef5", "filename": "src/librustc_middle/middle/region.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0634789dee9fadf31bd0fe94898eb5937c130f77/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0634789dee9fadf31bd0fe94898eb5937c130f77/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fregion.rs?ref=0634789dee9fadf31bd0fe94898eb5937c130f77", "patch": "@@ -159,21 +159,20 @@ impl Scope {\n         self.id\n     }\n \n-    pub fn hir_id(&self, scope_tree: &ScopeTree) -> hir::HirId {\n-        match scope_tree.root_body {\n-            Some(hir_id) => hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() },\n-            None => hir::DUMMY_HIR_ID,\n-        }\n+    pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {\n+        scope_tree\n+            .root_body\n+            .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })\n     }\n \n     /// Returns the span of this `Scope`. Note that in general the\n     /// returned span may not correspond to the span of any `NodeId` in\n     /// the AST.\n     pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {\n-        let hir_id = self.hir_id(scope_tree);\n-        if hir_id == hir::DUMMY_HIR_ID {\n-            return DUMMY_SP;\n-        }\n+        let hir_id = match self.hir_id(scope_tree) {\n+            Some(hir_id) => hir_id,\n+            None => return DUMMY_SP,\n+        };\n         let span = tcx.hir().span(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n             if let Node::Block(ref blk) = tcx.hir().get(hir_id) {"}]}