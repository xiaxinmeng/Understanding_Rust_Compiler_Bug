{"sha": "c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTAxYTBmMWQ4ZGFkZTg3YmZjZGZkMDEwMmQ5NmZiMTViOTM3MTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-27T09:51:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-27T09:51:12Z"}, "message": "Auto merge of #52319 - tinco:issue_12590, r=pnkfelix\n\nTrack whether module declarations are inline (fixes #12590)\n\nTo track whether module declarations are inline I added a field `inline: bool` to `ast::Mod`. The main use case is for pretty to know whether it should render the items associated with the module, but perhaps there are use cases for this information to not be forgotten in the AST.", "tree": {"sha": "f1a907fc1d298597d6ed81f90274006c7679f24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1a907fc1d298597d6ed81f90274006c7679f24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "html_url": "https://github.com/rust-lang/rust/commit/c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e999ebdb971a0bde03ec3fdfff901ac6613fcfa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e999ebdb971a0bde03ec3fdfff901ac6613fcfa0", "html_url": "https://github.com/rust-lang/rust/commit/e999ebdb971a0bde03ec3fdfff901ac6613fcfa0"}, {"sha": "b985e91e434a26302f06333414224422f85a1d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b985e91e434a26302f06333414224422f85a1d8b", "html_url": "https://github.com/rust-lang/rust/commit/b985e91e434a26302f06333414224422f85a1d8b"}], "stats": {"total": 160, "additions": 143, "deletions": 17}, "files": [{"sha": "9ed628e2ed337d50e16e02073a342810f52cebbd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -1885,6 +1885,8 @@ pub struct Mod {\n     /// to the last token in the external file.\n     pub inner: Span,\n     pub items: Vec<P<Item>>,\n+    /// For `mod foo;` inline is false, for `mod foo { .. }` it is true.\n+    pub inline: bool,\n }\n \n /// Foreign module declaration."}, {"sha": "6210003a40da41d1e63fb64a5e4f41a94ee75253", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -1101,6 +1101,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             ast::ItemKind::Mod(ast::Mod {\n                 inner: inner_span,\n                 items,\n+                inline: true\n             })\n         )\n     }"}, {"sha": "52322e98d46f9cd0e7e3e57b3b0e98a7fe14967a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -303,6 +303,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 krate.module = ast::Mod {\n                     inner: orig_mod_span,\n                     items: vec![],\n+                    inline: true,\n                 };\n             },\n             _ => unreachable!(),"}, {"sha": "95a2298ca757db404c30d156b2e09e0e37db0cdd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -1044,10 +1044,11 @@ pub fn noop_fold_fn_header<T: Folder>(mut header: FnHeader, folder: &mut T) -> F\n     header\n }\n \n-pub fn noop_fold_mod<T: Folder>(Mod {inner, items}: Mod, folder: &mut T) -> Mod {\n+pub fn noop_fold_mod<T: Folder>(Mod {inner, items, inline}: Mod, folder: &mut T) -> Mod {\n     Mod {\n         inner: folder.new_span(inner),\n         items: items.move_flat_map(|x| folder.fold_item(x)),\n+        inline: inline,\n     }\n }\n \n@@ -1077,6 +1078,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n         None => (ast::Mod {\n             inner: span,\n             items: vec![],\n+            inline: true,\n         }, vec![], span)\n     };\n "}, {"sha": "5571a18b5962518ed1de26e47a55cbac4249fb06", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -6297,6 +6297,7 @@ impl<'a> Parser<'a> {\n         Ok(ast::Mod {\n             inner: inner_lo.to(hi),\n             items,\n+            inline: true\n         })\n     }\n \n@@ -6334,6 +6335,7 @@ impl<'a> Parser<'a> {\n                     self.submod_path(id, &outer_attrs, id_span)?;\n                 let (module, mut attrs) =\n                     self.eval_src_mod(path, directory_ownership, id.to_string(), id_span)?;\n+                // Record that we fetched the mod from an external file\n                 if warn {\n                     let attr = Attribute {\n                         id: attr::mk_attr_id(),\n@@ -6346,9 +6348,13 @@ impl<'a> Parser<'a> {\n                     attr::mark_known(&attr);\n                     attrs.push(attr);\n                 }\n-                Ok((id, module, Some(attrs)))\n+                Ok((id, ItemKind::Mod(module), Some(attrs)))\n             } else {\n-                let placeholder = ast::Mod { inner: syntax_pos::DUMMY_SP, items: Vec::new() };\n+                let placeholder = ast::Mod {\n+                    inner: syntax_pos::DUMMY_SP,\n+                    items: Vec::new(),\n+                    inline: false\n+                };\n                 Ok((id, ItemKind::Mod(placeholder), None))\n             }\n         } else {\n@@ -6548,7 +6554,7 @@ impl<'a> Parser<'a> {\n                     directory_ownership: DirectoryOwnership,\n                     name: String,\n                     id_sp: Span)\n-                    -> PResult<'a, (ast::ItemKind, Vec<Attribute> )> {\n+                    -> PResult<'a, (ast::Mod, Vec<Attribute> )> {\n         let mut included_mod_stack = self.sess.included_mod_stack.borrow_mut();\n         if let Some(i) = included_mod_stack.iter().position(|p| *p == path) {\n             let mut err = String::from(\"circular modules: \");\n@@ -6568,9 +6574,10 @@ impl<'a> Parser<'a> {\n         p0.cfg_mods = self.cfg_mods;\n         let mod_inner_lo = p0.span;\n         let mod_attrs = p0.parse_inner_attributes()?;\n-        let m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;\n+        let mut m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;\n+        m0.inline = false;\n         self.sess.included_mod_stack.borrow_mut().pop();\n-        Ok((ast::ItemKind::Mod(m0), mod_attrs))\n+        Ok((m0, mod_attrs))\n     }\n \n     /// Parse a function declaration from a foreign module"}, {"sha": "f2acdb3f469d1e9b5f6587e749565ebaa409a8b9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -61,6 +61,7 @@ pub struct State<'a> {\n     cur_cmnt: usize,\n     boxes: Vec<pp::Breaks>,\n     ann: &'a (dyn PpAnn+'a),\n+    is_expanded: bool\n }\n \n fn rust_printer<'a>(writer: Box<dyn Write+'a>, ann: &'a dyn PpAnn) -> State<'a> {\n@@ -72,6 +73,7 @@ fn rust_printer<'a>(writer: Box<dyn Write+'a>, ann: &'a dyn PpAnn) -> State<'a>\n         cur_cmnt: 0,\n         boxes: Vec::new(),\n         ann,\n+        is_expanded: false\n     }\n }\n \n@@ -133,14 +135,17 @@ impl<'a> State<'a> {\n             // If the code is post expansion, don't use the table of\n             // literals, since it doesn't correspond with the literals\n             // in the AST anymore.\n-            if is_expanded { None } else { Some(lits) })\n+            if is_expanded { None } else { Some(lits) },\n+            is_expanded\n+        )\n     }\n \n     pub fn new(cm: &'a SourceMap,\n                out: Box<dyn Write+'a>,\n                ann: &'a dyn PpAnn,\n                comments: Option<Vec<comments::Comment>>,\n-               literals: Option<Vec<comments::Literal>>) -> State<'a> {\n+               literals: Option<Vec<comments::Literal>>,\n+               is_expanded: bool) -> State<'a> {\n         State {\n             s: pp::mk_printer(out, DEFAULT_COLUMNS),\n             cm: Some(cm),\n@@ -149,6 +154,7 @@ impl<'a> State<'a> {\n             cur_cmnt: 0,\n             boxes: Vec::new(),\n             ann,\n+            is_expanded: is_expanded\n         }\n     }\n }\n@@ -1260,10 +1266,18 @@ impl<'a> State<'a> {\n             ast::ItemKind::Mod(ref _mod) => {\n                 self.head(&visibility_qualified(&item.vis, \"mod\"))?;\n                 self.print_ident(item.ident)?;\n-                self.nbsp()?;\n-                self.bopen()?;\n-                self.print_mod(_mod, &item.attrs)?;\n-                self.bclose(item.span)?;\n+\n+                if _mod.inline || self.is_expanded {\n+                    self.nbsp()?;\n+                    self.bopen()?;\n+                    self.print_mod(_mod, &item.attrs)?;\n+                    self.bclose(item.span)?;\n+                } else {\n+                    self.s.word(\";\")?;\n+                    self.end()?; // end inner head-block\n+                    self.end()?; // end outer head-block\n+                }\n+\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n                 self.head(\"extern\")?;"}, {"sha": "9f554a90afbc4d7bcf5b87b38febcbdf77f35505", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -237,6 +237,7 @@ fn mk_reexport_mod(cx: &mut TestCtxt,\n     })).collect();\n \n     let reexport_mod = ast::Mod {\n+        inline: true,\n         inner: DUMMY_SP,\n         items,\n     };"}, {"sha": "0087c3c455897b85df0731de818488d4dc21a330", "filename": "src/test/pretty/issue_12590_a.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_a.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+// The next line should not be expanded\n+\n+mod issue_12590_b;\n+\n+fn main() { }"}, {"sha": "ebb6310b047648f48b833f52c28666ba3137e876", "filename": "src/test/pretty/issue_12590_b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_b.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Second part of two file test\n+fn b() { }\n+\n+fn main() { }"}, {"sha": "7e057406d830f5ecb74f87d952d6a4df9f3bd6e7", "filename": "src/test/pretty/issue_12590_c.pp", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_c.pp", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_c.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_c.pp?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -0,0 +1,28 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::v1::*;\n+#[macro_use]\n+extern crate std;\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:issue_12590_c.pp\n+\n+// The next line should be expanded\n+\n+mod issue_12590_b {\n+\n+    fn b() { }\n+    fn main() { }\n+}\n+fn main() { }"}, {"sha": "e3db870ae4f487a833cf9fa2868cff7b0a76bc89", "filename": "src/test/pretty/issue_12590_c.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftest%2Fpretty%2Fissue_12590_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue_12590_c.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:issue_12590_c.pp\n+\n+// The next line should be expanded\n+\n+mod issue_12590_b;\n+\n+fn main() { }"}, {"sha": "306d9f8d852b383c043769ddc08c55f0998d4b61", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4501a0f1d8dade87bfcdfd0102d96fb15b93713/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c4501a0f1d8dade87bfcdfd0102d96fb15b93713", "patch": "@@ -240,6 +240,11 @@ struct DebuggerCommands {\n     breakpoint_lines: Vec<usize>,\n }\n \n+enum ReadFrom {\n+    Path,\n+    Stdin(String),\n+}\n+\n impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n@@ -450,8 +455,14 @@ impl<'test> TestCx<'test> {\n                     round, self.revision\n                 ),\n             );\n-            let proc_res = self.print_source(srcs[round].to_owned(), &self.props.pretty_mode);\n+            let read_from = if round == 0 {\n+                ReadFrom::Path\n+            } else {\n+                ReadFrom::Stdin(srcs[round].to_owned())\n+            };\n \n+            let proc_res = self.print_source(read_from,\n+                                             &self.props.pretty_mode);\n             if !proc_res.status.success() {\n                 self.fatal_proc_rec(\n                     &format!(\n@@ -506,7 +517,7 @@ impl<'test> TestCx<'test> {\n         }\n \n         // additionally, run `--pretty expanded` and try to build it.\n-        let proc_res = self.print_source(srcs[round].clone(), \"expanded\");\n+        let proc_res = self.print_source(ReadFrom::Path, \"expanded\");\n         if !proc_res.status.success() {\n             self.fatal_proc_rec(\"pretty-printing (expanded) failed\", &proc_res);\n         }\n@@ -524,12 +535,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn print_source(&self, src: String, pretty_type: &str) -> ProcRes {\n+    fn print_source(&self, read_from: ReadFrom, pretty_type: &str) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n+        let input: &str = match read_from {\n+            ReadFrom::Stdin(_) => \"-\",\n+            ReadFrom::Path => self.testpaths.file.to_str().unwrap(),\n+        };\n \n         let mut rustc = Command::new(&self.config.rustc_path);\n         rustc\n-            .arg(\"-\")\n+            .arg(input)\n             .args(&[\"-Z\", &format!(\"unpretty={}\", pretty_type)])\n             .args(&[\"--target\", &self.config.target])\n             .arg(\"-L\")\n@@ -538,11 +553,16 @@ impl<'test> TestCx<'test> {\n             .args(&self.props.compile_flags)\n             .envs(self.props.exec_env.clone());\n \n+        let src = match read_from {\n+            ReadFrom::Stdin(src) => Some(src),\n+            ReadFrom::Path => None\n+        };\n+\n         self.compose_and_run(\n             rustc,\n             self.config.compile_lib_path.to_str().unwrap(),\n             Some(aux_dir.to_str().unwrap()),\n-            Some(src),\n+            src,\n         )\n     }\n "}]}