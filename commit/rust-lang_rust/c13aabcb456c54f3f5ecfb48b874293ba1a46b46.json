{"sha": "c13aabcb456c54f3f5ecfb48b874293ba1a46b46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxM2FhYmNiNDU2YzU0ZjNmNWVjZmI0OGI4NzQyOTNiYTFhNDZiNDY=", "commit": {"author": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-13T11:14:41Z"}, "committer": {"name": "JCTyblaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-12-13T11:14:41Z"}, "message": "Tidy new_allocation", "tree": {"sha": "0fad1dd2588833cdb71d53de4636f595e10bc8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fad1dd2588833cdb71d53de4636f595e10bc8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c13aabcb456c54f3f5ecfb48b874293ba1a46b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c13aabcb456c54f3f5ecfb48b874293ba1a46b46", "html_url": "https://github.com/rust-lang/rust/commit/c13aabcb456c54f3f5ecfb48b874293ba1a46b46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c13aabcb456c54f3f5ecfb48b874293ba1a46b46/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4e5b26e6cebac766ea5e06dfee0ca5a34df01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4e5b26e6cebac766ea5e06dfee0ca5a34df01d", "html_url": "https://github.com/rust-lang/rust/commit/aa4e5b26e6cebac766ea5e06dfee0ca5a34df01d"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "44cce53957773c0ab874f8b929f1479e650c5148", "filename": "src/data_race.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c13aabcb456c54f3f5ecfb48b874293ba1a46b46/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c13aabcb456c54f3f5ecfb48b874293ba1a46b46/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=c13aabcb456c54f3f5ecfb48b874293ba1a46b46", "patch": "@@ -704,23 +704,22 @@ pub struct VClockAlloc {\n impl VClockAlloc {\n     /// Create a new data-race detector for newly allocated memory.\n     pub fn new_allocation(global: &MemoryExtra, len: Size, kind: MemoryKind<MiriMemoryKind>) -> VClockAlloc {\n-        let track_alloc = match kind {\n+        let (alloc_timestamp, alloc_index) = match kind {\n             // User allocated and stack memory should track allocation.\n             MemoryKind::Machine(\n                 MiriMemoryKind::Rust | MiriMemoryKind::C | MiriMemoryKind::WinHeap\n-            ) | MemoryKind::Stack => true,\n+            ) | MemoryKind::Stack => {\n+                let (alloc_index, clocks) = global.current_thread_state();\n+                let alloc_timestamp = clocks.clock[alloc_index];\n+                (alloc_timestamp, alloc_index)\n+            }\n             // Other global memory should trace races but be allocated at the 0 timestamp.\n             MemoryKind::Machine(\n                 MiriMemoryKind::Global | MiriMemoryKind::Machine | MiriMemoryKind::Env |\n                 MiriMemoryKind::ExternStatic | MiriMemoryKind::Tls\n-            ) | MemoryKind::CallerLocation | MemoryKind::Vtable => false\n-        };\n-        let (alloc_timestamp, alloc_index) = if track_alloc {\n-            let (alloc_index, clocks) = global.current_thread_state();\n-            let alloc_timestamp = clocks.clock[alloc_index];\n-            (alloc_timestamp, alloc_index)\n-        } else {\n-            (0, VectorIdx::MAX_INDEX)\n+            ) | MemoryKind::CallerLocation | MemoryKind::Vtable => {\n+                (0, VectorIdx::MAX_INDEX)\n+            }\n         };\n         VClockAlloc {\n             global: Rc::clone(global),"}]}