{"sha": "91ae5e31ab57de15ef2855c700ad4b012ea00234", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYWU1ZTMxYWI1N2RlMTVlZjI4NTVjNzAwYWQ0YjAxMmVhMDAyMzQ=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-03-23T01:24:56Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-04-24T03:02:28Z"}, "message": "Fix dead code check for associated const impls.", "tree": {"sha": "1fbffde2300219664267a20b8302e1aa567221dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fbffde2300219664267a20b8302e1aa567221dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91ae5e31ab57de15ef2855c700ad4b012ea00234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91ae5e31ab57de15ef2855c700ad4b012ea00234", "html_url": "https://github.com/rust-lang/rust/commit/91ae5e31ab57de15ef2855c700ad4b012ea00234", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91ae5e31ab57de15ef2855c700ad4b012ea00234/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f7888754745696467d6ba8f93ce2b9e50c10b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7888754745696467d6ba8f93ce2b9e50c10b3b", "html_url": "https://github.com/rust-lang/rust/commit/7f7888754745696467d6ba8f93ce2b9e50c10b3b"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "1aa2ca9115d2f61429d3d62b36921c1254138db2", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=91ae5e31ab57de15ef2855c700ad4b012ea00234", "patch": "@@ -346,6 +346,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             ast::ItemTrait(_, _, _, ref trait_items) => {\n                 for trait_item in trait_items {\n                     match trait_item.node {\n+                        ast::ConstTraitItem(_, Some(_)) |\n                         ast::MethodTraitItem(_, Some(_)) => {\n                             if has_allow_dead_code_or_lang_attr(&trait_item.attrs) {\n                                 self.worklist.push(trait_item.id);\n@@ -358,7 +359,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             ast::ItemImpl(_, _, _, ref opt_trait, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     match impl_item.node {\n-                        ast::ConstImplItem(..) => {}\n+                        ast::ConstImplItem(..) |\n                         ast::MethodImplItem(..) => {\n                             if opt_trait.is_some() ||\n                                     has_allow_dead_code_or_lang_attr(&impl_item.attrs) {\n@@ -400,7 +401,7 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n         None => ()\n     }\n \n-    // Seed implemented trait methods\n+    // Seed implemented trait items\n     let mut life_seeder = LifeSeeder {\n         worklist: worklist\n     };\n@@ -481,7 +482,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n                              |ctor| self.live_symbols.contains(&ctor)) {\n             return true;\n         }\n-        // If it's a type whose methods are live, then it's live, too.\n+        // If it's a type whose items are live, then it's live, too.\n         // This is done to handle the case where, for example, the static\n         // method of a private type is used, but the type itself is never\n         // called directly.\n@@ -551,21 +552,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n         visit::walk_foreign_item(self, fi);\n     }\n \n-    fn visit_fn(&mut self, fk: visit::FnKind<'v>,\n-                _: &'v ast::FnDecl, block: &'v ast::Block,\n-                span: codemap::Span, id: ast::NodeId) {\n-        // Have to warn method here because methods are not ast::Item\n-        match fk {\n-            visit::FkMethod(name, _, _) => {\n-                if !self.symbol_is_live(id, None) {\n-                    self.warn_dead_code(id, span, name.name, \"method\");\n-                }\n-            }\n-            _ => ()\n-        }\n-        visit::walk_block(self, block);\n-    }\n-\n     fn visit_struct_field(&mut self, field: &ast::StructField) {\n         if self.should_warn_about_field(&field.node) {\n             self.warn_dead_code(field.node.id, field.span,\n@@ -575,13 +561,37 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n         visit::walk_struct_field(self, field);\n     }\n \n-    // Overwrite so that we don't warn the trait method itself.\n-    fn visit_trait_item(&mut self, trait_method: &ast::TraitItem) {\n-        match trait_method.node {\n-            ast::ConstTraitItem(_, _) => {}\n+    fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n+        match impl_item.node {\n+            ast::ConstImplItem(_, ref expr) => {\n+                if !self.symbol_is_live(impl_item.id, None) {\n+                    self.warn_dead_code(impl_item.id, impl_item.span,\n+                                        impl_item.ident.name, \"associated const\");\n+                }\n+                visit::walk_expr(self, expr)\n+            }\n+            ast::MethodImplItem(_, ref body) => {\n+                if !self.symbol_is_live(impl_item.id, None) {\n+                    self.warn_dead_code(impl_item.id, impl_item.span,\n+                                        impl_item.ident.name, \"method\");\n+                }\n+                visit::walk_block(self, body)\n+            }\n+            ast::TypeImplItem(..) |\n+            ast::MacImplItem(..) => {}\n+        }\n+    }\n+\n+    // Overwrite so that we don't warn the trait item itself.\n+    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n+        match trait_item.node {\n+            ast::ConstTraitItem(_, Some(ref expr)) => {\n+                visit::walk_expr(self, expr)\n+            }\n             ast::MethodTraitItem(_, Some(ref body)) => {\n                 visit::walk_block(self, body)\n             }\n+            ast::ConstTraitItem(_, None) |\n             ast::MethodTraitItem(_, None) |\n             ast::TypeTraitItem(..) => {}\n         }"}, {"sha": "42db13f4f3bd4423260a5a9e76c376310c0afdfe", "filename": "src/test/compile-fail/associated-const-dead-code.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-const-dead-code.rs?ref=91ae5e31ab57de15ef2855c700ad4b012ea00234", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+struct MyFoo;\n+\n+impl MyFoo {\n+    const BAR: u32 = 1;\n+    //~^ ERROR associated const is never used: `BAR`\n+}\n+\n+fn main() {\n+    let _: MyFoo = MyFoo;\n+}"}, {"sha": "e86ff0199a12d229536b609e12d325d1a8672b7f", "filename": "src/test/run-pass/associated-const-marks-live-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91ae5e31ab57de15ef2855c700ad4b012ea00234/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-const-marks-live-code.rs?ref=91ae5e31ab57de15ef2855c700ad4b012ea00234", "patch": "@@ -18,6 +18,6 @@ impl Foo {\n     const BAR: u32 = GLOBAL_BAR;\n }\n \n-fn main() {\n+pub fn main() {\n     let _: u32 = Foo::BAR;\n }"}]}