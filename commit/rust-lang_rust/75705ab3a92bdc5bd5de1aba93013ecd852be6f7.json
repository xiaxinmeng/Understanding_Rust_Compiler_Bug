{"sha": "75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NzA1YWIzYTkyYmRjNWJkNWRlMWFiYTkzMDEzZWNkODUyYmU2Zjc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T00:38:25Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T00:38:25Z"}, "message": "Update `find_nearest_parent_module`", "tree": {"sha": "13693a7a5d8d97d4adc79519a269186137413950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13693a7a5d8d97d4adc79519a269186137413950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "html_url": "https://github.com/rust-lang/rust/commit/75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478cbb0095a50a94118c8165a52c1f42f19982d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/478cbb0095a50a94118c8165a52c1f42f19982d5", "html_url": "https://github.com/rust-lang/rust/commit/478cbb0095a50a94118c8165a52c1f42f19982d5"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "4009a42955f8725100eea438fc8be87d70c1bafa", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "patch": "@@ -625,13 +625,11 @@ where\n     r\n }\n \n-crate fn find_closest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n-    if item.is_fake() {\n-        // FIXME: is this correct?\n-        None\n-    // If we're documenting the crate root itself, it has no parent. Use the root instead.\n-    } else if item.def_id.is_top_level_module() {\n-        Some(item.def_id)\n+/// Find the nearest parent module of a [`DefId`].\n+crate fn find_nearest_parent_module(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n+    if def_id.is_top_level_module() {\n+        // The crate root has no parent. Use it as the root instead.\n+        Some(def_id)\n     } else {\n         let mut current = def_id;\n         // The immediate parent might not always be a module."}, {"sha": "9fca005c34ee089c4be2d3a0ff201c89a9a8f60f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n-use crate::clean::{self, utils::find_closest_parent_module, PrimitiveType};\n+use crate::clean::{self, utils::find_nearest_parent_module, PrimitiveType};\n use crate::formats::cache::cache;\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n@@ -1097,7 +1097,7 @@ impl clean::Visibility {\n             clean::Inherited => Ok(()),\n \n             clean::Visibility::Restricted(vis_did) => {\n-                let parent_module = find_closest_parent_module(tcx, item_did);\n+                let parent_module = find_nearest_parent_module(tcx, item_did);\n \n                 if vis_did.index == CRATE_DEF_INDEX {\n                     write!(f, \"pub(crate) \")\n@@ -1106,7 +1106,7 @@ impl clean::Visibility {\n                     // is the same as no visibility modifier\n                     Ok(())\n                 } else if parent_module\n-                    .map(|parent| find_closest_parent_module(tcx, parent))\n+                    .map(|parent| find_nearest_parent_module(tcx, parent))\n                     .flatten()\n                     == Some(vis_did)\n                 {"}, {"sha": "e225eb47b12bee7f408607a7b8b76361c4849ab4", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75705ab3a92bdc5bd5de1aba93013ecd852be6f7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "patch": "@@ -31,7 +31,7 @@ use std::cell::Cell;\n use std::mem;\n use std::ops::Range;\n \n-use crate::clean::{self, utils::find_closest_parent_module, Crate, Item, ItemLink, PrimitiveType};\n+use crate::clean::{self, utils::find_nearest_parent_module, Crate, Item, ItemLink, PrimitiveType};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::markdown_links;\n@@ -767,7 +767,12 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         use rustc_middle::ty::DefIdTree;\n \n-        let parent_node = find_closest_parent_module(self.cx.tcx, item.def_id);\n+        let parent_node = if item.is_fake() {\n+            // FIXME: is this correct?\n+            None\n+        } else {\n+            find_nearest_parent_module(self.cx.tcx, item.def_id)\n+        };\n \n         if parent_node.is_some() {\n             trace!(\"got parent node for {:?} {:?}, id {:?}\", item.type_(), item.name, item.def_id);"}]}