{"sha": "685c3c1b4a7c1949048177409ca43fc05daefd3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NWMzYzFiNGE3YzE5NDkwNDgxNzc0MDljYTQzZmMwNWRhZWZkM2Y=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-03-19T06:01:11Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-03-19T06:01:11Z"}, "message": "Reduce the diagnostic span when multiple fields are missing in pattern", "tree": {"sha": "8ccd7255bfb5f683256662869bed351749b0f48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ccd7255bfb5f683256662869bed351749b0f48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685c3c1b4a7c1949048177409ca43fc05daefd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685c3c1b4a7c1949048177409ca43fc05daefd3f", "html_url": "https://github.com/rust-lang/rust/commit/685c3c1b4a7c1949048177409ca43fc05daefd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685c3c1b4a7c1949048177409ca43fc05daefd3f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adf2135adc4a65a78ba053f04c29d7fe0468eb87", "url": "https://api.github.com/repos/rust-lang/rust/commits/adf2135adc4a65a78ba053f04c29d7fe0468eb87", "html_url": "https://github.com/rust-lang/rust/commit/adf2135adc4a65a78ba053f04c29d7fe0468eb87"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "0b5383f1f8d1ed06cac2c209129ea8eb8c7fb83f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/685c3c1b4a7c1949048177409ca43fc05daefd3f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685c3c1b4a7c1949048177409ca43fc05daefd3f/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=685c3c1b4a7c1949048177409ca43fc05daefd3f", "patch": "@@ -904,6 +904,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         // Keep track of which fields have already appeared in the pattern.\n         let mut used_fields = FxHashMap();\n \n+        let mut inexistent_fields = vec![];\n         // Typecheck each field.\n         for &Spanned { node: ref field, span } in fields {\n             let field_ty = match used_fields.entry(field.name) {\n@@ -927,34 +928,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            let mut err = struct_span_err!(\n-                                tcx.sess,\n-                                span,\n-                                E0026,\n-                                \"{} `{}` does not have a field named `{}`\",\n-                                kind_name,\n-                                tcx.item_path_str(variant.did),\n-                                field.name\n-                            );\n-                            err.span_label(span,\n-                                           format!(\"{} `{}` does not have field `{}`\",\n-                                                   kind_name,\n-                                                   tcx.item_path_str(variant.did),\n-                                                   field.name));\n-                            if tcx.sess.teach(&err.get_code().unwrap()) {\n-                                err.note(\n-                                    \"This error indicates that a struct pattern attempted to \\\n-                                     extract a non-existent field from a struct. Struct fields \\\n-                                     are identified by the name used before the colon : so struct \\\n-                                     patterns should resemble the declaration of the struct type \\\n-                                     being matched.\\n\\n\\\n-                                     If you are using shorthand field patterns but want to refer \\\n-                                     to the struct field by a different name, you should rename \\\n-                                     it explicitly.\"\n-                                );\n-                            }\n-                            err.emit();\n-\n+                            inexistent_fields.push((span, field.name));\n                             tcx.types.err\n                         })\n                 }\n@@ -963,6 +937,46 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             self.check_pat_walk(&field.pat, field_ty, def_bm, true);\n         }\n \n+        if inexistent_fields.len() > 0 {\n+            let field_names = if inexistent_fields.len() == 1 {\n+                format!(\"a field named `{}`\", inexistent_fields[0].1)\n+            } else {\n+                format!(\"fields named {}\",\n+                        inexistent_fields.iter()\n+                            .map(|(_, name)| format!(\"`{}`\", name))\n+                            .collect::<Vec<String>>()\n+                            .join(\", \"))\n+            };\n+            let spans = inexistent_fields.iter().map(|(span, _)| *span).collect::<Vec<_>>();\n+            let mut err = struct_span_err!(tcx.sess,\n+                                           spans,\n+                                           E0026,\n+                                           \"{} `{}` does not have {}\",\n+                                           kind_name,\n+                                           tcx.item_path_str(variant.did),\n+                                           field_names);\n+            for (span, name) in &inexistent_fields {\n+                err.span_label(*span,\n+                               format!(\"{} `{}` does not have field `{}`\",\n+                                       kind_name,\n+                                       tcx.item_path_str(variant.did),\n+                                       name));\n+            }\n+            if tcx.sess.teach(&err.get_code().unwrap()) {\n+                err.note(\n+                    \"This error indicates that a struct pattern attempted to \\\n+                     extract a non-existent field from a struct. Struct fields \\\n+                     are identified by the name used before the colon : so struct \\\n+                     patterns should resemble the declaration of the struct type \\\n+                     being matched.\\n\\n\\\n+                     If you are using shorthand field patterns but want to refer \\\n+                     to the struct field by a different name, you should rename \\\n+                     it explicitly.\"\n+                );\n+            }\n+            err.emit();\n+        }\n+\n         // Require `..` if struct has non_exhaustive attribute.\n         if adt.is_struct() && adt.is_non_exhaustive() && !adt.did.is_local() && !etc {\n             span_err!(tcx.sess, span, E0638,"}, {"sha": "2469f245345430feda1bd1c314769b907c77d12e", "filename": "src/test/ui/missing-fields-in-struct-pattern.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/685c3c1b4a7c1949048177409ca43fc05daefd3f/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685c3c1b4a7c1949048177409ca43fc05daefd3f/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-fields-in-struct-pattern.rs?ref=685c3c1b4a7c1949048177409ca43fc05daefd3f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S(usize, usize, usize, usize);\n+\n+fn main() {\n+    if let S { a, b, c, d } = S(1, 2, 3, 4) {\n+        println!(\"hi\");\n+    }\n+}"}]}