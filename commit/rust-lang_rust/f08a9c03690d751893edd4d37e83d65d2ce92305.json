{"sha": "f08a9c03690d751893edd4d37e83d65d2ce92305", "node_id": "C_kwDOAAsO6NoAKGYwOGE5YzAzNjkwZDc1MTg5M2VkZDRkMzdlODNkNjVkMmNlOTIzMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T13:33:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T13:33:54Z"}, "message": "Auto merge of #8691 - flip1995:infinite_recursion_only_in_recursion, r=llogiq\n\nPrevent infinite (exponential) recursion in only_used_in_recursion\n\nThis simplifies the visitor code a bit and prevents checking expressions\nmultiple times. I still think this lint should be removed for now,\nbecause its code isn't really tested.\n\nFixes #8689\n\n**NOTE:** Before merging this, we should talk about removing and revisiting this lint. See my comment in #8689\n\nchangelog: prevent infinite recursion in [`only_used_in_recursion`]", "tree": {"sha": "00b9974ed9a4ac9e5ec9a58262690d35788a0f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b9974ed9a4ac9e5ec9a58262690d35788a0f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f08a9c03690d751893edd4d37e83d65d2ce92305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f08a9c03690d751893edd4d37e83d65d2ce92305", "html_url": "https://github.com/rust-lang/rust/commit/f08a9c03690d751893edd4d37e83d65d2ce92305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f08a9c03690d751893edd4d37e83d65d2ce92305/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bd03afcda90ed458ecf95cf46798c13a3817d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bd03afcda90ed458ecf95cf46798c13a3817d3", "html_url": "https://github.com/rust-lang/rust/commit/b3bd03afcda90ed458ecf95cf46798c13a3817d3"}, {"sha": "214fba7ed4a8e2199d42733cc191b956f0c2b017", "url": "https://api.github.com/repos/rust-lang/rust/commits/214fba7ed4a8e2199d42733cc191b956f0c2b017", "html_url": "https://github.com/rust-lang/rust/commit/214fba7ed4a8e2199d42733cc191b956f0c2b017"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "f946fc11192817a7edbc1056b5c9af01454dbd02", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 16, "deletions": 31, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f08a9c03690d751893edd4d37e83d65d2ce92305/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f08a9c03690d751893edd4d37e83d65d2ce92305/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=f08a9c03690d751893edd4d37e83d65d2ce92305", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n-use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n+use rustc_hir::intravisit::{walk_expr, walk_stmt, FnKind, Visitor};\n use rustc_hir::{\n     Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n     QPath, Stmt, StmtKind, TyKind, UnOp,\n@@ -145,7 +145,8 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 is_method: matches!(kind, FnKind::Method(..)),\n                 has_self,\n                 ty_res,\n-                ty_ctx: cx.tcx,\n+                tcx: cx.tcx,\n+                visited_exprs: FxHashSet::default(),\n             };\n \n             visitor.visit_expr(&body.value);\n@@ -206,19 +207,13 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n }\n \n pub fn is_primitive(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n-        ty::Ref(_, t, _) => is_primitive(*t),\n-        _ => false,\n-    }\n+    let ty = ty.peel_refs();\n+    ty.is_primitive() || ty.is_str()\n }\n \n pub fn is_array(ty: Ty<'_>) -> bool {\n-    match ty.kind() {\n-        ty::Array(..) | ty::Slice(..) => true,\n-        ty::Ref(_, t, _) => is_array(*t),\n-        _ => false,\n-    }\n+    let ty = ty.peel_refs();\n+    ty.is_array() || ty.is_array_slice()\n }\n \n /// This builds the graph of side effect.\n@@ -250,40 +245,30 @@ pub struct SideEffectVisit<'tcx> {\n     is_method: bool,\n     has_self: bool,\n     ty_res: &'tcx TypeckResults<'tcx>,\n-    ty_ctx: TyCtxt<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    visited_exprs: FxHashSet<HirId>,\n }\n \n impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n-    fn visit_block(&mut self, b: &'tcx Block<'tcx>) {\n-        b.stmts.iter().for_each(|stmt| {\n-            self.visit_stmt(stmt);\n-            self.ret_vars.clear();\n-        });\n-        walk_list!(self, visit_expr, b.expr);\n-    }\n-\n     fn visit_stmt(&mut self, s: &'tcx Stmt<'tcx>) {\n         match s.kind {\n             StmtKind::Local(Local {\n                 pat, init: Some(init), ..\n             }) => {\n                 self.visit_pat_expr(pat, init, false);\n-                self.ret_vars.clear();\n             },\n-            StmtKind::Item(i) => {\n-                let item = self.ty_ctx.hir().item(i);\n-                self.visit_item(item);\n-                self.ret_vars.clear();\n-            },\n-            StmtKind::Expr(e) | StmtKind::Semi(e) => {\n-                self.visit_expr(e);\n-                self.ret_vars.clear();\n+            StmtKind::Item(_) | StmtKind::Expr(_) | StmtKind::Semi(_) => {\n+                walk_stmt(self, s);\n             },\n             StmtKind::Local(_) => {},\n         }\n+        self.ret_vars.clear();\n     }\n \n     fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if !self.visited_exprs.insert(ex.hir_id) {\n+            return;\n+        }\n         match ex.kind {\n             ExprKind::Array(exprs) | ExprKind::Tup(exprs) => {\n                 self.ret_vars = exprs\n@@ -307,7 +292,7 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n             ExprKind::Closure(_, _, body_id, _, _) => {\n-                let body = self.ty_ctx.hir().body(body_id);\n+                let body = self.tcx.hir().body(body_id);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);\n                 self.add_side_effect(vars);"}]}