{"sha": "434f108adad75b7c5e25db745a9f9fefa5cdaa31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNGYxMDhhZGFkNzViN2M1ZTI1ZGI3NDVhOWY5ZmVmYTVjZGFhMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T15:48:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T16:01:19Z"}, "message": "Simplify", "tree": {"sha": "82a4925ddcd24fce7646e36615e192ad0bf63b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a4925ddcd24fce7646e36615e192ad0bf63b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/434f108adad75b7c5e25db745a9f9fefa5cdaa31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/434f108adad75b7c5e25db745a9f9fefa5cdaa31", "html_url": "https://github.com/rust-lang/rust/commit/434f108adad75b7c5e25db745a9f9fefa5cdaa31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/434f108adad75b7c5e25db745a9f9fefa5cdaa31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "html_url": "https://github.com/rust-lang/rust/commit/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "135de7ffb3d5529c992f23b6720ed48051912233", "filename": "crates/ra_cli/src/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_stats.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -109,7 +109,7 @@ pub fn run(\n         }\n         let body = f.body(db);\n         let inference_result = f.infer(db);\n-        for (expr_id, _) in body.exprs() {\n+        for (expr_id, _) in body.exprs.iter() {\n             let ty = &inference_result[expr_id];\n             num_exprs += 1;\n             if let Ty::Unknown = ty {"}, {"sha": "43fedde7aa056eb69437e747f9d5dd693d2cdcff", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -44,15 +44,15 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n     pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n         let body = self.func.body(db);\n \n-        for e in body.exprs() {\n+        for e in body.exprs.iter() {\n             if let (id, Expr::RecordLit { path, fields, spread }) = e {\n                 self.validate_record_literal(id, path, fields, *spread, db);\n             }\n         }\n \n-        let body_expr = &body[body.body_expr()];\n+        let body_expr = &body[body.body_expr];\n         if let Expr::Block { statements: _, tail: Some(t) } = body_expr {\n-            self.validate_results_in_tail_expr(body.body_expr(), *t, db);\n+            self.validate_results_in_tail_expr(body.body_expr, *t, db);\n         }\n     }\n "}, {"sha": "efee2f658bba7e2e30febe0a4965ae3d968e7a32", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -80,7 +80,7 @@ impl TestDB {\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter().next() {\n             let crate_def_map = self.crate_def_map(krate);\n-            for module_id in crate_def_map.modules() {\n+            for (module_id, _) in crate_def_map.modules.iter() {\n                 let module_id = ModuleId { krate, module_id };\n                 let module = crate::Module::from(module_id);\n                 module.diagnostics("}, {"sha": "2e744e5ece0c40947fe7ab588dfa0e66e671ad2c", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -565,7 +565,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        for (type_ref, pat) in data.params.iter().zip(body.params()) {\n+        for (type_ref, pat) in data.params.iter().zip(body.params.iter()) {\n             let ty = self.make_ty(type_ref);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n@@ -574,7 +574,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn infer_body(&mut self) {\n-        self.infer_expr(self.body.body_expr(), &Expectation::has_type(self.return_ty.clone()));\n+        self.infer_expr(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n     }\n \n     fn resolve_into_iter_item(&self) -> Option<TypeAlias> {"}, {"sha": "45a36d7935d4ae504d6ca5871b28fcb39b2f1460", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -20,15 +20,15 @@ use crate::{\n     DefWithBodyId, HasModule, HasSource, Lookup, ModuleId,\n };\n \n-pub struct Expander {\n+struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n     module: ModuleId,\n }\n \n impl Expander {\n-    pub fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n+    fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n         Expander { crate_def_map, current_file_id, hygiene, module }\n@@ -101,17 +101,17 @@ impl Drop for Mark {\n /// The body of an item (function, const etc.).\n #[derive(Debug, Eq, PartialEq)]\n pub struct Body {\n-    exprs: Arena<ExprId, Expr>,\n-    pats: Arena<PatId, Pat>,\n+    pub exprs: Arena<ExprId, Expr>,\n+    pub pats: Arena<PatId, Pat>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n     /// the external type of the function).\n     ///\n     /// If this `Body` is for the body of a constant, this will just be\n     /// empty.\n-    params: Vec<PatId>,\n+    pub params: Vec<PatId>,\n     /// The `ExprId` of the actual body expression.\n-    body_expr: ExprId,\n+    pub body_expr: ExprId,\n }\n \n pub type ExprPtr = Either<AstPtr<ast::Expr>, AstPtr<ast::RecordField>>;\n@@ -182,22 +182,6 @@ impl Body {\n     ) -> (Body, BodySourceMap) {\n         lower::lower(db, expander, params, body)\n     }\n-\n-    pub fn params(&self) -> &[PatId] {\n-        &self.params\n-    }\n-\n-    pub fn body_expr(&self) -> ExprId {\n-        self.body_expr\n-    }\n-\n-    pub fn exprs(&self) -> impl Iterator<Item = (ExprId, &Expr)> {\n-        self.exprs.iter()\n-    }\n-\n-    pub fn pats(&self) -> impl Iterator<Item = (PatId, &Pat)> {\n-        self.pats.iter()\n-    }\n }\n \n impl Index<ExprId> for Body {"}, {"sha": "5240a59d5185edd8d7b1e3c58f90943020e76276", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -54,8 +54,8 @@ impl ExprScopes {\n         let mut scopes =\n             ExprScopes { scopes: Arena::default(), scope_by_expr: FxHashMap::default() };\n         let root = scopes.root_scope();\n-        scopes.add_params_bindings(body, root, body.params());\n-        compute_expr_scopes(body.body_expr(), body, &mut scopes, root);\n+        scopes.add_params_bindings(body, root, &body.params);\n+        compute_expr_scopes(body.body_expr, body, &mut scopes, root);\n         scopes\n     }\n "}, {"sha": "2359386c2806c51ba4e6e0aff9176c1088f75238", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -81,13 +81,13 @@ use crate::{\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateDefMap {\n     pub root: LocalModuleId,\n+    pub modules: Arena<LocalModuleId, ModuleData>,\n     pub(crate) krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n     /// a dependency (`std` or `core`).\n     pub(crate) prelude: Option<ModuleId>,\n     pub(crate) extern_prelude: FxHashMap<Name, ModuleDefId>,\n-    pub(crate) modules: Arena<LocalModuleId, ModuleData>,\n \n     edition: Edition,\n     diagnostics: Vec<DefDiagnostic>,"}, {"sha": "f502f1cb30e1eb11a0b999c2463e06fac4045c9c", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434f108adad75b7c5e25db745a9f9fefa5cdaa31/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=434f108adad75b7c5e25db745a9f9fefa5cdaa31", "patch": "@@ -25,7 +25,7 @@ fn compute_crate_def_map(fixture: &str) -> Arc<CrateDefMap> {\n \n fn render_crate_def_map(map: &CrateDefMap) -> String {\n     let mut buf = String::new();\n-    go(&mut buf, map, \"\\ncrate\", map.root());\n+    go(&mut buf, map, \"\\ncrate\", map.root);\n     return buf.trim().to_string();\n \n     fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: LocalModuleId) {"}]}