{"sha": "97d016eefd11c301d140ea5fba90a971665ba2f2", "node_id": "C_kwDOAAsO6NoAKDk3ZDAxNmVlZmQxMWMzMDFkMTQwZWE1ZmJhOTBhOTcxNjY1YmEyZjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-18T16:22:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-18T16:22:06Z"}, "message": "Rollup merge of #96148 - marmeladema:nll-revisions-self, r=jackh726\n\nUse revisions instead of nll compare mode for `/self/` ui tests\n\nr? ``@jackh726``", "tree": {"sha": "95bf57b651e4dc4c4f6010fdb7448f460eaa6755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95bf57b651e4dc4c4f6010fdb7448f460eaa6755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d016eefd11c301d140ea5fba90a971665ba2f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXZAuCRBK7hj4Ov3rIwAAXEcIAJuqAeCZEdp2eS4NYNEejzwH\n8rLg0cFS62Osyae8sIgZp4eYaM2cQnDYXutzAp6eivO1hsvffoH7flY6GsSJH1TA\nJx7AL3QQgtloGOnBBHfjML1XR0N7wJVgY8pJO4ETXIz+NwXCeiQpIEK5LbgWnahS\nfeDOiS6/SG9OsJPFPlRaTmhGSm6kQw6yKs78zw1COkFvZR/m6ZZEZ9pmvZvvWVOv\nWZVaSY0j96EpShGXbF0JnNnd7OzaxJK61IwPaIBlRd7vu3MR4dn9aqTuh8DKeLLI\nvGVE9cAJjECxPBq2FSUZkDV+R2hLLL/TgQtiQ4kfkQ7hrBG9rklvnHx9HBUX+Wk=\n=oowF\n-----END PGP SIGNATURE-----\n", "payload": "tree 95bf57b651e4dc4c4f6010fdb7448f460eaa6755\nparent 9c1c8b2dff12652c74030097862d211aea5cf34a\nparent e818f45cd3f8f02801d81cd23c04f6adc1b41812\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650298926 +0200\ncommitter GitHub <noreply@github.com> 1650298926 +0200\n\nRollup merge of #96148 - marmeladema:nll-revisions-self, r=jackh726\n\nUse revisions instead of nll compare mode for `/self/` ui tests\n\nr? ``@jackh726``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d016eefd11c301d140ea5fba90a971665ba2f2", "html_url": "https://github.com/rust-lang/rust/commit/97d016eefd11c301d140ea5fba90a971665ba2f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d016eefd11c301d140ea5fba90a971665ba2f2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1c8b2dff12652c74030097862d211aea5cf34a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1c8b2dff12652c74030097862d211aea5cf34a", "html_url": "https://github.com/rust-lang/rust/commit/9c1c8b2dff12652c74030097862d211aea5cf34a"}, {"sha": "e818f45cd3f8f02801d81cd23c04f6adc1b41812", "url": "https://api.github.com/repos/rust-lang/rust/commits/e818f45cd3f8f02801d81cd23c04f6adc1b41812", "html_url": "https://github.com/rust-lang/rust/commit/e818f45cd3f8f02801d81cd23c04f6adc1b41812"}], "stats": {"total": 552, "additions": 360, "deletions": 192}, "files": [{"sha": "7985bf266d8e8e10b30fc7a049b3f11d5c58b4e6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,21 +1,21 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                    ----     ----   ^ ...but data from `f` is returned here\n    |                                    |\n    |                                    this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:82\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:82\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                                     ----              -----------------          ^ ...but data from `f` is returned here\n    |                                     |\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:22:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                               ------     ---   ^^^ ...but data from `arg` is returned here", "previous_filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr"}, {"sha": "8a55a7c34d77ba44ef7a4f50b2489cbb14148878", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -8,7 +8,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -17,7 +17,7 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:64\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:22:64\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                  --              -                             ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`"}, {"sha": "c54f7963c231c8223d09bd65eb096cbee6b55a86", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,20 +1,27 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n use std::pin::Pin;\n \n struct Foo;\n \n impl Foo {\n     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ lifetime may not live long enough\n \n     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-    //~^ ERROR lifetime mismatch\n+    //[base]~^ ERROR lifetime mismatch\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n type Alias<T> = Pin<T>;\n impl Foo {\n-    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "c0e2f0bd3e900731e0b2d3f01898d67a3e8c89e1", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                              ----     ----   ^ ...but data from `f` is returned here\n@@ -13,7 +13,7 @@ LL |     fn a<'a>(self: Pin<&'a Foo>, f: &'a Foo) -> &Foo { f }\n    |         ++++            ++           ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:76\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:14:76\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                               ----              -----------------          ^ ...but data from `f` is returned here\n@@ -27,7 +27,7 @@ LL |     fn c<'a>(self: Pin<&'a Self>, f: &'a Foo, g: &Foo) -> (Pin<&Foo>, &Foo)\n    |         ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:21:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                         ------     ---   ^^^ ...but data from `arg` is returned here", "previous_filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.stderr"}, {"sha": "b06ebf70477378344d4afc6c50ebca9dada1940f", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:6:46\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:10:46\n    |\n LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    -         -               ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -8,7 +8,7 @@ LL |     fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:8:69\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:14:69\n    |\n LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                    -          -                                     ^^^^^^^^^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -17,7 +17,7 @@ LL |     fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self,\n    |                    let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:13:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch.rs:21:58\n    |\n LL |     fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |            --  ---- has type `Pin<&'1 Foo>`              ^^^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`"}, {"sha": "34b08b364fb5db9d0be509f1a07e9cfb08051d6b", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,16 +1,26 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n use std::pin::Pin;\n \n struct Foo;\n \n impl Foo {\n-    fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f } //~ ERROR E0623\n+    fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ lifetime may not live long enough\n \n-    fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) } //~ ERROR E0623\n+    fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n type Alias<T> = Pin<T>;\n impl Foo {\n-    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+    fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+    //[base]~^ ERROR E0623\n+    //[nll]~^^ lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "b43854906149a2b996adbdd6b2f22669680cb713", "filename": "src/test/ui/self/elision/lt-ref-self-async.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:13:9\n+  --> $DIR/lt-ref-self-async.rs:16:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:19:9\n+  --> $DIR/lt-ref-self-async.rs:24:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:23:9\n+  --> $DIR/lt-ref-self-async.rs:30:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:27:9\n+  --> $DIR/lt-ref-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:31:9\n+  --> $DIR/lt-ref-self-async.rs:42:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:35:9\n+  --> $DIR/lt-ref-self-async.rs:48:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                     ----     ----", "previous_filename": "src/test/ui/self/elision/lt-ref-self-async.stderr"}, {"sha": "2ba9a6596f62d8249e5db98c48b7eae77a806d47", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:13:9\n+  --> $DIR/lt-ref-self-async.rs:16:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:19:9\n+  --> $DIR/lt-ref-self-async.rs:24:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:23:9\n+  --> $DIR/lt-ref-self-async.rs:30:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:27:9\n+  --> $DIR/lt-ref-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:31:9\n+  --> $DIR/lt-ref-self-async.rs:42:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:35:9\n+  --> $DIR/lt-ref-self-async.rs:48:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -           - let's call the lifetime of this reference `'1`"}, {"sha": "24482b3a2787b19a4b5445a6fe5718037c5305b4", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![allow(non_snake_case)]\n \n@@ -10,29 +13,41 @@ impl<'a> Struct<'a> {\n     // Test using `&self` sugar:\n \n     async fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "0f5cd6fb853969f271a5b8422246c10c84682958", "filename": "src/test/ui/self/elision/lt-ref-self.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:11:9\n+  --> $DIR/lt-ref-self.rs:15:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           ----     ----\n@@ -15,7 +15,7 @@ LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n    |                ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:17:9\n+  --> $DIR/lt-ref-self.rs:23:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -31,7 +31,7 @@ LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n    |                ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:21:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -47,7 +47,7 @@ LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:25:9\n+  --> $DIR/lt-ref-self.rs:35:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -63,7 +63,7 @@ LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:29:9\n+  --> $DIR/lt-ref-self.rs:41:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   ----     ----\n@@ -79,7 +79,7 @@ LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self.rs:33:9\n+  --> $DIR/lt-ref-self.rs:47:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                               ----     ----", "previous_filename": "src/test/ui/self/elision/lt-ref-self.stderr"}, {"sha": "1934207527b9cd9e56c5e066b9b8db08dd6d8d14", "filename": "src/test/ui/self/elision/lt-ref-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:11:9\n+  --> $DIR/lt-ref-self.rs:15:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:17:9\n+  --> $DIR/lt-ref-self.rs:23:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:21:9\n+  --> $DIR/lt-ref-self.rs:29:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:25:9\n+  --> $DIR/lt-ref-self.rs:35:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:29:9\n+  --> $DIR/lt-ref-self.rs:41:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self.rs:33:9\n+  --> $DIR/lt-ref-self.rs:47:9\n    |\n LL |     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                   -           - let's call the lifetime of this reference `'1`"}, {"sha": "62bdb13dc0f95dd1e5ab2ad7a4f9b326c39a0601", "filename": "src/test/ui/self/elision/lt-ref-self.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(non_snake_case)]\n \n use std::pin::Pin;\n@@ -8,29 +12,41 @@ impl<'a> Struct<'a> {\n     // Test using `&self` sugar:\n \n     fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&Self` explicitly:\n \n     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "851337552c9ad0890f551b2d9d696b7cf61c4a5e", "filename": "src/test/ui/self/elision/ref-mut-self-async.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:13:9\n+  --> $DIR/ref-mut-self-async.rs:16:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:19:9\n+  --> $DIR/ref-mut-self-async.rs:24:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                           ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:23:9\n+  --> $DIR/ref-mut-self-async.rs:30:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:27:9\n+  --> $DIR/ref-mut-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:31:9\n+  --> $DIR/ref-mut-self-async.rs:42:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:35:9\n+  --> $DIR/ref-mut-self-async.rs:48:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                             ----     ----", "previous_filename": "src/test/ui/self/elision/ref-mut-self-async.stderr"}, {"sha": "cdd464039cda0501162c7a8f20439f4e9bebbbf6", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:13:9\n+  --> $DIR/ref-mut-self-async.rs:16:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       -             - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:19:9\n+  --> $DIR/ref-mut-self-async.rs:24:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             -             - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:23:9\n+  --> $DIR/ref-mut-self-async.rs:30:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     -              - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:27:9\n+  --> $DIR/ref-mut-self-async.rs:36:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     -              - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:31:9\n+  --> $DIR/ref-mut-self-async.rs:42:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -               - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:35:9\n+  --> $DIR/ref-mut-self-async.rs:48:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             -               - let's call the lifetime of this reference `'1`"}, {"sha": "59b41f364f9a1bf7dd9110d6cbfbda0a1e113f2d", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![allow(non_snake_case)]\n \n@@ -10,29 +13,41 @@ impl Struct {\n     // Test using `&mut self` sugar:\n \n     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&mut Self` explicitly:\n \n     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "fceddddf20ea5bafcf1a6438152f37c855b0f58e", "filename": "src/test/ui/self/elision/ref-mut-self.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:11:9\n+  --> $DIR/ref-mut-self.rs:15:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                               ----     ----\n@@ -15,7 +15,7 @@ LL |     fn ref_self<'a>(&'a mut self, f: &'a u32) -> &u32 {\n    |                ++++  ++               ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:17:9\n+  --> $DIR/ref-mut-self.rs:23:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -31,7 +31,7 @@ LL |     fn ref_Self<'a>(self: &'a mut Self, f: &'a u32) -> &u32 {\n    |                ++++        ++               ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:21:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -47,7 +47,7 @@ LL |     fn box_ref_Self<'a>(self: Box<&'a mut Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:25:9\n+  --> $DIR/ref-mut-self.rs:35:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -63,7 +63,7 @@ LL |     fn pin_ref_Self<'a>(self: Pin<&'a mut Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++                ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:29:9\n+  --> $DIR/ref-mut-self.rs:41:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -79,7 +79,7 @@ LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a mut Self>>, f: &'a u32) -> &u\n    |                        ++++                ++                 ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self.rs:33:9\n+  --> $DIR/ref-mut-self.rs:47:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                       ----     ----", "previous_filename": "src/test/ui/self/elision/ref-mut-self.stderr"}, {"sha": "f1f4d341b2bd8ac45b464f39bffde6380271ae99", "filename": "src/test/ui/self/elision/ref-mut-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:11:9\n+  --> $DIR/ref-mut-self.rs:15:9\n    |\n LL |     fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                 -             - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:17:9\n+  --> $DIR/ref-mut-self.rs:23:9\n    |\n LL |     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                       -             - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:21:9\n+  --> $DIR/ref-mut-self.rs:29:9\n    |\n LL |     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:25:9\n+  --> $DIR/ref-mut-self.rs:35:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                               -              - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:29:9\n+  --> $DIR/ref-mut-self.rs:41:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self.rs:33:9\n+  --> $DIR/ref-mut-self.rs:47:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                       -               - let's call the lifetime of this reference `'1`"}, {"sha": "81bd279129d2b0160f934bb672d38a3b2002879a", "filename": "src/test/ui/self/elision/ref-mut-self.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(non_snake_case)]\n \n use std::pin::Pin;\n@@ -8,29 +12,41 @@ impl Struct {\n     // Test using `&mut self` sugar:\n \n     fn ref_self(&mut self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&mut Self` explicitly:\n \n     fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "0de11c248758f711a403ceddf31846add2fd34f9", "filename": "src/test/ui/self/elision/ref-mut-struct-async.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:13:9\n+  --> $DIR/ref-mut-struct-async.rs:16:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                               ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:17:9\n+  --> $DIR/ref-mut-struct-async.rs:22:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:21:9\n+  --> $DIR/ref-mut-struct-async.rs:28:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                        ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:25:9\n+  --> $DIR/ref-mut-struct-async.rs:34:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                 ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:29:9\n+  --> $DIR/ref-mut-struct-async.rs:40:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                 ----     ----", "previous_filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr"}, {"sha": "0ef410c8df1eb1c0479b10f3bd543026310e25bf", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:13:9\n+  --> $DIR/ref-mut-struct-async.rs:16:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -               - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:17:9\n+  --> $DIR/ref-mut-struct-async.rs:22:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -                - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:21:9\n+  --> $DIR/ref-mut-struct-async.rs:28:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -                - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:25:9\n+  --> $DIR/ref-mut-struct-async.rs:34:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -                 - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:29:9\n+  --> $DIR/ref-mut-struct-async.rs:40:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -                 - let's call the lifetime of this reference `'1`"}, {"sha": "7448988355c9ef6bb1d63614e7da9c01d66a5c0a", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![allow(non_snake_case)]\n \n@@ -10,23 +13,33 @@ impl Struct {\n     // Test using `&mut Struct` explicitly:\n \n     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "a01492f6cd3fa9ea8180be29be6da11c52182419", "filename": "src/test/ui/self/elision/ref-mut-struct.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:11:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                         ----     ----\n@@ -15,7 +15,7 @@ LL |     fn ref_Struct<'a>(self: &'a mut Struct, f: &'a u32) -> &u32 {\n    |                  ++++        ++                 ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:15:9\n+  --> $DIR/ref-mut-struct.rs:21:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -31,7 +31,7 @@ LL |     fn box_ref_Struct<'a>(self: Box<&'a mut Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:19:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                  ----     ----\n@@ -47,7 +47,7 @@ LL |     fn pin_ref_Struct<'a>(self: Pin<&'a mut Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++                  ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:23:9\n+  --> $DIR/ref-mut-struct.rs:33:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----\n@@ -63,7 +63,7 @@ LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a mut Struct>>, f: &'a u32) -\n    |                          ++++                ++                   ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct.rs:27:9\n+  --> $DIR/ref-mut-struct.rs:39:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                           ----     ----", "previous_filename": "src/test/ui/self/elision/ref-mut-struct.stderr"}, {"sha": "de7eb02d7a7fe38e82f341d056cf512d08ffa806", "filename": "src/test/ui/self/elision/ref-mut-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:11:9\n+  --> $DIR/ref-mut-struct.rs:15:9\n    |\n LL |     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                         -               - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:15:9\n+  --> $DIR/ref-mut-struct.rs:21:9\n    |\n LL |     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:19:9\n+  --> $DIR/ref-mut-struct.rs:27:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                 -                - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:23:9\n+  --> $DIR/ref-mut-struct.rs:33:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct.rs:27:9\n+  --> $DIR/ref-mut-struct.rs:39:9\n    |\n LL |     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                         -                 - let's call the lifetime of this reference `'1`"}, {"sha": "72674bd65b66a8fd53ce042f7debb3a8f9a06280", "filename": "src/test/ui/self/elision/ref-mut-struct.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(non_snake_case)]\n \n use std::pin::Pin;\n@@ -8,23 +12,33 @@ impl Struct {\n     // Test using `&mut Struct` explicitly:\n \n     fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "fa13b69bb21a3cdf415e97650efd9298b536dbb6", "filename": "src/test/ui/self/elision/ref-self-async.base.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:23:9\n+  --> $DIR/ref-self-async.rs:26:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:29:9\n+  --> $DIR/ref-self-async.rs:34:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                       ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:33:9\n+  --> $DIR/ref-self-async.rs:40:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:37:9\n+  --> $DIR/ref-self-async.rs:46:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:41:9\n+  --> $DIR/ref-self-async.rs:52:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:45:9\n+  --> $DIR/ref-self-async.rs:58:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                         ----     ----\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:49:9\n+  --> $DIR/ref-self-async.rs:64:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                             ---     ---", "previous_filename": "src/test/ui/self/elision/ref-self-async.stderr"}, {"sha": "77faaa866505fb1ae5d8e74ab9a88faa6390b901", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:23:9\n+  --> $DIR/ref-self-async.rs:26:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:29:9\n+  --> $DIR/ref-self-async.rs:34:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:33:9\n+  --> $DIR/ref-self-async.rs:40:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:37:9\n+  --> $DIR/ref-self-async.rs:46:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:41:9\n+  --> $DIR/ref-self-async.rs:52:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:45:9\n+  --> $DIR/ref-self-async.rs:58:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -           - let's call the lifetime of this reference `'1`\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:49:9\n+  --> $DIR/ref-self-async.rs:64:9\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -                - let's call the lifetime of this reference `'1`"}, {"sha": "afe5fe100e36ca10c92c0e75bc320c9ea219dc75", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![allow(non_snake_case)]\n #![feature(arbitrary_self_types)]\n@@ -20,33 +23,47 @@ impl Struct {\n     // Test using `&self` sugar:\n \n     async fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&Self` explicitly:\n \n     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "8bd194d701f2f16d52f91d3f34b232dd7b7a009d", "filename": "src/test/ui/self/elision/ref-self.base.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:21:9\n+  --> $DIR/ref-self.rs:25:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                           ----     ----\n@@ -15,7 +15,7 @@ LL |     fn ref_self<'a>(&'a self, f: &'a u32) -> &u32 {\n    |                ++++  ++           ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:27:9\n+  --> $DIR/ref-self.rs:33:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                 ----     ----\n@@ -31,7 +31,7 @@ LL |     fn ref_Self<'a>(self: &'a Self, f: &'a u32) -> &u32 {\n    |                ++++        ++           ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:31:9\n+  --> $DIR/ref-self.rs:39:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -47,7 +47,7 @@ LL |     fn box_ref_Self<'a>(self: Box<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:35:9\n+  --> $DIR/ref-self.rs:45:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                          ----     ----\n@@ -63,7 +63,7 @@ LL |     fn pin_ref_Self<'a>(self: Pin<&'a Self>, f: &'a u32) -> &u32 {\n    |                    ++++            ++            ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:39:9\n+  --> $DIR/ref-self.rs:51:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                   ----     ----\n@@ -79,7 +79,7 @@ LL |     fn box_box_ref_Self<'a>(self: Box<Box<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:43:9\n+  --> $DIR/ref-self.rs:57:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                   ----     ----\n@@ -95,7 +95,7 @@ LL |     fn box_pin_ref_Self<'a>(self: Box<Pin<&'a Self>>, f: &'a u32) -> &u32 {\n    |                        ++++                ++             ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self.rs:47:9\n+  --> $DIR/ref-self.rs:63:9\n    |\n LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                       ---     ---", "previous_filename": "src/test/ui/self/elision/ref-self.stderr"}, {"sha": "f2b7b0ad019570965bfae7026292e79d121ac51c", "filename": "src/test/ui/self/elision/ref-self.nll.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:21:9\n+  --> $DIR/ref-self.rs:25:9\n    |\n LL |     fn ref_self(&self, f: &u32) -> &u32 {\n    |                 -         - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:27:9\n+  --> $DIR/ref-self.rs:33:9\n    |\n LL |     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                       -         - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:31:9\n+  --> $DIR/ref-self.rs:39:9\n    |\n LL |     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:35:9\n+  --> $DIR/ref-self.rs:45:9\n    |\n LL |     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                               -          - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:39:9\n+  --> $DIR/ref-self.rs:51:9\n    |\n LL |     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                       -           - let's call the lifetime of this reference `'1`\n@@ -49,7 +49,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:43:9\n+  --> $DIR/ref-self.rs:57:9\n    |\n LL |     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                       -           - let's call the lifetime of this reference `'1`\n@@ -59,7 +59,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self.rs:47:9\n+  --> $DIR/ref-self.rs:63:9\n    |\n LL |     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                      -                - let's call the lifetime of this reference `'1`"}, {"sha": "34df3da4505e81cefb725f7aa91c86bb280025a9", "filename": "src/test/ui/self/elision/ref-self.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n \n@@ -18,33 +22,47 @@ impl Struct {\n     // Test using `&self` sugar:\n \n     fn ref_self(&self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     // Test using `&Self` explicitly:\n \n     fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "8da673d44354efa940ee5a89613dbf06248234d5", "filename": "src/test/ui/self/elision/ref-struct-async.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:13:9\n+  --> $DIR/ref-struct-async.rs:16:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                           ----     ----\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:17:9\n+  --> $DIR/ref-struct-async.rs:22:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:21:9\n+  --> $DIR/ref-struct-async.rs:28:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                    ----     ----\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:25:9\n+  --> $DIR/ref-struct-async.rs:34:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                             ----     ----\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ ...but data from `f` is returned here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:29:9\n+  --> $DIR/ref-struct-async.rs:40:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                         ----     ----", "previous_filename": "src/test/ui/self/elision/ref-struct-async.stderr"}, {"sha": "ad07c70df87783e1808328de3eb89e9d4ab6f2ff", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:13:9\n+  --> $DIR/ref-struct-async.rs:16:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -           - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:17:9\n+  --> $DIR/ref-struct-async.rs:22:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -            - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:21:9\n+  --> $DIR/ref-struct-async.rs:28:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -            - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:25:9\n+  --> $DIR/ref-struct-async.rs:34:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -             - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:29:9\n+  --> $DIR/ref-struct-async.rs:40:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -             - let's call the lifetime of this reference `'1`"}, {"sha": "12f8f6faf1b9c361750ea4d6ccd7497a52714129", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,4 +1,7 @@\n // edition:2018\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n \n #![allow(non_snake_case)]\n \n@@ -10,23 +13,33 @@ impl Struct {\n     // Test using `&Struct` explicitly:\n \n     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}, {"sha": "5650b3788e7e3887afe6881b5252af288e389826", "filename": "src/test/ui/self/elision/ref-struct.base.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.base.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:11:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                     ----     ----\n@@ -15,7 +15,7 @@ LL |     fn ref_Struct<'a>(self: &'a Struct, f: &'a u32) -> &u32 {\n    |                  ++++        ++             ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:15:9\n+  --> $DIR/ref-struct.rs:21:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -31,7 +31,7 @@ LL |     fn box_ref_Struct<'a>(self: Box<&'a Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:19:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                              ----     ----\n@@ -47,7 +47,7 @@ LL |     fn pin_ref_Struct<'a>(self: Pin<&'a Struct>, f: &'a u32) -> &u32 {\n    |                      ++++            ++              ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:23:9\n+  --> $DIR/ref-struct.rs:33:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                       ----     ----\n@@ -63,7 +63,7 @@ LL |     fn box_box_ref_Struct<'a>(self: Box<Box<&'a Struct>>, f: &'a u32) -> &u\n    |                          ++++                ++               ++\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct.rs:27:9\n+  --> $DIR/ref-struct.rs:39:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                   ----     ----", "previous_filename": "src/test/ui/self/elision/ref-struct.stderr"}, {"sha": "70453b0ddfc71ab2b8b951ee5420a5711680e387", "filename": "src/test/ui/self/elision/ref-struct.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.nll.stderr?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:11:9\n+  --> $DIR/ref-struct.rs:15:9\n    |\n LL |     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                         -           - let's call the lifetime of this reference `'1`\n@@ -9,7 +9,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:15:9\n+  --> $DIR/ref-struct.rs:21:9\n    |\n LL |     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -19,7 +19,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:19:9\n+  --> $DIR/ref-struct.rs:27:9\n    |\n LL |     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                 -            - let's call the lifetime of this reference `'1`\n@@ -29,7 +29,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:23:9\n+  --> $DIR/ref-struct.rs:33:9\n    |\n LL |     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                         -             - let's call the lifetime of this reference `'1`\n@@ -39,7 +39,7 @@ LL |         f\n    |         ^ associated function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct.rs:27:9\n+  --> $DIR/ref-struct.rs:39:9\n    |\n LL |     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                     -             - let's call the lifetime of this reference `'1`"}, {"sha": "0ffe72793d731c4d29d1283fb812faefe4876b98", "filename": "src/test/ui/self/elision/ref-struct.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d016eefd11c301d140ea5fba90a971665ba2f2/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct.rs?ref=97d016eefd11c301d140ea5fba90a971665ba2f2", "patch": "@@ -1,3 +1,7 @@\n+// revisions: base nll\n+// ignore-compare-mode-nll\n+//[nll] compile-flags: -Z borrowck=mir\n+\n #![allow(non_snake_case)]\n \n use std::pin::Pin;\n@@ -8,23 +12,33 @@ impl Struct {\n     // Test using `&Struct` explicitly:\n \n     fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n \n     fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-        f //~ ERROR lifetime mismatch\n+        f\n+        //[base]~^ ERROR lifetime mismatch\n+        //[nll]~^^ ERROR lifetime may not live long enough\n     }\n }\n "}]}