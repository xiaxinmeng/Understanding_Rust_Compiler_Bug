{"sha": "54998d1b3facdb684795c586d7a1e82582e32d27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0OTk4ZDFiM2ZhY2RiNjg0Nzk1YzU4NmQ3YTFlODI1ODJlMzJkMjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-17T04:36:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-17T04:36:13Z"}, "message": "Rollup merge of #66344 - petrochenkov:noregattr, r=matthewjasper\n\nrustc_plugin: Remove `Registry::register_attribute`\n\nLegacy plugins cannot register inert attributes anymore.\n\nThe preferred replacement is to use `register_tool` ([tracking issue](https://github.com/rust-lang/rust/issues/66079)).\n```rust\n#![register_tool(servo)]\n\n#[servo::must_root]\nstruct S;\n```\n\nThe more direct replacement is `register_attribute` ([tracking issue](https://github.com/rust-lang/rust/issues/66080))\n```rust\n#![register_attr(must_root)]\n\n#[must_root]\nstruct S;\n```\n, but it requires registering each attribute individually rather than registering the tool once, and is more likely to be removed rather than stabilized.", "tree": {"sha": "700586e9caf0f319ba3e08457582a95e0209ce12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700586e9caf0f319ba3e08457582a95e0209ce12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54998d1b3facdb684795c586d7a1e82582e32d27", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd0M49CRBK7hj4Ov3rIwAAdHIIAIs63TtCTVGpwc5/oAnEKK7T\n7sKIKVOXCunRKFfWE8abAu2R5wQXRzLJVXoKQquFltwu2rfFElR/guTb9RbBSYS7\nBYNL8CZoL36oNQPKhM5dG6acpqAXfzwBCsmNOViqhVzPhyAV/k8hv1PCFZpUOMcn\njAKpW3lV7vQlGkXPQ+CWXmnzr5PltHKIJb0V542giwDPltL/RswZPZCKj0U6+t1D\nB0OJssHUeThZ4+YDadz8a4uOuloJRqu6ytitY76bgbTbhx854UNJ4W0H6NF6wZMw\nbMlRbvK8CzB9lXGjVg6hteFg0E1CpZbv2dVzOqNm9kw7RjeWk5LLXd0DANc/zS8=\n=32aL\n-----END PGP SIGNATURE-----\n", "payload": "tree 700586e9caf0f319ba3e08457582a95e0209ce12\nparent b83d50d34f1d2917784bce825faa8e0c5ceaa4c9\nparent 857574379310d6ca70d3d44dbf00cc45b23e7eb8\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573965373 +0900\ncommitter GitHub <noreply@github.com> 1573965373 +0900\n\nRollup merge of #66344 - petrochenkov:noregattr, r=matthewjasper\n\nrustc_plugin: Remove `Registry::register_attribute`\n\nLegacy plugins cannot register inert attributes anymore.\n\nThe preferred replacement is to use `register_tool` ([tracking issue](https://github.com/rust-lang/rust/issues/66079)).\n```rust\n#![register_tool(servo)]\n\n#[servo::must_root]\nstruct S;\n```\n\nThe more direct replacement is `register_attribute` ([tracking issue](https://github.com/rust-lang/rust/issues/66080))\n```rust\n#![register_attr(must_root)]\n\n#[must_root]\nstruct S;\n```\n, but it requires registering each attribute individually rather than registering the tool once, and is more likely to be removed rather than stabilized.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54998d1b3facdb684795c586d7a1e82582e32d27", "html_url": "https://github.com/rust-lang/rust/commit/54998d1b3facdb684795c586d7a1e82582e32d27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54998d1b3facdb684795c586d7a1e82582e32d27/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b83d50d34f1d2917784bce825faa8e0c5ceaa4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9", "html_url": "https://github.com/rust-lang/rust/commit/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9"}, {"sha": "857574379310d6ca70d3d44dbf00cc45b23e7eb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/857574379310d6ca70d3d44dbf00cc45b23e7eb8", "html_url": "https://github.com/rust-lang/rust/commit/857574379310d6ca70d3d44dbf00cc45b23e7eb8"}], "stats": {"total": 155, "additions": 12, "deletions": 143}, "files": [{"sha": "a1ad11580dbb7f4c73e1c9f13a272518fc69dbd0", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -42,8 +42,6 @@ pub enum NonMacroAttrKind {\n     DeriveHelper,\n     /// Single-segment custom attribute registered with `#[register_attr]`.\n     Registered,\n-    /// Single-segment custom attribute registered by a legacy plugin (`register_attribute`).\n-    LegacyPluginHelper,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, HashStable)]\n@@ -330,7 +328,6 @@ impl NonMacroAttrKind {\n             NonMacroAttrKind::Tool => \"tool attribute\",\n             NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n             NonMacroAttrKind::Registered => \"explicitly registered attribute\",\n-            NonMacroAttrKind::LegacyPluginHelper => \"legacy plugin helper attribute\",\n         }\n     }\n \n@@ -345,8 +342,7 @@ impl NonMacroAttrKind {\n     pub fn is_used(self) -> bool {\n         match self {\n             NonMacroAttrKind::Tool | NonMacroAttrKind::DeriveHelper => true,\n-            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered |\n-            NonMacroAttrKind::LegacyPluginHelper => false,\n+            NonMacroAttrKind::Builtin | NonMacroAttrKind::Registered  => false,\n         }\n     }\n }"}, {"sha": "cfcdb2340304a971aec208b89c1b000af92ee0cd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -21,11 +21,10 @@ use errors::emitter::{Emitter, EmitterWriter};\n use errors::emitter::HumanReadableErrorType;\n use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n use syntax::edition::Edition;\n-use syntax::feature_gate::{self, AttributeType};\n+use syntax::feature_gate;\n use errors::json::JsonEmitter;\n use syntax::source_map;\n use syntax::sess::{ParseSess, ProcessCfgMod};\n-use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n@@ -79,7 +78,6 @@ pub struct Session {\n     /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n     pub one_time_diagnostics: Lock<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: OneThread<RefCell<Vec<String>>>,\n-    pub plugin_attributes: Lock<Vec<(Symbol, AttributeType)>>,\n     pub crate_types: Once<Vec<config::CrateType>>,\n     /// The `crate_disambiguator` is constructed out of all the `-C metadata`\n     /// arguments passed to the compiler. Its value together with the crate-name\n@@ -1166,7 +1164,6 @@ fn build_session_(\n         working_dir,\n         one_time_diagnostics: Default::default(),\n         plugin_llvm_passes: OneThread::new(RefCell::new(Vec::new())),\n-        plugin_attributes: Lock::new(Vec::new()),\n         crate_types: Once::new(),\n         crate_disambiguator: Once::new(),\n         features: Once::new(),"}, {"sha": "86d58bfe8bdac2c7ddadb40bc83187911bb97e00", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -240,15 +240,8 @@ pub fn register_plugins<'a>(\n         }\n     });\n \n-    let Registry {\n-        syntax_exts,\n-        llvm_passes,\n-        attributes,\n-        ..\n-    } = registry;\n-\n+    let Registry { syntax_exts, llvm_passes, .. } = registry;\n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-    *sess.plugin_attributes.borrow_mut() = attributes;\n \n     Ok((krate, PluginInfo { syntax_exts }, Lrc::new(lint_store)))\n }"}, {"sha": "9f293bdaa105e592c69d3e4be57ce8a721534de8", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -309,29 +309,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedAttributes {\n             }\n         }\n \n-        let plugin_attributes = cx.sess().plugin_attributes.borrow();\n-        for &(name, ty) in plugin_attributes.iter() {\n-            if ty == AttributeType::Whitelisted && attr.check_name(name) {\n-                debug!(\"{:?} (plugin attr) is whitelisted with ty {:?}\", name, ty);\n-                break;\n-            }\n-        }\n-\n-        let name = attr.name_or_empty();\n         if !attr::is_used(attr) {\n             debug!(\"emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n-            let known_crate = attr_info.map(|&&(_, ty, ..)| {\n-                    ty == AttributeType::CrateLevel\n-            }).unwrap_or(false);\n-\n-            // Has a plugin registered this attribute as one that must be used at\n-            // the crate level?\n-            let plugin_crate = plugin_attributes.iter()\n-                .find(|&&(x, t)| name == x && AttributeType::CrateLevel == t)\n-                .is_some();\n-            if known_crate || plugin_crate {\n+            if attr_info.map_or(false, |(_, ty, ..)| ty == &AttributeType::CrateLevel) {\n                 let msg = match attr.style {\n                     ast::AttrStyle::Outer => {\n                         \"crate-level attribute should be an inner attribute: add an exclamation \\"}, {"sha": "aa5ea80f0b0e4caf0e69da050283ccc9bae53ecb", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -7,7 +7,6 @@ use syntax_expand::base::{SyntaxExtension, SyntaxExtensionKind, NamedSyntaxExten\n use syntax_expand::base::MacroExpanderFn;\n use syntax::symbol::Symbol;\n use syntax::ast;\n-use syntax::feature_gate::AttributeType;\n use syntax_pos::Span;\n \n use std::borrow::ToOwned;\n@@ -39,9 +38,6 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n-\n-    #[doc(hidden)]\n-    pub attributes: Vec<(Symbol, AttributeType)>,\n }\n \n impl<'a> Registry<'a> {\n@@ -54,7 +50,6 @@ impl<'a> Registry<'a> {\n             krate_span,\n             syntax_exts: vec![],\n             llvm_passes: vec![],\n-            attributes: vec![],\n         }\n     }\n \n@@ -98,12 +93,4 @@ impl<'a> Registry<'a> {\n     pub fn register_llvm_pass(&mut self, name: &str) {\n         self.llvm_passes.push(name.to_owned());\n     }\n-\n-    /// Register an attribute with an attribute type.\n-    ///\n-    /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n-    /// lint. `CrateLevel` attributes will not be allowed on anything other than a crate.\n-    pub fn register_attribute(&mut self, name: Symbol, ty: AttributeType) {\n-        self.attributes.push((name, ty));\n-    }\n }"}, {"sha": "e134b8b92ac2e34aefec7af73cccf79a845f3eda", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -437,15 +437,6 @@ impl<'a> Resolver<'a> {\n                         }));\n                     }\n                 }\n-                Scope::LegacyPluginHelpers => {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n-                    if filter_fn(res) {\n-                        let plugin_attributes = this.session.plugin_attributes.borrow();\n-                        suggestions.extend(plugin_attributes.iter().map(|(name, _)| {\n-                            TypoSuggestion::from_res(*name, res)\n-                        }));\n-                    }\n-                }\n                 Scope::ExternPrelude => {\n                     suggestions.extend(this.extern_prelude.iter().filter_map(|(ident, _)| {\n                         let res = Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX));"}, {"sha": "8f6bb91f028c3d1d70b8c13bf10eb42e576a8f8a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -105,7 +105,6 @@ enum Scope<'a> {\n     RegisteredAttrs,\n     MacroUsePrelude,\n     BuiltinAttrs,\n-    LegacyPluginHelpers,\n     ExternPrelude,\n     ToolPrelude,\n     StdLibPrelude,\n@@ -1466,9 +1465,6 @@ impl<'a> Resolver<'a> {\n         // 4b. \"Standard library prelude\" part implemented through `macro-use` (closed, controlled).\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n-        // 4-6. Legacy plugin helpers (open, not controlled). Similar to derive helpers,\n-        //    but introduced by legacy plugins using `register_attribute`. Priority is somewhere\n-        //    in prelude, not sure where exactly (creates ambiguities with any other prelude names).\n \n         let rust_2015 = ident.span.rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n@@ -1498,7 +1494,6 @@ impl<'a> Resolver<'a> {\n                 Scope::RegisteredAttrs => use_prelude,\n                 Scope::MacroUsePrelude => use_prelude || rust_2015,\n                 Scope::BuiltinAttrs => true,\n-                Scope::LegacyPluginHelpers => use_prelude || rust_2015,\n                 Scope::ExternPrelude => use_prelude || is_absolute_path,\n                 Scope::ToolPrelude => use_prelude,\n                 Scope::StdLibPrelude => use_prelude || ns == MacroNS,\n@@ -1558,8 +1553,7 @@ impl<'a> Resolver<'a> {\n                 }\n                 Scope::RegisteredAttrs => Scope::MacroUsePrelude,\n                 Scope::MacroUsePrelude => Scope::StdLibPrelude,\n-                Scope::BuiltinAttrs => Scope::LegacyPluginHelpers,\n-                Scope::LegacyPluginHelpers => break, // nowhere else to search\n+                Scope::BuiltinAttrs => break, // nowhere else to search\n                 Scope::ExternPrelude if is_absolute_path => break,\n                 Scope::ExternPrelude => Scope::ToolPrelude,\n                 Scope::ToolPrelude => Scope::StdLibPrelude,"}, {"sha": "4f687b5ba92006a9ab379b2cf61ef65824c00dac", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -613,13 +613,6 @@ impl<'a> Resolver<'a> {\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n-                Scope::LegacyPluginHelpers => if this.session.plugin_attributes.borrow().iter()\n-                                                     .any(|(name, _)| ident.name == *name) {\n-                    let res = Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n-                    ok(res, DUMMY_SP, this.arenas)\n-                } else {\n-                    Err(Determinacy::Determined)\n-                }\n                 Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {\n                     Some(binding) => Ok((binding, Flags::empty())),\n                     None => Err(Determinacy::determined("}, {"sha": "b17c6a939655c45620dca7fcf073191e307e6696", "filename": "src/test/ui-fulldeps/auxiliary/attr-plugin-test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fattr-plugin-test.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -14,9 +14,6 @@ use syntax::symbol::Symbol;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_attribute(Symbol::intern(\"foo\"), AttributeType::Normal);\n-    reg.register_attribute(Symbol::intern(\"bar\"), AttributeType::CrateLevel);\n-    reg.register_attribute(Symbol::intern(\"baz\"), AttributeType::Whitelisted);\n     reg.register_syntax_extension(\n         Symbol::intern(\"mac\"), SyntaxExtension::dummy_bang(reg.sess.edition())\n     );"}, {"sha": "68ea10fe735ad6537e88327daafde5d87ed74b12", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -5,25 +5,17 @@\n extern crate rustc;\n extern crate rustc_driver;\n extern crate syntax;\n-extern crate syntax_expand;\n \n use rustc_driver::plugin::Registry;\n-use syntax::attr;\n-use syntax_expand::base::*;\n-use syntax::feature_gate::AttributeType::Whitelisted;\n-use syntax::symbol::Symbol;\n-\n-use rustc::hir;\n-use rustc::hir::intravisit;\n-use hir::Node;\n+use rustc::hir::{self, intravisit, Node};\n use rustc::lint::{LateContext, LintPass, LintArray, LateLintPass, LintContext};\n+use syntax::print::pprust;\n use syntax::source_map;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n     reg.lint_store.register_lints(&[&MISSING_WHITELISTED_ATTR]);\n     reg.lint_store.register_late_pass(|| box MissingWhitelistedAttrPass);\n-    reg.register_attribute(Symbol::intern(\"whitelisted_attr\"), Whitelisted);\n }\n \n declare_lint! {\n@@ -48,7 +40,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n             _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };\n \n-        if !attr::contains_name(&item.attrs, Symbol::intern(\"whitelisted_attr\")) {\n+        let whitelisted = |attr| pprust::attribute_to_string(attr).contains(\"whitelisted_attr\");\n+        if !item.attrs.iter().any(whitelisted) {\n             cx.span_lint(MISSING_WHITELISTED_ATTR, span,\n                          \"Missing 'whitelisted_attr' attribute\");\n         }"}, {"sha": "c3f98197250d1246c2b9e69033b9a82ead5442b9", "filename": "src/test/ui-fulldeps/issue-40001.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54998d1b3facdb684795c586d7a1e82582e32d27/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-40001.rs?ref=54998d1b3facdb684795c586d7a1e82582e32d27", "patch": "@@ -2,8 +2,9 @@\n // aux-build:issue-40001-plugin.rs\n // ignore-stage1\n \n-#![feature(plugin)]\n+#![feature(plugin, register_tool)]\n #![plugin(issue_40001_plugin)] //~ WARNING compiler plugins are deprecated\n+#![register_tool(plugin)]\n \n-#[whitelisted_attr]\n+#[plugin::whitelisted_attr]\n fn main() {}"}, {"sha": "dd7c009388e2c0cc01bccffc6aa667914940d3bd", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.rs?ref=b83d50d34f1d2917784bce825faa8e0c5ceaa4c9", "patch": "@@ -1,21 +0,0 @@\n-// aux-build:attr-plugin-test.rs\n-// ignore-stage1\n-\n-#![feature(plugin)]\n-#![plugin(attr_plugin_test)]\n-//~^ WARN use of deprecated attribute `plugin`\n-#![deny(unused_attributes)]\n-\n-#[baz]\n-fn baz() { } // no error\n-\n-#[foo]\n-pub fn main() {\n-     //~^^ ERROR unused\n-    #[bar]\n-    fn inner() {}\n-    //~^^ ERROR crate\n-    //~^^^ ERROR unused\n-    baz();\n-    inner();\n-}"}, {"sha": "8d95d6ff2d89f9e67bc8de31e191ccd048663935", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b83d50d34f1d2917784bce825faa8e0c5ceaa4c9/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=b83d50d34f1d2917784bce825faa8e0c5ceaa4c9", "patch": "@@ -1,34 +0,0 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n-  --> $DIR/plugin-attr-register-deny.rs:5:1\n-   |\n-LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:15:5\n-   |\n-LL |     #[bar]\n-   |     ^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/plugin-attr-register-deny.rs:7:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: crate-level attribute should be an inner attribute: add an exclamation mark: `#![foo]`\n-  --> $DIR/plugin-attr-register-deny.rs:15:5\n-   |\n-LL |     #[bar]\n-   |     ^^^^^^\n-\n-error: unused attribute\n-  --> $DIR/plugin-attr-register-deny.rs:12:1\n-   |\n-LL | #[foo]\n-   | ^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}]}