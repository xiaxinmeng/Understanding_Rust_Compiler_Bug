{"sha": "23b504c2d14937fc1879e68667615b66c18eb506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjUwNGMyZDE0OTM3ZmMxODc5ZTY4NjY3NjE1YjY2YzE4ZWI1MDY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-13T02:50:17Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-06-13T02:50:17Z"}, "message": "Implement reallocating to a smaller size.", "tree": {"sha": "df6e01bf6d2743567beab831981ffe4fa79a288a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df6e01bf6d2743567beab831981ffe4fa79a288a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b504c2d14937fc1879e68667615b66c18eb506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b504c2d14937fc1879e68667615b66c18eb506", "html_url": "https://github.com/rust-lang/rust/commit/23b504c2d14937fc1879e68667615b66c18eb506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b504c2d14937fc1879e68667615b66c18eb506/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c149595ebbc7393a19b976097f68ae7e9a943c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/c149595ebbc7393a19b976097f68ae7e9a943c97", "html_url": "https://github.com/rust-lang/rust/commit/c149595ebbc7393a19b976097f68ae7e9a943c97"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "6ef742f600d3eea82b17276669959cef09ab617a", "filename": "src/memory.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/23b504c2d14937fc1879e68667615b66c18eb506/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b504c2d14937fc1879e68667615b66c18eb506/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=23b504c2d14937fc1879e68667615b66c18eb506", "patch": "@@ -81,17 +81,18 @@ impl Memory {\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n \n-        let alloc = self.get_mut(ptr.alloc_id)?;\n-        let size = alloc.bytes.len();\n+        let size = self.get_mut(ptr.alloc_id)?.bytes.len();\n+\n         if new_size > size {\n             let amount = new_size - size;\n+            let alloc = self.get_mut(ptr.alloc_id)?;\n             alloc.bytes.extend(iter::repeat(0).take(amount));\n             alloc.undef_mask.grow(amount, false);\n         } else if size > new_size {\n-            return Err(EvalError::Unimplemented(format!(\"unimplemented allocation relocation (from {} to {})\", size, new_size)));\n-            // alloc.bytes.truncate(new_size);\n-            // alloc.undef_mask.len = new_size;\n-            // TODO: potentially remove relocations\n+            self.clear_relocations(ptr.offset(new_size as isize), size - new_size)?;\n+            let alloc = self.get_mut(ptr.alloc_id)?;\n+            alloc.bytes.truncate(new_size);\n+            alloc.undef_mask.truncate(new_size);\n         }\n \n         Ok(())\n@@ -506,11 +507,12 @@ impl UndefMask {\n         self.len += amount;\n         self.set_range_inbounds(start, start + amount, new_state);\n     }\n-}\n \n-// fn uniform_block(state: bool) -> Block {\n-//     if state { !0 } else { 0 }\n-// }\n+    fn truncate(&mut self, length: usize) {\n+        self.len = length;\n+        self.blocks.truncate(self.len / BLOCK_SIZE + 1);\n+    }\n+}\n \n fn bit_index(bits: usize) -> (usize, usize) {\n     (bits / BLOCK_SIZE, bits % BLOCK_SIZE)"}, {"sha": "a7175969efac52e8a6f26c75ff8d8a9813bf1ec9", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23b504c2d14937fc1879e68667615b66c18eb506/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b504c2d14937fc1879e68667615b66c18eb506/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=23b504c2d14937fc1879e68667615b66c18eb506", "patch": "@@ -11,6 +11,26 @@ fn make_box_syntax() -> Box<(i16, i16)> {\n     box (1, 2)\n }\n \n+#[miri_run]\n+fn allocate_reallocate() {\n+    let mut s = String::new();\n+\n+    // 6 byte heap alloc (__rust_allocate)\n+    s.push_str(\"foobar\");\n+    assert_eq!(s.len(), 6);\n+    assert_eq!(s.capacity(), 6);\n+\n+    // heap size doubled to 12 (__rust_reallocate)\n+    s.push_str(\"baz\");\n+    assert_eq!(s.len(), 9);\n+    assert_eq!(s.capacity(), 12);\n+\n+    // heap size reduced to 9  (__rust_reallocate)\n+    s.shrink_to_fit();\n+    assert_eq!(s.len(), 9);\n+    assert_eq!(s.capacity(), 9);\n+}\n+\n #[miri_run]\n fn main() {\n     assert_eq!(*make_box(), (1, 2));"}]}