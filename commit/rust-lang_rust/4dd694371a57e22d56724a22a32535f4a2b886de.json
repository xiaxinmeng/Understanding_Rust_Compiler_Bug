{"sha": "4dd694371a57e22d56724a22a32535f4a2b886de", "node_id": "C_kwDOAAsO6NoAKDRkZDY5NDM3MWE1N2UyMmQ1NjcyNGEyMmEzMjUzNWY0YTJiODg2ZGU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-27T08:05:22Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-10-27T10:18:55Z"}, "message": "Display generic arguments for associated types", "tree": {"sha": "bcb56fd367239e445f8f8a3fce2317482d59f148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb56fd367239e445f8f8a3fce2317482d59f148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd694371a57e22d56724a22a32535f4a2b886de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmNaWw8ACgkQ4laYqTBY\nYXFezw/+PynJu5ExguyrCfrkJbN8l8YK71E2WCDCAvOzSVnN+oyZ35inQg5k+P1P\nYGZODQTeKZHtux3+dsigPEX3BToLfxXbiI/b5YwhMD8lQ2BkJI+YAPAkBeTcPpNh\ntu/6pTGIwSXvTqpGi9fcVRdxKKJNEGVJ9aiqE5aoviszmOhY3OPVcVmrVzMjkxq9\nVjnoQD1gVPk8+udmzaTgj7vUr1bfyM6a+kc0BX1Ro3UxNj0BeNlOLXRczK8IKEX7\n67eqBTspiOs3um2xU6oVq5QvfwlHI9PXz6nqe2w0HpdxFHN3TqAU5qVsl/cYS+xq\nuW2nsb36Qpv6oUYatV0cwQsjmFEesXtHEHWhe/sepfQb7XIV8BA71SPnJbT/h5+c\nlXHA4tkwrBr95rDmfWmgev9l6lsl75J4eX7ubQ0niQ3y/QTfZnwc+OAGdcVz9zTC\nlACThrcvfAyb+f/JrUdIjmrGcBzz+66E7zsnVrLb0qj+dkacHF3lIlD8wNqn0RSp\nXX2o6t7I9Fv/yB6sf8Uk9Z4duTWLaRnZZ6DfMTOMUqkkLxhTJFfkJci2YxV9OVNj\nrFzEtswNUv/YX2iA7aoN0cqOtqqoBHtsh8FLqBOkvvKZV4hgwPJ+gN/rZpzpvqV3\n71/hkSdTQ+sobjkVhMl2f6AmCMzFTWO4NdiNvNI4UZ4Qe9Qf2Rg=\n=4Qf1\n-----END PGP SIGNATURE-----", "payload": "tree bcb56fd367239e445f8f8a3fce2317482d59f148\nparent 1fe10bff1dc1368ae6a841cad6d36922cb270ec2\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1666857922 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1666865935 +0900\n\nDisplay generic arguments for associated types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd694371a57e22d56724a22a32535f4a2b886de", "html_url": "https://github.com/rust-lang/rust/commit/4dd694371a57e22d56724a22a32535f4a2b886de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd694371a57e22d56724a22a32535f4a2b886de/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe10bff1dc1368ae6a841cad6d36922cb270ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe10bff1dc1368ae6a841cad6d36922cb270ec2", "html_url": "https://github.com/rust-lang/rust/commit/1fe10bff1dc1368ae6a841cad6d36922cb270ec2"}], "stats": {"total": 95, "additions": 78, "deletions": 17}, "files": [{"sha": "5ad66132635340c410488f425529be1d4397720f", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=4dd694371a57e22d56724a22a32535f4a2b886de", "patch": "@@ -289,16 +289,18 @@ impl HirDisplay for ProjectionTy {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        let trait_ = f.db.trait_data(self.trait_(f.db));\n+        let trait_ref = self.trait_ref(f.db);\n         write!(f, \"<\")?;\n-        self.self_type_parameter(f.db).hir_fmt(f)?;\n-        write!(f, \" as {}\", trait_.name)?;\n-        if self.substitution.len(Interner) > 1 {\n+        fmt_trait_ref(&trait_ref, f, true)?;\n+        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty_id)).name)?;\n+        let proj_params_count =\n+            self.substitution.len(Interner) - trait_ref.substitution.len(Interner);\n+        let proj_params = &self.substitution.as_slice(Interner)[..proj_params_count];\n+        if !proj_params.is_empty() {\n             write!(f, \"<\")?;\n-            f.write_joined(&self.substitution.as_slice(Interner)[1..], \", \")?;\n+            f.write_joined(proj_params, \", \")?;\n             write!(f, \">\")?;\n         }\n-        write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty_id)).name)?;\n         Ok(())\n     }\n }\n@@ -641,9 +643,12 @@ impl HirDisplay for Ty {\n                 // Use placeholder associated types when the target is test (https://rust-lang.github.io/chalk/book/clauses/type_equality.html#placeholder-associated-types)\n                 if f.display_target.is_test() {\n                     write!(f, \"{}::{}\", trait_.name, type_alias_data.name)?;\n+                    // Note that the generic args for the associated type come before those for the\n+                    // trait (including the self type).\n+                    // FIXME: reconsider the generic args order upon formatting?\n                     if parameters.len(Interner) > 0 {\n                         write!(f, \"<\")?;\n-                        f.write_joined(&*parameters.as_slice(Interner), \", \")?;\n+                        f.write_joined(parameters.as_slice(Interner), \", \")?;\n                         write!(f, \">\")?;\n                     }\n                 } else {\n@@ -972,9 +977,20 @@ fn write_bounds_like_dyn_trait(\n                     angle_open = true;\n                 }\n                 if let AliasTy::Projection(proj) = alias {\n-                    let type_alias =\n-                        f.db.type_alias_data(from_assoc_type_id(proj.associated_ty_id));\n-                    write!(f, \"{} = \", type_alias.name)?;\n+                    let assoc_ty_id = from_assoc_type_id(proj.associated_ty_id);\n+                    let type_alias = f.db.type_alias_data(assoc_ty_id);\n+                    write!(f, \"{}\", type_alias.name)?;\n+\n+                    let proj_arg_count = generics(f.db.upcast(), assoc_ty_id.into()).len_self();\n+                    if proj_arg_count > 0 {\n+                        write!(f, \"<\")?;\n+                        f.write_joined(\n+                            &proj.substitution.as_slice(Interner)[..proj_arg_count],\n+                            \", \",\n+                        )?;\n+                        write!(f, \">\")?;\n+                    }\n+                    write!(f, \" = \")?;\n                 }\n                 ty.hir_fmt(f)?;\n             }"}, {"sha": "425432479e8159a822c907ce1b7ddd245530fbe1", "filename": "crates/hir-ty/src/tests/display_source_code.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=4dd694371a57e22d56724a22a32535f4a2b886de", "patch": "@@ -196,3 +196,34 @@ fn test(\n \"#,\n     );\n }\n+\n+#[test]\n+fn projection_type_correct_arguments_order() {\n+    check_types_source_code(\n+        r#\"\n+trait Foo<T> {\n+    type Assoc<U>;\n+}\n+fn f<T: Foo<i32>>(a: T::Assoc<usize>) {\n+    a;\n+  //^ <T as Foo<i32>>::Assoc<usize>\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn generic_associated_type_binding_in_impl_trait() {\n+    check_types_source_code(\n+        r#\"\n+//- minicore: sized\n+trait Foo<T> {\n+    type Assoc<U>;\n+}\n+fn f(a: impl Foo<i8, Assoc<i16> = i32>) {\n+    a;\n+  //^ impl Foo<i8, Assoc<i16> = i32>\n+}\n+        \"#,\n+    );\n+}"}, {"sha": "92711a24fe39fdc317328f7c76894c859ef76e64", "filename": "crates/hir-ty/src/tls.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd694371a57e22d56724a22a32535f4a2b886de/crates%2Fhir-ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftls.rs?ref=4dd694371a57e22d56724a22a32535f4a2b886de", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n \n use crate::{\n     chalk_db, db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, mapping::from_chalk,\n-    CallableDefId, Interner,\n+    CallableDefId, Interner, ProjectionTyExt,\n };\n use hir_def::{AdtId, ItemContainerId, Lookup, TypeAliasId};\n \n@@ -63,17 +63,31 @@ impl DebugContext<'_> {\n             ItemContainerId::TraitId(t) => t,\n             _ => panic!(\"associated type not in trait\"),\n         };\n-        let trait_data = self.0.trait_data(trait_);\n-        let params = projection_ty.substitution.as_slice(Interner);\n-        write!(fmt, \"<{:?} as {}\", &params[0], trait_data.name,)?;\n-        if params.len() > 1 {\n+        let trait_name = &self.0.trait_data(trait_).name;\n+        let trait_ref = projection_ty.trait_ref(self.0);\n+        let trait_params = trait_ref.substitution.as_slice(Interner);\n+        let self_ty = trait_ref.self_type_parameter(Interner);\n+        write!(fmt, \"<{:?} as {}\", self_ty, trait_name)?;\n+        if trait_params.len() > 1 {\n+            write!(\n+                fmt,\n+                \"<{}>\",\n+                trait_params[1..].iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n+            )?;\n+        }\n+        write!(fmt, \">::{}\", type_alias_data.name)?;\n+\n+        let proj_params_count = projection_ty.substitution.len(Interner) - trait_params.len();\n+        let proj_params = &projection_ty.substitution.as_slice(Interner)[..proj_params_count];\n+        if !proj_params.is_empty() {\n             write!(\n                 fmt,\n                 \"<{}>\",\n-                &params[1..].iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n+                proj_params.iter().format_with(\", \", |x, f| f(&format_args!(\"{:?}\", x))),\n             )?;\n         }\n-        write!(fmt, \">::{}\", type_alias_data.name)\n+\n+        Ok(())\n     }\n \n     pub(crate) fn debug_fn_def_id("}]}