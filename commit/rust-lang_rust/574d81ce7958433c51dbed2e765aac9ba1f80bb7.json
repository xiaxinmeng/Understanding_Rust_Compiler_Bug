{"sha": "574d81ce7958433c51dbed2e765aac9ba1f80bb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NGQ4MWNlNzk1ODQzM2M1MWRiZWQyZTc2NWFhYzliYTFmODBiYjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T15:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-08T15:39:43Z"}, "message": "Auto merge of #1208 - christianpoveda:environ-shim, r=RalfJung\n\nEnviron shim\n\nRemake of https://github.com/rust-lang/miri/pull/1147. There are three main problems with this:\n\n1. For some reason `update_environ` is not updating `environ` when `setenv` or `unsetenv` are called. Even then it works during initialization.\n2. I am not deallocating the old array with the variables in `update_environ`.\n3. I had to store the `environ` place into `MemoryExtra` as a field to update it. I was thinking about changing `extern_statics` to store places instead of `AllocID`s to avoid this.\n\n@RalfJung", "tree": {"sha": "22dbd33ecb6343f50a0e50725712e0878661e90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22dbd33ecb6343f50a0e50725712e0878661e90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/574d81ce7958433c51dbed2e765aac9ba1f80bb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/574d81ce7958433c51dbed2e765aac9ba1f80bb7", "html_url": "https://github.com/rust-lang/rust/commit/574d81ce7958433c51dbed2e765aac9ba1f80bb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/574d81ce7958433c51dbed2e765aac9ba1f80bb7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6a0c60a0feba65b2ced98b3eae4a2406a7d635e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6a0c60a0feba65b2ced98b3eae4a2406a7d635e", "html_url": "https://github.com/rust-lang/rust/commit/e6a0c60a0feba65b2ced98b3eae4a2406a7d635e"}, {"sha": "8392a0c589461e998a28a52a070b5fa5a143cf77", "url": "https://api.github.com/repos/rust-lang/rust/commits/8392a0c589461e998a28a52a070b5fa5a143cf77", "html_url": "https://github.com/rust-lang/rust/commit/8392a0c589461e998a28a52a070b5fa5a143cf77"}], "stats": {"total": 134, "additions": 123, "deletions": 11}, "files": [{"sha": "a82c40a99e011bcd57971e6e113df2bde7eb914a", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -77,8 +77,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         ),\n     );\n     // Complete initialization.\n+    EnvVars::init(&mut ecx, config.excluded_env_vars)?;\n     MemoryExtra::init_extern_statics(&mut ecx)?;\n-    EnvVars::init(&mut ecx, config.excluded_env_vars);\n \n     // Setup first stack-frame\n     let main_instance = ty::Instance::mono(tcx, main_id);"}, {"sha": "d21ff328975735763ffa64d438345fa649059709", "filename": "src/machine.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -70,7 +70,7 @@ pub struct AllocExtra {\n \n /// Extra global memory data\n #[derive(Clone, Debug)]\n-pub struct MemoryExtra {\n+pub struct MemoryExtra<'tcx> {\n     pub stacked_borrows: Option<stacked_borrows::MemoryExtra>,\n     pub intptrcast: intptrcast::MemoryExtra,\n \n@@ -84,9 +84,12 @@ pub struct MemoryExtra {\n     /// An allocation ID to report when it is being allocated\n     /// (helps for debugging memory leaks).\n     tracked_alloc_id: Option<AllocId>,\n+\n+    /// Place where the `environ` static is stored. Lazily initialized, but then never changes.\n+    pub(crate) environ: Option<MPlaceTy<'tcx, Tag>>,\n }\n \n-impl MemoryExtra {\n+impl<'tcx> MemoryExtra<'tcx> {\n     pub fn new(rng: StdRng, stacked_borrows: bool, tracked_pointer_tag: Option<PtrId>, tracked_alloc_id: Option<AllocId>) -> Self {\n         let stacked_borrows = if stacked_borrows {\n             Some(Rc::new(RefCell::new(stacked_borrows::GlobalState::new(tracked_pointer_tag))))\n@@ -99,14 +102,16 @@ impl MemoryExtra {\n             extern_statics: FxHashMap::default(),\n             rng: RefCell::new(rng),\n             tracked_alloc_id,\n+            environ: None,\n         }\n     }\n \n     /// Sets up the \"extern statics\" for this machine.\n-    pub fn init_extern_statics<'mir, 'tcx>(\n+    pub fn init_extern_statics<'mir>(\n         this: &mut MiriEvalContext<'mir, 'tcx>,\n     ) -> InterpResult<'tcx> {\n-        match this.tcx.sess.target.target.target_os.as_str() {\n+        let target_os = this.tcx.sess.target.target.target_os.as_str();\n+        match target_os {\n             \"linux\" => {\n                 // \"__cxa_thread_atexit_impl\"\n                 // This should be all-zero, pointer-sized.\n@@ -118,6 +123,12 @@ impl MemoryExtra {\n                     .extern_statics\n                     .insert(Symbol::intern(\"__cxa_thread_atexit_impl\"), place.ptr.assert_ptr().alloc_id)\n                     .unwrap_none();\n+                // \"environ\"\n+                this.memory\n+                    .extra\n+                    .extern_statics\n+                    .insert(Symbol::intern(\"environ\"), this.memory.extra.environ.unwrap().ptr.assert_ptr().alloc_id)\n+                    .unwrap_none();\n             }\n             _ => {} // No \"extern statics\" supported on this platform\n         }\n@@ -203,7 +214,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     type FrameExtra = FrameData<'tcx>;\n-    type MemoryExtra = MemoryExtra;\n+    type MemoryExtra = MemoryExtra<'tcx>;\n     type AllocExtra = AllocExtra;\n     type PointerTag = Tag;\n     type ExtraFnVal = Dlsym;\n@@ -329,7 +340,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     fn init_allocation_extra<'b>(\n-        memory_extra: &MemoryExtra,\n+        memory_extra: &MemoryExtra<'tcx>,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n@@ -366,7 +377,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn tag_static_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n+    fn tag_static_base_pointer(memory_extra: &MemoryExtra<'tcx>, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = memory_extra.stacked_borrows.as_ref() {\n             stacked_borrows.borrow_mut().static_base_ptr(id)\n         } else {"}, {"sha": "aaecbebc360320c92855c8961c33a748e0dd2eb0", "filename": "src/shims/env.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -2,6 +2,7 @@ use std::ffi::{OsString, OsStr};\n use std::env;\n \n use crate::stacked_borrows::Tag;\n+use crate::rustc_target::abi::LayoutOf;\n use crate::*;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -19,7 +20,7 @@ impl EnvVars {\n     pub(crate) fn init<'mir, 'tcx>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n         excluded_env_vars: Vec<String>,\n-    ) {\n+    ) -> InterpResult<'tcx> {\n         if ecx.machine.communicate {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n@@ -29,6 +30,12 @@ impl EnvVars {\n                 }\n             }\n         }\n+        // Initialize the `environ` static\n+        let layout = ecx.layout_of(ecx.tcx.types.usize)?;\n+        let place = ecx.allocate(layout, MiriMemoryKind::Machine.into());\n+        ecx.write_scalar(Scalar::from_machine_usize(0, &*ecx.tcx), place.into())?;\n+        ecx.memory.extra.environ = Some(place);\n+        ecx.update_environ()\n     }\n }\n \n@@ -82,6 +89,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n+            this.update_environ()?;\n             Ok(0)\n         } else {\n             Ok(-1)\n@@ -104,6 +112,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory\n                     .deallocate(var, None, MiriMemoryKind::Machine.into())?;\n             }\n+            this.update_environ()?;\n             Ok(0)\n         } else {\n             Ok(-1)\n@@ -150,4 +159,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         }\n     }\n+\n+    /// Updates the `environ` static. It should not be called before\n+    /// `EnvVars::init`.\n+    fn update_environ(&mut self) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        // Deallocate the old environ value.\n+        let old_vars_ptr = this.read_scalar(this.memory.extra.environ.unwrap().into())?.not_undef()?;\n+        // The pointer itself can be null because `EnvVars::init` only\n+        // initializes the place for the static but not the static itself.\n+        if !this.is_null(old_vars_ptr)? {\n+            this.memory.deallocate(this.force_ptr(old_vars_ptr)?, None, MiriMemoryKind::Machine.into())?;\n+        }\n+        // Collect all the pointers to each variable in a vector.\n+        let mut vars: Vec<Scalar<Tag>> = this.machine.env_vars.map.values().map(|&ptr| ptr.into()).collect();\n+        // Add the trailing null pointer.\n+        vars.push(Scalar::from_int(0, this.pointer_size()));\n+        // Make an array with all these pointers inside Miri.\n+        let tcx = this.tcx;\n+        let vars_layout =\n+            this.layout_of(tcx.mk_array(tcx.types.usize, vars.len() as u64))?;\n+        let vars_place = this.allocate(vars_layout, MiriMemoryKind::Machine.into());\n+        for (idx, var) in vars.into_iter().enumerate() {\n+            let place = this.mplace_field(vars_place, idx as u64)?;\n+            this.write_scalar(var, place.into())?;\n+        }\n+        this.write_scalar(\n+            vars_place.ptr,\n+            this.memory.extra.environ.unwrap().into(),\n+        )?;\n+\n+        Ok(())\n+    }\n }"}, {"sha": "c5c6423e8501ee09687605fbc73fb349c7214029", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -56,6 +56,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            // Environment related shims\n+            \"_NSGetEnviron\" => {\n+                this.write_scalar(this.memory.extra.environ.unwrap().ptr, dest)?;\n+            }\n+\n             // Time related shims\n             \"gettimeofday\" => {\n                 let result = this.gettimeofday(args[0], args[1])?;"}, {"sha": "6131613fc00bb9e1e4e4ed6b8f6f9b00e4e3118e", "filename": "tests/compile-fail/environ-gets-deallocated.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenviron-gets-deallocated.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -0,0 +1,24 @@\n+//ignore-windows: TODO env var emulation stubbed out on Windows\n+\n+#[cfg(target_os=\"linux\")]\n+fn get_environ() -> *const *const u8 {\n+  extern \"C\" {\n+    static mut environ: *const *const u8;\n+  }\n+  unsafe { environ }\n+}\n+\n+#[cfg(target_os=\"macos\")]\n+fn get_environ() -> *const *const u8 {\n+    extern \"C\" {\n+        fn _NSGetEnviron() -> *mut *const *const u8;\n+    }\n+    unsafe { *_NSGetEnviron() }\n+}\n+\n+fn main() {\n+    let pointer = get_environ();\n+    let _x = unsafe { *pointer };\n+    std::env::set_var(\"FOO\", \"BAR\");\n+    let _y = unsafe { *pointer }; //~ ERROR dangling pointer was dereferenced\n+}"}, {"sha": "c7506b23c1da06f51e159967d2f0dea78c48dc22", "filename": "tests/run-pass/env.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.rs?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -3,9 +3,26 @@\n use std::env;\n \n fn main() {\n+    // Test that miri environment is isolated when communication is disabled.\n+    // (`MIRI_ENV_VAR_TEST` is set by the test harness.)\n+    assert_eq!(env::var(\"MIRI_ENV_VAR_TEST\"), Err(env::VarError::NotPresent));\n+\n+    // Test base state.\n+    println!(\"{:#?}\", env::vars().collect::<Vec<_>>());\n     assert_eq!(env::var(\"MIRI_TEST\"), Err(env::VarError::NotPresent));\n+\n+    // Set the variable.\n     env::set_var(\"MIRI_TEST\", \"the answer\");\n     assert_eq!(env::var(\"MIRI_TEST\"), Ok(\"the answer\".to_owned()));\n-    // Test that miri environment is isolated when communication is disabled.\n-    assert!(env::var(\"MIRI_ENV_VAR_TEST\").is_err());\n+    println!(\"{:#?}\", env::vars().collect::<Vec<_>>());\n+\n+    // Change the variable.\n+    env::set_var(\"MIRI_TEST\", \"42\");\n+    assert_eq!(env::var(\"MIRI_TEST\"), Ok(\"42\".to_owned()));\n+    println!(\"{:#?}\", env::vars().collect::<Vec<_>>());\n+\n+    // Remove the variable.\n+    env::remove_var(\"MIRI_TEST\");\n+    assert_eq!(env::var(\"MIRI_TEST\"), Err(env::VarError::NotPresent));\n+    println!(\"{:#?}\", env::vars().collect::<Vec<_>>());\n }"}, {"sha": "9a8f979598ebc0f3a3bee7fcb097b02a72acdcf9", "filename": "tests/run-pass/env.stdout", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Frun-pass%2Fenv.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/574d81ce7958433c51dbed2e765aac9ba1f80bb7/tests%2Frun-pass%2Fenv.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv.stdout?ref=574d81ce7958433c51dbed2e765aac9ba1f80bb7", "patch": "@@ -0,0 +1,14 @@\n+[]\n+[\n+    (\n+        \"MIRI_TEST\",\n+        \"the answer\",\n+    ),\n+]\n+[\n+    (\n+        \"MIRI_TEST\",\n+        \"42\",\n+    ),\n+]\n+[]"}]}