{"sha": "4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmQwNjBhNTkxN2RmY2I2Zjg0MWU3NjE5ZDlmOTAyNmJkMjBiOWQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-05T01:49:03Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-04-05T01:49:03Z"}, "message": "Accumulate list of paths for crate hash mismatch.\n\n(i.e. semi-generalized version of prior errorinfo gathering.)\n\nAlso revised presentation to put each path on its own line, prefixed\nby file:linenum information.", "tree": {"sha": "725bd3e4d20db28559f690d7e0f75c6041b1ab4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/725bd3e4d20db28559f690d7e0f75c6041b1ab4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "html_url": "https://github.com/rust-lang/rust/commit/4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4afd060a5917dfcb6f841e7619d9f9026bd20b9d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1599d2260347046e6d8841493ffc64cc876fda07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1599d2260347046e6d8841493ffc64cc876fda07", "html_url": "https://github.com/rust-lang/rust/commit/1599d2260347046e6d8841493ffc64cc876fda07"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "05503a4becf08ceedfaf3e66ea98f0a90709e3c7", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afd060a5917dfcb6f841e7619d9f9026bd20b9d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afd060a5917dfcb6f841e7619d9f9026bd20b9d/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "patch": "@@ -298,7 +298,7 @@ fn resolve_crate<'a>(e: &mut Env,\n                 hash: hash.map(|a| &*a),\n                 os: e.os,\n                 intr: e.intr.clone(),\n-                rejected_via_hash: None,\n+                rejected_via_hash: vec!(),\n             };\n             let loader::Library {\n                 dylib, rlib, metadata"}, {"sha": "695bd9b17ba7b4908c5f9188beea2937e9a3b68b", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4afd060a5917dfcb6f841e7619d9f9026bd20b9d/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afd060a5917dfcb6f841e7619d9f9026bd20b9d/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4afd060a5917dfcb6f841e7619d9f9026bd20b9d", "patch": "@@ -45,7 +45,7 @@ pub enum Os {\n     OsFreebsd\n }\n \n-pub struct ViaHash {\n+pub struct HashMismatch {\n     path: Path,\n }\n \n@@ -58,8 +58,7 @@ pub struct Context<'a> {\n     pub hash: Option<&'a Svh>,\n     pub os: Os,\n     pub intr: Rc<IdentInterner>,\n-    /// Some if rejected\n-    pub rejected_via_hash: Option<ViaHash>\n+    pub rejected_via_hash: Vec<HashMismatch>\n }\n \n pub struct Library {\n@@ -81,14 +80,12 @@ pub struct CratePaths {\n }\n \n impl CratePaths {\n-    fn describe_paths(&self) -> ~str {\n+    fn paths(&self) -> Vec<Path> {\n         match (&self.dylib, &self.rlib) {\n-            (&None,    &None)\n-                => ~\"\",\n-            (&Some(ref p), &None) | (&None, &Some(ref p))\n-                => format!(\"{}\", p.display()),\n-            (&Some(ref p1), &Some(ref p2))\n-                => format!(\"{}, {}\", p1.display(), p2.display()),\n+            (&None,    &None)              => vec!(),\n+            (&Some(ref p), &None) |\n+            (&None, &Some(ref p))          => vec!(p.clone()),\n+            (&Some(ref p1), &Some(ref p2)) => vec!(p1.clone(), p2.clone()),\n         }\n     }\n }\n@@ -111,7 +108,7 @@ impl<'a> Context<'a> {\n             Some(t) => t,\n             None => {\n                 self.sess.abort_if_errors();\n-                let message = if self.rejected_via_hash.is_some() {\n+                let message = if self.rejected_via_hash.len() > 0 {\n                     format!(\"found possibly newer version of crate `{}`\",\n                             self.ident)\n                 } else {\n@@ -124,17 +121,25 @@ impl<'a> Context<'a> {\n                 };\n                 self.sess.span_err(self.span, message);\n \n-                if self.rejected_via_hash.is_some() {\n+                if self.rejected_via_hash.len() > 0 {\n                     self.sess.span_note(self.span, \"perhaps this crate needs \\\n                                                     to be recompiled?\");\n-                    self.rejected_via_hash.as_ref().map(\n-                        |r| self.sess.note(format!(\n-                            \"crate `{}` at path: {}\",\n-                            self.ident, r.path.display())));\n-                    root.as_ref().map(\n-                        |r| self.sess.note(format!(\n-                            \"crate `{}` at path(s): {}\",\n-                            r.ident, r.describe_paths())));\n+                    let mismatches = self.rejected_via_hash.iter();\n+                    for (i, &HashMismatch{ ref path }) in mismatches.enumerate() {\n+                        self.sess.fileline_note(self.span,\n+                            format!(\"crate `{}` path \\\\#{}: {}\",\n+                                    self.ident, i+1, path.display()));\n+                    }\n+                    match root {\n+                        &None => {}\n+                        &Some(ref r) => {\n+                            for (i, path) in r.paths().iter().enumerate() {\n+                                self.sess.fileline_note(self.span,\n+                                    format!(\"crate `{}` path \\\\#{}: {}\",\n+                                            r.ident, i+1, path.display()));\n+                            }\n+                        }\n+                    }\n                 }\n                 self.sess.abort_if_errors();\n                 unreachable!()\n@@ -371,8 +376,7 @@ impl<'a> Context<'a> {\n             None => true,\n             Some(myhash) => {\n                 if *myhash != hash {\n-                    self.rejected_via_hash =\n-                        Some(ViaHash{ path: libpath.clone(), });\n+                    self.rejected_via_hash.push(HashMismatch{ path: libpath.clone() });\n                     false\n                 } else {\n                     true"}]}