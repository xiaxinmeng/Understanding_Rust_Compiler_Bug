{"sha": "5c63b1febc2e618f79d07ce46c1305cfa28b6596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNjNiMWZlYmMyZTYxOGY3OWQwN2NlNDZjMTMwNWNmYTI4YjY1OTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:25:27Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` the entry function and entry type in the session", "tree": {"sha": "7cc2abd77b2e7b9408b6044a784a285f68220b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cc2abd77b2e7b9408b6044a784a285f68220b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c63b1febc2e618f79d07ce46c1305cfa28b6596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c63b1febc2e618f79d07ce46c1305cfa28b6596", "html_url": "https://github.com/rust-lang/rust/commit/5c63b1febc2e618f79d07ce46c1305cfa28b6596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c63b1febc2e618f79d07ce46c1305cfa28b6596/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522743c9dbf561ed026e917d9911d94fad5d19a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/522743c9dbf561ed026e917d9911d94fad5d19a5", "html_url": "https://github.com/rust-lang/rust/commit/522743c9dbf561ed026e917d9911d94fad5d19a5"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "a095205e91bcf4cc40e98324e50f50080db7f5e3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -26,7 +26,7 @@ use middle;\n use util::common::time;\n use util::ppaux;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap,HashSet};\n use std::io;\n use std::io::fs;\n@@ -874,8 +874,8 @@ pub fn build_session_(sopts: @session::options,\n         parse_sess: p_s,\n         codemap: cm,\n         // For a library crate, this is always none\n-        entry_fn: @mut None,\n-        entry_type: @mut None,\n+        entry_fn: RefCell::new(None),\n+        entry_type: Cell::new(None),\n         span_diagnostic: span_diagnostic_handler,\n         filesearch: filesearch,\n         building_library: @mut false,"}, {"sha": "7052f5ea5fea6a7d877abf940640d12b0c1328e9", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -28,7 +28,7 @@ use syntax::abi;\n use syntax::parse::token;\n use syntax;\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::{HashMap,HashSet};\n \n pub struct config {\n@@ -206,8 +206,8 @@ pub struct Session_ {\n     parse_sess: @mut ParseSess,\n     codemap: @codemap::CodeMap,\n     // For a library crate, this is always none\n-    entry_fn: @mut Option<(NodeId, codemap::Span)>,\n-    entry_type: @mut Option<EntryFnType>,\n+    entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n+    entry_type: Cell<Option<EntryFnType>>,\n     span_diagnostic: @mut diagnostic::span_handler,\n     filesearch: @filesearch::FileSearch,\n     building_library: @mut bool,"}, {"sha": "aa58fc569a8d265db1e82f1091bbb7df25d2d55a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -212,7 +212,7 @@ fn create_and_seed_worklist(tcx: ty::ctxt,\n     }\n \n     // Seed entry point\n-    match *tcx.sess.entry_fn {\n+    match tcx.sess.entry_fn.get() {\n         Some((id, _)) => worklist.push(id),\n         None => ()\n     }"}, {"sha": "0c50eb294d50924c22e5dd6ead7ca1041eeee3d3", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -52,7 +52,7 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n \n     // If the user wants no main function at all, then stop here.\n     if attr::contains_name(crate.attrs, \"no_main\") {\n-        *session.entry_type = Some(session::EntryNone);\n+        session.entry_type.set(Some(session::EntryNone));\n         return\n     }\n \n@@ -122,14 +122,14 @@ fn find_item(item: @item, ctxt: &mut EntryContext) {\n \n fn configure_main(this: &mut EntryContext) {\n     if this.start_fn.is_some() {\n-        *this.session.entry_fn = this.start_fn;\n-        *this.session.entry_type = Some(session::EntryStart);\n+        this.session.entry_fn.set(this.start_fn);\n+        this.session.entry_type.set(Some(session::EntryStart));\n     } else if this.attr_main_fn.is_some() {\n-        *this.session.entry_fn = this.attr_main_fn;\n-        *this.session.entry_type = Some(session::EntryMain);\n+        this.session.entry_fn.set(this.attr_main_fn);\n+        this.session.entry_type.set(Some(session::EntryMain));\n     } else if this.main_fn.is_some() {\n-        *this.session.entry_fn = this.main_fn;\n-        *this.session.entry_type = Some(session::EntryMain);\n+        this.session.entry_fn.set(this.main_fn);\n+        this.session.entry_type.set(Some(session::EntryMain));\n     } else {\n         if !*this.session.building_library {\n             // No main function"}, {"sha": "ac4ce95ae42da02149fb91adc465670fa72e8dcb", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -2382,7 +2382,7 @@ pub fn register_fn_llvmty(ccx: @CrateContext,\n }\n \n pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool {\n-    match *sess.entry_fn {\n+    match sess.entry_fn.get() {\n         Some((entry_id, _)) => node_id == entry_id,\n         None => false\n     }\n@@ -2393,7 +2393,7 @@ pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool {\n pub fn create_entry_wrapper(ccx: @CrateContext,\n                            _sp: Span,\n                            main_llfn: ValueRef) {\n-    let et = ccx.sess.entry_type.unwrap();\n+    let et = ccx.sess.entry_type.get().unwrap();\n     match et {\n         session::EntryMain => {\n             create_entry_fn(ccx, main_llfn, true);"}, {"sha": "4443fa000e71566c1aa116c064f713186eaf6c84", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c63b1febc2e618f79d07ce46c1305cfa28b6596/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=5c63b1febc2e618f79d07ce46c1305cfa28b6596", "patch": "@@ -439,8 +439,8 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n fn check_for_entry_fn(ccx: &CrateCtxt) {\n     let tcx = ccx.tcx;\n     if !*tcx.sess.building_library {\n-        match *tcx.sess.entry_fn {\n-          Some((id, sp)) => match *tcx.sess.entry_type {\n+        match tcx.sess.entry_fn.get() {\n+          Some((id, sp)) => match tcx.sess.entry_type.get() {\n               Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),\n               Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n               Some(session::EntryNone) => {}"}]}