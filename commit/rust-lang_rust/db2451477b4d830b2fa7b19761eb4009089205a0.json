{"sha": "db2451477b4d830b2fa7b19761eb4009089205a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjQ1MTQ3N2I0ZDgzMGIyZmE3YjE5NzYxZWI0MDA5MDg5MjA1YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T05:24:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T05:24:35Z"}, "message": "auto merge of #6131 : thestinger/rust/new_iter, r=graydon", "tree": {"sha": "c384f9fdc5cc08952e80e3f13b8556b8c4980c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c384f9fdc5cc08952e80e3f13b8556b8c4980c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db2451477b4d830b2fa7b19761eb4009089205a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db2451477b4d830b2fa7b19761eb4009089205a0", "html_url": "https://github.com/rust-lang/rust/commit/db2451477b4d830b2fa7b19761eb4009089205a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db2451477b4d830b2fa7b19761eb4009089205a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f419370c543a8d3bc905c638c60c293401b0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/89f419370c543a8d3bc905c638c60c293401b0fa", "html_url": "https://github.com/rust-lang/rust/commit/89f419370c543a8d3bc905c638c60c293401b0fa"}, {"sha": "a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6eaa3bbb490b01c21864adc41e12eafb98a3c32", "html_url": "https://github.com/rust-lang/rust/commit/a6eaa3bbb490b01c21864adc41e12eafb98a3c32"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "7868b463807f6048aaa5b15ff1cb4f7bb768d7a7", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db2451477b4d830b2fa7b19761eb4009089205a0/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2451477b4d830b2fa7b19761eb4009089205a0/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=db2451477b4d830b2fa7b19761eb4009089205a0", "patch": "@@ -10,6 +10,7 @@\n \n //! Utilities for manipulating the char type\n \n+#[cfg(notest)]\n use cmp::Ord;\n use option::{None, Option, Some};\n use str;"}, {"sha": "8fc2db6d6f19a9289b281bd4d630347c98ad7777", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/db2451477b4d830b2fa7b19761eb4009089205a0/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db2451477b4d830b2fa7b19761eb4009089205a0/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=db2451477b4d830b2fa7b19761eb4009089205a0", "patch": "@@ -41,6 +41,9 @@ much easier to implement.\n \n */\n \n+use cmp::Ord;\n+use option::{Option, Some, None};\n+\n pub trait Times {\n     fn times(&self, it: &fn() -> bool);\n }\n@@ -104,6 +107,78 @@ pub fn all<T>(predicate: &fn(T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> bool {\n     true\n }\n \n+/**\n+ * Return the first element where `predicate` returns `true`. Return `None` if no element is found.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[1u, 2, 3, 4, 5, 6];\n+ * assert_eq!(*find(|& &x: & &uint| x > 3, |f| xs.each(f)).unwrap(), 4);\n+ * ~~~~\n+ */\n+#[inline(always)]\n+pub fn find<T>(predicate: &fn(&T) -> bool, iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    for iter |x| {\n+        if predicate(&x) {\n+            return Some(x);\n+        }\n+    }\n+    None\n+}\n+\n+/**\n+ * Return the largest item yielded by an iterator. Return `None` if the iterator is empty.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+ * assert_eq!(max(|f| xs.each(f)).unwrap(), &15);\n+ * ~~~~\n+ */\n+#[inline]\n+pub fn max<T: Ord>(iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    let mut result = None;\n+    for iter |x| {\n+        match result {\n+            Some(ref mut y) => {\n+                if x > *y {\n+                    *y = x;\n+                }\n+            }\n+            None => result = Some(x)\n+        }\n+    }\n+    result\n+}\n+\n+/**\n+ * Return the smallest item yielded by an iterator. Return `None` if the iterator is empty.\n+ *\n+ * # Example:\n+ *\n+ * ~~~~\n+ * let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+ * assert_eq!(max(|f| xs.each(f)).unwrap(), &-5);\n+ * ~~~~\n+ */\n+#[inline]\n+pub fn min<T: Ord>(iter: &fn(f: &fn(T) -> bool)) -> Option<T> {\n+    let mut result = None;\n+    for iter |x| {\n+        match result {\n+            Some(ref mut y) => {\n+                if x < *y {\n+                    *y = x;\n+                }\n+            }\n+            None => result = Some(x)\n+        }\n+    }\n+    result\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -128,4 +203,22 @@ mod tests {\n         assert!(all(|x: uint| x < 6, |f| uint::range(1, 6, f)));\n         assert!(!all(|x: uint| x < 5, |f| uint::range(1, 6, f)));\n     }\n+\n+    #[test]\n+    fn test_find() {\n+        let xs = ~[1u, 2, 3, 4, 5, 6];\n+        assert_eq!(*find(|& &x: & &uint| x > 3, |f| xs.each(f)).unwrap(), 4);\n+    }\n+\n+    #[test]\n+    fn test_max() {\n+        let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+        assert_eq!(max(|f| xs.each(f)).unwrap(), &15);\n+    }\n+\n+    #[test]\n+    fn test_min() {\n+        let xs = ~[8, 2, 3, 1, -5, 9, 11, 15];\n+        assert_eq!(min(|f| xs.each(f)).unwrap(), &-5);\n+    }\n }"}]}