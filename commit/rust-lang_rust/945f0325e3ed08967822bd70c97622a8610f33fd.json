{"sha": "945f0325e3ed08967822bd70c97622a8610f33fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NWYwMzI1ZTNlZDA4OTY3ODIyYmQ3MGM5NzYyMmE4NjEwZjMzZmQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-10T04:53:07Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-08-10T10:10:07Z"}, "message": "Add individual documentation for <integer>`.swap_bytes`/.`reverse_bits`", "tree": {"sha": "cabac35eb69a478e60da07b66ca54078f1440b44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cabac35eb69a478e60da07b66ca54078f1440b44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/945f0325e3ed08967822bd70c97622a8610f33fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/945f0325e3ed08967822bd70c97622a8610f33fd", "html_url": "https://github.com/rust-lang/rust/commit/945f0325e3ed08967822bd70c97622a8610f33fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/945f0325e3ed08967822bd70c97622a8610f33fd/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d43ed84207c7e58f363f46e5a438ff40f2b311", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d43ed84207c7e58f363f46e5a438ff40f2b311", "html_url": "https://github.com/rust-lang/rust/commit/f6d43ed84207c7e58f363f46e5a438ff40f2b311"}], "stats": {"total": 225, "additions": 112, "deletions": 113}, "files": [{"sha": "eb63966354b8644f86a8dcc373403b0d566d7d87", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 112, "deletions": 113, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/945f0325e3ed08967822bd70c97622a8610f33fd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/945f0325e3ed08967822bd70c97622a8610f33fd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=945f0325e3ed08967822bd70c97622a8610f33fd", "patch": "@@ -188,7 +188,8 @@ mod wrapping;\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n-     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr) => {\n+     $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n+     $reversed:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -380,55 +381,48 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n                 (self as $UnsignedT).rotate_right(n) as Self\n             }\n         }\n-        /// Reverses the byte order of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i16` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// let n: i16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.swap_bytes();\n-        ///\n-        /// assert_eq!(m, 0b01010101_00000000);\n-        /// assert_eq!(m, 21760);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_ops\")]\n-        #[inline]\n-        pub const fn swap_bytes(self) -> Self {\n-            (self as $UnsignedT).swap_bytes() as Self\n+        doc_comment! {\n+            concat!(\"Reverses the byte order of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $swap_op, stringify!($SelfT), \";\n+\n+let m = n.swap_bytes();\n+\n+assert_eq!(m, \", $swapped, \");\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn swap_bytes(self) -> Self {\n+                (self as $UnsignedT).swap_bytes() as Self\n+            }\n         }\n \n-        /// Reverses the bit pattern of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `i16` is used here.\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// #![feature(reverse_bits)]\n-        ///\n-        /// let n: i16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.reverse_bits();\n-        ///\n-        /// assert_eq!(m as u16, 0b10101010_00000000);\n-        /// assert_eq!(m, -22016);\n-        /// ```\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        pub fn reverse_bits(self) -> Self {\n-            (self as $UnsignedT).reverse_bits() as Self\n+        doc_comment! {\n+            concat!(\"Reverses the bit pattern of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(reverse_bits)]\n+\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.reverse_bits();\n+\n+assert_eq!(m, \", $reversed, \");\n+```\"),\n+            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[inline]\n+            pub fn reverse_bits(self) -> Self {\n+                (self as $UnsignedT).reverse_bits() as Self\n+            }\n         }\n \n         doc_comment! {\n@@ -2009,50 +2003,57 @@ $EndFeature, \"\n \n #[lang = \"i8\"]\n impl i8 {\n-    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\" }\n+    int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n-    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n+    int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n+        \"0x2c48\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n-    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n-                \"0xaa00000000006e1\", \"0x6e10aa\" }\n+         \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n+         \"0x6a2c48091e6a2c48\" }\n }\n \n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, i128, u128, 128, -170141183460469231731687303715884105728,\n         170141183460469231731687303715884105727, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\"\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\"\n     }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\" }\n+    int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n+        \"0x3412\", \"0x2c48\" }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n-    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n+        \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n-        12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n+        12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n+         \"0x6a2c48091e6a2c48\" }\n }\n \n // Emits the correct `cttz` call, depending on the size of the type.\n@@ -2071,7 +2072,8 @@ macro_rules! uint_cttz_call {\n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n-        $rot:expr, $rot_op:expr, $rot_result:expr) => {\n+        $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n+        $reversed:expr ) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2263,55 +2265,48 @@ assert_eq!(n.rotate_right(\", $rot, \"), m);\n             }\n         }\n \n-        /// Reverses the byte order of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u16` is used here.\n-        ///\n-        /// ```\n-        /// let n: u16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.swap_bytes();\n-        ///\n-        /// assert_eq!(m, 0b01010101_00000000);\n-        /// assert_eq!(m, 21760);\n-        /// ```\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[rustc_const_unstable(feature = \"const_int_ops\")]\n-        #[inline]\n-        pub const fn swap_bytes(self) -> Self {\n-            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+        doc_comment! {\n+            concat!(\"\n+Reverses the byte order of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.swap_bytes();\n+\n+assert_eq!(m, \", $swapped, \");\n+```\"),\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_ops\")]\n+            #[inline]\n+            pub const fn swap_bytes(self) -> Self {\n+                unsafe { intrinsics::bswap(self as $ActualT) as Self }\n+            }\n         }\n \n-        /// Reverses the bit pattern of the integer.\n-        ///\n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// Please note that this example is shared between integer types.\n-        /// Which explains why `u16` is used here.\n-        ///\n-        /// ```\n-        /// #![feature(reverse_bits)]\n-        ///\n-        /// let n: u16 = 0b0000000_01010101;\n-        /// assert_eq!(n, 85);\n-        ///\n-        /// let m = n.reverse_bits();\n-        ///\n-        /// assert_eq!(m, 0b10101010_00000000);\n-        /// assert_eq!(m, 43520);\n-        /// ```\n-        #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-        #[inline]\n-        pub fn reverse_bits(self) -> Self {\n-            unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+        doc_comment! {\n+            concat!(\"Reverses the bit pattern of the integer.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(reverse_bits)]\n+\n+let n = \", $swap_op, stringify!($SelfT), \";\n+let m = n.reverse_bits();\n+\n+assert_eq!(m, \", $reversed, \");\n+```\"),\n+            #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n+            #[inline]\n+            pub fn reverse_bits(self) -> Self {\n+                unsafe { intrinsics::bitreverse(self as $ActualT) as Self }\n+            }\n         }\n \n         doc_comment! {\n@@ -3621,7 +3616,7 @@ $EndFeature, \"\n \n #[lang = \"u8\"]\n impl u8 {\n-    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\" }\n+    uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4147,41 +4142,45 @@ impl u8 {\n \n #[lang = \"u16\"]\n impl u16 {\n-    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n+    uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n-    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+        \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n-    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\" }\n+    uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n }\n \n #[lang = \"u128\"]\n impl u128 {\n     uint_impl! { u128, u128, 128, 340282366920938463463374607431768211455, \"\", \"\", 16,\n-        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\" }\n+        \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n+        \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\" }\n+    uint_impl! { usize, u16, 16, 65536, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\" }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\" }\n+    uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n+        \"0x78563412\", \"0x1e6a2c48\" }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n #[lang = \"usize\"]\n impl usize {\n-    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\",\n-        \"0x6e10aa\" }\n+    uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n+        \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\" }\n }\n \n /// A classification of floating point numbers."}]}