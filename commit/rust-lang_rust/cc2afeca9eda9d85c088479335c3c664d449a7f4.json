{"sha": "cc2afeca9eda9d85c088479335c3c664d449a7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmFmZWNhOWVkYTlkODVjMDg4NDc5MzM1YzNjNjY0ZDQ0OWE3ZjQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-06-28T07:26:10Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-06-28T07:26:10Z"}, "message": "Fix compile errors from breaking changes", "tree": {"sha": "0d8e3ffaf34820494661735b74e10b030dbcac3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d8e3ffaf34820494661735b74e10b030dbcac3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2afeca9eda9d85c088479335c3c664d449a7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2afeca9eda9d85c088479335c3c664d449a7f4", "html_url": "https://github.com/rust-lang/rust/commit/cc2afeca9eda9d85c088479335c3c664d449a7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2afeca9eda9d85c088479335c3c664d449a7f4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3e1d751fe9a51dba468f3198e000647175bdb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3e1d751fe9a51dba468f3198e000647175bdb4", "html_url": "https://github.com/rust-lang/rust/commit/dd3e1d751fe9a51dba468f3198e000647175bdb4"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "5f1102a36fca875ed6d2685cffafc376e88dcc5d", "filename": "src/closures.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=cc2afeca9eda9d85c088479335c3c664d449a7f4", "patch": "@@ -31,6 +31,7 @@ use utils::{last_line_width, left_most_sub_expr, stmt_expr};\n //     statement without needing a semi-colon), then adding or removing braces\n //     can change whether it is treated as an expression or statement.\n \n+// FIXME(topecongiro) Format async closures (#2813).\n pub fn rewrite_closure(\n     capture: ast::CaptureBy,\n     movability: ast::Movability,\n@@ -288,7 +289,7 @@ pub fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) = expr.node {\n+    if let ast::ExprKind::Closure(capture, _, movability, ref fn_decl, ref body, _) = expr.node {\n         let body = match body.node {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)"}, {"sha": "ca31b0b82ef0909ebfdebb1aba0fda058e84da90", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=cc2afeca9eda9d85c088479335c3c664d449a7f4", "patch": "@@ -183,7 +183,7 @@ pub fn format_expr(\n         } else {\n             Some(\"yield\".to_string())\n         },\n-        ast::ExprKind::Closure(capture, movability, ref fn_decl, ref body, _) => {\n+        ast::ExprKind::Closure(capture, _, movability, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(\n                 capture, movability, fn_decl, body, expr.span, context, shape,\n             )\n@@ -344,6 +344,8 @@ pub fn format_expr(\n         }\n         // FIXME(#2743)\n         ast::ExprKind::ObsoleteInPlace(..) => unimplemented!(),\n+        // FIXME(topecongiro) Format async block.\n+        ast::ExprKind::Async(..) => None,\n     };\n \n     expr_rw"}, {"sha": "fe638a17069239949bb62f120ecc5fbc8e695df1", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=cc2afeca9eda9d85c088479335c3c664d449a7f4", "patch": "@@ -192,10 +192,10 @@ impl<'a> FnSig<'a> {\n         generics: &'a ast::Generics,\n     ) -> FnSig<'a> {\n         FnSig {\n-            unsafety: method_sig.unsafety,\n-            constness: method_sig.constness.node,\n+            unsafety: method_sig.header.unsafety,\n+            constness: method_sig.header.constness.node,\n             defaultness: ast::Defaultness::Final,\n-            abi: method_sig.abi,\n+            abi: method_sig.header.abi,\n             decl: &*method_sig.decl,\n             generics,\n             visibility: DEFAULT_VISIBILITY,\n@@ -209,13 +209,13 @@ impl<'a> FnSig<'a> {\n         defaultness: ast::Defaultness,\n     ) -> FnSig<'a> {\n         match *fn_kind {\n-            visit::FnKind::ItemFn(_, unsafety, constness, abi, visibility, _) => FnSig {\n+            visit::FnKind::ItemFn(_, fn_header, visibility, _) => FnSig {\n                 decl,\n                 generics,\n-                abi,\n-                constness: constness.node,\n+                abi: fn_header.abi,\n+                constness: fn_header.constness.node,\n                 defaultness,\n-                unsafety,\n+                unsafety: fn_header.unsafety,\n                 visibility: visibility.clone(),\n             },\n             visit::FnKind::Method(_, method_sig, vis, _) => {"}, {"sha": "2b0f08dd0c7f7deecfba2e9e079233e8f092072f", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2afeca9eda9d85c088479335c3c664d449a7f4/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=cc2afeca9eda9d85c088479335c3c664d449a7f4", "patch": "@@ -252,6 +252,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     // Note that this only gets called for function definitions. Required methods\n     // on traits do not get handled here.\n+    // FIXME(topecongiro) Format async fn (#2812).\n     fn visit_fn(\n         &mut self,\n         fk: visit::FnKind,\n@@ -264,7 +265,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let indent = self.block_indent;\n         let block;\n         let rewrite = match fk {\n-            visit::FnKind::ItemFn(ident, _, _, _, _, b) | visit::FnKind::Method(ident, _, _, b) => {\n+            visit::FnKind::ItemFn(ident, _, _, b) | visit::FnKind::Method(ident, _, _, b) => {\n                 block = b;\n                 self.rewrite_fn(\n                     indent,\n@@ -392,10 +393,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             ast::ItemKind::Static(..) | ast::ItemKind::Const(..) => {\n                 self.visit_static(&StaticParts::from_item(item));\n             }\n-            ast::ItemKind::Fn(ref decl, unsafety, constness, abi, ref generics, ref body) => {\n+            ast::ItemKind::Fn(ref decl, fn_header, ref generics, ref body) => {\n                 let inner_attrs = inner_attributes(&item.attrs);\n                 self.visit_fn(\n-                    visit::FnKind::ItemFn(item.ident, unsafety, constness, abi, &item.vis, body),\n+                    visit::FnKind::ItemFn(item.ident, fn_header, &item.vis, body),\n                     generics,\n                     decl,\n                     item.span,"}]}