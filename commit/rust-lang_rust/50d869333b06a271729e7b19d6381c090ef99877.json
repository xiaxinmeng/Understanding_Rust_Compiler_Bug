{"sha": "50d869333b06a271729e7b19d6381c090ef99877", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDg2OTMzM2IwNmEyNzE3MjllN2IxOWQ2MzgxYzA5MGVmOTk4Nzc=", "commit": {"author": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-07-31T07:06:13Z"}, "committer": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-09-13T06:34:12Z"}, "message": "Add inspection and setter methods to proc_macro::Diagnostic.", "tree": {"sha": "06af10911335057c50e23976c0c291385798efbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06af10911335057c50e23976c0c291385798efbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d869333b06a271729e7b19d6381c090ef99877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d869333b06a271729e7b19d6381c090ef99877", "html_url": "https://github.com/rust-lang/rust/commit/50d869333b06a271729e7b19d6381c090ef99877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d869333b06a271729e7b19d6381c090ef99877/comments", "author": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2302daef3608c09e2b50193a64611b18ced86f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "html_url": "https://github.com/rust-lang/rust/commit/f2302daef3608c09e2b50193a64611b18ced86f3"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "329a76f22ce8314da166ab3def0d0610fbcab9e8", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/50d869333b06a271729e7b19d6381c090ef99877/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50d869333b06a271729e7b19d6381c090ef99877/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=50d869333b06a271729e7b19d6381c090ef99877", "patch": "@@ -59,6 +59,21 @@ macro_rules! diagnostic_child_methods {\n     )\n }\n \n+#[derive(Debug, Clone)]\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+/// Iterator over the children diagnostics of a `Diagnostic`.\n+pub struct Children<'a>(::std::slice::Iter<'a, Diagnostic>);\n+\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+impl<'a> Iterator for Children<'a> {\n+    type Item = &'a Diagnostic;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.0.next()\n+    }\n+}\n+\n+#[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n impl Diagnostic {\n     /// Create a new diagnostic with the given `level` and `message`.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n@@ -94,6 +109,42 @@ impl Diagnostic {\n         self.level\n     }\n \n+    /// Sets the level in `self` to `level`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn set_level(&mut self, level: Level) {\n+        self.level = level;\n+    }\n+\n+    /// Returns the message in `self`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn message(&self) -> &str {\n+        &self.message\n+    }\n+\n+    /// Sets the message in `self` to `message`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn set_message<T: Into<String>>(&mut self, message: T) {\n+        self.message = message.into();\n+    }\n+\n+    /// Returns the `Span` in `self`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn span(&self) -> Option<Span> {\n+        self.span\n+    }\n+\n+    /// Sets the `Span` in `self` to `span`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn set_span(&mut self, span: Span) {\n+        self.span = Some(span);\n+    }\n+\n+    /// Returns an iterator over the children diagnostics of `self`.\n+    #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n+    pub fn children(&self) -> Children {\n+        Children(self.children.iter())\n+    }\n+\n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"38356\")]\n     pub fn emit(self) {"}]}