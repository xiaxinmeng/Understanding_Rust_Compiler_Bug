{"sha": "eca147896f2582d1dc7735fd238956082ea92280", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYTE0Nzg5NmYyNTgyZDFkYzc3MzVmZDIzODk1NjA4MmVhOTIyODA=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-04-29T23:47:58Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Match kind in try_validation_pat!.\n\nAvoids having to repeat InterpErrorInfo { .. }", "tree": {"sha": "355abb1e32703ca1912916445dc321eae9212801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/355abb1e32703ca1912916445dc321eae9212801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eca147896f2582d1dc7735fd238956082ea92280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eca147896f2582d1dc7735fd238956082ea92280", "html_url": "https://github.com/rust-lang/rust/commit/eca147896f2582d1dc7735fd238956082ea92280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eca147896f2582d1dc7735fd238956082ea92280/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "656ab7639737bd406591a4198633cd3ab0ad0c41", "url": "https://api.github.com/repos/rust-lang/rust/commits/656ab7639737bd406591a4198633cd3ab0ad0c41", "html_url": "https://github.com/rust-lang/rust/commit/656ab7639737bd406591a4198633cd3ab0ad0c41"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d6f73fa2d0258c98a436fc1f262c24eaa25fd396", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eca147896f2582d1dc7735fd238956082ea92280/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eca147896f2582d1dc7735fd238956082ea92280/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=eca147896f2582d1dc7735fd238956082ea92280", "patch": "@@ -49,7 +49,7 @@ macro_rules! try_validation {\n /// as a kind of validation blacklist:\n ///\n /// ```rust\n-/// let v = try_validation_pat(some_fn(), Foo | Bar | Baz, \"some failure\", path);\n+/// let v = try_validation_pat!(some_fn(), Foo | Bar | Baz, \"some failure\", path);\n /// // Failures that match $p are thrown up as validation errors, but other errors are passed back\n /// // unchanged.\n /// ```\n@@ -59,7 +59,7 @@ macro_rules! try_validation_pat {\n             Ok(x) => x,\n             // We catch the error and turn it into a validation failure. We are okay with\n             // allocation here as this can only slow down builds that fail anyway.\n-            $( Err($p) )|* if true => throw_validation_failure!($what, $where $(, $details)?),\n+            $( Err(InterpErrorInfo { kind: $p, .. }) )|* if true => throw_validation_failure!($what, $where $(, $details)?),\n             Err(e) => Err::<!, _>(e)?,\n         }\n     }};\n@@ -494,7 +494,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation_pat!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    InterpErrorInfo { kind: err_ub!(InvalidUndefBytes(..)), ..},\n+                    err_ub!(InvalidUndefBytes(..)),\n                     \"uninitialized raw pointer\",\n                     self.path\n                 );"}]}