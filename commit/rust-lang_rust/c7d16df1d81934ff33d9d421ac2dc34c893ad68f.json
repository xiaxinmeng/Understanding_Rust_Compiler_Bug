{"sha": "c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZDE2ZGYxZDgxOTM0ZmYzM2Q5ZDQyMWFjMmRjMzRjODkzYWQ2OGY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-11T08:35:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:11:34Z"}, "message": "add function calls", "tree": {"sha": "3306f4df8e5befbe4fa0b30f47058d0372051c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3306f4df8e5befbe4fa0b30f47058d0372051c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "html_url": "https://github.com/rust-lang/rust/commit/c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7d16df1d81934ff33d9d421ac2dc34c893ad68f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e", "html_url": "https://github.com/rust-lang/rust/commit/d1294e0ce2ce78e4a634fbfa68cb2bc4d50afc6e"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "50cc2afb89c802b043f39b9b0176cd90d3cee66d", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7d16df1d81934ff33d9d421ac2dc34c893ad68f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d16df1d81934ff33d9d421ac2dc34c893ad68f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "patch": "@@ -242,6 +242,24 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n         match terminator.kind {\n             TerminatorKind::Goto { target } => Some(Some(target)),\n             TerminatorKind::Return => Some(None),\n+            TerminatorKind::Call {\n+                ref func,\n+                ref args,\n+                destination: Some((ref place, target)),\n+                cleanup: _,\n+                from_hir_call: true,\n+                fn_span: _,\n+            } => {\n+                let local = place.as_local()?;\n+                let func = self.operand_to_node(func)?;\n+                let args = self.tcx.arena.alloc_from_iter(\n+                    args.iter()\n+                        .map(|arg| self.operand_to_node(arg))\n+                        .collect::<Option<Vec<NodeId>>>()?,\n+                );\n+                self.locals[local] = self.nodes.push(Node::FunctionCall(func, args));\n+                Some(Some(target))\n+            }\n             TerminatorKind::Assert { ref cond, expected: false, target, .. } => {\n                 let p = match cond {\n                     mir::Operand::Copy(p) | mir::Operand::Move(p) => p,"}, {"sha": "1b9ec0108b1e742ae3052ff253a2ecca05d5e7df", "filename": "src/test/ui/const-generics/const_evaluatable_checked/fn_call.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c7d16df1d81934ff33d9d421ac2dc34c893ad68f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7d16df1d81934ff33d9d421ac2dc34c893ad68f/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffn_call.rs?ref=c7d16df1d81934ff33d9d421ac2dc34c893ad68f", "patch": "@@ -0,0 +1,30 @@\n+// run-pass\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+const fn test_me<T>(a: usize, b: usize) -> usize {\n+    if a < b {\n+        std::mem::size_of::<T>()\n+    } else {\n+        std::usize::MAX\n+    }\n+}\n+\n+fn test_simple<T>() -> [u8; std::mem::size_of::<T>()]\n+where\n+    [u8; std::mem::size_of::<T>()]: Sized,\n+{\n+    [0; std::mem::size_of::<T>()]\n+}\n+\n+fn test_with_args<T, const N: usize>() -> [u8; test_me::<T>(N, N + 1) + N]\n+where\n+    [u8; test_me::<T>(N, N + 1) + N]: Sized,\n+{\n+    [0; test_me::<T>(N, N + 1) + N]\n+}\n+\n+fn main() {\n+    assert_eq!([0; 8], test_simple::<u64>());\n+    assert_eq!([0; 12], test_with_args::<u64, 4>());\n+}"}]}