{"sha": "100882296e065526cfd055380e14334738da4158", "node_id": "C_kwDOAAsO6NoAKDEwMDg4MjI5NmUwNjU1MjZjZmQwNTUzODBlMTQzMzQ3MzhkYTQxNTg", "commit": {"author": {"name": "ridwanabdillahi", "email": "91507758+ridwanabdillahi@users.noreply.github.com", "date": "2022-08-10T16:16:20Z"}, "committer": {"name": "ridwanabdillahi", "email": "91507758+ridwanabdillahi@users.noreply.github.com", "date": "2022-08-11T23:04:08Z"}, "message": "Add support for generating unique *.profraw files by default when using the `-C instrument-coverage` flag.\n\nRespond to PR comments.", "tree": {"sha": "46a23fbb6d11ff7b1a113c77880bd5d30b53ff21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a23fbb6d11ff7b1a113c77880bd5d30b53ff21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/100882296e065526cfd055380e14334738da4158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/100882296e065526cfd055380e14334738da4158", "html_url": "https://github.com/rust-lang/rust/commit/100882296e065526cfd055380e14334738da4158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/100882296e065526cfd055380e14334738da4158/comments", "author": {"login": "ridwanabdillahi", "id": 91507758, "node_id": "U_kgDOBXRMLg", "avatar_url": "https://avatars.githubusercontent.com/u/91507758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ridwanabdillahi", "html_url": "https://github.com/ridwanabdillahi", "followers_url": "https://api.github.com/users/ridwanabdillahi/followers", "following_url": "https://api.github.com/users/ridwanabdillahi/following{/other_user}", "gists_url": "https://api.github.com/users/ridwanabdillahi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ridwanabdillahi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ridwanabdillahi/subscriptions", "organizations_url": "https://api.github.com/users/ridwanabdillahi/orgs", "repos_url": "https://api.github.com/users/ridwanabdillahi/repos", "events_url": "https://api.github.com/users/ridwanabdillahi/events{/privacy}", "received_events_url": "https://api.github.com/users/ridwanabdillahi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ridwanabdillahi", "id": 91507758, "node_id": "U_kgDOBXRMLg", "avatar_url": "https://avatars.githubusercontent.com/u/91507758?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ridwanabdillahi", "html_url": "https://github.com/ridwanabdillahi", "followers_url": "https://api.github.com/users/ridwanabdillahi/followers", "following_url": "https://api.github.com/users/ridwanabdillahi/following{/other_user}", "gists_url": "https://api.github.com/users/ridwanabdillahi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ridwanabdillahi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ridwanabdillahi/subscriptions", "organizations_url": "https://api.github.com/users/ridwanabdillahi/orgs", "repos_url": "https://api.github.com/users/ridwanabdillahi/repos", "events_url": "https://api.github.com/users/ridwanabdillahi/events{/privacy}", "received_events_url": "https://api.github.com/users/ridwanabdillahi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ffea6938b5839c390252e07940b99e3b6a889a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6938b5839c390252e07940b99e3b6a889a", "html_url": "https://github.com/rust-lang/rust/commit/20ffea6938b5839c390252e07940b99e3b6a889a"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "879baaa8556f5ea6692d8c3098cdc08dd4bf57f6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=100882296e065526cfd055380e14334738da4158", "patch": "@@ -423,6 +423,14 @@ fn get_pgo_sample_use_path(config: &ModuleConfig) -> Option<CString> {\n         .map(|path_buf| CString::new(path_buf.to_string_lossy().as_bytes()).unwrap())\n }\n \n+fn get_instr_profile_output_path(config: &ModuleConfig) -> Option<CString> {\n+    if config.instrument_coverage {\n+        Some(CString::new(format!(\"{}\", PathBuf::from(\"default_%m_%p.profraw\").display())).unwrap())\n+    } else {\n+        None\n+    }\n+}\n+\n pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n@@ -438,6 +446,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     let pgo_use_path = get_pgo_use_path(config);\n     let pgo_sample_use_path = get_pgo_sample_use_path(config);\n     let is_lto = opt_stage == llvm::OptStage::ThinLTO || opt_stage == llvm::OptStage::FatLTO;\n+    let instr_profile_output_path = get_instr_profile_output_path(config);\n     // Sanitizer instrumentation is only inserted during the pre-link optimization stage.\n     let sanitizer_options = if !is_lto {\n         Some(llvm::SanitizerOptions {\n@@ -488,6 +497,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         pgo_gen_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.instrument_coverage,\n+        instr_profile_output_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.instrument_gcov,\n         pgo_sample_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         config.debug_info_for_profiling,"}, {"sha": "0d27614b9a3f79c47bf147c261151c97ee2e5c59", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=100882296e065526cfd055380e14334738da4158", "patch": "@@ -2347,6 +2347,7 @@ extern \"C\" {\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n         InstrumentCoverage: bool,\n+        InstrProfileOutput: *const c_char,\n         InstrumentGCOV: bool,\n         PGOSampleUsePath: *const c_char,\n         DebugInfoForProfiling: bool,"}, {"sha": "bdf2a8525073064b95421f935bfe3ba20b3298cb", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/100882296e065526cfd055380e14334738da4158/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=100882296e065526cfd055380e14334738da4158", "patch": "@@ -822,7 +822,8 @@ LLVMRustOptimizeWithNewPassManager(\n     bool DisableSimplifyLibCalls, bool EmitLifetimeMarkers,\n     LLVMRustSanitizerOptions *SanitizerOptions,\n     const char *PGOGenPath, const char *PGOUsePath,\n-    bool InstrumentCoverage, bool InstrumentGCOV,\n+    bool InstrumentCoverage, const char *InstrProfileOutput,\n+    bool InstrumentGCOV,\n     const char *PGOSampleUsePath, bool DebugInfoForProfiling,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n@@ -922,8 +923,11 @@ LLVMRustOptimizeWithNewPassManager(\n \n   if (InstrumentCoverage) {\n     PipelineStartEPCallbacks.push_back(\n-      [](ModulePassManager &MPM, OptimizationLevel Level) {\n+      [InstrProfileOutput](ModulePassManager &MPM, OptimizationLevel Level) {\n         InstrProfOptions Options;\n+        if (InstrProfileOutput) {\n+          Options.InstrProfileOutput = InstrProfileOutput;\n+        }\n         MPM.addPass(InstrProfiling(Options, false));\n       }\n     );"}, {"sha": "78f8875a2d90c5bb11aab95226772d7fb0465943", "filename": "src/test/codegen/instrument-coverage.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/100882296e065526cfd055380e14334738da4158/src%2Ftest%2Fcodegen%2Finstrument-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/100882296e065526cfd055380e14334738da4158/src%2Ftest%2Fcodegen%2Finstrument-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finstrument-coverage.rs?ref=100882296e065526cfd055380e14334738da4158", "patch": "@@ -0,0 +1,17 @@\n+// Test that `-Cinstrument-coverage` creates expected __llvm_profile_filename symbol in LLVM IR.\n+\n+// needs-profiler-support\n+// compile-flags: -Cinstrument-coverage\n+\n+// CHECK: @__llvm_profile_filename = {{.*}}\"default_%m_%p.profraw\\00\"{{.*}}\n+\n+#![crate_type=\"lib\"]\n+\n+#[inline(never)]\n+fn some_function() {\n+\n+}\n+\n+pub fn some_other_function() {\n+    some_function();\n+}"}]}