{"sha": "645a9c3a274109512839b79d8e86a805a39cd6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NWE5YzNhMjc0MTA5NTEyODM5Yjc5ZDhlODZhODA1YTM5Y2Q2ZTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T18:27:40Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T18:27:40Z"}, "message": "Move things from `traits` module to `types` as well", "tree": {"sha": "30cce00086913ec4682db4d9704b6c609811de6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30cce00086913ec4682db4d9704b6c609811de6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/645a9c3a274109512839b79d8e86a805a39cd6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/645a9c3a274109512839b79d8e86a805a39cd6e1", "html_url": "https://github.com/rust-lang/rust/commit/645a9c3a274109512839b79d8e86a805a39cd6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/645a9c3a274109512839b79d8e86a805a39cd6e1/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508a1ecad3cf9c9f01022b3e95f9d6a7ad7a4cd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/508a1ecad3cf9c9f01022b3e95f9d6a7ad7a4cd5", "html_url": "https://github.com/rust-lang/rust/commit/508a1ecad3cf9c9f01022b3e95f9d6a7ad7a4cd5"}], "stats": {"total": 217, "additions": 107, "deletions": 110}, "files": [{"sha": "e41efb3856f92cbfa589a987c326cb6f8f04df25", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -55,10 +55,11 @@ use hir_ty::{\n     autoderef, could_unify,\n     method_resolution::{self, TyFingerprint},\n     primitive::UintTy,\n-    traits::{FnTrait, Solution, SolutionVariables},\n+    traits::FnTrait,\n     AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Substitution,\n-    TraitEnvironment, Ty, TyBuilder, TyDefId, TyKind, TyVariableKind, WhereClause,\n+    DebruijnIndex, InEnvironment, Interner, QuantifiedWhereClause, Scalar, Solution,\n+    SolutionVariables, Substitution, TraitEnvironment, Ty, TyBuilder, TyDefId, TyKind,\n+    TyVariableKind, WhereClause,\n };\n use itertools::Itertools;\n use rustc_hash::FxHashSet;"}, {"sha": "7ca4af80e4fb87a1c4d1fd0b43ea49cfb4b891eb", "filename": "crates/hir_ty/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fautoderef.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -12,10 +12,8 @@ use hir_expand::name::name;\n use log::{info, warn};\n \n use crate::{\n-    db::HirDatabase,\n-    traits::{InEnvironment, Solution},\n-    AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, Interner, Ty,\n-    TyBuilder, TyKind,\n+    db::HirDatabase, AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex,\n+    InEnvironment, Interner, Solution, Ty, TyBuilder, TyKind,\n };\n \n const AUTODEREF_RECURSION_LIMIT: usize = 10;"}, {"sha": "4300680d98f975ba7c80f93ef3bce63de9a6dde7", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -123,7 +123,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         &self,\n         krate: CrateId,\n         goal: crate::Canonical<crate::InEnvironment<crate::DomainGoal>>,\n-    ) -> Option<crate::traits::Solution>;\n+    ) -> Option<crate::Solution>;\n \n     #[salsa::invoke(crate::traits::chalk::program_clauses_for_chalk_env_query)]\n     fn program_clauses_for_chalk_env("}, {"sha": "bb885db350613ba87434e8ac032f259e2e003125", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -37,8 +37,8 @@ use stdx::impl_from;\n use syntax::SmolStr;\n \n use super::{\n-    traits::{DomainGoal, Guidance, Solution},\n-    InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty, TypeWalk,\n+    DomainGoal, Guidance, InEnvironment, ProjectionTy, Solution, TraitEnvironment, TraitRef, Ty,\n+    TypeWalk,\n };\n use crate::{\n     db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,"}, {"sha": "32c273afcd308a5065f473a825ae2a171c6bbacd", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -7,7 +7,7 @@\n use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n-use crate::{autoderef, traits::Solution, Interner, Ty, TyBuilder, TyKind};\n+use crate::{autoderef, Interner, Solution, Ty, TyBuilder, TyKind};\n \n use super::{InEnvironment, InferenceContext};\n "}, {"sha": "ccaae53e983e8fb43445830cfb6d15f5ef3a7087", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -20,10 +20,10 @@ use crate::{\n     method_resolution, op,\n     primitive::{self, UintTy},\n     to_chalk_trait_id,\n-    traits::{chalk::from_chalk, FnTrait, InEnvironment},\n+    traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n-    AdtId, Binders, CallableDefId, FnPointer, FnSig, Interner, Rawness, Scalar, Substitution,\n-    TraitRef, Ty, TyBuilder, TyKind,\n+    AdtId, Binders, CallableDefId, FnPointer, FnSig, InEnvironment, Interner, Rawness, Scalar,\n+    Substitution, TraitRef, Ty, TyBuilder, TyKind,\n };\n \n use super::{"}, {"sha": "76609e2dfb1c8a02d4e2bada1c12b6e3c1e90f4f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -49,7 +49,7 @@ pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::{AliasEq, DomainGoal, InEnvironment, TraitEnvironment};\n+pub use traits::TraitEnvironment;\n pub use types::*;\n pub use walk::TypeWalk;\n "}, {"sha": "0e4a620b612099fdee38d4ff5d6157a32a4f1ebd", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -800,7 +800,7 @@ pub fn implements_trait_unique(\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n     let solution = db.trait_solve(krate, goal);\n \n-    matches!(solution, Some(crate::traits::Solution::Unique(_)))\n+    matches!(solution, Some(crate::Solution::Unique(_)))\n }\n \n /// This creates Substs for a trait with the given Self type and type variables"}, {"sha": "66d600bfc18976a7493f2333d162307f2e2837ea", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 2, "deletions": 86, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -8,8 +8,8 @@ use hir_def::{lang_item::LangItemTarget, TraitId};\n use stdx::panic_context;\n \n use crate::{\n-    db::HirDatabase, AliasTy, Canonical, DebruijnIndex, HirDisplay, Substitution, Ty, TyKind,\n-    TypeWalk, WhereClause,\n+    db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n+    Solution, SolutionVariables, Ty, TyKind, WhereClause,\n };\n \n use self::chalk::{from_chalk, Interner, ToChalk};\n@@ -70,55 +70,6 @@ impl Default for TraitEnvironment {\n     }\n }\n \n-/// Something (usually a goal), along with an environment.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct InEnvironment<T> {\n-    pub environment: chalk_ir::Environment<Interner>,\n-    pub goal: T,\n-}\n-\n-impl<T> InEnvironment<T> {\n-    pub fn new(environment: chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n-        InEnvironment { environment, goal: value }\n-    }\n-}\n-\n-/// Something that needs to be proven (by Chalk) during type checking, e.g. that\n-/// a certain type implements a certain trait. Proving the Obligation might\n-/// result in additional information about inference variables.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum DomainGoal {\n-    Holds(WhereClause),\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n-pub struct AliasEq {\n-    pub alias: AliasTy,\n-    pub ty: Ty,\n-}\n-\n-impl TypeWalk for AliasEq {\n-    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n-        self.ty.walk(f);\n-        match &self.alias {\n-            AliasTy::Projection(projection_ty) => projection_ty.walk(f),\n-            AliasTy::Opaque(opaque) => opaque.walk(f),\n-        }\n-    }\n-\n-    fn walk_mut_binders(\n-        &mut self,\n-        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n-        binders: DebruijnIndex,\n-    ) {\n-        self.ty.walk_mut_binders(f, binders);\n-        match &mut self.alias {\n-            AliasTy::Projection(projection_ty) => projection_ty.walk_mut_binders(f, binders),\n-            AliasTy::Opaque(opaque) => opaque.walk_mut_binders(f, binders),\n-        }\n-    }\n-}\n-\n /// Solve a trait goal using Chalk.\n pub(crate) fn trait_solve_query(\n     db: &dyn HirDatabase,\n@@ -246,41 +197,6 @@ fn solution_from_chalk(\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct SolutionVariables(pub Canonical<Substitution>);\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-/// A (possible) solution for a proposed goal.\n-pub enum Solution {\n-    /// The goal indeed holds, and there is a unique value for all existential\n-    /// variables.\n-    Unique(SolutionVariables),\n-\n-    /// The goal may be provable in multiple ways, but regardless we may have some guidance\n-    /// for type inference. In this case, we don't return any lifetime\n-    /// constraints, since we have not \"committed\" to any particular solution\n-    /// yet.\n-    Ambig(Guidance),\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq)]\n-/// When a goal holds ambiguously (e.g., because there are multiple possible\n-/// solutions), we issue a set of *guidance* back to type inference.\n-pub enum Guidance {\n-    /// The existential variables *must* have the given values if the goal is\n-    /// ever to hold, but that alone isn't enough to guarantee the goal will\n-    /// actually hold.\n-    Definite(SolutionVariables),\n-\n-    /// There are multiple plausible values for the existentials, but the ones\n-    /// here are suggested as the preferred choice heuristically. These should\n-    /// be used for inference fallback only.\n-    Suggested(SolutionVariables),\n-\n-    /// There's no useful information to feed back to type inference\n-    Unknown,\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub enum FnTrait {\n     FnOnce,"}, {"sha": "5e4f97a46f8f47943ea785e8a9e4a73bb5cccd3d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -10,11 +10,9 @@ use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n use crate::{\n-    db::HirDatabase,\n-    primitive::UintTy,\n-    traits::{Canonical, DomainGoal},\n-    AliasTy, CallableDefId, FnPointer, GenericArg, InEnvironment, OpaqueTy, ProjectionTy,\n-    QuantifiedWhereClause, Scalar, Substitution, TraitRef, Ty, TypeWalk, WhereClause,\n+    db::HirDatabase, primitive::UintTy, AliasTy, CallableDefId, Canonical, DomainGoal, FnPointer,\n+    GenericArg, InEnvironment, OpaqueTy, ProjectionTy, QuantifiedWhereClause, Scalar, Substitution,\n+    TraitRef, Ty, TypeWalk, WhereClause,\n };\n \n use super::interner::*;"}, {"sha": "53662fcdcc7faabda1e18726a06147e2c7fb5740", "filename": "crates/hir_ty/src/types.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftypes.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -11,7 +11,7 @@ use hir_def::LifetimeParamId;\n use smallvec::SmallVec;\n \n use crate::{\n-    AliasEq, AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n+    AssocTypeId, CanonicalVarKinds, ChalkTraitId, ClosureId, FnDefId, FnSig, ForeignDefId,\n     InferenceVar, Interner, OpaqueTyId, PlaceholderIndex,\n };\n \n@@ -352,3 +352,65 @@ pub struct Canonical<T> {\n     pub value: T,\n     pub binders: CanonicalVarKinds,\n }\n+\n+/// Something (usually a goal), along with an environment.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct InEnvironment<T> {\n+    pub environment: chalk_ir::Environment<Interner>,\n+    pub goal: T,\n+}\n+\n+impl<T> InEnvironment<T> {\n+    pub fn new(environment: chalk_ir::Environment<Interner>, value: T) -> InEnvironment<T> {\n+        InEnvironment { environment, goal: value }\n+    }\n+}\n+\n+/// Something that needs to be proven (by Chalk) during type checking, e.g. that\n+/// a certain type implements a certain trait. Proving the Obligation might\n+/// result in additional information about inference variables.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum DomainGoal {\n+    Holds(WhereClause),\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct AliasEq {\n+    pub alias: AliasTy,\n+    pub ty: Ty,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct SolutionVariables(pub Canonical<Substitution>);\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+/// A (possible) solution for a proposed goal.\n+pub enum Solution {\n+    /// The goal indeed holds, and there is a unique value for all existential\n+    /// variables.\n+    Unique(SolutionVariables),\n+\n+    /// The goal may be provable in multiple ways, but regardless we may have some guidance\n+    /// for type inference. In this case, we don't return any lifetime\n+    /// constraints, since we have not \"committed\" to any particular solution\n+    /// yet.\n+    Ambig(Guidance),\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+/// When a goal holds ambiguously (e.g., because there are multiple possible\n+/// solutions), we issue a set of *guidance* back to type inference.\n+pub enum Guidance {\n+    /// The existential variables *must* have the given values if the goal is\n+    /// ever to hold, but that alone isn't enough to guarantee the goal will\n+    /// actually hold.\n+    Definite(SolutionVariables),\n+\n+    /// There are multiple plausible values for the existentials, but the ones\n+    /// here are suggested as the preferred choice heuristically. These should\n+    /// be used for inference fallback only.\n+    Suggested(SolutionVariables),\n+\n+    /// There's no useful information to feed back to type inference\n+    Unknown,\n+}"}, {"sha": "bfb3f1041eeca276e8536264e6961698b78ab4b0", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/645a9c3a274109512839b79d8e86a805a39cd6e1/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=645a9c3a274109512839b79d8e86a805a39cd6e1", "patch": "@@ -6,8 +6,8 @@ use std::mem;\n use chalk_ir::DebruijnIndex;\n \n use crate::{\n-    utils::make_mut_slice, AliasTy, Binders, CallableSig, GenericArg, GenericArgData, Interner,\n-    OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind, WhereClause,\n+    utils::make_mut_slice, AliasEq, AliasTy, Binders, CallableSig, GenericArg, GenericArgData,\n+    Interner, OpaqueTy, ProjectionTy, Substitution, TraitRef, Ty, TyKind, WhereClause,\n };\n \n /// This allows walking structures that contain types to do something with those\n@@ -357,3 +357,25 @@ impl TypeWalk for CallableSig {\n         }\n     }\n }\n+\n+impl TypeWalk for AliasEq {\n+    fn walk(&self, f: &mut impl FnMut(&Ty)) {\n+        self.ty.walk(f);\n+        match &self.alias {\n+            AliasTy::Projection(projection_ty) => projection_ty.walk(f),\n+            AliasTy::Opaque(opaque) => opaque.walk(f),\n+        }\n+    }\n+\n+    fn walk_mut_binders(\n+        &mut self,\n+        f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n+        binders: DebruijnIndex,\n+    ) {\n+        self.ty.walk_mut_binders(f, binders);\n+        match &mut self.alias {\n+            AliasTy::Projection(projection_ty) => projection_ty.walk_mut_binders(f, binders),\n+            AliasTy::Opaque(opaque) => opaque.walk_mut_binders(f, binders),\n+        }\n+    }\n+}"}]}