{"sha": "88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YjMyMmM1ZmRjZGY1YjNkYzJiYjYzNWRkOTY5NmE1OGVjNDhlYTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T01:00:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T01:12:18Z"}, "message": "native: Remove UnsafeArc in favor of just Arc", "tree": {"sha": "fbf52d87c8b84dc407d459324414141c6f95ddb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf52d87c8b84dc407d459324414141c6f95ddb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "html_url": "https://github.com/rust-lang/rust/commit/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8a4d241a984fdc0b8a015dceca2a006f2b7146", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8a4d241a984fdc0b8a015dceca2a006f2b7146", "html_url": "https://github.com/rust-lang/rust/commit/4c8a4d241a984fdc0b8a015dceca2a006f2b7146"}], "stats": {"total": 73, "additions": 30, "deletions": 43}, "files": [{"sha": "5e357ec9cca0fac9478e280e1b8b999888c382cf", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -10,14 +10,14 @@\n \n //! Blocking posix-based file I/O\n \n+use alloc::arc::Arc;\n use libc::{c_int, c_void};\n use libc;\n use std::c_str::CString;\n use std::io::IoError;\n use std::io;\n use std::mem;\n use std::rt::rtio;\n-use std::sync::arc::UnsafeArc;\n \n use io::{IoResult, retry, keep_going};\n \n@@ -29,7 +29,7 @@ struct Inner {\n }\n \n pub struct FileDesc {\n-    inner: UnsafeArc<Inner>\n+    inner: Arc<Inner>\n }\n \n impl FileDesc {\n@@ -42,7 +42,7 @@ impl FileDesc {\n     /// Note that all I/O operations done on this object will be *blocking*, but\n     /// they do not require the runtime to be active.\n     pub fn new(fd: fd_t, close_on_drop: bool) -> FileDesc {\n-        FileDesc { inner: UnsafeArc::new(Inner {\n+        FileDesc { inner: Arc::new(Inner {\n             fd: fd,\n             close_on_drop: close_on_drop\n         }) }\n@@ -79,11 +79,7 @@ impl FileDesc {\n         }\n     }\n \n-    pub fn fd(&self) -> fd_t {\n-        // This unsafety is fine because we're just reading off the file\n-        // descriptor, no one is modifying this.\n-        unsafe { (*self.inner.get()).fd }\n-    }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n }\n \n impl io::Reader for FileDesc {"}, {"sha": "3cc6cc2f47c0b82be3441aa8460304da1672774f", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -10,17 +10,17 @@\n \n //! Blocking win32-based file I/O\n \n+use alloc::arc::Arc;\n+use libc::{c_int, c_void};\n+use libc;\n use std::c_str::CString;\n use std::io::IoError;\n use std::io;\n-use libc::{c_int, c_void};\n-use libc;\n use std::mem;\n use std::os::win32::{as_utf16_p, fill_utf16_buf_and_decode};\n use std::ptr;\n use std::rt::rtio;\n use std::str;\n-use std::sync::arc::UnsafeArc;\n use std::vec;\n \n use io::IoResult;\n@@ -33,7 +33,7 @@ struct Inner {\n }\n \n pub struct FileDesc {\n-    inner: UnsafeArc<Inner>\n+    inner: Arc<Inner>\n }\n \n impl FileDesc {\n@@ -46,7 +46,7 @@ impl FileDesc {\n     /// Note that all I/O operations done on this object will be *blocking*, but\n     /// they do not require the runtime to be active.\n     pub fn new(fd: fd_t, close_on_drop: bool) -> FileDesc {\n-        FileDesc { inner: UnsafeArc::new(Inner {\n+        FileDesc { inner: Arc::new(Inner {\n             fd: fd,\n             close_on_drop: close_on_drop\n         }) }\n@@ -85,11 +85,7 @@ impl FileDesc {\n         Ok(())\n     }\n \n-    pub fn fd(&self) -> fd_t {\n-        // This unsafety is fine because we're just reading off the file\n-        // descriptor, no one is modifying this.\n-        unsafe { (*self.inner.get()).fd }\n-    }\n+    pub fn fd(&self) -> fd_t { self.inner.fd }\n \n     pub fn handle(&self) -> libc::HANDLE {\n         unsafe { libc::get_osfhandle(self.fd()) as libc::HANDLE }"}, {"sha": "a67d0439dbf40c661a4f96206e2724f45a9aeb22", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use alloc::arc::Arc;\n use libc;\n use std::io::net::ip;\n use std::io;\n use std::mem;\n use std::rt::rtio;\n-use std::sync::arc::UnsafeArc;\n use std::unstable::mutex;\n \n use super::{IoResult, retry, keep_going};\n@@ -235,7 +235,7 @@ pub fn init() {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct TcpStream {\n-    inner: UnsafeArc<Inner>,\n+    inner: Arc<Inner>,\n     read_deadline: u64,\n     write_deadline: u64,\n }\n@@ -282,16 +282,13 @@ impl TcpStream {\n \n     fn new(inner: Inner) -> TcpStream {\n         TcpStream {\n-            inner: UnsafeArc::new(inner),\n+            inner: Arc::new(inner),\n             read_deadline: 0,\n             write_deadline: 0,\n         }\n     }\n \n-    pub fn fd(&self) -> sock_t {\n-        // This unsafety is fine because it's just a read-only arc\n-        unsafe { (*self.inner.get()).fd }\n-    }\n+    pub fn fd(&self) -> sock_t { self.inner.fd }\n \n     fn set_nodelay(&mut self, nodelay: bool) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_NODELAY,\n@@ -536,7 +533,7 @@ impl rtio::RtioTcpAcceptor for TcpAcceptor {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UdpSocket {\n-    inner: UnsafeArc<Inner>,\n+    inner: Arc<Inner>,\n     read_deadline: u64,\n     write_deadline: u64,\n }\n@@ -545,7 +542,7 @@ impl UdpSocket {\n     pub fn bind(addr: ip::SocketAddr) -> IoResult<UdpSocket> {\n         let fd = try!(socket(addr, libc::SOCK_DGRAM));\n         let ret = UdpSocket {\n-            inner: UnsafeArc::new(Inner::new(fd)),\n+            inner: Arc::new(Inner::new(fd)),\n             read_deadline: 0,\n             write_deadline: 0,\n         };\n@@ -560,10 +557,7 @@ impl UdpSocket {\n         }\n     }\n \n-    pub fn fd(&self) -> sock_t {\n-        // unsafety is fine because it's just a read-only arc\n-        unsafe { (*self.inner.get()).fd }\n-    }\n+    pub fn fd(&self) -> sock_t { self.inner.fd }\n \n     pub fn set_broadcast(&mut self, on: bool) -> IoResult<()> {\n         setsockopt(self.fd(), libc::SOL_SOCKET, libc::SO_BROADCAST,"}, {"sha": "8742fc58af13531fb92c4f0d461d7cf6daca7b0c", "filename": "src/libnative/io/pipe_unix.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fpipe_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fpipe_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_unix.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use alloc::arc::Arc;\n use libc;\n use std::c_str::CString;\n use std::intrinsics;\n use std::io;\n use std::mem;\n use std::rt::rtio;\n-use std::sync::arc::UnsafeArc;\n use std::unstable::mutex;\n \n use super::{IoResult, retry};\n@@ -108,7 +108,7 @@ fn bind(addr: &CString, ty: libc::c_int) -> IoResult<Inner> {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixStream {\n-    inner: UnsafeArc<Inner>,\n+    inner: Arc<Inner>,\n     read_deadline: u64,\n     write_deadline: u64,\n }\n@@ -117,19 +117,19 @@ impl UnixStream {\n     pub fn connect(addr: &CString,\n                    timeout: Option<u64>) -> IoResult<UnixStream> {\n         connect(addr, libc::SOCK_STREAM, timeout).map(|inner| {\n-            UnixStream::new(UnsafeArc::new(inner))\n+            UnixStream::new(Arc::new(inner))\n         })\n     }\n \n-    fn new(inner: UnsafeArc<Inner>) -> UnixStream {\n+    fn new(inner: Arc<Inner>) -> UnixStream {\n         UnixStream {\n             inner: inner,\n             read_deadline: 0,\n             write_deadline: 0,\n         }\n     }\n \n-    fn fd(&self) -> fd_t { unsafe { (*self.inner.get()).fd } }\n+    fn fd(&self) -> fd_t { self.inner.fd }\n \n     #[cfg(target_os = \"linux\")]\n     fn lock_nonblocking(&self) {}\n@@ -138,7 +138,7 @@ impl UnixStream {\n     fn lock_nonblocking<'a>(&'a self) -> net::Guard<'a> {\n         let ret = net::Guard {\n             fd: self.fd(),\n-            guard: unsafe { (*self.inner.get()).lock.lock() },\n+            guard: self.inner.lock.lock(),\n         };\n         assert!(util::set_nonblocking(self.fd(), true).is_ok());\n         ret\n@@ -254,7 +254,7 @@ impl UnixAcceptor {\n                          &mut size as *mut libc::socklen_t) as libc::c_int\n         }) {\n             -1 => Err(super::last_error()),\n-            fd => Ok(UnixStream::new(UnsafeArc::new(Inner::new(fd))))\n+            fd => Ok(UnixStream::new(Arc::new(Inner::new(fd))))\n         }\n     }\n }"}, {"sha": "c90c3824bbaa3919dde3b9d127b69480e6c889d8", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -84,6 +84,7 @@\n //! the test suite passing (the suite is in libstd), and that's good enough for\n //! me!\n \n+use alloc::arc::Arc;\n use libc;\n use std::c_str::CString;\n use std::intrinsics;\n@@ -92,7 +93,6 @@ use std::os::win32::as_utf16_p;\n use std::os;\n use std::ptr;\n use std::rt::rtio;\n-use std::sync::arc::UnsafeArc;\n use std::sync::atomics;\n use std::unstable::mutex;\n \n@@ -195,7 +195,7 @@ pub fn await(handle: libc::HANDLE, deadline: u64,\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct UnixStream {\n-    inner: UnsafeArc<Inner>,\n+    inner: Arc<Inner>,\n     write: Option<Event>,\n     read: Option<Event>,\n     read_deadline: u64,\n@@ -273,7 +273,7 @@ impl UnixStream {\n                             Err(super::last_error())\n                         } else {\n                             Ok(UnixStream {\n-                                inner: UnsafeArc::new(inner),\n+                                inner: Arc::new(inner),\n                                 read: None,\n                                 write: None,\n                                 read_deadline: 0,\n@@ -317,7 +317,7 @@ impl UnixStream {\n         })\n     }\n \n-    fn handle(&self) -> libc::HANDLE { unsafe { (*self.inner.get()).handle } }\n+    fn handle(&self) -> libc::HANDLE { self.inner.handle }\n \n     fn read_closed(&self) -> bool {\n         unsafe { (*self.inner.get()).read_closed.load(atomics::SeqCst) }\n@@ -683,7 +683,7 @@ impl UnixAcceptor {\n \n         // Transfer ownership of our handle into this stream\n         Ok(UnixStream {\n-            inner: UnsafeArc::new(Inner::new(handle)),\n+            inner: Arc::new(Inner::new(handle)),\n             read: None,\n             write: None,\n             read_deadline: 0,"}, {"sha": "634bf1dcedb07a2069143de8ac7977edc01fd48e", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=88b322c5fdcdf5b3dc2bb635dd9696a58ec48ea2", "patch": "@@ -57,6 +57,7 @@\n //    answer is that you don't need them)\n #![feature(macro_rules)]\n \n+extern crate alloc;\n extern crate libc;\n \n use std::os;"}]}