{"sha": "689f19722fabd9aab61e826e00140a7fe7084afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWYxOTcyMmZhYmQ5YWFiNjFlODI2ZTAwMTQwYTdmZTcwODRhZmE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-02T01:59:35Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-12T00:31:43Z"}, "message": "rand: deprecate `rng`.\n\nThis should be called far less than it is because it does expensive OS\ninteractions and seeding of the internal RNG, `task_rng` amortises this\ncost. The main problem is the name is so short and suggestive.\n\nThe direct equivalent is `StdRng::new`, which does precisely the same\nthing.\n\nThe deprecation will make migrating away from the function easier.", "tree": {"sha": "f1b124415b95601fb001fe922b4e98b62f893c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1b124415b95601fb001fe922b4e98b62f893c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689f19722fabd9aab61e826e00140a7fe7084afa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689f19722fabd9aab61e826e00140a7fe7084afa", "html_url": "https://github.com/rust-lang/rust/commit/689f19722fabd9aab61e826e00140a7fe7084afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689f19722fabd9aab61e826e00140a7fe7084afa/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "198caa87cd870f8fd52bf0bd5fe471cf439c12f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/198caa87cd870f8fd52bf0bd5fe471cf439c12f0", "html_url": "https://github.com/rust-lang/rust/commit/198caa87cd870f8fd52bf0bd5fe471cf439c12f0"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "905541604e03d70202dadda55746b04c92119727", "filename": "src/libextra/tempfile.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibextra%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibextra%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftempfile.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -12,8 +12,7 @@\n \n \n use std::os;\n-use rand::Rng;\n-use rand;\n+use rand::{task_rng, Rng};\n use std::io;\n use std::io::fs;\n \n@@ -35,7 +34,7 @@ impl TempDir {\n             return TempDir::new_in(&abs_tmpdir, suffix);\n         }\n \n-        let mut r = rand::rng();\n+        let mut r = task_rng();\n         for _ in range(0u, 1000) {\n             let p = tmpdir.join(r.gen_ascii_str(16) + suffix);\n             match fs::mkdir(&p, io::UserRWX) {"}, {"sha": "6bf5092bb2d515249ad3abe897e6cd90125b42c1", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -97,7 +97,7 @@ mod tests {\n \n     #[test]\n     fn test_flate_round_trip() {\n-        let mut r = rand::rng();\n+        let mut r = rand::task_rng();\n         let mut words = ~[];\n         for _ in range(0, 20) {\n             let range = r.gen_range(1u, 10);"}, {"sha": "87a18497b8afd77ee5e082e0f4b7d2593b46fe00", "filename": "src/librand/lib.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -50,7 +50,7 @@ randomness.\n ```rust\n use rand::Rng;\n \n-let mut rng = rand::rng();\n+let mut rng = rand::task_rng();\n if rng.gen() { // bool\n     println!(\"int: {}, uint: {}\", rng.gen::<int>(), rng.gen::<uint>())\n }\n@@ -396,6 +396,7 @@ pub trait SeedableRng<Seed>: Rng {\n /// operation. If one does not require high performance generation of\n /// random numbers, `task_rng` and/or `random` may be more\n /// appropriate.\n+#[deprecated=\"use `task_rng` or `StdRng::new`\"]\n pub fn rng() -> StdRng {\n     StdRng::new()\n }\n@@ -411,14 +412,26 @@ pub struct StdRng { priv rng: IsaacRng }\n pub struct StdRng { priv rng: Isaac64Rng }\n \n impl StdRng {\n-    /// Create a randomly seeded instance of `StdRng`. This reads\n-    /// randomness from the OS to seed the PRNG.\n+    /// Create a randomly seeded instance of `StdRng`.\n+    ///\n+    /// This is a very expensive operation as it has to read\n+    /// randomness from the operating system and use this in an\n+    /// expensive seeding operation. If one is only generating a small\n+    /// number of random numbers, or doesn't need the utmost speed for\n+    /// generating each number, `task_rng` and/or `random` may be more\n+    /// appropriate.\n     #[cfg(not(target_word_size=\"64\"))]\n     pub fn new() -> StdRng {\n         StdRng { rng: IsaacRng::new() }\n     }\n-    /// Create a randomly seeded instance of `StdRng`. This reads\n-    /// randomness from the OS to seed the PRNG.\n+    /// Create a randomly seeded instance of `StdRng`.\n+    ///\n+    /// This is a very expensive operation as it has to read\n+    /// randomness from the operating system and use this in an\n+    /// expensive seeding operation. If one is only generating a small\n+    /// number of random numbers, or doesn't need the utmost speed for\n+    /// generating each number, `task_rng` and/or `random` may be more\n+    /// appropriate.\n     #[cfg(target_word_size=\"64\")]\n     pub fn new() -> StdRng {\n         StdRng { rng: Isaac64Rng::new() }"}, {"sha": "e529daaa500d6242923fb3b577af32f6332d5440", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -1409,7 +1409,7 @@ mod tests {\n     }\n \n     fn make_rand_name() -> ~str {\n-        let mut rng = rand::rng();\n+        let mut rng = rand::task_rng();\n         let n = ~\"TEST\" + rng.gen_ascii_str(10u);\n         assert!(getenv(n).is_none());\n         n"}, {"sha": "cd52ff4b0ac71ac328ffadc0a10a140c489591f8", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -670,7 +670,7 @@ pub fn fresh_name(src: &ast::Ident) -> Name {\n     // following: debug version. Could work in final except that it's incompatible with\n     // good error messages and uses of struct names in ambiguous could-be-binding\n     // locations. Also definitely destroys the guarantee given above about ptr_eq.\n-    /*let num = rand::rng().gen_uint_range(0,0xffff);\n+    /*let num = rand::task_rng().gen_uint_range(0,0xffff);\n     gensym(format!(\"{}_{}\",ident_to_str(src),num))*/\n }\n "}, {"sha": "aa17cd468094809a9a658e82220abf5890e9083a", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -780,7 +780,7 @@ mod test {\n \n     #[test]\n     fn test_rand_rand() {\n-        let mut rng = rand::rng();\n+        let mut rng = rand::task_rng();\n         let u: ~Uuid = rand::Rand::rand(&mut rng);\n         let ub = u.as_bytes();\n "}, {"sha": "120caa53293a16701fad4e1c21026e310abf7204", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -83,7 +83,7 @@ fn read_line() {\n }\n \n fn vec_plus() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -99,7 +99,7 @@ fn vec_plus() {\n }\n \n fn vec_append() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     let mut i = 0;\n@@ -116,7 +116,7 @@ fn vec_append() {\n }\n \n fn vec_push_all() {\n-    let mut r = rand::rng();\n+    let mut r = rand::task_rng();\n \n     let mut v = ~[];\n     for i in range(0u, 1500) {"}, {"sha": "c09b90ba6fb8b13a72d138b85ed69bd3e1c0a623", "filename": "src/test/run-pass/morestack6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689f19722fabd9aab61e826e00140a7fe7084afa/src%2Ftest%2Frun-pass%2Fmorestack6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack6.rs?ref=689f19722fabd9aab61e826e00140a7fe7084afa", "patch": "@@ -67,7 +67,7 @@ pub fn main() {\n         calllink08,\n         calllink10\n     ];\n-    let mut rng = rand::rng();\n+    let mut rng = rand::task_rng();\n     for f in fns.iter() {\n         let f = *f;\n         let sz = rng.gen::<u32>() % 256u32 + 256u32;"}]}