{"sha": "f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MTY1YWY5YTdjZGY5ZTQzZGIwYTk1ZTcxN2E0N2ZhMmJkZjZjMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T19:33:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-20T19:33:26Z"}, "message": "make Name::new private", "tree": {"sha": "02b8a64f9e407476b212cd685615328e0dd6b896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b8a64f9e407476b212cd685615328e0dd6b896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "html_url": "https://github.com/rust-lang/rust/commit/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee", "html_url": "https://github.com/rust-lang/rust/commit/90ff3ba64133c1bcae9d49709c4dd704ae59b1ee"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "486314cc5249c1a3a960c9df3e713476981bad6c", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "patch": "@@ -723,18 +723,15 @@ impl ExprCollector {\n \n                 let lit = match child.flavor() {\n                     LiteralFlavor::IntNumber { suffix } => {\n-                        let known_name =\n-                            suffix.map(Name::new).and_then(|name| UncertainIntTy::from_name(&name));\n+                        let known_name = suffix.and_then(|it| UncertainIntTy::from_suffix(&it));\n \n                         Literal::Int(\n                             Default::default(),\n                             known_name.unwrap_or(UncertainIntTy::Unknown),\n                         )\n                     }\n                     LiteralFlavor::FloatNumber { suffix } => {\n-                        let known_name = suffix\n-                            .map(Name::new)\n-                            .and_then(|name| UncertainFloatTy::from_name(&name));\n+                        let known_name = suffix.and_then(|it| UncertainFloatTy::from_suffix(&it));\n \n                         Literal::Float(\n                             Default::default(),"}, {"sha": "677d18efcccc73dec0b6900b25e1cbeb5ab26de1", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "patch": "@@ -23,7 +23,10 @@ impl fmt::Debug for Name {\n }\n \n impl Name {\n-    pub(crate) fn new(text: SmolStr) -> Name {\n+    /// Note: this is private to make creating name from random string hard.\n+    /// Hopefully, this should allow us to integrate hygiene cleaner in the\n+    /// future, and to switch to interned representation of names.\n+    fn new(text: SmolStr) -> Name {\n         Name { text }\n     }\n "}, {"sha": "389a2fc68a5a046226a7db7b6c79eedebf9be64e", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "patch": "@@ -63,9 +63,9 @@ impl Ty {\n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n         if let Some(name) = path.as_ident() {\n             // TODO handle primitive type names in resolver as well?\n-            if let Some(int_ty) = primitive::UncertainIntTy::from_name(name) {\n+            if let Some(int_ty) = primitive::UncertainIntTy::from_type_name(name) {\n                 return Ty::Int(int_ty);\n-            } else if let Some(float_ty) = primitive::UncertainFloatTy::from_name(name) {\n+            } else if let Some(float_ty) = primitive::UncertainFloatTy::from_type_name(name) {\n                 return Ty::Float(float_ty);\n             } else if let Some(known) = name.as_known_name() {\n                 match known {"}, {"sha": "421f7e980d4954d4fbb854a8d2a7d1cfd965a1e9", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 54, "deletions": 12, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=f5165af9a7cdf9e43db0a95e717a47fa2bdf6c25", "patch": "@@ -10,10 +10,20 @@ pub enum UncertainIntTy {\n }\n \n impl UncertainIntTy {\n-    pub fn from_name(name: &Name) -> Option<UncertainIntTy> {\n-        if let Some(ty) = IntTy::from_name(name) {\n+    pub(crate) fn from_type_name(name: &Name) -> Option<UncertainIntTy> {\n+        if let Some(ty) = IntTy::from_type_name(name) {\n             Some(UncertainIntTy::Signed(ty))\n-        } else if let Some(ty) = UintTy::from_name(name) {\n+        } else if let Some(ty) = UintTy::from_type_name(name) {\n+            Some(UncertainIntTy::Unsigned(ty))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    pub(crate) fn from_suffix(suffix: &str) -> Option<UncertainIntTy> {\n+        if let Some(ty) = IntTy::from_suffix(suffix) {\n+            Some(UncertainIntTy::Signed(ty))\n+        } else if let Some(ty) = UintTy::from_suffix(suffix) {\n             Some(UncertainIntTy::Unsigned(ty))\n         } else {\n             None\n@@ -38,12 +48,12 @@ pub enum UncertainFloatTy {\n }\n \n impl UncertainFloatTy {\n-    pub fn from_name(name: &Name) -> Option<UncertainFloatTy> {\n-        if let Some(ty) = FloatTy::from_name(name) {\n-            Some(UncertainFloatTy::Known(ty))\n-        } else {\n-            None\n-        }\n+    pub(crate) fn from_type_name(name: &Name) -> Option<UncertainFloatTy> {\n+        FloatTy::from_type_name(name).map(UncertainFloatTy::Known)\n+    }\n+\n+    pub(crate) fn from_suffix(suffix: &str) -> Option<UncertainFloatTy> {\n+        FloatTy::from_suffix(suffix).map(UncertainFloatTy::Known)\n     }\n }\n \n@@ -87,7 +97,7 @@ impl fmt::Display for IntTy {\n }\n \n impl IntTy {\n-    pub fn from_name(name: &Name) -> Option<IntTy> {\n+    fn from_type_name(name: &Name) -> Option<IntTy> {\n         match name.as_known_name()? {\n             KnownName::Isize => Some(IntTy::Isize),\n             KnownName::I8 => Some(IntTy::I8),\n@@ -98,6 +108,18 @@ impl IntTy {\n             _ => None,\n         }\n     }\n+\n+    fn from_suffix(suffix: &str) -> Option<IntTy> {\n+        match suffix {\n+            \"isize\" => Some(IntTy::Isize),\n+            \"i8\" => Some(IntTy::I8),\n+            \"i16\" => Some(IntTy::I16),\n+            \"i32\" => Some(IntTy::I32),\n+            \"i64\" => Some(IntTy::I64),\n+            \"i128\" => Some(IntTy::I128),\n+            _ => None,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n@@ -125,7 +147,7 @@ impl fmt::Display for UintTy {\n }\n \n impl UintTy {\n-    pub fn from_name(name: &Name) -> Option<UintTy> {\n+    fn from_type_name(name: &Name) -> Option<UintTy> {\n         match name.as_known_name()? {\n             KnownName::Usize => Some(UintTy::Usize),\n             KnownName::U8 => Some(UintTy::U8),\n@@ -136,6 +158,18 @@ impl UintTy {\n             _ => None,\n         }\n     }\n+\n+    fn from_suffix(suffix: &str) -> Option<UintTy> {\n+        match suffix {\n+            \"usize\" => Some(UintTy::Usize),\n+            \"u8\" => Some(UintTy::U8),\n+            \"u16\" => Some(UintTy::U16),\n+            \"u32\" => Some(UintTy::U32),\n+            \"u64\" => Some(UintTy::U64),\n+            \"u128\" => Some(UintTy::U128),\n+            _ => None,\n+        }\n+    }\n }\n \n impl fmt::Debug for UintTy {\n@@ -170,11 +204,19 @@ impl FloatTy {\n         }\n     }\n \n-    pub fn from_name(name: &Name) -> Option<FloatTy> {\n+    fn from_type_name(name: &Name) -> Option<FloatTy> {\n         match name.as_known_name()? {\n             KnownName::F32 => Some(FloatTy::F32),\n             KnownName::F64 => Some(FloatTy::F64),\n             _ => None,\n         }\n     }\n+\n+    fn from_suffix(suffix: &str) -> Option<FloatTy> {\n+        match suffix {\n+            \"f32\" => Some(FloatTy::F32),\n+            \"f64\" => Some(FloatTy::F64),\n+            _ => None,\n+        }\n+    }\n }"}]}