{"sha": "6197e4d209d2604bdf338bcc6c597af929fca436", "node_id": "C_kwDOAAsO6NoAKDYxOTdlNGQyMDlkMjYwNGJkZjMzOGJjYzZjNTk3YWY5MjlmY2E0MzY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T15:52:23Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-01T15:52:23Z"}, "message": "Don't `use RibKind::*`", "tree": {"sha": "87a058051e983acba3b40c9b74ac59ca8f250eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87a058051e983acba3b40c9b74ac59ca8f250eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6197e4d209d2604bdf338bcc6c597af929fca436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6197e4d209d2604bdf338bcc6c597af929fca436", "html_url": "https://github.com/rust-lang/rust/commit/6197e4d209d2604bdf338bcc6c597af929fca436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6197e4d209d2604bdf338bcc6c597af929fca436/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b87ed9d0f18166a26aadb5289bac004e058b90f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b87ed9d0f18166a26aadb5289bac004e058b90f", "html_url": "https://github.com/rust-lang/rust/commit/4b87ed9d0f18166a26aadb5289bac004e058b90f"}], "stats": {"total": 213, "additions": 108, "deletions": 105}, "files": [{"sha": "76e71a80657ac938c233afc82d8151f793a37cd5", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/6197e4d209d2604bdf338bcc6c597af929fca436/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6197e4d209d2604bdf338bcc6c597af929fca436/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=6197e4d209d2604bdf338bcc6c597af929fca436", "patch": "@@ -24,7 +24,6 @@ use crate::{ResolutionError, Resolver, Scope, ScopeSet, Segment, ToNameBinding,\n \n use Determinacy::*;\n use Namespace::*;\n-use RibKind::*;\n \n type Visibility = ty::Visibility<LocalDefId>;\n \n@@ -324,8 +323,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n \n             module = match ribs[i].kind {\n-                ModuleRibKind(module) => module,\n-                MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n+                RibKind::ModuleRibKind(module) => module,\n+                RibKind::MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {\n                     // If an invocation of this macro created `ident`, give up on `ident`\n                     // and switch to `ident`'s source from the macro definition.\n                     ident.span.remove_mark();\n@@ -1084,7 +1083,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let ribs = &all_ribs[rib_index + 1..];\n \n         // An invalid forward use of a generic parameter from a previous default.\n-        if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n+        if let RibKind::ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n             if let Some(span) = finalize {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInGenericParamDefault\n@@ -1104,14 +1103,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::NormalRibKind\n+                        | RibKind::ClosureOrAsyncRibKind\n+                        | RibKind::ModuleRibKind(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind(_) | AssocItemRibKind => {\n+                        RibKind::ItemRibKind(_) | RibKind::AssocItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -1123,7 +1122,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                 res_err = Some((span, CannotCaptureDynamicEnvironmentInFnItem));\n                             }\n                         }\n-                        ConstantItemRibKind(_, item) => {\n+                        RibKind::ConstantItemRibKind(_, item) => {\n                             // Still doesn't deal with upvars\n                             if let Some(span) = finalize {\n                                 let (span, resolution_error) =\n@@ -1152,13 +1151,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             }\n                             return Res::Err;\n                         }\n-                        ConstParamTyRibKind => {\n+                        RibKind::ConstParamTyRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n                             }\n                             return Res::Err;\n                         }\n-                        InlineAsmSymRibKind => {\n+                        RibKind::InlineAsmSymRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error(span, InvalidAsmSym);\n                             }\n@@ -1174,18 +1173,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Res::Def(DefKind::TyParam, _) | Res::SelfTyParam { .. } | Res::SelfTyAlias { .. } => {\n                 for rib in ribs {\n                     let has_generic_params: HasGenericParams = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => {\n+                        RibKind::NormalRibKind\n+                        | RibKind::ClosureOrAsyncRibKind\n+                        | RibKind::ModuleRibKind(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSymRibKind\n+                        | RibKind::AssocItemRibKind\n+                        | RibKind::ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n \n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::ConstantItemRibKind(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1226,8 +1225,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         }\n \n                         // This was an attempt to use a type parameter outside its scope.\n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::ItemRibKind(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTyRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,\n@@ -1253,15 +1252,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Res::Def(DefKind::ConstParam, _) => {\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n-                        NormalRibKind\n-                        | ClosureOrAsyncRibKind\n-                        | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | InlineAsmSymRibKind\n-                        | AssocItemRibKind\n-                        | ForwardGenericParamBanRibKind => continue,\n-\n-                        ConstantItemRibKind(trivial, _) => {\n+                        RibKind::NormalRibKind\n+                        | RibKind::ClosureOrAsyncRibKind\n+                        | RibKind::ModuleRibKind(..)\n+                        | RibKind::MacroDefinition(..)\n+                        | RibKind::InlineAsmSymRibKind\n+                        | RibKind::AssocItemRibKind\n+                        | RibKind::ForwardGenericParamBanRibKind => continue,\n+\n+                        RibKind::ConstantItemRibKind(trivial, _) => {\n                             let features = self.tcx.sess.features_untracked();\n                             // HACK(min_const_generics): We currently only allow `N` or `{ N }`.\n                             if !(trivial == ConstantHasGenerics::Yes\n@@ -1284,8 +1283,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             continue;\n                         }\n \n-                        ItemRibKind(has_generic_params) => has_generic_params,\n-                        ConstParamTyRibKind => {\n+                        RibKind::ItemRibKind(has_generic_params) => has_generic_params,\n+                        RibKind::ConstParamTyRibKind => {\n                             if let Some(span) = finalize {\n                                 self.report_error(\n                                     span,"}, {"sha": "89472994d4389cd4732376ee55d9fc1c937eabfb", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 75, "deletions": 71, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/6197e4d209d2604bdf338bcc6c597af929fca436/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6197e4d209d2604bdf338bcc6c597af929fca436/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=6197e4d209d2604bdf338bcc6c597af929fca436", "patch": "@@ -6,8 +6,6 @@\n //! If you wonder why there's no `early.rs`, that's because it's split into three files -\n //! `build_reduced_graph.rs`, `macros.rs` and `imports.rs`.\n \n-use RibKind::*;\n-\n use crate::{path_names_to_string, rustdoc, BindingError, Finalize, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBinding, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n@@ -178,30 +176,32 @@ impl RibKind<'_> {\n     /// variables.\n     pub(crate) fn contains_params(&self) -> bool {\n         match self {\n-            NormalRibKind\n-            | ClosureOrAsyncRibKind\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(_)\n-            | MacroDefinition(_)\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => false,\n-            AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n+            RibKind::NormalRibKind\n+            | RibKind::ClosureOrAsyncRibKind\n+            | RibKind::ConstantItemRibKind(..)\n+            | RibKind::ModuleRibKind(_)\n+            | RibKind::MacroDefinition(_)\n+            | RibKind::ConstParamTyRibKind\n+            | RibKind::InlineAsmSymRibKind => false,\n+            RibKind::AssocItemRibKind\n+            | RibKind::ItemRibKind(_)\n+            | RibKind::ForwardGenericParamBanRibKind => true,\n         }\n     }\n \n     /// This rib forbids referring to labels defined in upwards ribs.\n     fn is_label_barrier(self) -> bool {\n         match self {\n-            NormalRibKind | MacroDefinition(..) => false,\n-\n-            AssocItemRibKind\n-            | ClosureOrAsyncRibKind\n-            | ItemRibKind(..)\n-            | ConstantItemRibKind(..)\n-            | ModuleRibKind(..)\n-            | ForwardGenericParamBanRibKind\n-            | ConstParamTyRibKind\n-            | InlineAsmSymRibKind => true,\n+            RibKind::NormalRibKind | RibKind::MacroDefinition(..) => false,\n+\n+            RibKind::AssocItemRibKind\n+            | RibKind::ClosureOrAsyncRibKind\n+            | RibKind::ItemRibKind(..)\n+            | RibKind::ConstantItemRibKind(..)\n+            | RibKind::ModuleRibKind(..)\n+            | RibKind::ForwardGenericParamBanRibKind\n+            | RibKind::ConstParamTyRibKind\n+            | RibKind::InlineAsmSymRibKind => true,\n         }\n     }\n }\n@@ -705,7 +705,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                     let span = ty.span.shrink_to_lo().to(path.span.shrink_to_lo());\n                     self.with_generic_param_rib(\n                         &[],\n-                        NormalRibKind,\n+                        RibKind::NormalRibKind,\n                         LifetimeRibKind::Generics {\n                             binder: ty.id,\n                             kind: LifetimeBinderKind::PolyTrait,\n@@ -743,7 +743,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = ty.span.shrink_to_lo().to(bare_fn.decl_span.shrink_to_lo());\n                 self.with_generic_param_rib(\n                     &bare_fn.generic_params,\n-                    NormalRibKind,\n+                    RibKind::NormalRibKind,\n                     LifetimeRibKind::Generics {\n                         binder: ty.id,\n                         kind: LifetimeBinderKind::BareFnType,\n@@ -783,7 +783,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         let span = tref.span.shrink_to_lo().to(tref.trait_ref.path.span.shrink_to_lo());\n         self.with_generic_param_rib(\n             &tref.bound_generic_params,\n-            NormalRibKind,\n+            RibKind::NormalRibKind,\n             LifetimeRibKind::Generics {\n                 binder: tref.trait_ref.ref_id,\n                 kind: LifetimeBinderKind::PolyTrait,\n@@ -807,7 +807,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -819,7 +819,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n             ForeignItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: foreign_item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -873,9 +873,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n         debug!(\"(resolving function) entering function\");\n \n         // Create a value rib for the function.\n-        self.with_rib(ValueNS, ClosureOrAsyncRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::ClosureOrAsyncRibKind, |this| {\n             // Create a label rib for the function.\n-            this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+            this.with_label_rib(RibKind::ClosureOrAsyncRibKind, |this| {\n                 match fn_kind {\n                     FnKind::Fn(_, _, sig, _, generics, body) => {\n                         this.visit_generics(generics);\n@@ -1132,7 +1132,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                 let span = predicate_span.shrink_to_lo().to(bounded_ty.span.shrink_to_lo());\n                 this.with_generic_param_rib(\n                     &bound_generic_params,\n-                    NormalRibKind,\n+                    RibKind::NormalRibKind,\n                     LifetimeRibKind::Generics {\n                         binder: bounded_ty.id,\n                         kind: LifetimeBinderKind::WhereBound,\n@@ -1178,9 +1178,9 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n \n     fn visit_inline_asm_sym(&mut self, sym: &'ast InlineAsmSym) {\n         // This is similar to the code for AnonConst.\n-        self.with_rib(ValueNS, InlineAsmSymRibKind, |this| {\n-            this.with_rib(TypeNS, InlineAsmSymRibKind, |this| {\n-                this.with_label_rib(InlineAsmSymRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::InlineAsmSymRibKind, |this| {\n+            this.with_rib(TypeNS, RibKind::InlineAsmSymRibKind, |this| {\n+                this.with_label_rib(RibKind::InlineAsmSymRibKind, |this| {\n                     this.smart_resolve_path(sym.id, &sym.qself, &sym.path, PathSource::Expr(None));\n                     visit::walk_inline_asm_sym(this, sym);\n                 });\n@@ -1205,7 +1205,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n         let parent_scope = ParentScope::module(graph_root, resolver);\n-        let start_rib_kind = ModuleRibKind(graph_root);\n+        let start_rib_kind = RibKind::ModuleRibKind(graph_root);\n         LateResolutionVisitor {\n             r: resolver,\n             parent_scope,\n@@ -1309,8 +1309,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         if let Some(module) = self.r.get_module(self.r.local_def_id(id).to_def_id()) {\n             // Move down in the graph.\n             let orig_module = replace(&mut self.parent_scope.module, module);\n-            self.with_rib(ValueNS, ModuleRibKind(module), |this| {\n-                this.with_rib(TypeNS, ModuleRibKind(module), |this| {\n+            self.with_rib(ValueNS, RibKind::ModuleRibKind(module), |this| {\n+                this.with_rib(TypeNS, RibKind::ModuleRibKind(module), |this| {\n                     let ret = f(this);\n                     this.parent_scope.module = orig_module;\n                     ret\n@@ -1327,8 +1327,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n-        let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n+        let mut forward_ty_ban_rib = Rib::new(RibKind::ForwardGenericParamBanRibKind);\n+        let mut forward_const_ban_rib = Rib::new(RibKind::ForwardGenericParamBanRibKind);\n         for param in params.iter() {\n             match param.kind {\n                 GenericParamKind::Type { .. } => {\n@@ -1389,8 +1389,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                         // Const parameters can't have param bounds.\n                         assert!(param.bounds.is_empty());\n \n-                        this.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n-                        this.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n+                        this.ribs[TypeNS].push(Rib::new(RibKind::ConstParamTyRibKind));\n+                        this.ribs[ValueNS].push(Rib::new(RibKind::ConstParamTyRibKind));\n                         this.with_lifetime_rib(LifetimeRibKind::ConstGeneric, |this| {\n                             this.visit_ty(ty)\n                         });\n@@ -2112,7 +2112,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         for i in (0..self.label_ribs.len()).rev() {\n             let rib = &self.label_ribs[i];\n \n-            if let MacroDefinition(def) = rib.kind {\n+            if let RibKind::MacroDefinition(def) = rib.kind {\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n                 if def == self.r.macro_def(label.span.ctxt()) {\n@@ -2160,7 +2160,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(\n                 &generics.params,\n-                ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                 LifetimeRibKind::Generics {\n                     binder: item.id,\n                     kind: LifetimeBinderKind::Item,\n@@ -2241,7 +2241,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::TyAlias(box TyAlias { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2254,7 +2254,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             ItemKind::Fn(box Fn { ref generics, .. }) => {\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Function,\n@@ -2293,7 +2293,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2314,7 +2314,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    ItemRibKind(HasGenericParams::Yes(generics.span)),\n+                    RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         kind: LifetimeBinderKind::Item,\n@@ -2417,11 +2417,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut seen_lifetimes = FxHashSet::default();\n \n         // We also can't shadow bindings from the parent item\n-        if let AssocItemRibKind = kind {\n+        if let RibKind::AssocItemRibKind = kind {\n             let mut add_bindings_for_ns = |ns| {\n                 let parent_rib = self.ribs[ns]\n                     .iter()\n-                    .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n+                    .rfind(|r| matches!(r.kind, RibKind::ItemRibKind(_)))\n                     .expect(\"associated item outside of an item\");\n                 seen_bindings.extend(parent_rib.bindings.keys().map(|ident| (*ident, ident.span)));\n             };\n@@ -2510,8 +2510,10 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             };\n \n             let res = match kind {\n-                ItemRibKind(..) | AssocItemRibKind => Res::Def(def_kind, def_id.to_def_id()),\n-                NormalRibKind => {\n+                RibKind::ItemRibKind(..) | RibKind::AssocItemRibKind => {\n+                    Res::Def(def_kind, def_id.to_def_id())\n+                }\n+                RibKind::NormalRibKind => {\n                     if self.r.tcx.sess.features_untracked().non_lifetime_binders {\n                         Res::Def(def_kind, def_id.to_def_id())\n                     } else {\n@@ -2557,7 +2559,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_static_rib(&mut self, f: impl FnOnce(&mut Self)) {\n-        let kind = ItemRibKind(HasGenericParams::No);\n+        let kind = RibKind::ItemRibKind(HasGenericParams::No);\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n@@ -2577,15 +2579,15 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         item: Option<(Ident, ConstantItemKind)>,\n         f: impl FnOnce(&mut Self),\n     ) {\n-        self.with_rib(ValueNS, ConstantItemRibKind(may_use_generics, item), |this| {\n+        self.with_rib(ValueNS, RibKind::ConstantItemRibKind(may_use_generics, item), |this| {\n             this.with_rib(\n                 TypeNS,\n-                ConstantItemRibKind(\n+                RibKind::ConstantItemRibKind(\n                     may_use_generics.force_yes_if(is_repeat == IsRepeatExpr::Yes),\n                     item,\n                 ),\n                 |this| {\n-                    this.with_label_rib(ConstantItemRibKind(may_use_generics, item), f);\n+                    this.with_label_rib(RibKind::ConstantItemRibKind(may_use_generics, item), f);\n                 },\n             )\n         });\n@@ -2617,7 +2619,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             |this: &mut Self, generics: &Generics, kind, item: &'ast AssocItem| {\n                 this.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItemRibKind,\n                     LifetimeRibKind::Generics { binder: item.id, span: generics.span, kind },\n                     |this| visit::walk_assoc_item(this, item, AssocCtxt::Trait),\n                 );\n@@ -2698,7 +2700,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn with_self_rib_ns(&mut self, ns: Namespace, self_res: Res, f: impl FnOnce(&mut Self)) {\n-        let mut self_type_rib = Rib::new(NormalRibKind);\n+        let mut self_type_rib = Rib::new(RibKind::NormalRibKind);\n \n         // Plain insert (no renaming, since types are not currently hygienic)\n         self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);\n@@ -2724,7 +2726,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         // If applicable, create a rib for the type parameters.\n         self.with_generic_param_rib(\n             &generics.params,\n-            ItemRibKind(HasGenericParams::Yes(generics.span)),\n+            RibKind::ItemRibKind(HasGenericParams::Yes(generics.span)),\n             LifetimeRibKind::Generics {\n                 span: generics.span,\n                 binder: item_id,\n@@ -2838,7 +2840,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItemRibKind,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -2866,7 +2868,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 // We also need a new scope for the impl item type parameters.\n                 self.with_generic_param_rib(\n                     &generics.params,\n-                    AssocItemRibKind,\n+                    RibKind::AssocItemRibKind,\n                     LifetimeRibKind::Generics {\n                         binder: item.id,\n                         span: generics.span,\n@@ -3138,7 +3140,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn resolve_arm(&mut self, arm: &'ast Arm) {\n-        self.with_rib(ValueNS, NormalRibKind, |this| {\n+        self.with_rib(ValueNS, RibKind::NormalRibKind, |this| {\n             this.resolve_pattern_top(&arm.pat, PatternSource::Match);\n             walk_list!(this, visit_expr, &arm.guard);\n             this.visit_expr(&arm.body);\n@@ -3860,7 +3862,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 diagnostics::signal_label_shadowing(self.r.tcx.sess, orig_span, label.ident)\n             }\n \n-            self.with_label_rib(NormalRibKind, |this| {\n+            self.with_label_rib(RibKind::NormalRibKind, |this| {\n                 let ident = label.ident.normalize_to_macro_rules();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);\n                 f(this);\n@@ -3883,11 +3885,11 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n         let mut num_macro_definition_ribs = 0;\n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n-            self.ribs[ValueNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n-            self.ribs[TypeNS].push(Rib::new(ModuleRibKind(anonymous_module)));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::ModuleRibKind(anonymous_module)));\n+            self.ribs[TypeNS].push(Rib::new(RibKind::ModuleRibKind(anonymous_module)));\n             self.parent_scope.module = anonymous_module;\n         } else {\n-            self.ribs[ValueNS].push(Rib::new(NormalRibKind));\n+            self.ribs[ValueNS].push(Rib::new(RibKind::NormalRibKind));\n         }\n \n         let prev = self.diagnostic_metadata.current_block_could_be_bare_struct_literal.take();\n@@ -3904,8 +3906,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 && let ItemKind::MacroDef(..) = item.kind {\n                 num_macro_definition_ribs += 1;\n                 let res = self.r.local_def_id(item.id).to_def_id();\n-                self.ribs[ValueNS].push(Rib::new(MacroDefinition(res)));\n-                self.label_ribs.push(Rib::new(MacroDefinition(res)));\n+                self.ribs[ValueNS].push(Rib::new(RibKind::MacroDefinition(res)));\n+                self.label_ribs.push(Rib::new(RibKind::MacroDefinition(res)));\n             }\n \n             self.visit_stmt(stmt);\n@@ -3992,7 +3994,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n \n             ExprKind::If(ref cond, ref then, ref opt_else) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::NormalRibKind, |this| {\n                     let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                     this.visit_expr(cond);\n                     this.diagnostic_metadata.in_if_condition = old;\n@@ -4009,7 +4011,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::While(ref cond, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {\n-                    this.with_rib(ValueNS, NormalRibKind, |this| {\n+                    this.with_rib(ValueNS, RibKind::NormalRibKind, |this| {\n                         let old = this.diagnostic_metadata.in_if_condition.replace(cond);\n                         this.visit_expr(cond);\n                         this.diagnostic_metadata.in_if_condition = old;\n@@ -4020,7 +4022,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n \n             ExprKind::ForLoop(ref pat, ref iter_expr, ref block, label) => {\n                 self.visit_expr(iter_expr);\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::NormalRibKind, |this| {\n                     this.resolve_pattern_top(pat, PatternSource::For);\n                     this.resolve_labeled_block(label, expr.id, block);\n                 });\n@@ -4085,8 +4087,8 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                 ref body,\n                 ..\n             }) => {\n-                self.with_rib(ValueNS, NormalRibKind, |this| {\n-                    this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+                self.with_rib(ValueNS, RibKind::NormalRibKind, |this| {\n+                    this.with_label_rib(RibKind::ClosureOrAsyncRibKind, |this| {\n                         // Resolve arguments:\n                         this.resolve_params(&fn_decl.inputs);\n                         // No need to resolve return type --\n@@ -4110,7 +4112,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }) => {\n                 self.with_generic_param_rib(\n                     &generic_params,\n-                    NormalRibKind,\n+                    RibKind::NormalRibKind,\n                     LifetimeRibKind::Generics {\n                         binder: expr.id,\n                         kind: LifetimeBinderKind::Closure,\n@@ -4121,7 +4123,9 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             }\n             ExprKind::Closure(..) => visit::walk_expr(self, expr),\n             ExprKind::Async(..) => {\n-                self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n+                self.with_label_rib(RibKind::ClosureOrAsyncRibKind, |this| {\n+                    visit::walk_expr(this, expr)\n+                });\n             }\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);"}]}