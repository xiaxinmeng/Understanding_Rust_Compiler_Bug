{"sha": "1f65dc07705e9463ffed0395894f1e7d63cec515", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNjVkYzA3NzA1ZTk0NjNmZmVkMDM5NTg5NGYxZTdkNjNjZWM1MTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T21:55:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-30T21:55:00Z"}, "message": "Point at the return type span on type mismatch due to missing return\n\nDo not point at the entire block span on fn return type mismatches\ncaused by missing return.", "tree": {"sha": "380dcfaead68cc3d9bf0fa89ebc41b7aa2716a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380dcfaead68cc3d9bf0fa89ebc41b7aa2716a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f65dc07705e9463ffed0395894f1e7d63cec515", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f65dc07705e9463ffed0395894f1e7d63cec515", "html_url": "https://github.com/rust-lang/rust/commit/1f65dc07705e9463ffed0395894f1e7d63cec515", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f65dc07705e9463ffed0395894f1e7d63cec515/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59183180f718fc2212828e180f2f856f0db1bb9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/59183180f718fc2212828e180f2f856f0db1bb9c", "html_url": "https://github.com/rust-lang/rust/commit/59183180f718fc2212828e180f2f856f0db1bb9c"}], "stats": {"total": 219, "additions": 96, "deletions": 123}, "files": [{"sha": "5bcbeeefa50309ca72be9f10cfbf2201552693ef", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -667,6 +667,7 @@ impl<'hir> Map<'hir> {\n                 Node::Item(_) |\n                 Node::ForeignItem(_) |\n                 Node::TraitItem(_) |\n+                Node::Expr(Expr { node: ExprKind::Closure(..), ..}) |\n                 Node::ImplItem(_) => true,\n                 _ => false,\n             }\n@@ -675,7 +676,7 @@ impl<'hir> Map<'hir> {\n             match *node {\n                 Node::Expr(ref expr) => {\n                     match expr.node {\n-                        ExprKind::While(..) | ExprKind::Loop(..) => true,\n+                        ExprKind::While(..) | ExprKind::Loop(..) | ExprKind::Ret(..) => true,\n                         _ => false,\n                     }\n                 }"}, {"sha": "aa13087b484ac0b3a551c4b7995b8b21f8a2a623", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -4791,7 +4791,17 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n                 if !self.diverges.get().always() {\n-                    coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n+                    // #50009 -- Do not point at the entire fn block span, point at the return type\n+                    // span, as it is the cause of the requirement, and\n+                    // `consider_hint_about_removing_semicolon` will point at the last expression\n+                    // if it were a relevant part of the error. This improves usability in editors\n+                    // that highlight errors inline.\n+                    let sp = if let Some((decl, _)) = self.get_fn_decl(blk.id) {\n+                        decl.output.span()\n+                    } else {\n+                        blk.span\n+                    };\n+                    coerce.coerce_forced_unit(self, &self.misc(sp), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,\n                                                                         expected_ty,"}, {"sha": "ce8c624cdad45affe20082c0be5881c1a94334d1", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,27 +1,23 @@\n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:1:18\n+  --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n-LL |   fn f() -> String {  //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     0u8;\n-LL | |     \"bla\".to_string();\n-   | |                      - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn f() -> String {  //~ ERROR mismatched types\n+   |           ^^^^^^ expected struct `std::string::String`, found ()\n+LL |     0u8;\n+LL |     \"bla\".to_string();\n+   |                      - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/consider-removing-last-semi.rs:6:18\n+  --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n-LL |   fn g() -> String {  //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     \"this won't work\".to_string();\n-LL | |     \"removeme\".to_string();\n-   | |                           - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn g() -> String {  //~ ERROR mismatched types\n+   |           ^^^^^^ expected struct `std::string::String`, found ()\n+LL |     \"this won't work\".to_string();\n+LL |     \"removeme\".to_string();\n+   |                           - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`"}, {"sha": "cc97eaf8e1ac36a416efa739f10c2e95005e05b5", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,14 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-11714.rs:1:18\n+  --> $DIR/issue-11714.rs:1:14\n    |\n-LL |   fn blah() -> i32 { //~ ERROR mismatched types\n-   |  __________________^\n-LL | |     1\n-LL | |\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected i32, found ()\n+LL | fn blah() -> i32 { //~ ERROR mismatched types\n+   |              ^^^ expected i32, found ()\n+...\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `i32`\n               found type `()`"}, {"sha": "d3a2b5131371e3dccb3dc8f2911ad2b3ad0e6362", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,30 +1,23 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-13428.rs:3:20\n+  --> $DIR/issue-13428.rs:3:13\n    |\n-LL |   fn foo() -> String {  //~ ERROR mismatched types\n-   |  ____________________^\n-LL | |     format!(\"Hello {}\",\n-LL | |             \"world\")\n-LL | |     // Put the trailing semicolon on its own line to test that the\n-LL | |     // note message gets the offending semicolon exactly\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn foo() -> String {  //~ ERROR mismatched types\n+   |             ^^^^^^ expected struct `std::string::String`, found ()\n+...\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-13428.rs:11:20\n+  --> $DIR/issue-13428.rs:11:13\n    |\n-LL |   fn bar() -> String {  //~ ERROR mismatched types\n-   |  ____________________^\n-LL | |     \"foobar\".to_string()\n-LL | |     ;\n-   | |     - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected struct `std::string::String`, found ()\n+LL | fn bar() -> String {  //~ ERROR mismatched types\n+   |             ^^^^^^ expected struct `std::string::String`, found ()\n+LL |     \"foobar\".to_string()\n+LL |     ;\n+   |     - help: consider removing this semicolon\n    |\n    = note: expected type `std::string::String`\n               found type `()`"}, {"sha": "1c48ad630d8b7780ca922a461990925fb33ecac7", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,11 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/break-while-condition.rs:9:20\n+  --> $DIR/break-while-condition.rs:3:11\n    |\n-LL |           let _: ! = { //~ ERROR mismatched types\n-   |  ____________________^\n-LL | |             'a: while break 'a {};\n-LL | |         };\n-   | |_________^ expected !, found ()\n+LL | fn main() {\n+   |           ^ expected !, found ()\n    |\n    = note: expected type `!`\n               found type `()`"}, {"sha": "27f0540e36e948c197504b43d7cb45f3569a1aa1", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,25 +1,21 @@\n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:3:28\n+  --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n-LL |   fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n-   |  ____________________________^\n-LL | |     x + 1;\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected i32, found ()\n+LL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+   |                        ^^^ expected i32, found ()\n+LL |     x + 1;\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/coercion-missing-tail-expected-type.rs:7:29\n+  --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n-LL |   fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n-   |  _____________________________^\n-LL | |     Ok(1);\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected enum `std::result::Result`, found ()\n+LL | fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+   |             ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+LL |     Ok(1);\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `std::result::Result<u8, u64>`\n               found type `()`"}, {"sha": "71f9a83316c1c1f499d72bb31d58ead54baa0ddf", "filename": "src/test/ui/issues/issue-10536.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10536.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -17,10 +17,10 @@ LL |     assert!({one! two()});\n    |              ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-10536.rs:14:13\n+  --> $DIR/issue-10536.rs:11:15\n    |\n-LL |     assert!({one! two()});\n-   |             ^^^^^^^^^^^^ expected bool, found ()\n+LL | pub fn main() {\n+   |               ^ expected bool, found ()\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "6729fdf726aaef6dc0e20c0968ea6804eb312b4a", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-32323.rs:5:49\n+  --> $DIR/issue-32323.rs:5:30\n    |\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n-   |                                                 ^^ expected associated type, found ()\n+   |                              ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "d679fbb72624ef4b96f787fb29fc91ce4c11181b", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -11,15 +11,13 @@ LL |     break {}; //~ ERROR E0268\n    |     ^^^^^^^^ cannot break outside of a loop\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-43162.rs:1:18\n+  --> $DIR/issue-43162.rs:1:13\n    |\n-LL |   fn foo() -> bool {\n-   |  __________________^\n-LL | |     //~^ ERROR E0308\n-LL | |     break true; //~ ERROR E0268\n-   | |               - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected bool, found ()\n+LL | fn foo() -> bool {\n+   |             ^^^^ expected bool, found ()\n+LL |     //~^ ERROR E0308\n+LL |     break true; //~ ERROR E0268\n+   |               - help: consider removing this semicolon\n    |\n    = note: expected type `bool`\n               found type `()`"}, {"sha": "55757c1eb930e06f39b1edb91de211c77f9eda08", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,10 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-44023.rs:5:42\n+  --> $DIR/issue-44023.rs:5:36\n    |\n-LL |   fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n-   |  __________________________________________^\n-LL | | }\n-   | |_^ expected isize, found ()\n+LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize { //~ ERROR mismatched types\n+   |                                    ^^^^^ expected isize, found ()\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "e487e15c16c622238235fb8880b9dd6fd03cba50", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,12 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-6458-4.rs:1:40\n+  --> $DIR/issue-6458-4.rs:1:20\n    |\n-LL |   fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n-   |  ________________________________________^\n-LL | |     Err(\"bar\".to_string());\n-   | |                           - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected enum `std::result::Result`, found ()\n+LL | fn foo(b: bool) -> Result<bool,String> { //~ ERROR mismatched types\n+   |                    ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n+LL |     Err(\"bar\".to_string());\n+   |                           - help: consider removing this semicolon\n    |\n    = note: expected type `std::result::Result<bool, std::string::String>`\n               found type `()`"}, {"sha": "8d0eeb35fc3f16e24fd21120186a23fddc710115", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-forgot-ret.rs:3:25\n+  --> $DIR/liveness-forgot-ret.rs:3:19\n    |\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected isize, found ()\n+   |                   ^^^^^ expected isize, found ()    - expected because of this statement\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "956b71fcfe8f66a4ead7831132cd9917c03ef4d9", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,13 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-missing-ret2.rs:1:17\n+  --> $DIR/liveness-missing-ret2.rs:1:11\n    |\n-LL |   fn f() -> isize { //~ ERROR mismatched types\n-   |  _________________^\n-LL | |     // Make sure typestate doesn't interpret this match expression as\n-LL | |     // the function result\n-LL | |    match true { true => { } _ => {} };\n-LL | | }\n-   | |_^ expected isize, found ()\n+LL | fn f() -> isize { //~ ERROR mismatched types\n+   |           ^^^^^ expected isize, found ()\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "bb4ca303aa775311d0613d0525668f46cac93cc8", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,11 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:4:45\n+  --> $DIR/liveness-return-last-stmt-semi.rs:4:41\n    |\n LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n-   |                                             ^^^-^^\n-   |                                             |  |\n-   |                                             |  help: consider removing this semicolon\n-   |                                             expected i32, found ()\n+   |                                         ^^^    - help: consider removing this semicolon\n+   |                                         |\n+   |                                         expected i32, found ()\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -14,35 +13,30 @@ LL |     test!();\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:7:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:7:19\n    |\n LL | fn no_return() -> i32 {} //~ ERROR mismatched types\n-   |                       ^^ expected i32, found ()\n+   |                   ^^^ expected i32, found ()\n    |\n    = note: expected type `i32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:9:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:9:19\n    |\n-LL |   fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n-   |  _______________________^\n-LL | |     x * 2;\n-   | |          - help: consider removing this semicolon\n-LL | | }\n-   | |_^ expected u32, found ()\n+LL | fn bar(x: u32) -> u32 { //~ ERROR mismatched types\n+   |                   ^^^ expected u32, found ()\n+LL |     x * 2;\n+   |          - help: consider removing this semicolon\n    |\n    = note: expected type `u32`\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/liveness-return-last-stmt-semi.rs:13:23\n+  --> $DIR/liveness-return-last-stmt-semi.rs:13:19\n    |\n-LL |   fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n-   |  _______________________^\n-LL | |     x * 2;\n-LL | | }\n-   | |_^ expected u32, found ()\n+LL | fn baz(x: u64) -> u32 { //~ ERROR mismatched types\n+   |                   ^^^ expected u32, found ()\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "be86325de00037c9e724da9c2f54be1f27e8f73f", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f65dc07705e9463ffed0395894f1e7d63cec515/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=1f65dc07705e9463ffed0395894f1e7d63cec515", "patch": "@@ -1,8 +1,8 @@\n error[E0308]: mismatched types\n-  --> $DIR/missing-return.rs:3:17\n+  --> $DIR/missing-return.rs:3:11\n    |\n LL | fn f() -> isize { }\n-   |                 ^^^ expected isize, found ()\n+   |           ^^^^^ expected isize, found ()\n    |\n    = note: expected type `isize`\n               found type `()`"}]}