{"sha": "7cbfa2ee330b6e389027c6276df0f0f9b62fc76b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYmZhMmVlMzMwYjZlMzg5MDI3YzYyNzZkZjBmMGY5YjYyZmM3NmI=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:04:01Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:14:31Z"}, "message": "rebase", "tree": {"sha": "e2ccda50e2b1cbb46f5b744e3388b5745bc8fd5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2ccda50e2b1cbb46f5b744e3388b5745bc8fd5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b", "html_url": "https://github.com/rust-lang/rust/commit/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5bbab37baf750c01ff91edcc64f6729a5cb714", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5bbab37baf750c01ff91edcc64f6729a5cb714", "html_url": "https://github.com/rust-lang/rust/commit/eb5bbab37baf750c01ff91edcc64f6729a5cb714"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "ed5fe466c69f7579afe644b6d5c0e95228493a15", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cbfa2ee330b6e389027c6276df0f0f9b62fc76b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=7cbfa2ee330b6e389027c6276df0f0f9b62fc76b", "patch": "@@ -78,8 +78,11 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         // The rest of the code is already set up to be lazy about replacing bound vars,\n         // and only when we actually have to normalize.\n         if value.has_escaping_bound_vars() {\n-            let mut max_visitor =\n-                MaxEscapingBoundVarVisitor { outer_index: ty::INNERMOST, escaping: 0 };\n+            let mut max_visitor = MaxEscapingBoundVarVisitor {\n+                tcx: self.infcx.tcx,\n+                outer_index: ty::INNERMOST,\n+                escaping: 0,\n+            };\n             value.visit_with(&mut max_visitor);\n             if max_visitor.escaping > 0 {\n                 normalizer.universes.extend((0..max_visitor.escaping).map(|_| None));\n@@ -106,13 +109,18 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n }\n \n /// Visitor to find the maximum escaping bound var\n-struct MaxEscapingBoundVarVisitor {\n+struct MaxEscapingBoundVarVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n     // The index which would count as escaping\n     outer_index: ty::DebruijnIndex,\n     escaping: usize,\n }\n \n-impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor {\n+impl<'tcx> TypeVisitor<'tcx> for MaxEscapingBoundVarVisitor<'tcx> {\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n+    }\n+\n     fn visit_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: &ty::Binder<'tcx, T>,"}]}