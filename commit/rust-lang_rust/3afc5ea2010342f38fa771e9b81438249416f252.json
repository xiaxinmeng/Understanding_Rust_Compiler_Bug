{"sha": "3afc5ea2010342f38fa771e9b81438249416f252", "node_id": "C_kwDOAAsO6NoAKDNhZmM1ZWEyMDEwMzQyZjM4ZmE3NzFlOWI4MTQzODI0OTQxNmYyNTI", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-29T17:11:22Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-06T16:11:05Z"}, "message": "use def_span and def_kind queries instead of calling tcx.hir() methods\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "f6e075c29f035dfaf7fbb0f1c4e4381e2bd50be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6e075c29f035dfaf7fbb0f1c4e4381e2bd50be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3afc5ea2010342f38fa771e9b81438249416f252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3afc5ea2010342f38fa771e9b81438249416f252", "html_url": "https://github.com/rust-lang/rust/commit/3afc5ea2010342f38fa771e9b81438249416f252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3afc5ea2010342f38fa771e9b81438249416f252/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef1d1120953fb7a20f22fb70800cf9b76ce54077", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef1d1120953fb7a20f22fb70800cf9b76ce54077", "html_url": "https://github.com/rust-lang/rust/commit/ef1d1120953fb7a20f22fb70800cf9b76ce54077"}], "stats": {"total": 135, "additions": 31, "deletions": 104}, "files": [{"sha": "70da96154b01335bd72863698224febd14514665", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -6,7 +6,7 @@ use rustc_session::cstore::ForeignModule;\n crate fn collect(tcx: TyCtxt<'_>) -> Vec<ForeignModule> {\n     let mut modules = Vec::new();\n     for id in tcx.hir().items() {\n-        if !matches!(tcx.hir().def_kind(id.def_id), DefKind::ForeignMod) {\n+        if !matches!(tcx.def_kind(id.def_id), DefKind::ForeignMod) {\n             continue;\n         }\n         let item = tcx.hir().item(id);"}, {"sha": "f468399930d3a3b533754253f2389cbdfe52ac79", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -36,7 +36,7 @@ struct Collector<'tcx> {\n \n impl<'tcx> Collector<'tcx> {\n     fn process_item(&mut self, id: rustc_hir::ItemId) {\n-        if !matches!(self.tcx.hir().def_kind(id.def_id), DefKind::ForeignMod) {\n+        if !matches!(self.tcx.def_kind(id.def_id), DefKind::ForeignMod) {\n             return;\n         }\n "}, {"sha": "77d6ce1e766ebb9bb4ff9a93fc0bbbbfdd9376a9", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -1813,7 +1813,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             FxHashMap::default();\n \n         for id in tcx.hir().items() {\n-            if matches!(tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+            if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n                 if let Some(trait_ref) = tcx.impl_trait_ref(id.def_id.to_def_id()) {\n                     let simplified_self_ty = fast_reject::simplify_type(\n                         self.tcx,"}, {"sha": "c557b7c359ba3d51023d8fc0db2de2277af431dc", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -1167,7 +1167,7 @@ struct RootCollector<'a, 'tcx> {\n \n impl<'v> RootCollector<'_, 'v> {\n     fn process_item(&mut self, id: hir::ItemId) {\n-        match self.tcx.hir().def_kind(id.def_id) {\n+        match self.tcx.def_kind(id.def_id) {\n             DefKind::Enum | DefKind::Struct | DefKind::Union => {\n                 let item = self.tcx.hir().item(id);\n                 match item.kind {\n@@ -1228,7 +1228,7 @@ impl<'v> RootCollector<'_, 'v> {\n     }\n \n     fn process_impl_item(&mut self, id: hir::ImplItemId) {\n-        if matches!(self.tcx.hir().def_kind(id.def_id), DefKind::AssocFn) {\n+        if matches!(self.tcx.def_kind(id.def_id), DefKind::AssocFn) {\n             self.push_if_root(id.def_id);\n         }\n     }"}, {"sha": "79900a90aed63bfcb9b224d21026bd2160314d6a", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -240,9 +240,9 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n     let crate_items = tcx.hir_crate_items(());\n \n     for id in crate_items.items() {\n-        collector.check_for_lang(Target::from_def_kind(tcx.hir().def_kind(id.def_id)), id.hir_id());\n+        collector.check_for_lang(Target::from_def_kind(tcx.def_kind(id.def_id)), id.hir_id());\n \n-        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Enum) {\n+        if matches!(tcx.def_kind(id.def_id), DefKind::Enum) {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Enum(def, ..) = &item.kind {\n                 for variant in def.variants {"}, {"sha": "4627b58c9bcd3854c40799be62d62b33c90fb2c9", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -719,7 +719,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n         tcx.def_path_str(id.def_id.to_def_id())\n     );\n     let _indenter = indenter();\n-    match tcx.hir().def_kind(id.def_id) {\n+    match tcx.def_kind(id.def_id) {\n         DefKind::Static(..) => {\n             tcx.ensure().typeck(id.def_id);\n             maybe_check_static_with_link_section(tcx, id.def_id, tcx.def_span(id.def_id));\n@@ -1473,7 +1473,6 @@ pub(super) fn check_type_params_are_used<'tcx>(\n pub(super) fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let module = tcx.hir_module_items(module_def_id);\n     for id in module.items() {\n-        // let item = tcx.hir().item(id);\n         check_item_type(tcx, id);\n     }\n }"}, {"sha": "1310467aeb9683196021fccf5f44671fe3460c7b", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -17,7 +17,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     }\n \n     for id in tcx.hir().items() {\n-        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Use) {\n+        if matches!(tcx.def_kind(id.def_id), DefKind::Use) {\n             if tcx.visibility(id.def_id).is_public() {\n                 continue;\n             }\n@@ -101,7 +101,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     let mut crates_to_lint = vec![];\n \n     for id in tcx.hir().items() {\n-        if matches!(tcx.hir().def_kind(id.def_id), DefKind::ExternCrate) {\n+        if matches!(tcx.def_kind(id.def_id), DefKind::ExternCrate) {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::ExternCrate(orig_name) = item.kind {\n                 crates_to_lint.push(ExternCrateToLint {"}, {"sha": "b9d4167dbff096e0d91a87533a3cf57b3753ab23", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -177,7 +177,7 @@ impl<'tcx> InherentCollect<'tcx> {\n     }\n \n     fn check_item(&mut self, id: hir::ItemId) {\n-        if !matches!(self.tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+        if !matches!(self.tcx.def_kind(id.def_id), DefKind::Impl) {\n             return;\n         }\n "}, {"sha": "db67c1f7c9ed372de481a16ccc1062041e95c665", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n     }\n \n     fn check_item(&mut self, id: hir::ItemId) {\n-        let def_kind = self.tcx.hir().def_kind(id.def_id);\n+        let def_kind = self.tcx.def_kind(id.def_id);\n         if !matches!(def_kind, DefKind::Enum | DefKind::Struct | DefKind::Trait | DefKind::Union) {\n             return;\n         }"}, {"sha": "3cfc96ccbfd28a26deb4ee540836e78bb14f4db2", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::TyCtxt;\n \n pub fn check(tcx: TyCtxt<'_>) {\n     for id in tcx.hir().items() {\n-        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+        if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Impl(ref impl_) = item.kind {\n                 check_unsafety_coherence(\n@@ -83,74 +83,3 @@ fn check_unsafety_coherence<'tcx>(\n         }\n     }\n }\n-\n-// struct UnsafetyChecker<'tcx> {\n-//     tcx: TyCtxt<'tcx>,\n-// }\n-//\n-// impl<'tcx> UnsafetyChecker<'tcx> {\n-//     fn check_unsafety_coherence(\n-//         &mut self,\n-//         item: &hir::Item<'_>,\n-//         impl_generics: Option<&hir::Generics<'_>>,\n-//         unsafety: hir::Unsafety,\n-//         polarity: hir::ImplPolarity,\n-//     ) {\n-//         if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id) {\n-//             let trait_def = self.tcx.trait_def(trait_ref.def_id);\n-//             let unsafe_attr = impl_generics.and_then(|generics| {\n-//                 generics.params.iter().find(|p| p.pure_wrt_drop).map(|_| \"may_dangle\")\n-//             });\n-//             match (trait_def.unsafety, unsafe_attr, unsafety, polarity) {\n-//                 (Unsafety::Normal, None, Unsafety::Unsafe, hir::ImplPolarity::Positive) => {\n-//                     struct_span_err!(\n-//                         self.tcx.sess,\n-//                         item.span,\n-//                         E0199,\n-//                         \"implementing the trait `{}` is not unsafe\",\n-//                         trait_ref.print_only_trait_path()\n-//                     )\n-//                     .emit();\n-//                 }\n-//\n-//                 (Unsafety::Unsafe, _, Unsafety::Normal, hir::ImplPolarity::Positive) => {\n-//                     struct_span_err!(\n-//                         self.tcx.sess,\n-//                         item.span,\n-//                         E0200,\n-//                         \"the trait `{}` requires an `unsafe impl` declaration\",\n-//                         trait_ref.print_only_trait_path()\n-//                     )\n-//                     .emit();\n-//                 }\n-//\n-//                 (\n-//                     Unsafety::Normal,\n-//                     Some(attr_name),\n-//                     Unsafety::Normal,\n-//                     hir::ImplPolarity::Positive,\n-//                 ) => {\n-//                     struct_span_err!(\n-//                         self.tcx.sess,\n-//                         item.span,\n-//                         E0569,\n-//                         \"requires an `unsafe impl` declaration due to `#[{}]` attribute\",\n-//                         attr_name\n-//                     )\n-//                     .emit();\n-//                 }\n-//\n-//                 (_, _, Unsafety::Unsafe, hir::ImplPolarity::Negative(_)) => {\n-//                     // Reported in AST validation\n-//                     self.tcx.sess.delay_span_bug(item.span, \"unsafe negative impl\");\n-//                 }\n-//                 (_, _, Unsafety::Normal, hir::ImplPolarity::Negative(_))\n-//                 | (Unsafety::Unsafe, _, Unsafety::Unsafe, hir::ImplPolarity::Positive)\n-//                 | (Unsafety::Normal, Some(_), Unsafety::Unsafe, hir::ImplPolarity::Positive)\n-//                 | (Unsafety::Normal, None, Unsafety::Normal, _) => {\n-//                     // OK\n-//                 }\n-//             }\n-//         }\n-//     }\n-// }"}, {"sha": "c089d25d222164226f5e71de489fc485c9ad2735", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -65,7 +65,7 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let min_specialization = tcx.features().min_specialization;\n     let module = tcx.hir_module_items(module_def_id);\n     for id in module.items() {\n-        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+        if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n             let item = tcx.hir().item(id);\n             if let hir::ItemKind::Impl(ref impl_) = item.kind {\n                 enforce_impl_params_are_constrained(tcx, item.def_id, impl_.items);"}, {"sha": "96dc83b259f55e7468991cccacfc01197eaae81e", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -35,7 +35,7 @@ pub fn infer_predicates<'tcx>(\n             debug!(\"InferVisitor::visit_item(item={:?})\", item_did);\n \n             let mut item_required_predicates = RequiredPredicates::default();\n-            match tcx.hir().def_kind(item_did) {\n+            match tcx.def_kind(item_did) {\n                 DefKind::Union | DefKind::Enum | DefKind::Struct => {\n                     let adt_def = tcx.adt_def(item_did.to_def_id());\n "}, {"sha": "eb0e1203405cb509681d591115f2a42a9116bebb", "filename": "compiler/rustc_typeck/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -10,7 +10,7 @@ pub fn test_inferred_outlives(tcx: TyCtxt<'_>) {\n             let inferred_outlives_of = tcx.inferred_outlives_of(id.def_id);\n             struct_span_err!(\n                 tcx.sess,\n-                tcx.hir().span(id.hir_id()),\n+                tcx.def_span(id.def_id),\n                 E0640,\n                 \"{:?}\",\n                 inferred_outlives_of"}, {"sha": "be8e825d990f75d8324c2b29259a3f916e50c6d0", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -69,19 +69,19 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n     }\n \n     for id in crate_items.trait_items() {\n-        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n             constraint_cx.check_node_helper(id.hir_id());\n         }\n     }\n \n     for id in crate_items.impl_items() {\n-        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n             constraint_cx.check_node_helper(id.hir_id());\n         }\n     }\n \n     for id in crate_items.foreign_items() {\n-        if let DefKind::Fn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::Fn = tcx.def_kind(id.def_id) {\n             constraint_cx.check_node_helper(id.hir_id());\n         }\n     }\n@@ -91,7 +91,7 @@ pub fn add_constraints_from_crate<'a, 'tcx>(\n \n impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn check_item(&mut self, id: hir::ItemId) {\n-        let def_kind = self.tcx().hir().def_kind(id.def_id);\n+        let def_kind = self.tcx().def_kind(id.def_id);\n         match def_kind {\n             DefKind::Struct | DefKind::Union => {\n                 let item = self.tcx().hir().item(id);"}, {"sha": "ab64befe5dc16849ee84c8036f4598e2e404a058", "filename": "compiler/rustc_typeck/src/variance/terms.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fterms.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -86,19 +86,19 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(\n     }\n \n     for id in crate_items.trait_items() {\n-        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n             terms_cx.add_inferreds_for_item(id.hir_id());\n         }\n     }\n \n     for id in crate_items.impl_items() {\n-        if let DefKind::AssocFn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::AssocFn = tcx.def_kind(id.def_id) {\n             terms_cx.add_inferreds_for_item(id.hir_id());\n         }\n     }\n \n     for id in crate_items.foreign_items() {\n-        if let DefKind::Fn = tcx.hir().def_kind(id.def_id) {\n+        if let DefKind::Fn = tcx.def_kind(id.def_id) {\n             terms_cx.add_inferreds_for_item(id.hir_id());\n         }\n     }\n@@ -150,7 +150,7 @@ impl<'a, 'tcx> TermsContext<'a, 'tcx> {\n     fn check_item(&mut self, id: hir::ItemId) {\n         debug!(\"add_inferreds for item {}\", self.tcx.hir().node_to_string(id.hir_id()));\n \n-        let def_kind = self.tcx.hir().def_kind(id.def_id);\n+        let def_kind = self.tcx.def_kind(id.def_id);\n         match def_kind {\n             DefKind::Struct | DefKind::Union => {\n                 let item = self.tcx.hir().item(id);"}, {"sha": "2ba87db880b4671440cc85f394d86209d6858258", "filename": "compiler/rustc_typeck/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -8,8 +8,7 @@ pub fn test_variance(tcx: TyCtxt<'_>) {\n     for id in tcx.hir().items() {\n         if tcx.has_attr(id.def_id.to_def_id(), sym::rustc_variance) {\n             let variances_of = tcx.variances_of(id.def_id);\n-            struct_span_err!(tcx.sess, tcx.hir().span(id.hir_id()), E0208, \"{:?}\", variances_of)\n-                .emit();\n+            struct_span_err!(tcx.sess, tcx.def_span(id.def_id), E0208, \"{:?}\", variances_of).emit();\n         }\n     }\n }"}, {"sha": "c5c174cc8f614b735759ff7b4d7213f16292d978", "filename": "src/tools/clippy/clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3afc5ea2010342f38fa771e9b81438249416f252/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3afc5ea2010342f38fa771e9b81438249416f252/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs?ref=3afc5ea2010342f38fa771e9b81438249416f252", "patch": "@@ -51,14 +51,14 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n         for id in cx.tcx.hir().items() {\n-            if matches!(cx.tcx.hir().def_kind(id.def_id), DefKind::Impl)\n+            if matches!(cx.tcx.def_kind(id.def_id), DefKind::Impl)\n                 && let item = cx.tcx.hir().item(id)\n                 && let ItemKind::Impl(Impl {\n-                    items,\n-                    of_trait,\n-                    self_ty,\n-                    ..\n-                }) = &item.kind\n+                  items,\n+                  of_trait,\n+                  self_ty,\n+                  ..\n+                                      }) = &item.kind\n                 && let TyKind::Path(QPath::Resolved(_, Path { res, .. })) = self_ty.kind\n             {\n                 if !map.contains_key(res) {"}]}