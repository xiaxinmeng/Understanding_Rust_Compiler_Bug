{"sha": "e313efb9926be80a5d7614d800e425b6891cf7d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTNlZmI5OTI2YmU4MGE1ZDc2MTRkODAwZTQyNWI2ODkxY2Y3ZDk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-29T21:01:36Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-29T21:48:53Z"}, "message": "Do array unsizing for method receivers\n\nIt turns out rustc actually only unsizes array method receivers, so we don't\nneed to do any trait solving for this (at least for now).\n\nFixes #2670.", "tree": {"sha": "406cf2fa9e725d6eaeef05b825e492651078e6d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/406cf2fa9e725d6eaeef05b825e492651078e6d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e313efb9926be80a5d7614d800e425b6891cf7d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e313efb9926be80a5d7614d800e425b6891cf7d9", "html_url": "https://github.com/rust-lang/rust/commit/e313efb9926be80a5d7614d800e425b6891cf7d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e313efb9926be80a5d7614d800e425b6891cf7d9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e78036e6c8752fda350818afdd411ab25f405ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e78036e6c8752fda350818afdd411ab25f405ce", "html_url": "https://github.com/rust-lang/rust/commit/5e78036e6c8752fda350818afdd411ab25f405ce"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "7b0ff81611630ca19f6c73967bdefb47b9cd5543", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e313efb9926be80a5d7614d800e425b6891cf7d9/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313efb9926be80a5d7614d800e425b6891cf7d9/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=e313efb9926be80a5d7614d800e425b6891cf7d9", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     db::HirDatabase,\n     primitive::{FloatBitness, Uncertain},\n     utils::all_super_traits,\n-    Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n+    ApplicationTy, Canonical, InEnvironment, TraitEnvironment, TraitRef, Ty, TypeCtor, TypeWalk,\n };\n \n /// This is used as a key for indexing impls.\n@@ -214,7 +214,7 @@ pub fn iterate_method_candidates<T>(\n             // the methods by autoderef order of *receiver types*, not *self\n             // types*.\n \n-            let deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty).collect();\n+            let deref_chain = autoderef_method_receiver(db, krate, ty);\n             for i in 0..deref_chain.len() {\n                 if let Some(result) = iterate_method_candidates_with_autoref(\n                     &deref_chain[i..],\n@@ -548,3 +548,20 @@ fn generic_implements_goal(\n     let obligation = super::Obligation::Trait(trait_ref);\n     Canonical { num_vars, value: InEnvironment::new(env, obligation) }\n }\n+\n+fn autoderef_method_receiver(\n+    db: &impl HirDatabase,\n+    krate: CrateId,\n+    ty: InEnvironment<Canonical<Ty>>,\n+) -> Vec<Canonical<Ty>> {\n+    let mut deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty).collect();\n+    // As a last step, we can do array unsizing (that's the only unsizing that rustc does for method receivers!)\n+    if let Some(Ty::Apply(ApplicationTy { ctor: TypeCtor::Array, parameters })) =\n+        deref_chain.last().map(|ty| &ty.value)\n+    {\n+        let num_vars = deref_chain.last().unwrap().num_vars;\n+        let unsized_ty = Ty::apply(TypeCtor::Slice, parameters.clone());\n+        deref_chain.push(Canonical { value: unsized_ty, num_vars })\n+    }\n+    deref_chain\n+}"}, {"sha": "f9b394f059a5d9776499abf9f79bbb65e8e41575", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e313efb9926be80a5d7614d800e425b6891cf7d9/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e313efb9926be80a5d7614d800e425b6891cf7d9/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=e313efb9926be80a5d7614d800e425b6891cf7d9", "patch": "@@ -838,6 +838,24 @@ fn test() { (&S).foo()<|>; }\n     assert_eq!(t, \"u128\");\n }\n \n+#[test]\n+fn method_resolution_unsize_array() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+#[lang = \"slice\"]\n+impl<T> [T] {\n+    fn len(&self) -> usize { loop {} }\n+}\n+fn test() {\n+    let a = [1, 2, 3];\n+    a.len()<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"usize\");\n+}\n+\n #[test]\n fn method_resolution_trait_from_prelude() {\n     let (db, pos) = TestDB::with_position("}]}