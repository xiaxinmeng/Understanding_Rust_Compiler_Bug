{"sha": "59e621c1969fb03c5d367e9c713c0279461e772f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTYyMWMxOTY5ZmIwM2M1ZDM2N2U5YzcxM2MwMjc5NDYxZTc3MmY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-24T12:16:54Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-31T15:36:42Z"}, "message": "interp: needs_subst -> ensure_monomorphic_enough\n\nThis commit adds a `ensure_monomorphic_enough` utility function which\nchecks whether a type needs substitution, but only for parameters\nthat the `unused_generic_params` query considers used.\n\n`ensure_monomorphic_enough` is then used throughout interpret where\n`needs_subst` checks previously existed (in particular, for some\npointer casts and for reflection intrinsics more precise).\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "2aba75a6bbc444eb92d3b1c54153646a2ac2b1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2aba75a6bbc444eb92d3b1c54153646a2ac2b1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e621c1969fb03c5d367e9c713c0279461e772f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8kOpYACgkQJZLnbIc4\nH9kaChAAjgjmmkm4j+/p3mljHzglwBQcFe0azkuIVn7T73l+fyoz7yoBEZ3VKn62\nqY5krk215pUAcv2WPY/f7NM6teFrbmCdm9+ePr62erewcfxaubkOcPa+73Eslz4N\nHqa1MGqGaC9v+VPkpbJxA93AEEVEbaC3GI8TYBR9OpG0OGXgnOJEWplf9DEAqUO1\nGgiL7GyDIPEhxg3KCEa4EczhjSQnS9YtgHelzZRpb5D43eXbO2yJqy4EuNGD3uEo\nW/GMBDaejQD2kl94nzj9NyUs9ydesyY/4EFGAbZaCidNhYYAHdhvV3/liI953eGb\n+2DB+TFhc2YY3QkIhyqGCJxcbY0webxNP6+2UZ2uXc0LYlgID/jwC2FfcYUyfB+K\nD5x4PTIwHzbG7J3+KrCkN30U5MHMXpamAuhuQellbrGZ0BnWzJ+wGZpf4hIQO3LV\ndqQ4GbtGdwe80XBOQtFz++K5xKgT9mSuUbQvMIKEcZDCym2HV4hCkTI/0ygRBnYV\nI3UNyndkBXafj10ladirCWfxaJUh3ZOzXS3wj1MrCUauxu1RHBx+DzgU8Z+8bIHp\nplpEsrgpbWoDeKg80ZDgXRgCo05sdNIUeXsdQKAyeqD3y68WAwsEh7XN951uuUOY\ngpmXlKOwZFzo2XLZ+1PXOxwiwfzZHnXqfp6TUoyhoeUD4IaW/vU=\n=/p5K\n-----END PGP SIGNATURE-----", "payload": "tree 2aba75a6bbc444eb92d3b1c54153646a2ac2b1c6\nparent 0820e54a8ad7795d7b555b37994f43cfe62356d4\nauthor David Wood <david@davidtw.co> 1595593014 +0100\ncommitter David Wood <david@davidtw.co> 1596209802 +0100\n\ninterp: needs_subst -> ensure_monomorphic_enough\n\nThis commit adds a `ensure_monomorphic_enough` utility function which\nchecks whether a type needs substitution, but only for parameters\nthat the `unused_generic_params` query considers used.\n\n`ensure_monomorphic_enough` is then used throughout interpret where\n`needs_subst` checks previously existed (in particular, for some\npointer casts and for reflection intrinsics more precise).\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e621c1969fb03c5d367e9c713c0279461e772f", "html_url": "https://github.com/rust-lang/rust/commit/59e621c1969fb03c5d367e9c713c0279461e772f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e621c1969fb03c5d367e9c713c0279461e772f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0820e54a8ad7795d7b555b37994f43cfe62356d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0820e54a8ad7795d7b555b37994f43cfe62356d4", "html_url": "https://github.com/rust-lang/rust/commit/0820e54a8ad7795d7b555b37994f43cfe62356d4"}], "stats": {"total": 128, "additions": 108, "deletions": 20}, "files": [{"sha": "78f149f6451e6f1b2b27d46d780977aff4c31e38", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -8,11 +8,14 @@ use rustc_middle::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc_middle::mir::CastKind;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::{IntegerExt, TyAndLayout};\n-use rustc_middle::ty::{self, Ty, TypeAndMut, TypeFoldable};\n+use rustc_middle::ty::{self, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n use rustc_target::abi::{Integer, LayoutOf, Variants};\n \n-use super::{truncate, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy, PlaceTy};\n+use super::{\n+    truncate, util::ensure_monomorphic_enough, FnVal, ImmTy, Immediate, InterpCx, Machine, OpTy,\n+    PlaceTy,\n+};\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub fn cast(\n@@ -47,9 +50,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 match src.layout.ty.kind {\n                     ty::FnDef(def_id, substs) => {\n                         // All reifications must be monomorphic, bail out otherwise.\n-                        if src.layout.ty.needs_subst() {\n-                            throw_inval!(TooGeneric);\n-                        }\n+                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n \n                         if self.tcx.has_attr(def_id, sym::rustc_args_required_const) {\n                             span_bug!(\n@@ -89,9 +90,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 match src.layout.ty.kind {\n                     ty::Closure(def_id, substs) => {\n                         // All reifications must be monomorphic, bail out otherwise.\n-                        if src.layout.ty.needs_subst() {\n-                            throw_inval!(TooGeneric);\n-                        }\n+                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n \n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,"}, {"sha": "072a926b311000806c5e17f685e4c19094d3d85a", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -12,11 +12,13 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n-use super::{CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy};\n+use super::{\n+    util::ensure_monomorphic_enough, CheckInAllocMsg, ImmTy, InterpCx, Machine, OpTy, PlaceTy,\n+};\n \n mod caller_location;\n mod type_name;\n@@ -54,9 +56,7 @@ crate fn eval_nullary_intrinsic<'tcx>(\n     let name = tcx.item_name(def_id);\n     Ok(match name {\n         sym::type_name => {\n-            if tp_ty.needs_subst() {\n-                throw_inval!(TooGeneric);\n-            }\n+            ensure_monomorphic_enough(tcx, tp_ty)?;\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n@@ -72,9 +72,7 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n         sym::type_id => {\n-            if tp_ty.needs_subst() {\n-                throw_inval!(TooGeneric);\n-            }\n+            ensure_monomorphic_enough(tcx, tp_ty)?;\n             ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n         }\n         sym::variant_count => {"}, {"sha": "8a186dc372fef621ecce2a198981f32a7ddc8175", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -12,6 +12,7 @@ mod place;\n mod step;\n mod terminator;\n mod traits;\n+mod util;\n mod validity;\n mod visitor;\n "}, {"sha": "5c01345475c306e2cdf59956997c08a426b59e10", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -1,9 +1,10 @@\n use std::convert::TryFrom;\n \n use rustc_middle::mir::interpret::{InterpResult, Pointer, PointerArithmetic, Scalar};\n-use rustc_middle::ty::{self, Instance, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, Instance, Ty};\n use rustc_target::abi::{Align, LayoutOf, Size};\n \n+use super::util::ensure_monomorphic_enough;\n use super::{FnVal, InterpCx, Machine, MemoryKind};\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n@@ -23,9 +24,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let (ty, poly_trait_ref) = self.tcx.erase_regions(&(ty, poly_trait_ref));\n \n         // All vtables must be monomorphic, bail out otherwise.\n-        if ty.needs_subst() || poly_trait_ref.needs_subst() {\n-            throw_inval!(TooGeneric);\n-        }\n+        ensure_monomorphic_enough(*self.tcx, ty)?;\n+        ensure_monomorphic_enough(*self.tcx, poly_trait_ref)?;\n \n         if let Some(&vtable) = self.vtables.get(&(ty, poly_trait_ref)) {\n             // This means we guarantee that there are no duplicate vtables, we will"}, {"sha": "c0eac8a9305ee7a9a62432100af36da7f046653e", "filename": "src/librustc_mir/interpret/util.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Flibrustc_mir%2Finterpret%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Futil.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -0,0 +1,73 @@\n+use rustc_middle::mir::interpret::InterpResult;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n+use std::convert::TryInto;\n+\n+/// Returns `true` if a used generic parameter requires substitution.\n+crate fn ensure_monomorphic_enough<'tcx, T>(tcx: TyCtxt<'tcx>, ty: T) -> InterpResult<'tcx>\n+where\n+    T: TypeFoldable<'tcx>,\n+{\n+    debug!(\"ensure_monomorphic_enough: ty={:?}\", ty);\n+    if !ty.needs_subst() {\n+        return Ok(());\n+    }\n+\n+    struct UsedParamsNeedSubstVisitor<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+    };\n+\n+    impl<'tcx> TypeVisitor<'tcx> for UsedParamsNeedSubstVisitor<'tcx> {\n+        fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+            if !c.needs_subst() {\n+                return false;\n+            }\n+\n+            match c.val {\n+                ty::ConstKind::Param(..) => true,\n+                _ => c.super_visit_with(self),\n+            }\n+        }\n+\n+        fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+            if !ty.needs_subst() {\n+                return false;\n+            }\n+\n+            match ty.kind {\n+                ty::Param(_) => true,\n+                ty::Closure(def_id, substs)\n+                | ty::Generator(def_id, substs, ..)\n+                | ty::FnDef(def_id, substs) => {\n+                    let unused_params = self.tcx.unused_generic_params(def_id);\n+                    for (index, subst) in substs.into_iter().enumerate() {\n+                        let index = index\n+                            .try_into()\n+                            .expect(\"more generic parameters than can fit into a `u32`\");\n+                        let is_used =\n+                            unused_params.contains(index).map(|unused| !unused).unwrap_or(true);\n+                        // Only recurse when generic parameters in fns, closures and generators\n+                        // are used and require substitution.\n+                        if is_used && subst.needs_subst() {\n+                            // Just in case there are closures or generators within this subst,\n+                            // recurse.\n+                            if subst.super_visit_with(self) {\n+                                // Only return when we find a parameter so the remaining substs\n+                                // are not skipped.\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                    false\n+                }\n+                _ => ty.super_visit_with(self),\n+            }\n+        }\n+    }\n+\n+    let mut vis = UsedParamsNeedSubstVisitor { tcx };\n+    if ty.visit_with(&mut vis) {\n+        throw_inval!(TooGeneric);\n+    } else {\n+        Ok(())\n+    }\n+}"}, {"sha": "8b0c00b13551909f14a7733677532d54b4458942", "filename": "src/test/ui/issues/issue-74614.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Ftest%2Fui%2Fissues%2Fissue-74614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Ftest%2Fui%2Fissues%2Fissue-74614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-74614.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags:-Zpolymorphize=on\n // build-pass\n \n fn test<T>() {"}, {"sha": "4c532f451e373c3646e9d03ca63377a480cd0d0f", "filename": "src/test/ui/polymorphization/issue-74636.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e621c1969fb03c5d367e9c713c0279461e772f/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpolymorphization%2Fissue-74636.rs?ref=59e621c1969fb03c5d367e9c713c0279461e772f", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags:-Zpolymorphize=on\n+// build-pass\n+\n+use std::any::TypeId;\n+\n+pub fn foo<T: 'static>(_: T) -> TypeId {\n+    TypeId::of::<T>()\n+}\n+\n+fn outer<T: 'static>() {\n+    foo(|| ());\n+}\n+\n+fn main() {\n+    outer::<u8>();\n+}"}]}