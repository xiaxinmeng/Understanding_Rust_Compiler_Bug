{"sha": "e67c2282afa3c527da49618b928280564e92868f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2N2MyMjgyYWZhM2M1MjdkYTQ5NjE4YjkyODI4MDU2NGU5Mjg2OGY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T16:23:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Fix rebase, fix some tests", "tree": {"sha": "3c4f059b71f3412341123f6dd954b425a0d4291c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4f059b71f3412341123f6dd954b425a0d4291c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67c2282afa3c527da49618b928280564e92868f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67c2282afa3c527da49618b928280564e92868f", "html_url": "https://github.com/rust-lang/rust/commit/e67c2282afa3c527da49618b928280564e92868f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67c2282afa3c527da49618b928280564e92868f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f975e969b46278669940aa60e5aea50ba588531", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f975e969b46278669940aa60e5aea50ba588531", "html_url": "https://github.com/rust-lang/rust/commit/5f975e969b46278669940aa60e5aea50ba588531"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "15a9d58c9b574369946257b8c039576be507e413", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -749,12 +749,12 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             };\n             match name {\n                 None => {\n-                    TypeContext::direct(Type::struct_(cx, &[fill_ty], un.packed))\n+                    Type::struct_(cx, &[fill_ty], un.packed)\n                 }\n                 Some(name) => {\n                     let mut llty = Type::named_struct(cx, name);\n                     llty.set_struct_body(&[fill_ty], un.packed);\n-                    TypeContext::direct(llty)\n+                    llty\n                 }\n             }\n         }"}, {"sha": "20a33498475a2c920ce99fe54b07730afeedd166", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -421,7 +421,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 // Only \"class\" methods are generally understood by LLVM,\n                 // so avoid methods on other types (e.g. `<*mut T>::null`).\n                 match impl_self_ty.sty {\n-                    ty::TyStruct(..) | ty::TyEnum(..) => {\n+                    ty::TyStruct(..) | ty::TyUnion(..) | ty::TyEnum(..) => {\n                         Some(type_metadata(cx, impl_self_ty, syntax_pos::DUMMY_SP))\n                     }\n                     _ => None"}, {"sha": "bb77db8fd694751955966f84440d1ca13a9b1490", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -489,7 +489,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n         }\n         ty::TyStruct(def, _) | ty::TyEnum(def, _)\n                 if def.dtor_kind().is_present() && !skip_dtor => {\n-            trans_struct_drop(bcx, t, v0)\n+            trans_struct_drop(bcx, t, v0, false)\n         }\n         ty::TyUnion(def, _) => {\n             if def.dtor_kind().is_present() && !skip_dtor {"}, {"sha": "84dd22435b888934da6eaa10c1eeef6be4309067", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -12,29 +12,29 @@\n \n struct S;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n trait T { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n impl S { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n impl T for S { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n static s: usize = 0;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n const c: usize = 0;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n mod m { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n extern \"C\" { }\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n type A = usize;\n \n-#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs, enums and unions\n fn main() { }"}, {"sha": "17dea300ff9d6dc995cde26aaf46b144330d2100", "filename": "src/test/debuginfo/union-smoke.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funion-smoke.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -16,32 +16,33 @@\n \n // gdb-command:run\n // gdb-command:print u\n-// gdb-check:$1 = {a = 11 '\\v', b = 11}\n+// gdb-check:$1 = {a = {__0 = 2 '\\002', __1 = 2 '\\002'}, b = 514}\n // gdb-command:print union_smoke::SU\n-// gdb-check:$2 = {a = 10 '\\n', b = 10}\n+// gdb-check:$2 = {a = {__0 = 1 '\\001', __1 = 1 '\\001'}, b = 257}\n \n // === LLDB TESTS ==================================================================================\n \n // lldb-command:run\n // lldb-command:print a\n-// lldb-check:[...]$0 = {a = 11 '\\v', b = 11}\n+// lldb-check:[...]$0 = {a = {__0 = 2 '\\002', __1 = 2 '\\002'}, b = 514}\n // lldb-command:print union_smoke::SU\n-// lldb-check:[...]$1 = {a = 10 '\\n', b = 10}\n+// lldb-check:[...]$1 = {a = {__0 = 1 '\\001', __1 = 1 '\\001'}, b = 257}\n \n #![allow(unused)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n #![feature(untagged_unions)]\n \n union U {\n-    a: u8,\n-    b: u64,\n+    a: (u8, u8),\n+    b: u16,\n }\n \n-static SU: U = U { a: 10 };\n+static mut SU: U = U { a: (1, 1) };\n \n fn main() {\n-    let u = U { b: 11 };\n+    let u = U { b: (2 << 8) + 2 };\n+    unsafe { SU = U { a: (1, 1) } }\n \n     zzz(); // #break\n }"}, {"sha": "c27294442e7a4679f369537e565d255195394daa", "filename": "src/test/incremental/struct_change_field_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67c2282afa3c527da49618b928280564e92868f/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstruct_change_field_name.rs?ref=e67c2282afa3c527da49618b928280564e92868f", "patch": "@@ -37,7 +37,7 @@ pub struct Y {\n #[rustc_dirty(label=\"TypeckItemBody\", cfg=\"cfail2\")]\n pub fn use_X() -> u32 {\n     let x: X = X { x: 22 };\n-    //[cfail2]~^ ERROR structure `X` has no field named `x`\n+    //[cfail2]~^ ERROR struct `X` has no field named `x`\n     x.x as u32\n     //[cfail2]~^ ERROR attempted access of field `x`\n }"}]}