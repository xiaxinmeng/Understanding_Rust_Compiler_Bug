{"sha": "3835b3790ea9ddcf97e992c640324744e7e5db49", "node_id": "C_kwDOAAsO6NoAKDM4MzViMzc5MGVhOWRkY2Y5N2U5OTJjNjQwMzI0NzQ0ZTdlNWRiNDk", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T07:49:24Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T11:10:50Z"}, "message": "Improve NixOS handling", "tree": {"sha": "3cafd7753c5f0778f33cb0f7afe1ba1f9bad52cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cafd7753c5f0778f33cb0f7afe1ba1f9bad52cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3835b3790ea9ddcf97e992c640324744e7e5db49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3835b3790ea9ddcf97e992c640324744e7e5db49", "html_url": "https://github.com/rust-lang/rust/commit/3835b3790ea9ddcf97e992c640324744e7e5db49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3835b3790ea9ddcf97e992c640324744e7e5db49/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97569c998e87288fe7730e1d8bed0def6bda120", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97569c998e87288fe7730e1d8bed0def6bda120", "html_url": "https://github.com/rust-lang/rust/commit/e97569c998e87288fe7730e1d8bed0def6bda120"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "4628bf4b3c525b24ccdc15f6c73fa7e822696d18", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/3835b3790ea9ddcf97e992c640324744e7e5db49/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3835b3790ea9ddcf97e992c640324744e7e5db49/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=3835b3790ea9ddcf97e992c640324744e7e5db49", "patch": "@@ -27,7 +27,7 @@ export async function activate(context: vscode.ExtensionContext) {\n async function tryActivate(context: vscode.ExtensionContext) {\n     const config = new Config(context);\n     const state = new PersistentState(context.globalState);\n-    const serverPath = await bootstrap(config, state).catch(err => {\n+    const serverPath = await bootstrap(context, config, state).catch(err => {\n         let message = \"bootstrap error. \";\n \n         if (err.code === \"EBUSY\" || err.code === \"ETXTBSY\" || err.code === \"EPERM\") {\n@@ -157,8 +157,6 @@ export async function deactivate() {\n }\n \n async function bootstrap(context: vscode.ExtensionContext, config: Config, state: PersistentState): Promise<string> {\n-    await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n-\n     const path = await getServer(context, config, state);\n     if (!path) {\n         throw new Error(\n@@ -244,35 +242,42 @@ async function getServer(context: vscode.ExtensionContext, config: Config, state\n         \"arm64 darwin\": \"aarch64-apple-darwin\",\n     };\n     let platform = platforms[`${process.arch} ${process.platform}`];\n-    if (platform === undefined) {\n-        await vscode.window.showErrorMessage(\n-            \"Unfortunately we don't ship binaries for your platform yet. \" +\n-            \"You need to manually clone rust-analyzer repository and \" +\n-            \"run `cargo xtask install --server` to build the language server from sources. \" +\n-            \"If you feel that your platform should be supported, please create an issue \" +\n-            \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n-            \"will consider it.\"\n-        );\n-        return undefined;\n-    }\n-    if (platform === \"x86_64-unknown-linux-gnu\" && isMusl()) {\n-        platform = \"x86_64-unknown-linux-musl\";\n-    }\n-    const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n-    const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n-    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n-    const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n-    const exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n-    if (bundledExists) {\n-        if (!await isNixOs()) {\n-            return bundled.fsPath;\n+    if (platform) {\n+        if (platform === \"x86_64-unknown-linux-gnu\" && isMusl()) {\n+            platform = \"x86_64-unknown-linux-musl\";\n         }\n-        if (!exists || config.package.version !== state.serverVersion) {\n-            await vscode.workspace.fs.copy(bundled, dest);\n-            await patchelf(dest);\n+        const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n+        const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n+        const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n+        if (bundledExists) {\n+            let server = bundled;\n+            if (await isNixOs()) {\n+                await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n+                const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n+                let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n+                if (exists && config.package.version !== state.serverVersion) {\n+                    await vscode.workspace.fs.delete(dest);\n+                    exists = false;\n+                }\n+                if (!exists) {\n+                    await vscode.workspace.fs.copy(bundled, dest);\n+                    await patchelf(dest);\n+                    server = dest;\n+                }\n+            }\n+            await state.updateServerVersion(config.package.version);\n+            return server.fsPath;\n         }\n     }\n-    return dest.fsPath;\n+    await vscode.window.showErrorMessage(\n+        \"Unfortunately we don't ship binaries for your platform yet. \" +\n+        \"You need to manually clone rust-analyzer repository and \" +\n+        \"run `cargo xtask install --server` to build the language server from sources. \" +\n+        \"If you feel that your platform should be supported, please create an issue \" +\n+        \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n+        \"will consider it.\"\n+    );\n+    return undefined;\n }\n \n function serverPath(config: Config): string | null {"}]}