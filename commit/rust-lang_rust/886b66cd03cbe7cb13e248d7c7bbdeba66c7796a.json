{"sha": "886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NmI2NmNkMDNjYmU3Y2IxM2UyNDhkN2M3YmJkZWJhNjZjNzc5NmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:51:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T16:51:19Z"}, "message": "internal: refactor BreakOutsideOfLoop diagnostic", "tree": {"sha": "4479618bebc4f3b6bcc6159ad887cfc1591091b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4479618bebc4f3b6bcc6159ad887cfc1591091b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "html_url": "https://github.com/rust-lang/rust/commit/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7166e8549bad95b05f66acd508d07a6cd97d3dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7166e8549bad95b05f66acd508d07a6cd97d3dc0", "html_url": "https://github.com/rust-lang/rust/commit/7166e8549bad95b05f66acd508d07a6cd97d3dc0"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "47d17ba70791e0366c6478f07eaa275764a6547e", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "patch": "@@ -32,6 +32,7 @@ macro_rules! diagnostics {\n }\n \n diagnostics![\n+    BreakOutsideOfLoop,\n     InactiveCode,\n     MacroError,\n     MissingFields,\n@@ -98,28 +99,9 @@ pub struct NoSuchField {\n     pub field: InFile<AstPtr<ast::RecordExprField>>,\n }\n \n-// Diagnostic: break-outside-of-loop\n-//\n-// This diagnostic is triggered if the `break` keyword is used outside of a loop.\n #[derive(Debug)]\n pub struct BreakOutsideOfLoop {\n-    pub file: HirFileId,\n-    pub expr: AstPtr<ast::Expr>,\n-}\n-\n-impl Diagnostic for BreakOutsideOfLoop {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"break-outside-of-loop\")\n-    }\n-    fn message(&self) -> String {\n-        \"break outside of loop\".to_string()\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n+    pub expr: InFile<AstPtr<ast::Expr>>,\n }\n \n // Diagnostic: missing-unsafe"}, {"sha": "2f507b83b77efcc0a39153445a6b5a87ab53220a", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "patch": "@@ -1080,10 +1080,10 @@ impl Function {\n                     acc.push(NoSuchField { field }.into())\n                 }\n                 hir_ty::InferenceDiagnostic::BreakOutsideOfLoop { expr } => {\n-                    let ptr = source_map\n+                    let expr = source_map\n                         .expr_syntax(*expr)\n                         .expect(\"break outside of loop in synthetic syntax\");\n-                    sink.push(BreakOutsideOfLoop { file: ptr.file_id, expr: ptr.value })\n+                    acc.push(BreakOutsideOfLoop { expr }.into())\n                 }\n             }\n         }"}, {"sha": "e8f22c88974134230254e96fa243df7b76d3b327", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "patch": "@@ -4,6 +4,7 @@\n //! macro-expanded files, but we need to present them to the users in terms of\n //! original files. So we need to map the ranges.\n \n+mod break_outside_of_loop;\n mod inactive_code;\n mod macro_error;\n mod missing_fields;\n@@ -218,6 +219,7 @@ pub(crate) fn diagnostics(\n     for diag in diags {\n         #[rustfmt::skip]\n         let d = match diag {\n+            AnyDiagnostic::BreakOutsideOfLoop(d) => break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => macro_error::macro_error(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => missing_fields::missing_fields(&ctx, &d),\n             AnyDiagnostic::NoSuchField(d) => no_such_field::no_such_field(&ctx, &d),\n@@ -711,16 +713,6 @@ mod foo;\n         );\n     }\n \n-    #[test]\n-    fn break_outside_of_loop() {\n-        check_diagnostics(\n-            r#\"\n-fn foo() { break; }\n-         //^^^^^ break outside of loop\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn missing_unsafe_diagnostic_with_raw_ptr() {\n         check_diagnostics("}, {"sha": "80e68f3cc03d62bb72ee415641a7f7cc735d7a9a", "filename": "crates/ide/src/diagnostics/break_outside_of_loop.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fide%2Fsrc%2Fdiagnostics%2Fbreak_outside_of_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/886b66cd03cbe7cb13e248d7c7bbdeba66c7796a/crates%2Fide%2Fsrc%2Fdiagnostics%2Fbreak_outside_of_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Fbreak_outside_of_loop.rs?ref=886b66cd03cbe7cb13e248d7c7bbdeba66c7796a", "patch": "@@ -0,0 +1,30 @@\n+use crate::diagnostics::{Diagnostic, DiagnosticsContext};\n+\n+// Diagnostic: break-outside-of-loop\n+//\n+// This diagnostic is triggered if the `break` keyword is used outside of a loop.\n+pub(super) fn break_outside_of_loop(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::BreakOutsideOfLoop,\n+) -> Diagnostic {\n+    Diagnostic::new(\n+        \"break-outside-of-loop\",\n+        \"break outside of loop\",\n+        ctx.sema.diagnostics_display_range(d.expr.clone().map(|it| it.into())).range,\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::diagnostics::tests::check_diagnostics;\n+\n+    #[test]\n+    fn break_outside_of_loop() {\n+        check_diagnostics(\n+            r#\"\n+fn foo() { break; }\n+         //^^^^^ break outside of loop\n+\"#,\n+        );\n+    }\n+}"}]}