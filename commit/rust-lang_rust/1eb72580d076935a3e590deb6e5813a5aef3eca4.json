{"sha": "1eb72580d076935a3e590deb6e5813a5aef3eca4", "node_id": "C_kwDOAAsO6NoAKDFlYjcyNTgwZDA3NjkzNWEzZTU5MGRlYjZlNTgxM2E1YWVmM2VjYTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-08T19:25:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-08T19:25:19Z"}, "message": "Auto merge of #94702 - b-naber:static-refs-mir, r=lcnr\n\nReinstate #93800\n\nhttps://github.com/rust-lang/rust/pull/93800 caused a regression in an alt builder with parallel enabled. https://github.com/rust-lang/rust/pull/94205 reverted that PR because of the regression. For an unknown reason the regression has disappeared, so we reinstate the changes in https://github.com/rust-lang/rust/pull/93800 here.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "c3ef3eb25c93e4467d5a8989d5020ce861663c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3ef3eb25c93e4467d5a8989d5020ce861663c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb72580d076935a3e590deb6e5813a5aef3eca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb72580d076935a3e590deb6e5813a5aef3eca4", "html_url": "https://github.com/rust-lang/rust/commit/1eb72580d076935a3e590deb6e5813a5aef3eca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb72580d076935a3e590deb6e5813a5aef3eca4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64187b837486be90b897c7014572aa3537dc9b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/64187b837486be90b897c7014572aa3537dc9b27", "html_url": "https://github.com/rust-lang/rust/commit/64187b837486be90b897c7014572aa3537dc9b27"}, {"sha": "9fd2c80f73ebe3e0dcaec7d56adb3512bea132c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd2c80f73ebe3e0dcaec7d56adb3512bea132c0", "html_url": "https://github.com/rust-lang/rust/commit/9fd2c80f73ebe3e0dcaec7d56adb3512bea132c0"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "aa061232d7e3c90d55a24db5d43410e9e510e053", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -2534,7 +2534,7 @@ pub enum ConstantKind<'tcx> {\n \n impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n-        match self.literal.const_for_ty()?.val().try_to_scalar() {\n+        match self.literal.try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n                 GlobalAlloc::Static(def_id) => {\n                     assert!(!tcx.is_thread_local_static(def_id));"}, {"sha": "50d9c8e98b9b2e193deb22bb3a61078a89f833c9", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -18,9 +18,8 @@ use rustc_middle::mir::interpret::{\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::MirSource;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::Size;\n-use std::ops::ControlFlow;\n \n const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n@@ -672,16 +671,27 @@ pub fn write_allocations<'tcx>(\n         }\n     }\n     struct CollectAllocIds(BTreeSet<AllocId>);\n-    impl<'tcx> TypeVisitor<'tcx> for CollectAllocIds {\n-        fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+\n+    impl<'tcx> Visitor<'tcx> for CollectAllocIds {\n+        fn visit_const(&mut self, c: ty::Const<'tcx>, _loc: Location) {\n             if let ty::ConstKind::Value(val) = c.val() {\n                 self.0.extend(alloc_ids_from_const(val));\n             }\n-            c.super_visit_with(self)\n+        }\n+\n+        fn visit_constant(&mut self, c: &Constant<'tcx>, loc: Location) {\n+            match c.literal {\n+                ConstantKind::Ty(c) => self.visit_const(c, loc),\n+                ConstantKind::Val(val, _) => {\n+                    self.0.extend(alloc_ids_from_const(val));\n+                }\n+            }\n         }\n     }\n+\n     let mut visitor = CollectAllocIds(Default::default());\n-    body.visit_with(&mut visitor);\n+    visitor.visit_body(body);\n+\n     // `seen` contains all seen allocations, including the ones we have *not* printed yet.\n     // The protocol is to first `insert` into `seen`, and only if that returns `true`\n     // then push to `todo`."}, {"sha": "04bc0c8b52114dccded115a8b98fa0c9a1ac94f1", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -17,6 +17,7 @@ use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n+use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{\n     BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n };\n@@ -419,7 +420,8 @@ pub enum ExprKind<'tcx> {\n     /// This is only distinguished from `Literal` so that we can register some\n     /// info for diagnostics.\n     StaticRef {\n-        literal: Const<'tcx>,\n+        alloc_id: AllocId,\n+        ty: Ty<'tcx>,\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`."}, {"sha": "1c472f38184eadca7faedd6b7c4899278ee24356", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -123,7 +123,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         }\n         Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n         Literal { literal, user_ty: _, const_id: _ } => visitor.visit_const(literal),\n-        StaticRef { literal, def_id: _ } => visitor.visit_const(literal),\n+        StaticRef { alloc_id: _, ty: _, def_id: _ } => {}\n         InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;"}, {"sha": "0c0b0f2bd05affc985dad8dd83c21e488da36c4c", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -1,6 +1,7 @@\n //! See docs in build/expr/mod.rs\n \n use crate::build::Builder;\n+use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n@@ -26,8 +27,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 assert_eq!(literal.ty(), ty);\n                 Constant { span, user_ty, literal: literal.into() }\n             }\n-            ExprKind::StaticRef { literal, .. } => {\n-                Constant { span, user_ty: None, literal: literal.into() }\n+            ExprKind::StaticRef { alloc_id, ty, .. } => {\n+                let const_val =\n+                    ConstValue::Scalar(Scalar::from_pointer(alloc_id.into(), &this.tcx));\n+                let literal = ConstantKind::Val(const_val, ty);\n+\n+                Constant { span, user_ty: None, literal }\n             }\n             ExprKind::ConstBlock { value } => {\n                 Constant { span: span, user_ty: None, literal: value.into() }"}, {"sha": "5a7e1d88dd03f9d8cb2084497fe86edb30c80a6e", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb72580d076935a3e590deb6e5813a5aef3eca4/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=1eb72580d076935a3e590deb6e5813a5aef3eca4", "patch": "@@ -8,7 +8,6 @@ use rustc_middle::hir::place::Place as HirPlace;\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::hir::place::ProjectionKind as HirProjectionKind;\n use rustc_middle::middle::region;\n-use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::{BinOp, BorrowKind, Field, UnOp};\n use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n@@ -941,15 +940,8 @@ impl<'tcx> Cx<'tcx> {\n                 let kind = if self.tcx.is_thread_local_static(id) {\n                     ExprKind::ThreadLocalRef(id)\n                 } else {\n-                    let ptr = self.tcx.create_static_alloc(id);\n-                    ExprKind::StaticRef {\n-                        literal: ty::Const::from_scalar(\n-                            self.tcx,\n-                            Scalar::from_pointer(ptr.into(), &self.tcx),\n-                            ty,\n-                        ),\n-                        def_id: id,\n-                    }\n+                    let alloc_id = self.tcx.create_static_alloc(id);\n+                    ExprKind::StaticRef { alloc_id, ty, def_id: id }\n                 };\n                 ExprKind::Deref {\n                     arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),"}]}