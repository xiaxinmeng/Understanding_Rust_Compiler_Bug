{"sha": "cabf6d052329c8ba5f23c7fc4873e9db64874997", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYmY2ZDA1MjMyOWM4YmE1ZjIzYzdmYzQ4NzNlOWRiNjQ4NzQ5OTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-09-28T01:58:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-25T22:21:14Z"}, "message": "Tweak `if let` suggestion to be more liberal with suggestion and to not ICE\n\nFix #77218. Fix #77238.", "tree": {"sha": "4392ba2faab1fe90cd71f186fea5175be40b32cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4392ba2faab1fe90cd71f186fea5175be40b32cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cabf6d052329c8ba5f23c7fc4873e9db64874997", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cabf6d052329c8ba5f23c7fc4873e9db64874997", "html_url": "https://github.com/rust-lang/rust/commit/cabf6d052329c8ba5f23c7fc4873e9db64874997", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cabf6d052329c8ba5f23c7fc4873e9db64874997/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9", "html_url": "https://github.com/rust-lang/rust/commit/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "03e448a00cc77da62fd7e7aaddb6c5801fb077bf", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cabf6d052329c8ba5f23c7fc4873e9db64874997/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabf6d052329c8ba5f23c7fc4873e9db64874997/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cabf6d052329c8ba5f23c7fc4873e9db64874997", "patch": "@@ -769,34 +769,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut err = self.demand_suptype_diag(expr.span, expected_ty, actual_ty).unwrap();\n             let lhs_ty = self.check_expr(&lhs);\n             let rhs_ty = self.check_expr(&rhs);\n-            if self.can_coerce(lhs_ty, rhs_ty) {\n-                if !lhs.is_syntactic_place_expr() {\n-                    // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n-                    if let hir::Node::Expr(hir::Expr {\n-                        kind: ExprKind::Match(_, _, hir::MatchSource::IfDesugar { .. }),\n-                        ..\n-                    }) = self.tcx.hir().get(\n-                        self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(expr.hir_id)),\n-                    ) {\n-                        // Likely `if let` intended.\n-                        err.span_suggestion_verbose(\n-                            expr.span.shrink_to_lo(),\n-                            \"you might have meant to use pattern matching\",\n-                            \"let \".to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n+            let (applicability, eq) = if self.can_coerce(rhs_ty, lhs_ty) {\n+                (Applicability::MachineApplicable, true)\n+            } else {\n+                (Applicability::MaybeIncorrect, false)\n+            };\n+            if !lhs.is_syntactic_place_expr() {\n+                // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n+                if let hir::Node::Expr(hir::Expr {\n+                    kind:\n+                        ExprKind::Match(\n+                            _,\n+                            _,\n+                            hir::MatchSource::IfDesugar { .. } | hir::MatchSource::WhileDesugar,\n+                        ),\n+                    ..\n+                }) = self.tcx.hir().get(\n+                    self.tcx.hir().get_parent_node(self.tcx.hir().get_parent_node(expr.hir_id)),\n+                ) {\n+                    // Likely `if let` intended.\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_lo(),\n+                        \"you might have meant to use pattern matching\",\n+                        \"let \".to_string(),\n+                        applicability,\n+                    );\n                 }\n+            }\n+            if eq {\n                 err.span_suggestion_verbose(\n                     *span,\n                     \"you might have meant to compare for equality\",\n                     \"==\".to_string(),\n-                    Applicability::MaybeIncorrect,\n+                    applicability,\n                 );\n-            } else {\n-                // Do this to cause extra errors about the assignment.\n-                let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n-                let _ = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));\n             }\n \n             if self.sess().if_let_suggestions.borrow().get(&expr.span).is_some() {"}, {"sha": "bc992c21dca5c98f853d35bfb7e651c6bb24e063", "filename": "src/test/ui/issues/issue-77218.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs?ref=cabf6d052329c8ba5f23c7fc4873e9db64874997", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let value = [7u8];\n+    while Some(0) = value.get(0) { //~ ERROR mismatched types\n+        //~^ NOTE expected `bool`, found `()`\n+        //~| HELP you might have meant to use pattern matching\n+    }\n+}"}, {"sha": "eca44725eb258cb479f046a24300025d71a11077", "filename": "src/test/ui/issues/issue-77218.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr?ref=cabf6d052329c8ba5f23c7fc4873e9db64874997", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-77218.rs:3:11\n+   |\n+LL |     while Some(0) = value.get(0) {\n+   |           ^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     while let Some(0) = value.get(0) {\n+   |           ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "87def13c476c7d5c803f80b34cfed1db0b9cc3ee", "filename": "src/test/ui/suggestions/if-let-typo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.rs?ref=cabf6d052329c8ba5f23c7fc4873e9db64874997", "patch": "@@ -4,6 +4,5 @@ fn main() {\n     if Some(x) = foo {} //~ ERROR cannot find value `x` in this scope\n     if Some(foo) = bar {} //~ ERROR mismatched types\n     if 3 = foo {} //~ ERROR mismatched types\n-    //~^ ERROR mismatched types\n     if Some(3) = foo {} //~ ERROR mismatched types\n }"}, {"sha": "d8e50cae55ad12c9ee7052ed407f50dd180f4948", "filename": "src/test/ui/suggestions/if-let-typo.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cabf6d052329c8ba5f23c7fc4873e9db64874997/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr?ref=cabf6d052329c8ba5f23c7fc4873e9db64874997", "patch": "@@ -24,23 +24,19 @@ help: you might have meant to compare for equality\n LL |     if Some(foo) == bar {}\n    |                  ^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/if-let-typo.rs:6:12\n-   |\n-LL |     if 3 = foo {}\n-   |            ^^^ expected integer, found enum `Option`\n-   |\n-   = note: expected type `{integer}`\n-              found enum `Option<{integer}>`\n-\n error[E0308]: mismatched types\n   --> $DIR/if-let-typo.rs:6:8\n    |\n LL |     if 3 = foo {}\n    |        ^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to use pattern matching\n+   |\n+LL |     if let 3 = foo {}\n+   |        ^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/if-let-typo.rs:8:8\n+  --> $DIR/if-let-typo.rs:7:8\n    |\n LL |     if Some(3) = foo {}\n    |        ^^^^^^^^^^^^^ expected `bool`, found `()`\n@@ -54,7 +50,7 @@ help: you might have meant to compare for equality\n LL |     if Some(3) == foo {}\n    |                ^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0308, E0425.\n For more information about an error, try `rustc --explain E0308`."}]}