{"sha": "28c9ba91d85e651ecf3568159bc3dfb45882baf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YzliYTkxZDg1ZTY1MWVjZjM1NjgxNTliYzNkZmI0NTg4MmJhZjg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-02T17:46:04Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:08:55Z"}, "message": "Remove redundant Atomic{Ui,I}nt types from unstable::sync", "tree": {"sha": "b6c22e5d1748011f9f448534d42c941a3e29a838", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6c22e5d1748011f9f448534d42c941a3e29a838"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28c9ba91d85e651ecf3568159bc3dfb45882baf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28c9ba91d85e651ecf3568159bc3dfb45882baf8", "html_url": "https://github.com/rust-lang/rust/commit/28c9ba91d85e651ecf3568159bc3dfb45882baf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28c9ba91d85e651ecf3568159bc3dfb45882baf8/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a9b33a76d76a77d2ced1c2430a25faa0f284071", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9b33a76d76a77d2ced1c2430a25faa0f284071", "html_url": "https://github.com/rust-lang/rust/commit/5a9b33a76d76a77d2ced1c2430a25faa0f284071"}], "stats": {"total": 68, "additions": 0, "deletions": 68}, "files": [{"sha": "cfdbb4930ebcfdce19abfe0ef512322e85da567c", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/28c9ba91d85e651ecf3568159bc3dfb45882baf8/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28c9ba91d85e651ecf3568159bc3dfb45882baf8/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=28c9ba91d85e651ecf3568159bc3dfb45882baf8", "patch": "@@ -205,50 +205,6 @@ extern {\n     fn rust_unlock_little_lock(lock: rust_little_lock);\n }\n \n-/* *********************************************************************/\n-\n-//FIXME: #5042 This should be replaced by proper atomic type\n-pub struct AtomicUint {\n-    priv inner: uint\n-}\n-\n-impl AtomicUint {\n-    pub fn new(val: uint) -> AtomicUint { AtomicUint { inner: val } }\n-    pub fn load(&self) -> uint {\n-        unsafe { intrinsics::atomic_load(cast::transmute(self)) as uint }\n-    }\n-    pub fn store(&mut self, val: uint) {\n-        unsafe { intrinsics::atomic_store(cast::transmute(self), val as int); }\n-    }\n-    pub fn add(&mut self, val: int) -> uint {\n-        unsafe { intrinsics::atomic_xadd(cast::transmute(self), val as int) as uint }\n-    }\n-    pub fn cas(&mut self, old:uint, new: uint) -> uint {\n-        unsafe { intrinsics::atomic_cxchg(cast::transmute(self), old as int, new as int) as uint }\n-    }\n-}\n-\n-pub struct AtomicInt {\n-    priv inner: int\n-}\n-\n-impl AtomicInt {\n-    pub fn new(val: int) -> AtomicInt { AtomicInt { inner: val } }\n-    pub fn load(&self) -> int {\n-        unsafe { intrinsics::atomic_load(&self.inner) }\n-    }\n-    pub fn store(&mut self, val: int) {\n-        unsafe { intrinsics::atomic_store(&mut self.inner, val); }\n-    }\n-    pub fn add(&mut self, val: int) -> int {\n-        unsafe { intrinsics::atomic_xadd(&mut self.inner, val) }\n-    }\n-    pub fn cas(&mut self, old: int, new: int) -> int {\n-        unsafe { intrinsics::atomic_cxchg(&mut self.inner, old, new) }\n-    }\n-}\n-\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -307,28 +263,4 @@ mod tests {\n             }\n         }\n     }\n-\n-    #[test]\n-    fn atomic_int_smoke_test() {\n-        let mut i = AtomicInt::new(0);\n-        i.store(10);\n-        assert!(i.load() == 10);\n-        assert!(i.add(1) == 10);\n-        assert!(i.load() == 11);\n-        assert!(i.cas(11, 12) == 11);\n-        assert!(i.cas(11, 13) == 12);\n-        assert!(i.load() == 12);\n-    }\n-\n-    #[test]\n-    fn atomic_uint_smoke_test() {\n-        let mut i = AtomicUint::new(0);\n-        i.store(10);\n-        assert!(i.load() == 10);\n-        assert!(i.add(1) == 10);\n-        assert!(i.load() == 11);\n-        assert!(i.cas(11, 12) == 11);\n-        assert!(i.cas(11, 13) == 12);\n-        assert!(i.load() == 12);\n-    }\n }"}]}