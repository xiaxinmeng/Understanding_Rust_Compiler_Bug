{"sha": "70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "node_id": "C_kwDOAAsO6NoAKDcwMDYxZDJiN2U3ZTJlYzlkN2IwNzA0ZjE4YzQ4ODk4NWRjZDc0MTc", "commit": {"author": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-18T14:49:24Z"}, "committer": {"name": "hamidreza kalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2021-09-26T06:34:02Z"}, "message": "move lsif types to lsp types crate", "tree": {"sha": "a0b7a7926eb379a780f8619307723b998d7c4fbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b7a7926eb379a780f8619307723b998d7c4fbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "html_url": "https://github.com/rust-lang/rust/commit/70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e803bd25c4adf4c5487e7b0f6495dfab07b11daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e803bd25c4adf4c5487e7b0f6495dfab07b11daf", "html_url": "https://github.com/rust-lang/rust/commit/e803bd25c4adf4c5487e7b0f6495dfab07b11daf"}], "stats": {"total": 386, "additions": 15, "deletions": 371}, "files": [{"sha": "2055512a9d515cb8109ea7e01e917864ecc9c463", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "patch": "@@ -863,8 +863,7 @@ dependencies = [\n [[package]]\n name = \"lsp-types\"\n version = \"0.89.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"852e0dedfd52cc32325598b2631e0eba31b7b708959676a9f837042f276b09a2\"\n+source = \"git+https://github.com/gluon-lang/lsp-types#6b43b1f7184ab379f0a6f89673bb10a8de11d12f\"\n dependencies = [\n  \"bitflags\",\n  \"serde\","}, {"sha": "f5016795100d615d8bc166ec4479d5c5b77add9c", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "patch": "@@ -22,7 +22,7 @@ crossbeam-channel = \"0.5.0\"\n dissimilar = \"1.0.2\"\n itertools = \"0.10.0\"\n jod-thread = \"0.1.0\"\n-lsp-types = { version = \"0.89.0\", features = [\"proposed\"] }\n+lsp-types = { git = \"https://github.com/gluon-lang/lsp-types\", features = [\"proposed\"] }\n parking_lot = \"0.11.0\"\n xflags = \"0.2.1\"\n oorandom = \"11.1.2\""}, {"sha": "9d7d48f0bbfa8681b663f7d2195788ec966a8a98", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70061d2b7e7e2ec9d7b0704f18c488985dcd7417/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=70061d2b7e7e2ec9d7b0704f18c488985dcd7417", "patch": "@@ -1,16 +1,16 @@\n //! Lsif generator\n \n use std::env;\n+use std::time::Instant;\n \n use ide::{StaticIndex, StaticIndexedFile, TokenStaticData};\n use ide_db::LineIndexDatabase;\n \n use ide_db::base_db::salsa::{self, ParallelDatabase};\n-use lsp_types::{Hover, HoverContents, NumberOrString};\n+use lsp_types::{lsif::*, Hover, HoverContents, NumberOrString};\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::AbsPathBuf;\n \n-use crate::cli::lsif::lsif_types::{Document, Vertex};\n use crate::cli::{\n     flags,\n     load_cargo::{load_workspace, LoadCargoConfig},\n@@ -27,9 +27,6 @@ impl<DB: ParallelDatabase> Clone for Snap<salsa::Snapshot<DB>> {\n     }\n }\n \n-mod lsif_types;\n-use lsif_types::*;\n-\n #[derive(Default)]\n struct LsifManager {\n     count: i32,\n@@ -57,17 +54,14 @@ impl LsifManager {\n         println!(\"{}\", data);\n     }\n \n-    fn add_tokens(\n-        &mut self,\n-        line_index: &LineIndex,\n-        doc_id: Id,\n-        tokens: Vec<TokenStaticData>,\n-    ) {\n+    fn add_tokens(&mut self, line_index: &LineIndex, doc_id: Id, tokens: Vec<TokenStaticData>) {\n         let tokens_id = tokens\n             .into_iter()\n             .map(|token| {\n-                let token_id = self\n-                    .add(Element::Vertex(Vertex::Range(to_proto::range(line_index, token.range))));\n+                let token_id = self.add(Element::Vertex(Vertex::Range {\n+                    range: to_proto::range(line_index, token.range),\n+                    tag: None,\n+                }));\n                 if let Some(hover) = token.hover {\n                     let hover_id = self.add(Element::Vertex(Vertex::HoverResult {\n                         result: Hover {\n@@ -92,6 +86,8 @@ impl LsifManager {\n \n impl flags::Lsif {\n     pub fn run(self) -> Result<()> {\n+        eprintln!(\"Generating LSIF started...\");\n+        let now = Instant::now();\n         let cargo_config = CargoConfig::default();\n         let no_progress = &|_| ();\n         let load_cargo_config = LoadCargoConfig {\n@@ -111,17 +107,17 @@ impl flags::Lsif {\n         let si = StaticIndex::compute(db, &analysis)?;\n \n         let mut lsif = LsifManager::default();\n-        lsif.add(Element::Vertex(Vertex::MetaData {\n+        lsif.add(Element::Vertex(Vertex::MetaData(MetaData {\n             version: String::from(\"0.5.0\"),\n             project_root: lsp_types::Url::from_file_path(path).unwrap(),\n             position_encoding: Encoding::Utf16,\n             tool_info: None,\n-        }));\n+        })));\n         for StaticIndexedFile { file_id, folds, tokens } in si.files {\n             let path = vfs.file_path(file_id);\n             let path = path.as_path().unwrap();\n             let doc_id = lsif.add(Element::Vertex(Vertex::Document(Document {\n-                language_id: Language::Rust,\n+                language_id: \"rust\".to_string(),\n                 uri: lsp_types::Url::from_file_path(path).unwrap(),\n             })));\n             let text = analysis.file_text(file_id)?;\n@@ -142,6 +138,7 @@ impl flags::Lsif {\n             })));\n             lsif.add_tokens(&line_index, doc_id, tokens);\n         }\n+        eprintln!(\"Generating LSIF finished in {:?}\", now.elapsed());\n         Ok(())\n     }\n }"}, {"sha": "7bb59f6429db0518701d9eebdffb38b14bdf473c", "filename": "crates/rust-analyzer/src/cli/lsif/lsif_types.rs", "status": "removed", "additions": 0, "deletions": 352, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/e803bd25c4adf4c5487e7b0f6495dfab07b11daf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif%2Flsif_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e803bd25c4adf4c5487e7b0f6495dfab07b11daf/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif%2Flsif_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif%2Flsif_types.rs?ref=e803bd25c4adf4c5487e7b0f6495dfab07b11daf", "patch": "@@ -1,352 +0,0 @@\n-//! This module provides LSIF types. This module is a temporary solution\n-//! and it will go to its own repository in future\n-\n-use lsp_types::{FoldingRange, Hover};\n-use serde::{Deserialize, Serialize};\n-\n-pub(crate) type RangeId = lsp_types::NumberOrString;\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(untagged)]\n-pub(crate) enum LocationOrRangeId {\n-    Location(lsp_types::Location),\n-    RangeId(RangeId),\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct Entry {\n-    pub(crate) id: lsp_types::NumberOrString,\n-    #[serde(flatten)]\n-    pub(crate) data: Element,\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-#[serde(tag = \"type\")]\n-pub(crate) enum Element {\n-    Vertex(Vertex),\n-    Edge(Edge),\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-pub(crate) struct ToolInfo {\n-    name: String,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    args: Option<Vec<String>>,\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    version: Option<String>,\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-pub(crate) enum Encoding {\n-    /// Currently only 'utf-16' is supported due to the limitations in LSP.\n-    #[serde(rename = \"utf-16\")]\n-    Utf16,\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-#[serde(tag = \"label\")]\n-pub(crate) enum Vertex {\n-    #[serde(rename_all = \"camelCase\")]\n-    MetaData {\n-        /// The version of the LSIF format using semver notation. See https://semver.org/. Please note\n-        /// the version numbers starting with 0 don't adhere to semver and adopters have to assume\n-        /// that each new version is breaking.\n-        version: String,\n-\n-        /// The project root (in form of an URI) used to compute this dump.\n-        project_root: lsp_types::Url,\n-\n-        /// The string encoding used to compute line and character values in\n-        /// positions and ranges.\n-        position_encoding: Encoding,\n-\n-        /// Information about the tool that created the dump\n-        #[serde(skip_serializing_if = \"Option::is_none\")]\n-        tool_info: Option<ToolInfo>,\n-    },\n-    /// https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md#the-project-vertex\n-    Project(Project),\n-    Document(Document),\n-    /// https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md#ranges\n-    Range(lsp_types::Range),\n-    /// https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md#result-set\n-    ResultSet(ResultSet),\n-\n-    // FIXME: support all kind of results\n-    DefinitionResult {\n-        result: DefinitionResultType,\n-    },\n-    FoldingRangeResult {\n-        result: Vec<FoldingRange>,\n-    },\n-    HoverResult {\n-        result: Hover,\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-#[serde(tag = \"label\")]\n-pub(crate) enum Edge {\n-    Contains(EdgeDataMultiIn),\n-    RefersTo(EdgeData),\n-    Item(Item),\n-\n-    // Methods\n-    #[serde(rename = \"textDocument/definition\")]\n-    Definition(EdgeData),\n-    #[serde(rename = \"textDocument/declaration\")]\n-    Declaration(EdgeData),\n-    #[serde(rename = \"textDocument/hover\")]\n-    Hover(EdgeData),\n-    #[serde(rename = \"textDocument/references\")]\n-    References(EdgeData),\n-    #[serde(rename = \"textDocument/implementation\")]\n-    Implementation(EdgeData),\n-    #[serde(rename = \"textDocument/typeDefinition\")]\n-    TypeDefinition(EdgeData),\n-    #[serde(rename = \"textDocument/foldingRange\")]\n-    FoldingRange(EdgeData),\n-    #[serde(rename = \"textDocument/documentLink\")]\n-    DocumentLink(EdgeData),\n-    #[serde(rename = \"textDocument/documentSymbol\")]\n-    DocumentSymbol(EdgeData),\n-    #[serde(rename = \"textDocument/diagnostic\")]\n-    Diagnostic(EdgeData),\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct EdgeData {\n-    pub(crate) in_v: lsp_types::NumberOrString,\n-    pub(crate) out_v: lsp_types::NumberOrString,\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct EdgeDataMultiIn {\n-    pub(crate) in_vs: Vec<lsp_types::NumberOrString>,\n-    pub(crate) out_v: lsp_types::NumberOrString,\n-}\n-\n-\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(untagged)]\n-pub(crate) enum DefinitionResultType {\n-    Scalar(LocationOrRangeId),\n-    Array(LocationOrRangeId),\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-#[serde(tag = \"property\")]\n-pub(crate) enum Item {\n-    Definition(EdgeData),\n-    Reference(EdgeData),\n-}\n-\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct Document {\n-    pub(crate) uri: lsp_types::Url,\n-    pub(crate) language_id: Language,\n-}\n-\n-/// https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md#result-set\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct ResultSet {\n-    #[serde(skip_serializing_if = \"Option::is_none\")]\n-    key: Option<String>,\n-}\n-\n-/// https://github.com/Microsoft/language-server-protocol/blob/master/indexFormat/specification.md#the-project-vertex\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"camelCase\")]\n-pub(crate) struct Project {\n-    project_file: lsp_types::Url,\n-    language_id: Language,\n-}\n-\n-/// https://github.com/Microsoft/language-server-protocol/issues/213\n-/// For examples, see: https://code.visualstudio.com/docs/languages/identifiers.\n-#[derive(Debug, PartialEq, Serialize, Deserialize)]\n-#[serde(rename_all = \"lowercase\")]\n-pub(crate) enum Language {\n-    Rust,\n-    TypeScript,\n-    #[serde(other)]\n-    Other,\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    #[cfg(unix)]\n-    fn metadata() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(1),\n-            data: Element::Vertex(Vertex::MetaData {\n-                version: String::from(\"0.4.3\"),\n-                project_root: lsp_types::Url::from_file_path(\"/hello/world\").unwrap(),\n-                position_encoding: Encoding::Utf16,\n-                tool_info: Some(ToolInfo {\n-                    name: String::from(\"lsif-tsc\"),\n-                    args: Some(vec![String::from(\"-p\"), String::from(\".\")]),\n-                    version: Some(String::from(\"0.7.2\")),\n-                }),\n-            }),\n-        };\n-        let text = r#\"{\"id\":1,\"type\":\"vertex\",\"label\":\"metaData\",\"version\":\"0.4.3\",\"projectRoot\":\"file:///hello/world\",\"positionEncoding\":\"utf-16\",\"toolInfo\":{\"name\":\"lsif-tsc\",\"args\":[\"-p\",\".\"],\"version\":\"0.7.2\"}}\"#\n-            .replace(' ', \"\");\n-        assert_eq!(serde_json::to_string(&data).unwrap(), text);\n-        assert_eq!(serde_json::from_str::<Entry>(&text).unwrap(), data);\n-    }\n-\n-    #[test]\n-    #[cfg(unix)]\n-    fn document() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(1),\n-            data: Element::Vertex(Vertex::Document(Document {\n-                uri: lsp_types::Url::from_file_path(\"/Users/dirkb/sample.ts\").unwrap(),\n-                language_id: Language::TypeScript,\n-            })),\n-        };\n-\n-        let text = r#\"{ \"id\": 1, \"type\": \"vertex\", \"label\": \"document\", \"uri\": \"file:///Users/dirkb/sample.ts\", \"languageId\": \"typescript\" }\"#\n-            .replace(' ', \"\");\n-\n-        assert_eq!(serde_json::to_string(&data).unwrap(), text);\n-        assert_eq!(serde_json::from_str::<Entry>(&text).unwrap(), data);\n-    }\n-\n-    #[test]\n-    fn range() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(4),\n-            data: Element::Vertex(Vertex::Range(lsp_types::Range::new(\n-                lsp_types::Position::new(0, 9),\n-                lsp_types::Position::new(0, 12),\n-            ))),\n-        };\n-\n-        let text = r#\"{ \"id\": 4, \"type\": \"vertex\", \"label\": \"range\", \"start\": { \"line\": 0, \"character\": 9}, \"end\": { \"line\": 0, \"character\": 12 } }\"#\n-            .replace(' ', \"\");\n-\n-        assert_eq!(serde_json::to_string(&data).unwrap(), text);\n-        assert_eq!(serde_json::from_str::<Entry>(&text).unwrap(), data);\n-    }\n-\n-    #[test]\n-    fn refers_to() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(5),\n-            data: Element::Edge(Edge::RefersTo(EdgeData {\n-                in_v: lsp_types::NumberOrString::Number(2),\n-                out_v: lsp_types::NumberOrString::Number(3),\n-            })),\n-        };\n-\n-        let text = r#\"{ \"id\": 5, \"type\": \"edge\", \"label\": \"refersTo\", \"outV\": 3, \"inV\": 2}\"#\n-            .replace(' ', \"\");\n-\n-        assert_eq!(\n-            serde_json::from_str::<serde_json::Value>(&text).unwrap(),\n-            serde_json::to_value(&data).unwrap()\n-        );\n-    }\n-\n-    #[test]\n-    fn result_set() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(2),\n-            data: Element::Vertex(Vertex::ResultSet(ResultSet { key: None })),\n-        };\n-\n-        let text = r#\"{ \"id\": 2, \"type\": \"vertex\", \"label\": \"resultSet\" }\"#.replace(' ', \"\");\n-\n-        assert_eq!(serde_json::to_string(&data).unwrap(), text);\n-        assert_eq!(serde_json::from_str::<Entry>(&text).unwrap(), data);\n-\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(4),\n-            data: Element::Vertex(Vertex::ResultSet(ResultSet {\n-                key: Some(String::from(\"hello\")),\n-            })),\n-        };\n-\n-        let text = r#\"{ \"id\": 4, \"type\": \"vertex\", \"label\": \"resultSet\", \"key\": \"hello\" }\"#\n-            .replace(' ', \"\");\n-\n-        assert_eq!(serde_json::to_string(&data).unwrap(), text);\n-        assert_eq!(serde_json::from_str::<Entry>(&text).unwrap(), data);\n-    }\n-\n-    #[test]\n-    fn definition() {\n-        let data = Entry {\n-            id: lsp_types::NumberOrString::Number(21),\n-            data: Element::Edge(Edge::Item(Item::Definition(EdgeData {\n-                in_v: lsp_types::NumberOrString::Number(18),\n-                out_v: lsp_types::NumberOrString::Number(16),\n-            }))),\n-        };\n-\n-        let text = r#\"{ \"id\": 21, \"type\": \"edge\", \"label\": \"item\", \"property\": \"definition\", \"outV\": 16, \"inV\": 18}\"#\n-            .replace(' ', \"\");\n-\n-        assert_eq!(\n-            serde_json::from_str::<serde_json::Value>(&text).unwrap(),\n-            serde_json::to_value(&data).unwrap()\n-        );\n-    }\n-\n-    mod methods {\n-        use super::*;\n-\n-        #[test]\n-        fn references() {\n-            let data = Entry {\n-                id: lsp_types::NumberOrString::Number(17),\n-                data: Element::Edge(Edge::References(EdgeData {\n-                    in_v: lsp_types::NumberOrString::Number(16),\n-                    out_v: lsp_types::NumberOrString::Number(15),\n-                })),\n-            };\n-\n-            let text = r#\"{ \"id\": 17, \"type\": \"edge\", \"label\": \"textDocument/references\", \"outV\": 15, \"inV\": 16 }\"#;\n-\n-            assert_eq!(\n-                serde_json::from_str::<serde_json::Value>(&text).unwrap(),\n-                serde_json::to_value(&data).unwrap()\n-            );\n-        }\n-\n-        #[test]\n-        fn definition() {\n-            let data = Entry {\n-                id: lsp_types::NumberOrString::Number(13),\n-                data: Element::Vertex(Vertex::DefinitionResult {\n-                    result: DefinitionResultType::Scalar(LocationOrRangeId::RangeId(\n-                        lsp_types::NumberOrString::Number(7),\n-                    )),\n-                }),\n-            };\n-\n-            let text =\n-                r#\"{ \"id\": 13, \"type\": \"vertex\", \"label\": \"definitionResult\", \"result\": 7 }\"#;\n-\n-            assert_eq!(\n-                serde_json::from_str::<serde_json::Value>(&text).unwrap(),\n-                serde_json::to_value(&data).unwrap()\n-            );\n-        }\n-    }\n-}"}]}