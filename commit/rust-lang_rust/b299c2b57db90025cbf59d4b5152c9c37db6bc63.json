{"sha": "b299c2b57db90025cbf59d4b5152c9c37db6bc63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTljMmI1N2RiOTAwMjVjYmY1OWQ0YjUxNTJjOWMzN2RiNmJjNjM=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-06T17:32:37Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-26T01:41:54Z"}, "message": "Fallout from stabilization", "tree": {"sha": "f3476a915920ef8a42761cb740dc6f4e1f64844f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3476a915920ef8a42761cb740dc6f4e1f64844f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b299c2b57db90025cbf59d4b5152c9c37db6bc63", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b299c2b57db90025cbf59d4b5152c9c37db6bc63", "html_url": "https://github.com/rust-lang/rust/commit/b299c2b57db90025cbf59d4b5152c9c37db6bc63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b299c2b57db90025cbf59d4b5152c9c37db6bc63/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a86f72d9a2adc6d65f2ba0990caca35c1a3f622d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86f72d9a2adc6d65f2ba0990caca35c1a3f622d", "html_url": "https://github.com/rust-lang/rust/commit/a86f72d9a2adc6d65f2ba0990caca35c1a3f622d"}], "stats": {"total": 208, "additions": 105, "deletions": 103}, "files": [{"sha": "ed9310284461c152835662ae78fbd7b3ae84cc8e", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -585,10 +585,10 @@ impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n     fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n }\n \n-impl<T> ExactSize<T> for MoveItems<T> {}\n+impl<T> ExactSizeIterator<T> for MoveItems<T> {}\n \n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n-    fn from_iter<Iter: Iterator<T>>(mut iter: Iter) -> BinaryHeap<T> {\n+    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> BinaryHeap<T> {\n         let vec: Vec<T> = iter.collect();\n         BinaryHeap::from_vec(vec)\n     }"}, {"sha": "903a9bd982324dcae57494bdb36a438149fdc2f1", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -68,7 +68,7 @@ use core::prelude::*;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n-use core::iter::{Chain, Enumerate, Repeat, Skip, Take};\n+use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat};\n use core::iter;\n use core::num::Int;\n use core::slice;\n@@ -88,11 +88,11 @@ fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<\n \n     // have to uselessly pretend to pad the longer one for type matching\n     if a_len < b_len {\n-        (a.mask_words(0).chain(Repeat::new(0u32).enumerate().take(b_len).skip(a_len)),\n-         b.mask_words(0).chain(Repeat::new(0u32).enumerate().take(0).skip(0)))\n+        (a.mask_words(0).chain(repeat(0u32).enumerate().take(b_len).skip(a_len)),\n+         b.mask_words(0).chain(repeat(0u32).enumerate().take(0).skip(0)))\n     } else {\n-        (a.mask_words(0).chain(Repeat::new(0u32).enumerate().take(0).skip(0)),\n-         b.mask_words(0).chain(Repeat::new(0u32).enumerate().take(a_len).skip(b_len)))\n+        (a.mask_words(0).chain(repeat(0u32).enumerate().take(0).skip(0)),\n+         b.mask_words(0).chain(repeat(0u32).enumerate().take(a_len).skip(b_len)))\n     }\n }\n \n@@ -943,7 +943,7 @@ impl<'a> DoubleEndedIterator<bool> for Bits<'a> {\n     }\n }\n \n-impl<'a> ExactSize<bool> for Bits<'a> {}\n+impl<'a> ExactSizeIterator<bool> for Bits<'a> {}\n \n impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n     #[inline]"}, {"sha": "8a6d26c26bf3c0651020e7d0fe3dbc447a84ee4b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -863,7 +863,7 @@ impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n     // Note that the design of these iterators permits an *arbitrary* initial pair of min and max,\n     // making these arbitrary sub-range iterators. However the logic to construct these paths\n     // efficiently is fairly involved, so this is a FIXME. The sub-range iterators also wouldn't be\n-    // able to accurately predict size, so those iterators can't implement ExactSize.\n+    // able to accurately predict size, so those iterators can't implement ExactSizeIterator.\n     fn next(&mut self) -> Option<(K, V)> {\n         loop {\n             // We want the smallest element, so try to get the top of the left stack\n@@ -963,7 +963,7 @@ impl<'a, K, V> Iterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next_back() }\n }\n-impl<'a, K, V> ExactSize<(&'a K, &'a V)> for Entries<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator<(&'a K, &'a V)> for Entries<'a, K, V> {}\n \n \n impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n@@ -973,7 +973,7 @@ impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next_back() }\n }\n-impl<'a, K, V> ExactSize<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {}\n \n \n impl<K, V> Iterator<(K, V)> for MoveEntries<K, V> {\n@@ -983,7 +983,7 @@ impl<K, V> Iterator<(K, V)> for MoveEntries<K, V> {\n impl<K, V> DoubleEndedIterator<(K, V)> for MoveEntries<K, V> {\n     fn next_back(&mut self) -> Option<(K, V)> { self.inner.next_back() }\n }\n-impl<K, V> ExactSize<(K, V)> for MoveEntries<K, V> {}\n+impl<K, V> ExactSizeIterator<(K, V)> for MoveEntries<K, V> {}\n \n \n "}, {"sha": "3f95bda663e1573675bd84c53bbf77b58665553c", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -607,7 +607,7 @@ impl<'a, A> DoubleEndedIterator<&'a A> for Items<'a, A> {\n     }\n }\n \n-impl<'a, A> ExactSize<&'a A> for Items<'a, A> {}\n+impl<'a, A> ExactSizeIterator<&'a A> for Items<'a, A> {}\n \n impl<'a, A> Iterator<&'a mut A> for MutItems<'a, A> {\n     #[inline]\n@@ -645,7 +645,7 @@ impl<'a, A> DoubleEndedIterator<&'a mut A> for MutItems<'a, A> {\n     }\n }\n \n-impl<'a, A> ExactSize<&'a mut A> for MutItems<'a, A> {}\n+impl<'a, A> ExactSizeIterator<&'a mut A> for MutItems<'a, A> {}\n \n /// Allows mutating a `DList` while iterating.\n pub trait ListInsertion<A> {"}, {"sha": "8f0b0d41b03d4836eeceeb3cc1e6b8711a710c57", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -695,8 +695,7 @@ impl<'a, T> DoubleEndedIterator<&'a T> for Items<'a, T> {\n     }\n }\n \n-\n-impl<'a, T> ExactSize<&'a T> for Items<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n \n impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n     #[inline]\n@@ -763,7 +762,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut T> for MutItems<'a, T> {\n     }\n }\n \n-impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a mut T> for MutItems<'a, T> {}\n \n impl<A: PartialEq> PartialEq for RingBuf<A> {\n     fn eq(&self, other: &RingBuf<A>) -> bool {\n@@ -1322,7 +1321,7 @@ mod tests {\n         let u: Vec<int> = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n-        let mut seq = iter::count(0u, 2).take(256);\n+        let seq = iter::count(0u, 2).take(256);\n         let deq: RingBuf<uint> = seq.collect();\n         for (i, &x) in deq.iter().enumerate() {\n             assert_eq!(2*i, x);"}, {"sha": "06e1ee0fc0f18869ae2be53c01927c9d155115e4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -94,7 +94,7 @@ use core::cmp;\n use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n-use core::prelude::{Clone, Greater, Iterator, Less, None, Option};\n+use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n use core::prelude::{Ord, Ordering, RawPtr, Some, range};\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};"}, {"sha": "32059f7808f592fa3dcf8223c01af235cc0a58e1", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -61,7 +61,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::kinds::Sized;\n use core::prelude::{Char, Clone, Eq, Equiv};\n-use core::prelude::{Iterator, SlicePrelude, None, Option, Ord, Ordering};\n+use core::prelude::{Iterator, IteratorExt, SlicePrelude, None, Option, Ord, Ordering};\n use core::prelude::{PartialEq, PartialOrd, Result, AsSlice, Some, Tuple2};\n use core::prelude::{range};\n \n@@ -794,7 +794,7 @@ mod tests {\n     use std::cmp::{Equal, Greater, Less, Ord, PartialOrd, Equiv};\n     use std::option::{Some, None};\n     use std::ptr::RawPtr;\n-    use std::iter::{Iterator, DoubleEndedIterator};\n+    use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n \n     use super::*;\n     use std::slice::{AsSlice, SlicePrelude};\n@@ -2143,12 +2143,15 @@ mod tests {\n         let gr_inds = s.grapheme_indices(true).rev().collect::<Vec<(uint, &str)>>();\n         let b: &[_] = &[(11, \"\\r\\n\"), (6, \"o\u0308\u0332\"), (3, \"e\u0301\"), (0u, \"a\u0310\")];\n         assert_eq!(gr_inds.as_slice(), b);\n-        let mut gr_inds = s.grapheme_indices(true);\n-        let e1 = gr_inds.size_hint();\n-        assert_eq!(e1, (1, Some(13)));\n-        let c = gr_inds.count();\n-        assert_eq!(c, 4);\n-        let e2 = gr_inds.size_hint();\n+        let mut gr_inds_iter = s.grapheme_indices(true);\n+        {\n+            let gr_inds = gr_inds_iter.by_ref();\n+            let e1 = gr_inds.size_hint();\n+            assert_eq!(e1, (1, Some(13)));\n+            let c = gr_inds.count();\n+            assert_eq!(c, 4);\n+        }\n+        let e2 = gr_inds_iter.size_hint();\n         assert_eq!(e2, (0, Some(0)));\n \n         // make sure the reverse iterator does the right thing with \"\\n\" at beginning of string\n@@ -2285,7 +2288,7 @@ mod bench {\n     use test::Bencher;\n     use test::black_box;\n     use super::*;\n-    use std::iter::{Iterator, DoubleEndedIterator};\n+    use std::iter::{IteratorExt, DoubleEndedIteratorExt};\n     use std::str::StrPrelude;\n     use std::slice::SlicePrelude;\n "}, {"sha": "8b4428849d7228cd2fe49d78e3cd8e030d0f0f3e", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -1319,7 +1319,7 @@ impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n     }\n }\n \n-impl<T> ExactSize<T> for MoveItems<T> {}\n+impl<T> ExactSizeIterator<T> for MoveItems<T> {}\n \n #[unsafe_destructor]\n impl<T> Drop for MoveItems<T> {"}, {"sha": "31a46c26e2a73ec82edb01e20d2c653b353541d8", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -17,7 +17,7 @@ pub use self::SignFormat::*;\n use char;\n use char::Char;\n use fmt;\n-use iter::{range, DoubleEndedIterator};\n+use iter::{range, DoubleEndedIteratorExt};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num::cast;\n use result::Ok;"}, {"sha": "605148beb90b131c5e86b03391d419185d30d1ae", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -14,7 +14,7 @@\n \n use any;\n use cell::{Cell, Ref, RefMut};\n-use iter::{Iterator, range};\n+use iter::{Iterator, IteratorExt, range};\n use kinds::{Copy, Sized};\n use mem;\n use option::{Option, Some, None};"}, {"sha": "a441ced03b26ea5e08defdf9cc6611e310f465dc", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -15,7 +15,7 @@\n #![allow(unsigned_negation)]\n \n use fmt;\n-use iter::DoubleEndedIterator;\n+use iter::DoubleEndedIteratorExt;\n use num::{Int, cast};\n use slice::SlicePrelude;\n "}, {"sha": "ce61bd97e1323bd50be31c6311038516bc0927ab", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -25,7 +25,7 @@ use clone::Clone;\n use cmp::{PartialEq, Eq};\n use cmp::{PartialOrd, Ord};\n use intrinsics;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use kinds::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};"}, {"sha": "7d7b41bf7bfd849d4c9a0e0ca1abeed4adbd5701", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -147,7 +147,7 @@ pub use self::Option::*;\n \n use cmp::{Eq, Ord};\n use default::Default;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use mem;\n use result::{Result, Ok, Err};\n use slice;\n@@ -797,7 +797,7 @@ impl<A> DoubleEndedIterator<A> for Item<A> {\n     }\n }\n \n-impl<A> ExactSize<A> for Item<A> {}\n+impl<A> ExactSizeIterator<A> for Item<A> {}\n \n /////////////////////////////////////////////////////////////////////////////\n // FromIterator"}, {"sha": "6678a20087b72fa9300dbbed09726f7b573f259d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -39,7 +39,7 @@ pub use ops::{Slice, SliceMut};\n pub use ops::{Fn, FnMut, FnOnce};\n \n // Reexported functions\n-pub use iter::{range, repeat};\n+pub use iter::range;\n pub use mem::drop;\n pub use str::from_str;\n \n@@ -50,9 +50,10 @@ pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use cmp::{Ordering, Equiv};\n pub use cmp::Ordering::{Less, Equal, Greater};\n-pub use iter::{FromIterator, Extend};\n-pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n-pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n+pub use iter::{FromIterator, Extend, IteratorExt};\n+pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt, RandomAccessIterator};\n+pub use iter::{IteratorCloneExt, CloneIteratorExt};\n+pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n pub use num::{ToPrimitive, FromPrimitive};\n pub use option::Option;\n pub use option::Option::{Some, None};"}, {"sha": "202ac4644975443bd79d384142b4cb3acd7fe149", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -235,7 +235,7 @@ pub use self::Result::*;\n use std::fmt::Show;\n use slice;\n use slice::AsSlice;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use option::{None, Option, Some};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n@@ -831,7 +831,7 @@ impl<A> DoubleEndedIterator<A> for Item<A> {\n     }\n }\n \n-impl<A> ExactSize<A> for Item<A> {}\n+impl<A> ExactSizeIterator<A> for Item<A> {}\n \n /////////////////////////////////////////////////////////////////////////////\n // FromIterator"}, {"sha": "36464e4d29e46b8d7e4c1a4c7a540798064e2c9a", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -1160,7 +1160,7 @@ impl<'a, T> Items<'a, T> {\n iterator!{struct Items -> *const T, &'a T}\n \n #[experimental = \"needs review\"]\n-impl<'a, T> ExactSize<&'a T> for Items<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n \n #[experimental = \"needs review\"]\n impl<'a, T> Clone for Items<'a, T> {\n@@ -1255,7 +1255,7 @@ impl<'a, T> MutItems<'a, T> {\n iterator!{struct MutItems -> *mut T, &'a mut T}\n \n #[experimental = \"needs review\"]\n-impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a mut T> for MutItems<'a, T> {}\n \n /// An abstraction over the splitting iterators, so that splitn, splitn_mut etc\n /// can be implemented once."}, {"sha": "b9586399aec5d19ee143b1358e9df285c8a25aec", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -23,9 +23,9 @@ use char::Char;\n use char;\n use cmp::{Eq, mod};\n use default::Default;\n+use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n+use iter::{DoubleEndedIteratorExt, ExactSizeIterator};\n use iter::range;\n-use iter::{DoubleEndedIterator, ExactSize};\n-use iter::{Map, Iterator};\n use kinds::Sized;\n use mem;\n use num::Int;\n@@ -1210,7 +1210,7 @@ Section: Trait implementations\n #[allow(missing_docs)]\n pub mod traits {\n     use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use option::{Option, Some};\n     use ops;\n     use str::{Str, StrPrelude, eq_slice};"}, {"sha": "74165dcabc4a0eaf1474b9244b2fefa8a9bd5f89", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -710,7 +710,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n \n     let desc_sep = format!(\"\\n{}\", \" \".repeat(24));\n \n-    let mut rows = opts.iter().map(|optref| {\n+    let rows = opts.iter().map(|optref| {\n         let OptGroup{short_name,\n                      long_name,\n                      hint,"}, {"sha": "517b50c49c7ef9478bad3459a7c15070f40a7025", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -11,8 +11,8 @@\n //! The ISAAC random number generator.\n \n use core::prelude::*;\n-use core::iter::{range_step, Repeat};\n use core::slice;\n+use core::iter::{range_step, repeat};\n \n use {Rng, SeedableRng, Rand};\n \n@@ -205,7 +205,7 @@ impl<'a> SeedableRng<&'a [u32]> for IsaacRng {\n     fn reseed(&mut self, seed: &'a [u32]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(Repeat::new(0u32));\n+        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u32));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;\n@@ -438,7 +438,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n     fn reseed(&mut self, seed: &'a [u64]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(Repeat::new(0u64));\n+        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u64));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;"}, {"sha": "b42fb8ccc41f4318885d38bc3c2f2e9278791061", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -154,7 +154,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                                           pats: I,\n                                           pred: CFGIndex) -> CFGIndex {\n         //! Handles case where all of the patterns must match.\n-        let mut pats = pats;\n         pats.fold(pred, |pred, pat| self.pat(&**pat, pred))\n     }\n \n@@ -527,7 +526,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn exprs<'a, I: Iterator<&'a ast::Expr>>(&mut self,\n-                                             mut exprs: I,\n+                                             exprs: I,\n                                              pred: CFGIndex) -> CFGIndex {\n         //! Constructs graph for `exprs` evaluated in order\n         exprs.fold(pred, |p, e| self.expr(e, p))"}, {"sha": "bcfc003480f4300003db5109f2203f6ee0ae23bc", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -93,7 +93,7 @@ impl<'a> fmt::Show for Matrix<'a> {\n }\n \n impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n-    fn from_iter<T: Iterator<Vec<&'a Pat>>>(mut iterator: T) -> Matrix<'a> {\n+    fn from_iter<T: Iterator<Vec<&'a Pat>>>(iterator: T) -> Matrix<'a> {\n         Matrix(iterator.collect())\n     }\n }\n@@ -1091,4 +1091,3 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n         }\n     }\n }\n-"}, {"sha": "7b442fedc2477adc877f6759917eb72a82d4357b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -80,7 +80,7 @@ pub fn join(a: constness, b: constness) -> constness {\n     }\n }\n \n-pub fn join_all<It: Iterator<constness>>(mut cs: It) -> constness {\n+pub fn join_all<It: Iterator<constness>>(cs: It) -> constness {\n     cs.fold(integral_const, |a, b| join(a, b))\n }\n "}, {"sha": "3cb628c2e65c569a5056a73ad30ccff51115eabb", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -233,7 +233,7 @@ fn add_library(sess: &session::Session,\n \n fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n-    if crates.iter().all(|&(_, ref p)| p.is_some()) {\n+    if crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n         Some(crates.into_iter().map(|_| Some(cstore::RequireStatic)).collect())\n     } else {\n         None"}, {"sha": "417e5336249840c9eb67aabab6a177fca6076254", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -80,7 +80,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n     match item.node {\n         ItemFn(..) => {\n             if item.ident.name == ctxt.main_name {\n-                 ctxt.ast_map.with_path(item.id, |mut path| {\n+                 ctxt.ast_map.with_path(item.id, |path| {\n                         if path.count() == 1 {\n                             // This is a top-level function so can be 'main'\n                             if ctxt.main_fn.is_none() {"}, {"sha": "8d4fbfd4cbcccea6740ed68fddd447b5cb2208f3", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -132,7 +132,7 @@ pub fn simple_identifier<'a>(pat: &'a ast::Pat) -> Option<&'a ast::Ident> {\n }\n \n pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path {\n-    ty::with_path(tcx, id, |mut path| ast::Path {\n+    ty::with_path(tcx, id, |path| ast::Path {\n         global: false,\n         segments: path.last().map(|elem| ast::PathSegment {\n             identifier: ast::Ident::new(elem.name()),"}, {"sha": "2c8465e62d7c3257a3cdb1207e7d416e5a2c9360", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -3106,7 +3106,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n     // Iterate until something non-representable is found\n     fn find_nonrepresentable<'tcx, It: Iterator<Ty<'tcx>>>(cx: &ctxt<'tcx>, sp: Span,\n                                                            seen: &mut Vec<Ty<'tcx>>,\n-                                                           mut iter: It)\n+                                                           iter: It)\n                                                            -> Representability {\n         iter.fold(Representable,\n                   |r, ty| cmp::max(r, is_type_structurally_recursive(cx, sp, seen, ty)))\n@@ -3164,7 +3164,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                 let types_a = substs_a.types.get_slice(subst::TypeSpace);\n                 let types_b = substs_b.types.get_slice(subst::TypeSpace);\n \n-                let mut pairs = types_a.iter().zip(types_b.iter());\n+                let pairs = types_a.iter().zip(types_b.iter());\n \n                 pairs.all(|(&a, &b)| same_type(a, b))\n             }"}, {"sha": "754bdc8c8ea013172526fe87b45fd5106045c973", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -4177,7 +4177,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       }\n       ast::ExprMethodCall(ident, ref tps, ref args) => {\n         check_method_call(fcx, expr, ident, args.as_slice(), tps.as_slice(), lvalue_pref);\n-        let mut arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n+        let arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n         let  args_err = arg_tys.fold(false,\n              |rest_err, a| {\n               rest_err || ty::type_is_error(a)});"}, {"sha": "2102133f97d3d52c3e7dd14e1aff19860945198f", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -170,7 +170,7 @@ impl<'a> FmtStrs<'a> {\n         });\n \n         let pairs = fields.iter().zip(values);\n-        let mut strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(\n+        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(\n             if *f == \"qualname\" && v.len() > 0 {\n                 let mut n = self.krate.clone();\n                 n.push_str(\"::\");"}, {"sha": "6fe5298393e7d7d92ca839df2943819312cc2a72", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -2696,7 +2696,7 @@ fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, id: ast::NodeId,\n         // Use provided name\n         Some(name) => name.get().to_string(),\n \n-        _ => ccx.tcx().map.with_path(id, |mut path| {\n+        _ => ccx.tcx().map.with_path(id, |path| {\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n                 path.last().unwrap().to_string()"}, {"sha": "a646b7e1ccbeeac8045f0d1fb7a3d0d11ff63934", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -151,7 +151,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     let def = ty::lookup_trait_def(tcx, did);\n     let trait_items = ty::trait_items(tcx, did).clean(cx);\n     let provided = ty::provided_trait_methods(tcx, did);\n-    let mut items = trait_items.into_iter().map(|trait_item| {\n+    let items = trait_items.into_iter().map(|trait_item| {\n         if provided.iter().any(|a| a.def_id == trait_item.def_id) {\n             clean::ProvidedMethod(trait_item)\n         } else {"}, {"sha": "d523992b4c61752da31138a15b06179274ae0f0e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -422,7 +422,7 @@ impl fmt::Show for clean::Type {\n                        bounds = if decl.bounds.len() == 0 {\n                            \"\".to_string()\n                        } else {\n-                           let mut m = decl.bounds\n+                           let m = decl.bounds\n                                            .iter()\n                                            .map(|s| s.to_string());\n                            format!("}, {"sha": "df25daa3ca1acba0829a537ed7e318f50074b835", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -183,7 +183,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 }\n             };\n \n-            let mut lines = origtext.lines().filter(|l| {\n+            let lines = origtext.lines().filter(|l| {\n                 stripped_filtered_line(*l).is_none()\n             });\n             let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n@@ -325,7 +325,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             let opaque = opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n             let text = str::from_utf8(text).unwrap();\n-            let mut lines = text.lines().map(|l| {\n+            let lines = text.lines().map(|l| {\n                 stripped_filtered_line(l).unwrap_or(l)\n             });\n             let text = lines.collect::<Vec<&str>>().connect(\"\\n\");"}, {"sha": "325bdc284acfc8a08e576d0e05515c34357f474f", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -19,7 +19,7 @@ use alloc::arc::Arc;\n use alloc::boxed::Box;\n use core::any::Any;\n use core::atomic::{AtomicUint, SeqCst};\n-use core::iter::Take;\n+use core::iter::{IteratorExt, Take};\n use core::kinds::marker;\n use core::mem;\n use core::prelude::{Clone, Drop, Err, Iterator, None, Ok, Option, Send, Some};"}, {"sha": "403ca9d14321a0301f722ad321d2cc88440694fe", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -17,7 +17,7 @@\n \n use core::kinds::Sized;\n use fmt;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use mem;\n use option::{Option, Some, None};\n use slice::{SlicePrelude, AsSlice};"}, {"sha": "9c7967d17bb8fcc67288571321b2e34f821c4727", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -20,7 +20,7 @@ use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;\n use fmt::{mod, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{mod, Iterator, FromIterator, Extend};\n+use iter::{mod, Iterator, IteratorExt, FromIterator, Extend};\n use kinds::Sized;\n use mem::{mod, replace};\n use num::UnsignedInt;"}, {"sha": "f6d526cca395d7caba2246ef33dcea14397a2cd2", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -17,7 +17,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, FromIterator, FilterMap, Chain, Repeat, Zip, Extend};\n+use iter::{Iterator, IteratorExt, FromIterator, FilterMap, Chain, Repeat, Zip, Extend, repeat};\n use iter;\n use option::{Some, None};\n use result::{Ok, Err};\n@@ -262,7 +262,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n-        Repeat::new(other).zip(self.iter())\n+        repeat(other).zip(self.iter())\n             .filter_map(|(other, elt)| {\n                 if !other.contains(elt) { Some(elt) } else { None }\n             })\n@@ -314,7 +314,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>)\n         -> SetAlgebraItems<'a, T, H> {\n-        Repeat::new(other).zip(self.iter())\n+        repeat(other).zip(self.iter())\n             .filter_map(|(other, elt)| {\n                 if other.contains(elt) { Some(elt) } else { None }\n             })"}, {"sha": "4b868f6a95b7c73cb6fc566ed2e90f816ae41299", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -21,7 +21,7 @@ A simple wrapper over the platform's dynamic library facilities\n \n use clone::Clone;\n use c_str::ToCStr;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use mem;\n use ops::*;\n use option::*;\n@@ -280,7 +280,7 @@ pub mod dl {\n #[cfg(target_os = \"windows\")]\n pub mod dl {\n     use c_str::ToCStr;\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use libc;\n     use os;\n     use ptr;"}, {"sha": "025033a112c0cb51ed81181af6a20d89e53d2345", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -14,7 +14,7 @@\n \n use cmp;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::ExactSize;\n+use iter::ExactSizeIterator;\n use ops::Drop;\n use option::{Some, None, Option};\n use result::{Ok, Err};"}, {"sha": "a25674030aeacd3d7f8a179e983c43cdcb4fa0d9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -233,7 +233,7 @@ use default::Default;\n use error::{FromError, Error};\n use fmt;\n use int;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n use option::{Option, Some, None};"}, {"sha": "d6a48fd39e6239bcc4998cf9dd83f42a6fce216e", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -23,7 +23,7 @@ pub use self::SocketType::*;\n pub use self::Flag::*;\n pub use self::Protocol::*;\n \n-use iter::Iterator;\n+use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n use option::{Option, Some, None};"}, {"sha": "4812e911cc4812ce6497a56ff0306e41700551bc", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -20,7 +20,7 @@ pub use self::IpAddr::*;\n use fmt;\n use io::{mod, IoResult, IoError};\n use io::net;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use option::{Option, None, Some};\n use result::{Ok, Err};\n use str::{FromStr, StrPrelude};"}, {"sha": "8ba91684d0438abf51f943860f36b6621def002e", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -19,7 +19,6 @@\n \n use clone::Clone;\n use io::IoResult;\n-use iter::Iterator;\n use result::Err;\n use io::net::ip::{SocketAddr, ToSocketAddr};\n use io::{Reader, Writer, Listener, Acceptor};"}, {"sha": "e6dd20f63fbbcedea53287bca0ba69f489cc5365", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -35,7 +35,6 @@ use failure::LOCAL_STDERR;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n-use iter::Iterator;\n use kinds::Send;\n use libc;\n use mem;"}, {"sha": "3019e86575aac930cf0ef1619afce8e68aae374d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -39,7 +39,7 @@ use clone::Clone;\n use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use libc::{c_void, c_int};\n use libc;\n use boxed::Box;"}, {"sha": "078a9b1518ffd31bf903b078629400ad9d252c4c", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -71,7 +71,7 @@ use core::kinds::Sized;\n use c_str::CString;\n use clone::Clone;\n use fmt;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use option::{Option, None, Some};\n use str;\n use str::{MaybeOwned, Str, StrPrelude};"}, {"sha": "027ac029288562c729ce8f781bd1ee16fd6def09", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -15,9 +15,10 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{DoubleEndedIterator, AdditiveIterator, Extend, Iterator, Map};\n-use kinds::Sized;\n+use iter::{DoubleEndedIteratorExt, AdditiveIterator, Extend};\n+use iter::{Iterator, IteratorExt, Map};\n use option::{Option, None, Some};\n+use kinds::Sized;\n use str::{FromStr, Str};\n use str;\n use slice::{CloneSliceAllocPrelude, Splits, AsSlice, VectorVector,"}, {"sha": "334227f42bbef57937cf4aab2dc3eeacc06b831b", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -20,7 +20,8 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{AdditiveIterator, DoubleEndedIterator, Extend, Iterator, Map};\n+use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n+use iter::{Iterator, IteratorExt, Map};\n use mem;\n use option::{Option, Some, None};\n use slice::{AsSlice, SlicePrelude};"}, {"sha": "82691b111a80b1b6405cd363282c553d2e9ac62f", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -50,7 +50,7 @@\n #[doc(no_inline)] pub use ops::{Fn, FnMut, FnOnce};\n \n // Reexported functions\n-#[doc(no_inline)] pub use iter::{range, repeat};\n+#[doc(no_inline)] pub use iter::range;\n #[doc(no_inline)] pub use mem::drop;\n #[doc(no_inline)] pub use str::from_str;\n \n@@ -64,10 +64,11 @@\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Equiv};\n #[doc(no_inline)] pub use cmp::Ordering::{Less, Equal, Greater};\n-#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSize};\n-#[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n-#[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n-#[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};\n+#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSizeIterator};\n+#[doc(no_inline)] pub use iter::{Iterator, IteratorExt, DoubleEndedIterator};\n+#[doc(no_inline)] pub use iter::{DoubleEndedIteratorExt, CloneIteratorExt};\n+#[doc(no_inline)] pub use iter::{RandomAccessIterator, IteratorCloneExt};\n+#[doc(no_inline)] pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator};\n #[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n #[doc(no_inline)] pub use option::Option;"}, {"sha": "da690f5d154df658ea66267c5e4b9ab47142ef80", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -224,7 +224,7 @@\n use cell::RefCell;\n use clone::Clone;\n use io::IoResult;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use mem;\n use rc::Rc;\n use result::{Ok, Err};"}, {"sha": "4f6c1f8a2c61a326b0f9f8e1bd5e16c47422fe4d", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -13,7 +13,7 @@\n #![allow(non_camel_case_types)]\n \n use io::{IoResult, Writer};\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use option::{Some, None};\n use os;\n use result::{Ok, Err};\n@@ -388,7 +388,7 @@ mod imp {\n \n     #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n-        use iter::Iterator;\n+        use iter::IteratorExt;\n         use os;\n         use path::GenericPath;\n         use ptr::RawPtr;"}, {"sha": "e46765f25b8aa67e311e696ee2fa1c0fbbf30ea2", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -131,7 +131,7 @@ extern \"system\" {\n \n pub mod compat {\n     use intrinsics::{atomic_store_relaxed, transmute};\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n     use prelude::*;\n "}, {"sha": "4a6ae0b7e9eb241c30226f3f646400de8b059281", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -124,7 +124,7 @@ impl Process {\n         use libc::funcs::extra::msvcrt::get_osfhandle;\n \n         use mem;\n-        use iter::Iterator;\n+        use iter::{Iterator, IteratorExt};\n         use str::StrPrelude;\n \n         if cfg.gid().is_some() || cfg.uid().is_some() {"}, {"sha": "6b97b931ef7c6a36d24ad15a9f772a7aeee6b9e2", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -87,7 +87,7 @@ impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n /// The type of the iterator used by with_path.\n pub type PathElems<'a, 'b> = iter::Chain<Values<'a, PathElem>, LinkedPath<'b>>;\n \n-pub fn path_to_string<PI: Iterator<PathElem>>(mut path: PI) -> String {\n+pub fn path_to_string<PI: Iterator<PathElem>>(path: PI) -> String {\n     let itr = token::get_ident_interner();\n \n     path.fold(String::new(), |mut s, e| {"}, {"sha": "4f718555d533183bfe8608dc968ab36eb0314289", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -131,7 +131,7 @@ fn fold_item_underscore(cx: &mut Context, item: ast::Item_) -> ast::Item_ {\n             ast::ItemStruct(fold_struct(cx, def), generics)\n         }\n         ast::ItemEnum(def, generics) => {\n-            let mut variants = def.variants.into_iter().filter_map(|v| {\n+            let variants = def.variants.into_iter().filter_map(|v| {\n                 if !(cx.in_cfg)(v.node.attrs.as_slice()) {\n                     None\n                 } else {\n@@ -273,4 +273,3 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n         attr::cfg_matches(diagnostic, cfg, &*mis[0])\n     })\n }\n-"}, {"sha": "8d0d399fa31531a91693530166f2dabdf517c1df", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -210,7 +210,7 @@ pub struct MacItems {\n }\n \n impl MacItems {\n-    pub fn new<I: Iterator<P<ast::Item>>>(mut it: I) -> Box<MacResult+'static> {\n+    pub fn new<I: Iterator<P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n         box MacItems { items: it.collect() } as Box<MacResult+'static>\n     }\n }"}, {"sha": "490246f8246f5f539a5fe76078912e3da645d0a6", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -580,7 +580,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         let slicename = self.ecx.ident_of(\"__args_vec\");\n         {\n             let args = names.into_iter().map(|a| a.unwrap());\n-            let mut args = locals.into_iter().chain(args);\n+            let args = locals.into_iter().chain(args);\n             let args = self.ecx.expr_vec_slice(self.fmtsp, args.collect());\n             lets.push(self.ecx.stmt_let(self.fmtsp, false, slicename, args));\n         }"}, {"sha": "b31b20c80c2baeff5968f610495fb93e03fc08bf", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -145,7 +145,7 @@ impl<T: PartialEq> PartialEq for OwnedSlice<T> {\n impl<T: Eq> Eq for OwnedSlice<T> {}\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iter<I: Iterator<T>>(mut iter: I) -> OwnedSlice<T> {\n+    fn from_iter<I: Iterator<T>>(iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())\n     }\n }"}, {"sha": "03a50409d7e520f621b740d517124fbdacc95c82", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b299c2b57db90025cbf59d4b5152c9c37db6bc63/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=b299c2b57db90025cbf59d4b5152c9c37db6bc63", "patch": "@@ -20,7 +20,8 @@\n use self::GraphemeState::*;\n use core::cmp;\n use core::slice::SlicePrelude;\n-use core::iter::{Filter, AdditiveIterator, Iterator, DoubleEndedIterator};\n+use core::iter::{Filter, AdditiveIterator, Iterator, IteratorExt};\n+use core::iter::{DoubleEndedIterator, DoubleEndedIteratorExt};\n use core::kinds::Sized;\n use core::option::{Option, None, Some};\n use core::str::{CharSplits, StrPrelude};"}]}