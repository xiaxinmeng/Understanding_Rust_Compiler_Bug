{"sha": "28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YTNjODgxNTc2ZWUwOWZlOGFiOWRmZmY0YTE1ZmZiODllMWMxNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-18T09:04:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-21T08:42:25Z"}, "message": "pacify the merciless acrichto (somewhat)\n\nAlso add a comment or two to pacify the merciless self-critic, who hates\na closure without a comment.", "tree": {"sha": "087bc3f3bc684316853a206f6395cb1948be2ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087bc3f3bc684316853a206f6395cb1948be2ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "html_url": "https://github.com/rust-lang/rust/commit/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf624c413f3eb593bd90496595900990b320f30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf624c413f3eb593bd90496595900990b320f30a", "html_url": "https://github.com/rust-lang/rust/commit/bf624c413f3eb593bd90496595900990b320f30a"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "bbe038509e3a45344e95701e0427b2061ddd6d44", "filename": "src/compiletest/json.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149/src%2Fcompiletest%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149/src%2Fcompiletest%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fjson.rs?ref=28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "patch": "@@ -69,8 +69,7 @@ fn parse_line(file_name: &str, line: &str) -> Vec<Error> {\n                 expected_errors\n             }\n             Err(error) => {\n-                println!(\"failed to decode compiler output as json: `{}`\", error);\n-                panic!(\"failed to decode compiler output as json\");\n+                panic!(\"failed to decode compiler output as json: `{}`\", error);\n             }\n         }\n     } else {\n@@ -82,10 +81,19 @@ fn push_expected_errors(expected_errors: &mut Vec<Error>,\n                         diagnostic: &Diagnostic,\n                         file_name: &str) {\n     // We only consider messages pertaining to the current file.\n-    let matching_spans =\n-        || diagnostic.spans.iter().filter(|span| span.file_name == file_name);\n-    let with_code =\n-        |span: &DiagnosticSpan, text: &str| match diagnostic.code {\n+    let matching_spans = || {\n+        diagnostic.spans.iter().filter(|span| span.file_name == file_name)\n+    };\n+\n+    // We break the output into multiple lines, and then append the\n+    // [E123] to every line in the output. This may be overkill.  The\n+    // intention was to match existing tests that do things like \"//|\n+    // found `i32` [E123]\" and expect to match that somewhere, and yet\n+    // also ensure that `//~ ERROR E123` *always* works. The\n+    // assumption is that these multi-line error messages are on their\n+    // way out anyhow.\n+    let with_code = |span: &DiagnosticSpan, text: &str| {\n+        match diagnostic.code {\n             Some(ref code) =>\n                 // FIXME(#33000) -- it'd be better to use a dedicated\n                 // UI harness than to include the line/col number like\n@@ -105,7 +113,8 @@ fn push_expected_errors(expected_errors: &mut Vec<Error>,\n                         span.line_start, span.column_start,\n                         span.line_end, span.column_end,\n                         text),\n-        };\n+        }\n+    };\n \n     // Convert multi-line messages into multiple expected\n     // errors. We expect to replace these with something"}, {"sha": "821617bfe89dfb84dd9af031607098758c62d3e7", "filename": "src/libsyntax/errors/json.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a3c881576ee09fe8ab9dfff4a15ffb89e1c149/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=28a3c881576ee09fe8ab9dfff4a15ffb89e1c149", "patch": "@@ -237,14 +237,12 @@ impl DiagnosticSpan {\n                                                            None,\n                                                            backtrace,\n                                                            je);\n-                         let def_site_span =\n-                             bt.def_site_span\n-                               .map(|sp| {\n-                                   Self::from_span_and_backtrace(sp,\n-                                                                 None,\n-                                                                 vec![].into_iter(),\n-                                                                 je)\n-                               });\n+                         let def_site_span = bt.def_site_span.map(|sp| {\n+                             Self::from_span_and_backtrace(sp,\n+                                                           None,\n+                                                           vec![].into_iter(),\n+                                                           je)\n+                         });\n                          Box::new(DiagnosticSpanMacroExpansion {\n                              span: call_site,\n                              macro_decl_name: bt.macro_decl_name,"}]}