{"sha": "802c897eb3c95e6643bd4e2cd85052786458e3d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMmM4OTdlYjNjOTVlNjY0M2JkNGUyY2Q4NTA1Mjc4NjQ1OGUzZDg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-08T13:44:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-02-08T14:37:29Z"}, "message": "review comments: (marginally) reduce memory consumtion", "tree": {"sha": "ad478fe0cbcb25fa8ec6be0cf7da2b995a101ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad478fe0cbcb25fa8ec6be0cf7da2b995a101ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802c897eb3c95e6643bd4e2cd85052786458e3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802c897eb3c95e6643bd4e2cd85052786458e3d8", "html_url": "https://github.com/rust-lang/rust/commit/802c897eb3c95e6643bd4e2cd85052786458e3d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802c897eb3c95e6643bd4e2cd85052786458e3d8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb6a2a9729dd0f948fc30e391e32c0a51d3d0a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb6a2a9729dd0f948fc30e391e32c0a51d3d0a7", "html_url": "https://github.com/rust-lang/rust/commit/7eb6a2a9729dd0f948fc30e391e32c0a51d3d0a7"}], "stats": {"total": 80, "additions": 68, "deletions": 12}, "files": [{"sha": "82e9a1e3c895b35a3957fb3a5f9b861d4e83aa92", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -512,6 +512,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             ObligationCauseCode::MatchExpressionArm {\n                 source,\n                 ref prior_arms,\n+                last_ty,\n                 ..\n             } => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n@@ -522,13 +523,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 _ => {\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n-                    if prior_arms.len() < 4 {\n-                        for (sp, ty) in prior_arms {\n-                            err.span_label(*sp, format!(\"this is found to be of type `{}`\", ty));\n+                    if prior_arms.len() <= 4 {\n+                        for sp in prior_arms {\n+                            err.span_label(*sp, format!(\n+                                \"this is found to be of type `{}`\",\n+                                last_ty,\n+                            ));\n                         }\n-                    } else if let Some((sp, ty)) = prior_arms.last() {\n+                    } else if let Some(sp) = prior_arms.last() {\n                         err.span_label(*sp, format!(\n-                            \"this and all prior arms are found to be of type `{}`\", ty,\n+                            \"this and all prior arms are found to be of type `{}`\", last_ty,\n                         ));\n                     }\n                 }"}, {"sha": "7fc27ba735e4747111ff156c99c9a64916f2f85d", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -224,7 +224,8 @@ pub enum ObligationCauseCode<'tcx> {\n     MatchExpressionArm {\n         arm_span: Span,\n         source: hir::MatchSource,\n-        prior_arms: Vec<(Span, Ty<'tcx>)>,\n+        prior_arms: Vec<Span>,\n+        last_ty: Ty<'tcx>,\n     },\n \n     /// Computing common supertype in the pattern guard for the arms of a match expression"}, {"sha": "8bbeec0b8ac2b0a75bfb760844e6b2d2078ed7f1", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -517,11 +517,16 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 arm_span,\n                 source,\n                 ref prior_arms,\n+                last_ty,\n             } => {\n-                let prior_arms = prior_arms.iter().filter_map(|(sp, ty)| {\n-                    tcx.lift(ty).map(|ty| (*sp, ty))\n-                }).collect();\n-                Some(super::MatchExpressionArm { arm_span, source, prior_arms })\n+                tcx.lift(&last_ty).map(|last_ty| {\n+                    super::MatchExpressionArm {\n+                        arm_span,\n+                        source,\n+                        prior_arms: prior_arms.clone(),\n+                        last_ty,\n+                    }\n+                })\n             }\n             super::MatchExpressionArmPattern { span, ty } => {\n                 tcx.lift(&ty).map(|ty| super::MatchExpressionArmPattern { span, ty })"}, {"sha": "cfc7cedc5e3e5036e2f8c8ced9038973f3a3104f", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -690,6 +690,7 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n         };\n \n         let mut other_arms = vec![];  // used only for diagnostics\n+        let mut prior_arm_ty = None;\n         for (i, (arm, pats_diverge)) in arms.iter().zip(all_arm_pats_diverge).enumerate() {\n             if let Some(ref g) = arm.guard {\n                 self.diverges.set(pats_diverge);\n@@ -730,11 +731,16 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                         arm_span,\n                         source: match_src,\n                         prior_arms: other_arms.clone(),\n+                        last_ty: prior_arm_ty.unwrap(),\n                     })\n                 };\n                 coercion.coerce(self, &cause, &arm.body, arm_ty);\n             }\n-            other_arms.push((arm_span, arm_ty));\n+            other_arms.push(arm_span);\n+            if other_arms.len() > 5 {\n+                other_arms.remove(0);\n+            }\n+            prior_arm_ty = Some(arm_ty);\n         }\n \n         // We won't diverge unless the discriminant or all arms diverge."}, {"sha": "b4b84ef8f1cec796aaf37632c69f2f52437ff839", "filename": "src/test/ui/match/match-type-err-first-arm.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.rs?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -25,3 +25,21 @@ fn test_func2(n: i32) -> i32 {\n     };\n     x\n }\n+\n+fn test_func3(n: i32) -> i32 {\n+    let x = match n {\n+    //~^ NOTE `match` arms have incompatible types\n+        1 => 'b',\n+        2 => 'b',\n+        3 => 'b',\n+        4 => 'b',\n+        5 => 'b',\n+        6 => 'b',\n+        //~^ NOTE this and all prior arms are found to be of type `char`\n+        _ => 42,\n+        //~^ ERROR match arms have incompatible types\n+        //~| NOTE expected char, found integer\n+        //~| NOTE expected type `char`\n+    };\n+    x\n+}"}, {"sha": "db8bef8dc77555f2964e1192d11efcb2d503bf35", "filename": "src/test/ui/match/match-type-err-first-arm.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/802c897eb3c95e6643bd4e2cd85052786458e3d8/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-type-err-first-arm.stderr?ref=802c897eb3c95e6643bd4e2cd85052786458e3d8", "patch": "@@ -26,6 +26,28 @@ LL | |     };\n    = note: expected type `char`\n               found type `{integer}`\n \n-error: aborting due to 2 previous errors\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/match-type-err-first-arm.rs:39:14\n+   |\n+LL |       let x = match n {\n+   |  _____________-\n+LL | |     //~^ NOTE `match` arms have incompatible types\n+LL | |         1 => 'b',\n+LL | |         2 => 'b',\n+...  |\n+LL | |         6 => 'b',\n+   | |              --- this and all prior arms are found to be of type `char`\n+LL | |         //~^ NOTE this and all prior arms are found to be of type `char`\n+LL | |         _ => 42,\n+   | |              ^^ expected char, found integer\n+...  |\n+LL | |         //~| NOTE expected type `char`\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `char`\n+              found type `{integer}`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}