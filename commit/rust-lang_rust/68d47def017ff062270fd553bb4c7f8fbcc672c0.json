{"sha": "68d47def017ff062270fd553bb4c7f8fbcc672c0", "node_id": "C_kwDOAAsO6NoAKDY4ZDQ3ZGVmMDE3ZmYwNjIyNzBmZDU1M2JiNGM3ZjhmYmNjNjcyYzA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-17T19:07:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-17T19:07:10Z"}, "message": "Rollup merge of #92960 - scottmcm:carrying-bignum, r=Mark-Simulacrum\n\nUse `carrying_{mul|add}` in `num::bignum`\n\nNow that we have (unstable) methods for this, we don't need the bespoke trait methods for it in the `bignum` implementation.\n\ncc #85532", "tree": {"sha": "8a54ed3035f97f62f60564089a2ba1bfecc32f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a54ed3035f97f62f60564089a2ba1bfecc32f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68d47def017ff062270fd553bb4c7f8fbcc672c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5b5eCRBK7hj4Ov3rIwAAmXgIAHxnGRWKPUnwGNAK0qgqETEM\nGA/JW4Z3JiEc6sFKBpUKjNVYfoM9E8vBLBTYjMW37Z88ev8KTGxtHzhfEYDTwY74\nTX6kl13xFmDQev/8pL/2jFV5gX2SycoYn2xJdeTFdlLdydW5+Z+cIFsdF0vvwGxv\nUBnoknGgoxnhm+pT3DSA/uiZQ6qXZla8Qy4X+2jTvGiiQFenEvfEBEh1rzQSoOz4\nr8U1u0AA+SxhLb/wrnI9o5GlYl4lkKL3/SjELIufHDZznAWsHAzlYwhWoqrFMOQY\nYkkzkaOK6/MjoXCLiAk+nVpiH4plV8FYCTr/5rqKANnEeP7jGYDEwIiI/Rrz77c=\n=M8Df\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a54ed3035f97f62f60564089a2ba1bfecc32f0b\nparent 731af702173315695c1718f4dfafc40eea335bba\nparent e0e15c9747a0b5be0419a86d1b46ddf27c82820b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642446430 +0100\ncommitter GitHub <noreply@github.com> 1642446430 +0100\n\nRollup merge of #92960 - scottmcm:carrying-bignum, r=Mark-Simulacrum\n\nUse `carrying_{mul|add}` in `num::bignum`\n\nNow that we have (unstable) methods for this, we don't need the bespoke trait methods for it in the `bignum` implementation.\n\ncc #85532\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68d47def017ff062270fd553bb4c7f8fbcc672c0", "html_url": "https://github.com/rust-lang/rust/commit/68d47def017ff062270fd553bb4c7f8fbcc672c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68d47def017ff062270fd553bb4c7f8fbcc672c0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731af702173315695c1718f4dfafc40eea335bba", "url": "https://api.github.com/repos/rust-lang/rust/commits/731af702173315695c1718f4dfafc40eea335bba", "html_url": "https://github.com/rust-lang/rust/commit/731af702173315695c1718f4dfafc40eea335bba"}, {"sha": "e0e15c9747a0b5be0419a86d1b46ddf27c82820b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e15c9747a0b5be0419a86d1b46ddf27c82820b", "html_url": "https://github.com/rust-lang/rust/commit/e0e15c9747a0b5be0419a86d1b46ddf27c82820b"}], "stats": {"total": 42, "additions": 5, "deletions": 37}, "files": [{"sha": "de85fdd6ed2462dcd48c83e7d90144ff34089f34", "filename": "library/core/src/num/bignum.rs", "status": "modified", "additions": 5, "deletions": 37, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/68d47def017ff062270fd553bb4c7f8fbcc672c0/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68d47def017ff062270fd553bb4c7f8fbcc672c0/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs?ref=68d47def017ff062270fd553bb4c7f8fbcc672c0", "patch": "@@ -19,18 +19,8 @@\n )]\n #![macro_use]\n \n-use crate::intrinsics;\n-\n /// Arithmetic operations required by bignums.\n pub trait FullOps: Sized {\n-    /// Returns `(carry', v')` such that `carry' * 2^W + v' = self + other + carry`,\n-    /// where `W` is the number of bits in `Self`.\n-    fn full_add(self, other: Self, carry: bool) -> (bool /* carry */, Self);\n-\n-    /// Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + carry`,\n-    /// where `W` is the number of bits in `Self`.\n-    fn full_mul(self, other: Self, carry: Self) -> (Self /* carry */, Self);\n-\n     /// Returns `(carry', v')` such that `carry' * 2^W + v' = self * other + other2 + carry`,\n     /// where `W` is the number of bits in `Self`.\n     fn full_mul_add(self, other: Self, other2: Self, carry: Self) -> (Self /* carry */, Self);\n@@ -45,22 +35,6 @@ macro_rules! impl_full_ops {\n     ($($ty:ty: add($addfn:path), mul/div($bigty:ident);)*) => (\n         $(\n             impl FullOps for $ty {\n-                fn full_add(self, other: $ty, carry: bool) -> (bool, $ty) {\n-                    // This cannot overflow; the output is between `0` and `2 * 2^nbits - 1`.\n-                    // FIXME: will LLVM optimize this into ADC or similar?\n-                    let (v, carry1) = intrinsics::add_with_overflow(self, other);\n-                    let (v, carry2) = intrinsics::add_with_overflow(v, if carry {1} else {0});\n-                    (carry1 || carry2, v)\n-                }\n-\n-                fn full_mul(self, other: $ty, carry: $ty) -> ($ty, $ty) {\n-                    // This cannot overflow;\n-                    // the output is between `0` and `2^nbits * (2^nbits - 1)`.\n-                    // FIXME: will LLVM optimize this into ADC or similar?\n-                    let v = (self as $bigty) * (other as $bigty) + (carry as $bigty);\n-                    ((v >> <$ty>::BITS) as $ty, v as $ty)\n-                }\n-\n                 fn full_mul_add(self, other: $ty, other2: $ty, carry: $ty) -> ($ty, $ty) {\n                     // This cannot overflow;\n                     // the output is between `0` and `2^nbits * (2^nbits - 1)`.\n@@ -173,12 +147,11 @@ macro_rules! define_bignum {\n             pub fn add<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use crate::cmp;\n                 use crate::iter;\n-                use crate::num::bignum::FullOps;\n \n                 let mut sz = cmp::max(self.size, other.size);\n                 let mut carry = false;\n                 for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n-                    let (c, v) = (*a).full_add(*b, carry);\n+                    let (v, c) = (*a).carrying_add(*b, carry);\n                     *a = v;\n                     carry = c;\n                 }\n@@ -191,13 +164,11 @@ macro_rules! define_bignum {\n             }\n \n             pub fn add_small(&mut self, other: $ty) -> &mut $name {\n-                use crate::num::bignum::FullOps;\n-\n-                let (mut carry, v) = self.base[0].full_add(other, false);\n+                let (v, mut carry) = self.base[0].carrying_add(other, false);\n                 self.base[0] = v;\n                 let mut i = 1;\n                 while carry {\n-                    let (c, v) = self.base[i].full_add(0, carry);\n+                    let (v, c) = self.base[i].carrying_add(0, carry);\n                     self.base[i] = v;\n                     carry = c;\n                     i += 1;\n@@ -212,12 +183,11 @@ macro_rules! define_bignum {\n             pub fn sub<'a>(&'a mut self, other: &$name) -> &'a mut $name {\n                 use crate::cmp;\n                 use crate::iter;\n-                use crate::num::bignum::FullOps;\n \n                 let sz = cmp::max(self.size, other.size);\n                 let mut noborrow = true;\n                 for (a, b) in iter::zip(&mut self.base[..sz], &other.base[..sz]) {\n-                    let (c, v) = (*a).full_add(!*b, noborrow);\n+                    let (v, c) = (*a).carrying_add(!*b, noborrow);\n                     *a = v;\n                     noborrow = c;\n                 }\n@@ -229,12 +199,10 @@ macro_rules! define_bignum {\n             /// Multiplies itself by a digit-sized `other` and returns its own\n             /// mutable reference.\n             pub fn mul_small(&mut self, other: $ty) -> &mut $name {\n-                use crate::num::bignum::FullOps;\n-\n                 let mut sz = self.size;\n                 let mut carry = 0;\n                 for a in &mut self.base[..sz] {\n-                    let (c, v) = (*a).full_mul(other, carry);\n+                    let (v, c) = (*a).carrying_mul(other, carry);\n                     *a = v;\n                     carry = c;\n                 }"}]}