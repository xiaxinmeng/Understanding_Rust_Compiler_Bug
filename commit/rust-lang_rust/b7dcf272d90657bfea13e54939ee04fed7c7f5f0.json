{"sha": "b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZGNmMjcyZDkwNjU3YmZlYTEzZTU0OTM5ZWUwNGZlZDdjN2Y1ZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-13T00:23:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-08-16T01:09:16Z"}, "message": "core: Fill out issues for unstable features", "tree": {"sha": "cdea478a10b63039317b56c9ce427f6fb67db182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdea478a10b63039317b56c9ce427f6fb67db182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "html_url": "https://github.com/rust-lang/rust/commit/b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6634777ae0a89a535d7b43cd95c227724818a260", "url": "https://api.github.com/repos/rust-lang/rust/commits/6634777ae0a89a535d7b43cd95c227724818a260", "html_url": "https://github.com/rust-lang/rust/commit/6634777ae0a89a535d7b43cd95c227724818a260"}], "stats": {"total": 275, "additions": 174, "deletions": 101}, "files": [{"sha": "899e32d29a65b8ab3855d2fbdd2017609f6a0af4", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -91,7 +91,8 @@ use marker::{Reflect, Sized};\n pub trait Any: Reflect + 'static {\n     /// Gets the `TypeId` of `self`.\n     #[unstable(feature = \"get_type_id\",\n-               reason = \"this method will likely be replaced by an associated static\")]\n+               reason = \"this method will likely be replaced by an associated static\",\n+               issue = \"27745\")]\n     fn get_type_id(&self) -> TypeId;\n }\n "}, {"sha": "85a2d2c23f8cc28d9537cf877b34e7fdecd66e9c", "filename": "src/libcore/array.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -16,7 +16,8 @@\n \n #![unstable(feature = \"fixed_size_array\",\n             reason = \"traits and impls are better expressed through generic \\\n-                      integer constants\")]\n+                      integer constants\",\n+            issue = \"27778\")]\n \n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};"}, {"sha": "06eb22278080a366b9a9854cd2d6e63d7d1a9487", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -230,7 +230,7 @@ impl<T:Copy> Cell<T> {\n     /// let uc = unsafe { c.as_unsafe_cell() };\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\")]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -278,7 +278,7 @@ pub struct RefCell<T: ?Sized> {\n \n /// An enumeration of values returned from the `state` method on a `RefCell<T>`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n-#[unstable(feature = \"borrow_state\")]\n+#[unstable(feature = \"borrow_state\", issue = \"27733\")]\n pub enum BorrowState {\n     /// The cell is currently being read, there is at least one active `borrow`.\n     Reading,\n@@ -340,7 +340,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// The returned value can be dispatched on to determine if a call to\n     /// `borrow` or `borrow_mut` would succeed.\n-    #[unstable(feature = \"borrow_state\")]\n+    #[unstable(feature = \"borrow_state\", issue = \"27733\")]\n     #[inline]\n     pub fn borrow_state(&self) -> BorrowState {\n         match self.borrow.get() {\n@@ -449,7 +449,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     #[inline]\n-    #[unstable(feature = \"as_unsafe_cell\")]\n+    #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n     pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n         &self.value\n     }\n@@ -556,7 +556,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// with the widespread use of `r.borrow().clone()` to clone the contents of\n     /// a `RefCell`.\n     #[unstable(feature = \"cell_extras\",\n-               reason = \"likely to be moved to a method, pending language changes\")]\n+               reason = \"likely to be moved to a method, pending language changes\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn clone(orig: &Ref<'b, T>) -> Ref<'b, T> {\n         Ref {\n@@ -585,7 +586,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// let b2: Ref<u32> = Ref::map(b1, |t| &t.0);\n     /// assert_eq!(*b2, 5)\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Ref<'b, U>\n         where F: FnOnce(&T) -> &U\n@@ -616,7 +618,8 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// let b2: Ref<u32> = Ref::filter_map(b1, |o| o.as_ref().ok()).unwrap();\n     /// assert_eq!(*b2, 5)\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Option<Ref<'b, U>>\n         where F: FnOnce(&T) -> Option<&U>\n@@ -653,7 +656,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// }\n     /// assert_eq!(*c.borrow(), (42, 'b'));\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>\n         where F: FnOnce(&mut T) -> &mut U\n@@ -690,7 +694,8 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// }\n     /// assert_eq!(*c.borrow(), Ok(42));\n     /// ```\n-    #[unstable(feature = \"cell_extras\", reason = \"recently added\")]\n+    #[unstable(feature = \"cell_extras\", reason = \"recently added\",\n+               issue = \"27746\")]\n     #[inline]\n     pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Option<RefMut<'b, U>>\n         where F: FnOnce(&mut T) -> Option<&mut U>"}, {"sha": "dfcbfd476bc3fff7c23458c5f40dbc194920458e", "filename": "src/libcore/char.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -91,7 +91,8 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to an `char`, not checking whether it is a valid unicode\n /// codepoint.\n #[inline]\n-#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\")]\n+#[unstable(feature = \"char_from_unchecked\", reason = \"recently added API\",\n+           issue = \"27781\")]\n pub unsafe fn from_u32_unchecked(i: u32) -> char {\n     transmute(i)\n }\n@@ -139,7 +140,8 @@ pub fn from_digit(num: u32, radix: u32) -> Option<char> {\n #[allow(missing_docs)] // docs in libunicode/u_char.rs\n #[doc(hidden)]\n #[unstable(feature = \"core_char_ext\",\n-           reason = \"the stable interface is `impl char` in later crate\")]\n+           reason = \"the stable interface is `impl char` in later crate\",\n+           issue = \"27701\")]\n pub trait CharExt {\n     fn is_digit(self, radix: u32) -> bool;\n     fn to_digit(self, radix: u32) -> Option<u32>;\n@@ -230,7 +232,8 @@ impl CharExt for char {\n /// and a `None` will be returned.\n #[inline]\n #[unstable(feature = \"char_internals\",\n-           reason = \"this function should not be exposed publicly\")]\n+           reason = \"this function should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n     // Marked #[inline] to allow llvm optimizing it away\n@@ -264,7 +267,8 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n /// and a `None` will be returned.\n #[inline]\n #[unstable(feature = \"char_internals\",\n-           reason = \"this function should not be exposed publicly\")]\n+           reason = \"this function should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n     // Marked #[inline] to allow llvm optimizing it away"}, {"sha": "764d12dd9033435b0ddf9619731be5e73bff01a8", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -177,7 +177,8 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     }\n \n     /// Returns the wrapped `Formatter`.\n-    #[unstable(feature = \"debug_builder_formatter\", reason = \"recently added\")]\n+    #[unstable(feature = \"debug_builder_formatter\", reason = \"recently added\",\n+               issue = \"27782\")]\n     pub fn formatter(&mut self) -> &mut fmt::Formatter<'b> {\n         &mut self.fmt\n     }"}, {"sha": "32a5aeda195ef8f0a058ad832d550d34fbc326b8", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -33,7 +33,8 @@ pub use self::builders::{DebugStruct, DebugTuple, DebugSet, DebugList, DebugMap}\n mod num;\n mod builders;\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -146,7 +147,8 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy)]\n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -166,7 +168,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new<'b, T>(x: &'b T,\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n@@ -178,7 +181,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1 {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -201,7 +205,8 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -218,7 +223,8 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n+               issue = \"0\")]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n@@ -1077,19 +1083,23 @@ impl<'a> Formatter<'a> {\n     pub fn flags(&self) -> u32 { self.flags }\n \n     /// Character used as 'fill' whenever there is alignment\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn fill(&self) -> char { self.fill }\n \n     /// Flag indicating what form of alignment was requested\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn align(&self) -> Alignment { self.align }\n \n     /// Optionally specified integer width that the output should be\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn width(&self) -> Option<usize> { self.width }\n \n     /// Optionally specified precision for numeric types\n-    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\")]\n+    #[unstable(feature = \"fmt_flags\", reason = \"method was just created\",\n+               issue = \"27726\")]\n     pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Creates a `DebugStruct` builder designed to assist with creation of"}, {"sha": "022fe6711bdb3c7379585cf3356eca0a20222d64", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -133,7 +133,8 @@ radix! { UpperHex, 16, \"0x\", x @  0 ...  9 => b'0' + x,\n /// A radix with in the range of `2..36`.\n #[derive(Clone, Copy, PartialEq)]\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n pub struct Radix {\n     base: u8,\n }\n@@ -158,7 +159,8 @@ impl GenericRadix for Radix {\n \n /// A helper type for formatting radixes.\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n #[derive(Copy, Clone)]\n pub struct RadixFmt<T, R>(T, R);\n \n@@ -173,7 +175,8 @@ pub struct RadixFmt<T, R>(T, R);\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```\n #[unstable(feature = \"fmt_radix\",\n-           reason = \"may be renamed or move to a different module\")]\n+           reason = \"may be renamed or move to a different module\",\n+           issue = \"27728\")]\n pub fn radix<T>(x: T, base: u8) -> RadixFmt<T, Radix> {\n     RadixFmt(x, Radix::new(base))\n }"}, {"sha": "5cbca1ba4c68322d5fe1370bf34a75137c5239db", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -42,7 +42,8 @@\n #![unstable(feature = \"core_intrinsics\",\n             reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                       they should be used through stabilized interfaces \\\n-                      in the rest of the standard library\")]\n+                      in the rest of the standard library\",\n+            issue = \"0\")]\n #![allow(missing_docs)]\n \n use marker::Sized;"}, {"sha": "ee32999ba8fbac3f03b0e024e69e279e290d1604", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -820,7 +820,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_cmp\",\n-               reason = \"may want to produce an Ordering directly; see #15311\")]\n+               reason = \"may want to produce an Ordering directly; see #15311\",\n+               issue = \"27724\")]\n     fn max_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n@@ -849,7 +850,8 @@ pub trait Iterator {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"iter_cmp\",\n-               reason = \"may want to produce an Ordering directly; see #15311\")]\n+               reason = \"may want to produce an Ordering directly; see #15311\",\n+               issue = \"27724\")]\n     fn min_by<B: Ord, F>(self, f: F) -> Option<Self::Item> where\n         Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n@@ -972,7 +974,8 @@ pub trait Iterator {\n     /// let it = a.iter();\n     /// assert_eq!(it.sum::<i32>(), 15);\n     /// ```\n-    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n+    #[unstable(feature = \"iter_arith\", reason = \"bounds recently changed\",\n+               issue = \"27739\")]\n     fn sum<S=<Self as Iterator>::Item>(self) -> S where\n         S: Add<Self::Item, Output=S> + Zero,\n         Self: Sized,\n@@ -994,7 +997,8 @@ pub trait Iterator {\n     /// assert_eq!(factorial(1), 1);\n     /// assert_eq!(factorial(5), 120);\n     /// ```\n-    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\")]\n+    #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\",\n+               issue = \"27739\")]\n     fn product<P=<Self as Iterator>::Item>(self) -> P where\n         P: Mul<Self::Item, Output=P> + One,\n         Self: Sized,\n@@ -2136,8 +2140,9 @@ impl<I: DoubleEndedIterator, F> DoubleEndedIterator for Inspect<I, F>\n /// The `steps_between` function provides a way to efficiently compare\n /// two `Step` objects.\n #[unstable(feature = \"step_trait\",\n-           reason = \"likely to be replaced by finer-grained traits\")]\n-pub trait Step: PartialOrd+Sized {\n+           reason = \"likely to be replaced by finer-grained traits\",\n+           issue = \"27741\")]\n+pub trait Step: PartialOrd + Sized {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n \n@@ -2247,7 +2252,8 @@ step_impl_no_between!(u64 i64);\n /// parameter is the type being iterated over, while `R` is the range\n /// type (usually one of `std::ops::{Range, RangeFrom}`.\n #[derive(Clone)]\n-#[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+#[unstable(feature = \"step_by\", reason = \"recent addition\",\n+           issue = \"27741\")]\n pub struct StepBy<A, R> {\n     step_by: A,\n     range: R,\n@@ -2266,7 +2272,8 @@ impl<A: Step> RangeFrom<A> {\n     /// ```\n     ///\n     /// This prints all even `u8` values.\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n+               issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -2300,7 +2307,8 @@ impl<A: Step> ops::Range<A> {\n     /// 6\n     /// 8\n     /// ```\n-    #[unstable(feature = \"step_by\", reason = \"recent addition\")]\n+    #[unstable(feature = \"step_by\", reason = \"recent addition\",\n+               issue = \"27741\")]\n     pub fn step_by(self, by: A) -> StepBy<A, Self> {\n         StepBy {\n             step_by: by,\n@@ -2332,7 +2340,8 @@ impl<A> Iterator for StepBy<A, RangeFrom<A>> where\n /// An iterator over the range [start, stop]\n #[derive(Clone)]\n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n pub struct RangeInclusive<A> {\n     range: ops::Range<A>,\n     done: bool,\n@@ -2341,7 +2350,8 @@ pub struct RangeInclusive<A> {\n /// Returns an iterator over the range [start, stop].\n #[inline]\n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n     where A: Step + One + Clone\n {\n@@ -2352,7 +2362,8 @@ pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n }\n \n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n impl<A> Iterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>\n@@ -2385,7 +2396,8 @@ impl<A> Iterator for RangeInclusive<A> where\n }\n \n #[unstable(feature = \"range_inclusive\",\n-           reason = \"likely to be replaced by range notation and adapters\")]\n+           reason = \"likely to be replaced by range notation and adapters\",\n+           issue = \"27777\")]\n impl<A> DoubleEndedIterator for RangeInclusive<A> where\n     A: PartialEq + Step + One + Clone,\n     for<'a> &'a A: Add<&'a A, Output = A>,\n@@ -2642,7 +2654,8 @@ pub fn once<T>(value: T) -> Once<T> {\n ///\n /// If two sequences are equal up until the point where one ends,\n /// the shorter sequence compares less.\n-#[unstable(feature = \"iter_order\", reason = \"needs review and revision\")]\n+#[unstable(feature = \"iter_order\", reason = \"needs review and revision\",\n+           issue = \"27737\")]\n pub mod order {\n     use cmp;\n     use cmp::{Eq, Ord, PartialOrd, PartialEq};"}, {"sha": "ae85e2712ce8122e42329012d0348ade0b36bc1e", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -51,7 +51,8 @@\n #![crate_name = \"core\"]\n #![unstable(feature = \"core\",\n             reason = \"the libcore library has not yet been scrutinized for \\\n-                      stabilization in terms of structure and naming\")]\n+                      stabilization in terms of structure and naming\",\n+            issue = \"27701\")]\n #![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "95b250064a523b8795b86acf020141ce4c77a592", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -54,7 +54,7 @@ pub trait Sized {\n }\n \n /// Types that can be \"unsized\" to a dynamically sized type.\n-#[unstable(feature = \"unsize\")]\n+#[unstable(feature = \"unsize\", issue = \"27779\")]\n #[lang=\"unsize\"]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n@@ -406,7 +406,8 @@ mod impls {\n /// [1]: http://en.wikipedia.org/wiki/Parametricity\n #[rustc_reflect_like]\n #[unstable(feature = \"reflect_marker\",\n-           reason = \"requires RFC and more experience\")]\n+           reason = \"requires RFC and more experience\",\n+           issue = \"27749\")]\n #[rustc_on_unimplemented = \"`{Self}` does not implement `Any`; \\\n                             ensure all type parameters are bounded by `Any`\"]\n pub trait Reflect {}"}, {"sha": "48d003c2cffbab672cced53cab0eff87b4fd0e58", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -247,7 +247,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// This function is expected to be deprecated with the transition\n /// to non-zeroing drop.\n #[inline]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n pub unsafe fn dropped<T>() -> T {\n     #[inline(always)]\n     unsafe fn dropped_impl<T>() -> T { intrinsics::init_dropped() }\n@@ -510,22 +510,22 @@ macro_rules! repeat_u8_as_u64 {\n // But having the sign bit set is a pain, so 0x1d is probably better.\n //\n // And of course, 0x00 brings back the old world of zero'ing on drop.\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U8: u8 = 0x1d;\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U32: u32 = repeat_u8_as_u32!(POST_DROP_U8);\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_U64: u64 = repeat_u8_as_u64!(POST_DROP_U8);\n \n #[cfg(target_pointer_width = \"32\")]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U32 as usize;\n #[cfg(target_pointer_width = \"64\")]\n-#[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\", issue = \"5016\")]\n #[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U64 as usize;\n "}, {"sha": "2524e5662aa84beedac4d87b77ae8591b377a885", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -10,7 +10,8 @@\n \n //! Exposes the NonZero lang item which provides optimization hints.\n #![unstable(feature = \"nonzero\",\n-            reason = \"needs an RFC to flesh out the design\")]\n+            reason = \"needs an RFC to flesh out the design\",\n+            issue = \"27730\")]\n \n use marker::Sized;\n use ops::{CoerceUnsized, Deref};"}, {"sha": "91e1d6e4e51cb89ce26e14f3d4c34b3ab80820a3", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -127,7 +127,8 @@ functions.\n // only made public for testing. do not expose us.\n #![doc(hidden)]\n #![unstable(feature = \"flt2dec\",\n-            reason = \"internal routines only exposed for testing\")]\n+            reason = \"internal routines only exposed for testing\",\n+            issue = \"0\")]\n \n use prelude::v1::*;\n use i16;"}, {"sha": "61dcbdff0169e326bf3707f4bab3f07f9c60b3d7", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -15,13 +15,15 @@ macro_rules! int_module { ($T:ty, $bits:expr) => (\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BITS : usize = $bits;\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n "}, {"sha": "086437445dec7e85d779970cd19b1475d3f3f61a", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -51,7 +51,8 @@ pub mod dec2flt;\n /// This trait is intended for use in conjunction with `Add`, as an identity:\n /// `x + T::zero() == x`.\n #[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\")]\n+           reason = \"unsure of placement, wants to use associated constants\",\n+           issue = \"27739\")]\n pub trait Zero {\n     /// The \"zero\" (usually, additive identity) for this type.\n     fn zero() -> Self;\n@@ -62,7 +63,8 @@ pub trait Zero {\n /// This trait is intended for use in conjunction with `Mul`, as an identity:\n /// `x * T::one() == x`.\n #[unstable(feature = \"zero_one\",\n-           reason = \"unsure of placement, wants to use associated constants\")]\n+           reason = \"unsure of placement, wants to use associated constants\",\n+           issue = \"27739\")]\n pub trait One {\n     /// The \"one\" (usually, multiplicative identity) for this type.\n     fn one() -> Self;\n@@ -1262,7 +1264,8 @@ pub enum FpCategory {\n /// A built-in floating point number.\n #[doc(hidden)]\n #[unstable(feature = \"core_float\",\n-           reason = \"stable interface is via `impl f{32,64}` in later crates\")]\n+           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n+           issue = \"27702\")]\n pub trait Float: Sized {\n     /// Returns the NaN value.\n     fn nan() -> Self;\n@@ -1525,7 +1528,8 @@ enum IntErrorKind {\n impl ParseIntError {\n     #[unstable(feature = \"int_error_internals\",\n                reason = \"available through Error trait and this method should \\\n-                         not be exposed publicly\")]\n+                         not be exposed publicly\",\n+               issue = \"0\")]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n         match self.kind {\n@@ -1550,13 +1554,15 @@ impl fmt::Display for ParseIntError {\n pub struct ParseFloatError {\n     #[doc(hidden)]\n     #[unstable(feature = \"float_error_internals\",\n-               reason = \"should not be exposed publicly\")]\n+               reason = \"should not be exposed publicly\",\n+               issue = \"0\")]\n     pub __kind: FloatErrorKind\n }\n \n #[derive(Debug, Clone, PartialEq)]\n #[unstable(feature = \"float_error_internals\",\n-           reason = \"should not be exposed publicly\")]\n+           reason = \"should not be exposed publicly\",\n+           issue = \"0\")]\n #[doc(hidden)]\n pub enum FloatErrorKind {\n     Empty,"}, {"sha": "35e1e988f3ed4300296b84f2c352f1ef2a888bc8", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -13,11 +13,13 @@\n macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BITS : usize = $bits;\n #[unstable(feature = \"num_bits_bytes\",\n-           reason = \"may want to be an associated function\")]\n+           reason = \"may want to be an associated function\",\n+           issue = \"27753\")]\n #[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n "}, {"sha": "0e8ced0aa19348d055686d8fb15f466f9ef8b27b", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![unstable(feature = \"wrapping\", reason = \"may be removed or relocated\")]\n+#![unstable(feature = \"wrapping\", reason = \"may be removed or relocated\",\n+            issue = \"27755\")]\n \n use super::Wrapping;\n "}, {"sha": "6d522ad1fab998e317642f1e47a123c8a4228c02", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -1247,7 +1247,7 @@ mod impls {\n \n /// Trait that indicates that this is a pointer or a wrapper for one,\n /// where unsizing can be performed on the pointee.\n-#[unstable(feature = \"coerce_unsized\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n #[lang=\"coerce_unsized\"]\n pub trait CoerceUnsized<T> {\n     // Empty.\n@@ -1293,7 +1293,7 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n /// If evaluating EXPR fails, then the destructor for the\n /// implementation of Place to clean up any intermediate state\n /// (e.g. deallocate box storage, pop a stack, etc).\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Place<Data: ?Sized> {\n     /// Returns the address where the input value will be written.\n     /// Note that the data at this address is generally uninitialized,\n@@ -1324,7 +1324,7 @@ pub trait Place<Data: ?Sized> {\n /// Values for types implementing this trait usually are transient\n /// intermediate values (e.g. the return value of `Vec::emplace_back`)\n /// or `Copy`, since the `make_place` method takes `self` by value.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Placer<Data: ?Sized> {\n     /// `Place` is the intermedate agent guarding the\n     /// uninitialized state for `Data`.\n@@ -1335,7 +1335,7 @@ pub trait Placer<Data: ?Sized> {\n }\n \n /// Specialization of `Place` trait supporting `in (PLACE) EXPR`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait InPlace<Data: ?Sized>: Place<Data> {\n     /// `Owner` is the type of the end value of `in (PLACE) EXPR`\n     ///\n@@ -1372,7 +1372,7 @@ pub trait InPlace<Data: ?Sized>: Place<Data> {\n /// `<T as Boxed>` in turn dictates determines which\n /// implementation of `BoxPlace` to use, namely:\n /// `<<T as Boxed>::Place as BoxPlace>`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait Boxed {\n     /// The kind of data that is stored in this kind of box.\n     type Data;  /* (`Data` unused b/c cannot yet express below bound.) */\n@@ -1386,7 +1386,7 @@ pub trait Boxed {\n }\n \n /// Specialization of `Place` trait supporting `box EXPR`.\n-#[unstable(feature = \"placement_new_protocol\")]\n+#[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub trait BoxPlace<Data: ?Sized> : Place<Data> {\n     /// Creates a globally fresh place.\n     fn make_place() -> Self;"}, {"sha": "e64048c82d8392e2308f93bb5e197f1bd76cab5b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -287,7 +287,8 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_slice\",\n-               reason = \"waiting for mut conventions\")]\n+               reason = \"waiting for mut conventions\",\n+               issue = \"27776\")]\n     pub fn as_mut_slice<'r>(&'r mut self) -> &'r mut [T] {\n         match *self {\n             Some(ref mut x) => {\n@@ -689,7 +690,8 @@ impl<T> Option<T> {\n \n     /// Converts from `Option<T>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n+    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+               issue = \"27776\")]\n     pub fn as_slice<'a>(&'a self) -> &'a [T] {\n         match *self {\n             Some(ref x) => slice::ref_slice(x),"}, {"sha": "b443ae0636faa979a9319b1636f4800098ff3feb", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -31,7 +31,8 @@\n #![allow(dead_code, missing_docs)]\n #![unstable(feature = \"core_panic\",\n             reason = \"internal details of the implementation of the `panic!` \\\n-                      and related macros\")]\n+                      and related macros\",\n+            issue = \"0\")]\n \n use fmt;\n "}, {"sha": "fc4e4e668174a89f06b732406e19a72fcf4127b9", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -16,7 +16,8 @@\n \n #![unstable(feature = \"core_prelude\",\n             reason = \"the libcore prelude has not been scrutinized and \\\n-                      stabilized yet\")]\n+                      stabilized yet\",\n+            issue = \"27701\")]\n \n // Reexported core operators\n pub use marker::{Copy, Send, Sized, Sync};"}, {"sha": "b7479b0c604f3d7fcff3a5ce60fdefdb687e4395", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -127,7 +127,8 @@ pub unsafe fn read<T>(src: *const T) -> T {\n /// (which may be more appropriate than zero).\n #[inline(always)]\n #[unstable(feature = \"filling_drop\",\n-           reason = \"may play a larger role in std::ptr future extensions\")]\n+           reason = \"may play a larger role in std::ptr future extensions\",\n+           issue = \"5016\")]\n pub unsafe fn read_and_drop<T>(dest: *mut T) -> T {\n     // Copy the data out from `dest`:\n     let tmp = read(&*dest);\n@@ -177,7 +178,8 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n-                         the raw pointer\")]\n+                         the raw pointer\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n@@ -225,7 +227,8 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"Option is not clearly the right return type, and we \\\n                          may want to tie the return lifetime to a borrow of \\\n-                         the raw pointer\")]\n+                         the raw pointer\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> where T: Sized {\n         if self.is_null() {\n@@ -258,7 +261,8 @@ impl<T: ?Sized> *mut T {\n     /// of the returned pointer.\n     #[unstable(feature = \"ptr_as_ref\",\n                reason = \"return value does not necessarily convey all possible \\\n-                         information\")]\n+                         information\",\n+               issue = \"27780\")]\n     #[inline]\n     pub unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> where T: Sized {\n         if self.is_null() {\n@@ -415,7 +419,8 @@ impl<T: ?Sized> PartialOrd for *mut T {\n /// modified without a unique path to the `Unique` reference. Useful\n /// for building abstractions like `Vec<T>` or `Box<T>`, which\n /// internally use raw pointers to manage the memory that they own.\n-#[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\")]\n+#[unstable(feature = \"unique\", reason = \"needs an RFC to flesh out design\",\n+           issue = \"27730\")]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n@@ -430,17 +435,17 @@ pub struct Unique<T: ?Sized> {\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Send + ?Sized> Send for Unique<T> { }\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> { }\n \n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     pub unsafe fn new(ptr: *mut T) -> Unique<T> {\n@@ -458,7 +463,7 @@ impl<T: ?Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"unique\")]\n+#[unstable(feature = \"unique\", issue= \"27730\")]\n impl<T:?Sized> Deref for Unique<T> {\n     type Target = *mut T;\n "}, {"sha": "382fd0f3788ced524be6e66de1ae874ecb0997b6", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(missing_docs)]\n-#![unstable(feature = \"raw\")]\n+#![unstable(feature = \"raw\", issue = \"27751\")]\n \n //! Contains struct definitions for the layout of compiler built-in types.\n //!"}, {"sha": "8300faa5a16fec98f8006cff1a321bbc2643878e", "filename": "src/libcore/result.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -405,7 +405,8 @@ impl<T, E> Result<T, E> {\n \n     /// Converts from `Result<T, E>` to `&[T]` (without copying)\n     #[inline]\n-    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\")]\n+    #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n+               issue = \"27776\")]\n     pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Ok(ref x) => slice::ref_slice(x),\n@@ -436,7 +437,8 @@ impl<T, E> Result<T, E> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_slice\",\n-               reason = \"waiting for mut conventions\")]\n+               reason = \"waiting for mut conventions\",\n+               issue = \"27776\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Ok(ref mut x) => slice::mut_ref_slice(x),"}, {"sha": "b06c0241093c3d0bf8e1dcdf312e2836e1f5ae20", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -35,7 +35,8 @@\n //! warning.\n \n #![unstable(feature = \"core_simd\",\n-            reason = \"needs an RFC to flesh out the design\")]\n+            reason = \"needs an RFC to flesh out the design\",\n+            issue = \"27731\")]\n \n #![allow(non_camel_case_types)]\n #![allow(missing_docs)]"}, {"sha": "e63eb9f4cf835e1ff07b6e4ba1ebff5475b4c7a4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -64,7 +64,8 @@ use raw::Slice as RawSlice;\n #[allow(missing_docs)] // docs in libcollections\n #[doc(hidden)]\n #[unstable(feature = \"core_slice_ext\",\n-           reason = \"stable interface provided by `impl [T]` in later crates\")]\n+           reason = \"stable interface provided by `impl [T]` in later crates\",\n+           issue = \"27701\")]\n pub trait SliceExt {\n     type Item;\n \n@@ -797,7 +798,7 @@ impl<'a, T> Iter<'a, T> {\n     ///\n     /// This has the same lifetime as the original slice, and so the\n     /// iterator can continue to be used while this exists.\n-    #[unstable(feature = \"iter_to_slice\")]\n+    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n     pub fn as_slice(&self) -> &'a [T] {\n         make_slice!(self.ptr, self.end)\n     }\n@@ -845,7 +846,7 @@ impl<'a, T> IterMut<'a, T> {\n     /// to consume the iterator. Consider using the `Slice` and\n     /// `SliceMut` implementations for obtaining slices with more\n     /// restricted lifetimes that do not consume the iterator.\n-    #[unstable(feature = \"iter_to_slice\")]\n+    #[unstable(feature = \"iter_to_slice\", issue = \"27775\")]\n     pub fn into_slice(self) -> &'a mut [T] {\n         make_mut_slice!(self.ptr, self.end)\n     }\n@@ -1408,15 +1409,15 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n //\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n-#[unstable(feature = \"ref_slice\")]\n+#[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n-#[unstable(feature = \"ref_slice\")]\n+#[unstable(feature = \"ref_slice\", issue = \"27774\")]\n pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n     unsafe {\n         from_raw_parts_mut(s, 1)\n@@ -1478,7 +1479,8 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n //\n \n /// Operations on `[u8]`.\n-#[unstable(feature = \"slice_bytes\", reason = \"needs review\")]\n+#[unstable(feature = \"slice_bytes\", reason = \"needs review\",\n+           issue = \"27740\")]\n pub mod bytes {\n     use ptr;\n     use slice::SliceExt;"}, {"sha": "48118c18029fe16753f7f08d45867c4068dd934b", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -117,7 +117,8 @@ impl Utf8Error {\n     ///\n     /// Starting at the index provided, but not necessarily at it precisely, an\n     /// invalid UTF-8 encoding sequence was found.\n-    #[unstable(feature = \"utf8_error\", reason = \"method just added\")]\n+    #[unstable(feature = \"utf8_error\", reason = \"method just added\",\n+               issue = \"27734\")]\n     pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n }\n \n@@ -190,7 +191,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n \n /// Reads the next code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n-#[unstable(feature = \"str_internals\")]\n+#[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n     // Decode UTF-8\n@@ -737,7 +738,8 @@ generate_pattern_iterators! {\n         struct RMatchIndices;\n     stability:\n         #[unstable(feature = \"str_match_indices\",\n-                   reason = \"type may be removed or have its iterator impl changed\")]\n+                   reason = \"type may be removed or have its iterator impl changed\",\n+                   issue = \"27743\")]\n     internal:\n         MatchIndicesInternal yielding ((usize, usize));\n     delegate double ended;\n@@ -1002,7 +1004,8 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n #[unstable(feature = \"str_char\",\n            reason = \"existence of this struct is uncertain as it is frequently \\\n                      able to be replaced with char.len_utf8() and/or \\\n-                     char/char_indices iterators\")]\n+                     char/char_indices iterators\",\n+           issue = \"27754\")]\n pub struct CharRange {\n     /// Current `char`\n     pub ch: char,\n@@ -1220,7 +1223,8 @@ mod traits {\n #[allow(missing_docs)]\n #[doc(hidden)]\n #[unstable(feature = \"core_str_ext\",\n-           reason = \"stable interface provided by `impl str` in later crates\")]\n+           reason = \"stable interface provided by `impl str` in later crates\",\n+           issue = \"27701\")]\n pub trait StrExt {\n     // NB there are no docs here are they're all located on the StrExt trait in\n     // libcollections, not here."}, {"sha": "dca3c5bcec86bf8f3d816396f1500628fcce3d11", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dcf272d90657bfea13e54939ee04fed7c7f5f0/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=b7dcf272d90657bfea13e54939ee04fed7c7f5f0", "patch": "@@ -14,7 +14,8 @@\n //! `ReverseSearcher` and `DoubleEndedSearcher`.\n \n #![unstable(feature = \"pattern\",\n-            reason = \"API not fully fleshed out and ready to be stabilized\")]\n+            reason = \"API not fully fleshed out and ready to be stabilized\",\n+            issue = \"27721\")]\n \n use prelude::v1::*;\n "}]}