{"sha": "d1fcf611175e695c35c6cc0537d710277c1a5c6f", "node_id": "C_kwDOAAsO6NoAKGQxZmNmNjExMTc1ZTY5NWMzNWM2Y2MwNTM3ZDcxMDI3N2MxYTVjNmY", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-13T09:13:02Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2023-02-22T09:15:53Z"}, "message": "errors: generate typed identifiers in each crate\n\nInstead of loading the Fluent resources for every crate in\n`rustc_error_messages`, each crate generates typed identifiers for its\nown diagnostics and creates a static which are pulled together in the\n`rustc_driver` crate and provided to the diagnostic emitter.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "7f3dfc8cdfa379edef39ff5f8f54fdbf88668fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f3dfc8cdfa379edef39ff5f8f54fdbf88668fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1fcf611175e695c35c6cc0537d710277c1a5c6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1fcf611175e695c35c6cc0537d710277c1a5c6f", "html_url": "https://github.com/rust-lang/rust/commit/d1fcf611175e695c35c6cc0537d710277c1a5c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1fcf611175e695c35c6cc0537d710277c1a5c6f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9216b75646cde0c4c69ae00232778a47fc893d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9216b75646cde0c4c69ae00232778a47fc893d3", "html_url": "https://github.com/rust-lang/rust/commit/f9216b75646cde0c4c69ae00232778a47fc893d3"}], "stats": {"total": 3067, "additions": 1674, "deletions": 1393}, "files": [{"sha": "cb1cd3cbfe557a855921fe84f5a0329b611ac310", "filename": "Cargo.lock", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -3920,26 +3920,47 @@ version = \"0.0.0\"\n dependencies = [\n  \"libc\",\n  \"rustc_ast\",\n+ \"rustc_ast_lowering\",\n+ \"rustc_ast_passes\",\n  \"rustc_ast_pretty\",\n+ \"rustc_attr\",\n+ \"rustc_borrowck\",\n+ \"rustc_builtin_macros\",\n  \"rustc_codegen_ssa\",\n+ \"rustc_const_eval\",\n  \"rustc_data_structures\",\n  \"rustc_error_codes\",\n+ \"rustc_error_messages\",\n  \"rustc_errors\",\n+ \"rustc_expand\",\n  \"rustc_feature\",\n  \"rustc_hir\",\n  \"rustc_hir_analysis\",\n  \"rustc_hir_pretty\",\n+ \"rustc_hir_typeck\",\n+ \"rustc_incremental\",\n+ \"rustc_infer\",\n  \"rustc_interface\",\n  \"rustc_lint\",\n  \"rustc_log\",\n  \"rustc_macros\",\n  \"rustc_metadata\",\n  \"rustc_middle\",\n+ \"rustc_mir_build\",\n+ \"rustc_mir_dataflow\",\n+ \"rustc_monomorphize\",\n  \"rustc_parse\",\n+ \"rustc_passes\",\n  \"rustc_plugin_impl\",\n+ \"rustc_privacy\",\n+ \"rustc_query_system\",\n+ \"rustc_resolve\",\n  \"rustc_session\",\n  \"rustc_span\",\n+ \"rustc_symbol_mangling\",\n  \"rustc_target\",\n+ \"rustc_trait_selection\",\n+ \"rustc_ty_utils\",\n  \"serde_json\",\n  \"tracing\",\n  \"winapi\","}, {"sha": "03c88c6c0ebe56d29af6545a277a57b00143bec8", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/ast_lowering.ftl"}, {"sha": "8b302ac21421ad5ffe22d371ea6425b2e1409ed9", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -339,7 +339,7 @@ pub struct InclusiveRangeWithNoEnd {\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_trait_fn_async, code = \"E0706\")]\n #[note]\n-#[note(note2)]\n+#[note(ast_lowering_note2)]\n pub struct TraitFnAsync {\n     #[primary_span]\n     pub fn_span: Span,"}, {"sha": "a726fbb72e9cbc7a6d11150930bc3d5249a97fb9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -52,15 +52,20 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sorted_map::SortedMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::{DiagnosticArgFromDisplay, Handler, StashKey};\n+use rustc_errors::{\n+    DiagnosticArgFromDisplay, DiagnosticMessage, Handler, StashKey, SubdiagnosticMessage,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_middle::span_bug;\n-use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n+use rustc_macros::fluent_messages;\n+use rustc_middle::{\n+    span_bug,\n+    ty::{ResolverAstLowering, TyCtxt},\n+};\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::DesugaringKind;\n@@ -87,6 +92,8 @@ mod lifetime_collector;\n mod pat;\n mod path;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n struct LoweringContext<'a, 'hir> {\n     tcx: TyCtxt<'hir>,\n     resolver: &'a mut ResolverAstLowering,"}, {"sha": "5f28839f136d6276fd3fb465dd749b8edb7d5ad2", "filename": "compiler/rustc_ast_passes/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/ast_passes.ftl"}, {"sha": "56977e45a1a843a1bdece32ae223e05b9fb02072", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -13,7 +13,7 @@ use rustc_ast::walk_list;\n use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability};\n+use rustc_errors::{error_code, pluralize, struct_span_err, Applicability};\n use rustc_macros::Subdiagnostic;\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n@@ -30,6 +30,7 @@ use std::ops::{Deref, DerefMut};\n use thin_vec::thin_vec;\n \n use crate::errors::*;\n+use crate::fluent_generated as fluent;\n \n const MORE_EXTERN: &str =\n     \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";\n@@ -1723,12 +1724,12 @@ pub(crate) enum ForbiddenLetReason {\n     /// `let` is not valid and the source environment is not important\n     GenericForbidden,\n     /// A let chain with the `||` operator\n-    #[note(not_supported_or)]\n+    #[note(ast_passes_not_supported_or)]\n     NotSupportedOr(#[primary_span] Span),\n     /// A let chain with invalid parentheses\n     ///\n     /// For example, `let 1 = 1 && (expr && expr)` is allowed\n     /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n-    #[note(not_supported_parentheses)]\n+    #[note(ast_passes_not_supported_parentheses)]\n     NotSupportedParentheses(#[primary_span] Span),\n }"}, {"sha": "69ce8daa45506389d4000197a72e60a63f7338d0", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -50,17 +50,17 @@ pub struct InvalidLabel {\n pub struct InvalidVisibility {\n     #[primary_span]\n     pub span: Span,\n-    #[label(implied)]\n+    #[label(ast_passes_implied)]\n     pub implied: Option<Span>,\n     #[subdiagnostic]\n     pub note: Option<InvalidVisibilityNote>,\n }\n \n #[derive(Subdiagnostic)]\n pub enum InvalidVisibilityNote {\n-    #[note(individual_impl_items)]\n+    #[note(ast_passes_individual_impl_items)]\n     IndividualImplItems,\n-    #[note(individual_foreign_items)]\n+    #[note(ast_passes_individual_foreign_items)]\n     IndividualForeignItems,\n }\n "}, {"sha": "d69c84bf4d1d20bad66caf2c050108788e08ff8a", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -157,7 +157,7 @@ impl<'a> PostExpansionVisitor<'a> {\n                 &self.sess.parse_sess,\n                 sym::non_lifetime_binders,\n                 non_lt_param_spans,\n-                rustc_errors::fluent::ast_passes_forbidden_non_lifetime_param,\n+                crate::fluent_generated::ast_passes_forbidden_non_lifetime_param,\n             )\n             .emit();\n         }"}, {"sha": "1be959b0de6f93dfd48e402d69e162c88fc37232", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -11,8 +11,13 @@\n #![feature(let_chains)]\n #![recursion_limit = \"256\"]\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n pub mod ast_validation;\n mod errors;\n pub mod feature_gate;\n pub mod node_count;\n pub mod show_span;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "a7f8c993d4225316129e515ef4e2a84bbe872137", "filename": "compiler/rustc_attr/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl"}, {"sha": "5fede0a58ac1f0fdf0bd97e62a587a78a91de21f", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -11,6 +11,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n mod builtin;\n mod session_diagnostics;\n \n@@ -22,3 +25,5 @@ pub use StabilityLevel::*;\n pub use rustc_ast::attr::*;\n \n pub(crate) use rustc_ast::HashStableContext;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "ee79545e304aea65772b3fc521f4575753063304", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -2,11 +2,12 @@ use std::num::IntErrorKind;\n \n use rustc_ast as ast;\n use rustc_errors::{\n-    error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n+    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n };\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n \n+use crate::fluent_generated as fluent;\n use crate::UnsupportedLiteralReason;\n \n #[derive(Diagnostic)]\n@@ -59,7 +60,7 @@ impl<'a> IntoDiagnostic<'a> for UnknownMetaItem<'_> {\n         );\n         diag.set_arg(\"item\", self.item);\n         diag.set_arg(\"expected\", expected.join(\", \"));\n-        diag.span_label(self.span, fluent::label);\n+        diag.span_label(self.span, fluent::attr_label);\n         diag\n     }\n }\n@@ -99,31 +100,31 @@ pub(crate) struct InvalidIssueString {\n // translatable.\n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidIssueStringCause {\n-    #[label(must_not_be_zero)]\n+    #[label(attr_must_not_be_zero)]\n     MustNotBeZero {\n         #[primary_span]\n         span: Span,\n     },\n \n-    #[label(empty)]\n+    #[label(attr_empty)]\n     Empty {\n         #[primary_span]\n         span: Span,\n     },\n \n-    #[label(invalid_digit)]\n+    #[label(attr_invalid_digit)]\n     InvalidDigit {\n         #[primary_span]\n         span: Span,\n     },\n \n-    #[label(pos_overflow)]\n+    #[label(attr_pos_overflow)]\n     PosOverflow {\n         #[primary_span]\n         span: Span,\n     },\n \n-    #[label(neg_overflow)]\n+    #[label(attr_neg_overflow)]\n     NegOverflow {\n         #[primary_span]\n         span: Span,\n@@ -275,7 +276,7 @@ pub(crate) struct IncorrectReprFormatGeneric<'a> {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n-    #[suggestion(suggestion, code = \"{name}({int})\", applicability = \"machine-applicable\")]\n+    #[suggestion(attr_suggestion, code = \"{name}({int})\", applicability = \"machine-applicable\")]\n     Int {\n         #[primary_span]\n         span: Span,\n@@ -287,7 +288,7 @@ pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n         int: u128,\n     },\n \n-    #[suggestion(suggestion, code = \"{name}({symbol})\", applicability = \"machine-applicable\")]\n+    #[suggestion(attr_suggestion, code = \"{name}({symbol})\", applicability = \"machine-applicable\")]\n     Symbol {\n         #[primary_span]\n         span: Span,"}, {"sha": "a3b6b5e8138b68ed2e84b37abad09be4ef2577ac", "filename": "compiler/rustc_borrowck/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl"}, {"sha": "4294914343121e8275de48f4a3e576da3e7331c4", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -20,14 +20,15 @@ extern crate tracing;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_data_structures::vec_map::VecMap;\n-use rustc_errors::{Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{\n     DefiningAnchor, InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin, TyCtxtInferExt,\n };\n+use rustc_macros::fluent_messages;\n use rustc_middle::mir::{\n     traversal, Body, ClearCrossCrate, Local, Location, Mutability, NonDivergingIntrinsic, Operand,\n     Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n@@ -99,6 +100,8 @@ use places_conflict::{places_conflict, PlaceConflictBias};\n use region_infer::RegionInferenceContext;\n use renumber::RegionCtxt;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n struct Upvar<'tcx> {"}, {"sha": "a3678929099d10a61b8e3925389cb6e8c5537278", "filename": "compiler/rustc_borrowck/src/session_diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fsession_diagnostics.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -55,7 +55,7 @@ pub(crate) struct VarNeedNotMut {\n #[derive(Diagnostic)]\n #[diag(borrowck_var_cannot_escape_closure)]\n #[note]\n-#[note(cannot_escape)]\n+#[note(borrowck_cannot_escape)]\n pub(crate) struct FnMutError {\n     #[primary_span]\n     pub span: Span,\n@@ -223,7 +223,7 @@ pub(crate) struct MoveBorrow<'a> {\n     pub borrow_place: &'a str,\n     pub value_place: &'a str,\n     #[primary_span]\n-    #[label(move_label)]\n+    #[label(borrowck_move_label)]\n     pub span: Span,\n     #[label]\n     pub borrow_span: Span,"}, {"sha": "4d088e27b364ae36762db7512961333e7a34849f", "filename": "compiler/rustc_builtin_macros/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_builtin_macros%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_builtin_macros%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl"}, {"sha": "8afb6e56069b03f4b80af08f806807d886fe8be4", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -21,8 +21,10 @@ extern crate tracing;\n \n use crate::deriving::*;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n+use rustc_macros::fluent_messages;\n use rustc_span::symbol::sym;\n \n mod alloc_error_handler;\n@@ -54,6 +56,8 @@ pub mod proc_macro_harness;\n pub mod standard_library_imports;\n pub mod test_harness;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     let mut register = |name, kind| resolver.register_builtin_macro(name, kind);\n     macro register_bang($($name:ident: $f:expr,)*) {"}, {"sha": "6101b28ab0cdde9a42b69834de91ea4bff2d6198", "filename": "compiler/rustc_codegen_gcc/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_gcc%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_gcc%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/codegen_gcc.ftl"}, {"sha": "546c892aae5afc93affc87b7f7591f85d2b70460", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -73,7 +73,8 @@ use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModul\n use rustc_codegen_ssa::target_features::supported_target_features;\n use rustc_codegen_ssa::traits::{CodegenBackend, ExtraBackendMethods, ModuleBufferMethods, ThinBufferMethods, WriteBackendMethods};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorGuaranteed, Handler};\n+use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, Handler, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n@@ -84,6 +85,8 @@ use rustc_span::Symbol;\n use rustc_span::fatal_error::FatalError;\n use tempfile::TempDir;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub struct PrintOnPanic<F: Fn() -> String>(pub F);\n \n impl<F: Fn() -> String> Drop for PrintOnPanic<F> {"}, {"sha": "e5df417370bb9030abf8ad18fe765b4bc0f265fc", "filename": "compiler/rustc_codegen_llvm/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl"}, {"sha": "bae88d942934cda346f20200c3c31591f178b081", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -2,9 +2,10 @@ use std::borrow::Cow;\n use std::ffi::CString;\n use std::path::Path;\n \n+use crate::fluent_generated as fluent;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{\n-    fluent, DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed, Handler, IntoDiagnostic,\n+    DiagnosticBuilder, EmissionGuarantee, ErrorGuaranteed, Handler, IntoDiagnostic,\n };\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n@@ -27,9 +28,9 @@ pub(crate) struct UnknownCTargetFeature<'a> {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum PossibleFeature<'a> {\n-    #[help(possible_feature)]\n+    #[help(codegen_llvm_possible_feature)]\n     Some { rust_feature: &'a str },\n-    #[help(consider_filing_feature_request)]\n+    #[help(codegen_llvm_consider_filing_feature_request)]\n     None,\n }\n "}, {"sha": "de886c881a52999577f357d2030de675cf7bf93d", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -34,7 +34,8 @@ use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{ErrorGuaranteed, FatalError, Handler};\n+use rustc_errors::{DiagnosticMessage, ErrorGuaranteed, FatalError, Handler, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::ty::query::Providers;\n@@ -83,6 +84,8 @@ mod type_of;\n mod va_arg;\n mod value;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n #[derive(Clone)]\n pub struct LlvmCodegenBackend(());\n "}, {"sha": "8fe5f8d50abe2aa9696ccb519f2c4e7b7b3079db", "filename": "compiler/rustc_codegen_ssa/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl"}, {"sha": "6dea7496fc3e6660ec891771db1d2a33b7cb67aa", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,8 +1,9 @@\n //! Errors emitted by codegen_ssa\n \n use crate::back::command::Command;\n+use crate::fluent_generated as fluent;\n use rustc_errors::{\n-    fluent, DiagnosticArgValue, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n+    DiagnosticArgValue, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n     IntoDiagnosticArg,\n };\n use rustc_macros::Diagnostic;\n@@ -388,7 +389,7 @@ pub struct LinkerNotFound {\n #[derive(Diagnostic)]\n #[diag(codegen_ssa_unable_to_exe_linker)]\n #[note]\n-#[note(command_note)]\n+#[note(codegen_ssa_command_note)]\n pub struct UnableToExeLinker {\n     pub linker_path: PathBuf,\n     pub error: Error,"}, {"sha": "ebe9e50ffe66da00a3692759bbb0e144c59664b9", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -25,7 +25,9 @@ extern crate rustc_middle;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir::def_id::CrateNum;\n+use rustc_macros::fluent_messages;\n use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n@@ -54,6 +56,8 @@ pub mod mono_item;\n pub mod target_features;\n pub mod traits;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub struct ModuleCodegen<M> {\n     /// The name of the module. When the crate may be saved between\n     /// compilations, incremental compilation requires that name be"}, {"sha": "33bb116d6fa23f01c513d1b34b0d7e8ed9007070", "filename": "compiler/rustc_const_eval/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl"}, {"sha": "f8b7cc6d7e16bea19a3c69b8ce9d8fc1b048c608", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -9,12 +9,12 @@ pub(crate) struct UnstableInStable {\n     #[primary_span]\n     pub span: Span,\n     #[suggestion(\n-        unstable_sugg,\n+        const_eval_unstable_sugg,\n         code = \"#[rustc_const_unstable(feature = \\\"...\\\", issue = \\\"...\\\")]\\n\",\n         applicability = \"has-placeholders\"\n     )]\n     #[suggestion(\n-        bypass_sugg,\n+        const_eval_bypass_sugg,\n         code = \"#[rustc_allow_const_fn_unstable({gate})]\\n\",\n         applicability = \"has-placeholders\"\n     )]\n@@ -35,15 +35,15 @@ pub(crate) struct StaticAccessErr {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n-    #[note(teach_note)]\n-    #[help(teach_help)]\n+    #[note(const_eval_teach_note)]\n+    #[help(const_eval_teach_help)]\n     pub teach: Option<()>,\n }\n \n #[derive(Diagnostic)]\n #[diag(const_eval_raw_ptr_to_int)]\n #[note]\n-#[note(note2)]\n+#[note(const_eval_note2)]\n pub(crate) struct RawPtrToIntErr {\n     #[primary_span]\n     pub span: Span,\n@@ -118,7 +118,7 @@ pub(crate) struct UnallowedMutableRefs {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n-    #[note(teach_note)]\n+    #[note(const_eval_teach_note)]\n     pub teach: Option<()>,\n }\n \n@@ -128,7 +128,7 @@ pub(crate) struct UnallowedMutableRefsRaw {\n     #[primary_span]\n     pub span: Span,\n     pub kind: ConstContext,\n-    #[note(teach_note)]\n+    #[note(const_eval_teach_note)]\n     pub teach: Option<()>,\n }\n #[derive(Diagnostic)]\n@@ -163,7 +163,7 @@ pub(crate) struct UnallowedHeapAllocations {\n     #[label]\n     pub span: Span,\n     pub kind: ConstContext,\n-    #[note(teach_note)]\n+    #[note(const_eval_teach_note)]\n     pub teach: Option<()>,\n }\n \n@@ -184,7 +184,7 @@ pub(crate) struct InteriorMutableDataRefer {\n     #[help]\n     pub opt_help: Option<()>,\n     pub kind: ConstContext,\n-    #[note(teach_note)]\n+    #[note(const_eval_teach_note)]\n     pub teach: Option<()>,\n }\n "}, {"sha": "fc6d61c79c2c435fdbeca2220050a166674b5076", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -34,10 +34,14 @@ pub mod interpret;\n pub mod transform;\n pub mod util;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n use rustc_target::abi::InitKind;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn provide(providers: &mut Providers) {\n     const_eval::provide(providers);\n     providers.eval_to_const_value_raw = const_eval::eval_to_const_value_raw_provider;"}, {"sha": "7b59a52cffedadcfaf839f1a6b81285fc064e5f4", "filename": "compiler/rustc_driver_impl/Cargo.toml", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2FCargo.toml?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -9,6 +9,27 @@ edition = \"2021\"\n tracing = { version = \"0.1.35\" }\n serde_json = \"1.0.59\"\n rustc_log = { path = \"../rustc_log\" }\n+rustc_ast_lowering = { path = \"../rustc_ast_lowering\" }\n+rustc_ast_passes = { path = \"../rustc_ast_passes\" }\n+rustc_attr = { path = \"../rustc_attr\" }\n+rustc_borrowck = { path = \"../rustc_borrowck\" }\n+rustc_builtin_macros = { path = \"../rustc_builtin_macros\" }\n+rustc_const_eval = { path = \"../rustc_const_eval\" }\n+rustc_error_messages = { path = \"../rustc_error_messages\" }\n+rustc_expand = { path = \"../rustc_expand\" }\n+rustc_hir_typeck = { path = \"../rustc_hir_typeck\" }\n+rustc_incremental = { path = \"../rustc_incremental\" }\n+rustc_infer = { path = \"../rustc_infer\" }\n+rustc_mir_build = { path = \"../rustc_mir_build\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n+rustc_monomorphize = { path = \"../rustc_monomorphize\" }\n+rustc_passes = { path = \"../rustc_passes\" }\n+rustc_privacy = { path = \"../rustc_privacy\" }\n+rustc_query_system = { path = \"../rustc_query_system\" }\n+rustc_resolve = { path = \"../rustc_resolve\" }\n+rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }\n+rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n+rustc_ty_utils = { path = \"../rustc_ty_utils\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "f19b1ff6426177c16eb24dd9093bfa268cb21464", "filename": "compiler/rustc_driver_impl/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/driver.ftl"}, {"sha": "f696cc20e23dcb99a0a320bb8d45516f2c9cbd1b", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -23,11 +23,14 @@ use rustc_codegen_ssa::{traits::CodegenBackend, CodegenErrors, CodegenResults};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n-use rustc_errors::{ErrorGuaranteed, PResult, TerminalUrl};\n+use rustc_errors::{\n+    DiagnosticMessage, ErrorGuaranteed, PResult, SubdiagnosticMessage, TerminalUrl,\n+};\n use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n+use rustc_macros::fluent_messages;\n use rustc_metadata::locator;\n use rustc_session::config::{nightly_options, CG_OPTIONS, Z_OPTIONS};\n use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, TrimmedDefPaths};\n@@ -61,6 +64,44 @@ use crate::session_diagnostics::{\n     RLinkWrongFileType, RlinkNotAFile, RlinkUnableToRead,\n };\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n+pub static DEFAULT_LOCALE_RESOURCES: &[&str] = &[\n+    // tidy-alphabetical-start\n+    crate::DEFAULT_LOCALE_RESOURCE,\n+    rustc_ast_lowering::DEFAULT_LOCALE_RESOURCE,\n+    rustc_ast_passes::DEFAULT_LOCALE_RESOURCE,\n+    rustc_attr::DEFAULT_LOCALE_RESOURCE,\n+    rustc_borrowck::DEFAULT_LOCALE_RESOURCE,\n+    rustc_builtin_macros::DEFAULT_LOCALE_RESOURCE,\n+    rustc_codegen_ssa::DEFAULT_LOCALE_RESOURCE,\n+    rustc_const_eval::DEFAULT_LOCALE_RESOURCE,\n+    rustc_error_messages::DEFAULT_LOCALE_RESOURCE,\n+    rustc_expand::DEFAULT_LOCALE_RESOURCE,\n+    rustc_hir_analysis::DEFAULT_LOCALE_RESOURCE,\n+    rustc_hir_typeck::DEFAULT_LOCALE_RESOURCE,\n+    rustc_incremental::DEFAULT_LOCALE_RESOURCE,\n+    rustc_infer::DEFAULT_LOCALE_RESOURCE,\n+    rustc_interface::DEFAULT_LOCALE_RESOURCE,\n+    rustc_lint::DEFAULT_LOCALE_RESOURCE,\n+    rustc_metadata::DEFAULT_LOCALE_RESOURCE,\n+    rustc_middle::DEFAULT_LOCALE_RESOURCE,\n+    rustc_mir_build::DEFAULT_LOCALE_RESOURCE,\n+    rustc_mir_dataflow::DEFAULT_LOCALE_RESOURCE,\n+    rustc_monomorphize::DEFAULT_LOCALE_RESOURCE,\n+    rustc_parse::DEFAULT_LOCALE_RESOURCE,\n+    rustc_passes::DEFAULT_LOCALE_RESOURCE,\n+    rustc_plugin_impl::DEFAULT_LOCALE_RESOURCE,\n+    rustc_privacy::DEFAULT_LOCALE_RESOURCE,\n+    rustc_query_system::DEFAULT_LOCALE_RESOURCE,\n+    rustc_resolve::DEFAULT_LOCALE_RESOURCE,\n+    rustc_session::DEFAULT_LOCALE_RESOURCE,\n+    rustc_symbol_mangling::DEFAULT_LOCALE_RESOURCE,\n+    rustc_trait_selection::DEFAULT_LOCALE_RESOURCE,\n+    rustc_ty_utils::DEFAULT_LOCALE_RESOURCE,\n+    // tidy-alphabetical-end\n+];\n+\n /// Exit status code used for successful compilation and help output.\n pub const EXIT_SUCCESS: i32 = 0;\n \n@@ -218,6 +259,7 @@ fn run_compiler(\n         output_file: ofile,\n         output_dir: odir,\n         file_loader,\n+        locale_resources: DEFAULT_LOCALE_RESOURCES,\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,\n@@ -320,7 +362,7 @@ fn run_compiler(\n             }\n \n             // Make sure name resolution and macro expansion is run.\n-            queries.global_ctxt()?.enter(|tcx| tcx.resolver_for_lowering(()));\n+            queries.global_ctxt()?;\n \n             if callbacks.after_expansion(compiler, queries) == Compilation::Stop {\n                 return early_exit();\n@@ -1162,7 +1204,7 @@ static DEFAULT_HOOK: LazyLock<Box<dyn Fn(&panic::PanicInfo<'_>) + Sync + Send +\n /// hook.\n pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+        rustc_errors::fallback_fluent_bundle(crate::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "e62923744482260f697a0083a88241a34cb0bc74", "filename": "compiler/rustc_error_messages/locales/en-US.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_error_messages%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_error_messages%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -0,0 +1 @@\n+# satisfy tidy lint by having a line in this file"}, {"sha": "429bdd2777f912db3e7d3d57a17a1ca7074207fc", "filename": "compiler/rustc_error_messages/locales/en-US/errors.ftl", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ferrors.ftl?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -1,13 +0,0 @@\n-errors_target_invalid_address_space = invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n-\n-errors_target_invalid_bits = invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n-\n-errors_target_missing_alignment = missing alignment for `{$cause}` in \"data-layout\"\n-\n-errors_target_invalid_alignment = invalid alignment for `{$cause}` in \"data-layout\": {$err}\n-\n-errors_target_inconsistent_architecture = inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n-\n-errors_target_inconsistent_pointer_width = inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n-\n-errors_target_invalid_bits_size = {$err}"}, {"sha": "13952f8456ec840058d7cf4bff15d6f7765cc841", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -34,47 +34,7 @@ use intl_memoizer::IntlLangMemoizer;\n pub use fluent_bundle::{self, types::FluentType, FluentArgs, FluentError, FluentValue};\n pub use unic_langid::{langid, LanguageIdentifier};\n \n-// Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n-fluent_messages! {\n-    // tidy-alphabetical-start\n-    ast_lowering => \"../locales/en-US/ast_lowering.ftl\",\n-    ast_passes => \"../locales/en-US/ast_passes.ftl\",\n-    attr => \"../locales/en-US/attr.ftl\",\n-    borrowck => \"../locales/en-US/borrowck.ftl\",\n-    builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n-    codegen_gcc => \"../locales/en-US/codegen_gcc.ftl\",\n-    codegen_llvm => \"../locales/en-US/codegen_llvm.ftl\",\n-    codegen_ssa => \"../locales/en-US/codegen_ssa.ftl\",\n-    compiletest => \"../locales/en-US/compiletest.ftl\",\n-    const_eval => \"../locales/en-US/const_eval.ftl\",\n-    driver => \"../locales/en-US/driver.ftl\",\n-    errors => \"../locales/en-US/errors.ftl\",\n-    expand => \"../locales/en-US/expand.ftl\",\n-    hir_analysis => \"../locales/en-US/hir_analysis.ftl\",\n-    hir_typeck => \"../locales/en-US/hir_typeck.ftl\",\n-    incremental => \"../locales/en-US/incremental.ftl\",\n-    infer => \"../locales/en-US/infer.ftl\",\n-    interface => \"../locales/en-US/interface.ftl\",\n-    lint => \"../locales/en-US/lint.ftl\",\n-    metadata => \"../locales/en-US/metadata.ftl\",\n-    middle => \"../locales/en-US/middle.ftl\",\n-    mir_build => \"../locales/en-US/mir_build.ftl\",\n-    mir_dataflow => \"../locales/en-US/mir_dataflow.ftl\",\n-    monomorphize => \"../locales/en-US/monomorphize.ftl\",\n-    parse => \"../locales/en-US/parse.ftl\",\n-    passes => \"../locales/en-US/passes.ftl\",\n-    plugin_impl => \"../locales/en-US/plugin_impl.ftl\",\n-    privacy => \"../locales/en-US/privacy.ftl\",\n-    query_system => \"../locales/en-US/query_system.ftl\",\n-    resolve => \"../locales/en-US/resolve.ftl\",\n-    session => \"../locales/en-US/session.ftl\",\n-    symbol_mangling => \"../locales/en-US/symbol_mangling.ftl\",\n-    trait_selection => \"../locales/en-US/trait_selection.ftl\",\n-    ty_utils => \"../locales/en-US/ty_utils.ftl\",\n-    // tidy-alphabetical-end\n-}\n-\n-pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};\n+fluent_messages! { \"../locales/en-US.ftl\" }\n \n pub type FluentBundle = fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>;\n "}, {"sha": "dde1d6c0a819c6560d36ad532c4ef9c42e772793", "filename": "compiler/rustc_errors/locales/en-US.ftl", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -0,0 +1,19 @@\n+errors_target_invalid_address_space =\n+    invalid address space `{$addr_space}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_invalid_bits =\n+    invalid {$kind} `{$bit}` for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_missing_alignment =\n+    missing alignment for `{$cause}` in \"data-layout\"\n+\n+errors_target_invalid_alignment =\n+    invalid alignment for `{$cause}` in \"data-layout\": {$err}\n+\n+errors_target_inconsistent_architecture =\n+    inconsistent target specification: \"data-layout\" claims architecture is {$dl}-endian, while \"target-endian\" is `{$target}`\n+\n+errors_target_inconsistent_pointer_width =\n+    inconsistent target specification: \"data-layout\" claims pointers are {$pointer_size}-bit, while \"target-pointer-width\" is `{$target}`\n+\n+errors_target_invalid_bits_size = {$err}"}, {"sha": "d4ddd0c53bfdd0de38c1a0bd8862718ffa3247fc", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,6 +1,5 @@\n-use crate::{\n-    fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n-};\n+use crate::fluent_generated as fluent;\n+use crate::{DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg};\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;"}, {"sha": "bbfad26c6f0d82dc671cfa604d7e7e1d166a71b4", "filename": "compiler/rustc_errors/src/json/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson%2Ftests.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -42,11 +42,11 @@ impl<T: Write> Write for Shared<T> {\n \n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n+    static TEST_LOCALE_RESOURCES: &[&str] = &[crate::DEFAULT_LOCALE_RESOURCE];\n     rustc_span::create_default_session_globals_then(|| {\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         sm.new_source_file(Path::new(\"test.rs\").to_owned().into(), code.to_owned());\n-        let fallback_bundle =\n-            crate::fallback_fluent_bundle(rustc_error_messages::DEFAULT_LOCALE_RESOURCES, false);\n+        let fallback_bundle = crate::fallback_fluent_bundle(TEST_LOCALE_RESOURCES, false);\n \n         let output = Arc::new(Mutex::new(Vec::new()));\n         let je = JsonEmitter::new("}, {"sha": "edec8cce92f97517de567548b5ea99542851ac89", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -36,11 +36,11 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n-    fallback_fluent_bundle, fluent, fluent_bundle, DelayDm, DiagnosticMessage, FluentBundle,\n+    fallback_fluent_bundle, fluent_bundle, DelayDm, DiagnosticMessage, FluentBundle,\n     LanguageIdentifier, LazyFallbackBundle, MultiSpan, SpanLabel, SubdiagnosticMessage,\n-    DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n+use rustc_macros::fluent_messages;\n use rustc_span::source_map::SourceMap;\n use rustc_span::HashStableContext;\n use rustc_span::{Loc, Span};\n@@ -76,6 +76,8 @@ pub use snippet::Style;\n pub type PErr<'a> = DiagnosticBuilder<'a, ErrorGuaranteed>;\n pub type PResult<'a, T> = Result<T, PErr<'a>>;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n // `PResult` is used a lot. Make sure it doesn't unintentionally get bigger.\n // (See also the comment on `DiagnosticBuilderInner`'s `diagnostic` field.)\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "dbd80954382dbbaf52c9f287da7748d7b8c63fc8", "filename": "compiler/rustc_expand/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/expand.ftl"}, {"sha": "d9b2b5f4802c85561965946bf4c86d80fabec02f", "filename": "compiler/rustc_expand/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -65,7 +65,7 @@ pub(crate) struct MacroConstStability {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(label2)]\n+    #[label(expand_label2)]\n     pub head_span: Span,\n }\n \n@@ -75,7 +75,7 @@ pub(crate) struct MacroBodyStability {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(label2)]\n+    #[label(expand_label2)]\n     pub head_span: Span,\n }\n \n@@ -188,7 +188,7 @@ pub(crate) struct FeatureRemoved<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[note(reason)]\n+#[note(expand_reason)]\n pub(crate) struct FeatureRemovedReason<'a> {\n     pub reason: &'a str,\n }\n@@ -223,12 +223,12 @@ pub(crate) struct MalformedFeatureAttribute {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum MalformedFeatureAttributeHelp {\n-    #[label(expected)]\n+    #[label(expand_expected)]\n     Label {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion(expected, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(expand_expected, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,\n@@ -306,7 +306,7 @@ pub(crate) struct IncompleteParse<'a> {\n     pub kind_name: &'a str,\n \n     #[suggestion(\n-        suggestion_add_semi,\n+        expand_suggestion_add_semi,\n         style = \"verbose\",\n         code = \";\",\n         applicability = \"maybe-incorrect\"\n@@ -340,7 +340,7 @@ pub(crate) struct ModuleInBlock {\n }\n \n #[derive(Subdiagnostic)]\n-#[note(note)]\n+#[note(expand_note)]\n pub(crate) struct ModuleInBlockName {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "634e206e58ab47f7cb119130cea5d5c0422a885d", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -20,6 +20,9 @@ extern crate tracing;\n \n extern crate proc_macro as pm;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n mod placeholders;\n mod proc_macro_server;\n \n@@ -60,3 +63,5 @@ mod tokenstream {\n mod mut_visit {\n     mod tests;\n }\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "a416300ba7e851241d01ad8f2b247cb259772d86", "filename": "compiler/rustc_expand/src/parse/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fparse%2Ftests.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -17,8 +17,11 @@ use rustc_span::{BytePos, FileName, Pos, Span};\n \n use std::path::PathBuf;\n \n+static TEST_LOCALE_RESOURCES: &[&str] =\n+    &[crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE];\n+\n fn sess() -> ParseSess {\n-    ParseSess::new(FilePathMapping::empty())\n+    ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty())\n }\n \n /// Parses an item."}, {"sha": "bd1b3ff28b773f4fa8d30612037069dffb295291", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -34,7 +34,7 @@ where\n \n /// Maps a string to tts, using a made-up filename.\n pub(crate) fn string_to_stream(source_str: String) -> TokenStream {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n     source_file_to_stream(\n         &ps,\n         ps.source_map().new_source_file(PathBuf::from(\"bogofile\").into(), source_str),\n@@ -45,7 +45,7 @@ pub(crate) fn string_to_stream(source_str: String) -> TokenStream {\n \n /// Parses a string, returns a crate.\n pub(crate) fn string_to_crate(source_str: String) -> ast::Crate {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n     with_error_checking_parse(source_str, &ps, |p| p.parse_crate_mod())\n }\n \n@@ -123,12 +123,14 @@ impl<T: Write> Write for Shared<T> {\n     }\n }\n \n+static TEST_LOCALE_RESOURCES: &[&str] =\n+    &[crate::DEFAULT_LOCALE_RESOURCE, rustc_parse::DEFAULT_LOCALE_RESOURCE];\n+\n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n     create_default_session_if_not_set_then(|_| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n-        let fallback_bundle =\n-            rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle(TEST_LOCALE_RESOURCES, false);\n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         source_map.new_source_file(Path::new(\"test.rs\").to_owned().into(), file_text.to_owned());\n "}, {"sha": "aa56e60ec753908ca8bc55b8be1d8336397810cd", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "renamed", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -33,20 +33,7 @@ hir_analysis_field_already_declared =\n     .label = field already declared\n     .previous_decl_label = `{$field_name}` first declared here\n \n-hir_analysis_copy_impl_on_type_with_dtor =\n-    the trait `Copy` may not be implemented for this type; the type has a destructor\n-    .label = `Copy` not allowed on types with destructors\n-\n-hir_analysis_multiple_relaxed_default_bounds =\n-    type parameter has more than one relaxed default bound, only one is supported\n-\n-hir_analysis_copy_impl_on_non_adt =\n-    the trait `Copy` may not be implemented for this type\n-    .label = type is not a structure or enumeration\n-\n-hir_analysis_trait_object_declared_with_no_traits =\n-    at least one trait is required for an object type\n-    .alias_span = this alias does not contain a trait\n+hir_analysis_expected_used_symbol = expected `used`, `used(compiler)` or `used(linker)`\n \n hir_analysis_ambiguous_lifetime_bound =\n     ambiguous lifetime bound, explicit lifetime bound required\n@@ -68,6 +55,25 @@ hir_analysis_value_of_associated_struct_already_specified =\n hir_analysis_unconstrained_opaque_type = unconstrained opaque type\n     .note = `{$name}` must be used in combination with a concrete type within the same {$what}\n \n+hir_analysis_manual_implementation =\n+    manual implementations of `{$trait_name}` are experimental\n+    .label = manual implementations of `{$trait_name}` are experimental\n+    .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+hir_analysis_substs_on_overridden_impl = could not resolve substs on overridden impl\n+\n+hir_analysis_unused_extern_crate =\n+    unused extern crate\n+    .suggestion = remove it\n+\n+hir_analysis_extern_crate_not_idiomatic =\n+    `extern crate` is not idiomatic in the new edition\n+    .suggestion = convert it to a `{$msg_code}`\n+\n+hir_analysis_trait_object_declared_with_no_traits =\n+    at least one trait is required for an object type\n+    .alias_span = this alias does not contain a trait\n+\n hir_analysis_missing_type_params =\n     the type {$parameterCount ->\n         [one] parameter\n@@ -90,20 +96,16 @@ hir_analysis_missing_type_params =\n     } to {$parameters}\n     .note = because of the default `Self` reference, type parameters must be specified on object types\n \n-hir_analysis_manual_implementation =\n-    manual implementations of `{$trait_name}` are experimental\n-    .label = manual implementations of `{$trait_name}` are experimental\n-    .help = add `#![feature(unboxed_closures)]` to the crate attributes to enable\n-\n-hir_analysis_substs_on_overridden_impl = could not resolve substs on overridden impl\n+hir_analysis_copy_impl_on_type_with_dtor =\n+    the trait `Copy` may not be implemented for this type; the type has a destructor\n+    .label = `Copy` not allowed on types with destructors\n \n-hir_analysis_unused_extern_crate =\n-    unused extern crate\n-    .suggestion = remove it\n+hir_analysis_multiple_relaxed_default_bounds =\n+    type parameter has more than one relaxed default bound, only one is supported\n \n-hir_analysis_extern_crate_not_idiomatic =\n-    `extern crate` is not idiomatic in the new edition\n-    .suggestion = convert it to a `{$msg_code}`\n+hir_analysis_copy_impl_on_non_adt =\n+    the trait `Copy` may not be implemented for this type\n+    .label = type is not a structure or enumeration\n \n hir_analysis_const_impl_for_non_const_trait =\n     const `impl` for trait `{$trait_name}` which is not marked with `#[const_trait]`", "previous_filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl"}, {"sha": "be3ef03192c26365f7be414bab3bcf388bba7672", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,7 +1,10 @@\n //! Errors emitted by `rustc_hir_analysis`.\n \n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler};\n-use rustc_errors::{IntoDiagnostic, MultiSpan};\n+use crate::fluent_generated as fluent;\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic,\n+    MultiSpan,\n+};\n use rustc_macros::{Diagnostic, LintDiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n@@ -41,11 +44,11 @@ pub struct LifetimesOrBoundsMismatchOnTrait {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(generics_label)]\n+    #[label(hir_analysis_generics_label)]\n     pub generics_span: Option<Span>,\n-    #[label(where_label)]\n+    #[label(hir_analysis_where_label)]\n     pub where_span: Option<Span>,\n-    #[label(bounds_label)]\n+    #[label(hir_analysis_bounds_label)]\n     pub bounds_span: Vec<Span>,\n     pub item_kind: &'static str,\n     pub ident: Ident,\n@@ -57,7 +60,7 @@ pub struct AsyncTraitImplShouldBeAsync {\n     #[primary_span]\n     // #[label]\n     pub span: Span,\n-    #[label(trait_item_label)]\n+    #[label(hir_analysis_trait_item_label)]\n     pub trait_item_span: Option<Span>,\n     pub method_name: Symbol,\n }\n@@ -77,7 +80,7 @@ pub struct FieldAlreadyDeclared {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(previous_decl_label)]\n+    #[label(hir_analysis_previous_decl_label)]\n     pub prev_span: Span,\n }\n \n@@ -109,7 +112,7 @@ pub struct CopyImplOnNonAdt {\n pub struct TraitObjectDeclaredWithNoTraits {\n     #[primary_span]\n     pub span: Span,\n-    #[label(alias_span)]\n+    #[label(hir_analysis_alias_span)]\n     pub trait_alias_span: Option<Span>,\n }\n \n@@ -145,7 +148,7 @@ pub struct ValueOfAssociatedStructAlreadySpecified {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(previous_bound_label)]\n+    #[label(hir_analysis_previous_bound_label)]\n     pub prev_span: Span,\n     pub item_name: Ident,\n     pub def_path: String,\n@@ -175,7 +178,7 @@ impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,\n-            rustc_errors::fluent::hir_analysis_missing_type_params,\n+            fluent::hir_analysis_missing_type_params,\n             error_code!(E0393),\n         );\n         err.set_arg(\"parameterCount\", self.missing_type_params.len());\n@@ -188,7 +191,7 @@ impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n                 .join(\", \"),\n         );\n \n-        err.span_label(self.def_span, rustc_errors::fluent::label);\n+        err.span_label(self.def_span, fluent::hir_analysis_label);\n \n         let mut suggested = false;\n         // Don't suggest setting the type params if there are some already: the order is\n@@ -203,7 +206,7 @@ impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n                 // least we can clue them to the correct syntax `Iterator<Type>`.\n                 err.span_suggestion(\n                     self.span,\n-                    rustc_errors::fluent::suggestion,\n+                    fluent::hir_analysis_suggestion,\n                     format!(\n                         \"{}<{}>\",\n                         snippet,\n@@ -219,10 +222,10 @@ impl<'a> IntoDiagnostic<'a> for MissingTypeParams {\n             }\n         }\n         if !suggested {\n-            err.span_label(self.span, rustc_errors::fluent::no_suggestion_label);\n+            err.span_label(self.span, fluent::hir_analysis_no_suggestion_label);\n         }\n \n-        err.note(rustc_errors::fluent::note);\n+        err.note(fluent::hir_analysis_note);\n         err\n     }\n }\n@@ -274,7 +277,7 @@ pub struct ConstImplForNonConstTrait {\n     pub local_trait_span: Option<Span>,\n     #[note]\n     pub marking: (),\n-    #[note(adding)]\n+    #[note(hir_analysis_adding)]\n     pub adding: (),\n }\n "}, {"sha": "d54e569905fa8595194ca37a3c52dc8233e8e7b7", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -99,9 +99,11 @@ pub mod structured_errors;\n mod variance;\n \n use rustc_errors::{struct_span_err, ErrorGuaranteed};\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::Node;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n+use rustc_macros::fluent_messages;\n use rustc_middle::middle;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -118,6 +120,8 @@ use std::ops::Not;\n use astconv::AstConv;\n use bounds::Bounds;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n     const ERROR_HEAD: &str = \"C-variadic function must have a compatible calling convention\";\n     const CONVENTIONS_UNSTABLE: &str = \"`C`, `cdecl`, `win64`, `sysv64` or `efiapi`\";"}, {"sha": "adfcbc36a4d029cc33509a9d9350d94fa292a92c", "filename": "compiler/rustc_hir_typeck/locales/en-US.ftl", "status": "renamed", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,17 +1,26 @@\n-hir_typeck_fru_note = this expression may have been misinterpreted as a `..` range expression\n-hir_typeck_fru_expr = this expression does not end in a comma...\n-hir_typeck_fru_expr2 = ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n-hir_typeck_fru_suggestion =\n-    to set the remaining fields{$expr ->\n-        [NONE]{\"\"}\n-        *[other] {\" \"}from `{$expr}`\n-    }, separate the last named field with a comma\n-\n hir_typeck_field_multiply_specified_in_initializer =\n     field `{$ident}` specified more than once\n     .label = used more than once\n     .previous_use_label = first use of `{$ident}`\n \n+hir_typeck_copy_impl_on_type_with_dtor =\n+    the trait `Copy` may not be implemented for this type; the type has a destructor\n+    .label = `Copy` not allowed on types with destructors\n+\n+hir_typeck_multiple_relaxed_default_bounds =\n+    type parameter has more than one relaxed default bound, only one is supported\n+\n+hir_typeck_copy_impl_on_non_adt =\n+    the trait `Copy` may not be implemented for this type\n+    .label = type is not a structure or enumeration\n+\n+hir_typeck_trait_object_declared_with_no_traits =\n+    at least one trait is required for an object type\n+    .alias_span = this alias does not contain a trait\n+\n+hir_typeck_functional_record_update_on_non_struct =\n+    functional record update syntax requires a struct\n+\n hir_typeck_return_stmt_outside_of_fn_body =\n     return statement outside of function body\n     .encl_body_label = the return is part of this body...\n@@ -26,9 +35,6 @@ hir_typeck_struct_expr_non_exhaustive =\n hir_typeck_method_call_on_unknown_type =\n     the type of this value must be known to call a method on a raw pointer on it\n \n-hir_typeck_functional_record_update_on_non_struct =\n-    functional record update syntax requires a struct\n-\n hir_typeck_address_of_temporary_taken = cannot take address of a temporary\n     .label = temporary value\n \n@@ -44,9 +50,6 @@ hir_typeck_missing_parentheses_in_range = can't call method `{$method_name}` on\n \n hir_typeck_add_missing_parentheses_in_range = you must surround the range in parentheses to call its `{$func_name}` function\n \n-hir_typeck_op_trait_generic_params =\n-    `{$method_name}` must not have any generic parameters\n-\n hir_typeck_lang_start_incorrect_number_params = incorrect number of parameters for the `start` lang item\n hir_typeck_lang_start_incorrect_number_params_note_expected_count = the `start` lang item should have four parameters, but found {$found_param_count}\n \n@@ -63,3 +66,14 @@ hir_typeck_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n hir_typeck_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide\n \n hir_typeck_convert_to_str = try converting the passed type into a `&str`\n+\n+hir_typeck_op_trait_generic_params = `{$method_name}` must not have any generic parameters\n+\n+hir_typeck_fru_note = this expression may have been misinterpreted as a `..` range expression\n+hir_typeck_fru_expr = this expression does not end in a comma...\n+hir_typeck_fru_expr2 = ... so this is interpreted as a `..` range expression, instead of functional record update syntax\n+hir_typeck_fru_suggestion =\n+    to set the remaining fields{$expr ->\n+        [NONE]{\"\"}\n+        *[other] {\" \"}from `{$expr}`\n+    }, separate the last named field with a comma", "previous_filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl"}, {"sha": "3eee2278dcaddb56acbd67fa479f84c7cc0767b5", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,4 +1,5 @@\n //! Errors emitted by `rustc_hir_typeck`.\n+use crate::fluent_generated as fluent;\n use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n@@ -14,7 +15,7 @@ pub struct FieldMultiplySpecifiedInInitializer {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(previous_use_label)]\n+    #[label(hir_typeck_previous_use_label)]\n     pub prev_span: Span,\n     pub ident: Ident,\n }\n@@ -24,9 +25,9 @@ pub struct FieldMultiplySpecifiedInInitializer {\n pub struct ReturnStmtOutsideOfFnBody {\n     #[primary_span]\n     pub span: Span,\n-    #[label(encl_body_label)]\n+    #[label(hir_typeck_encl_body_label)]\n     pub encl_body_span: Option<Span>,\n-    #[label(encl_fn_label)]\n+    #[label(hir_typeck_encl_fn_label)]\n     pub encl_fn_span: Option<Span>,\n }\n \n@@ -157,20 +158,17 @@ impl AddToDiagnostic for TypeMismatchFruTypo {\n \n         // Only explain that `a ..b` is a range if it's split up\n         if self.expr_span.between(self.fru_span).is_empty() {\n-            diag.span_note(\n-                self.expr_span.to(self.fru_span),\n-                rustc_errors::fluent::hir_typeck_fru_note,\n-            );\n+            diag.span_note(self.expr_span.to(self.fru_span), fluent::hir_typeck_fru_note);\n         } else {\n             let mut multispan: MultiSpan = vec![self.expr_span, self.fru_span].into();\n-            multispan.push_span_label(self.expr_span, rustc_errors::fluent::hir_typeck_fru_expr);\n-            multispan.push_span_label(self.fru_span, rustc_errors::fluent::hir_typeck_fru_expr2);\n-            diag.span_note(multispan, rustc_errors::fluent::hir_typeck_fru_note);\n+            multispan.push_span_label(self.expr_span, fluent::hir_typeck_fru_expr);\n+            multispan.push_span_label(self.fru_span, fluent::hir_typeck_fru_expr2);\n+            diag.span_note(multispan, fluent::hir_typeck_fru_note);\n         }\n \n         diag.span_suggestion(\n             self.expr_span.shrink_to_hi(),\n-            rustc_errors::fluent::hir_typeck_fru_suggestion,\n+            fluent::hir_typeck_fru_suggestion,\n             \", \",\n             Applicability::MaybeIncorrect,\n         );"}, {"sha": "3f3323cc1af046d9ff896cc0dd6b12de49ff01dd", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,9 +1,10 @@\n use super::FnCtxt;\n \n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n+use crate::fluent_generated as fluent;\n use crate::method::probe::{IsSuggestion, Mode, ProbeScope};\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n-use rustc_errors::{fluent, Applicability, Diagnostic, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;"}, {"sha": "57c6c155a4dba488cff93f3a52975ac319a42a1c", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -53,14 +53,18 @@ use crate::check::check_fn;\n use crate::coercion::DynamicCoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n use rustc_data_structures::unord::UnordSet;\n-use rustc_errors::{struct_span_err, DiagnosticId, ErrorGuaranteed, MultiSpan};\n+use rustc_errors::{\n+    struct_span_err, DiagnosticId, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n+    SubdiagnosticMessage,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirIdMap, Node};\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_hir_analysis::check::check_abi;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_macros::fluent_messages;\n use rustc_middle::traits;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -69,6 +73,8 @@ use rustc_session::Session;\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::Span;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n #[macro_export]\n macro_rules! type_error_struct {\n     ($session:expr, $span:expr, $typ:expr, $code:ident, $($message:tt)*) => ({"}, {"sha": "4852ee0d9595cce228848c111ade539948223938", "filename": "compiler/rustc_incremental/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_incremental%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_incremental%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/incremental.ftl"}, {"sha": "511e466c2aeb1d55d5ab6e4872e3e61945822009", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -31,3 +31,8 @@ pub use persist::save_dep_graph;\n pub use persist::save_work_product_index;\n pub use persist::LoadResult;\n pub use persist::{build_dep_graph, load_dep_graph, DepGraphFuture};\n+\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "c5b2b6c2d735758dddf390e189091c1e96ba6306", "filename": "compiler/rustc_infer/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl"}, {"sha": "7dccd0bb930c3afded74c9af21e43fd28f39e4e3", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,6 +1,6 @@\n use hir::GenericParamKind;\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString,\n+    AddToDiagnostic, Applicability, Diagnostic, DiagnosticMessage, DiagnosticStyledString,\n     IntoDiagnosticArg, MultiSpan, SubdiagnosticMessage,\n };\n use rustc_hir as hir;\n@@ -12,9 +12,10 @@ use rustc_span::symbol::kw;\n use rustc_span::Symbol;\n use rustc_span::{symbol::Ident, BytePos, Span};\n \n-use crate::infer::error_reporting::nice_region_error::placeholder_error::Highlighted;\n+use crate::fluent_generated as fluent;\n use crate::infer::error_reporting::{\n     need_type_info::{GeneratorKindAsDiagArg, UnderspecifiedArgKind},\n+    nice_region_error::placeholder_error::Highlighted,\n     ObligationCauseAsDiagArg,\n };\n \n@@ -26,9 +27,9 @@ pub struct OpaqueHiddenTypeDiag {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[note(opaque_type)]\n+    #[note(infer_opaque_type)]\n     pub opaque_type: Span,\n-    #[note(hidden_type)]\n+    #[note(infer_hidden_type)]\n     pub hidden_type: Span,\n }\n \n@@ -768,11 +769,11 @@ impl<'tcx> ActualImplExplNotes<'tcx> {\n pub struct TraitPlaceholderMismatch<'tcx> {\n     #[primary_span]\n     pub span: Span,\n-    #[label(label_satisfy)]\n+    #[label(infer_label_satisfy)]\n     pub satisfy_span: Option<Span>,\n-    #[label(label_where)]\n+    #[label(infer_label_where)]\n     pub where_span: Option<Span>,\n-    #[label(label_dup)]\n+    #[label(infer_label_dup)]\n     pub dup_span: Option<Span>,\n     pub def_id: String,\n     pub trait_def_id: String,\n@@ -808,11 +809,11 @@ pub struct RelationshipHelp;\n #[diag(infer_trait_impl_diff)]\n pub struct TraitImplDiff {\n     #[primary_span]\n-    #[label(found)]\n+    #[label(infer_found)]\n     pub sp: Span,\n-    #[label(expected)]\n+    #[label(infer_expected)]\n     pub trait_sp: Span,\n-    #[note(expected_found)]\n+    #[note(infer_expected_found)]\n     pub note: (),\n     #[subdiagnostic]\n     pub param_help: ConsiderBorrowingParamHelp,\n@@ -852,10 +853,10 @@ impl AddToDiagnostic for DynTraitConstraintSuggestion {\n #[derive(Diagnostic)]\n #[diag(infer_but_calling_introduces, code = \"E0772\")]\n pub struct ButCallingIntroduces {\n-    #[label(label1)]\n+    #[label(infer_label1)]\n     pub param_ty_span: Span,\n     #[primary_span]\n-    #[label(label2)]\n+    #[label(infer_label2)]\n     pub cause_span: Span,\n \n     pub has_param_name: bool,\n@@ -913,15 +914,15 @@ impl AddToDiagnostic for MoreTargeted {\n pub struct ButNeedsToSatisfy {\n     #[primary_span]\n     pub sp: Span,\n-    #[label(influencer)]\n+    #[label(infer_influencer)]\n     pub influencer_point: Span,\n-    #[label(used_here)]\n+    #[label(infer_used_here)]\n     pub spans: Vec<Span>,\n-    #[label(require)]\n+    #[label(infer_require)]\n     pub require_span_as_label: Option<Span>,\n-    #[note(require)]\n+    #[note(infer_require)]\n     pub require_span_as_note: Option<Span>,\n-    #[note(introduced_by_bound)]\n+    #[note(infer_introduced_by_bound)]\n     pub bound: Option<Span>,\n \n     #[subdiagnostic]"}, {"sha": "ef543b1fb9353de6e93f22282f08590e17518dd1", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,7 +1,6 @@\n+use crate::fluent_generated as fluent;\n use crate::infer::error_reporting::nice_region_error::find_anon_type;\n-use rustc_errors::{\n-    self, fluent, AddToDiagnostic, Diagnostic, IntoDiagnosticArg, SubdiagnosticMessage,\n-};\n+use rustc_errors::{self, AddToDiagnostic, Diagnostic, IntoDiagnosticArg, SubdiagnosticMessage};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{symbol::kw, Span};\n "}, {"sha": "7ffe1fd20b49ae03b5b33151af67a3ee91c08fe4", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -2,10 +2,11 @@ use crate::errors::{\n     note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n     RefLongerThanData, RegionOriginNote, WhereClauseSuggestions,\n };\n+use crate::fluent_generated as fluent;\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic,\n+    AddToDiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic,\n };\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::traits::ObligationCauseCode;"}, {"sha": "b03ecb59750801a85042bdb4aeefcd9a135c6f62", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -33,6 +33,11 @@ extern crate tracing;\n #[macro_use]\n extern crate rustc_middle;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n mod errors;\n pub mod infer;\n pub mod traits;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "a7bc0e7af1fe9e2a7ed8c3f349ad68171b1d3e35", "filename": "compiler/rustc_interface/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/interface.ftl"}, {"sha": "5e38ca034ac1ffd9797b75ed3a5ef38059a08ce0", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -222,6 +222,7 @@ pub struct Config {\n     pub output_dir: Option<PathBuf>,\n     pub output_file: Option<PathBuf>,\n     pub file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n+    pub locale_resources: &'static [&'static str],\n \n     pub lint_caps: FxHashMap<lint::LintId, lint::Level>,\n \n@@ -267,6 +268,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 config.opts,\n                 config.crate_cfg,\n                 config.crate_check_cfg,\n+                config.locale_resources,\n                 config.file_loader,\n                 CompilerIO {\n                     input: config.input,"}, {"sha": "1abbe8d4fabef80e2148eb32352fc3978fd5df11", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -12,6 +12,9 @@\n #[macro_use]\n extern crate tracing;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n mod callbacks;\n mod errors;\n pub mod interface;\n@@ -27,3 +30,5 @@ pub use queries::Queries;\n \n #[cfg(test)]\n mod tests;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "8ef1df39933b1fad5a5fc85a5d74e3e78091ea5f", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -50,7 +50,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n         output_file: None,\n         temps_dir,\n     };\n-    let sess = build_session(sessopts, io, None, registry, Default::default(), None, None);\n+    let sess = build_session(sessopts, io, None, registry, &[], Default::default(), None, None);\n     (sess, cfg)\n }\n "}, {"sha": "20ba5c6eb2d42799f134fd405bfe19c56c6f68d4", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -59,6 +59,7 @@ pub fn create_session(\n     sopts: config::Options,\n     cfg: FxHashSet<(String, Option<String>)>,\n     check_cfg: CheckCfg,\n+    locale_resources: &'static [&'static str],\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     io: CompilerIO,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -94,6 +95,7 @@ pub fn create_session(\n         io,\n         bundle,\n         descriptions,\n+        locale_resources,\n         lint_caps,\n         file_loader,\n         target_override,"}, {"sha": "b1e7cc69a809b269ca9a5608656736490b1225bf", "filename": "compiler/rustc_lint/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl"}, {"sha": "bccb0a94e986d493c7a251eafb02bbef5e46ebbf", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,5 +1,7 @@\n-use crate::lints::{ArrayIntoIterDiag, ArrayIntoIterDiagSub};\n-use crate::{LateContext, LateLintPass, LintContext};\n+use crate::{\n+    lints::{ArrayIntoIterDiag, ArrayIntoIterDiagSub},\n+    LateContext, LateLintPass, LintContext,\n+};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};"}, {"sha": "5e90669d33a4a4a5de96a980f822d2e89526084c", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -20,6 +20,7 @@\n //! If you define a new `LateLintPass`, you will also need to add it to the\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n+use crate::fluent_generated as fluent;\n use crate::{\n     errors::BuiltinEllpisisInclusiveRangePatterns,\n     lints::{\n@@ -50,7 +51,7 @@ use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust::{self, expr_to_string};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::{fluent, Applicability, DecorateLint, MultiSpan};\n+use rustc_errors::{Applicability, DecorateLint, MultiSpan};\n use rustc_feature::{deprecated_attributes, AttributeGate, BuiltinAttribute, GateIssue, Stability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "9af5284df1e2959148c460466c97c96af3d82e90", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,6 +1,6 @@\n+use crate::fluent_generated as fluent;\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Diagnostic, ErrorGuaranteed, Handler, IntoDiagnostic,\n-    SubdiagnosticMessage,\n+    AddToDiagnostic, Diagnostic, ErrorGuaranteed, Handler, IntoDiagnostic, SubdiagnosticMessage,\n };\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::lint::Level;\n@@ -116,7 +116,7 @@ impl IntoDiagnostic<'_> for CheckNameUnknown {\n         let mut diag = handler.struct_err(fluent::lint_check_name_unknown);\n         diag.code(rustc_errors::error_code!(E0602));\n         if let Some(suggestion) = self.suggestion {\n-            diag.help(fluent::help);\n+            diag.help(fluent::lint_help);\n             diag.set_arg(\"suggestion\", suggestion);\n         }\n         diag.set_arg(\"lint_name\", self.lint_name);"}, {"sha": "bc7488fab4a5c995bdd69d3df9eb5828f5300273", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,13 +1,16 @@\n-use crate::context::{CheckLintNameResult, LintStore};\n-use crate::late::unerased_lint_store;\n-use crate::lints::{\n-    DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint, RenamedOrRemovedLint,\n-    RenamedOrRemovedLintSuggestion, UnknownLint, UnknownLintSuggestion,\n+use crate::{\n+    context::{CheckLintNameResult, LintStore},\n+    fluent_generated as fluent,\n+    late::unerased_lint_store,\n+    lints::{\n+        DeprecatedLintName, IgnoredUnlessCrateSpecified, OverruledAtributeLint,\n+        RenamedOrRemovedLint, RenamedOrRemovedLintSuggestion, UnknownLint, UnknownLintSuggestion,\n+    },\n };\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{fluent, DecorateLint, DiagnosticBuilder, DiagnosticMessage, MultiSpan};\n+use rustc_errors::{DecorateLint, DiagnosticBuilder, DiagnosticMessage, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::HirId;\n@@ -983,7 +986,7 @@ impl<'s, P: LintLevelsProvider> LintLevelsBuilder<'s, P> {\n                     fluent::lint_unknown_gated_lint,\n                     |lint| {\n                         lint.set_arg(\"name\", lint_id.lint.name_lower());\n-                        lint.note(fluent::note);\n+                        lint.note(fluent::lint_note);\n                         add_feature_diagnostics(lint, &self.sess.parse_sess, feature);\n                         lint\n                     },"}, {"sha": "2070ffea4d99e388bb9939af2c52f5cfe5a9e828", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -80,8 +80,10 @@ mod unused;\n pub use array_into_iter::ARRAY_INTO_ITER;\n \n use rustc_ast as ast;\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n+use rustc_macros::fluent_messages;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::builtin::{\n@@ -122,6 +124,8 @@ pub use rustc_session::lint::Level::{self, *};\n pub use rustc_session::lint::{BufferedEarlyLint, FutureIncompatibleInfo, Lint, LintId};\n pub use rustc_session::lint::{LintArray, LintPass};\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn provide(providers: &mut Providers) {\n     levels::provide(providers);\n     expect::provide(providers);"}, {"sha": "2d9aa9074be79d66cee8db45b23fc515158f2643", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 62, "deletions": 58, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -2,9 +2,10 @@\n #![allow(rustc::diagnostic_outside_of_impl)]\n use std::num::NonZeroU32;\n \n+use crate::fluent_generated as fluent;\n use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage,\n-    DiagnosticStyledString, SuggestionStyle,\n+    AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage, DiagnosticStyledString,\n+    SuggestionStyle,\n };\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n@@ -23,20 +24,23 @@ use crate::{\n #[diag(lint_array_into_iter)]\n pub struct ArrayIntoIterDiag<'a> {\n     pub target: &'a str,\n-    #[suggestion(use_iter_suggestion, code = \"iter\", applicability = \"machine-applicable\")]\n+    #[suggestion(lint_use_iter_suggestion, code = \"iter\", applicability = \"machine-applicable\")]\n     pub suggestion: Span,\n     #[subdiagnostic]\n     pub sub: Option<ArrayIntoIterDiagSub>,\n }\n \n #[derive(Subdiagnostic)]\n pub enum ArrayIntoIterDiagSub {\n-    #[suggestion(remove_into_iter_suggestion, code = \"\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(lint_remove_into_iter_suggestion, code = \"\", applicability = \"maybe-incorrect\")]\n     RemoveIntoIter {\n         #[primary_span]\n         span: Span,\n     },\n-    #[multipart_suggestion(use_explicit_into_iter_suggestion, applicability = \"maybe-incorrect\")]\n+    #[multipart_suggestion(\n+        lint_use_explicit_into_iter_suggestion,\n+        applicability = \"maybe-incorrect\"\n+    )]\n     UseExplicitIntoIter {\n         #[suggestion_part(code = \"IntoIterator::into_iter(\")]\n         start_span: Span,\n@@ -163,13 +167,13 @@ pub struct BuiltinDeprecatedAttrLink<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum BuiltinDeprecatedAttrLinkSuggestion<'a> {\n-    #[suggestion(msg_suggestion, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(lint_msg_suggestion, code = \"\", applicability = \"machine-applicable\")]\n     Msg {\n         #[primary_span]\n         suggestion: Span,\n         msg: &'a str,\n     },\n-    #[suggestion(default_suggestion, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(lint_default_suggestion, code = \"\", applicability = \"machine-applicable\")]\n     Default {\n         #[primary_span]\n         suggestion: Span,\n@@ -201,9 +205,9 @@ pub struct BuiltinUnusedDocComment<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum BuiltinUnusedDocCommentSub {\n-    #[help(plain_help)]\n+    #[help(lint_plain_help)]\n     PlainHelp,\n-    #[help(block_help)]\n+    #[help(lint_block_help)]\n     BlockHelp,\n }\n \n@@ -242,7 +246,7 @@ impl<'a> DecorateLint<'a, ()> for BuiltinUngatedAsyncFnTrackCaller<'_> {\n         self,\n         diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n     ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n-        diag.span_label(self.label, fluent::label);\n+        diag.span_label(self.label, fluent::lint_label);\n         rustc_session::parse::add_feature_diagnostics(\n             diag,\n             &self.parse_sess,\n@@ -337,7 +341,7 @@ impl AddToDiagnostic for BuiltinTypeAliasGenericBoundsSuggestion {\n         ) -> rustc_errors::SubdiagnosticMessage,\n     {\n         diag.multipart_suggestion(\n-            fluent::suggestion,\n+            fluent::lint_suggestion,\n             self.suggestions,\n             Applicability::MachineApplicable,\n         );\n@@ -388,7 +392,7 @@ pub struct BuiltinExplicitOutlives {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion)]\n+#[multipart_suggestion(lint_suggestion)]\n pub struct BuiltinExplicitOutlivesSuggestion {\n     #[suggestion_part(code = \"\")]\n     pub spans: Vec<Span>,\n@@ -407,11 +411,11 @@ pub struct BuiltinIncompleteFeatures {\n }\n \n #[derive(Subdiagnostic)]\n-#[help(help)]\n+#[help(lint_help)]\n pub struct BuiltinIncompleteFeaturesHelp;\n \n #[derive(Subdiagnostic)]\n-#[note(note)]\n+#[note(lint_note)]\n pub struct BuiltinIncompleteFeaturesNote {\n     pub n: NonZeroU32,\n }\n@@ -482,9 +486,9 @@ pub enum BuiltinClashingExtern<'a> {\n     SameName {\n         this: Symbol,\n         orig: Symbol,\n-        #[label(previous_decl_label)]\n+        #[label(lint_previous_decl_label)]\n         previous_decl_label: Span,\n-        #[label(mismatch_label)]\n+        #[label(lint_mismatch_label)]\n         mismatch_label: Span,\n         #[subdiagnostic]\n         sub: BuiltinClashingExternSub<'a>,\n@@ -493,9 +497,9 @@ pub enum BuiltinClashingExtern<'a> {\n     DiffName {\n         this: Symbol,\n         orig: Symbol,\n-        #[label(previous_decl_label)]\n+        #[label(lint_previous_decl_label)]\n         previous_decl_label: Span,\n-        #[label(mismatch_label)]\n+        #[label(lint_mismatch_label)]\n         mismatch_label: Span,\n         #[subdiagnostic]\n         sub: BuiltinClashingExternSub<'a>,\n@@ -571,7 +575,7 @@ pub struct SupertraitAsDerefTarget<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(label)]\n+#[label(lint_label)]\n pub struct SupertraitAsDerefTargetLabel {\n     #[primary_span]\n     pub label: Span,\n@@ -604,7 +608,7 @@ pub struct Expectation {\n }\n \n #[derive(Subdiagnostic)]\n-#[note(rationale)]\n+#[note(lint_rationale)]\n pub struct ExpectationNote {\n     pub rationale: Symbol,\n }\n@@ -625,13 +629,13 @@ pub struct ForLoopsOverFalliblesDiag<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum ForLoopsOverFalliblesLoopSub<'a> {\n-    #[suggestion(remove_next, code = \".by_ref()\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(lint_remove_next, code = \".by_ref()\", applicability = \"maybe-incorrect\")]\n     RemoveNext {\n         #[primary_span]\n         suggestion: Span,\n         recv_snip: String,\n     },\n-    #[multipart_suggestion(use_while_let, applicability = \"maybe-incorrect\")]\n+    #[multipart_suggestion(lint_use_while_let, applicability = \"maybe-incorrect\")]\n     UseWhileLet {\n         #[suggestion_part(code = \"while let {var}(\")]\n         start_span: Span,\n@@ -642,14 +646,14 @@ pub enum ForLoopsOverFalliblesLoopSub<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(use_question_mark, code = \"?\", applicability = \"maybe-incorrect\")]\n+#[suggestion(lint_use_question_mark, code = \"?\", applicability = \"maybe-incorrect\")]\n pub struct ForLoopsOverFalliblesQuestionMark {\n     #[primary_span]\n     pub suggestion: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"maybe-incorrect\")]\n+#[multipart_suggestion(lint_suggestion, applicability = \"maybe-incorrect\")]\n pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub var: &'a str,\n     #[suggestion_part(code = \"if let {var}(\")]\n@@ -708,13 +712,13 @@ impl AddToDiagnostic for HiddenUnicodeCodepointsDiagSub {\n         match self {\n             HiddenUnicodeCodepointsDiagSub::Escape { spans } => {\n                 diag.multipart_suggestion_with_style(\n-                    fluent::suggestion_remove,\n+                    fluent::lint_suggestion_remove,\n                     spans.iter().map(|(_, span)| (*span, \"\".to_string())).collect(),\n                     Applicability::MachineApplicable,\n                     SuggestionStyle::HideCodeAlways,\n                 );\n                 diag.multipart_suggestion(\n-                    fluent::suggestion_escape,\n+                    fluent::lint_suggestion_escape,\n                     spans\n                         .into_iter()\n                         .map(|(c, span)| {\n@@ -737,8 +741,8 @@ impl AddToDiagnostic for HiddenUnicodeCodepointsDiagSub {\n                         .collect::<Vec<String>>()\n                         .join(\", \"),\n                 );\n-                diag.note(fluent::suggestion_remove);\n-                diag.note(fluent::no_suggestion_note_escape);\n+                diag.note(fluent::lint_suggestion_remove);\n+                diag.note(fluent::lint_no_suggestion_note_escape);\n             }\n         }\n     }\n@@ -883,7 +887,7 @@ pub struct RenamedOrRemovedLint<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(suggestion, code = \"{replace}\", applicability = \"machine-applicable\")]\n+#[suggestion(lint_suggestion, code = \"{replace}\", applicability = \"machine-applicable\")]\n pub struct RenamedOrRemovedLintSuggestion<'a> {\n     #[primary_span]\n     pub suggestion: Span,\n@@ -899,7 +903,7 @@ pub struct UnknownLint {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n+#[suggestion(lint_suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n pub struct UnknownLintSuggestion {\n     #[primary_span]\n     pub suggestion: Span,\n@@ -919,9 +923,9 @@ pub struct IgnoredUnlessCrateSpecified<'a> {\n #[note]\n #[help]\n pub struct CStringPtr {\n-    #[label(as_ptr_label)]\n+    #[label(lint_as_ptr_label)]\n     pub as_ptr: Span,\n-    #[label(unwrap_label)]\n+    #[label(lint_unwrap_label)]\n     pub unwrap: Span,\n }\n \n@@ -952,7 +956,7 @@ pub struct ConfusableIdentifierPair {\n \n #[derive(LintDiagnostic)]\n #[diag(lint_mixed_script_confusables)]\n-#[note(includes_note)]\n+#[note(lint_includes_note)]\n #[note]\n pub struct MixedScriptConfusables {\n     pub set: String,\n@@ -972,17 +976,17 @@ impl<'a> DecorateLint<'a, ()> for NonFmtPanicUnused {\n         diag: &'b mut rustc_errors::DiagnosticBuilder<'a, ()>,\n     ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"count\", self.count);\n-        diag.note(fluent::note);\n+        diag.note(fluent::lint_note);\n         if let Some(span) = self.suggestion {\n             diag.span_suggestion(\n                 span.shrink_to_hi(),\n-                fluent::add_args_suggestion,\n+                fluent::lint_add_args_suggestion,\n                 \", ...\",\n                 Applicability::HasPlaceholders,\n             );\n             diag.span_suggestion(\n                 span.shrink_to_lo(),\n-                fluent::add_fmt_suggestion,\n+                fluent::lint_add_fmt_suggestion,\n                 \"\\\"{}\\\", \",\n                 Applicability::MachineApplicable,\n             );\n@@ -1016,12 +1020,12 @@ pub struct NonCamelCaseType<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum NonCamelCaseTypeSub {\n-    #[label(label)]\n+    #[label(lint_label)]\n     Label {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion(suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(lint_suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,\n@@ -1057,32 +1061,32 @@ impl AddToDiagnostic for NonSnakeCaseDiagSub {\n     {\n         match self {\n             NonSnakeCaseDiagSub::Label { span } => {\n-                diag.span_label(span, fluent::label);\n+                diag.span_label(span, fluent::lint_label);\n             }\n             NonSnakeCaseDiagSub::Help => {\n-                diag.help(fluent::help);\n+                diag.help(fluent::lint_help);\n             }\n             NonSnakeCaseDiagSub::ConvertSuggestion { span, suggestion } => {\n                 diag.span_suggestion(\n                     span,\n-                    fluent::convert_suggestion,\n+                    fluent::lint_convert_suggestion,\n                     suggestion,\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n             NonSnakeCaseDiagSub::RenameOrConvertSuggestion { span, suggestion } => {\n                 diag.span_suggestion(\n                     span,\n-                    fluent::rename_or_convert_suggestion,\n+                    fluent::lint_rename_or_convert_suggestion,\n                     suggestion,\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n             NonSnakeCaseDiagSub::SuggestionAndNote { span } => {\n-                diag.note(fluent::cannot_convert_note);\n+                diag.note(fluent::lint_cannot_convert_note);\n                 diag.span_suggestion(\n                     span,\n-                    fluent::rename_suggestion,\n+                    fluent::lint_rename_suggestion,\n                     \"\",\n                     Applicability::MaybeIncorrect,\n                 );\n@@ -1102,12 +1106,12 @@ pub struct NonUpperCaseGlobal<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum NonUpperCaseGlobalSub {\n-    #[label(label)]\n+    #[label(lint_label)]\n     Label {\n         #[primary_span]\n         span: Span,\n     },\n-    #[suggestion(suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(lint_suggestion, code = \"{replace}\", applicability = \"maybe-incorrect\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,\n@@ -1225,11 +1229,11 @@ impl AddToDiagnostic for OverflowingBinHexSign {\n     {\n         match self {\n             OverflowingBinHexSign::Positive => {\n-                diag.note(fluent::positive_note);\n+                diag.note(fluent::lint_positive_note);\n             }\n             OverflowingBinHexSign::Negative => {\n-                diag.note(fluent::negative_note);\n-                diag.note(fluent::negative_becomes_note);\n+                diag.note(fluent::lint_negative_note);\n+                diag.note(fluent::lint_negative_becomes_note);\n             }\n         }\n     }\n@@ -1238,7 +1242,7 @@ impl AddToDiagnostic for OverflowingBinHexSign {\n #[derive(Subdiagnostic)]\n pub enum OverflowingBinHexSub<'a> {\n     #[suggestion(\n-        suggestion,\n+        lint_suggestion,\n         code = \"{sans_suffix}{suggestion_ty}\",\n         applicability = \"machine-applicable\"\n     )]\n@@ -1248,7 +1252,7 @@ pub enum OverflowingBinHexSub<'a> {\n         suggestion_ty: &'a str,\n         sans_suffix: &'a str,\n     },\n-    #[help(help)]\n+    #[help(lint_help)]\n     Help { suggestion_ty: &'a str },\n }\n \n@@ -1265,7 +1269,7 @@ pub struct OverflowingInt<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[help(help)]\n+#[help(lint_help)]\n pub struct OverflowingIntHelp<'a> {\n     pub suggestion_ty: &'a str,\n }\n@@ -1317,13 +1321,13 @@ impl<'a> DecorateLint<'a, ()> for ImproperCTypes<'_> {\n     ) -> &'b mut rustc_errors::DiagnosticBuilder<'a, ()> {\n         diag.set_arg(\"ty\", self.ty);\n         diag.set_arg(\"desc\", self.desc);\n-        diag.span_label(self.label, fluent::label);\n+        diag.span_label(self.label, fluent::lint_label);\n         if let Some(help) = self.help {\n             diag.help(help);\n         }\n         diag.note(self.note);\n         if let Some(note) = self.span_note {\n-            diag.span_note(note, fluent::note);\n+            diag.span_note(note, fluent::lint_note);\n         }\n         diag\n     }\n@@ -1416,7 +1420,7 @@ pub struct UnusedDef<'a, 'b> {\n #[derive(Subdiagnostic)]\n pub enum UnusedDefSuggestion {\n     #[suggestion(\n-        suggestion,\n+        lint_suggestion,\n         style = \"verbose\",\n         code = \"let _ = \",\n         applicability = \"machine-applicable\"\n@@ -1460,13 +1464,13 @@ pub struct PathStatementDrop {\n \n #[derive(Subdiagnostic)]\n pub enum PathStatementDropSub {\n-    #[suggestion(suggestion, code = \"drop({snippet});\", applicability = \"machine-applicable\")]\n+    #[suggestion(lint_suggestion, code = \"drop({snippet});\", applicability = \"machine-applicable\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,\n         snippet: String,\n     },\n-    #[help(help)]\n+    #[help(lint_help)]\n     Help {\n         #[primary_span]\n         span: Span,\n@@ -1487,7 +1491,7 @@ pub struct UnusedDelim<'a> {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(lint_suggestion, applicability = \"machine-applicable\")]\n pub struct UnusedDelimSuggestion {\n     #[suggestion_part(code = \"{start_replace}\")]\n     pub start_span: Span,"}, {"sha": "5bb1abfd2ec9792eef634d6f3b5a9cd60871d9d5", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,7 +1,7 @@\n use crate::lints::{NonFmtPanicBraces, NonFmtPanicUnused};\n-use crate::{LateContext, LateLintPass, LintContext};\n+use crate::{fluent_generated as fluent, LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n-use rustc_errors::{fluent, Applicability};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::lint::in_external_macro;\n@@ -122,18 +122,18 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n     #[allow(rustc::diagnostic_outside_of_impl)]\n     cx.struct_span_lint(NON_FMT_PANICS, arg_span, fluent::lint_non_fmt_panic, |lint| {\n         lint.set_arg(\"name\", symbol);\n-        lint.note(fluent::note);\n-        lint.note(fluent::more_info_note);\n+        lint.note(fluent::lint_note);\n+        lint.note(fluent::lint_more_info_note);\n         if !is_arg_inside_call(arg_span, span) {\n             // No clue where this argument is coming from.\n             return lint;\n         }\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n-            lint.note(fluent::supports_fmt_note);\n+            lint.note(fluent::lint_supports_fmt_note);\n             if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n                 lint.multipart_suggestion(\n-                    fluent::supports_fmt_suggestion,\n+                    fluent::lint_supports_fmt_suggestion,\n                     vec![\n                         (arg_span.until(open.shrink_to_hi()), \"\".into()),\n                         (close.until(arg_span.shrink_to_hi()), \"\".into()),\n@@ -179,15 +179,15 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n             if suggest_display {\n                 lint.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n-                    fluent::display_suggestion,\n+                    fluent::lint_display_suggestion,\n                     \"\\\"{}\\\", \",\n                     fmt_applicability,\n                 );\n             } else if suggest_debug {\n                 lint.set_arg(\"ty\", ty);\n                 lint.span_suggestion_verbose(\n                     arg_span.shrink_to_lo(),\n-                    fluent::debug_suggestion,\n+                    fluent::lint_debug_suggestion,\n                     \"\\\"{:?}\\\", \",\n                     fmt_applicability,\n                 );\n@@ -197,7 +197,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n                 if let Some((open, close, del)) = find_delimiters(cx, span) {\n                     lint.set_arg(\"already_suggested\", suggest_display || suggest_debug);\n                     lint.multipart_suggestion(\n-                        fluent::panic_suggestion,\n+                        fluent::lint_panic_suggestion,\n                         if del == '(' {\n                             vec![(span.until(open), \"std::panic::panic_any\".into())]\n                         } else {"}, {"sha": "883a56cb3ce6b047c32400514776ef5a6bf96b6b", "filename": "compiler/rustc_lint/src/opaque_hidden_inferred_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fopaque_hidden_inferred_bound.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -149,7 +149,7 @@ impl<'tcx> LateLintPass<'tcx> for OpaqueHiddenInferredBound {\n struct OpaqueHiddenInferredBoundLint<'tcx> {\n     ty: Ty<'tcx>,\n     proj_ty: Ty<'tcx>,\n-    #[label(specifically)]\n+    #[label(lint_specifically)]\n     assoc_pred_span: Span,\n     #[subdiagnostic]\n     add_bound: Option<AddBound<'tcx>>,"}, {"sha": "a7f2e9f6eb15086f9cc5371b451737bee05774d0", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,14 +1,17 @@\n-use crate::lints::{\n-    AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n-    InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n-    OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral, OverflowingUInt,\n-    RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n+use crate::{\n+    fluent_generated as fluent,\n+    lints::{\n+        AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n+        InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n+        OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n+    },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{fluent, DiagnosticMessage};\n+use rustc_errors::DiagnosticMessage;\n use rustc_hir as hir;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};"}, {"sha": "12a954258d1de682e8531455f4fff334b3bd7170", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -57,7 +57,7 @@ impl<'a> DiagnosticDerive<'a> {\n                 }\n                 Some(slug) => {\n                     quote! {\n-                        let mut #diag = #handler.struct_diagnostic(rustc_errors::fluent::#slug);\n+                        let mut #diag = #handler.struct_diagnostic(crate::fluent_generated::#slug);\n                     }\n                 }\n             };\n@@ -149,7 +149,7 @@ impl<'a> LintDiagnosticDerive<'a> {\n                 }\n                 Some(slug) => {\n                     quote! {\n-                        rustc_errors::fluent::#slug.into()\n+                        crate::fluent_generated::#slug.into()\n                     }\n                 }\n             }"}, {"sha": "46068f8c868cd7fba6f8a58cd318434450620a16", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -452,7 +452,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                 Ok(quote! {\n                     #diag.span_suggestions_with_style(\n                         #span_field,\n-                        rustc_errors::fluent::#slug,\n+                        crate::fluent_generated::#slug,\n                         #code_field,\n                         #applicability,\n                         #style\n@@ -476,7 +476,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n         quote! {\n             #diag.#fn_name(\n                 #field_binding,\n-                rustc_errors::fluent::#fluent_attr_identifier\n+                crate::fluent_generated::#fluent_attr_identifier\n             );\n         }\n     }\n@@ -486,7 +486,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     fn add_subdiagnostic(&self, kind: &Ident, fluent_attr_identifier: Path) -> TokenStream {\n         let diag = &self.parent.diag;\n         quote! {\n-            #diag.#kind(rustc_errors::fluent::#fluent_attr_identifier);\n+            #diag.#kind(crate::fluent_generated::#fluent_attr_identifier);\n         }\n     }\n "}, {"sha": "38c0f4895db06ecb2315c9994b02daf61c134d0b", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 220, "deletions": 229, "changes": 449, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -19,52 +19,9 @@ use std::{\n     io::Read,\n     path::{Path, PathBuf},\n };\n-use syn::{\n-    parse::{Parse, ParseStream},\n-    parse_macro_input,\n-    punctuated::Punctuated,\n-    token, Ident, LitStr, Result,\n-};\n+use syn::{parse_macro_input, Ident, LitStr};\n use unic_langid::langid;\n \n-struct Resource {\n-    krate: Ident,\n-    #[allow(dead_code)]\n-    fat_arrow_token: token::FatArrow,\n-    resource_path: LitStr,\n-}\n-\n-impl Parse for Resource {\n-    fn parse(input: ParseStream<'_>) -> Result<Self> {\n-        Ok(Resource {\n-            krate: input.parse()?,\n-            fat_arrow_token: input.parse()?,\n-            resource_path: input.parse()?,\n-        })\n-    }\n-}\n-\n-struct Resources(Punctuated<Resource, token::Comma>);\n-\n-impl Parse for Resources {\n-    fn parse(input: ParseStream<'_>) -> Result<Self> {\n-        let mut resources = Punctuated::new();\n-        loop {\n-            if input.is_empty() || input.peek(token::Brace) {\n-                break;\n-            }\n-            let value = input.parse()?;\n-            resources.push_value(value);\n-            if !input.peek(token::Comma) {\n-                break;\n-            }\n-            let punct = input.parse()?;\n-            resources.push_punct(punct);\n-        }\n-        Ok(Resources(resources))\n-    }\n-}\n-\n /// Helper function for returning an absolute path for macro-invocation relative file paths.\n ///\n /// If the input is already absolute, then the input is returned. If the input is not absolute,\n@@ -84,251 +41,285 @@ fn invocation_relative_path_to_absolute(span: Span, path: &str) -> PathBuf {\n     }\n }\n \n+/// Tokens to be returned when the macro cannot proceed.\n+fn failed(crate_name: &Ident) -> proc_macro::TokenStream {\n+    quote! {\n+        pub static DEFAULT_LOCALE_RESOURCE: &'static str = \"\";\n+\n+        #[allow(non_upper_case_globals)]\n+        #[doc(hidden)]\n+        pub(crate) mod fluent_generated {\n+            pub mod #crate_name {\n+            }\n+\n+            pub mod _subdiag {\n+                pub const help: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"help\"));\n+                pub const note: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"note\"));\n+                pub const warn: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"warn\"));\n+                pub const label: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"label\"));\n+                pub const suggestion: crate::SubdiagnosticMessage =\n+                    crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"suggestion\"));\n+            }\n+        }\n+    }\n+    .into()\n+}\n+\n /// See [rustc_macros::fluent_messages].\n pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n-    let resources = parse_macro_input!(input as Resources);\n+    let crate_name = std::env::var(\"CARGO_PKG_NAME\")\n+        // If `CARGO_PKG_NAME` is missing, then we're probably running in a test, so use\n+        // `no_crate`.\n+        .unwrap_or_else(|_| \"no_crate\".to_string())\n+        .replace(\"rustc_\", \"\");\n \n     // Cannot iterate over individual messages in a bundle, so do that using the\n     // `FluentResource` instead. Construct a bundle anyway to find out if there are conflicting\n     // messages in the resources.\n     let mut bundle = FluentBundle::new(vec![langid!(\"en-US\")]);\n \n-    // Map of Fluent identifiers to the `Span` of the resource that defined them, used for better\n-    // diagnostics.\n-    let mut previous_defns = HashMap::new();\n-\n     // Set of Fluent attribute names already output, to avoid duplicate type errors - any given\n     // constant created for a given attribute is the same.\n     let mut previous_attrs = HashSet::new();\n \n-    let mut includes = TokenStream::new();\n-    let mut generated = TokenStream::new();\n+    let resource_str = parse_macro_input!(input as LitStr);\n+    let resource_span = resource_str.span().unwrap();\n+    let relative_ftl_path = resource_str.value();\n+    let absolute_ftl_path = invocation_relative_path_to_absolute(resource_span, &relative_ftl_path);\n \n-    for res in resources.0 {\n-        let krate_span = res.krate.span().unwrap();\n-        let path_span = res.resource_path.span().unwrap();\n+    let crate_name = Ident::new(&crate_name, resource_str.span());\n \n-        let relative_ftl_path = res.resource_path.value();\n-        let absolute_ftl_path =\n-            invocation_relative_path_to_absolute(krate_span, &relative_ftl_path);\n-        // As this macro also outputs an `include_str!` for this file, the macro will always be\n-        // re-executed when the file changes.\n-        let mut resource_file = match File::open(absolute_ftl_path) {\n-            Ok(resource_file) => resource_file,\n-            Err(e) => {\n-                Diagnostic::spanned(path_span, Level::Error, \"could not open Fluent resource\")\n-                    .note(e.to_string())\n-                    .emit();\n-                continue;\n-            }\n-        };\n-        let mut resource_contents = String::new();\n-        if let Err(e) = resource_file.read_to_string(&mut resource_contents) {\n-            Diagnostic::spanned(path_span, Level::Error, \"could not read Fluent resource\")\n+    // As this macro also outputs an `include_str!` for this file, the macro will always be\n+    // re-executed when the file changes.\n+    let mut resource_file = match File::open(absolute_ftl_path) {\n+        Ok(resource_file) => resource_file,\n+        Err(e) => {\n+            Diagnostic::spanned(resource_span, Level::Error, \"could not open Fluent resource\")\n                 .note(e.to_string())\n                 .emit();\n-            continue;\n+            return failed(&crate_name);\n         }\n-        let resource = match FluentResource::try_new(resource_contents) {\n-            Ok(resource) => resource,\n-            Err((this, errs)) => {\n-                Diagnostic::spanned(path_span, Level::Error, \"could not parse Fluent resource\")\n-                    .help(\"see additional errors emitted\")\n-                    .emit();\n-                for ParserError { pos, slice: _, kind } in errs {\n-                    let mut err = kind.to_string();\n-                    // Entirely unnecessary string modification so that the error message starts\n-                    // with a lowercase as rustc errors do.\n-                    err.replace_range(\n-                        0..1,\n-                        &err.chars().next().unwrap().to_lowercase().to_string(),\n-                    );\n+    };\n+    let mut resource_contents = String::new();\n+    if let Err(e) = resource_file.read_to_string(&mut resource_contents) {\n+        Diagnostic::spanned(resource_span, Level::Error, \"could not read Fluent resource\")\n+            .note(e.to_string())\n+            .emit();\n+        return failed(&crate_name);\n+    }\n+\n+    let resource = match FluentResource::try_new(resource_contents) {\n+        Ok(resource) => resource,\n+        Err((this, errs)) => {\n+            Diagnostic::spanned(resource_span, Level::Error, \"could not parse Fluent resource\")\n+                .help(\"see additional errors emitted\")\n+                .emit();\n+            for ParserError { pos, slice: _, kind } in errs {\n+                let mut err = kind.to_string();\n+                // Entirely unnecessary string modification so that the error message starts\n+                // with a lowercase as rustc errors do.\n+                err.replace_range(0..1, &err.chars().next().unwrap().to_lowercase().to_string());\n \n-                    let line_starts: Vec<usize> = std::iter::once(0)\n-                        .chain(\n-                            this.source()\n-                                .char_indices()\n-                                .filter_map(|(i, c)| Some(i + 1).filter(|_| c == '\\n')),\n-                        )\n-                        .collect();\n-                    let line_start = line_starts\n-                        .iter()\n-                        .enumerate()\n-                        .map(|(line, idx)| (line + 1, idx))\n-                        .filter(|(_, idx)| **idx <= pos.start)\n-                        .last()\n-                        .unwrap()\n-                        .0;\n+                let line_starts: Vec<usize> = std::iter::once(0)\n+                    .chain(\n+                        this.source()\n+                            .char_indices()\n+                            .filter_map(|(i, c)| Some(i + 1).filter(|_| c == '\\n')),\n+                    )\n+                    .collect();\n+                let line_start = line_starts\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(line, idx)| (line + 1, idx))\n+                    .filter(|(_, idx)| **idx <= pos.start)\n+                    .last()\n+                    .unwrap()\n+                    .0;\n \n-                    let snippet = Snippet {\n-                        title: Some(Annotation {\n-                            label: Some(&err),\n-                            id: None,\n+                let snippet = Snippet {\n+                    title: Some(Annotation {\n+                        label: Some(&err),\n+                        id: None,\n+                        annotation_type: AnnotationType::Error,\n+                    }),\n+                    footer: vec![],\n+                    slices: vec![Slice {\n+                        source: this.source(),\n+                        line_start,\n+                        origin: Some(&relative_ftl_path),\n+                        fold: true,\n+                        annotations: vec![SourceAnnotation {\n+                            label: \"\",\n                             annotation_type: AnnotationType::Error,\n-                        }),\n-                        footer: vec![],\n-                        slices: vec![Slice {\n-                            source: this.source(),\n-                            line_start,\n-                            origin: Some(&relative_ftl_path),\n-                            fold: true,\n-                            annotations: vec![SourceAnnotation {\n-                                label: \"\",\n-                                annotation_type: AnnotationType::Error,\n-                                range: (pos.start, pos.end - 1),\n-                            }],\n+                            range: (pos.start, pos.end - 1),\n                         }],\n-                        opt: Default::default(),\n-                    };\n-                    let dl = DisplayList::from(snippet);\n-                    eprintln!(\"{dl}\\n\");\n-                }\n-                continue;\n+                    }],\n+                    opt: Default::default(),\n+                };\n+                let dl = DisplayList::from(snippet);\n+                eprintln!(\"{dl}\\n\");\n             }\n-        };\n \n-        let mut constants = TokenStream::new();\n-        let mut messagerefs = Vec::new();\n-        for entry in resource.entries() {\n-            let span = res.krate.span();\n-            if let Entry::Message(Message { id: Identifier { name }, attributes, value, .. }) =\n-                entry\n-            {\n-                let _ = previous_defns.entry(name.to_string()).or_insert(path_span);\n+            return failed(&crate_name);\n+        }\n+    };\n \n-                if name.contains('-') {\n-                    Diagnostic::spanned(\n-                        path_span,\n-                        Level::Error,\n-                        format!(\"name `{name}` contains a '-' character\"),\n-                    )\n-                    .help(\"replace any '-'s with '_'s\")\n-                    .emit();\n-                }\n+    let mut constants = TokenStream::new();\n+    let mut previous_defns = HashMap::new();\n+    let mut message_refs = Vec::new();\n+    for entry in resource.entries() {\n+        if let Entry::Message(Message { id: Identifier { name }, attributes, value, .. }) = entry {\n+            let _ = previous_defns.entry(name.to_string()).or_insert(resource_span);\n+            if name.contains('-') {\n+                Diagnostic::spanned(\n+                    resource_span,\n+                    Level::Error,\n+                    format!(\"name `{name}` contains a '-' character\"),\n+                )\n+                .help(\"replace any '-'s with '_'s\")\n+                .emit();\n+            }\n \n-                if let Some(Pattern { elements }) = value {\n-                    for elt in elements {\n-                        if let PatternElement::Placeable {\n-                            expression:\n-                                Expression::Inline(InlineExpression::MessageReference { id, .. }),\n-                        } = elt\n-                        {\n-                            messagerefs.push((id.name, *name));\n-                        }\n+            if let Some(Pattern { elements }) = value {\n+                for elt in elements {\n+                    if let PatternElement::Placeable {\n+                        expression:\n+                            Expression::Inline(InlineExpression::MessageReference { id, .. }),\n+                    } = elt\n+                    {\n+                        message_refs.push((id.name, *name));\n                     }\n                 }\n+            }\n \n-                // Require that the message name starts with the crate name\n-                // `hir_typeck_foo_bar` (in `hir_typeck.ftl`)\n-                // `const_eval_baz` (in `const_eval.ftl`)\n-                // `const-eval-hyphen-having` => `hyphen_having` (in `const_eval.ftl`)\n-                // The last case we error about above, but we want to fall back gracefully\n-                // so that only the error is being emitted and not also one about the macro\n-                // failing.\n-                let crate_prefix = format!(\"{}_\", res.krate);\n+            // `typeck_foo_bar` => `foo_bar` (in `typeck.ftl`)\n+            // `const_eval_baz` => `baz` (in `const_eval.ftl`)\n+            // `const-eval-hyphen-having` => `hyphen_having` (in `const_eval.ftl`)\n+            // The last case we error about above, but we want to fall back gracefully\n+            // so that only the error is being emitted and not also one about the macro\n+            // failing.\n+            let crate_prefix = format!(\"{crate_name}_\");\n \n-                let snake_name = name.replace('-', \"_\");\n-                if !snake_name.starts_with(&crate_prefix) {\n+            let snake_name = name.replace('-', \"_\");\n+            if !snake_name.starts_with(&crate_prefix) {\n+                Diagnostic::spanned(\n+                    resource_span,\n+                    Level::Error,\n+                    format!(\"name `{name}` does not start with the crate name\"),\n+                )\n+                .help(format!(\n+                    \"prepend `{crate_prefix}` to the slug name: `{crate_prefix}{snake_name}`\"\n+                ))\n+                .emit();\n+            };\n+            let snake_name = Ident::new(&snake_name, resource_str.span());\n+\n+            if !previous_attrs.insert(snake_name.clone()) {\n+                continue;\n+            }\n+\n+            let msg = format!(\"Constant referring to Fluent message `{name}` from `{crate_name}`\");\n+            constants.extend(quote! {\n+                #[doc = #msg]\n+                pub const #snake_name: crate::DiagnosticMessage =\n+                    crate::DiagnosticMessage::FluentIdentifier(\n+                        std::borrow::Cow::Borrowed(#name),\n+                        None\n+                    );\n+            });\n+\n+            for Attribute { id: Identifier { name: attr_name }, .. } in attributes {\n+                let snake_name = Ident::new(\n+                    &format!(\"{}{}\", &crate_prefix, &attr_name.replace('-', \"_\")),\n+                    resource_str.span(),\n+                );\n+                if !previous_attrs.insert(snake_name.clone()) {\n+                    continue;\n+                }\n+\n+                if attr_name.contains('-') {\n                     Diagnostic::spanned(\n-                        path_span,\n+                        resource_span,\n                         Level::Error,\n-                        format!(\"name `{name}` does not start with the crate name\"),\n+                        format!(\"attribute `{attr_name}` contains a '-' character\"),\n                     )\n-                    .help(format!(\n-                        \"prepend `{crate_prefix}` to the slug name: `{crate_prefix}{snake_name}`\"\n-                    ))\n+                    .help(\"replace any '-'s with '_'s\")\n                     .emit();\n-                };\n-\n-                let snake_name = Ident::new(&snake_name, span);\n+                }\n \n+                let msg = format!(\n+                    \"Constant referring to Fluent message `{name}.{attr_name}` from `{crate_name}`\"\n+                );\n                 constants.extend(quote! {\n-                    pub const #snake_name: crate::DiagnosticMessage =\n-                        crate::DiagnosticMessage::FluentIdentifier(\n-                            std::borrow::Cow::Borrowed(#name),\n-                            None\n+                    #[doc = #msg]\n+                    pub const #snake_name: crate::SubdiagnosticMessage =\n+                        crate::SubdiagnosticMessage::FluentAttr(\n+                            std::borrow::Cow::Borrowed(#attr_name)\n                         );\n                 });\n-\n-                for Attribute { id: Identifier { name: attr_name }, .. } in attributes {\n-                    let snake_name = Ident::new(&attr_name.replace('-', \"_\"), span);\n-                    if !previous_attrs.insert(snake_name.clone()) {\n-                        continue;\n-                    }\n-\n-                    if attr_name.contains('-') {\n-                        Diagnostic::spanned(\n-                            path_span,\n-                            Level::Error,\n-                            format!(\"attribute `{attr_name}` contains a '-' character\"),\n-                        )\n-                        .help(\"replace any '-'s with '_'s\")\n-                        .emit();\n-                    }\n-\n-                    constants.extend(quote! {\n-                        pub const #snake_name: crate::SubdiagnosticMessage =\n-                            crate::SubdiagnosticMessage::FluentAttr(\n-                                std::borrow::Cow::Borrowed(#attr_name)\n-                            );\n-                    });\n-                }\n             }\n         }\n+    }\n \n-        for (mref, name) in messagerefs.into_iter() {\n-            if !previous_defns.contains_key(mref) {\n-                Diagnostic::spanned(\n-                    path_span,\n-                    Level::Error,\n-                    format!(\"referenced message `{mref}` does not exist (in message `{name}`)\"),\n-                )\n-                .help(&format!(\"you may have meant to use a variable reference (`{{${mref}}}`)\"))\n-                .emit();\n-            }\n+    for (mref, name) in message_refs.into_iter() {\n+        if !previous_defns.contains_key(mref) {\n+            Diagnostic::spanned(\n+                resource_span,\n+                Level::Error,\n+                format!(\"referenced message `{mref}` does not exist (in message `{name}`)\"),\n+            )\n+            .help(&format!(\"you may have meant to use a variable reference (`{{${mref}}}`)\"))\n+            .emit();\n         }\n+    }\n \n-        if let Err(errs) = bundle.add_resource(resource) {\n-            for e in errs {\n-                match e {\n-                    FluentError::Overriding { kind, id } => {\n-                        Diagnostic::spanned(\n-                            path_span,\n-                            Level::Error,\n-                            format!(\"overrides existing {kind}: `{id}`\"),\n-                        )\n-                        .span_help(previous_defns[&id], \"previously defined in this resource\")\n-                        .emit();\n-                    }\n-                    FluentError::ResolverError(_) | FluentError::ParserError(_) => unreachable!(),\n+    if let Err(errs) = bundle.add_resource(resource) {\n+        for e in errs {\n+            match e {\n+                FluentError::Overriding { kind, id } => {\n+                    Diagnostic::spanned(\n+                        resource_span,\n+                        Level::Error,\n+                        format!(\"overrides existing {kind}: `{id}`\"),\n+                    )\n+                    .emit();\n                 }\n+                FluentError::ResolverError(_) | FluentError::ParserError(_) => unreachable!(),\n             }\n         }\n-\n-        includes.extend(quote! { include_str!(#relative_ftl_path), });\n-\n-        generated.extend(constants);\n     }\n \n     quote! {\n+        /// Raw content of Fluent resource for this crate, generated by `fluent_messages` macro,\n+        /// imported by `rustc_driver` to include all crates' resources in one bundle.\n+        pub static DEFAULT_LOCALE_RESOURCE: &'static str = include_str!(#relative_ftl_path);\n+\n         #[allow(non_upper_case_globals)]\n         #[doc(hidden)]\n-        pub mod fluent_generated {\n-            pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] = &[\n-                #includes\n-            ];\n-\n-            #generated\n+        /// Auto-generated constants for type-checked references to Fluent messages.\n+        pub(crate) mod fluent_generated {\n+            #constants\n \n+            /// Constants expected to exist by the diagnostic derive macros to use as default Fluent\n+            /// identifiers for different subdiagnostic kinds.\n             pub mod _subdiag {\n+                /// Default for `#[help]`\n                 pub const help: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"help\"));\n+                /// Default for `#[note]`\n                 pub const note: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"note\"));\n+                /// Default for `#[warn]`\n                 pub const warn: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"warn\"));\n+                /// Default for `#[label]`\n                 pub const label: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"label\"));\n+                /// Default for `#[suggestion]`\n                 pub const suggestion: crate::SubdiagnosticMessage =\n                     crate::SubdiagnosticMessage::FluentAttr(std::borrow::Cow::Borrowed(\"suggestion\"));\n             }"}, {"sha": "90660fc1f93db8e137789eacbd7faeb0b1334533", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -512,7 +512,9 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         let mut calls = TokenStream::new();\n         for (kind, slug) in kind_slugs {\n             let message = format_ident!(\"__message\");\n-            calls.extend(quote! { let #message = #f(#diag, rustc_errors::fluent::#slug.into()); });\n+            calls.extend(\n+                quote! { let #message = #f(#diag, crate::fluent_generated::#slug.into()); },\n+            );\n \n             let name = format_ident!(\"{}{}\", if span_field.is_some() { \"span_\" } else { \"\" }, kind);\n             let call = match kind {"}, {"sha": "737500cc257eb05e72021b6bd317a271dc1c1727", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -61,9 +61,7 @@ pub fn newtype_index(input: TokenStream) -> TokenStream {\n /// For example, given the following invocation of the macro..\n ///\n /// ```ignore (rust)\n-/// fluent_messages! {\n-///     typeck => \"./typeck.ftl\",\n-/// }\n+/// fluent_messages! { \"./typeck.ftl\" }\n /// ```\n /// ..where `typeck.ftl` has the following contents..\n ///\n@@ -77,9 +75,7 @@ pub fn newtype_index(input: TokenStream) -> TokenStream {\n /// will generate the following code:\n ///\n /// ```ignore (rust)\n-/// pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] = &[\n-///     include_str!(\"./typeck.ftl\"),\n-/// ];\n+/// pub static DEFAULT_LOCALE_RESOURCE: &'static [&'static str] = include_str!(\"./typeck.ftl\");\n ///\n /// mod fluent_generated {\n ///     mod typeck {"}, {"sha": "79b8b417257045a6b60f244acf4f4a0f7acc35d5", "filename": "compiler/rustc_metadata/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl"}, {"sha": "51b41b5f6a2148c90e3d81d1e01941ef44b9315b", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -9,6 +9,7 @@ use rustc_session::config;\n use rustc_span::{sym, Span, Symbol};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n+use crate::fluent_generated as fluent;\n use crate::locator::CrateFlavor;\n \n #[derive(Diagnostic)]\n@@ -491,7 +492,7 @@ impl IntoDiagnostic<'_> for MultipleCandidates {\n         self,\n         handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = handler.struct_err(rustc_errors::fluent::metadata_multiple_candidates);\n+        let mut diag = handler.struct_err(fluent::metadata_multiple_candidates);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"flavor\", self.flavor);\n         diag.code(error_code!(E0464));\n@@ -590,7 +591,7 @@ impl IntoDiagnostic<'_> for InvalidMetadataFiles {\n         self,\n         handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = handler.struct_err(rustc_errors::fluent::metadata_invalid_meta_files);\n+        let mut diag = handler.struct_err(fluent::metadata_invalid_meta_files);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"add_info\", self.add_info);\n         diag.code(error_code!(E0786));\n@@ -619,7 +620,7 @@ impl IntoDiagnostic<'_> for CannotFindCrate {\n         self,\n         handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = handler.struct_err(rustc_errors::fluent::metadata_cannot_find_crate);\n+        let mut diag = handler.struct_err(fluent::metadata_cannot_find_crate);\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"current_crate\", self.current_crate);\n         diag.set_arg(\"add_info\", self.add_info);\n@@ -630,32 +631,32 @@ impl IntoDiagnostic<'_> for CannotFindCrate {\n             && self.locator_triple != TargetTriple::from_triple(config::host_triple())\n         {\n             if self.missing_core {\n-                diag.note(rustc_errors::fluent::metadata_target_not_installed);\n+                diag.note(fluent::metadata_target_not_installed);\n             } else {\n-                diag.note(rustc_errors::fluent::metadata_target_no_std_support);\n+                diag.note(fluent::metadata_target_no_std_support);\n             }\n             // NOTE: this suggests using rustup, even though the user may not have it installed.\n             // That's because they could choose to install it; or this may give them a hint which\n             // target they need to install from their distro.\n             if self.missing_core {\n-                diag.help(rustc_errors::fluent::metadata_consider_downloading_target);\n+                diag.help(fluent::metadata_consider_downloading_target);\n             }\n             // Suggest using #![no_std]. #[no_core] is unstable and not really supported anyway.\n             // NOTE: this is a dummy span if `extern crate std` was injected by the compiler.\n             // If it's not a dummy, that means someone added `extern crate std` explicitly and\n             // `#![no_std]` won't help.\n             if !self.missing_core && self.span.is_dummy() {\n-                diag.note(rustc_errors::fluent::metadata_std_required);\n+                diag.note(fluent::metadata_std_required);\n             }\n             if self.is_nightly_build {\n-                diag.help(rustc_errors::fluent::metadata_consider_building_std);\n+                diag.help(fluent::metadata_consider_building_std);\n             }\n         } else if self.crate_name == self.profiler_runtime {\n-            diag.note(rustc_errors::fluent::metadata_compiler_missing_profiler);\n+            diag.note(fluent::metadata_compiler_missing_profiler);\n         } else if self.crate_name.as_str().starts_with(\"rustc_\") {\n-            diag.help(rustc_errors::fluent::metadata_install_missing_components);\n+            diag.help(fluent::metadata_install_missing_components);\n         }\n-        diag.span_label(self.span, rustc_errors::fluent::metadata_cant_find_crate);\n+        diag.span_label(self.span, fluent::metadata_cant_find_crate);\n         diag\n     }\n }"}, {"sha": "6f6d3731ceaceb0765f19cf20b93c894d30dd38a", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -30,6 +30,8 @@ extern crate rustc_data_structures;\n extern crate tracing;\n \n pub use rmeta::{provide, provide_extern};\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n \n mod dependency_format;\n mod foreign_modules;\n@@ -44,3 +46,5 @@ pub mod locator;\n pub use fs::{emit_wrapper_file, METADATA_FILENAME};\n pub use native_libs::find_native_static_library;\n pub use rmeta::{encode_metadata, EncodedMetadata, METADATA_HEADER};\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "4f4e5c6a2c9c2218bed43d2e41ec213e9b4aa2e0", "filename": "compiler/rustc_middle/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/middle.ftl"}, {"sha": "c33b9d84eb0a098deb16f04cb28bbf405c21d989", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -73,6 +73,9 @@ extern crate tracing;\n #[macro_use]\n extern crate smallvec;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -105,3 +108,5 @@ pub mod util {\n \n // Allows macros to refer to this crate as `::rustc_middle`\n extern crate self as rustc_middle;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "bdc5861109243d0835d59322e61d6cce2bd48e67", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -612,3 +612,11 @@ impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n         c.try_super_fold_with(self)\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(middle_const_not_used_in_type_alias)]\n+pub(super) struct ConstNotUsedTraitAlias {\n+    pub ct: String,\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "2d92f3770419674b25b332952e681b46fe381bc7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,3 +1,4 @@\n+use crate::fluent_generated as fluent;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::normalize_erasing_regions::NormalizationError;\n use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitable};\n@@ -182,16 +183,16 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n         match self {\n             LayoutError::Unknown(ty) => {\n                 diag.set_arg(\"ty\", ty);\n-                diag.set_primary_message(rustc_errors::fluent::middle_unknown_layout);\n+                diag.set_primary_message(fluent::middle_unknown_layout);\n             }\n             LayoutError::SizeOverflow(ty) => {\n                 diag.set_arg(\"ty\", ty);\n-                diag.set_primary_message(rustc_errors::fluent::middle_values_too_big);\n+                diag.set_primary_message(fluent::middle_values_too_big);\n             }\n             LayoutError::NormalizationFailure(ty, e) => {\n                 diag.set_arg(\"ty\", ty);\n                 diag.set_arg(\"failure_ty\", e.get_type_for_failure());\n-                diag.set_primary_message(rustc_errors::fluent::middle_cannot_be_normalized);\n+                diag.set_primary_message(fluent::middle_cannot_be_normalized);\n             }\n         }\n         diag"}, {"sha": "f9bda721df34dcb30830c092aa5dd918691c8b9b", "filename": "compiler/rustc_mir_build/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl"}, {"sha": "c1f6b8b59ce5971cd2aa81ec6a52b5fc31ff10b9", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,9 +1,10 @@\n-use crate::thir::pattern::deconstruct_pat::DeconstructedPat;\n-use crate::thir::pattern::MatchCheckCtxt;\n-use rustc_errors::Handler;\n+use crate::{\n+    fluent_generated as fluent,\n+    thir::pattern::{deconstruct_pat::DeconstructedPat, MatchCheckCtxt},\n+};\n use rustc_errors::{\n     error_code, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n-    IntoDiagnostic, MultiSpan, SubdiagnosticMessage,\n+    Handler, IntoDiagnostic, MultiSpan, SubdiagnosticMessage,\n };\n use rustc_hir::def::Res;\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n@@ -358,7 +359,7 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n-            rustc_errors::fluent::mir_build_non_exhaustive_patterns_type_not_empty,\n+            fluent::mir_build_non_exhaustive_patterns_type_not_empty,\n             error_code!(E0004),\n         );\n \n@@ -380,7 +381,7 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n             let mut span: MultiSpan = def_span.into();\n             span.push_span_label(def_span, \"\");\n \n-            diag.span_note(span, rustc_errors::fluent::def_note);\n+            diag.span_note(span, fluent::mir_build_def_note);\n         }\n \n         let is_variant_list_non_exhaustive = match self.ty.kind() {\n@@ -391,14 +392,14 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n         };\n \n         if is_variant_list_non_exhaustive {\n-            diag.note(rustc_errors::fluent::non_exhaustive_type_note);\n+            diag.note(fluent::mir_build_non_exhaustive_type_note);\n         } else {\n-            diag.note(rustc_errors::fluent::type_note);\n+            diag.note(fluent::mir_build_type_note);\n         }\n \n         if let ty::Ref(_, sub_ty, _) = self.ty.kind() {\n             if !sub_ty.is_inhabited_from(self.cx.tcx, self.cx.module, self.cx.param_env) {\n-                diag.note(rustc_errors::fluent::reference_note);\n+                diag.note(fluent::mir_build_reference_note);\n             }\n         }\n \n@@ -424,12 +425,12 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n         if let Some((span, sugg)) = suggestion {\n             diag.span_suggestion_verbose(\n                 span,\n-                rustc_errors::fluent::suggestion,\n+                fluent::mir_build_suggestion,\n                 sugg,\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n-            diag.help(rustc_errors::fluent::help);\n+            diag.help(fluent::mir_build_help);\n         }\n \n         diag\n@@ -469,7 +470,7 @@ pub struct NonConstPath {\n pub struct UnreachablePattern {\n     #[label]\n     pub span: Option<Span>,\n-    #[label(catchall_label)]\n+    #[label(mir_build_catchall_label)]\n     pub catchall: Option<Span>,\n }\n \n@@ -493,7 +494,7 @@ pub struct LowerRangeBoundMustBeLessThanOrEqualToUpper {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[note(teach_note)]\n+    #[note(mir_build_teach_note)]\n     pub teach: Option<()>,\n }\n \n@@ -585,9 +586,9 @@ pub struct BorrowOfMovedValue<'tcx> {\n     #[primary_span]\n     pub span: Span,\n     #[label]\n-    #[label(occurs_because_label)]\n+    #[label(mir_build_occurs_because_label)]\n     pub binding_span: Span,\n-    #[label(value_borrowed_label)]\n+    #[label(mir_build_value_borrowed_label)]\n     pub conflicts_ref: Vec<Span>,\n     pub name: Ident,\n     pub ty: Ty<'tcx>,\n@@ -708,7 +709,7 @@ pub struct NontrivialStructuralMatch<'tcx> {\n #[diag(mir_build_overlapping_range_endpoints)]\n #[note]\n pub struct OverlappingRangeEndpoints<'tcx> {\n-    #[label(range)]\n+    #[label(mir_build_range)]\n     pub range: Span,\n     #[subdiagnostic]\n     pub overlap: Vec<Overlap<'tcx>>,\n@@ -788,7 +789,7 @@ pub(crate) struct PatternNotCovered<'s, 'tcx> {\n     pub interpreted_as_const: Option<InterpretedAsConst>,\n     #[subdiagnostic]\n     pub adt_defined_here: Option<AdtDefinedHere<'tcx>>,\n-    #[note(pattern_ty)]\n+    #[note(mir_build_pattern_ty)]\n     pub _p: (),\n     pub pattern_ty: Ty<'tcx>,\n     #[subdiagnostic]\n@@ -823,10 +824,10 @@ impl<'tcx> AddToDiagnostic for AdtDefinedHere<'tcx> {\n         let mut spans = MultiSpan::from(self.adt_def_span);\n \n         for Variant { span } in self.variants {\n-            spans.push_span_label(span, rustc_errors::fluent::mir_build_variant_defined_here);\n+            spans.push_span_label(span, fluent::mir_build_variant_defined_here);\n         }\n \n-        diag.span_note(spans, rustc_errors::fluent::mir_build_adt_defined_here);\n+        diag.span_note(spans, fluent::mir_build_adt_defined_here);\n     }\n }\n "}, {"sha": "fbc130501f99368a4a9bab55d0e78cbcc2639846", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -25,6 +25,11 @@ pub mod thir;\n \n use rustc_middle::ty::query::Providers;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn provide(providers: &mut Providers) {\n     providers.check_match = thir::pattern::check_match;\n     providers.lit_to_const = thir::constant::lit_to_const;"}, {"sha": "988541525088367d86439fb99cbecf25753c2466", "filename": "compiler/rustc_mir_dataflow/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_dataflow%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_dataflow%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/mir_dataflow.ftl"}, {"sha": "b1e03faff052d2efc790f3778f963d5122ae4d71", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -16,7 +16,9 @@ extern crate tracing;\n extern crate rustc_middle;\n \n use rustc_ast::MetaItem;\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir::def_id::DefId;\n+use rustc_macros::fluent_messages;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -44,6 +46,8 @@ pub mod storage;\n pub mod un_derefer;\n pub mod value_analysis;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub(crate) mod indexes {\n     pub(crate) use super::move_paths::MovePathIndex;\n }"}, {"sha": "6cea6a603f336564c77b24dc8930eeaa48fc9ca7", "filename": "compiler/rustc_monomorphize/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl"}, {"sha": "495a73490a21714219301dacd64224299299c18a", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,5 +1,6 @@\n use std::path::PathBuf;\n \n+use crate::fluent_generated as fluent;\n use rustc_errors::ErrorGuaranteed;\n use rustc_errors::IntoDiagnostic;\n use rustc_macros::{Diagnostic, LintDiagnostic};\n@@ -44,7 +45,7 @@ impl IntoDiagnostic<'_> for UnusedGenericParamsHint {\n         self,\n         handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = handler.struct_err(rustc_errors::fluent::monomorphize_unused_generic_params);\n+        let mut diag = handler.struct_err(fluent::monomorphize_unused_generic_params);\n         diag.set_span(self.span);\n         for (span, name) in self.param_spans.into_iter().zip(self.param_names) {\n             // FIXME: I can figure out how to do a label with a fluent string with a fixed message,"}, {"sha": "f6b791f29c1788ab297f13087d7025391cec1a57", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -9,7 +9,9 @@ extern crate tracing;\n #[macro_use]\n extern crate rustc_middle;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir::lang_items::LangItem;\n+use rustc_macros::fluent_messages;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n use rustc_middle::ty::query::{Providers, TyCtxtAt};\n@@ -21,6 +23,8 @@ mod partitioning;\n mod polymorphize;\n mod util;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n fn custom_coerce_unsize_info<'tcx>(\n     tcx: TyCtxtAt<'tcx>,\n     source_ty: Ty<'tcx>,"}, {"sha": "a31b1f6ac1a0ac2b7c14d47738d428f9832678c4", "filename": "compiler/rustc_parse/locales/en-US.ftl", "status": "renamed", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -93,6 +93,26 @@ parse_do_catch_syntax_removed = found removed `do catch` syntax\n parse_float_literal_requires_integer_part = float literals must have an integer part\n     .suggestion = must have an integer part\n \n+parse_invalid_int_literal_width = invalid width `{$width}` for integer literal\n+    .help = valid widths are 8, 16, 32, 64 and 128\n+\n+parse_invalid_num_literal_base_prefix = invalid base prefix for number literal\n+    .note = base prefixes (`0xff`, `0b1010`, `0o755`) are lowercase\n+    .suggestion = try making the prefix lowercase\n+\n+parse_invalid_num_literal_suffix = invalid suffix `{$suffix}` for number literal\n+    .label = invalid suffix `{$suffix}`\n+    .help = the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+parse_invalid_float_literal_width = invalid width `{$width}` for float literal\n+    .help = valid widths are 32 and 64\n+\n+parse_invalid_float_literal_suffix = invalid suffix `{$suffix}` for float literal\n+    .label = invalid suffix `{$suffix}`\n+    .help = valid suffixes are `f32` and `f64`\n+\n+parse_int_literal_too_large = integer literal is too large\n+\n parse_missing_semicolon_before_array = expected `;`, found `[`\n     .suggestion = consider adding `;` here\n \n@@ -219,6 +239,14 @@ parse_struct_literal_not_allowed_here = struct literals are not allowed here\n \n parse_invalid_interpolated_expression = invalid interpolated expression\n \n+parse_hexadecimal_float_literal_not_supported = hexadecimal float literal is not supported\n+parse_octal_float_literal_not_supported = octal float literal is not supported\n+parse_binary_float_literal_not_supported = binary float literal is not supported\n+parse_not_supported = not supported\n+\n+parse_invalid_literal_suffix = suffixes on {$kind} literals are invalid\n+    .label = invalid suffix `{$suffix}`\n+\n parse_invalid_literal_suffix_on_tuple_index = suffixes on a tuple index are invalid\n     .label = invalid suffix `{$suffix}`\n     .tuple_exception_line_1 = `{$suffix}` is *temporarily* accepted on tuple index fields as it was incorrectly accepted on stable for a few releases", "previous_filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl"}, {"sha": "c746a870964763144e8bdcf09b508d78f1edabb3", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 104, "deletions": 84, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -2,13 +2,14 @@ use std::borrow::Cow;\n \n use rustc_ast::token::Token;\n use rustc_ast::{Path, Visibility};\n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n+use rustc_errors::{AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, Symbol};\n \n+use crate::fluent_generated as fluent;\n use crate::parser::TokenDescription;\n \n #[derive(Diagnostic)]\n@@ -78,7 +79,7 @@ pub(crate) struct IncorrectSemicolon<'a> {\n #[diag(parse_incorrect_use_of_await)]\n pub(crate) struct IncorrectUseOfAwait {\n     #[primary_span]\n-    #[suggestion(parentheses_suggestion, code = \"\", applicability = \"machine-applicable\")]\n+    #[suggestion(parse_parentheses_suggestion, code = \"\", applicability = \"machine-applicable\")]\n     pub span: Span,\n }\n \n@@ -87,7 +88,7 @@ pub(crate) struct IncorrectUseOfAwait {\n pub(crate) struct IncorrectAwait {\n     #[primary_span]\n     pub span: Span,\n-    #[suggestion(postfix_suggestion, code = \"{expr}.await{question_mark}\")]\n+    #[suggestion(parse_postfix_suggestion, code = \"{expr}.await{question_mark}\")]\n     pub sugg_span: (Span, Applicability),\n     pub expr: String,\n     pub question_mark: &'static str,\n@@ -140,7 +141,7 @@ pub(crate) struct InvalidComparisonOperator {\n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidComparisonOperatorSub {\n     #[suggestion(\n-        use_instead,\n+        parse_use_instead,\n         style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"{correct}\"\n@@ -151,7 +152,7 @@ pub(crate) enum InvalidComparisonOperatorSub {\n         invalid: String,\n         correct: String,\n     },\n-    #[label(spaceship_operator_invalid)]\n+    #[label(parse_spaceship_operator_invalid)]\n     Spaceship(#[primary_span] Span),\n }\n \n@@ -169,14 +170,14 @@ pub(crate) struct InvalidLogicalOperator {\n #[derive(Subdiagnostic)]\n pub(crate) enum InvalidLogicalOperatorSub {\n     #[suggestion(\n-        use_amp_amp_for_conjunction,\n+        parse_use_amp_amp_for_conjunction,\n         style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"&&\"\n     )]\n     Conjunction(#[primary_span] Span),\n     #[suggestion(\n-        use_pipe_pipe_for_disjunction,\n+        parse_use_pipe_pipe_for_disjunction,\n         style = \"short\",\n         applicability = \"machine-applicable\",\n         code = \"||\"\n@@ -262,14 +263,14 @@ pub(crate) struct UnexpectedTokenAfterLabel {\n     #[primary_span]\n     #[label(parse_unexpected_token_after_label)]\n     pub span: Span,\n-    #[suggestion(suggestion_remove_label, style = \"verbose\", code = \"\")]\n+    #[suggestion(parse_suggestion_remove_label, style = \"verbose\", code = \"\")]\n     pub remove_label: Option<Span>,\n     #[subdiagnostic]\n     pub enclose_in_block: Option<UnexpectedTokenAfterLabelSugg>,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion_enclose_in_block, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion_enclose_in_block, applicability = \"machine-applicable\")]\n pub(crate) struct UnexpectedTokenAfterLabelSugg {\n     #[suggestion_part(code = \"{{ \")]\n     pub left: Span,\n@@ -347,9 +348,9 @@ pub(crate) struct IfExpressionMissingThenBlock {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum IfExpressionMissingThenBlockSub {\n-    #[help(condition_possibly_unfinished)]\n+    #[help(parse_condition_possibly_unfinished)]\n     UnfinishedCondition(#[primary_span] Span),\n-    #[help(add_then_block)]\n+    #[help(parse_add_then_block)]\n     AddThenBlock(#[primary_span] Span),\n }\n \n@@ -364,9 +365,9 @@ pub(crate) struct IfExpressionLetSomeSub {\n #[diag(parse_if_expression_missing_condition)]\n pub(crate) struct IfExpressionMissingCondition {\n     #[primary_span]\n-    #[label(condition_label)]\n+    #[label(parse_condition_label)]\n     pub if_span: Span,\n-    #[label(block_label)]\n+    #[label(parse_block_label)]\n     pub block_span: Span,\n }\n \n@@ -404,10 +405,10 @@ pub(crate) struct OuterAttributeNotAllowedOnIfElse {\n     #[primary_span]\n     pub last: Span,\n \n-    #[label(branch_label)]\n+    #[label(parse_branch_label)]\n     pub branch_span: Span,\n \n-    #[label(ctx_label)]\n+    #[label(parse_ctx_label)]\n     pub ctx_span: Span,\n     pub ctx: String,\n \n@@ -427,9 +428,14 @@ pub(crate) struct MissingInInForLoop {\n #[derive(Subdiagnostic)]\n pub(crate) enum MissingInInForLoopSub {\n     // Has been misleading, at least in the past (closed Issue #48492), thus maybe-incorrect\n-    #[suggestion(use_in_not_of, style = \"short\", applicability = \"maybe-incorrect\", code = \"in\")]\n+    #[suggestion(\n+        parse_use_in_not_of,\n+        style = \"short\",\n+        applicability = \"maybe-incorrect\",\n+        code = \"in\"\n+    )]\n     InNotOf(#[primary_span] Span),\n-    #[suggestion(add_in, style = \"short\", applicability = \"maybe-incorrect\", code = \" in \")]\n+    #[suggestion(parse_add_in, style = \"short\", applicability = \"maybe-incorrect\", code = \" in \")]\n     AddIn(#[primary_span] Span),\n }\n \n@@ -484,8 +490,8 @@ pub(crate) struct EqFieldInit {\n #[diag(parse_dotdotdot)]\n pub(crate) struct DotDotDot {\n     #[primary_span]\n-    #[suggestion(suggest_exclusive_range, applicability = \"maybe-incorrect\", code = \"..\")]\n-    #[suggestion(suggest_inclusive_range, applicability = \"maybe-incorrect\", code = \"..=\")]\n+    #[suggestion(parse_suggest_exclusive_range, applicability = \"maybe-incorrect\", code = \"..\")]\n+    #[suggestion(parse_suggest_inclusive_range, applicability = \"maybe-incorrect\", code = \"..=\")]\n     pub span: Span,\n }\n \n@@ -525,10 +531,10 @@ pub(crate) struct UseEmptyBlockNotSemi {\n #[diag(parse_comparison_interpreted_as_generic)]\n pub(crate) struct ComparisonInterpretedAsGeneric {\n     #[primary_span]\n-    #[label(label_comparison)]\n+    #[label(parse_label_comparison)]\n     pub comparison: Span,\n     pub r#type: Path,\n-    #[label(label_args)]\n+    #[label(parse_label_args)]\n     pub args: Span,\n     #[subdiagnostic]\n     pub suggestion: ComparisonOrShiftInterpretedAsGenericSugg,\n@@ -538,17 +544,17 @@ pub(crate) struct ComparisonInterpretedAsGeneric {\n #[diag(parse_shift_interpreted_as_generic)]\n pub(crate) struct ShiftInterpretedAsGeneric {\n     #[primary_span]\n-    #[label(label_comparison)]\n+    #[label(parse_label_comparison)]\n     pub shift: Span,\n     pub r#type: Path,\n-    #[label(label_args)]\n+    #[label(parse_label_args)]\n     pub args: Span,\n     #[subdiagnostic]\n     pub suggestion: ComparisonOrShiftInterpretedAsGenericSugg,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct ComparisonOrShiftInterpretedAsGenericSugg {\n     #[suggestion_part(code = \"(\")]\n     pub left: Span,\n@@ -574,7 +580,7 @@ pub(crate) struct LeadingPlusNotSupported {\n     #[label]\n     pub span: Span,\n     #[suggestion(\n-        suggestion_remove_plus,\n+        parse_suggestion_remove_plus,\n         style = \"verbose\",\n         code = \"\",\n         applicability = \"machine-applicable\"\n@@ -597,7 +603,7 @@ pub(crate) struct ParenthesesWithStructFields {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion_braces_for_struct, applicability = \"maybe-incorrect\")]\n+#[multipart_suggestion(parse_suggestion_braces_for_struct, applicability = \"maybe-incorrect\")]\n pub(crate) struct BracesForStructLiteral {\n     #[suggestion_part(code = \" {{ \")]\n     pub first: Span,\n@@ -606,7 +612,7 @@ pub(crate) struct BracesForStructLiteral {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion_no_fields_for_fn, applicability = \"maybe-incorrect\")]\n+#[multipart_suggestion(parse_suggestion_no_fields_for_fn, applicability = \"maybe-incorrect\")]\n pub(crate) struct NoFieldsForFnCall {\n     #[suggestion_part(code = \"\")]\n     pub fields: Vec<Span>,\n@@ -643,7 +649,7 @@ pub(crate) struct ArrayBracketsInsteadOfSpaces {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"maybe-incorrect\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"maybe-incorrect\")]\n pub(crate) struct ArrayBracketsInsteadOfSpacesSugg {\n     #[suggestion_part(code = \"[\")]\n     pub left: Span,\n@@ -655,9 +661,9 @@ pub(crate) struct ArrayBracketsInsteadOfSpacesSugg {\n #[diag(parse_match_arm_body_without_braces)]\n pub(crate) struct MatchArmBodyWithoutBraces {\n     #[primary_span]\n-    #[label(label_statements)]\n+    #[label(parse_label_statements)]\n     pub statements: Span,\n-    #[label(label_arrow)]\n+    #[label(parse_label_arrow)]\n     pub arrow: Span,\n     pub num_statements: usize,\n     #[subdiagnostic]\n@@ -670,7 +676,7 @@ pub(crate) struct MatchArmBodyWithoutBraces {\n pub(crate) struct InclusiveRangeExtraEquals {\n     #[primary_span]\n     #[suggestion(\n-        suggestion_remove_eq,\n+        parse_suggestion_remove_eq,\n         style = \"short\",\n         code = \"..=\",\n         applicability = \"maybe-incorrect\"\n@@ -695,7 +701,7 @@ pub(crate) struct InclusiveRangeMatchArrow {\n pub(crate) struct InclusiveRangeNoEnd {\n     #[primary_span]\n     #[suggestion(\n-        suggestion_open_range,\n+        parse_suggestion_open_range,\n         code = \"..\",\n         applicability = \"machine-applicable\",\n         style = \"short\"\n@@ -705,15 +711,15 @@ pub(crate) struct InclusiveRangeNoEnd {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum MatchArmBodyWithoutBracesSugg {\n-    #[multipart_suggestion(suggestion_add_braces, applicability = \"machine-applicable\")]\n+    #[multipart_suggestion(parse_suggestion_add_braces, applicability = \"machine-applicable\")]\n     AddBraces {\n         #[suggestion_part(code = \"{{ \")]\n         left: Span,\n         #[suggestion_part(code = \" }}\")]\n         right: Span,\n     },\n     #[suggestion(\n-        suggestion_use_comma_not_semicolon,\n+        parse_suggestion_use_comma_not_semicolon,\n         code = \",\",\n         applicability = \"machine-applicable\"\n     )]\n@@ -733,7 +739,7 @@ pub(crate) struct StructLiteralNotAllowedHere {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct StructLiteralNotAllowedHereSugg {\n     #[suggestion_part(code = \"(\")]\n     pub left: Span,\n@@ -755,9 +761,9 @@ pub(crate) struct InvalidLiteralSuffixOnTupleIndex {\n     #[label]\n     pub span: Span,\n     pub suffix: Symbol,\n-    #[help(tuple_exception_line_1)]\n-    #[help(tuple_exception_line_2)]\n-    #[help(tuple_exception_line_3)]\n+    #[help(parse_tuple_exception_line_1)]\n+    #[help(parse_tuple_exception_line_2)]\n+    #[help(parse_tuple_exception_line_3)]\n     pub exception: Option<()>,\n }\n \n@@ -775,11 +781,11 @@ pub(crate) struct MismatchedClosingDelimiter {\n     #[primary_span]\n     pub spans: Vec<Span>,\n     pub delimiter: String,\n-    #[label(label_unmatched)]\n+    #[label(parse_label_unmatched)]\n     pub unmatched: Span,\n-    #[label(label_opening_candidate)]\n+    #[label(parse_label_opening_candidate)]\n     pub opening_candidate: Option<Span>,\n-    #[label(label_unclosed)]\n+    #[label(parse_label_unclosed)]\n     pub unclosed: Option<Span>,\n }\n \n@@ -930,7 +936,7 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedIdentifier {\n         self,\n         handler: &'a rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n-        let token_descr = super::parser::TokenDescription::from_token(&self.token);\n+        let token_descr = TokenDescription::from_token(&self.token);\n \n         let mut diag = handler.struct_diagnostic(match token_descr {\n             Some(TokenDescription::ReservedIdentifier) => {\n@@ -976,7 +982,7 @@ impl<'a, G: EmissionGuarantee> IntoDiagnostic<'a, G> for ExpectedSemi {\n         self,\n         handler: &'a rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'a, G> {\n-        let token_descr = super::parser::TokenDescription::from_token(&self.token);\n+        let token_descr = TokenDescription::from_token(&self.token);\n \n         let mut diag = handler.struct_diagnostic(match token_descr {\n             Some(TokenDescription::ReservedIdentifier) => {\n@@ -1025,7 +1031,7 @@ pub(crate) struct StructLiteralBodyWithoutPath {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"has-placeholders\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"has-placeholders\")]\n pub(crate) struct StructLiteralBodyWithoutPathSugg {\n     #[suggestion_part(code = \"{{ SomeStruct \")]\n     pub before: Span,\n@@ -1043,7 +1049,7 @@ pub(crate) struct StructLiteralNeedingParens {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct StructLiteralNeedingParensSugg {\n     #[suggestion_part(code = \"(\")]\n     pub before: Span,\n@@ -1070,7 +1076,7 @@ pub(crate) struct GenericParamsWithoutAngleBrackets {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct GenericParamsWithoutAngleBracketsSugg {\n     #[suggestion_part(code = \"<\")]\n     pub left: Span,\n@@ -1091,7 +1097,7 @@ pub(crate) struct ComparisonOperatorsCannotBeChained {\n     )]\n     pub suggest_turbofish: Option<Span>,\n     #[help(parse_sugg_turbofish_syntax)]\n-    #[help(sugg_parentheses_for_function_args)]\n+    #[help(parse_sugg_parentheses_for_function_args)]\n     pub help_turbofish: Option<()>,\n     #[subdiagnostic]\n     pub chaining_sugg: Option<ComparisonOperatorsCannotBeChainedSugg>,\n@@ -1100,7 +1106,7 @@ pub(crate) struct ComparisonOperatorsCannotBeChained {\n #[derive(Subdiagnostic)]\n pub(crate) enum ComparisonOperatorsCannotBeChainedSugg {\n     #[suggestion(\n-        sugg_split_comparison,\n+        parse_sugg_split_comparison,\n         style = \"verbose\",\n         code = \" && {middle_term}\",\n         applicability = \"maybe-incorrect\"\n@@ -1110,7 +1116,7 @@ pub(crate) enum ComparisonOperatorsCannotBeChainedSugg {\n         span: Span,\n         middle_term: String,\n     },\n-    #[multipart_suggestion(sugg_parenthesize, applicability = \"maybe-incorrect\")]\n+    #[multipart_suggestion(parse_sugg_parenthesize, applicability = \"maybe-incorrect\")]\n     Parenthesize {\n         #[suggestion_part(code = \"(\")]\n         left: Span,\n@@ -1130,7 +1136,7 @@ pub(crate) struct QuestionMarkInType {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct QuestionMarkInTypeSugg {\n     #[suggestion_part(code = \"Option<\")]\n     pub left: Span,\n@@ -1148,7 +1154,7 @@ pub(crate) struct ParenthesesInForHead {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct ParenthesesInForHeadSugg {\n     #[suggestion_part(code = \"{left_snippet}\")]\n     pub left: Span,\n@@ -1208,7 +1214,7 @@ pub(crate) struct ConstGenericWithoutBraces {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct ConstGenericWithoutBracesSugg {\n     #[suggestion_part(code = \"{{ \")]\n     pub left: Span,\n@@ -1228,7 +1234,7 @@ pub(crate) struct UnexpectedConstParamDeclaration {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum UnexpectedConstParamDeclarationSugg {\n-    #[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+    #[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n     AddParam {\n         #[suggestion_part(code = \"<{snippet}>\")]\n         impl_generics: Span,\n@@ -1237,7 +1243,7 @@ pub(crate) enum UnexpectedConstParamDeclarationSugg {\n         snippet: String,\n         ident: String,\n     },\n-    #[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+    #[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n     AppendParam {\n         #[suggestion_part(code = \", {snippet}\")]\n         impl_generics_end: Span,\n@@ -1284,7 +1290,7 @@ pub(crate) struct FnPtrWithGenerics {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"maybe-incorrect\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"maybe-incorrect\")]\n pub(crate) struct FnPtrWithGenericsSugg {\n     #[suggestion_part(code = \"{snippet}\")]\n     pub left: Span,\n@@ -1325,16 +1331,16 @@ pub(crate) struct WhereClauseBeforeTupleStructBody {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(name_label)]\n+    #[label(parse_name_label)]\n     pub name: Span,\n-    #[label(body_label)]\n+    #[label(parse_body_label)]\n     pub body: Span,\n     #[subdiagnostic]\n     pub sugg: Option<WhereClauseBeforeTupleStructBodySugg>,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct WhereClauseBeforeTupleStructBodySugg {\n     #[suggestion_part(code = \"{snippet}\")]\n     pub left: Span,\n@@ -1429,23 +1435,23 @@ pub(crate) enum MissingKeywordForItemDefinition {\n \n #[derive(Subdiagnostic)]\n pub(crate) enum AmbiguousMissingKwForItemSub {\n-    #[suggestion(suggestion, applicability = \"maybe-incorrect\", code = \"{snippet}!\")]\n+    #[suggestion(parse_suggestion, applicability = \"maybe-incorrect\", code = \"{snippet}!\")]\n     SuggestMacro {\n         #[primary_span]\n         span: Span,\n         snippet: String,\n     },\n-    #[help(help)]\n+    #[help(parse_help)]\n     HelpMacro,\n }\n \n #[derive(Diagnostic)]\n #[diag(parse_missing_trait_in_trait_impl)]\n pub(crate) struct MissingTraitInTraitImpl {\n     #[primary_span]\n-    #[suggestion(suggestion_add_trait, code = \" Trait \", applicability = \"has-placeholders\")]\n+    #[suggestion(parse_suggestion_add_trait, code = \" Trait \", applicability = \"has-placeholders\")]\n     pub span: Span,\n-    #[suggestion(suggestion_remove_for, code = \"\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(parse_suggestion_remove_for, code = \"\", applicability = \"maybe-incorrect\")]\n     pub for_span: Span,\n }\n \n@@ -1505,7 +1511,7 @@ pub(crate) struct ExternCrateNameWithDashes {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(parse_suggestion, applicability = \"machine-applicable\")]\n pub(crate) struct ExternCrateNameWithDashesSugg {\n     #[suggestion_part(code = \"_\")]\n     pub dashes: Vec<Span>,\n@@ -1726,10 +1732,15 @@ pub struct UnknownPrefix<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum UnknownPrefixSugg {\n-    #[suggestion(suggestion_br, code = \"br\", applicability = \"maybe-incorrect\", style = \"verbose\")]\n+    #[suggestion(\n+        parse_suggestion_br,\n+        code = \"br\",\n+        applicability = \"maybe-incorrect\",\n+        style = \"verbose\"\n+    )]\n     UseBr(#[primary_span] Span),\n     #[suggestion(\n-        suggestion_whitespace,\n+        parse_suggestion_whitespace,\n         code = \" \",\n         applicability = \"maybe-incorrect\",\n         style = \"verbose\"\n@@ -1761,15 +1772,15 @@ pub struct UnknownTokenStart {\n \n #[derive(Subdiagnostic)]\n pub enum TokenSubstitution {\n-    #[suggestion(sugg_quotes, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(parse_sugg_quotes, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n     DirectedQuotes {\n         #[primary_span]\n         span: Span,\n         suggestion: String,\n         ascii_str: &'static str,\n         ascii_name: &'static str,\n     },\n-    #[suggestion(sugg_other, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(parse_sugg_other, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n     Other {\n         #[primary_span]\n         span: Span,\n@@ -1782,13 +1793,13 @@ pub enum TokenSubstitution {\n }\n \n #[derive(Subdiagnostic)]\n-#[note(note_repeats)]\n+#[note(parse_note_repeats)]\n pub struct UnknownTokenRepeat {\n     pub repeats: usize,\n }\n \n #[derive(Subdiagnostic)]\n-#[help(help_null)]\n+#[help(parse_help_null)]\n pub struct UnknownTokenNull;\n \n #[derive(Diagnostic)]\n@@ -1805,7 +1816,7 @@ pub enum UnescapeError {\n     EscapeOnlyChar {\n         #[primary_span]\n         span: Span,\n-        #[suggestion(escape, applicability = \"machine-applicable\", code = \"{escaped_sugg}\")]\n+        #[suggestion(parse_escape, applicability = \"machine-applicable\", code = \"{escaped_sugg}\")]\n         char_span: Span,\n         escaped_sugg: String,\n         escaped_msg: String,\n@@ -1814,7 +1825,7 @@ pub enum UnescapeError {\n     #[diag(parse_bare_cr)]\n     BareCr {\n         #[primary_span]\n-        #[suggestion(escape, applicability = \"machine-applicable\", code = \"\\\\r\")]\n+        #[suggestion(parse_escape, applicability = \"machine-applicable\", code = \"\\\\r\")]\n         span: Span,\n         double_quotes: bool,\n     },\n@@ -1854,7 +1865,12 @@ pub enum UnescapeError {\n         #[primary_span]\n         #[label]\n         Span,\n-        #[suggestion(terminate, code = \"}}\", applicability = \"maybe-incorrect\", style = \"verbose\")]\n+        #[suggestion(\n+            parse_terminate,\n+            code = \"}}\",\n+            applicability = \"maybe-incorrect\",\n+            style = \"verbose\"\n+        )]\n         Span,\n     ),\n     #[diag(parse_no_brace_unicode_escape)]\n@@ -1918,20 +1934,24 @@ pub enum UnescapeError {\n \n #[derive(Subdiagnostic)]\n pub enum MoreThanOneCharSugg {\n-    #[suggestion(consider_normalized, code = \"{normalized}\", applicability = \"machine-applicable\")]\n+    #[suggestion(\n+        parse_consider_normalized,\n+        code = \"{normalized}\",\n+        applicability = \"machine-applicable\"\n+    )]\n     NormalizedForm {\n         #[primary_span]\n         span: Span,\n         ch: String,\n         normalized: String,\n     },\n-    #[suggestion(remove_non, code = \"{ch}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(parse_remove_non, code = \"{ch}\", applicability = \"maybe-incorrect\")]\n     RemoveNonPrinting {\n         #[primary_span]\n         span: Span,\n         ch: String,\n     },\n-    #[suggestion(use_double_quotes, code = \"{sugg}\", applicability = \"machine-applicable\")]\n+    #[suggestion(parse_use_double_quotes, code = \"{sugg}\", applicability = \"machine-applicable\")]\n     Quotes {\n         #[primary_span]\n         span: Span,\n@@ -1942,15 +1962,15 @@ pub enum MoreThanOneCharSugg {\n \n #[derive(Subdiagnostic)]\n pub enum MoreThanOneCharNote {\n-    #[note(followed_by)]\n+    #[note(parse_followed_by)]\n     AllCombining {\n         #[primary_span]\n         span: Span,\n         chr: String,\n         len: usize,\n         escaped_marks: String,\n     },\n-    #[note(non_printing)]\n+    #[note(parse_non_printing)]\n     NonPrinting {\n         #[primary_span]\n         span: Span,\n@@ -1960,13 +1980,13 @@ pub enum MoreThanOneCharNote {\n \n #[derive(Subdiagnostic)]\n pub enum NoBraceUnicodeSub {\n-    #[suggestion(use_braces, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(parse_use_braces, code = \"{suggestion}\", applicability = \"maybe-incorrect\")]\n     Suggestion {\n         #[primary_span]\n         span: Span,\n         suggestion: String,\n     },\n-    #[help(format_of_unicode)]\n+    #[help(parse_format_of_unicode)]\n     Help,\n }\n \n@@ -2042,9 +2062,9 @@ pub(crate) struct PatternOnWrongSideOfAt {\n     #[suggestion(code = \"{whole_pat}\", applicability = \"machine-applicable\")]\n     pub whole_span: Span,\n     pub whole_pat: String,\n-    #[label(label_pattern)]\n+    #[label(parse_label_pattern)]\n     pub pattern: Span,\n-    #[label(label_binding)]\n+    #[label(parse_label_binding)]\n     pub binding: Span,\n }\n \n@@ -2054,9 +2074,9 @@ pub(crate) struct PatternOnWrongSideOfAt {\n pub(crate) struct ExpectedBindingLeftOfAt {\n     #[primary_span]\n     pub whole_span: Span,\n-    #[label(label_lhs)]\n+    #[label(parse_label_lhs)]\n     pub lhs: Span,\n-    #[label(label_rhs)]\n+    #[label(parse_label_rhs)]\n     pub rhs: Span,\n }\n \n@@ -2236,7 +2256,7 @@ pub(crate) struct NegativeBoundsNotSupported {\n \n #[derive(Subdiagnostic)]\n #[suggestion(\n-    suggestion,\n+    parse_suggestion,\n     style = \"tool-only\",\n     code = \"{fixed}\",\n     applicability = \"machine-applicable\""}, {"sha": "6f37e9758fcbbb05b6359288f523c55801a306e2", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -19,6 +19,8 @@ use rustc_ast::{AttrItem, Attribute, MetaItem};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, Diagnostic, FatalError, Level, PResult};\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_session::parse::ParseSess;\n use rustc_span::{FileName, SourceFile, Span};\n \n@@ -34,6 +36,8 @@ pub mod validate_attr;\n \n mod errors;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n // A bunch of utility functions of the form `parse_<thing>_from_<source>`\n // where <thing> includes crate, expr, item, stmt, tts, and one that\n // uses a HOF to parse anything, and <source> includes file and"}, {"sha": "e3e7c63e3448ca9210109b896db4840f4dd6f41c", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,10 +1,11 @@\n use crate::errors::{InvalidMetaItem, SuffixedLiteralInAttribute};\n+use crate::fluent_generated as fluent;\n \n use super::{AttrWrapper, Capturing, FnParseMode, ForceCollect, Parser, PathStyle};\n use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Delimiter, Nonterminal};\n-use rustc_errors::{error_code, fluent, Diagnostic, IntoDiagnostic, PResult};\n+use rustc_errors::{error_code, Diagnostic, IntoDiagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n use thin_vec::ThinVec;\n@@ -68,10 +69,10 @@ impl<'a> Parser<'a> {\n                             token::CommentKind::Block => OuterAttributeType::DocBlockComment,\n                         },\n                     ) {\n-                        err.note(fluent::note);\n+                        err.note(fluent::parse_note);\n                         err.span_suggestion_verbose(\n                             replacement_span,\n-                            fluent::suggestion,\n+                            fluent::parse_suggestion,\n                             \"\",\n                             rustc_errors::Applicability::MachineApplicable,\n                         );\n@@ -175,10 +176,10 @@ impl<'a> Parser<'a> {\n             Ok(Some(item)) => {\n                 // FIXME(#100717)\n                 err.set_arg(\"item\", item.kind.descr());\n-                err.span_label(item.span, fluent::label_does_not_annotate_this);\n+                err.span_label(item.span, fluent::parse_label_does_not_annotate_this);\n                 err.span_suggestion_verbose(\n                     replacement_span,\n-                    fluent::sugg_change_inner_to_outer,\n+                    fluent::parse_sugg_change_inner_to_outer,\n                     match attr_type {\n                         OuterAttributeType::Attribute => \"\",\n                         OuterAttributeType::DocBlockComment => \"*\",\n@@ -204,17 +205,17 @@ impl<'a> Parser<'a> {\n                         attr_sp,\n                         fluent::parse_inner_attr_not_permitted_after_outer_doc_comment,\n                     );\n-                    diag.span_label(attr_sp, fluent::label_attr)\n-                        .span_label(prev_doc_comment_span, fluent::label_prev_doc_comment);\n+                    diag.span_label(attr_sp, fluent::parse_label_attr)\n+                        .span_label(prev_doc_comment_span, fluent::parse_label_prev_doc_comment);\n                     diag\n                 }\n                 Some(InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp }) => {\n                     let mut diag = self.struct_span_err(\n                         attr_sp,\n                         fluent::parse_inner_attr_not_permitted_after_outer_attr,\n                     );\n-                    diag.span_label(attr_sp, fluent::label_attr)\n-                        .span_label(prev_outer_attr_sp, fluent::label_prev_attr);\n+                    diag.span_label(attr_sp, fluent::parse_label_attr)\n+                        .span_label(prev_outer_attr_sp, fluent::parse_label_prev_attr);\n                     diag\n                 }\n                 Some(InnerAttrForbiddenReason::InCodeBlock) | None => {"}, {"sha": "d235b8a8176a81e7b7744253b428e3b191da0c60", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -18,6 +18,7 @@ use crate::errors::{\n     UseEqInstead,\n };\n \n+use crate::fluent_generated as fluent;\n use crate::lexer::UnmatchedBrace;\n use crate::parser;\n use rustc_ast as ast;\n@@ -32,10 +33,9 @@ use rustc_ast::{\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{\n-    fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, FatalError, Handler, MultiSpan,\n-    PResult,\n+    pluralize, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n+    FatalError, Handler, IntoDiagnostic, MultiSpan, PResult,\n };\n-use rustc_errors::{pluralize, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};"}, {"sha": "8e920f1c421432c8fbdb533abc3efdb084fcdfc5", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -8,6 +8,7 @@ use crate::errors::{\n     TrailingVertNotAllowed, UnexpectedLifetimeInPattern, UnexpectedVertVertBeforeFunctionParam,\n     UnexpectedVertVertInPattern,\n };\n+use crate::fluent_generated as fluent;\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n@@ -17,9 +18,7 @@ use rustc_ast::{\n     PatField, PatKind, Path, QSelf, RangeEnd, RangeSyntax,\n };\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{\n-    fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult,\n-};\n+use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult};\n use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};"}, {"sha": "0c7e02912d4ef5af76dd39e631a5c3d32de306aa", "filename": "compiler/rustc_passes/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl"}, {"sha": "bb09dcbdd69802fa0fa347e7a409df44b281eb04", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -4,10 +4,10 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::errors;\n+use crate::{errors, fluent_generated as fluent};\n use rustc_ast::{ast, AttrStyle, Attribute, LitKind, MetaItemKind, MetaItemLit, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{fluent, Applicability, IntoDiagnosticArg, MultiSpan};\n+use rustc_errors::{Applicability, IntoDiagnosticArg, MultiSpan};\n use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n@@ -935,15 +935,15 @@ impl CheckAttrVisitor<'_> {\n                             src.insert(1, '!');\n                             err.span_suggestion_verbose(\n                                 attr.span,\n-                                fluent::suggestion,\n+                                fluent::passes_suggestion,\n                                 src,\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n-                            err.span_help(attr.span, fluent::help);\n+                            err.span_help(attr.span, fluent::passes_help);\n                         }\n                     }\n-                    err.note(fluent::note);\n+                    err.note(fluent::passes_note);\n                     err\n                 },\n             );"}, {"sha": "82fc3eeff94abdf669310a778dba5367e0921a68", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -3,6 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n+use crate::fluent_generated as fluent;\n use rustc_ast::Label;\n use rustc_errors::{\n     error_code, Applicability, DiagnosticSymbolList, ErrorGuaranteed, IntoDiagnostic, MultiSpan,\n@@ -261,7 +262,7 @@ pub struct DocKeywordConflict {\n pub struct DocInlineOnlyUse {\n     #[label]\n     pub attr_span: Span,\n-    #[label(not_a_use_item_label)]\n+    #[label(passes_not_a_use_item_label)]\n     pub item_span: Option<Span>,\n }\n \n@@ -300,7 +301,7 @@ pub struct DocTestUnknownAny {\n #[derive(LintDiagnostic)]\n #[diag(passes_doc_test_unknown_spotlight)]\n #[note]\n-#[note(no_op_note)]\n+#[note(passes_no_op_note)]\n pub struct DocTestUnknownSpotlight {\n     pub path: String,\n     #[suggestion(style = \"short\", applicability = \"machine-applicable\", code = \"notable_trait\")]\n@@ -573,9 +574,9 @@ pub struct DebugVisualizerPlacement {\n \n #[derive(Diagnostic)]\n #[diag(passes_debug_visualizer_invalid)]\n-#[note(note_1)]\n-#[note(note_2)]\n-#[note(note_3)]\n+#[note(passes_note_1)]\n+#[note(passes_note_2)]\n+#[note(passes_note_3)]\n pub struct DebugVisualizerInvalid {\n     #[primary_span]\n     pub span: Span,\n@@ -782,7 +783,7 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n         self,\n         handler: &'_ rustc_errors::Handler,\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = handler.struct_err(rustc_errors::fluent::passes_invalid_attr_at_crate_level);\n+        let mut diag = handler.struct_err(fluent::passes_invalid_attr_at_crate_level);\n         diag.set_span(self.span);\n         diag.set_arg(\"name\", self.name);\n         // Only emit an error with a suggestion if we can create a string out\n@@ -791,7 +792,7 @@ impl IntoDiagnostic<'_> for InvalidAttrAtCrateLevel {\n             let replacement = src.replace(\"#!\", \"#\");\n             diag.span_suggestion_verbose(\n                 self.span,\n-                rustc_errors::fluent::suggestion,\n+                fluent::passes_suggestion,\n                 replacement,\n                 rustc_errors::Applicability::MachineApplicable,\n             );\n@@ -917,17 +918,17 @@ impl<'a> IntoDiagnostic<'_> for BreakNonLoop<'a> {\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n-            rustc_errors::fluent::passes_break_non_loop,\n+            fluent::passes_break_non_loop,\n             error_code!(E0571),\n         );\n         diag.set_arg(\"kind\", self.kind);\n-        diag.span_label(self.span, rustc_errors::fluent::label);\n+        diag.span_label(self.span, fluent::passes_label);\n         if let Some(head) = self.head {\n-            diag.span_label(head, rustc_errors::fluent::label2);\n+            diag.span_label(head, fluent::passes_label2);\n         }\n         diag.span_suggestion(\n             self.span,\n-            rustc_errors::fluent::suggestion,\n+            fluent::passes_suggestion,\n             self.suggestion,\n             Applicability::MaybeIncorrect,\n         );\n@@ -945,7 +946,7 @@ impl<'a> IntoDiagnostic<'_> for BreakNonLoop<'a> {\n                 _ => {\n                     diag.span_suggestion(\n                         self.break_expr_span,\n-                        rustc_errors::fluent::break_expr_suggestion,\n+                        fluent::passes_break_expr_suggestion,\n                         label.ident,\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -962,7 +963,7 @@ pub struct ContinueLabeledBlock {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(block_label)]\n+    #[label(passes_block_label)]\n     pub block_span: Span,\n }\n \n@@ -972,7 +973,7 @@ pub struct BreakInsideClosure<'a> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(closure_label)]\n+    #[label(passes_closure_label)]\n     pub closure_span: Span,\n     pub name: &'a str,\n }\n@@ -983,7 +984,7 @@ pub struct BreakInsideAsyncBlock<'a> {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(async_block_label)]\n+    #[label(passes_async_block_label)]\n     pub closure_span: Span,\n     pub name: &'a str,\n }\n@@ -1056,14 +1057,14 @@ impl IntoDiagnostic<'_> for NakedFunctionsAsmBlock {\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n-            rustc_errors::fluent::passes_naked_functions_asm_block,\n+            fluent::passes_naked_functions_asm_block,\n             error_code!(E0787),\n         );\n         for span in self.multiple_asms.iter() {\n-            diag.span_label(*span, rustc_errors::fluent::label_multiple_asm);\n+            diag.span_label(*span, fluent::passes_label_multiple_asm);\n         }\n         for span in self.non_asms.iter() {\n-            diag.span_label(*span, rustc_errors::fluent::label_non_asm);\n+            diag.span_label(*span, fluent::passes_label_non_asm);\n         }\n         diag\n     }\n@@ -1122,9 +1123,9 @@ pub struct AttrOnlyInFunctions {\n pub struct MultipleRustcMain {\n     #[primary_span]\n     pub span: Span,\n-    #[label(first)]\n+    #[label(passes_first)]\n     pub first: Span,\n-    #[label(additional)]\n+    #[label(passes_additional)]\n     pub additional: Span,\n }\n \n@@ -1135,7 +1136,7 @@ pub struct MultipleStartFunctions {\n     pub span: Span,\n     #[label]\n     pub labeled: Span,\n-    #[label(previous)]\n+    #[label(passes_previous)]\n     pub previous: Span,\n }\n \n@@ -1180,24 +1181,24 @@ impl<'a> IntoDiagnostic<'a> for NoMainErr {\n     ) -> rustc_errors::DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             DUMMY_SP,\n-            rustc_errors::fluent::passes_no_main_function,\n+            fluent::passes_no_main_function,\n             error_code!(E0601),\n         );\n         diag.set_arg(\"crate_name\", self.crate_name);\n         diag.set_arg(\"filename\", self.filename);\n         diag.set_arg(\"has_filename\", self.has_filename);\n         let note = if !self.non_main_fns.is_empty() {\n             for &span in &self.non_main_fns {\n-                diag.span_note(span, rustc_errors::fluent::here_is_main);\n+                diag.span_note(span, fluent::passes_here_is_main);\n             }\n-            diag.note(rustc_errors::fluent::one_or_more_possible_main);\n-            diag.help(rustc_errors::fluent::consider_moving_main);\n+            diag.note(fluent::passes_one_or_more_possible_main);\n+            diag.help(fluent::passes_consider_moving_main);\n             // There were some functions named `main` though. Try to give the user a hint.\n-            rustc_errors::fluent::main_must_be_defined_at_crate\n+            fluent::passes_main_must_be_defined_at_crate\n         } else if self.has_filename {\n-            rustc_errors::fluent::consider_adding_main_to_file\n+            fluent::passes_consider_adding_main_to_file\n         } else {\n-            rustc_errors::fluent::consider_adding_main_at_crate\n+            fluent::passes_consider_adding_main_at_crate\n         };\n         if self.file_empty {\n             diag.note(note);\n@@ -1208,11 +1209,11 @@ impl<'a> IntoDiagnostic<'a> for NoMainErr {\n \n         if let Some(main_def) = self.main_def_opt && main_def.opt_fn_def_id().is_none(){\n             // There is something at `crate::main`, but it is not a function definition.\n-            diag.span_label(main_def.span, rustc_errors::fluent::non_function_main);\n+            diag.span_label(main_def.span, fluent::passes_non_function_main);\n         }\n \n         if self.add_teach_note {\n-            diag.note(rustc_errors::fluent::teach_note);\n+            diag.note(fluent::passes_teach_note);\n         }\n         diag\n     }\n@@ -1241,12 +1242,9 @@ impl IntoDiagnostic<'_> for DuplicateLangItem {\n     ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n         let mut diag = handler.struct_err_with_code(\n             match self.duplicate {\n-                Duplicate::Plain => rustc_errors::fluent::passes_duplicate_lang_item,\n-\n-                Duplicate::Crate => rustc_errors::fluent::passes_duplicate_lang_item_crate,\n-                Duplicate::CrateDepends => {\n-                    rustc_errors::fluent::passes_duplicate_lang_item_crate_depends\n-                }\n+                Duplicate::Plain => fluent::passes_duplicate_lang_item,\n+                Duplicate::Crate => fluent::passes_duplicate_lang_item_crate,\n+                Duplicate::CrateDepends => fluent::passes_duplicate_lang_item_crate_depends,\n             },\n             error_code!(E0152),\n         );\n@@ -1261,24 +1259,24 @@ impl IntoDiagnostic<'_> for DuplicateLangItem {\n             diag.set_span(span);\n         }\n         if let Some(span) = self.first_defined_span {\n-            diag.span_note(span, rustc_errors::fluent::first_defined_span);\n+            diag.span_note(span, fluent::passes_first_defined_span);\n         } else {\n             if self.orig_dependency_of.is_empty() {\n-                diag.note(rustc_errors::fluent::first_defined_crate);\n+                diag.note(fluent::passes_first_defined_crate);\n             } else {\n-                diag.note(rustc_errors::fluent::first_defined_crate_depends);\n+                diag.note(fluent::passes_first_defined_crate_depends);\n             }\n \n             if self.orig_is_local {\n-                diag.note(rustc_errors::fluent::first_definition_local);\n+                diag.note(fluent::passes_first_definition_local);\n             } else {\n-                diag.note(rustc_errors::fluent::first_definition_path);\n+                diag.note(fluent::passes_first_definition_path);\n             }\n \n             if self.is_local {\n-                diag.note(rustc_errors::fluent::second_definition_local);\n+                diag.note(fluent::passes_second_definition_local);\n             } else {\n-                diag.note(rustc_errors::fluent::second_definition_path);\n+                diag.note(fluent::passes_second_definition_path);\n             }\n         }\n         diag\n@@ -1389,7 +1387,7 @@ pub struct UselessStability {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(item)]\n+    #[label(passes_item)]\n     pub item_sp: Span,\n }\n \n@@ -1399,7 +1397,7 @@ pub struct InvalidStability {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(item)]\n+    #[label(passes_item)]\n     pub item_sp: Span,\n }\n \n@@ -1409,7 +1407,7 @@ pub struct CannotStabilizeDeprecated {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(item)]\n+    #[label(passes_item)]\n     pub item_sp: Span,\n }\n \n@@ -1419,7 +1417,7 @@ pub struct InvalidDeprecationVersion {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[label(item)]\n+    #[label(passes_item)]\n     pub item_sp: Span,\n }\n "}, {"sha": "0cb8424082c3e0e053ca21f7e0292d1984cc1386", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -18,6 +18,8 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate tracing;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_middle::ty::query::Providers;\n \n mod check_attr;\n@@ -40,6 +42,8 @@ pub mod stability;\n mod upvars;\n mod weak_lang_items;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn provide(providers: &mut Providers) {\n     check_attr::provide(providers);\n     check_const::provide(providers);"}, {"sha": "8db32a42c1deac0c1a01520c4e0cfe607c85b028", "filename": "compiler/rustc_plugin_impl/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_plugin_impl%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_plugin_impl%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/plugin_impl.ftl"}, {"sha": "3f03eef9ee3206ba2f948f010d7ea4b6f16b4347", "filename": "compiler/rustc_plugin_impl/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -11,11 +11,15 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_lint::LintStore;\n+use rustc_macros::fluent_messages;\n \n mod errors;\n pub mod load;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n /// Structure used to register plugins.\n ///\n /// A plugin registrar function takes an `&mut Registry` and should call"}, {"sha": "a26d1b2b381e83024f1bd110aab18d0e3753821d", "filename": "compiler/rustc_privacy/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl"}, {"sha": "72b53eefa0817ab1f56d6a4c62f72314d447f053", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -57,7 +57,7 @@ pub struct InPublicInterfaceTraits<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n     pub descr: DiagnosticArgFromDisplay<'a>,\n-    #[label(visibility_label)]\n+    #[label(privacy_visibility_label)]\n     pub vis_span: Span,\n }\n \n@@ -71,7 +71,7 @@ pub struct InPublicInterface<'a> {\n     pub vis_descr: &'static str,\n     pub kind: &'a str,\n     pub descr: DiagnosticArgFromDisplay<'a>,\n-    #[label(visibility_label)]\n+    #[label(privacy_visibility_label)]\n     pub vis_span: Span,\n }\n "}, {"sha": "9e856bb8a084e679b7b296bea01001770568bdaa", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -16,11 +16,13 @@ use rustc_ast::MacroDef;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, ItemId, Node, PatKind};\n+use rustc_macros::fluent_messages;\n use rustc_middle::bug;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::{EffectiveVisibilities, Level};\n@@ -44,6 +46,8 @@ use errors::{\n     UnnamedItemIsPrivate,\n };\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below.\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "870e824039cb6a86abe94b83344c74dd327dbc1c", "filename": "compiler/rustc_query_system/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_query_system%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_query_system%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/query_system.ftl"}, {"sha": "6cc4c9a7e1ef0e538ab02e742f73f673aee71d2e", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -15,6 +15,9 @@ extern crate rustc_data_structures;\n #[macro_use]\n extern crate rustc_macros;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n pub mod cache;\n pub mod dep_graph;\n mod error;\n@@ -26,3 +29,5 @@ pub use error::HandleCycleError;\n pub use error::LayoutOfDepth;\n pub use error::QueryOverflow;\n pub use values::Value;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "817bb83ed786a6ed3a8267397b5bc0e958da03d1", "filename": "compiler/rustc_resolve/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/resolve.ftl"}, {"sha": "867363f4246af1f6c1d398f85682d0079fe8d84c", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -38,7 +38,7 @@ pub(crate) struct NameAlreadyUsedInParameterList {\n     #[primary_span]\n     #[label]\n     pub(crate) span: Span,\n-    #[label(first_use_of_name)]\n+    #[label(resolve_first_use_of_name)]\n     pub(crate) first_use_span: Span,\n     pub(crate) name: Symbol,\n }\n@@ -121,7 +121,7 @@ pub(crate) struct VariableBoundWithDifferentMode {\n     #[primary_span]\n     #[label]\n     pub(crate) span: Span,\n-    #[label(first_binding_span)]\n+    #[label(resolve_first_binding_span)]\n     pub(crate) first_binding_span: Span,\n     pub(crate) variable_name: Symbol,\n }\n@@ -293,7 +293,7 @@ pub(crate) struct BindingShadowsSomethingUnacceptable<'a> {\n     pub(crate) article: &'a str,\n     #[subdiagnostic]\n     pub(crate) sub_suggestion: Option<BindingShadowsSomethingUnacceptableSuggestion>,\n-    #[label(label_shadowed_binding)]\n+    #[label(resolve_label_shadowed_binding)]\n     pub(crate) shadowed_binding_span: Span,\n     pub(crate) participle: &'a str,\n     pub(crate) name: Symbol,\n@@ -369,7 +369,7 @@ pub(crate) struct UnreachableLabel {\n     #[label]\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n-    #[label(label_definition_span)]\n+    #[label(resolve_label_definition_span)]\n     pub(crate) definition_span: Span,\n     #[subdiagnostic]\n     pub(crate) sub_suggestion: Option<UnreachableLabelSubSuggestion>,\n@@ -413,7 +413,7 @@ pub(crate) struct TraitImplMismatch {\n     pub(crate) span: Span,\n     pub(crate) name: Symbol,\n     pub(crate) kind: String,\n-    #[label(label_trait_item)]\n+    #[label(resolve_label_trait_item)]\n     pub(crate) trait_item_span: Span,\n     pub(crate) trait_path: String,\n     pub(crate) code: String,\n@@ -434,9 +434,9 @@ pub(crate) struct TraitImplDuplicate {\n     #[primary_span]\n     #[label]\n     pub(crate) span: Span,\n-    #[label(old_span_label)]\n+    #[label(resolve_old_span_label)]\n     pub(crate) old_span: Span,\n-    #[label(trait_item_span)]\n+    #[label(resolve_trait_item_span)]\n     pub(crate) trait_item_span: Span,\n     pub(crate) name: Symbol,\n }"}, {"sha": "d36ee369b434d79cd3219b5f2d130fbe9957871f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -28,7 +28,9 @@ use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArg\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::{Lrc, MappedReadGuard};\n-use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, SubdiagnosticMessage,\n+};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorOf, DefKind, DocLinkResMap, LifetimeRes, PartialRes, PerNS};\n@@ -37,6 +39,7 @@ use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::TraitCandidate;\n use rustc_index::vec::IndexVec;\n+use rustc_macros::fluent_messages;\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::EffectiveVisibilities;\n@@ -77,6 +80,8 @@ mod late;\n mod macros;\n pub mod rustdoc;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n enum Weak {\n     Yes,\n     No,"}, {"sha": "fe553edab4276ffacd618b99ffd877bad142a588", "filename": "compiler/rustc_session/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/session.ftl"}, {"sha": "e1f1a5f6d2e00d951a36692c99d4267aba754ec2", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -18,6 +18,9 @@ pub mod errors;\n #[macro_use]\n extern crate tracing;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n pub use lint::{declare_lint, declare_lint_pass, declare_tool_lint, impl_lint_pass};\n@@ -39,6 +42,8 @@ pub mod output;\n \n pub use getopts;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in `rustc_middle`."}, {"sha": "9d0ef9f2f123892ea20606f74030ac9b02cb547b", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -226,8 +226,11 @@ pub struct ParseSess {\n \n impl ParseSess {\n     /// Used for testing.\n-    pub fn new(file_path_mapping: FilePathMapping) -> Self {\n-        let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+    pub fn new(\n+        locale_resources: &'static [&'static str],\n+        file_path_mapping: FilePathMapping,\n+    ) -> Self {\n+        let fallback_bundle = fallback_fluent_bundle(locale_resources, false);\n         let sm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n@@ -265,7 +268,7 @@ impl ParseSess {\n     }\n \n     pub fn with_silent_emitter(fatal_note: Option<String>) -> Self {\n-        let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+        let fallback_bundle = fallback_fluent_bundle(&[], false);\n         let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let fatal_handler =\n             Handler::with_tty_emitter(ColorConfig::Auto, false, None, None, None, fallback_bundle);"}, {"sha": "0be057de6d74571c30840d81708a8b18307d53f6", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1341,6 +1341,7 @@ pub fn build_session(\n     io: CompilerIO,\n     bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n+    fluent_resources: &'static [&'static str],\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     target_override: Option<Target>,\n@@ -1385,7 +1386,7 @@ pub fn build_session(\n     ));\n \n     let fallback_bundle = fallback_fluent_bundle(\n-        rustc_errors::DEFAULT_LOCALE_RESOURCES,\n+        fluent_resources,\n         sopts.unstable_opts.translate_directionality_markers,\n     );\n     let emitter = default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle);\n@@ -1629,8 +1630,13 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n+// FIXME(#100717): early errors aren't translated at the moment, so this is fine, but it will need\n+// to reference every crate that might emit an early error for translation to work.\n+static EARLY_ERROR_LOCALE_RESOURCE: &'static [&'static str] =\n+    &[rustc_errors::DEFAULT_LOCALE_RESOURCE];\n+\n fn early_error_handler(output: config::ErrorOutputType) -> rustc_errors::Handler {\n-    let fallback_bundle = fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = fallback_fluent_bundle(EARLY_ERROR_LOCALE_RESOURCE, false);\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();"}, {"sha": "b7d48280f46198d3b72e42a9f8937723d8b2a10e", "filename": "compiler/rustc_symbol_mangling/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_symbol_mangling%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_symbol_mangling%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/symbol_mangling.ftl"}, {"sha": "d9ce7373483736438c01f0661b43f320a2877f42", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -100,8 +100,10 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate tracing;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_macros::fluent_messages;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc_middle::mir::mono::{InstantiationMode, MonoItem};\n@@ -117,6 +119,8 @@ pub mod errors;\n pub mod test;\n pub mod typeid;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n /// This function computes the symbol name for the given `instance` and the\n /// given instantiating crate. That is, if you know that instance X is\n /// instantiated in crate Y, this is the symbol name this instance would have."}, {"sha": "14eb4a5502d5c2f2df139f117eba5e09f5793cf9", "filename": "compiler/rustc_trait_selection/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/trait_selection.ftl"}, {"sha": "df7c4df1868c7193e70709b3190484c2b71396db", "filename": "compiler/rustc_trait_selection/src/errors.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,4 +1,5 @@\n-use rustc_errors::{fluent, ErrorGuaranteed, Handler, IntoDiagnostic};\n+use crate::fluent_generated as fluent;\n+use rustc_errors::{ErrorGuaranteed, Handler, IntoDiagnostic};\n use rustc_macros::Diagnostic;\n use rustc_middle::ty::{self, PolyTraitRef, Ty};\n use rustc_span::{Span, Symbol};\n@@ -69,19 +70,19 @@ impl IntoDiagnostic<'_> for NegativePositiveConflict<'_> {\n         diag.code(rustc_errors::error_code!(E0751));\n         match self.negative_impl_span {\n             Ok(span) => {\n-                diag.span_label(span, fluent::negative_implementation_here);\n+                diag.span_label(span, fluent::trait_selection_negative_implementation_here);\n             }\n             Err(cname) => {\n-                diag.note(fluent::negative_implementation_in_crate);\n+                diag.note(fluent::trait_selection_negative_implementation_in_crate);\n                 diag.set_arg(\"negative_impl_cname\", cname.to_string());\n             }\n         }\n         match self.positive_impl_span {\n             Ok(span) => {\n-                diag.span_label(span, fluent::positive_implementation_here);\n+                diag.span_label(span, fluent::trait_selection_positive_implementation_here);\n             }\n             Err(cname) => {\n-                diag.note(fluent::positive_implementation_in_crate);\n+                diag.note(fluent::trait_selection_positive_implementation_in_crate);\n                 diag.set_arg(\"positive_impl_cname\", cname.to_string());\n             }\n         }"}, {"sha": "548b42cef430ab3de7704bfa18c6b40479b11b1e", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -36,7 +36,12 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate smallvec;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n+\n pub mod errors;\n pub mod infer;\n pub mod solve;\n pub mod traits;\n+\n+fluent_messages! { \"../locales/en-US.ftl\" }"}, {"sha": "abe65a0e3fef06415599478dad5d702316a7a6df", "filename": "compiler/rustc_ty_utils/locales/en-US.ftl", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Flocales%2Fen-US.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "previous_filename": "compiler/rustc_error_messages/locales/en-US/ty_utils.ftl"}, {"sha": "ab3e62f048453bbe2b5ca4f20c28e88b944756e6", "filename": "compiler/rustc_ty_utils/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Ferrors.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -16,7 +16,7 @@ pub struct NeedsDropOverflow<'tcx> {\n pub struct GenericConstantTooComplex {\n     #[primary_span]\n     pub span: Span,\n-    #[note(maybe_supported)]\n+    #[note(ty_utils_maybe_supported)]\n     pub maybe_supported: Option<()>,\n     #[subdiagnostic]\n     pub sub: GenericConstantTooComplexSub,"}, {"sha": "35f468aa952800a865a0ba12e9a8996d6c2a523f", "filename": "compiler/rustc_ty_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flib.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -15,6 +15,8 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate tracing;\n \n+use rustc_errors::{DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::fluent_messages;\n use rustc_middle::ty::query::Providers;\n \n mod abi;\n@@ -31,6 +33,8 @@ pub mod representability;\n mod structural_match;\n mod ty;\n \n+fluent_messages! { \"../locales/en-US.ftl\" }\n+\n pub fn provide(providers: &mut Providers) {\n     abi::provide(providers);\n     assoc::provide(providers);"}, {"sha": "068d596f52f0fd728613d4888a1916e2ce6b38c1", "filename": "src/librustdoc/clean/render_macro_matchers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Frender_macro_matchers.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -63,7 +63,7 @@ fn snippet_equal_to_token(tcx: TyCtxt<'_>, matcher: &TokenTree) -> Option<String\n     let snippet = source_map.span_to_snippet(span).ok()?;\n \n     // Create a Parser.\n-    let sess = ParseSess::new(FilePathMapping::empty());\n+    let sess = ParseSess::new(rustc_driver::DEFAULT_LOCALE_RESOURCES, FilePathMapping::empty());\n     let file_name = source_map.span_to_filename(span);\n     let mut parser =\n         match rustc_parse::maybe_new_parser_from_source_str(&sess, file_name, snippet.clone()) {"}, {"sha": "cb0feed08a0287dbf9fdd1814c0281d8a16572bd", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -116,7 +116,7 @@ pub(crate) fn new_handler(\n     unstable_opts: &UnstableOptions,\n ) -> rustc_errors::Handler {\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+        rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -254,6 +254,7 @@ pub(crate) fn create_config(\n         output_file: None,\n         output_dir: None,\n         file_loader: None,\n+        locale_resources: rustc_driver::DEFAULT_LOCALE_RESOURCES,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(Box::new(crate::lint::register_lints)),"}, {"sha": "509240a51942e3f4b046b482197a04b1a51a3a1a", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -96,6 +96,7 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n         output_file: None,\n         output_dir: None,\n         file_loader: None,\n+        locale_resources: rustc_driver::DEFAULT_LOCALE_RESOURCES,\n         lint_caps,\n         parse_sess_created: None,\n         register_lints: Some(Box::new(crate::lint::register_lints)),\n@@ -546,7 +547,7 @@ pub(crate) fn make_test(\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let fallback_bundle =\n-                rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+                rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n             supports_color = EmitterWriter::stderr(\n                 ColorConfig::Auto,\n                 None,\n@@ -742,7 +743,7 @@ fn check_if_attr_is_complete(source: &str, edition: Edition) -> bool {\n             // send all the errors that librustc_ast emits directly into a `Sink` instead of stderr.\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let fallback_bundle =\n-                rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+                rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n \n             let emitter = EmitterWriter::new(\n                 Box::new(io::sink()),"}, {"sha": "71f922662da63b30e9aa93c84b1204e36b517aab", "filename": "src/librustdoc/passes/lint/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Flint%2Fcheck_code_block_syntax.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -34,7 +34,7 @@ fn check_rust_syntax(\n ) {\n     let buffer = Lrc::new(Lock::new(Buffer::default()));\n     let fallback_bundle =\n-        rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+        rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter = BufferEmitter { buffer: Lrc::clone(&buffer), fallback_bundle };\n \n     let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "660dd8391a30a2ebe093e1ddfdc2a8582fa671c9", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -705,7 +705,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n \n                 let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n                 let fallback_bundle =\n-                    rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+                    rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n                 let emitter = EmitterWriter::new(\n                     Box::new(io::sink()),\n                     None,"}, {"sha": "45209fb8519e92919a428704be4b0722758ee4c7", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -209,7 +209,7 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // Separate the output with an empty line\n     eprintln!();\n \n-    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+    let fallback_bundle = rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n     let emitter = Box::new(rustc_errors::emitter::EmitterWriter::stderr(\n         rustc_errors::ColorConfig::Auto,\n         None,"}, {"sha": "a7a363d47ba6a655dc8648395a97b76d3d2e690b", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -124,7 +124,7 @@ fn default_handler(\n         silent_emitter()\n     } else {\n         let fallback_bundle =\n-            rustc_errors::fallback_fluent_bundle(rustc_errors::DEFAULT_LOCALE_RESOURCES, false);\n+            rustc_errors::fallback_fluent_bundle(rustc_driver::DEFAULT_LOCALE_RESOURCES, false);\n         Box::new(EmitterWriter::stderr(\n             color_cfg,\n             Some(source_map.clone()),"}, {"sha": "53ec79e477bd423e8f88730a7db83fee6c3b0dad", "filename": "tests/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -53,6 +53,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         output_file: Some(output),\n         output_dir: None,\n         file_loader: None,\n+        locale_resources: &[],\n         lint_caps: Default::default(),\n         parse_sess_created: None,\n         register_lints: None,"}, {"sha": "871550b231a32cff8c0045b1d444ee0b9d681769", "filename": "tests/ui-fulldeps/fluent-messages/duplicate.ftl", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fduplicate.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fduplicate.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fduplicate.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -0,0 +1,3 @@\n+no_crate_a_b_key = Value\n+\n+no_crate_a_b_key = Another Value"}, {"sha": "3088b1f8dc83227157f27a71e95e330028b8207f", "filename": "tests/ui-fulldeps/fluent-messages/label-with-hyphens.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Flabel-with-hyphens.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,2 +1,2 @@\n-label_with_hyphens_some_slug = hi\n+no_crate_some_slug = hi\n     .label-has-hyphens = test"}, {"sha": "0a64e3894bd51f9f5666cd96c2500b2d93fbe256", "filename": "tests/ui-fulldeps/fluent-messages/missing-crate-name.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-crate-name.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-crate-name.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-crate-name.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,2 +1,2 @@\n with-hyphens = 1234\n-test-crate_foo = abcd\n+no-crate_foo = abcd"}, {"sha": "4c6514a97700539a71b8079efcb7ffc3540351a4", "filename": "tests/ui-fulldeps/fluent-messages/missing-message-ref.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message-ref.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1 +1 @@\n-missing_message_ref = {message}\n+no_crate_missing_message_ref = {message}"}, {"sha": "61f56fd4d57b617de4f4dc478a72caaf7387c5fa", "filename": "tests/ui-fulldeps/fluent-messages/missing-message.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1 +1 @@\n-missing_message =\n+no_crate_missing_message ="}, {"sha": "a64c85094f1d820b7f8b64825cc067398c21b261", "filename": "tests/ui-fulldeps/fluent-messages/slug-with-hyphens.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fslug-with-hyphens.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1 +1 @@\n-slug_with_hyphens_this-slug-has-hyphens = hi\n+no_crate_this-slug-has-hyphens = hi"}, {"sha": "66575eb8e30cf8ecbb7e605046346bff0545bf01", "filename": "tests/ui-fulldeps/fluent-messages/test.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -21,87 +21,74 @@ pub enum SubdiagnosticMessage {\n mod missing_absolute {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        missing_absolute => \"/definitely_does_not_exist.ftl\",\n-//~^ ERROR could not open Fluent resource\n-    }\n+    fluent_messages! { \"/definitely_does_not_exist.ftl\" }\n+    //~^ ERROR could not open Fluent resource\n }\n \n mod missing_relative {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        missing_relative => \"../definitely_does_not_exist.ftl\",\n-//~^ ERROR could not open Fluent resource\n-    }\n+    fluent_messages! { \"../definitely_does_not_exist.ftl\" }\n+    //~^ ERROR could not open Fluent resource\n }\n \n mod missing_message {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        missing_message => \"./missing-message.ftl\",\n-//~^ ERROR could not parse Fluent resource\n-    }\n+    fluent_messages! { \"./missing-message.ftl\" }\n+    //~^ ERROR could not parse Fluent resource\n }\n \n mod duplicate {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-//~^ ERROR the name `a_b_key` is defined multiple times\n-        a => \"./duplicate-a.ftl\",\n-        a_b => \"./duplicate-a-b.ftl\",\n-//~^ ERROR overrides existing message: `a_b_key`\n-    }\n+    fluent_messages! { \"./duplicate.ftl\" }\n+    //~^ ERROR overrides existing message: `no_crate_a_b_key`\n }\n \n mod slug_with_hyphens {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        slug_with_hyphens => \"./slug-with-hyphens.ftl\",\n-//~^ ERROR name `slug_with_hyphens_this-slug-has-hyphens` contains a '-' character\n-    }\n+    fluent_messages! { \"./slug-with-hyphens.ftl\" }\n+    //~^ ERROR name `no_crate_this-slug-has-hyphens` contains a '-' character\n }\n \n mod label_with_hyphens {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        label_with_hyphens => \"./label-with-hyphens.ftl\",\n-//~^ ERROR attribute `label-has-hyphens` contains a '-' character\n-    }\n+    fluent_messages! { \"./label-with-hyphens.ftl\" }\n+    //~^ ERROR attribute `label-has-hyphens` contains a '-' character\n }\n \n mod valid {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        valid => \"./valid.ftl\",\n-    }\n+    fluent_messages! { \"./valid.ftl\" }\n \n-    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, valid_key};\n+    mod test_generated {\n+        use super::{fluent_generated::no_crate_key, DEFAULT_LOCALE_RESOURCE};\n+    }\n }\n \n mod missing_crate_name {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        test_crate => \"./missing-crate-name.ftl\",\n-//~^ ERROR name `test-crate_foo` contains a '-' character\n-//~| ERROR name `with-hyphens` contains a '-' character\n-//~| ERROR name `with-hyphens` does not start with the crate name\n-    }\n+    fluent_messages! { \"./missing-crate-name.ftl\" }\n+    //~^ ERROR name `no-crate_foo` contains a '-' character\n+    //~| ERROR name `with-hyphens` contains a '-' character\n+    //~| ERROR name `with-hyphens` does not start with the crate name\n \n-    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, test_crate_foo, with_hyphens};\n+    mod test_generated {\n+        use super::{\n+            fluent_generated::{no_crate_foo, with_hyphens},\n+            DEFAULT_LOCALE_RESOURCE,\n+        };\n+    }\n }\n \n mod missing_message_ref {\n     use super::fluent_messages;\n \n-    fluent_messages! {\n-        missing => \"./missing-message-ref.ftl\"\n-//~^ ERROR referenced message `message` does not exist\n-    }\n+    fluent_messages! { \"./missing-message-ref.ftl\" }\n+    //~^ ERROR referenced message `message` does not exist\n }"}, {"sha": "c7961ed22f2b4f17eeb8bae8973db4917de53093", "filename": "tests/ui-fulldeps/fluent-messages/test.stderr", "status": "modified", "additions": 39, "deletions": 58, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,106 +1,87 @@\n error: could not open Fluent resource\n-  --> $DIR/test.rs:25:29\n+  --> $DIR/test.rs:24:24\n    |\n-LL |         missing_absolute => \"/definitely_does_not_exist.ftl\",\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"/definitely_does_not_exist.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: os-specific message\n \n error: could not open Fluent resource\n-  --> $DIR/test.rs:34:29\n+  --> $DIR/test.rs:31:24\n    |\n-LL |         missing_relative => \"../definitely_does_not_exist.ftl\",\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"../definitely_does_not_exist.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: os-specific message\n \n error: could not parse Fluent resource\n-  --> $DIR/test.rs:43:28\n+  --> $DIR/test.rs:38:24\n    |\n-LL |         missing_message => \"./missing-message.ftl\",\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./missing-message.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: see additional errors emitted\n \n-error: expected a message field for \"missing_message\"\n+error: expected a message field for \"no_crate_missing_message\"\n  --> ./missing-message.ftl:1:1\n   |\n-1 | missing_message =\n-  | ^^^^^^^^^^^^^^^^^\n+1 | no_crate_missing_message =\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n \n-error: overrides existing message: `a_b_key`\n-  --> $DIR/test.rs:54:16\n+error: overrides existing message: `no_crate_a_b_key`\n+  --> $DIR/test.rs:45:24\n    |\n-LL |         a_b => \"./duplicate-a-b.ftl\",\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: previously defined in this resource\n-  --> $DIR/test.rs:53:14\n-   |\n-LL |         a => \"./duplicate-a.ftl\",\n-   |              ^^^^^^^^^^^^^^^^^^^\n-\n-error[E0428]: the name `a_b_key` is defined multiple times\n-  --> $DIR/test.rs:51:5\n-   |\n-LL |     fluent_messages! {\n-   |     ^^^^^^^^^^^^^^^^\n-   |     |\n-   |     `a_b_key` redefined here\n-   |     previous definition of the value `a_b_key` here\n-   |\n-   = note: os-specific message\n-   = note: os-specific message\n+LL |     fluent_messages! { \"./duplicate.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^\n \n-error: name `slug_with_hyphens_this-slug-has-hyphens` contains a '-' character\n-  --> $DIR/test.rs:63:30\n+error: name `no_crate_this-slug-has-hyphens` contains a '-' character\n+  --> $DIR/test.rs:52:24\n    |\n-LL |         slug_with_hyphens => \"./slug-with-hyphens.ftl\",\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./slug-with-hyphens.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: attribute `label-has-hyphens` contains a '-' character\n-  --> $DIR/test.rs:72:31\n+  --> $DIR/test.rs:59:24\n    |\n-LL |         label_with_hyphens => \"./label-with-hyphens.ftl\",\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./label-with-hyphens.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: name `with-hyphens` contains a '-' character\n-  --> $DIR/test.rs:91:23\n+  --> $DIR/test.rs:76:24\n    |\n-LL |         test_crate => \"./missing-crate-name.ftl\",\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./missing-crate-name.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n error: name `with-hyphens` does not start with the crate name\n-  --> $DIR/test.rs:91:23\n+  --> $DIR/test.rs:76:24\n    |\n-LL |         test_crate => \"./missing-crate-name.ftl\",\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./missing-crate-name.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: prepend `test_crate_` to the slug name: `test_crate_with_hyphens`\n+   = help: prepend `no_crate_` to the slug name: `no_crate_with_hyphens`\n \n-error: name `test-crate_foo` contains a '-' character\n-  --> $DIR/test.rs:91:23\n+error: name `no-crate_foo` contains a '-' character\n+  --> $DIR/test.rs:76:24\n    |\n-LL |         test_crate => \"./missing-crate-name.ftl\",\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./missing-crate-name.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: replace any '-'s with '_'s\n \n-error: referenced message `message` does not exist (in message `missing_message_ref`)\n-  --> $DIR/test.rs:104:20\n+error: referenced message `message` does not exist (in message `no_crate_missing_message_ref`)\n+  --> $DIR/test.rs:92:24\n    |\n-LL |         missing => \"./missing-message-ref.ftl\"\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fluent_messages! { \"./missing-message-ref.ftl\" }\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: you may have meant to use a variable reference (`{$message}`)\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n \n-For more information about this error, try `rustc --explain E0428`."}, {"sha": "598473adb680feb626ad6292f9a8110ee09d1978", "filename": "tests/ui-fulldeps/fluent-messages/valid.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1 +1 @@\n-valid_key = Valid!\n+no_crate_key = Valid!"}, {"sha": "cb2d476d815d245dc75f867b24c10652ac933996", "filename": "tests/ui-fulldeps/internal-lints/diagnostics.ftl", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,4 +1,4 @@\n-compiletest_example = this is an example message used in testing\n+no_crate_example = this is an example message used in testing\n     .note = with a note\n     .help = with a help\n     .suggestion = with a suggestion", "previous_filename": "compiler/rustc_error_messages/locales/en-US/compiletest.ftl"}, {"sha": "3aa65d53d4eaec97c330cb57ecea21955e97d94e", "filename": "tests/ui-fulldeps/internal-lints/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -13,20 +13,22 @@ extern crate rustc_span;\n \n use rustc_errors::{\n     AddToDiagnostic, IntoDiagnostic, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, Handler, fluent, SubdiagnosticMessage,\n+    ErrorGuaranteed, Handler, DiagnosticMessage, SubdiagnosticMessage,\n };\n-use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_macros::{fluent_messages, Diagnostic, Subdiagnostic};\n use rustc_span::Span;\n \n+fluent_messages! { \"./diagnostics.ftl\" }\n+\n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct DeriveDiagnostic {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(compiletest_example)]\n+#[note(no_crate_example)]\n struct Note {\n     #[primary_span]\n     span: Span,\n@@ -45,7 +47,7 @@ pub struct TranslatableInIntoDiagnostic;\n \n impl<'a> IntoDiagnostic<'a, ErrorGuaranteed> for TranslatableInIntoDiagnostic {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        handler.struct_err(fluent::compiletest_example)\n+        handler.struct_err(crate::fluent_generated::no_crate_example)\n     }\n }\n \n@@ -68,12 +70,12 @@ impl AddToDiagnostic for TranslatableInAddToDiagnostic {\n     where\n         F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n     {\n-        diag.note(fluent::note);\n+        diag.note(crate::fluent_generated::no_crate_note);\n     }\n }\n \n pub fn make_diagnostics<'a>(handler: &'a Handler) {\n-    let _diag = handler.struct_err(fluent::compiletest_example);\n+    let _diag = handler.struct_err(crate::fluent_generated::no_crate_example);\n     //~^ ERROR diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n \n     let _diag = handler.struct_err(\"untranslatable diagnostic\");"}, {"sha": "6f797ebc2dde482f9dd72dd8103d772c8ad0d5c0", "filename": "tests/ui-fulldeps/internal-lints/diagnostics.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Finternal-lints%2Fdiagnostics.stderr?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,5 +1,5 @@\n error: diagnostics should be created using translatable messages\n-  --> $DIR/diagnostics.rs:39:17\n+  --> $DIR/diagnostics.rs:41:17\n    |\n LL |         handler.struct_err(\"untranslatable diagnostic\")\n    |                 ^^^^^^^^^^\n@@ -11,15 +11,15 @@ LL | #![deny(rustc::untranslatable_diagnostic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostics should be created using translatable messages\n-  --> $DIR/diagnostics.rs:59:14\n+  --> $DIR/diagnostics.rs:61:14\n    |\n LL |         diag.note(\"untranslatable diagnostic\");\n    |              ^^^^\n \n error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n-  --> $DIR/diagnostics.rs:76:25\n+  --> $DIR/diagnostics.rs:78:25\n    |\n-LL |     let _diag = handler.struct_err(fluent::compiletest_example);\n+LL |     let _diag = handler.struct_err(crate::fluent_generated::no_crate_example);\n    |                         ^^^^^^^^^^\n    |\n note: the lint level is defined here\n@@ -29,13 +29,13 @@ LL | #![deny(rustc::diagnostic_outside_of_impl)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostics should only be created in `IntoDiagnostic`/`AddToDiagnostic` impls\n-  --> $DIR/diagnostics.rs:79:25\n+  --> $DIR/diagnostics.rs:81:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n    |                         ^^^^^^^^^^\n \n error: diagnostics should be created using translatable messages\n-  --> $DIR/diagnostics.rs:79:25\n+  --> $DIR/diagnostics.rs:81:25\n    |\n LL |     let _diag = handler.struct_err(\"untranslatable diagnostic\");\n    |                         ^^^^^^^^^^"}, {"sha": "f9d6fc8bae1696518ba1cf01816c9b62bd482dab", "filename": "tests/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -30,8 +30,10 @@ pub fn main() {\n     assert_eq!(gravy::foo(), 10);\n }\n \n+static TEST_LOCALE_RESOURCES: &[&str] = &[rustc_parse::DEFAULT_LOCALE_RESOURCE];\n+\n fn parse() {\n-    let parse_session = ParseSess::new(FilePathMapping::empty());\n+    let parse_session = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();"}, {"sha": "5c8aa8651635f12ea34bcf02b0dc5f63fa7b6ca9", "filename": "tests/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -219,8 +219,10 @@ fn main() {\n     rustc_span::create_default_session_globals_then(|| run());\n }\n \n+static TEST_LOCALE_RESOURCES: &[&str] = &[rustc_parse::DEFAULT_LOCALE_RESOURCE];\n+\n fn run() {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(TEST_LOCALE_RESOURCES, FilePathMapping::empty());\n \n     iter_exprs(2, &mut |mut e| {\n         // If the pretty printer is correct, then `parse(print(e))` should be identical to `e`,"}, {"sha": "01e6434b07567c3528c987b87c0a531b819ca25e", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 150, "deletions": 148, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -17,26 +17,28 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n extern crate rustc_macros;\n-use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n+use rustc_macros::{fluent_messages, Diagnostic, LintDiagnostic, Subdiagnostic};\n \n extern crate rustc_middle;\n use rustc_middle::ty::Ty;\n \n extern crate rustc_errors;\n-use rustc_errors::{Applicability, MultiSpan};\n+use rustc_errors::{Applicability, DiagnosticMessage, MultiSpan, SubdiagnosticMessage};\n \n extern crate rustc_session;\n \n+fluent_messages! { \"./example.ftl\" }\n+\n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct Hello {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct HelloWarn {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n //~^ ERROR unsupported type attribute for diagnostic derive enum\n enum DiagnosticOnEnum {\n     Foo,\n@@ -46,13 +48,13 @@ enum DiagnosticOnEnum {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n #[diag = \"E0123\"]\n //~^ ERROR `#[diag = ...]` is not a valid attribute\n struct WrongStructAttrStyle {}\n \n #[derive(Diagnostic)]\n-#[nonsense(compiletest_example, code = \"E0123\")]\n+#[nonsense(no_crate_example, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n //~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n@@ -66,7 +68,7 @@ struct InvalidLitNestedAttr {}\n \n #[derive(Diagnostic)]\n #[diag(nonsense, code = \"E0123\")]\n-//~^ ERROR cannot find value `nonsense` in module `rustc_errors::fluent`\n+//~^ ERROR cannot find value `nonsense` in module `crate::fluent_generated`\n struct InvalidNestedStructAttr {}\n \n #[derive(Diagnostic)]\n@@ -90,33 +92,33 @@ struct InvalidNestedStructAttr2 {}\n struct InvalidNestedStructAttr3 {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\", slug = \"foo\")]\n+#[diag(no_crate_example, code = \"E0123\", slug = \"foo\")]\n //~^ ERROR `#[diag(slug = ...)]` is not a valid attribute\n struct InvalidNestedStructAttr4 {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct WrongPlaceField {\n     #[suggestion = \"bar\"]\n     //~^ ERROR `#[suggestion = ...]` is not a valid attribute\n     sp: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n-#[diag(compiletest_example, code = \"E0456\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n struct DiagSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n+#[diag(no_crate_example, code = \"E0456\", code = \"E0457\")]\n //~^ ERROR specified multiple times\n struct CodeSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, compiletest_example, code = \"E0456\")]\n-//~^ ERROR `#[diag(compiletest_example)]` is not a valid attribute\n+#[diag(no_crate_example, no_crate::example, code = \"E0456\")]\n+//~^ ERROR `#[diag(no_crate::example)]` is not a valid attribute\n struct SlugSpecifiedTwice {}\n \n #[derive(Diagnostic)]\n@@ -128,19 +130,19 @@ struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n struct SlugNotProvided {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct CodeNotProvided {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct MessageWrongType {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     foo: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct InvalidPathFieldAttr {\n     #[nonsense]\n     //~^ ERROR `#[nonsense]` is not a valid attribute\n@@ -149,85 +151,85 @@ struct InvalidPathFieldAttr {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithField {\n     name: String,\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithMessageAppliedToField {\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     name: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithNonexistentField {\n-    #[suggestion(suggestion, code = \"{name}\")]\n+    #[suggestion(no_crate_suggestion, code = \"{name}\")]\n     //~^ ERROR `name` doesn't refer to a field on this type\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n //~^ ERROR invalid format string: expected `'}'`\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorMissingClosingBrace {\n-    #[suggestion(suggestion, code = \"{name\")]\n+    #[suggestion(no_crate_suggestion, code = \"{name\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(Diagnostic)]\n //~^ ERROR invalid format string: unmatched `}`\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorMissingOpeningBrace {\n-    #[suggestion(suggestion, code = \"name}\")]\n+    #[suggestion(no_crate_suggestion, code = \"name}\")]\n     suggestion: (Span, Applicability),\n     name: String,\n     val: usize,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct LabelOnSpan {\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     sp: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct LabelOnNonSpan {\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     //~^ ERROR the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n     id: u32,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct Suggest {\n-    #[suggestion(suggestion, code = \"This is the suggested code\")]\n-    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"normal\")]\n-    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"short\")]\n-    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"hidden\")]\n-    #[suggestion(suggestion, code = \"This is the suggested code\", style = \"verbose\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is the suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is the suggested code\", style = \"normal\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is the suggested code\", style = \"short\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is the suggested code\", style = \"hidden\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is the suggested code\", style = \"verbose\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithoutCode {\n-    #[suggestion(suggestion)]\n+    #[suggestion(no_crate_suggestion)]\n     //~^ ERROR suggestion without `code = \"...\"`\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithBadKey {\n     #[suggestion(nonsense = \"bar\")]\n     //~^ ERROR `#[suggestion(nonsense = ...)]` is not a valid attribute\n@@ -236,7 +238,7 @@ struct SuggestWithBadKey {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithShorthandMsg {\n     #[suggestion(msg = \"bar\")]\n     //~^ ERROR `#[suggestion(msg = ...)]` is not a valid attribute\n@@ -245,91 +247,91 @@ struct SuggestWithShorthandMsg {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithoutMsg {\n     #[suggestion(code = \"bar\")]\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithTypesSwapped {\n-    #[suggestion(suggestion, code = \"This is suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Span),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithWrongTypeApplicabilityOnly {\n-    #[suggestion(suggestion, code = \"This is suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n     //~^ ERROR wrong field type for suggestion\n     suggestion: Applicability,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithSpanOnly {\n-    #[suggestion(suggestion, code = \"This is suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n-    #[suggestion(suggestion, code = \"This is suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n     suggestion: (Span, Span, Applicability),\n     //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n-    #[suggestion(suggestion, code = \"This is suggested code\")]\n+    #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n     suggestion: (Applicability, Applicability, Span),\n     //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct WrongKindOfAnnotation {\n     #[label = \"bar\"]\n     //~^ ERROR `#[label = ...]` is not a valid attribute\n     z: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct OptionsInErrors {\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     label: Option<Span>,\n-    #[suggestion(suggestion, code = \"...\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0456\")]\n+#[diag(no_crate_example, code = \"E0456\")]\n struct MoveOutOfBorrowError<'tcx> {\n     name: Ident,\n     ty: Ty<'tcx>,\n     #[primary_span]\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     span: Span,\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     other_span: Span,\n-    #[suggestion(suggestion, code = \"{name}.clone()\")]\n+    #[suggestion(no_crate_suggestion, code = \"{name}.clone()\")]\n     opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithLifetime<'a> {\n-    #[label(label)]\n+    #[label(no_crate_label)]\n     span: Span,\n     name: &'a str,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithDefaultLabelAttr<'a> {\n     #[label]\n     span: Span,\n@@ -338,15 +340,15 @@ struct ErrorWithDefaultLabelAttr<'a> {\n \n #[derive(Diagnostic)]\n //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n     span: Span,\n     other: Hello,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ArgFieldWithSkip {\n     #[primary_span]\n     span: Span,\n@@ -357,297 +359,297 @@ struct ArgFieldWithSkip {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithSpannedNote {\n     #[note]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithSpannedNoteCustom {\n-    #[note(note)]\n+    #[note(no_crate_note)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n #[note]\n struct ErrorWithNote {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n-#[note(note)]\n+#[diag(no_crate_example, code = \"E0123\")]\n+#[note(no_crate_note)]\n struct ErrorWithNoteCustom {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithSpannedHelp {\n     #[help]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithSpannedHelpCustom {\n-    #[help(help)]\n+    #[help(no_crate_help)]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n #[help]\n struct ErrorWithHelp {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n-#[help(help)]\n+#[diag(no_crate_example, code = \"E0123\")]\n+#[help(no_crate_help)]\n struct ErrorWithHelpCustom {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n #[help]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithHelpWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[help(help)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[help(no_crate_help)]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithHelpCustomWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n #[note]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithNoteWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[note(note)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[note(no_crate_note)]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithNoteCustomWrongOrder {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ApplicabilityInBoth {\n-    #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     //~^ ERROR specified multiple times\n     suggestion: (Span, Applicability),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct InvalidApplicability {\n-    #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"batman\")]\n     //~^ ERROR invalid applicability\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ValidApplicability {\n-    #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct NoApplicability {\n-    #[suggestion(suggestion, code = \"...\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\")]\n     suggestion: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parse_add_paren)]\n+#[note(no_crate_example)]\n struct Note;\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct Subdiagnostic {\n     #[subdiagnostic]\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct VecField {\n     #[primary_span]\n     #[label]\n     spans: Vec<Span>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct UnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: (),\n-    #[help(help)]\n+    #[help(no_crate_help)]\n     bar: (),\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct OptUnitField {\n     #[primary_span]\n     spans: Span,\n     #[help]\n     foo: Option<()>,\n-    #[help(help)]\n+    #[help(no_crate_help)]\n     bar: Option<()>,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingPath {\n-    #[label(label, foo)]\n+    #[label(no_crate_label, foo)]\n     //~^ ERROR `#[label(foo)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingNameValue {\n-    #[label(label, foo = \"...\")]\n+    #[label(no_crate_label, foo = \"...\")]\n     //~^ ERROR `#[label(foo = ...)]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct LabelWithTrailingList {\n-    #[label(label, foo(\"...\"))]\n+    #[label(no_crate_label, foo(\"...\"))]\n     //~^ ERROR `#[label(foo(...))]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct LintsGood {}\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct PrimarySpanOnLint {\n     #[primary_span]\n     //~^ ERROR `#[primary_span]` is not a valid attribute\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct ErrorWithMultiSpan {\n     #[primary_span]\n     span: MultiSpan,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n #[warning]\n struct ErrorWithWarn {\n     val: String,\n }\n \n #[derive(Diagnostic)]\n-#[error(compiletest_example, code = \"E0123\")]\n+#[error(no_crate_example, code = \"E0123\")]\n //~^ ERROR `#[error(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `error` in this scope\n struct ErrorAttribute {}\n \n #[derive(Diagnostic)]\n-#[warn_(compiletest_example, code = \"E0123\")]\n+#[warn_(no_crate_example, code = \"E0123\")]\n //~^ ERROR `#[warn_(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `warn_` in this scope\n struct WarnAttribute {}\n \n #[derive(Diagnostic)]\n-#[lint(compiletest_example, code = \"E0123\")]\n+#[lint(no_crate_example, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnSessionDiag {}\n \n #[derive(LintDiagnostic)]\n-#[lint(compiletest_example, code = \"E0123\")]\n+#[lint(no_crate_example, code = \"E0123\")]\n //~^ ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR `#[lint(...)]` is not a valid attribute\n //~| ERROR diagnostic slug not specified\n //~| ERROR cannot find attribute `lint` in this scope\n struct LintAttributeOnLintDiag {}\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct DuplicatedSuggestionCode {\n-    #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n     //~^ ERROR specified multiple times\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct InvalidTypeInSuggestionTuple {\n-    #[suggestion(suggestion, code = \"...\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\")]\n     suggestion: (Span, usize),\n     //~^ ERROR wrong types for suggestion\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct MissingApplicabilityInSuggestionTuple {\n-    #[suggestion(suggestion, code = \"...\")]\n+    #[suggestion(no_crate_suggestion, code = \"...\")]\n     suggestion: (Span,),\n     //~^ ERROR wrong types for suggestion\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct MissingCodeInSuggestion {\n-    #[suggestion(suggestion)]\n+    #[suggestion(no_crate_suggestion)]\n     //~^ ERROR suggestion without `code = \"...\"`\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n-#[multipart_suggestion(suggestion)]\n+#[diag(no_crate_example, code = \"E0123\")]\n+#[multipart_suggestion(no_crate_suggestion)]\n //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n #[multipart_suggestion()]\n //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n struct MultipartSuggestion {\n-    #[multipart_suggestion(suggestion)]\n+    #[multipart_suggestion(no_crate_suggestion)]\n     //~^ ERROR `#[multipart_suggestion(...)]` is not a valid attribute\n     //~| ERROR cannot find attribute `multipart_suggestion` in this scope\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n-#[suggestion(suggestion, code = \"...\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n+#[suggestion(no_crate_suggestion, code = \"...\")]\n //~^ ERROR `#[suggestion(...)]` is not a valid attribute\n struct SuggestionOnStruct {\n     #[primary_span]\n     suggestion: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n #[label]\n //~^ ERROR `#[label]` is not a valid attribute\n struct LabelOnStruct {\n@@ -657,70 +659,70 @@ struct LabelOnStruct {\n \n #[derive(Diagnostic)]\n enum ExampleEnum {\n-    #[diag(compiletest_example)]\n+    #[diag(no_crate_example)]\n     Foo {\n         #[primary_span]\n         sp: Span,\n         #[note]\n         note_sp: Span,\n     },\n-    #[diag(compiletest_example)]\n+    #[diag(no_crate_example)]\n     Bar {\n         #[primary_span]\n         sp: Span,\n     },\n-    #[diag(compiletest_example)]\n+    #[diag(no_crate_example)]\n     Baz,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct RawIdentDiagnosticArg {\n     pub r#type: String,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticBad {\n     #[subdiagnostic(bad)]\n     //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticBadStr {\n     #[subdiagnostic = \"bad\"]\n     //~^ ERROR `#[subdiagnostic = ...]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticBadTwice {\n     #[subdiagnostic(bad, bad)]\n     //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticBadLitStr {\n     #[subdiagnostic(\"bad\")]\n     //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticEagerLint {\n     #[subdiagnostic(eager)]\n     //~^ ERROR `#[subdiagnostic(...)]` is not a valid attribute\n     note: Note,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticEagerCorrect {\n     #[subdiagnostic(eager)]\n     note: Note,\n@@ -731,7 +733,7 @@ struct SubdiagnosticEagerCorrect {\n // after the `span_suggestion` call - which breaks eager translation.\n \n #[derive(Subdiagnostic)]\n-#[suggestion(use_instead, applicability = \"machine-applicable\", code = \"{correct}\")]\n+#[suggestion(no_crate_example, applicability = \"machine-applicable\", code = \"{correct}\")]\n pub(crate) struct SubdiagnosticWithSuggestion {\n     #[primary_span]\n     span: Span,\n@@ -740,70 +742,70 @@ pub(crate) struct SubdiagnosticWithSuggestion {\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n     sub: SubdiagnosticWithSuggestion,\n }\n \n /// with a doc comment on the type..\n #[derive(Diagnostic)]\n-#[diag(compiletest_example, code = \"E0123\")]\n+#[diag(no_crate_example, code = \"E0123\")]\n struct WithDocComment {\n     /// ..and the field\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionsGood {\n     #[suggestion(code(\"foo\", \"bar\"))]\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionsSingleItem {\n     #[suggestion(code(\"foo\"))]\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionsNoItem {\n     #[suggestion(code())]\n     //~^ ERROR expected at least one string literal for `code(...)`\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionsInvalidItem {\n     #[suggestion(code(foo))]\n     //~^ ERROR `code(...)` must contain only string literals\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionsInvalidLiteral {\n     #[suggestion(code = 3)]\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionStyleGood {\n     #[suggestion(code = \"\", style = \"hidden\")]\n     sub: Span,\n }\n \n #[derive(Diagnostic)]\n-#[diag(compiletest_example)]\n+#[diag(no_crate_example)]\n struct SuggestionOnVec {\n-    #[suggestion(suggestion, code = \"\")]\n+    #[suggestion(no_crate_suggestion, code = \"\")]\n     //~^ ERROR `#[suggestion(...)]` is not a valid attribute\n     sub: Vec<Span>,\n }"}, {"sha": "fc0cd8419e4406abb5aed3967b50d783fc5e905e", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 169, "deletions": 169, "changes": 338, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,41 +1,41 @@\n error: unsupported type attribute for diagnostic derive enum\n-  --> $DIR/diagnostic-derive.rs:39:1\n+  --> $DIR/diagnostic-derive.rs:41:1\n    |\n-LL | #[diag(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:42:5\n+  --> $DIR/diagnostic-derive.rs:44:5\n    |\n LL |     Foo,\n    |     ^^^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:44:5\n+  --> $DIR/diagnostic-derive.rs:46:5\n    |\n LL |     Bar,\n    |     ^^^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:50:1\n+  --> $DIR/diagnostic-derive.rs:52:1\n    |\n LL | #[diag = \"E0123\"]\n    | ^^^^^^^^^^^^^^^^^\n \n error: `#[nonsense(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:55:1\n+  --> $DIR/diagnostic-derive.rs:57:1\n    |\n-LL | #[nonsense(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[nonsense(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:55:1\n+  --> $DIR/diagnostic-derive.rs:57:1\n    |\n-LL | / #[nonsense(compiletest_example, code = \"E0123\")]\n+LL | / #[nonsense(no_crate_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -45,15 +45,15 @@ LL | | struct InvalidStructAttr {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(\"...\")]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:62:8\n+  --> $DIR/diagnostic-derive.rs:64:8\n    |\n LL | #[diag(\"E0123\")]\n    |        ^^^^^^^\n    |\n    = help: a diagnostic slug is required as the first argument\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:62:1\n+  --> $DIR/diagnostic-derive.rs:64:1\n    |\n LL | / #[diag(\"E0123\")]\n LL | |\n@@ -64,15 +64,15 @@ LL | | struct InvalidLitNestedAttr {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:73:8\n+  --> $DIR/diagnostic-derive.rs:75:8\n    |\n LL | #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug is required as the first argument\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:73:1\n+  --> $DIR/diagnostic-derive.rs:75:1\n    |\n LL | / #[diag(nonsense(\"foo\"), code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -83,23 +83,23 @@ LL | | struct InvalidNestedStructAttr1 {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:79:8\n+  --> $DIR/diagnostic-derive.rs:81:8\n    |\n LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:79:42\n+  --> $DIR/diagnostic-derive.rs:81:42\n    |\n LL | #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n    |                                          ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:79:1\n+  --> $DIR/diagnostic-derive.rs:81:1\n    |\n LL | / #[diag(nonsense = \"...\", code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -111,21 +111,21 @@ LL | | struct InvalidNestedStructAttr2 {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:86:8\n+  --> $DIR/diagnostic-derive.rs:88:8\n    |\n LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |        ^^^^^^^^^^^^\n \n error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:86:38\n+  --> $DIR/diagnostic-derive.rs:88:38\n    |\n LL | #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n    |                                      ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:86:1\n+  --> $DIR/diagnostic-derive.rs:88:1\n    |\n LL | / #[diag(nonsense = 4, code = \"E0123\", slug = \"foo\")]\n LL | |\n@@ -137,73 +137,73 @@ LL | | struct InvalidNestedStructAttr3 {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[diag(slug = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:93:45\n+  --> $DIR/diagnostic-derive.rs:95:42\n    |\n-LL | #[diag(compiletest_example, code = \"E0123\", slug = \"foo\")]\n-   |                                             ^^^^^^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0123\", slug = \"foo\")]\n+   |                                          ^^^^^^^^^^^^\n    |\n    = help: only `code` is a valid nested attributes following the slug\n \n error: `#[suggestion = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:100:5\n+  --> $DIR/diagnostic-derive.rs:102:5\n    |\n LL |     #[suggestion = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:107:8\n+  --> $DIR/diagnostic-derive.rs:109:8\n    |\n-LL | #[diag(compiletest_example, code = \"E0456\")]\n-   |        ^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0456\")]\n+   |        ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:106:8\n+  --> $DIR/diagnostic-derive.rs:108:8\n    |\n-LL | #[diag(compiletest_example, code = \"E0123\")]\n-   |        ^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0123\")]\n+   |        ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:107:36\n+  --> $DIR/diagnostic-derive.rs:109:33\n    |\n-LL | #[diag(compiletest_example, code = \"E0456\")]\n-   |                                    ^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0456\")]\n+   |                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:106:36\n+  --> $DIR/diagnostic-derive.rs:108:33\n    |\n-LL | #[diag(compiletest_example, code = \"E0123\")]\n-   |                                    ^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0123\")]\n+   |                                 ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:113:52\n+  --> $DIR/diagnostic-derive.rs:115:49\n    |\n-LL | #[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n-   |                                                    ^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0456\", code = \"E0457\")]\n+   |                                                 ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:113:36\n+  --> $DIR/diagnostic-derive.rs:115:33\n    |\n-LL | #[diag(compiletest_example, code = \"E0456\", code = \"E0457\")]\n-   |                                    ^^^^^^^\n+LL | #[diag(no_crate_example, code = \"E0456\", code = \"E0457\")]\n+   |                                 ^^^^^^^\n \n-error: `#[diag(compiletest_example)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:118:29\n+error: `#[diag(no_crate::example)]` is not a valid attribute\n+  --> $DIR/diagnostic-derive.rs:120:26\n    |\n-LL | #[diag(compiletest_example, compiletest_example, code = \"E0456\")]\n-   |                             ^^^^^^^^^^^^^^^^^^^\n+LL | #[diag(no_crate_example, no_crate::example, code = \"E0456\")]\n+   |                          ^^^^^^^^^^^^^^^^^\n    |\n    = help: diagnostic slug must be the first argument\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:123:1\n+  --> $DIR/diagnostic-derive.rs:125:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:126:1\n+  --> $DIR/diagnostic-derive.rs:128:1\n    |\n LL | / #[diag(code = \"E0456\")]\n LL | |\n@@ -213,31 +213,31 @@ LL | | struct SlugNotProvided {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:137:5\n+  --> $DIR/diagnostic-derive.rs:139:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:145:5\n+  --> $DIR/diagnostic-derive.rs:147:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:162:5\n+  --> $DIR/diagnostic-derive.rs:164:5\n    |\n-LL |     #[label(label)]\n-   |     ^^^^^^^^^^^^^^^\n+LL |     #[label(no_crate_label)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:170:37\n+  --> $DIR/diagnostic-derive.rs:172:46\n    |\n-LL |     #[suggestion(suggestion, code = \"{name}\")]\n-   |                                     ^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"{name}\")]\n+   |                                              ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:175:10\n+  --> $DIR/diagnostic-derive.rs:177:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ expected `'}'` in format string\n@@ -246,7 +246,7 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:185:10\n+  --> $DIR/diagnostic-derive.rs:187:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ unmatched `}` in format string\n@@ -255,141 +255,141 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:205:5\n+  --> $DIR/diagnostic-derive.rs:207:5\n    |\n-LL |     #[label(label)]\n-   |     ^^^^^^^^^^^^^^^\n+LL |     #[label(no_crate_label)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:224:5\n+  --> $DIR/diagnostic-derive.rs:226:5\n    |\n-LL |     #[suggestion(suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:232:18\n+  --> $DIR/diagnostic-derive.rs:234:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:232:5\n+  --> $DIR/diagnostic-derive.rs:234:5\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:241:18\n+  --> $DIR/diagnostic-derive.rs:243:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `style`, `code` and `applicability` are valid nested attributes\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:241:5\n+  --> $DIR/diagnostic-derive.rs:243:5\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:264:5\n+  --> $DIR/diagnostic-derive.rs:266:5\n    |\n-LL | /     #[suggestion(suggestion, code = \"This is suggested code\")]\n+LL | /     #[suggestion(no_crate_suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: Applicability,\n    | |_____________________________^\n    |\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:280:24\n+  --> $DIR/diagnostic-derive.rs:282:24\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                        ^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:280:18\n+  --> $DIR/diagnostic-derive.rs:282:18\n    |\n LL |     suggestion: (Span, Span, Applicability),\n    |                  ^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:288:33\n+  --> $DIR/diagnostic-derive.rs:290:33\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                                 ^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:288:18\n+  --> $DIR/diagnostic-derive.rs:290:18\n    |\n LL |     suggestion: (Applicability, Applicability, Span),\n    |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:295:5\n+  --> $DIR/diagnostic-derive.rs:297:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:446:44\n+  --> $DIR/diagnostic-derive.rs:448:53\n    |\n-LL |     #[suggestion(suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n-   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:448:24\n+  --> $DIR/diagnostic-derive.rs:450:24\n    |\n LL |     suggestion: (Span, Applicability),\n    |                        ^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:454:44\n+  --> $DIR/diagnostic-derive.rs:456:53\n    |\n-LL |     #[suggestion(suggestion, code = \"...\", applicability = \"batman\")]\n-   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"...\", applicability = \"batman\")]\n+   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(foo)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:517:20\n+  --> $DIR/diagnostic-derive.rs:519:29\n    |\n-LL |     #[label(label, foo)]\n-   |                    ^^^\n+LL |     #[label(no_crate_label, foo)]\n+   |                             ^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[label(foo = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:525:20\n+  --> $DIR/diagnostic-derive.rs:527:29\n    |\n-LL |     #[label(label, foo = \"...\")]\n-   |                    ^^^^^^^^^^^\n+LL |     #[label(no_crate_label, foo = \"...\")]\n+   |                             ^^^^^^^^^^^\n \n error: `#[label(foo(...))]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:533:20\n+  --> $DIR/diagnostic-derive.rs:535:29\n    |\n-LL |     #[label(label, foo(\"...\"))]\n-   |                    ^^^^^^^^^^\n+LL |     #[label(no_crate_label, foo(\"...\"))]\n+   |                             ^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:545:5\n+  --> $DIR/diagnostic-derive.rs:547:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: the `primary_span` field attribute is not valid for lint diagnostics\n \n error: `#[error(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:567:1\n    |\n-LL | #[error(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[error(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:565:1\n+  --> $DIR/diagnostic-derive.rs:567:1\n    |\n-LL | / #[error(compiletest_example, code = \"E0123\")]\n+LL | / #[error(no_crate_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -399,15 +399,15 @@ LL | | struct ErrorAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[warn_(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:574:1\n    |\n-LL | #[warn_(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[warn_(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:572:1\n+  --> $DIR/diagnostic-derive.rs:574:1\n    |\n-LL | / #[warn_(compiletest_example, code = \"E0123\")]\n+LL | / #[warn_(no_crate_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -417,15 +417,15 @@ LL | | struct WarnAttribute {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:581:1\n    |\n-LL | #[lint(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:579:1\n+  --> $DIR/diagnostic-derive.rs:581:1\n    |\n-LL | / #[lint(compiletest_example, code = \"E0123\")]\n+LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -435,21 +435,21 @@ LL | | struct LintAttributeOnSessionDiag {}\n    = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(hir_analysis_example_error)]`\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:588:1\n    |\n-LL | #[lint(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[lint(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:588:1\n    |\n-LL | #[lint(compiletest_example, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[lint(no_crate_example, code = \"E0123\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:586:1\n+  --> $DIR/diagnostic-derive.rs:588:1\n    |\n-LL | / #[lint(compiletest_example, code = \"E0123\")]\n+LL | / #[lint(no_crate_example, code = \"E0123\")]\n LL | |\n LL | |\n LL | |\n@@ -460,207 +460,207 @@ LL | | struct LintAttributeOnLintDiag {}\n    = help: specify the slug as the first argument to the attribute, such as `#[diag(compiletest_example)]`\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:596:44\n+  --> $DIR/diagnostic-derive.rs:598:53\n    |\n-LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n-   |                                            ^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n+   |                                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:596:30\n+  --> $DIR/diagnostic-derive.rs:598:39\n    |\n-LL |     #[suggestion(suggestion, code = \"...\", code = \",,,\")]\n-   |                              ^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"...\", code = \",,,\")]\n+   |                                       ^^^^^^^^^^^^\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:605:24\n+  --> $DIR/diagnostic-derive.rs:607:24\n    |\n LL |     suggestion: (Span, usize),\n    |                        ^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: wrong types for suggestion\n-  --> $DIR/diagnostic-derive.rs:613:17\n+  --> $DIR/diagnostic-derive.rs:615:17\n    |\n LL |     suggestion: (Span,),\n    |                 ^^^^^^^\n    |\n    = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/diagnostic-derive.rs:620:5\n+  --> $DIR/diagnostic-derive.rs:622:5\n    |\n-LL |     #[suggestion(suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:627:1\n+  --> $DIR/diagnostic-derive.rs:629:1\n    |\n-LL | #[multipart_suggestion(suggestion)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[multipart_suggestion(no_crate_suggestion)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:630:1\n+  --> $DIR/diagnostic-derive.rs:632:1\n    |\n LL | #[multipart_suggestion()]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[multipart_suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:634:5\n+  --> $DIR/diagnostic-derive.rs:636:5\n    |\n-LL |     #[multipart_suggestion(suggestion)]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[multipart_suggestion(no_crate_suggestion)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider creating a `Subdiagnostic` instead\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:642:1\n+  --> $DIR/diagnostic-derive.rs:644:1\n    |\n-LL | #[suggestion(suggestion, code = \"...\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_suggestion, code = \"...\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[label]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:651:1\n+  --> $DIR/diagnostic-derive.rs:653:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n    |\n    = help: `#[label]` and `#[suggestion]` can only be applied to fields\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:685:5\n+  --> $DIR/diagnostic-derive.rs:687:5\n    |\n LL |     #[subdiagnostic(bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:693:5\n+  --> $DIR/diagnostic-derive.rs:695:5\n    |\n LL |     #[subdiagnostic = \"bad\"]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:701:5\n+  --> $DIR/diagnostic-derive.rs:703:5\n    |\n LL |     #[subdiagnostic(bad, bad)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:709:5\n+  --> $DIR/diagnostic-derive.rs:711:5\n    |\n LL |     #[subdiagnostic(\"bad\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `eager` is the only supported nested attribute for `subdiagnostic`\n \n error: `#[subdiagnostic(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:717:5\n+  --> $DIR/diagnostic-derive.rs:719:5\n    |\n LL |     #[subdiagnostic(eager)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: eager subdiagnostics are not supported on lints\n \n error: expected at least one string literal for `code(...)`\n-  --> $DIR/diagnostic-derive.rs:775:18\n+  --> $DIR/diagnostic-derive.rs:777:18\n    |\n LL |     #[suggestion(code())]\n    |                  ^^^^^^\n \n error: `code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:783:23\n+  --> $DIR/diagnostic-derive.rs:785:23\n    |\n LL |     #[suggestion(code(foo))]\n    |                       ^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/diagnostic-derive.rs:791:18\n+  --> $DIR/diagnostic-derive.rs:793:18\n    |\n LL |     #[suggestion(code = 3)]\n    |                  ^^^^^^^^\n \n error: `#[suggestion(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:806:5\n+  --> $DIR/diagnostic-derive.rs:808:5\n    |\n-LL |     #[suggestion(suggestion, code = \"\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[suggestion(no_crate_suggestion, code = \"\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[suggestion(...)]` applied to `Vec` field is ambiguous\n    = help: to show a suggestion consisting of multiple parts, use a `Subdiagnostic` annotated with `#[multipart_suggestion(...)]`\n    = help: to show a variable set of suggestions, use a `Vec` of `Subdiagnostic`s annotated with `#[suggestion(...)]`\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:55:3\n+  --> $DIR/diagnostic-derive.rs:57:3\n    |\n-LL | #[nonsense(compiletest_example, code = \"E0123\")]\n+LL | #[nonsense(no_crate_example, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:145:7\n+  --> $DIR/diagnostic-derive.rs:147:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n \n error: cannot find attribute `error` in this scope\n-  --> $DIR/diagnostic-derive.rs:565:3\n+  --> $DIR/diagnostic-derive.rs:567:3\n    |\n-LL | #[error(compiletest_example, code = \"E0123\")]\n+LL | #[error(no_crate_example, code = \"E0123\")]\n    |   ^^^^^\n \n error: cannot find attribute `warn_` in this scope\n-  --> $DIR/diagnostic-derive.rs:572:3\n+  --> $DIR/diagnostic-derive.rs:574:3\n    |\n-LL | #[warn_(compiletest_example, code = \"E0123\")]\n+LL | #[warn_(no_crate_example, code = \"E0123\")]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `warn`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:579:3\n+  --> $DIR/diagnostic-derive.rs:581:3\n    |\n-LL | #[lint(compiletest_example, code = \"E0123\")]\n+LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `lint` in this scope\n-  --> $DIR/diagnostic-derive.rs:586:3\n+  --> $DIR/diagnostic-derive.rs:588:3\n    |\n-LL | #[lint(compiletest_example, code = \"E0123\")]\n+LL | #[lint(no_crate_example, code = \"E0123\")]\n    |   ^^^^ help: a built-in attribute with a similar name exists: `link`\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:627:3\n+  --> $DIR/diagnostic-derive.rs:629:3\n    |\n-LL | #[multipart_suggestion(suggestion)]\n+LL | #[multipart_suggestion(no_crate_suggestion)]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:630:3\n+  --> $DIR/diagnostic-derive.rs:632:3\n    |\n LL | #[multipart_suggestion()]\n    |   ^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find attribute `multipart_suggestion` in this scope\n-  --> $DIR/diagnostic-derive.rs:634:7\n+  --> $DIR/diagnostic-derive.rs:636:7\n    |\n-LL |     #[multipart_suggestion(suggestion)]\n+LL |     #[multipart_suggestion(no_crate_suggestion)]\n    |       ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0425]: cannot find value `nonsense` in module `rustc_errors::fluent`\n-  --> $DIR/diagnostic-derive.rs:68:8\n+error[E0425]: cannot find value `nonsense` in module `crate::fluent_generated`\n+  --> $DIR/diagnostic-derive.rs:70:8\n    |\n LL | #[diag(nonsense, code = \"E0123\")]\n-   |        ^^^^^^^^ not found in `rustc_errors::fluent`\n+   |        ^^^^^^^^ not found in `crate::fluent_generated`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:339:10\n+  --> $DIR/diagnostic-derive.rs:341:10\n    |\n LL | #[derive(Diagnostic)]\n    |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`"}, {"sha": "cb2d476d815d245dc75f867b24c10652ac933996", "filename": "tests/ui-fulldeps/session-diagnostic/example.ftl", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fexample.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fexample.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fexample.ftl?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -0,0 +1,5 @@\n+no_crate_example = this is an example message used in testing\n+    .note = with a note\n+    .help = with a help\n+    .suggestion = with a suggestion\n+    .label = with a label"}, {"sha": "c882f7792d5bdfd26a60d4c0f6a178dd11de8aad", "filename": "tests/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 77, "deletions": 75, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -15,12 +15,14 @@ extern crate rustc_macros;\n extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc_errors::Applicability;\n-use rustc_macros::Subdiagnostic;\n+use rustc_errors::{Applicability, DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_macros::{fluent_messages, Subdiagnostic};\n use rustc_span::Span;\n \n+fluent_messages! { \"./example.ftl\" }\n+\n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct A {\n     #[primary_span]\n     span: Span,\n@@ -29,13 +31,13 @@ struct A {\n \n #[derive(Subdiagnostic)]\n enum B {\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     A {\n         #[primary_span]\n         span: Span,\n         var: String,\n     },\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -44,7 +46,7 @@ enum B {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n //~^ ERROR label without `#[primary_span]` field\n struct C {\n     var: String,\n@@ -120,8 +122,8 @@ struct K {\n \n #[derive(Subdiagnostic)]\n #[label(slug)]\n-//~^ ERROR cannot find value `slug` in module `rustc_errors::fluent`\n-//~^^ NOTE not found in `rustc_errors::fluent`\n+//~^ ERROR cannot find value `slug` in module `crate::fluent_generated`\n+//~^^ NOTE not found in `crate::fluent_generated`\n struct L {\n     #[primary_span]\n     span: Span,\n@@ -138,7 +140,7 @@ struct M {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren, code = \"...\")]\n+#[label(no_crate_example, code = \"...\")]\n //~^ ERROR `#[label(code = ...)]` is not a valid attribute\n struct N {\n     #[primary_span]\n@@ -147,7 +149,7 @@ struct N {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren, applicability = \"machine-applicable\")]\n+#[label(no_crate_example, applicability = \"machine-applicable\")]\n //~^ ERROR `#[label(applicability = ...)]` is not a valid attribute\n struct O {\n     #[primary_span]\n@@ -160,7 +162,7 @@ struct O {\n //~^ ERROR cannot find attribute `foo` in this scope\n //~^^ ERROR unsupported type attribute for subdiagnostic enum\n enum P {\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -230,7 +232,7 @@ enum U {\n \n #[derive(Subdiagnostic)]\n enum V {\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -244,7 +246,7 @@ enum V {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n //~^ ERROR label without `#[primary_span]` field\n struct W {\n     #[primary_span]\n@@ -253,7 +255,7 @@ struct W {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct X {\n     #[primary_span]\n     span: Span,\n@@ -263,7 +265,7 @@ struct X {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct Y {\n     #[primary_span]\n     span: Span,\n@@ -274,7 +276,7 @@ struct Y {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct Z {\n     #[primary_span]\n     span: Span,\n@@ -285,7 +287,7 @@ struct Z {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct AA {\n     #[primary_span]\n     span: Span,\n@@ -296,7 +298,7 @@ struct AA {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct AB {\n     #[primary_span]\n     span: Span,\n@@ -312,23 +314,23 @@ union AC {\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n+#[label(no_crate_example)]\n struct AD {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren, parse_add_paren)]\n-//~^ ERROR `#[label(parse_add_paren)]` is not a valid attribute\n+#[label(no_crate_example, no_crate::example)]\n+//~^ ERROR `#[label(no_crate::example)]` is not a valid attribute\n struct AE {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct AF {\n     #[primary_span]\n     //~^ NOTE previously specified here\n@@ -346,7 +348,7 @@ struct AG {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n struct AH {\n     #[primary_span]\n     span: Span,\n@@ -357,15 +359,15 @@ struct AH {\n \n #[derive(Subdiagnostic)]\n enum AI {\n-    #[suggestion(parse_add_paren, code = \"...\")]\n+    #[suggestion(no_crate_example, code = \"...\")]\n     A {\n         #[primary_span]\n         span: Span,\n         #[applicability]\n         applicability: Applicability,\n         var: String,\n     },\n-    #[suggestion(parse_add_paren, code = \"...\")]\n+    #[suggestion(no_crate_example, code = \"...\")]\n     B {\n         #[primary_span]\n         span: Span,\n@@ -376,7 +378,7 @@ enum AI {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\", code = \"...\")]\n //~^ ERROR specified multiple times\n //~^^ NOTE previously specified here\n struct AJ {\n@@ -387,7 +389,7 @@ struct AJ {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n struct AK {\n     #[primary_span]\n     span: Span,\n@@ -400,7 +402,7 @@ struct AK {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n struct AL {\n     #[primary_span]\n     span: Span,\n@@ -410,14 +412,14 @@ struct AL {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n struct AM {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren)]\n+#[suggestion(no_crate_example)]\n //~^ ERROR suggestion without `code = \"...\"`\n struct AN {\n     #[primary_span]\n@@ -427,32 +429,32 @@ struct AN {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\", applicability = \"foo\")]\n+#[suggestion(no_crate_example, code = \"...\", applicability = \"foo\")]\n //~^ ERROR invalid applicability\n struct AO {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[help(parse_add_paren)]\n+#[help(no_crate_example)]\n struct AP {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[note(parse_add_paren)]\n+#[note(no_crate_example)]\n struct AQ;\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct AR {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+#[suggestion(no_crate_example, code = \"...\", applicability = \"machine-applicable\")]\n struct AS {\n     #[primary_span]\n     span: Span,\n@@ -462,7 +464,7 @@ struct AS {\n #[label]\n //~^ ERROR unsupported type attribute for subdiagnostic enum\n enum AT {\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -471,15 +473,15 @@ enum AT {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n struct AU {\n     #[primary_span]\n     span: Span,\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+#[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n //~^ ERROR `var` doesn't refer to a field on this type\n struct AV {\n     #[primary_span]\n@@ -488,7 +490,7 @@ struct AV {\n \n #[derive(Subdiagnostic)]\n enum AW {\n-    #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n     A {\n         #[primary_span]\n         span: Span,\n@@ -498,7 +500,7 @@ enum AW {\n \n #[derive(Subdiagnostic)]\n enum AX {\n-    #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n+    #[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n     //~^ ERROR `var` doesn't refer to a field on this type\n     A {\n         #[primary_span]\n@@ -507,18 +509,18 @@ enum AX {\n }\n \n #[derive(Subdiagnostic)]\n-#[warning(parse_add_paren)]\n+#[warning(no_crate_example)]\n struct AY {}\n \n #[derive(Subdiagnostic)]\n-#[warning(parse_add_paren)]\n+#[warning(no_crate_example)]\n struct AZ {\n     #[primary_span]\n     span: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"...\")]\n+#[suggestion(no_crate_example, code = \"...\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct BA {\n     #[suggestion_part]\n@@ -533,31 +535,31 @@ struct BA {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, code = \"...\", applicability = \"machine-applicable\")]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n //~| ERROR `#[multipart_suggestion(code = ...)]` is not a valid attribute\n struct BBa {\n     var: String,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BBb {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BBc {\n     #[suggestion_part()]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n     span1: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n //~^ ERROR multipart suggestion without any `#[suggestion_part(...)]` fields\n struct BC {\n     #[primary_span]\n@@ -566,7 +568,7 @@ struct BC {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BD {\n     #[suggestion_part]\n     //~^ ERROR `#[suggestion_part(...)]` attribute without `code = \"...\"`\n@@ -586,7 +588,7 @@ struct BD {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BE {\n     #[suggestion_part(code = \"...\", code = \",,,\")]\n     //~^ ERROR specified multiple times\n@@ -595,7 +597,7 @@ struct BE {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BF {\n     #[suggestion_part(code = \"(\")]\n     first: Span,\n@@ -604,7 +606,7 @@ struct BF {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BG {\n     #[applicability]\n     appl: Applicability,\n@@ -615,7 +617,7 @@ struct BG {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BH {\n     #[applicability]\n     //~^ ERROR `#[applicability]` has no effect\n@@ -627,14 +629,14 @@ struct BH {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren, applicability = \"machine-applicable\")]\n+#[multipart_suggestion(no_crate_example, applicability = \"machine-applicable\")]\n struct BI {\n     #[suggestion_part(code = \"\")]\n     spans: Vec<Span>,\n }\n \n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct BJ {\n     #[primary_span]\n     span: Span,\n@@ -643,7 +645,7 @@ struct BJ {\n \n /// with a doc comment on the type..\n #[derive(Subdiagnostic)]\n-#[label(parse_add_paren)]\n+#[label(no_crate_example)]\n struct BK {\n     /// ..and the field\n     #[primary_span]\n@@ -654,7 +656,7 @@ struct BK {\n #[derive(Subdiagnostic)]\n enum BL {\n     /// ..and the variant..\n-    #[label(parse_add_paren)]\n+    #[label(no_crate_example)]\n     Foo {\n         /// ..and the field\n         #[primary_span]\n@@ -663,7 +665,7 @@ enum BL {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BM {\n     #[suggestion_part(code(\"foo\"))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -672,7 +674,7 @@ struct BM {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BN {\n     #[suggestion_part(code(\"foo\", \"bar\"))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -681,7 +683,7 @@ struct BN {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BO {\n     #[suggestion_part(code(3))]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -690,7 +692,7 @@ struct BO {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BP {\n     #[suggestion_part(code())]\n     //~^ ERROR expected exactly one string literal for `code = ...`\n@@ -699,7 +701,7 @@ struct BP {\n }\n \n #[derive(Subdiagnostic)]\n-#[multipart_suggestion(parse_add_paren)]\n+#[multipart_suggestion(no_crate_example)]\n struct BQ {\n     #[suggestion_part(code = 3)]\n     //~^ ERROR `code = \"...\"`/`code(...)` must contain only string literals\n@@ -708,42 +710,42 @@ struct BQ {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\")]\n+#[suggestion(no_crate_example, code = \"\")]\n struct SuggestionStyleDefault {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"short\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"short\")]\n struct SuggestionStyleShort {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"hidden\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"hidden\")]\n struct SuggestionStyleHidden {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"verbose\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"verbose\")]\n struct SuggestionStyleVerbose {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"tool-only\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"tool-only\")]\n struct SuggestionStyleToolOnly {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"hidden\", style = \"normal\")]\n //~^ ERROR specified multiple times\n //~| NOTE previously specified here\n struct SuggestionStyleTwice {\n@@ -752,55 +754,55 @@ struct SuggestionStyleTwice {\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_hidden(parse_add_paren, code = \"\")]\n+#[suggestion_hidden(no_crate_example, code = \"\")]\n //~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n struct SuggestionStyleOldSyntax {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion_hidden(parse_add_paren, code = \"\", style = \"normal\")]\n+#[suggestion_hidden(no_crate_example, code = \"\", style = \"normal\")]\n //~^ ERROR #[suggestion_hidden(...)]` is not a valid attribute\n struct SuggestionStyleOldAndNewSyntax {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = \"foo\")]\n+#[suggestion(no_crate_example, code = \"\", style = \"foo\")]\n //~^ ERROR invalid suggestion style\n struct SuggestionStyleInvalid1 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style = 42)]\n+#[suggestion(no_crate_example, code = \"\", style = 42)]\n //~^ ERROR `#[suggestion(style = ...)]` is not a valid attribute\n struct SuggestionStyleInvalid2 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style)]\n+#[suggestion(no_crate_example, code = \"\", style)]\n //~^ ERROR `#[suggestion(style)]` is not a valid attribute\n struct SuggestionStyleInvalid3 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\", style(\"foo\"))]\n+#[suggestion(no_crate_example, code = \"\", style(\"foo\"))]\n //~^ ERROR `#[suggestion(style(...))]` is not a valid attribute\n struct SuggestionStyleInvalid4 {\n     #[primary_span]\n     sub: Span,\n }\n \n #[derive(Subdiagnostic)]\n-#[suggestion(parse_add_paren, code = \"\")]\n+#[suggestion(no_crate_example, code = \"\")]\n //~^ ERROR suggestion without `#[primary_span]` field\n struct PrimarySpanOnVec {\n     #[primary_span]"}, {"sha": "343134af6bc14340ece0453fe2959fc6b20b580c", "filename": "tests/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 132, "deletions": 132, "changes": 264, "blob_url": "https://github.com/rust-lang/rust/blob/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1fcf611175e695c35c6cc0537d710277c1a5c6f/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=d1fcf611175e695c35c6cc0537d710277c1a5c6f", "patch": "@@ -1,149 +1,149 @@\n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:47:1\n+  --> $DIR/subdiagnostic-derive.rs:49:1\n    |\n-LL | / #[label(parse_add_paren)]\n+LL | / #[label(no_crate_example)]\n LL | |\n LL | | struct C {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:54:1\n+  --> $DIR/subdiagnostic-derive.rs:56:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `#[foo]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:63:1\n+  --> $DIR/subdiagnostic-derive.rs:65:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:73:1\n+  --> $DIR/subdiagnostic-derive.rs:75:1\n    |\n LL | #[label = \"...\"]\n    | ^^^^^^^^^^^^^^^^\n \n error: `#[label(bug = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:82:9\n+  --> $DIR/subdiagnostic-derive.rs:84:9\n    |\n LL | #[label(bug = \"...\")]\n    |         ^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:82:1\n+  --> $DIR/subdiagnostic-derive.rs:84:1\n    |\n LL | #[label(bug = \"...\")]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(\"...\")]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:92:9\n+  --> $DIR/subdiagnostic-derive.rs:94:9\n    |\n LL | #[label(\"...\")]\n    |         ^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:92:1\n+  --> $DIR/subdiagnostic-derive.rs:94:1\n    |\n LL | #[label(\"...\")]\n    | ^^^^^^^^^^^^^^^\n \n error: `#[label(slug = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:102:9\n+  --> $DIR/subdiagnostic-derive.rs:104:9\n    |\n LL | #[label(slug = 4)]\n    |         ^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:102:1\n+  --> $DIR/subdiagnostic-derive.rs:104:1\n    |\n LL | #[label(slug = 4)]\n    | ^^^^^^^^^^^^^^^^^^\n \n error: `#[label(slug(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:112:9\n+  --> $DIR/subdiagnostic-derive.rs:114:9\n    |\n LL | #[label(slug(\"...\"))]\n    |         ^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:112:1\n+  --> $DIR/subdiagnostic-derive.rs:114:1\n    |\n LL | #[label(slug(\"...\"))]\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:132:1\n+  --> $DIR/subdiagnostic-derive.rs:134:1\n    |\n LL | #[label()]\n    | ^^^^^^^^^^\n \n error: `#[label(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:141:26\n+  --> $DIR/subdiagnostic-derive.rs:143:27\n    |\n-LL | #[label(parse_add_paren, code = \"...\")]\n-   |                          ^^^^^^^^^^^^\n+LL | #[label(no_crate_example, code = \"...\")]\n+   |                           ^^^^^^^^^^^^\n \n error: `#[label(applicability = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:150:26\n+  --> $DIR/subdiagnostic-derive.rs:152:27\n    |\n-LL | #[label(parse_add_paren, applicability = \"machine-applicable\")]\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[label(no_crate_example, applicability = \"machine-applicable\")]\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:159:1\n+  --> $DIR/subdiagnostic-derive.rs:161:1\n    |\n LL | #[foo]\n    | ^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:173:5\n+  --> $DIR/subdiagnostic-derive.rs:175:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:185:5\n+  --> $DIR/subdiagnostic-derive.rs:187:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:197:5\n+  --> $DIR/subdiagnostic-derive.rs:199:5\n    |\n LL |     #[bar = 4]\n    |     ^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:209:5\n+  --> $DIR/subdiagnostic-derive.rs:211:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n \n error: `#[label(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:221:13\n+  --> $DIR/subdiagnostic-derive.rs:223:13\n    |\n LL |     #[label(code = \"...\")]\n    |             ^^^^^^^^^^^^\n \n error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n-  --> $DIR/subdiagnostic-derive.rs:221:5\n+  --> $DIR/subdiagnostic-derive.rs:223:5\n    |\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:250:5\n+  --> $DIR/subdiagnostic-derive.rs:252:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:247:1\n+  --> $DIR/subdiagnostic-derive.rs:249:1\n    |\n-LL | / #[label(parse_add_paren)]\n+LL | / #[label(no_crate_example)]\n LL | |\n LL | | struct W {\n LL | |     #[primary_span]\n@@ -153,35 +153,35 @@ LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:260:5\n+  --> $DIR/subdiagnostic-derive.rs:262:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:270:5\n+  --> $DIR/subdiagnostic-derive.rs:272:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:281:5\n+  --> $DIR/subdiagnostic-derive.rs:283:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:292:5\n+  --> $DIR/subdiagnostic-derive.rs:294:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:308:1\n+  --> $DIR/subdiagnostic-derive.rs:310:1\n    |\n LL | / union AC {\n LL | |\n@@ -190,122 +190,122 @@ LL | |     b: u64,\n LL | | }\n    | |_^\n \n-error: `#[label(parse_add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:323:26\n+error: `#[label(no_crate::example)]` is not a valid attribute\n+  --> $DIR/subdiagnostic-derive.rs:325:27\n    |\n-LL | #[label(parse_add_paren, parse_add_paren)]\n-   |                          ^^^^^^^^^^^^^^^\n+LL | #[label(no_crate_example, no_crate::example)]\n+   |                           ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:336:5\n+  --> $DIR/subdiagnostic-derive.rs:338:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:333:5\n+  --> $DIR/subdiagnostic-derive.rs:335:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:342:8\n+  --> $DIR/subdiagnostic-derive.rs:344:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:379:45\n+  --> $DIR/subdiagnostic-derive.rs:381:46\n    |\n-LL | #[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n-   |                                             ^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"...\", code = \"...\")]\n+   |                                              ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:379:31\n+  --> $DIR/subdiagnostic-derive.rs:381:32\n    |\n-LL | #[suggestion(parse_add_paren, code = \"...\", code = \"...\")]\n-   |                               ^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"...\", code = \"...\")]\n+   |                                ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:397:5\n+  --> $DIR/subdiagnostic-derive.rs:399:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:394:5\n+  --> $DIR/subdiagnostic-derive.rs:396:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:407:5\n+  --> $DIR/subdiagnostic-derive.rs:409:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:420:1\n+  --> $DIR/subdiagnostic-derive.rs:422:1\n    |\n-LL | #[suggestion(parse_add_paren)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:430:45\n+  --> $DIR/subdiagnostic-derive.rs:432:46\n    |\n-LL | #[suggestion(parse_add_paren, code = \"...\", applicability = \"foo\")]\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"...\", applicability = \"foo\")]\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:448:1\n+  --> $DIR/subdiagnostic-derive.rs:450:1\n    |\n-LL | / #[suggestion(parse_add_paren, code = \"...\")]\n+LL | / #[suggestion(no_crate_example, code = \"...\")]\n LL | |\n LL | | struct AR {\n LL | |     var: String,\n LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:462:1\n+  --> $DIR/subdiagnostic-derive.rs:464:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:482:38\n+  --> $DIR/subdiagnostic-derive.rs:484:39\n    |\n-LL | #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n-   |                                      ^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:501:42\n+  --> $DIR/subdiagnostic-derive.rs:503:43\n    |\n-LL |     #[suggestion(parse_add_paren, code = \"{var}\", applicability = \"machine-applicable\")]\n-   |                                          ^^^^^^^\n+LL |     #[suggestion(no_crate_example, code = \"{var}\", applicability = \"machine-applicable\")]\n+   |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:524:5\n+  --> $DIR/subdiagnostic-derive.rs:526:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:527:5\n+  --> $DIR/subdiagnostic-derive.rs:529:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:521:1\n+  --> $DIR/subdiagnostic-derive.rs:523:1\n    |\n-LL | / #[suggestion(parse_add_paren, code = \"...\")]\n+LL | / #[suggestion(no_crate_example, code = \"...\")]\n LL | |\n LL | | struct BA {\n LL | |     #[suggestion_part]\n@@ -315,17 +315,17 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:536:41\n+  --> $DIR/subdiagnostic-derive.rs:538:42\n    |\n-LL | #[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n-   |                                         ^^^^^^^^^^^^\n+LL | #[multipart_suggestion(no_crate_example, code = \"...\", applicability = \"machine-applicable\")]\n+   |                                          ^^^^^^^^^^^^\n    |\n    = help: only `style` and `applicability` are valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:536:1\n+  --> $DIR/subdiagnostic-derive.rs:538:1\n    |\n-LL | / #[multipart_suggestion(parse_add_paren, code = \"...\", applicability = \"machine-applicable\")]\n+LL | / #[multipart_suggestion(no_crate_example, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n LL | |\n LL | | struct BBa {\n@@ -334,29 +334,29 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:546:5\n+  --> $DIR/subdiagnostic-derive.rs:548:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:554:5\n+  --> $DIR/subdiagnostic-derive.rs:556:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:563:5\n+  --> $DIR/subdiagnostic-derive.rs:565:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:560:1\n+  --> $DIR/subdiagnostic-derive.rs:562:1\n    |\n-LL | / #[multipart_suggestion(parse_add_paren)]\n+LL | / #[multipart_suggestion(no_crate_example)]\n LL | |\n LL | | struct BC {\n LL | |     #[primary_span]\n@@ -366,143 +366,143 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:571:5\n+  --> $DIR/subdiagnostic-derive.rs:573:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:574:5\n+  --> $DIR/subdiagnostic-derive.rs:576:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:577:23\n+  --> $DIR/subdiagnostic-derive.rs:579:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:580:5\n+  --> $DIR/subdiagnostic-derive.rs:582:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:583:5\n+  --> $DIR/subdiagnostic-derive.rs:585:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:591:37\n+  --> $DIR/subdiagnostic-derive.rs:593:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:591:23\n+  --> $DIR/subdiagnostic-derive.rs:593:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:620:5\n+  --> $DIR/subdiagnostic-derive.rs:622:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:668:23\n+  --> $DIR/subdiagnostic-derive.rs:670:23\n    |\n LL |     #[suggestion_part(code(\"foo\"))]\n    |                       ^^^^^^^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:677:23\n+  --> $DIR/subdiagnostic-derive.rs:679:23\n    |\n LL |     #[suggestion_part(code(\"foo\", \"bar\"))]\n    |                       ^^^^^^^^^^^^^^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:686:23\n+  --> $DIR/subdiagnostic-derive.rs:688:23\n    |\n LL |     #[suggestion_part(code(3))]\n    |                       ^^^^^^^\n \n error: expected exactly one string literal for `code = ...`\n-  --> $DIR/subdiagnostic-derive.rs:695:23\n+  --> $DIR/subdiagnostic-derive.rs:697:23\n    |\n LL |     #[suggestion_part(code())]\n    |                       ^^^^^^\n \n error: `code = \"...\"`/`code(...)` must contain only string literals\n-  --> $DIR/subdiagnostic-derive.rs:704:23\n+  --> $DIR/subdiagnostic-derive.rs:706:23\n    |\n LL |     #[suggestion_part(code = 3)]\n    |                       ^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:746:60\n+  --> $DIR/subdiagnostic-derive.rs:748:61\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                                            ^^^^^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                                             ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:746:42\n+  --> $DIR/subdiagnostic-derive.rs:748:43\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style = \"hidden\", style = \"normal\")]\n-   |                                          ^^^^^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style = \"hidden\", style = \"normal\")]\n+   |                                           ^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_hidden(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:755:1\n+  --> $DIR/subdiagnostic-derive.rs:757:1\n    |\n-LL | #[suggestion_hidden(parse_add_paren, code = \"\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion_hidden(no_crate_example, code = \"\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n \n error: `#[suggestion_hidden(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:763:1\n+  --> $DIR/subdiagnostic-derive.rs:765:1\n    |\n-LL | #[suggestion_hidden(parse_add_paren, code = \"\", style = \"normal\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[suggestion_hidden(no_crate_example, code = \"\", style = \"normal\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: Use `#[suggestion(..., style = \"hidden\")]` instead\n \n error: invalid suggestion style\n-  --> $DIR/subdiagnostic-derive.rs:771:50\n+  --> $DIR/subdiagnostic-derive.rs:773:51\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style = \"foo\")]\n-   |                                                  ^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style = \"foo\")]\n+   |                                                   ^^^^^\n    |\n    = help: valid styles are `normal`, `short`, `hidden`, `verbose` and `tool-only`\n \n error: `#[suggestion(style = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:779:42\n+  --> $DIR/subdiagnostic-derive.rs:781:43\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style = 42)]\n-   |                                          ^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style = 42)]\n+   |                                           ^^^^^^^^^^\n \n error: `#[suggestion(style)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:787:42\n+  --> $DIR/subdiagnostic-derive.rs:789:43\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style)]\n-   |                                          ^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style)]\n+   |                                           ^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: `#[suggestion(style(...))]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:795:42\n+  --> $DIR/subdiagnostic-derive.rs:797:43\n    |\n-LL | #[suggestion(parse_add_paren, code = \"\", style(\"foo\"))]\n-   |                                          ^^^^^^^^^^^^\n+LL | #[suggestion(no_crate_example, code = \"\", style(\"foo\"))]\n+   |                                           ^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:806:5\n+  --> $DIR/subdiagnostic-derive.rs:808:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n@@ -511,9 +511,9 @@ LL |     #[primary_span]\n    = help: to create a suggestion with multiple spans, use `#[multipart_suggestion]` instead\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:803:1\n+  --> $DIR/subdiagnostic-derive.rs:805:1\n    |\n-LL | / #[suggestion(parse_add_paren, code = \"\")]\n+LL | / #[suggestion(no_crate_example, code = \"\")]\n LL | |\n LL | | struct PrimarySpanOnVec {\n LL | |     #[primary_span]\n@@ -523,64 +523,64 @@ LL | | }\n    | |_^\n \n error: cannot find attribute `foo` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:63:3\n+  --> $DIR/subdiagnostic-derive.rs:65:3\n    |\n LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `foo` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:159:3\n+  --> $DIR/subdiagnostic-derive.rs:161:3\n    |\n LL | #[foo]\n    |   ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:173:7\n+  --> $DIR/subdiagnostic-derive.rs:175:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:185:7\n+  --> $DIR/subdiagnostic-derive.rs:187:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:197:7\n+  --> $DIR/subdiagnostic-derive.rs:199:7\n    |\n LL |     #[bar = 4]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:209:7\n+  --> $DIR/subdiagnostic-derive.rs:211:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:270:7\n+  --> $DIR/subdiagnostic-derive.rs:272:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:281:7\n+  --> $DIR/subdiagnostic-derive.rs:283:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:292:7\n+  --> $DIR/subdiagnostic-derive.rs:294:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n \n-error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n-  --> $DIR/subdiagnostic-derive.rs:122:9\n+error[E0425]: cannot find value `slug` in module `crate::fluent_generated`\n+  --> $DIR/subdiagnostic-derive.rs:124:9\n    |\n LL | #[label(slug)]\n-   |         ^^^^ not found in `rustc_errors::fluent`\n+   |         ^^^^ not found in `crate::fluent_generated`\n \n error: aborting due to 81 previous errors\n "}]}