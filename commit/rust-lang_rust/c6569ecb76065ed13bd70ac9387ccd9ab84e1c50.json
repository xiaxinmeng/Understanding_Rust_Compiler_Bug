{"sha": "c6569ecb76065ed13bd70ac9387ccd9ab84e1c50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTY5ZWNiNzYwNjVlZDEzYmQ3MGFjOTM4N2NjZDlhYjg0ZTFjNTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:42Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:02Z"}, "message": "Rollup merge of #59102 - newpavlov:duration_float, r=alexcrichton\n\nConsistent naming for duration_float methods and additional f32 methods\n\n`duration_float` tracking issue: #54361\n\nNew list of methods:\n- `as_secs_f64(&self) -> f64`\n- `as_secs_f32(&self) -> f32`\n- `from_secs_f64(secs: f64) -> Duration`\n- `from_secs_f32(secs: f32) -> Duration`\n- `mul_f64(self, rhs: f64) -> Duration`\n- `mul_f32(self, rhs: f32) -> Duration`\n- `div_f64(self, rhs: f64) -> Duration`\n- `div_f32(self, rhs: f64) -> Duration`\n- `div_duration_f64(self, rhs: Duration) -> f64`\n- `div_duration_f32(self, rhs: Duration) -> f32`\n\nWith [`num_traits::Float`](https://docs.rs/num-traits/0.2.6/num_traits/float/trait.Float.html) we could've reduced number of methods by factor of two, but unfortunately it's not part of `std`.", "tree": {"sha": "4059ec8325e45b60673197476b98d59a387ad3c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4059ec8325e45b60673197476b98d59a387ad3c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCsIACgkQ/vbIBR0O\nATwpeA//Vj+JilLOx0lwOPJTmQcAUr9dKEgRu60DzfVgeJoU47357aWIe+l4aTR6\nVMew0m9Vi7gdRVo9/UlJrmxEmp1o+qlzjx0mjb7C5gf6qD0KScpmMlH9iLsFgYvW\nbXTUDQffxTK3c/Mx/x+2n48U5vtXahyah3tH36CMoJfdtwnxnKlam9+/0YFOmMG6\nJBDHcI/g9poo9ftIm+wiiJNzhmcaMoaH4utoF5axPxWjR4Vh49dn6wSpwlAxdTEK\n7aZEh/hme6JW68mLQDzD3PNyuL3YMtVhhUN2MmtSafYnn5QS8B9miutacnbYMeCo\nUIwL9kSzb2pWX7z/HzbofR006jwwwe2JFNGJNbuOFGrUhZFiJV7sh7rsOJtp1q3y\ntzMecVVE7zsG1k7keG+jnA88bMQ76uJuQDEDvoZxaMSDrsukDe7zSGQkuoXBRvhp\njuOZ/s8AvIhB/Vv2V90vN1z7RBdVuQVVE0Oer09fj3lAkG2Syveivjro5TfiXZkh\noRvI9yUT4K9P6QoukgEtdBG/WjH9bechkxllfDImNnBPVbndATGjDuTl/iiayJMn\neW9AN+PIxigzz8ejpxE/+ivWYn739LW1lxh4CFaewma7NvBPlWHzJZ9pKxgy4GgQ\n6NxB5/nJ7KNOkBTrfxTPaMAr4+c+Y3C0uBUeqQqWyvfZKSpyIcE=\n=62RC\n-----END PGP SIGNATURE-----", "payload": "tree 4059ec8325e45b60673197476b98d59a387ad3c9\nparent d1744728a0166723228676dae5725078ae45406a\nparent 78b248dc4c17581211aaed5c3a449e5b07ebdb52\nauthor kennytm <kennytm@gmail.com> 1552719402 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747202 +0800\n\nRollup merge of #59102 - newpavlov:duration_float, r=alexcrichton\n\nConsistent naming for duration_float methods and additional f32 methods\n\n`duration_float` tracking issue: #54361\n\nNew list of methods:\n- `as_secs_f64(&self) -> f64`\n- `as_secs_f32(&self) -> f32`\n- `from_secs_f64(secs: f64) -> Duration`\n- `from_secs_f32(secs: f32) -> Duration`\n- `mul_f64(self, rhs: f64) -> Duration`\n- `mul_f32(self, rhs: f32) -> Duration`\n- `div_f64(self, rhs: f64) -> Duration`\n- `div_f32(self, rhs: f64) -> Duration`\n- `div_duration_f64(self, rhs: Duration) -> f64`\n- `div_duration_f32(self, rhs: Duration) -> f32`\n\nWith [`num_traits::Float`](https://docs.rs/num-traits/0.2.6/num_traits/float/trait.Float.html) we could've reduced number of methods by factor of two, but unfortunately it's not part of `std`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50", "html_url": "https://github.com/rust-lang/rust/commit/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1744728a0166723228676dae5725078ae45406a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1744728a0166723228676dae5725078ae45406a", "html_url": "https://github.com/rust-lang/rust/commit/d1744728a0166723228676dae5725078ae45406a"}, {"sha": "78b248dc4c17581211aaed5c3a449e5b07ebdb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b248dc4c17581211aaed5c3a449e5b07ebdb52", "html_url": "https://github.com/rust-lang/rust/commit/78b248dc4c17581211aaed5c3a449e5b07ebdb52"}], "stats": {"total": 140, "additions": 129, "deletions": 11}, "files": [{"sha": "ae6d8078fd2366ecb8452cac364b325cf619fae7", "filename": "src/libcore/time.rs", "status": "modified", "additions": 129, "deletions": 11, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6569ecb76065ed13bd70ac9387ccd9ab84e1c50/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=c6569ecb76065ed13bd70ac9387ccd9ab84e1c50", "patch": "@@ -21,7 +21,6 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n const NANOS_PER_MICRO: u32 = 1_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n-const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n \n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n@@ -510,15 +509,34 @@ impl Duration {\n     /// use std::time::Duration;\n     ///\n     /// let dur = Duration::new(2, 700_000_000);\n-    /// assert_eq!(dur.as_float_secs(), 2.7);\n+    /// assert_eq!(dur.as_secs_f64(), 2.7);\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub const fn as_float_secs(&self) -> f64 {\n+    pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n \n-    /// Creates a new `Duration` from the specified number of seconds.\n+    /// Returns the number of seconds contained by this `Duration` as `f32`.\n+    ///\n+    /// The returned value does include the fractional (nanosecond) part of the duration.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.as_secs_f32(), 2.7);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub const fn as_secs_f32(&self) -> f32 {\n+        (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n+    }\n+\n+    /// Creates a new `Duration` from the specified number of seconds represented\n+    /// as `f64`.\n     ///\n     /// # Panics\n     /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n@@ -528,12 +546,14 @@ impl Duration {\n     /// #![feature(duration_float)]\n     /// use std::time::Duration;\n     ///\n-    /// let dur = Duration::from_float_secs(2.7);\n+    /// let dur = Duration::from_secs_f64(2.7);\n     /// assert_eq!(dur, Duration::new(2, 700_000_000));\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub fn from_float_secs(secs: f64) -> Duration {\n+    pub fn from_secs_f64(secs: f64) -> Duration {\n+        const MAX_NANOS_F64: f64 =\n+            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n         let nanos =  secs * (NANOS_PER_SEC as f64);\n         if !nanos.is_finite() {\n             panic!(\"got non-finite value when converting float to duration\");\n@@ -551,6 +571,42 @@ impl Duration {\n         }\n     }\n \n+    /// Creates a new `Duration` from the specified number of seconds represented\n+    /// as `f32`.\n+    ///\n+    /// # Panics\n+    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::from_secs_f32(2.7);\n+    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn from_secs_f32(secs: f32) -> Duration {\n+        const MAX_NANOS_F32: f32 =\n+            ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f32;\n+        let nanos =  secs * (NANOS_PER_SEC as f32);\n+        if !nanos.is_finite() {\n+            panic!(\"got non-finite value when converting float to duration\");\n+        }\n+        if nanos >= MAX_NANOS_F32 {\n+            panic!(\"overflow when converting float to duration\");\n+        }\n+        if nanos < 0.0 {\n+            panic!(\"underflow when converting float to duration\");\n+        }\n+        let nanos =  nanos as u128;\n+        Duration {\n+            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+\n     /// Multiplies `Duration` by `f64`.\n     ///\n     /// # Panics\n@@ -568,7 +624,29 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn mul_f64(self, rhs: f64) -> Duration {\n-        Duration::from_float_secs(rhs * self.as_float_secs())\n+        Duration::from_secs_f64(rhs * self.as_secs_f64())\n+    }\n+\n+    /// Multiplies `Duration` by `f32`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// // note that due to rounding errors result is slightly different\n+    /// // from 8.478 and 847800.0\n+    /// assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_640));\n+    /// assert_eq!(dur.mul_f32(3.14e5), Duration::new(847799, 969_120_256));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn mul_f32(self, rhs: f32) -> Duration {\n+        Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n \n     /// Divide `Duration` by `f64`.\n@@ -589,7 +667,30 @@ impl Duration {\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n     pub fn div_f64(self, rhs: f64) -> Duration {\n-        Duration::from_float_secs(self.as_float_secs() / rhs)\n+        Duration::from_secs_f64(self.as_secs_f64() / rhs)\n+    }\n+\n+    /// Divide `Duration` by `f32`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// // note that due to rounding errors result is slightly\n+    /// // different from 0.859_872_611\n+    /// assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_576));\n+    /// // note that truncation is used, not rounding\n+    /// assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_598));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_f32(self, rhs: f32) -> Duration {\n+        Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n \n     /// Divide `Duration` by `Duration` and return `f64`.\n@@ -601,12 +702,29 @@ impl Duration {\n     ///\n     /// let dur1 = Duration::new(2, 700_000_000);\n     /// let dur2 = Duration::new(5, 400_000_000);\n-    /// assert_eq!(dur1.div_duration(dur2), 0.5);\n+    /// assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_duration_f64(self, rhs: Duration) -> f64 {\n+        self.as_secs_f64() / rhs.as_secs_f64()\n+    }\n+\n+    /// Divide `Duration` by `Duration` and return `f32`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur1 = Duration::new(2, 700_000_000);\n+    /// let dur2 = Duration::new(5, 400_000_000);\n+    /// assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n     /// ```\n     #[unstable(feature = \"duration_float\", issue = \"54361\")]\n     #[inline]\n-    pub fn div_duration(self, rhs: Duration) -> f64 {\n-        self.as_float_secs() / rhs.as_float_secs()\n+    pub fn div_duration_f32(self, rhs: Duration) -> f32 {\n+        self.as_secs_f32() / rhs.as_secs_f32()\n     }\n }\n "}]}