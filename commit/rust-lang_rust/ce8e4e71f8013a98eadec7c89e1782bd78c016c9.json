{"sha": "ce8e4e71f8013a98eadec7c89e1782bd78c016c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOGU0ZTcxZjgwMTNhOThlYWRlYzdjODllMTc4MmJkNzhjMDE2Yzk=", "commit": {"author": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2016-10-21T14:23:50Z"}, "committer": {"name": "\u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov]", "email": "newpavlov@gmail.com", "date": "2016-10-21T14:23:50Z"}, "message": "libcore documentation for builtin macros", "tree": {"sha": "d26fee701bf45e665e690979bf944225da47e2fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d26fee701bf45e665e690979bf944225da47e2fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce8e4e71f8013a98eadec7c89e1782bd78c016c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCiT2AAoJEBOpOZ+3fjNc/mkP/3rDWwdhcDPAw1z556T/DLvY\nIUHDVQjjdLZrAjHpDer+ODuO5yGROVMo1FSx0lv9O2RMnWFVNaNmrCM4hQ+puaNA\nwlg01YTeGR8hagcxEFAve0cqXhQ5wC7D4hcmYwnMzd8TaqlpwbpM9gVfMCeJiRXk\nnD/yNafvmcviFhvxRtAipOBH/EETC/ijcdmpTD1v2xX7guzPwVp7AMvOdwoy3TlW\n2+95mhZAe93cAR2GGWtmpNtkgHcwTx18eMwL8ik+g2JIUdy3gf/9m73BHHTE+C4D\naVTED3/osE2IxLrN+/lUL+sNEM3R/wS5ewLNuhGXLnnZ0+Jq+bSkH3KPDAel7/oE\nteWIHFIKrPWmrrlY+IDD941Z5AO/HZT2uXWx3e551UK8Oayt3L0+qjHbrXK9k2AP\nwH/x9gIDXxmBpiueRgvD36cVdHqmLRVMvugQlIwYdfyP8tXRNUEALhnTbtSSl+KT\nl3MHInCDTaFESfvZ9ysZba+gL8AEZzRlUQtSGbtsB7Z20tE+e29nBbA158PUjOfN\nbY6skH6VpHX1og+e5v3aTLoEUdAfeFMKKQskdHDKHyd9EveFYRetGmS9A/jXHR3f\nZtKY85ul2eI+lUFEi2GRV9nraYJ6VXLLDR5k7VL5KNkJiiLrec2a9+90LEg5NS+j\ncWYsEwwpcwNHRwaXth0s\n=iUQn\n-----END PGP SIGNATURE-----", "payload": "tree d26fee701bf45e665e690979bf944225da47e2fa\nparent e4708273b5401cd572d19f8836e121ce39dc2767\nauthor \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1477059830 +0300\ncommitter \u0410\u0440\u0442\u0451\u043c \u041f\u0430\u0432\u043b\u043e\u0432 [Artyom Pavlov] <newpavlov@gmail.com> 1477059830 +0300\n\nlibcore documentation for builtin macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8e4e71f8013a98eadec7c89e1782bd78c016c9", "html_url": "https://github.com/rust-lang/rust/commit/ce8e4e71f8013a98eadec7c89e1782bd78c016c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce8e4e71f8013a98eadec7c89e1782bd78c016c9/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4708273b5401cd572d19f8836e121ce39dc2767", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4708273b5401cd572d19f8836e121ce39dc2767", "html_url": "https://github.com/rust-lang/rust/commit/e4708273b5401cd572d19f8836e121ce39dc2767"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "bf58fddbfbd828893919419eaa080444d79999e3", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/ce8e4e71f8013a98eadec7c89e1782bd78c016c9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8e4e71f8013a98eadec7c89e1782bd78c016c9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=ce8e4e71f8013a98eadec7c89e1782bd78c016c9", "patch": "@@ -509,3 +509,145 @@ macro_rules! unreachable {\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"))\n }\n+\n+/// Built-in macros to the compiler itself.\n+///\n+/// These macros do not have any corresponding definition with a `macro_rules!`\n+/// macro, but are documented here. Their implementations can be found hardcoded\n+/// into libsyntax itself.\n+///\n+/// For more information, see documentation for `std`'s macros.\n+#[cfg(dox)]\n+pub mod builtin {\n+    /// The core macro for formatted string creation & output.\n+    ///\n+    /// For more information, see the documentation for [`std::format_args!`].\n+    ///\n+    /// [`std::format_args!`]: ../std/macro.format_args.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n+        /* compiler built-in */\n+    }) }\n+\n+    /// Inspect an environment variable at compile time.\n+    ///\n+    /// For more information, see the documentation for [`std::env!`].\n+    ///\n+    /// [`std::env!`]: ../std/macro.env.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Optionally inspect an environment variable at compile time.\n+    ///\n+    /// For more information, see the documentation for [`std::option_env!`].\n+    ///\n+    /// [`std::option_env!`]: ../std/macro.option_env.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! option_env { ($name:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Concatenate identifiers into one identifier.\n+    ///\n+    /// For more information, see the documentation for [`std::concat_idents!`].\n+    ///\n+    /// [`std::concat_idents!`]: ../std/macro.concat_idents.html\n+    #[unstable(feature = \"concat_idents\", issue = \"29599\")]\n+    #[macro_export]\n+    macro_rules! concat_idents {\n+        ($($e:ident),*) => ({ /* compiler built-in */ })\n+    }\n+\n+    /// Concatenates literals into a static string slice.\n+    ///\n+    /// For more information, see the documentation for [`std::concat!`].\n+    ///\n+    /// [`std::concat!`]: ../std/macro.concat.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the line number on which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::line!`].\n+    ///\n+    /// [`std::line!`]: ../std/macro.line.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! line { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the column number on which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::column!`].\n+    ///\n+    /// [`std::column!`]: ../std/macro.column.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! column { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which expands to the file name from which it was invoked.\n+    ///\n+    /// For more information, see the documentation for [`std::file!`].\n+    ///\n+    /// [`std::file!`]: ../std/macro.file.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! file { () => ({ /* compiler built-in */ }) }\n+\n+    /// A macro which stringifies its argument.\n+    ///\n+    /// For more information, see the documentation for [`std::stringify!`].\n+    ///\n+    /// [`std::stringify!`]: ../std/macro.stringify.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! stringify { ($t:tt) => ({ /* compiler built-in */ }) }\n+\n+    /// Includes a utf8-encoded file as a string.\n+    ///\n+    /// For more information, see the documentation for [`std::include_str!`].\n+    ///\n+    /// [`std::include_str!`]: ../std/macro.include_str.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include_str { ($file:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Includes a file as a reference to a byte array.\n+    ///\n+    /// For more information, see the documentation for [`std::include_bytes!`].\n+    ///\n+    /// [`std::include_bytes!`]: ../std/macro.include_bytes.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Expands to a string that represents the current module path.\n+    ///\n+    /// For more information, see the documentation for [`std::module_path!`].\n+    ///\n+    /// [`std::module_path!`]: ../std/macro.module_path.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! module_path { () => ({ /* compiler built-in */ }) }\n+\n+    /// Boolean evaluation of configuration flags.\n+    ///\n+    /// For more information, see the documentation for [`std::cfg!`].\n+    ///\n+    /// [`std::cfg!`]: ../std/macro.cfg.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! cfg { ($($cfg:tt)*) => ({ /* compiler built-in */ }) }\n+\n+    /// Parse the file provided in the argument as an expression or an\n+    /// item according to the context. This file is located relative\n+    /// to the current file (similarly to how modules are found).\n+    ///\n+    /// For more information, see the documentation for [`std::include!`].\n+    ///\n+    /// [`std::include!`]: ../std/macro.include.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[macro_export]\n+    macro_rules! include { ($file:expr) => ({ /* compiler built-in */ }) }\n+}"}]}