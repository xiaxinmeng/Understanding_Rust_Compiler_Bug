{"sha": "fa22fc387ad17510d5af9eb16db5e5e01bde38b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMjJmYzM4N2FkMTc1MTBkNWFmOWViMTZkYjVlNWUwMWJkZTM4YjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-21T17:17:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-12-01T18:59:04Z"}, "message": "in region, treat current (and future) item-likes alike\n\nThe `visit_fn` code mutates its surrounding context.  Between *items*,\nthis was saved/restored, but between impl items it was not. This meant\nthat we wound up with `CallSiteScope` entries with two parents (or\nmore!).  As far as I can tell, this is harmless in actual type-checking,\nsince the regions you interact with are always from at most one of those\nbranches. But it can slow things down.\n\nBefore, the effect was limited, since it only applied to impl items\nwithin an impl. After #37660, impl items are visisted all together at\nthe end, and hence this could create a very messed up\nhierarchy. Isolating impl item properly solves both issues.\n\nI cannot come up with a way to unit-test this; for posterity, however,\nyou can observe the messed up hierarchies with a test as simple as the\nfollowing, which would create a callsite scope with two parents both\nbefore and after\n\n```\nstruct Foo {\n}\n\nimpl Foo {\n    fn bar(&self) -> usize {\n        22\n    }\n\n    fn baz(&self) -> usize {\n        22\n    }\n}\n\nfn main() { }\n```\n\nFixes #37864.", "tree": {"sha": "16cb5ea18ed47a66a9d7fe31d49c9aaef26bb15d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16cb5ea18ed47a66a9d7fe31d49c9aaef26bb15d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa22fc387ad17510d5af9eb16db5e5e01bde38b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa22fc387ad17510d5af9eb16db5e5e01bde38b4", "html_url": "https://github.com/rust-lang/rust/commit/fa22fc387ad17510d5af9eb16db5e5e01bde38b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa22fc387ad17510d5af9eb16db5e5e01bde38b4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "908dba0c9477b7dd022a236cb1514ddfca9369f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/908dba0c9477b7dd022a236cb1514ddfca9369f2", "html_url": "https://github.com/rust-lang/rust/commit/908dba0c9477b7dd022a236cb1514ddfca9369f2"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "930c9e284f6f2bebb86f75a3e170658a1656c3cf", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa22fc387ad17510d5af9eb16db5e5e01bde38b4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa22fc387ad17510d5af9eb16db5e5e01bde38b4/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=fa22fc387ad17510d5af9eb16db5e5e01bde38b4", "patch": "@@ -1066,7 +1066,9 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>,\n     }\n }\n \n-fn resolve_item<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, item: &'tcx hir::Item) {\n+fn resolve_item_like<'a, 'tcx, F>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, id: ast::NodeId, walk: F)\n+    where F: FnOnce(&mut RegionResolutionVisitor<'tcx, 'a>)\n+{\n     // Items create a new outer block scope as far as we're concerned.\n     let prev_cx = visitor.cx;\n     let prev_ts = mem::replace(&mut visitor.terminating_scopes, NodeSet());\n@@ -1075,8 +1077,8 @@ fn resolve_item<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'tcx, 'a>, item:\n         var_parent: ROOT_CODE_EXTENT,\n         parent: ROOT_CODE_EXTENT\n     };\n-    intravisit::walk_item(visitor, item);\n-    visitor.create_item_scope_if_needed(item.id);\n+    walk(visitor);\n+    visitor.create_item_scope_if_needed(id);\n     visitor.cx = prev_cx;\n     visitor.terminating_scopes = prev_ts;\n }\n@@ -1179,17 +1181,15 @@ impl<'ast, 'a> Visitor<'ast> for RegionResolutionVisitor<'ast, 'a> {\n     }\n \n     fn visit_item(&mut self, i: &'ast Item) {\n-        resolve_item(self, i);\n+        resolve_item_like(self, i.id, |this| intravisit::walk_item(this, i));\n     }\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n-        intravisit::walk_impl_item(self, ii);\n-        self.create_item_scope_if_needed(ii.id);\n+        resolve_item_like(self, ii.id, |this| intravisit::walk_impl_item(this, ii));\n     }\n \n     fn visit_trait_item(&mut self, ti: &'ast hir::TraitItem) {\n-        intravisit::walk_trait_item(self, ti);\n-        self.create_item_scope_if_needed(ti.id);\n+        resolve_item_like(self, ti.id, |this| intravisit::walk_trait_item(this, ti));\n     }\n \n     fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl,"}]}