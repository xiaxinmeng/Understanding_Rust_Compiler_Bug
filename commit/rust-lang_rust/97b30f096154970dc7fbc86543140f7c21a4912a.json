{"sha": "97b30f096154970dc7fbc86543140f7c21a4912a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3YjMwZjA5NjE1NDk3MGRjN2ZiYzg2NTQzMTQwZjdjMjFhNDkxMmE=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-02-05T03:11:44Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-07T00:58:02Z"}, "message": "Replace attr::contains_name(..., \"cold\")\n\nPart of #47320", "tree": {"sha": "0e26a2354d144ef6ca86a044b53bc4feae22837d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e26a2354d144ef6ca86a044b53bc4feae22837d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b30f096154970dc7fbc86543140f7c21a4912a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b30f096154970dc7fbc86543140f7c21a4912a", "html_url": "https://github.com/rust-lang/rust/commit/97b30f096154970dc7fbc86543140f7c21a4912a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b30f096154970dc7fbc86543140f7c21a4912a/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f840a683aebb40a4eec0285a49962dfbc8f425b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f840a683aebb40a4eec0285a49962dfbc8f425b", "html_url": "https://github.com/rust-lang/rust/commit/4f840a683aebb40a4eec0285a49962dfbc8f425b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "64c702b99cdb3940350a841bef58b4717fa5ea70", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97b30f096154970dc7fbc86543140f7c21a4912a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b30f096154970dc7fbc86543140f7c21a4912a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=97b30f096154970dc7fbc86543140f7c21a4912a", "patch": "@@ -11,6 +11,7 @@\n //! Inlining pass for MIR functions\n \n use rustc::hir;\n+use rustc::hir::TransFnAttrFlags;\n use rustc::hir::def_id::DefId;\n \n use rustc_data_structures::bitvec::BitVector;\n@@ -206,10 +207,9 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             return false;\n         }\n \n-        let attrs = tcx.get_attrs(callsite.callee);\n-        let hint = tcx.trans_fn_attrs(callsite.callee).inline;\n+        let trans_fn_attrs = tcx.trans_fn_attrs(callsite.callee);\n \n-        let hinted = match hint {\n+        let hinted = match trans_fn_attrs.inline {\n             // Just treat inline(always) as a hint for now,\n             // there are cases that prevent inlining that we\n             // need to check for first.\n@@ -239,7 +239,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n         };\n \n         // Significantly lower the threshold for inlining cold functions\n-        if attr::contains_name(&attrs[..], \"cold\") {\n+        if trans_fn_attrs.flags.contains(TransFnAttrFlags::COLD) {\n             threshold /= 5;\n         }\n \n@@ -344,7 +344,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             }\n         }\n \n-        if let attr::InlineAttr::Always = hint {\n+        if let attr::InlineAttr::Always = trans_fn_attrs.inline {\n             debug!(\"INLINING {:?} because inline(always) [cost={}]\", callsite, cost);\n             true\n         } else {"}]}