{"sha": "6733d8b483d26d305397b528c5afb834027f40ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MzNkOGI0ODNkMjZkMzA1Mzk3YjUyOGM1YWZiODM0MDI3ZjQwY2U=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T20:51:22Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T22:10:13Z"}, "message": "Fallout from deprecation", "tree": {"sha": "4bc7c3be4c8ceaf5ad1f0b55f99b7f397359f26e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc7c3be4c8ceaf5ad1f0b55f99b7f397359f26e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6733d8b483d26d305397b528c5afb834027f40ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6733d8b483d26d305397b528c5afb834027f40ce", "html_url": "https://github.com/rust-lang/rust/commit/6733d8b483d26d305397b528c5afb834027f40ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6733d8b483d26d305397b528c5afb834027f40ce/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce2d9c3fa3d36ae79b9790e3646e5e746e64cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce2d9c3fa3d36ae79b9790e3646e5e746e64cf4", "html_url": "https://github.com/rust-lang/rust/commit/7ce2d9c3fa3d36ae79b9790e3646e5e746e64cf4"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "9a4814b4749bb3250a025819f94671ecc3c6b73c", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=6733d8b483d26d305397b528c5afb834027f40ce", "patch": "@@ -13,6 +13,7 @@\n //! Operations on ASCII strings and characters\n \n #![unstable = \"unsure about placement and naming\"]\n+#![allow(deprecated)]\n \n use core::kinds::Sized;\n use fmt;\n@@ -36,6 +37,7 @@ impl Ascii {\n         self.chr\n     }\n \n+    /// Deprecated: use `as_byte` isntead.\n     #[deprecated = \"use as_byte\"]\n     pub fn to_byte(self) -> u8 {\n         self.as_byte()\n@@ -48,6 +50,12 @@ impl Ascii {\n         self.chr as char\n     }\n \n+    /// Deprecated: use `as_char` isntead.\n+    #[deprecated = \"use as_char\"]\n+    pub fn to_char(self) -> char {\n+        self.as_char()\n+    }\n+\n     /// Convert to lowercase.\n     #[inline]\n     #[stable]"}, {"sha": "9f81de72980ce0f3c549fff1eb947a18d515d996", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=6733d8b483d26d305397b528c5afb834027f40ce", "patch": "@@ -235,10 +235,10 @@ impl GenericPathUnsafe for Path {\n             let repr = me.repr.as_slice();\n             match me.prefix {\n                 Some(DiskPrefix) => {\n-                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii().to_uppercase().to_byte()\n+                    repr.as_bytes()[0] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n                 }\n                 Some(VerbatimDiskPrefix) => {\n-                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii().to_uppercase().to_byte()\n+                    repr.as_bytes()[4] == path.as_bytes()[0].to_ascii().to_uppercase().as_byte()\n                 }\n                 _ => false\n             }\n@@ -673,14 +673,17 @@ impl Path {\n         match (self.prefix, other.prefix) {\n             (Some(DiskPrefix), Some(VerbatimDiskPrefix)) => {\n                 self.is_absolute() &&\n-                    s_repr.as_bytes()[0].to_ascii().eq_ignore_case(o_repr.as_bytes()[4].to_ascii())\n+                    s_repr.as_bytes()[0].to_ascii().to_lowercase() ==\n+                        o_repr.as_bytes()[4].to_ascii().to_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(DiskPrefix)) => {\n                 other.is_absolute() &&\n-                    s_repr.as_bytes()[4].to_ascii().eq_ignore_case(o_repr.as_bytes()[0].to_ascii())\n+                    s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n+                        o_repr.as_bytes()[0].to_ascii().to_lowercase()\n             }\n             (Some(VerbatimDiskPrefix), Some(VerbatimDiskPrefix)) => {\n-                s_repr.as_bytes()[4].to_ascii().eq_ignore_case(o_repr.as_bytes()[4].to_ascii())\n+                s_repr.as_bytes()[4].to_ascii().to_lowercase() ==\n+                    o_repr.as_bytes()[4].to_ascii().to_lowercase()\n             }\n             (Some(UNCPrefix(_,_)), Some(VerbatimUNCPrefix(_,_))) => {\n                 s_repr.slice(2, self.prefix_len()) == o_repr.slice(8, other.prefix_len())\n@@ -747,10 +750,7 @@ impl Path {\n                                 let mut s = String::from_str(s.slice_to(len));\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[0] = (*v)[0]\n-                                                     .to_ascii()\n-                                                     .to_uppercase()\n-                                                     .to_byte();\n+                                    v[0] = (*v)[0].to_ascii().to_uppercase().as_byte();\n                                 }\n                                 if is_abs {\n                                     // normalize C:/ to C:\\\n@@ -765,7 +765,7 @@ impl Path {\n                                 let mut s = String::from_str(s.slice_to(len));\n                                 unsafe {\n                                     let v = s.as_mut_vec();\n-                                    v[4] = (*v)[4].to_ascii().to_uppercase().to_byte();\n+                                    v[4] = (*v)[4].to_ascii().to_uppercase().as_byte();\n                                 }\n                                 Some(s)\n                             }\n@@ -787,13 +787,13 @@ impl Path {\n                         match prefix {\n                             Some(DiskPrefix) => {\n                                 s.push(prefix_.as_bytes()[0].to_ascii()\n-                                                   .to_uppercase().to_char());\n+                                                   .to_uppercase().as_char());\n                                 s.push(':');\n                             }\n                             Some(VerbatimDiskPrefix) => {\n                                 s.push_str(prefix_.slice_to(4));\n                                 s.push(prefix_.as_bytes()[4].to_ascii()\n-                                                   .to_uppercase().to_char());\n+                                                   .to_uppercase().as_char());\n                                 s.push_str(prefix_.slice_from(5));\n                             }\n                             Some(UNCPrefix(a,b)) => {"}, {"sha": "0060789a7344fb0149206edf11db815863fd4d9c", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6733d8b483d26d305397b528c5afb834027f40ce/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=6733d8b483d26d305397b528c5afb834027f40ce", "patch": "@@ -535,9 +535,8 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,String> {\n                 FormatHEX => {\n                     s = s.as_slice()\n                          .to_ascii()\n-                         .to_uppercase()\n-                         .into_bytes()\n-                         .into_iter()\n+                         .iter()\n+                         .map(|b| b.to_uppercase().as_byte())\n                          .collect();\n                     if flags.alternate {\n                         let s_ = replace(&mut s, vec!(b'0', b'X'));"}]}