{"sha": "243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0M2M1YTVmYWFlZDBjMzRmMGYyMzZjMWYxNjhlMTBiNGNjOTdkMjU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-03T22:56:06Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-05T22:34:01Z"}, "message": "fix handling of CallScopeData\n\nThis fixes the tests for issue #29793", "tree": {"sha": "e52cbf68699754d80b28c88ecd9818fdd9b2703c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e52cbf68699754d80b28c88ecd9818fdd9b2703c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "html_url": "https://github.com/rust-lang/rust/commit/243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcae7f69414fd0e5de6bad771df12bfde4f2908", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcae7f69414fd0e5de6bad771df12bfde4f2908", "html_url": "https://github.com/rust-lang/rust/commit/cbcae7f69414fd0e5de6bad771df12bfde4f2908"}], "stats": {"total": 59, "additions": 53, "deletions": 6}, "files": [{"sha": "a8af5f5d32b9783cbab3ebaa510fe43ceb37107a", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "patch": "@@ -12,6 +12,7 @@\n \n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n@@ -131,6 +132,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         move_data: move_data,\n         param_env: param_env,\n     };\n+    let body_id = match tcx.def_key(def_id).disambiguated_data.data {\n+        DefPathData::StructCtor |\n+        DefPathData::EnumVariant(_) => None,\n+        _ => Some(tcx.hir.body_owned_by(id))\n+    };\n+\n     let dead_unwinds = IdxSetBuf::new_empty(mir.basic_blocks().len());\n     let mut flow_inits = FlowInProgress::new(do_dataflow(\n         tcx,\n@@ -206,7 +213,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         id,\n         &attributes,\n         &dead_unwinds,\n-        Borrows::new(tcx, mir, opt_regioncx),\n+        Borrows::new(tcx, mir, opt_regioncx, def_id, body_id),\n         |bd, i| bd.location(i),\n     ));\n "}, {"sha": "932aad0bb1d84dcf68f12673d221547452081fac", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "patch": "@@ -51,6 +51,17 @@ impl<'tcx> CFG<'tcx> {\n                                              source_info: SourceInfo,\n                                              region_scope: region::Scope) {\n         if tcx.sess.emit_end_regions() {\n+            if let region::ScopeData::CallSite(_) = region_scope.data() {\n+                // The CallSite scope (aka the root scope) is sort of weird, in that it is\n+                // supposed to \"separate\" the \"interior\" and \"exterior\" of a closure. Being\n+                // that, it is not really a part of the region hierarchy, but for some\n+                // reason it *is* considered a part of it.\n+                //\n+                // It should die a hopefully painful death with NLL, so let's leave this hack\n+                // for now so that nobody can complain about soundness.\n+                return\n+            }\n+\n             self.push(block, Statement {\n                 source_info,\n                 kind: StatementKind::EndRegion(region_scope),"}, {"sha": "b3b06f7f6cdb0f3189e9cf4d4406afee906526ea", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir;\n+use rustc::hir::def_id::DefId;\n+use rustc::middle::region;\n use rustc::mir::{self, Location, Mir};\n use rustc::mir::visit::Visitor;\n use rustc::ty::{self, Region, TyCtxt};\n@@ -27,13 +30,16 @@ use borrow_check::nll::ToRegionVid;\n use syntax_pos::Span;\n \n use std::fmt;\n+use std::rc::Rc;\n \n // `Borrows` maps each dataflow bit to an `Rvalue::Ref`, which can be\n // uniquely identified in the MIR by the `Location` of the assigment\n // statement in which it appears on the right hand side.\n pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     mir: &'a Mir<'tcx>,\n+    scope_tree: Rc<region::ScopeTree>,\n+    root_scope: Option<region::Scope>,\n     borrows: IndexVec<BorrowIndex, BorrowData<'tcx>>,\n     location_map: FxHashMap<Location, BorrowIndex>,\n     region_map: FxHashMap<Region<'tcx>, FxHashSet<BorrowIndex>>,\n@@ -69,8 +75,14 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                mir: &'a Mir<'tcx>,\n-               nonlexical_regioncx: Option<RegionInferenceContext<'tcx>>)\n+               nonlexical_regioncx: Option<RegionInferenceContext<'tcx>>,\n+               def_id: DefId,\n+               body_id: Option<hir::BodyId>)\n                -> Self {\n+        let scope_tree = tcx.region_scope_tree(def_id);\n+        let root_scope = body_id.map(|body_id| {\n+            region::Scope::CallSite(tcx.hir.body(body_id).value.hir_id.local_id)\n+        });\n         let mut visitor = GatherBorrows {\n             tcx,\n             mir,\n@@ -83,6 +95,8 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         return Borrows { tcx: tcx,\n                          mir: mir,\n                          borrows: visitor.idx_vec,\n+                         scope_tree,\n+                         root_scope,\n                          location_map: visitor.location_map,\n                          region_map: visitor.region_map,\n                          region_span_map: visitor.region_span_map,\n@@ -253,8 +267,17 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // like unwind paths, we do not always emit `EndRegion` statements, so we\n                 // add some kills here as a \"backup\" and to avoid spurious error messages.\n                 for (borrow_index, borrow_data) in self.borrows.iter_enumerated() {\n-                    if let ReScope(..) = borrow_data.region {\n-                        sets.kill(&borrow_index);\n+                    if let ReScope(scope) = borrow_data.region {\n+                        // Check that the scope is not actually a scope from a function that is\n+                        // a parent of our closure. Note that the CallSite scope itself is\n+                        // *outside* of the closure, for some weird reason.\n+                        if let Some(root_scope) = self.root_scope {\n+                            if *scope != root_scope &&\n+                                self.scope_tree.is_subscope_of(*scope, root_scope)\n+                            {\n+                                sets.kill(&borrow_index);\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "a4dc00bd2b1e77acc4869230fb0839ddf28f45ae", "filename": "src/test/compile-fail/region-borrow-params-issue-29793-big.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/243c5a5faaed0c34f0f236c1f168e10b4cc97d25/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-borrow-params-issue-29793-big.rs?ref=243c5a5faaed0c34f0f236c1f168e10b4cc97d25", "patch": "@@ -16,6 +16,10 @@\n // behavior (because the improperly accepted closure was actually\n // able to be invoked).\n \n+// ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n struct WrapA<F>(Option<F>);\n \n impl<F> WrapA<F> {\n@@ -75,9 +79,11 @@ impl<F, T> WrapA<F>\n fn main() {\n     let mut w = WrapA::new().set(|x: usize, y: usize| {\n         WrapB::new().set(|t: bool| if t { x } else { y }) // (separate errors for `x` vs `y`)\n-            //~^ ERROR `x` does not live long enough\n-            //~| ERROR `y` does not live long enough\n+            //[ast]~^ ERROR `x` does not live long enough\n+            //[ast]~| ERROR `y` does not live long enough\n     });\n+    //[mir]~^ ERROR borrowed value does not live long enough\n+    //[mir]~| ERROR borrowed value does not live long enough\n \n     w.handle(); // This works\n     // w.handle_ref(); // This doesn't"}]}