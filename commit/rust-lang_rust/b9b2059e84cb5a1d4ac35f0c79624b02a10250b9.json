{"sha": "b9b2059e84cb5a1d4ac35f0c79624b02a10250b9", "node_id": "C_kwDOAAsO6NoAKGI5YjIwNTllODRjYjVhMWQ0YWMzNWYwYzc5NjI0YjAyYTEwMjUwYjk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-08-14T17:42:29Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:07:20Z"}, "message": "Edit documentation for `for_loop_over_fallibles` lint", "tree": {"sha": "623e0003f7f5a79680e7564df17f87e02bccce5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623e0003f7f5a79680e7564df17f87e02bccce5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9", "html_url": "https://github.com/rust-lang/rust/commit/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ae20a42f6c429342d53b41a2592de07bee6f91", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ae20a42f6c429342d53b41a2592de07bee6f91", "html_url": "https://github.com/rust-lang/rust/commit/75ae20a42f6c429342d53b41a2592de07bee6f91"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "48a876b157bda4bd44512a631605f8e40fcf673c", "filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9b2059e84cb5a1d4ac35f0c79624b02a10250b9/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs?ref=b9b2059e84cb5a1d4ac35f0c79624b02a10250b9", "patch": "@@ -10,43 +10,41 @@ use rustc_span::{sym, Span};\n use rustc_trait_selection::traits::TraitEngineExt;\n \n declare_lint! {\n-    /// ### What it does\n-    ///\n     /// Checks for `for` loops over `Option` or `Result` values.\n     ///\n-    /// ### Why is this bad?\n-    /// Readability. This is more clearly expressed as an `if\n-    /// let`.\n+    /// ### Explanation\n+    ///\n+    /// Both `Option` and `Result` implement `IntoIterator` trait, which allows using them in a `for` loop.\n+    /// `for` loop over `Option` or `Result` will iterate either 0 (if the value is `None`/`Err(_)`)\n+    /// or 1 time (if the value is `Some(_)`/`Ok(_)`). This is not very useful and is more clearly expressed\n+    /// via `if let`.\n+    ///\n+    /// `for` loop can also be accidentally written with the intention to call a function multiple times,\n+    /// while the function returns `Some(_)`, in these cases `while let` loop should be used instead.\n+    ///\n+    /// The \"intended\" use of `IntoIterator` implementations for `Option` and `Result` is passing them to\n+    /// generic code that expects something implementing `IntoIterator`. For example using `.chain(option)`\n+    /// to optionally add a value to an iterator.\n     ///\n     /// ### Example\n     ///\n     /// ```rust\n     /// # let opt = Some(1);\n     /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// for x in opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in &res {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// for x in res.iter() {\n-    ///     // ..\n-    /// }\n+    /// # let recv = || Some(1);\n+    /// for x in opt { /* ... */}\n+    /// for x in res { /* ... */ }\n+    /// for x in recv() { /* ... */ }\n     /// ```\n     ///\n     /// Use instead:\n     /// ```rust\n     /// # let opt = Some(1);\n     /// # let res: Result<i32, std::io::Error> = Ok(1);\n-    /// if let Some(x) = opt {\n-    ///     // ..\n-    /// }\n-    ///\n-    /// if let Ok(x) = res {\n-    ///     // ..\n-    /// }\n+    /// # let recv = || Some(1);\n+    /// if let Some(x) = opt { /* ... */}\n+    /// if let Ok(x) = res { /* ... */ }\n+    /// while let Some(x) = recv() { /* ... */ }\n     /// ```\n     pub FOR_LOOP_OVER_FALLIBLES,\n     Warn,"}]}