{"sha": "7d7f62613a49c03851fcde9fddb14ec6b474c50f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkN2Y2MjYxM2E0OWMwMzg1MWZjZGU5ZmRkYjE0ZWM2YjQ3NGM1MGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T01:29:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-09T01:29:20Z"}, "message": "rt: Compare tags", "tree": {"sha": "c4836b78aba792821789028813c779cf8b45a671", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4836b78aba792821789028813c779cf8b45a671"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7f62613a49c03851fcde9fddb14ec6b474c50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7f62613a49c03851fcde9fddb14ec6b474c50f", "html_url": "https://github.com/rust-lang/rust/commit/7d7f62613a49c03851fcde9fddb14ec6b474c50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7f62613a49c03851fcde9fddb14ec6b474c50f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5531504c9309126eb486c6d1cd4437e343c63fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5531504c9309126eb486c6d1cd4437e343c63fa", "html_url": "https://github.com/rust-lang/rust/commit/e5531504c9309126eb486c6d1cd4437e343c63fa"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "28de981b32013e743aea9bb83a7af3ea6b0f906d", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7d7f62613a49c03851fcde9fddb14ec6b474c50f/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7d7f62613a49c03851fcde9fddb14ec6b474c50f/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=7d7f62613a49c03851fcde9fddb14ec6b474c50f", "patch": "@@ -228,6 +228,9 @@ class ctxt {\n \n     void walk(bool align);\n \n+    std::pair<const uint8_t *,const uint8_t *>\n+    get_variant_sp(tag_info &info, uint32_t variant_id);\n+\n protected:\n     static inline uint16_t get_u16(const uint8_t *addr);\n     static inline uint16_t get_u16_bump(const uint8_t *&addr);\n@@ -390,6 +393,19 @@ ctxt<T>::get_size_align(const uint8_t *&addr) {\n     return result;\n }\n \n+// Returns a pointer to the beginning and a pointer to the end of the shape of\n+// the tag variant with the given ID.\n+template<typename T>\n+std::pair<const uint8_t *,const uint8_t *>\n+ctxt<T>::get_variant_sp(tag_info &tinfo, uint32_t variant_id) {\n+    uint16_t variant_offset = get_u16(tinfo.info_ptr +\n+                                      variant_id * sizeof(uint16_t));\n+    const uint8_t *variant_ptr = tables->tags + variant_offset;\n+    uint16_t variant_len = get_u16_bump(variant_ptr);\n+    const uint8_t *variant_end = variant_ptr + variant_len;\n+    return std::make_pair(variant_ptr, variant_end);\n+}\n+\n template<typename T>\n void\n ctxt<T>::walk_evec(bool align) {\n@@ -724,12 +740,10 @@ size_of::compute_tag_size(tag_info &tinfo) {\n     tinfo.tag_sa.set(0, 0);\n     for (uint16_t i = 0; i < n_largest_variants; i++) {\n         uint16_t variant_id = get_u16_bump(tinfo.largest_variants_ptr);\n-        uint16_t variant_offset = get_u16(tinfo.info_ptr +\n-                                          variant_id * sizeof(uint16_t));\n-        const uint8_t *variant_ptr = tables->tags + variant_offset;\n-\n-        uint16_t variant_len = get_u16_bump(variant_ptr);\n-        const uint8_t *variant_end = variant_ptr + variant_len;\n+        std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n+            get_variant_sp(tinfo, variant_id);\n+        const uint8_t *variant_ptr = variant_ptr_and_end.first;\n+        const uint8_t *variant_end = variant_ptr_and_end.second;\n \n         size_of sub(*this, variant_ptr, params, NULL);\n \n@@ -852,6 +866,9 @@ class data : public ctxt< data<T,U> > {\n         static_cast<T *>(this)->walk_var(align, param_index);\n     }\n \n+    // Called by derived classes only.\n+    void walk_variant(bool align, tag_info &tinfo, uint32_t variant);\n+\n     template<typename W>\n     void walk_number(bool align) { DATA_SIMPLE(W, walk_number<W>()); }\n };\n@@ -893,6 +910,15 @@ data<T,U>::walk_tag(bool align, tag_info &tinfo) {\n     static_cast<T *>(this)->walk_tag(align, tinfo, tag_variant);\n }\n \n+template<typename T,typename U>\n+void\n+data<T,U>::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id) {\n+    std::pair<const uint8_t *,const uint8_t *> variant_ptr_and_end =\n+        this->get_variant_sp(tinfo, variant_id);\n+    static_cast<T *>(this)->walk_variant(align, tinfo, variant_id,\n+                                         variant_ptr_and_end);\n+}\n+\n \n // Copy constructors\n \n@@ -927,6 +953,16 @@ class cmp : public data<cmp,ptr_pair> {\n                          ptr_pair::make(in_data_0, in_data_1)),\n       result(0) {}\n \n+    cmp(const cmp &other,\n+        const uint8_t *in_sp = NULL,\n+        const type_param *in_params = NULL,\n+        const rust_shape_tables *in_tables = NULL)\n+    : data<cmp,ptr_pair>(other.task,\n+                         in_sp ? in_sp : other.sp,\n+                         in_params ? in_params : other.params,\n+                         in_tables ? in_tables : other.tables,\n+                         other.dp) {}\n+\n     cmp(const cmp &other, const ptr_pair &in_dp)\n     : data<cmp,ptr_pair>(other.task, other.sp, other.params, other.tables,\n                          in_dp),\n@@ -938,6 +974,9 @@ class cmp : public data<cmp,ptr_pair> {\n                   const data_pair<uint32_t> &tag_variants);\n     void walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n                   const uint8_t *ty_params_sp);\n+    void walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+                      const std::pair<const uint8_t *,const uint8_t *>\n+                      variant_ptr_and_end);\n \n     template<typename T>\n     void walk_number() { cmp_number(bump_dp<T>(dp)); }\n@@ -966,7 +1005,7 @@ cmp::walk_tag(bool align, tag_info &tinfo,\n     cmp_number(tag_variants);\n     if (result != 0)\n         return;\n-    abort();    // TODO\n+    data<cmp,ptr_pair>::walk_variant(align, tinfo, tag_variants.fst);\n }\n \n void\n@@ -975,6 +1014,19 @@ cmp::walk_res(bool align, const rust_fn *dtor, uint16_t n_ty_params,\n     abort();    // TODO\n }\n \n+void\n+cmp::walk_variant(bool align, tag_info &tinfo, uint32_t variant_id,\n+                  const std::pair<const uint8_t *,const uint8_t *>\n+                  variant_ptr_and_end) {\n+    cmp sub(*this, variant_ptr_and_end.first);\n+\n+    const uint8_t *variant_end = variant_ptr_and_end.second;\n+    while (!sub.result && sub.sp < variant_end) {\n+        sub.walk(align);\n+        align = true;\n+    }\n+}\n+\n } // end namespace shape\n \n extern \"C\" void"}]}