{"sha": "5125d58fcf1190c6cdba814f9b49528764e614f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjVkNThmY2YxMTkwYzZjZGJhODE0ZjliNDk1Mjg3NjRlNjE0ZjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-01-26T15:44:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:12Z"}, "message": "Simplify code around reading/writing ConstVals", "tree": {"sha": "063f4c12a41f3fdb774b344d62e0417e03a1dea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063f4c12a41f3fdb774b344d62e0417e03a1dea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5125d58fcf1190c6cdba814f9b49528764e614f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53QACgkQpp+NIls6\n19mmHBAApO2JfZGzCNIKmMuqOILP8c7zJeqmGnWOvS22vsObTMr2YMOxNVeXG3l0\n+CNs8ibpGb8qSD788WYeiiCWjWNoilzX6FLgyK8WJOAbA5dvwIy5yg0sz/5UUFL+\n2RGVSEcBt99RlkyWrVyeBn8Qw9xoYfPtngbJ9o7JfHaTHX8mztrfFkQK9SSuJxhX\n0inbOCC0+vKzGl+XI32xX0g8ulX4u7W724Knsas8Nf6VLqeMw5kGZz3vJgGQ7Wfp\nwdbLTAF3kULuST//3hiQpt7gflnp2BPxd1VZF2wpoEBj7GsvLbsmo8EoRWUDKWU+\n0DDGnFjiPQ5fBjQH7rGMkN8ob/RwcJed3yG6TfABe3p4m2UfncFXWr9e0qAThhf9\nqg/EFmbG1j0kzf+9yNqOkC+KwLC3eb4ikhI68CLQ854RLaz3+5ildE5GE5LFdIN9\nkszcXnq0AJBIptNjZsl23pcf4ViSIv5oaDScQh4THSHV0PLCSfM6JZ+WCGb22lqP\nYQUKw5TF/qKPOboAZZbm3kN+HJZp4Liocl7v2WI5PYkXGSTKUtxmTQREKszoTr7w\nTRLMTo7W0lMXiQffwArqG1joa+D3lHz2L6ykEiNyUkHwWGEFFntMYTU+RRqXDQ1H\nGZZ0g7X8fT3pSsffyd8kMM6nt6YSjq9H/RSEoU5swonzkh2SvKE=\n=d3lG\n-----END PGP SIGNATURE-----", "payload": "tree 063f4c12a41f3fdb774b344d62e0417e03a1dea3\nparent 4fbf1199ef5c7340c6b7aa0424beeee4ab88d0c7\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1516981450 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494452 +0100\n\nSimplify code around reading/writing ConstVals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5125d58fcf1190c6cdba814f9b49528764e614f5", "html_url": "https://github.com/rust-lang/rust/commit/5125d58fcf1190c6cdba814f9b49528764e614f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5125d58fcf1190c6cdba814f9b49528764e614f5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fbf1199ef5c7340c6b7aa0424beeee4ab88d0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fbf1199ef5c7340c6b7aa0424beeee4ab88d0c7", "html_url": "https://github.com/rust-lang/rust/commit/4fbf1199ef5c7340c6b7aa0424beeee4ab88d0c7"}], "stats": {"total": 111, "additions": 21, "deletions": 90}, "files": [{"sha": "36e173dd5d640c785e17ff468f9fa30be7976825", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5125d58fcf1190c6cdba814f9b49528764e614f5", "patch": "@@ -24,9 +24,7 @@ use rustc::traits::{self, FulfillmentContext};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n-use rustc::middle::const_val::ConstVal;\n use rustc::mir::*;\n-use rustc::mir::interpret::{Value, PrimVal};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use std::fmt;\n@@ -259,22 +257,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 // constraints on `'a` and `'b`. These constraints\n                 // would be lost if we just look at the normalized\n                 // value.\n-                let did = match value.val {\n-                    ConstVal::Value(Value::ByVal(PrimVal::Ptr(p))) => {\n-                        self.tcx()\n-                            .interpret_interner\n-                            .get_fn(p.alloc_id)\n-                            .map(|instance| instance.def_id())\n-                    },\n-                    ConstVal::Value(Value::ByVal(PrimVal::Undef)) => {\n-                        match value.ty.sty {\n-                            ty::TyFnDef(ty_def_id, _) => Some(ty_def_id),\n-                            _ => None,\n-                        }\n-                    },\n-                    _ => None,\n-                };\n-                if let Some(def_id) = did {\n+                if let ty::TyFnDef(def_id, substs) = value.ty.sty {\n                     let tcx = self.tcx();\n                     let type_checker = &mut self.cx;\n \n@@ -287,17 +270,6 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                     // are transitioning to the miri-based system, we\n                     // don't have a handy function for that, so for\n                     // now we just ignore `value.val` regions.\n-                    let substs = match value.ty.sty {\n-                        ty::TyFnDef(ty_def_id, substs) => {\n-                            assert_eq!(def_id, ty_def_id);\n-                            substs\n-                        }\n-                        _ => span_bug!(\n-                            self.last_span,\n-                            \"unexpected type for constant function: {:?}\",\n-                            value.ty\n-                        ),\n-                    };\n \n                     let instantiated_predicates =\n                         tcx.predicates_of(def_id).instantiate(tcx, substs);\n@@ -1029,35 +1001,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     }\n \n     fn is_box_free(&self, operand: &Operand<'tcx>) -> bool {\n-        match operand {\n-            &Operand::Constant(box Constant {\n-                literal:\n-                    Literal::Value {\n-                        value:\n-                            &ty::Const {\n-                                val,\n-                                ty,\n-                            },\n-                        ..\n-                    },\n-                ..\n-            }) => match val {\n-                ConstVal::Value(Value::ByVal(PrimVal::Ptr(p))) => {\n-                    let inst = self.tcx().interpret_interner.get_fn(p.alloc_id);\n-                    inst.map_or(false, |inst| {\n-                        Some(inst.def_id()) == self.tcx().lang_items().box_free_fn()\n-                    })\n-                },\n-                ConstVal::Value(Value::ByVal(PrimVal::Undef)) => {\n-                    match ty.sty {\n-                        ty::TyFnDef(ty_def_id, _) => {\n-                            Some(ty_def_id) == self.tcx().lang_items().box_free_fn()\n-                        }\n-                        _ => false,\n-                    }\n+        match *operand {\n+            Operand::Constant(ref c) => match c.ty.sty {\n+                ty::TyFnDef(ty_def_id, _) => {\n+                    Some(ty_def_id) == self.tcx().lang_items().box_free_fn()\n                 }\n                 _ => false,\n-            }\n+            },\n             _ => false,\n         }\n     }"}, {"sha": "6e10c2307c8e6879e29bf8b2e74ff7e6e1d6db07", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=5125d58fcf1190c6cdba814f9b49528764e614f5", "patch": "@@ -54,30 +54,20 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     // Returns a zero literal operand for the appropriate type, works for\n     // bool, char and integers.\n     pub fn zero_literal(&mut self, span: Span, ty: Ty<'tcx>) -> Operand<'tcx> {\n-        let literal = match ty.sty {\n-            ty::TyBool => {\n-                self.hir.false_literal()\n-            }\n-            ty::TyChar => {\n-                Literal::Value {\n-                    value: self.hir.tcx().mk_const(ty::Const {\n-                        val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(0))),\n-                        ty\n-                    })\n-                }\n-            }\n+        match ty.sty {\n+            ty::TyBool |\n+            ty::TyChar |\n             ty::TyUint(_) |\n-            ty::TyInt(_) => {\n-                Literal::Value {\n-                    value: self.hir.tcx().mk_const(ty::Const {\n-                        val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(0))),\n-                        ty\n-                    })\n-                }\n-            }\n+            ty::TyInt(_) => {}\n             _ => {\n                 span_bug!(span, \"Invalid type for zero_literal: `{:?}`\", ty)\n             }\n+        }\n+        let literal = Literal::Value {\n+            value: self.hir.tcx().mk_const(ty::Const {\n+                val: ConstVal::Value(Value::ByVal(PrimVal::Bytes(0))),\n+                ty\n+            })\n         };\n \n         self.literal_operand(span, ty, literal)"}, {"sha": "dd34dc0345886aa1f08f13cb46a60cf4e6c527d7", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5125d58fcf1190c6cdba814f9b49528764e614f5/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=5125d58fcf1190c6cdba814f9b49528764e614f5", "patch": "@@ -13,11 +13,9 @@\n \n use rustc_data_structures::bitvec::BitVector;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n-use rustc::middle::const_val::ConstVal;\n-use rustc::mir::{self, Location, TerminatorKind, Literal};\n+use rustc::mir::{self, Location, TerminatorKind};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::mir::traversal;\n-use rustc::mir::interpret::{Value, PrimVal};\n use rustc::ty;\n use rustc::ty::layout::LayoutOf;\n use type_of::LayoutLlvmExt;\n@@ -112,19 +110,12 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                              location: Location) {\n         let check = match *kind {\n             mir::TerminatorKind::Call {\n-                func: mir::Operand::Constant(box mir::Constant {\n-                    literal: Literal::Value {\n-                        value: &ty::Const { val, ty }, ..\n-                    }, ..\n-                }),\n+                func: mir::Operand::Constant(ref c),\n                 ref args, ..\n-            } => match val {\n-                ConstVal::Value(Value::ByVal(PrimVal::Undef)) => match ty.sty {\n-                    ty::TyFnDef(did, _) => Some((did, args)),\n-                    _ => None,\n-                },\n+            } => match c.ty.sty {\n+                ty::TyFnDef(did, _) => Some((did, args)),\n                 _ => None,\n-            }\n+            },\n             _ => None,\n         };\n         if let Some((def_id, args)) = check {"}]}