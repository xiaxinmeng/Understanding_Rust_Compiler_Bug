{"sha": "8935771377207f74c69d6011cde006998c3a8fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MzU3NzEzNzcyMDdmNzRjNjlkNjAxMWNkZTAwNjk5OGMzYThmYjg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T20:34:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:12Z"}, "message": "cleanup", "tree": {"sha": "054b9d516b1f23de59603688b71ce741f936d827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054b9d516b1f23de59603688b71ce741f936d827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8935771377207f74c69d6011cde006998c3a8fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8935771377207f74c69d6011cde006998c3a8fb8", "html_url": "https://github.com/rust-lang/rust/commit/8935771377207f74c69d6011cde006998c3a8fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8935771377207f74c69d6011cde006998c3a8fb8/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b567dd06761309a53059036bd4c0aad2b2c667d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b567dd06761309a53059036bd4c0aad2b2c667d", "html_url": "https://github.com/rust-lang/rust/commit/4b567dd06761309a53059036bd4c0aad2b2c667d"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "f8abdaac27978a984a79d3aca84ee94f7d5c3c1a", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8935771377207f74c69d6011cde006998c3a8fb8/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8935771377207f74c69d6011cde006998c3a8fb8/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=8935771377207f74c69d6011cde006998c3a8fb8", "patch": "@@ -50,7 +50,7 @@ impl <K: Eq Ord, V: Eq> TreeMap<K, V>: Eq {\n         } else {\n             let mut x = self.iter();\n             let mut y = other.iter();\n-            for self.len().times unsafe { // unsafe used as a purity workaround\n+            for self.len().times unsafe { // unsafe as a purity workaround\n                 // ICE: x.next() != y.next()\n \n                 let (x1, x2) = x.next().unwrap();\n@@ -216,7 +216,9 @@ impl <T: Ord> TreeSet<T> {\n     }\n \n     /// Return true if the set contains a value\n-    pure fn contains(&self, value: &T) -> bool { self.map.contains_key(value) }\n+    pure fn contains(&self, value: &T) -> bool {\n+        self.map.contains_key(value)\n+    }\n \n     /// Add a value to the set. Return true if the value was not\n     /// already present in the set.\n@@ -425,7 +427,8 @@ fn skew<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n fn split<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n-    if node.right.map_default(false, |x| x.right.map_default(false, |y| y.level == node.level)) {\n+    if node.right.map_default(false,\n+      |x| x.right.map_default(false, |y| y.level == node.level)) {\n         let mut node = node;\n         let mut save = node.right.swap_unwrap();\n         node.right <-> save.left; // save.left now None\n@@ -501,20 +504,10 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n                         remove(&mut save.left, key);\n                     }\n                 } else {\n-                    let mut rm = save.left.swap_unwrap();\n-                    save.key <-> rm.key;\n-                    save.value <-> rm.value;\n-                    save.level <-> rm.level; // FIXME: may not be needed\n-                    save.left <-> rm.left; // FIXME: may not be needed\n-                    save.right <-> rm.right; // FIXME: may not be needed\n+                    save = save.left.swap_unwrap();\n                 }\n             } else if save.right.is_some() {\n-                let mut rm = save.right.swap_unwrap();\n-                save.key <-> rm.key;\n-                save.value <-> rm.value;\n-                save.level <-> rm.level; // FIXME: may not be needed\n-                save.left <-> rm.left; // FIXME: may not be needed\n-                save.right <-> rm.right; // FIXME: may not be needed\n+                save = save.right.swap_unwrap();\n             } else {\n                 return true // leaf\n             }\n@@ -615,7 +608,8 @@ mod test_treemap {\n         }\n     }\n \n-    fn check_left<K: Ord, V>(node: &Option<~TreeNode<K, V>>, parent: &~TreeNode<K, V>) {\n+    fn check_left<K: Ord, V>(node: &Option<~TreeNode<K, V>>,\n+                             parent: &~TreeNode<K, V>) {\n         match *node {\n           Some(ref r) => {\n             assert r.key < parent.key;\n@@ -634,7 +628,7 @@ mod test_treemap {\n             assert r.key > parent.key;\n             let red = r.level == parent.level;\n             if parent_red { assert !red } // no dual horizontal links\n-            assert red || r.level == parent.level - 1; // right is red or black\n+            assert red || r.level == parent.level - 1; // right red or black\n             check_left(&r.left, r);\n             check_right(&r.right, r, red);\n           }"}]}