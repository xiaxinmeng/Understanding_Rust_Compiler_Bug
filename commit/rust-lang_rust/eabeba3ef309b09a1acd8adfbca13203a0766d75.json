{"sha": "eabeba3ef309b09a1acd8adfbca13203a0766d75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYmViYTNlZjMwOWIwOWExYWNkOGFkZmJjYTEzMjAzYTA3NjZkNzU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-05T20:28:57Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T20:35:14Z"}, "message": "added index to test cases, more debugging output", "tree": {"sha": "73c4893ddc9b081dd527ad3e83bffbbff8e7edbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c4893ddc9b081dd527ad3e83bffbbff8e7edbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eabeba3ef309b09a1acd8adfbca13203a0766d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eabeba3ef309b09a1acd8adfbca13203a0766d75", "html_url": "https://github.com/rust-lang/rust/commit/eabeba3ef309b09a1acd8adfbca13203a0766d75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eabeba3ef309b09a1acd8adfbca13203a0766d75/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ecc1e51c08f38b6ee42dae9a0f8bd6dc1f1b86f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ecc1e51c08f38b6ee42dae9a0f8bd6dc1f1b86f", "html_url": "https://github.com/rust-lang/rust/commit/1ecc1e51c08f38b6ee42dae9a0f8bd6dc1f1b86f"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "cde418ca991fa22d7f2afcbb0bf5ca246ff358bd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eabeba3ef309b09a1acd8adfbca13203a0766d75/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eabeba3ef309b09a1acd8adfbca13203a0766d75/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=eabeba3ef309b09a1acd8adfbca13203a0766d75", "patch": "@@ -1794,13 +1794,13 @@ mod test {\n                 // create a really evil test case where a $x appears inside a binding of $x\n                 // but *shouldnt* bind because it was inserted by a different macro....\n             ];\n-        for s in tests.iter() {\n-            run_renaming_test(s);\n+        for (idx,s) in tests.iter().enumerate() {\n+            run_renaming_test(s,idx);\n         }\n     }\n \n     // run one of the renaming tests\n-    fn run_renaming_test(t : &renaming_test) {\n+    fn run_renaming_test(t : &renaming_test, test_idx: uint) {\n         let invalid_name = token::special_idents::invalid.name;\n         let (teststr, bound_connections, bound_ident_check) = match *t {\n             (ref str,ref conns, bic) => (str.to_managed(), conns.clone(), bic)\n@@ -1845,8 +1845,15 @@ mod test {\n                         && (mtwt_resolve(varref.segments[0].identifier) == binding_name);\n                     // temp debugging:\n                     if (fail) {\n-                        std::io::println(\"uh oh, matches but shouldn't:\");\n+                        println!(\"failure on test {}\",test_idx);\n+                        println!(\"text of test case: \\\"{}\\\"\", teststr);\n+                        println!(\"\");\n+                        println!(\"uh oh, matches but shouldn't:\");\n                         std::io::println(fmt!(\"varref: %?\",varref));\n+                        // good lord, you can't make a path with 0 segments, can you?\n+                        println!(\"varref's first segment's uint: {}, and string: \\\"{}\\\"\",\n+                                 varref.segments[0].identifier.name,\n+                                 ident_to_str(&varref.segments[0].identifier));\n                         std::io::println(fmt!(\"binding: %?\", bindings[binding_idx]));\n                         ast_util::display_sctable(get_sctable());\n                     }"}]}