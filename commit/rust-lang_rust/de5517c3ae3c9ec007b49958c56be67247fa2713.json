{"sha": "de5517c3ae3c9ec007b49958c56be67247fa2713", "node_id": "C_kwDOAAsO6NoAKGRlNTUxN2MzYWUzYzllYzAwN2I0OTk1OGM1NmJlNjcyNDdmYTI3MTM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-19T15:49:08Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-26T12:47:04Z"}, "message": "Remove unneeded sub-comparison", "tree": {"sha": "6ca0843f6553697184cff5e37303fd0b7f3f9f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca0843f6553697184cff5e37303fd0b7f3f9f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5517c3ae3c9ec007b49958c56be67247fa2713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5517c3ae3c9ec007b49958c56be67247fa2713", "html_url": "https://github.com/rust-lang/rust/commit/de5517c3ae3c9ec007b49958c56be67247fa2713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5517c3ae3c9ec007b49958c56be67247fa2713/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bd222ad9e30245aef89d41defd378eefed70f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bd222ad9e30245aef89d41defd378eefed70f4", "html_url": "https://github.com/rust-lang/rust/commit/f3bd222ad9e30245aef89d41defd378eefed70f4"}], "stats": {"total": 39, "additions": 8, "deletions": 31}, "files": [{"sha": "97354ba5d1bd1c2cf044988eaedf7cf536750423", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/de5517c3ae3c9ec007b49958c56be67247fa2713/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5517c3ae3c9ec007b49958c56be67247fa2713/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=de5517c3ae3c9ec007b49958c56be67247fa2713", "patch": "@@ -2,9 +2,7 @@ use super::combine::{CombineFields, RelationDir};\n use super::SubregionOrigin;\n \n use crate::infer::combine::ConstEquateRelation;\n-use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::traits::Obligation;\n-use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::TyVar;\n@@ -130,39 +128,18 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n             (&ty::Opaque(did, ..), _) | (_, &ty::Opaque(did, ..))\n                 if self.fields.define_opaque_types && did.is_local() =>\n             {\n-                let mut generalize = |ty, ty_is_expected| {\n-                    let var = infcx.next_ty_var_id_in_universe(\n-                        TypeVariableOrigin {\n-                            kind: TypeVariableOriginKind::MiscVariable,\n-                            span: self.fields.trace.cause.span,\n-                        },\n-                        ty::UniverseIndex::ROOT,\n-                    );\n-                    self.fields.instantiate(ty, RelationDir::SubtypeOf, var, ty_is_expected)?;\n-                    Ok(infcx.tcx.mk_ty_var(var))\n-                };\n-                let (a, b) = if self.a_is_expected { (a, b) } else { (b, a) };\n-                let (ga, gb) = match (a.kind(), b.kind()) {\n-                    (&ty::Opaque(..), _) => (a, generalize(b, true)?),\n-                    (_, &ty::Opaque(..)) => (generalize(a, false)?, b),\n-                    _ => unreachable!(),\n-                };\n                 self.fields.obligations.extend(\n                     infcx\n-                        .handle_opaque_type(ga, gb, true, &self.fields.trace.cause, self.param_env())\n-                        // Don't leak any generalized type variables out of this\n-                        // subtyping relation in the case of a type error.\n-                        .map_err(|err| {\n-                            let (ga, gb) = self.fields.infcx.resolve_vars_if_possible((ga, gb));\n-                            if let TypeError::Sorts(sorts) = err && sorts.expected == ga && sorts.found == gb {\n-                                TypeError::Sorts(ExpectedFound { expected: a, found: b })\n-                            } else {\n-                                err\n-                            }\n-                        })?\n+                        .handle_opaque_type(\n+                            a,\n+                            b,\n+                            self.a_is_expected,\n+                            &self.fields.trace.cause,\n+                            self.param_env(),\n+                        )?\n                         .obligations,\n                 );\n-                Ok(ga)\n+                Ok(a)\n             }\n             // Optimization of GeneratorWitness relation since we know that all\n             // free regions are replaced with bound regions during construction."}]}