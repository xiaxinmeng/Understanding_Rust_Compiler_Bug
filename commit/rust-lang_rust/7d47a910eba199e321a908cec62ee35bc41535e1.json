{"sha": "7d47a910eba199e321a908cec62ee35bc41535e1", "node_id": "C_kwDOAAsO6NoAKDdkNDdhOTEwZWJhMTk5ZTMyMWE5MDhjZWM2MmVlMzViYzQxNTM1ZTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-30T18:40:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-05T19:34:38Z"}, "message": "Only visit reachable blocks in ConstProp lint.", "tree": {"sha": "06048da6a43a30391efd0f602ef0a14740a97a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06048da6a43a30391efd0f602ef0a14740a97a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d47a910eba199e321a908cec62ee35bc41535e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d47a910eba199e321a908cec62ee35bc41535e1", "html_url": "https://github.com/rust-lang/rust/commit/7d47a910eba199e321a908cec62ee35bc41535e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d47a910eba199e321a908cec62ee35bc41535e1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8cfafcceb3b4418a4e29f98a6d2b09975171872", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cfafcceb3b4418a4e29f98a6d2b09975171872", "html_url": "https://github.com/rust-lang/rust/commit/f8cfafcceb3b4418a4e29f98a6d2b09975171872"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "99bdb831c750888f12ccb352f4b3b31860e0cbca", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7d47a910eba199e321a908cec62ee35bc41535e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d47a910eba199e321a908cec62ee35bc41535e1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=7d47a910eba199e321a908cec62ee35bc41535e1", "patch": "@@ -9,6 +9,7 @@ use rustc_const_eval::interpret::{\n };\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n+use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n@@ -129,6 +130,8 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n+    worklist: Vec<BasicBlock>,\n+    visited_blocks: BitSet<BasicBlock>,\n }\n \n impl<'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'_, 'tcx> {\n@@ -203,7 +206,13 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         )\n         .expect(\"failed to push initial stack frame\");\n \n-        ConstPropagator { ecx, tcx, param_env }\n+        ConstPropagator {\n+            ecx,\n+            tcx,\n+            param_env,\n+            worklist: vec![START_BLOCK],\n+            visited_blocks: BitSet::new_empty(body.basic_blocks.len()),\n+        }\n     }\n \n     fn body(&self) -> &'mir Body<'tcx> {\n@@ -496,12 +505,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         if expected != value_const {\n             // Poison all places this operand references so that further code\n             // doesn't use the invalid value\n-            match cond {\n-                Operand::Move(ref place) | Operand::Copy(ref place) => {\n-                    Self::remove_const(&mut self.ecx, place.local);\n-                }\n-                Operand::Constant(_) => {}\n+            if let Some(place) = cond.place() {\n+                Self::remove_const(&mut self.ecx, place.local);\n             }\n+\n             enum DbgVal<T> {\n                 Val(T),\n                 Underscore,\n@@ -566,7 +573,12 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n     fn visit_body(&mut self, body: &Body<'tcx>) {\n-        for (bb, data) in body.basic_blocks.iter_enumerated() {\n+        while let Some(bb) = self.worklist.pop() {\n+            if !self.visited_blocks.insert(bb) {\n+                continue;\n+            }\n+\n+            let data = &body.basic_blocks[bb];\n             self.visit_basic_block_data(bb, data);\n         }\n     }\n@@ -657,6 +669,17 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             TerminatorKind::Assert { expected, ref msg, ref cond, .. } => {\n                 self.check_assertion(*expected, msg, cond, location);\n             }\n+            TerminatorKind::SwitchInt { ref discr, ref targets } => {\n+                if let Some(ref value) = self.eval_operand(&discr, location)\n+                  && let Some(value_const) = self.use_ecx(location, |this| this.ecx.read_scalar(&value))\n+                  && let Ok(constant) = value_const.try_to_int()\n+                  && let Ok(constant) = constant.to_bits(constant.size())\n+                {\n+                    let target = targets.target_for_value(constant);\n+                    self.worklist.push(target);\n+                    return;\n+                }\n+            }\n             // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n@@ -668,10 +691,11 @@ impl<'tcx> Visitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n-            | TerminatorKind::SwitchInt { .. }\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::InlineAsm { .. } => {}\n         }\n+\n+        self.worklist.extend(terminator.successors());\n     }\n \n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {"}, {"sha": "8cf98e154eaa06c7de31aba1743c74ee98cbc075", "filename": "tests/ui/const_prop/unreachable-bounds.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d47a910eba199e321a908cec62ee35bc41535e1/tests%2Fui%2Fconst_prop%2Funreachable-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d47a910eba199e321a908cec62ee35bc41535e1/tests%2Fui%2Fconst_prop%2Funreachable-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Funreachable-bounds.rs?ref=7d47a910eba199e321a908cec62ee35bc41535e1", "patch": "@@ -0,0 +1,6 @@\n+// Use `build-pass` to ensure const-prop lint runs.\n+// build-pass\n+\n+fn main() {\n+    [()][if false { 1 } else { return }]\n+}"}, {"sha": "2875135424d2003c1b4b573268ddb7c2d80b4315", "filename": "tests/ui/const_prop/unreachable-overflow.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d47a910eba199e321a908cec62ee35bc41535e1/tests%2Fui%2Fconst_prop%2Funreachable-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d47a910eba199e321a908cec62ee35bc41535e1/tests%2Fui%2Fconst_prop%2Funreachable-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Funreachable-overflow.rs?ref=7d47a910eba199e321a908cec62ee35bc41535e1", "patch": "@@ -0,0 +1,10 @@\n+// Use `build-pass` to ensure const-prop lint runs.\n+// build-pass\n+\n+fn main() {\n+    let x = 2u32;\n+    let y = 3u32;\n+    if y <= x {\n+        dbg!(x - y);\n+    }\n+}"}]}