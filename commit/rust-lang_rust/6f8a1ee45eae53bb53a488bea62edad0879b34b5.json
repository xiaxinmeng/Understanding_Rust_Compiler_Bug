{"sha": "6f8a1ee45eae53bb53a488bea62edad0879b34b5", "node_id": "C_kwDOAAsO6NoAKDZmOGExZWU0NWVhZTUzYmI1M2E0ODhiZWE2MmVkYWQwODc5YjM0YjU", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-01-25T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-03-24T22:56:12Z"}, "message": "Check if call return type is visibly uninhabited when building MIR", "tree": {"sha": "d6be245d993d5c53c0098236a0fc4206f9c19d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6be245d993d5c53c0098236a0fc4206f9c19d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f8a1ee45eae53bb53a488bea62edad0879b34b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f8a1ee45eae53bb53a488bea62edad0879b34b5", "html_url": "https://github.com/rust-lang/rust/commit/6f8a1ee45eae53bb53a488bea62edad0879b34b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f8a1ee45eae53bb53a488bea62edad0879b34b5/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b133a7e27c32e822e9ff774e4436f184f5a9752", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b133a7e27c32e822e9ff774e4436f184f5a9752", "html_url": "https://github.com/rust-lang/rust/commit/4b133a7e27c32e822e9ff774e4436f184f5a9752"}], "stats": {"total": 265, "additions": 167, "deletions": 98}, "files": [{"sha": "418042ea665f3e7d3f027c1e0eb31c04726ff92d", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -255,10 +255,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         func: fun,\n                         args,\n                         cleanup: None,\n-                        // FIXME(varkor): replace this with an uninhabitedness-based check.\n-                        // This requires getting access to the current module to call\n-                        // `tcx.is_ty_uninhabited_from`, which is currently tricky to do.\n-                        destination: if expr.ty.is_never() {\n+                        // The presence or absence of a return edge affects control-flow sensitive\n+                        // MIR checks and ultimately whether code is accepted or not. We can only\n+                        // omit the return edge if a return type is visibly uninhabited to a module\n+                        // that makes the call.\n+                        destination: if this.tcx.is_ty_uninhabited_from(\n+                            this.parent_module,\n+                            expr.ty,\n+                            this.param_env,\n+                        ) {\n                             None\n                         } else {\n                             Some((destination, success))"}, {"sha": "c4db2b3278642289d03863ba119430de0ac43780", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -350,6 +350,7 @@ struct Builder<'a, 'tcx> {\n \n     def_id: DefId,\n     hir_id: hir::HirId,\n+    parent_module: DefId,\n     check_overflow: bool,\n     fn_span: Span,\n     arg_count: usize,\n@@ -807,15 +808,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         );\n \n         let lint_level = LintLevel::Explicit(hir_id);\n+        let param_env = tcx.param_env(def.did);\n         let mut builder = Builder {\n             thir,\n             tcx,\n             infcx,\n             typeck_results: tcx.typeck_opt_const_arg(def),\n             region_scope_tree: tcx.region_scope_tree(def.did),\n-            param_env: tcx.param_env(def.did),\n+            param_env,\n             def_id: def.did.to_def_id(),\n             hir_id,\n+            parent_module: tcx.parent_module(hir_id).to_def_id(),\n             check_overflow,\n             cfg: CFG { basic_blocks: IndexVec::new() },\n             fn_span: span,"}, {"sha": "bccb9e4c7586254462e1164cb29b2d81fe4a5261", "filename": "src/test/codegen/set-discriminant-invalid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -28,7 +28,7 @@ impl IntoError<Error> for Api\n     #[no_mangle]\n     fn into_error(self, error: Self::Source) -> Error {\n         Error::Api {\n-            source: (|v| v)(error),\n+            source: error,\n         }\n     }\n }"}, {"sha": "3b890e4be2e290f4ce98f0f44797418eed439191", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -4,21 +4,22 @@\n   fn h() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-diverging.rs:21:12: 21:12\n       let _1: (!, !);                      // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _2: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+     let mut _9: ();                      // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n-+     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n++     let mut _2: (!, !);                  // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _3: fn() -> ! {sleep};       // in scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++     let mut _10: ();                     // in scope 0 at $DIR/inline-diverging.rs:27:13: 27:16\n++     let mut _11: ();                     // in scope 0 at $DIR/inline-diverging.rs:28:13: 28:16\n +     scope 1 (inlined call_twice::<!, fn() -> ! {sleep}>) { // at $DIR/inline-diverging.rs:22:5: 22:22\n-+         debug f => _2;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n-+         let _3: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         let mut _4: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         let mut _6: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n-+         let mut _7: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n-+         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n++         debug f => _3;                   // in scope 1 at $DIR/inline-diverging.rs:26:36: 26:37\n++         let _4: !;                       // in scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         let mut _5: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         let mut _7: &fn() -> ! {sleep};  // in scope 1 at $DIR/inline-diverging.rs:28:13: 28:14\n++         let mut _8: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:6: 29:7\n++         let mut _9: !;                   // in scope 1 at $DIR/inline-diverging.rs:29:9: 29:10\n +         scope 2 {\n-+             debug a => _3;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n-+             let _5: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n++             debug a => _4;               // in scope 2 at $DIR/inline-diverging.rs:27:9: 27:10\n++             let _6: !;                   // in scope 2 at $DIR/inline-diverging.rs:28:9: 28:10\n +             scope 3 {\n-+                 debug b => _5;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n++                 debug b => _6;           // in scope 3 at $DIR/inline-diverging.rs:28:9: 28:10\n +             }\n +             scope 6 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline-diverging.rs:28:13: 28:16\n +                 scope 7 (inlined sleep) { // at $SRC_DIR/core/src/ops/function.rs:LL:COL\n@@ -33,27 +34,25 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n--         _1 = call_twice::<!, fn() -> ! {sleep}>(sleep) -> bb1; // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n+-         call_twice::<!, fn() -> ! {sleep}>(sleep); // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n +         StorageLive(_2);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n-+         _2 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++         StorageLive(_3);                 // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n++         _3 = sleep;                      // scope 0 at $DIR/inline-diverging.rs:22:5: 22:22\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-diverging.rs:22:5: 22:15\n -                                          // + literal: Const { ty: fn(fn() -> ! {sleep}) -> (!, !) {call_twice::<!, fn() -> ! {sleep}>}, val: Value(Scalar(<ZST>)) }\n -                                          // mir::Constant\n                                            // + span: $DIR/inline-diverging.rs:22:16: 22:21\n                                            // + literal: Const { ty: fn() -> ! {sleep}, val: Value(Scalar(<ZST>)) }\n-+         StorageLive(_3);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n-+         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         _4 = &_2;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n-+         StorageLive(_9);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n-+         _9 = const ();                   // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         StorageLive(_4);                 // scope 1 at $DIR/inline-diverging.rs:27:9: 27:10\n++         StorageLive(_5);                 // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         _5 = &_3;                        // scope 1 at $DIR/inline-diverging.rs:27:13: 27:14\n++         StorageLive(_10);                // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n++         _10 = const ();                  // scope 1 at $DIR/inline-diverging.rs:27:13: 27:16\n +         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n-      }\n-  \n-      bb1: {\n--         StorageDead(_1);                 // scope 0 at $DIR/inline-diverging.rs:22:22: 22:23\n--         _0 = const ();                   // scope 0 at $DIR/inline-diverging.rs:21:12: 23:2\n--         return;                          // scope 0 at $DIR/inline-diverging.rs:23:2: 23:2\n++     }\n++ \n++     bb1: {\n +         goto -> bb1;                     // scope 5 at $DIR/inline-diverging.rs:39:5: 39:12\n       }\n   }"}, {"sha": "4aff4445158098efdaa023a3393314f1d9e207d6", "filename": "src/test/mir-opt/issue_72181_1.main.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_72181_1.main.mir_map.0.mir?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-72181-1.rs:16:9: 16:10\n         StorageLive(_3);                 // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n         _3 = ();                         // scope 2 at $DIR/issue-72181-1.rs:17:41: 17:43\n-        _2 = transmute::<(), Void>(move _3) -> [return: bb1, unwind: bb4]; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n+        transmute::<(), Void>(move _3) -> bb4; // scope 2 at $DIR/issue-72181-1.rs:17:9: 17:44\n                                          // mir::Constant\n                                          // + span: $DIR/issue-72181-1.rs:17:9: 17:40\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Void {transmute::<(), Void>}, val: Value(Scalar(<ZST>)) }"}, {"sha": "98e22efa7a9bf228f236e97fc7715163c54c8b8d", "filename": "src/test/ui/consts/const-eval/ub-enum.32bit.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.32bit.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -119,27 +119,17 @@ LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::tran\n                78 00 00 00 ff ff ff ff                         \u2502 x.......\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:92:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:92:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-variant(Ok)>.0.1: encountered a value of uninhabited type Never\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 4) {\n-               00 00 00 00 00 00 00 00                         \u2502 ........\n-           }\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:94:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:94:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-variant(Ok)>.0.1: encountered a value of the never type `!`\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 4) {\n-               00 00 00 00 00 00 00 00                         \u2502 ........\n-           }\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error: aborting due to 13 previous errors\n "}, {"sha": "18b16fde31e74b8721843cf230a79d36cf8e0597", "filename": "src/test/ui/consts/const-eval/ub-enum.64bit.stderr", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.64bit.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -119,27 +119,17 @@ LL | const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::tran\n                78 00 00 00 ff ff ff ff                         \u2502 x.......\n            }\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:92:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:92:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-variant(Ok)>.0.1: encountered a value of uninhabited type Never\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 4) {\n-               00 00 00 00 00 00 00 00                         \u2502 ........\n-           }\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-enum.rs:94:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ub-enum.rs:94:77\n    |\n LL | const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at .<enum-variant(Ok)>.0.1: encountered a value of the never type `!`\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 8, align: 4) {\n-               00 00 00 00 00 00 00 00                         \u2502 ........\n-           }\n+   |                                                                             ^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n error: aborting due to 13 previous errors\n "}, {"sha": "86288685303cab71d3d733a3d6cfda0311fead9d", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -90,9 +90,9 @@ const BAD_OPTION_CHAR: Option<(char, char)> = Some(('x', unsafe { mem::transmute\n // All variants are uninhabited but also have data.\n // Use `0` as constant to make behavior endianess-independent.\n const BAD_UNINHABITED_WITH_DATA1: Result<(i32, Never), (i32, !)> = unsafe { mem::transmute(0u64) };\n-//~^ ERROR is undefined behavior\n+//~^ ERROR evaluation of constant value failed\n const BAD_UNINHABITED_WITH_DATA2: Result<(i32, !), (i32, Never)> = unsafe { mem::transmute(0u64) };\n-//~^ ERROR is undefined behavior\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "bbb8511a65410ca89b838f36a7d1871415867cf8", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.32bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.32bit.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -10,14 +10,11 @@ LL |     unsafe { std::mem::transmute(()) }\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:16:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:16:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "bbb8511a65410ca89b838f36a7d1871415867cf8", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -10,14 +10,11 @@ LL |     unsafe { std::mem::transmute(()) }\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    |                          ----- inside `FOO` at $DIR/validate_uninhabited_zsts.rs:13:26\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:16:1\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/validate_uninhabited_zsts.rs:16:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed at [0]: encountered a value of uninhabited type Empty\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n warning: the type `!` does not permit zero-initialization\n   --> $DIR/validate_uninhabited_zsts.rs:4:14"}, {"sha": "990d5a308238ffda3a8baf0ee06805d156a7f43a", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -14,7 +14,7 @@ const FOO: [Empty; 3] = [foo(); 3];\n \n #[warn(const_err)]\n const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n-//~^ ERROR it is undefined behavior to use this value\n+//~^ ERROR evaluation of constant value failed\n //~| WARN the type `Empty` does not permit zero-initialization\n \n fn main() {"}, {"sha": "92305609c835c6248b50d13477d9fd0c0cec387a", "filename": "src/test/ui/generator/issue-93161.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-93161.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -1,5 +1,6 @@\n // edition:2021\n // run-pass\n+// compile-flags: -Zdrop-tracking\n \n #![feature(never_type)]\n \n@@ -32,7 +33,7 @@ fn never() -> Never {\n }\n \n async fn includes_never(crash: bool, x: u32) -> u32 {\n-    let mut result = async { x * x }.await;\n+    let result = async { x * x }.await;\n     if !crash {\n         return result;\n     }"}, {"sha": "f5c6f444317feb7cbc643dbb43b15e1647ec6f8b", "filename": "src/test/ui/statics/uninhabited-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -11,11 +11,11 @@ extern {\n \n static VOID2: Void = unsafe { std::mem::transmute(()) }; //~ ERROR static of uninhabited type\n //~| WARN: previously accepted\n-//~| ERROR undefined behavior to use this value\n+//~| ERROR could not evaluate static initializer\n //~| WARN: type `Void` does not permit zero-initialization\n static NEVER2: Void = unsafe { std::mem::transmute(()) }; //~ ERROR static of uninhabited type\n //~| WARN: previously accepted\n-//~| ERROR undefined behavior to use this value\n+//~| ERROR could not evaluate static initializer\n //~| WARN: type `Void` does not permit zero-initialization\n \n fn main() {}"}, {"sha": "1e0becb7d5aa87662c33250585821911f2962a78", "filename": "src/test/ui/statics/uninhabited-static.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Funinhabited-static.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -43,23 +43,17 @@ LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n    = note: for more information, see issue #74840 <https://github.com/rust-lang/rust/issues/74840>\n    = note: uninhabited statics cannot be initialized, and any access would be an immediate error\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/uninhabited-static.rs:12:1\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/uninhabited-static.rs:12:31\n    |\n LL | static VOID2: Void = unsafe { std::mem::transmute(()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/uninhabited-static.rs:16:1\n+error[E0080]: could not evaluate static initializer\n+  --> $DIR/uninhabited-static.rs:16:32\n    |\n LL | static NEVER2: Void = unsafe { std::mem::transmute(()) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Void\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-   = note: the raw bytes of the constant (size: 0, align: 1) {}\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ transmuting to uninhabited type\n \n warning: the type `Void` does not permit zero-initialization\n   --> $DIR/uninhabited-static.rs:12:31"}, {"sha": "b37ec2696de2f95cbc6dc8980ec9a47e73d40e3f", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -0,0 +1,29 @@\n+// Verifies that MIR building for a call expression respects\n+// privacy when checking if a call return type is uninhabited.\n+\n+pub mod widget {\n+    enum Unimplemented {}\n+    pub struct Widget(Unimplemented);\n+\n+    impl Widget {\n+        pub fn new() -> Widget {\n+            todo!();\n+        }\n+    }\n+\n+    pub fn f() {\n+        let x: &mut u32;\n+        Widget::new();\n+        // Ok. Widget type returned from new is known to be uninhabited\n+        // and the following code is considered unreachable.\n+        *x = 1;\n+    }\n+}\n+\n+fn main() {\n+    let y: &mut u32;\n+    widget::Widget::new();\n+    // Error. Widget type is not known to be uninhabited here,\n+    // so the following code is considered reachable.\n+    *y = 2; //~ ERROR use of possibly-uninitialized variable\n+}"}, {"sha": "fb1953411685eb0dbdd9171d90a499da4a4a1629", "filename": "src/test/ui/uninhabited/privately-uninhabited-mir-call.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Fprivately-uninhabited-mir-call.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/privately-uninhabited-mir-call.rs:28:5\n+   |\n+LL |     *y = 2;\n+   |     ^^^^^^ use of possibly-uninitialized `y`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}, {"sha": "e7960960774fcdf54641b50b5c913cc4482f57bc", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.mir.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.mir.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -1,11 +1,27 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-45087-unreachable-unsafe.rs:6:5\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:7:5\n    |\n LL |     *(1 as *mut u32) = 42;\n    |     ^^^^^^^^^^^^^^^^^^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to previous error\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:17:5\n+   |\n+LL |     *a = 1;\n+   |     ^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:29:5\n+   |\n+LL |     *b = 1;\n+   |     ^^^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}, {"sha": "3e3da667c0b0883bb0636cc460c6e4dd0e8c4acc", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.rs?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -1,3 +1,4 @@\n+// Verify that unreachable code undergoes unsafety checks.\n // revisions: mir thir\n // [thir]compile-flags: -Z thir-unsafeck\n \n@@ -6,3 +7,25 @@ fn main() {\n     *(1 as *mut u32) = 42;\n     //~^ ERROR dereference of raw pointer is unsafe\n }\n+\n+fn panic() -> ! {\n+    panic!();\n+}\n+\n+fn f(a: *mut u32) {\n+    panic();\n+    *a = 1;\n+    //~^ ERROR dereference of raw pointer is unsafe\n+}\n+\n+enum Void {}\n+\n+fn uninhabited() -> Void {\n+    panic!();\n+}\n+\n+fn g(b: *mut u32) {\n+    uninhabited();\n+    *b = 1;\n+    //~^ ERROR dereference of raw pointer is unsafe\n+}"}, {"sha": "e81adad45075054682737061ac3c3d64999b478a", "filename": "src/test/ui/unsafe/issue-45087-unreachable-unsafe.thir.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f8a1ee45eae53bb53a488bea62edad0879b34b5/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-45087-unreachable-unsafe.thir.stderr?ref=6f8a1ee45eae53bb53a488bea62edad0879b34b5", "patch": "@@ -1,11 +1,27 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/issue-45087-unreachable-unsafe.rs:6:5\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:7:5\n    |\n LL |     *(1 as *mut u32) = 42;\n    |     ^^^^^^^^^^^^^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n-error: aborting due to previous error\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:17:5\n+   |\n+LL |     *a = 1;\n+   |     ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n+  --> $DIR/issue-45087-unreachable-unsafe.rs:29:5\n+   |\n+LL |     *b = 1;\n+   |     ^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}