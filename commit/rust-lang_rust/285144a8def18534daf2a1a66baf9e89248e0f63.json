{"sha": "285144a8def18534daf2a1a66baf9e89248e0f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NTE0NGE4ZGVmMTg1MzRkYWYyYTFhNjZiYWY5ZTg5MjQ4ZTBmNjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-14T17:16:24Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:19:16Z"}, "message": "Move NativeLibraryKind to rustc_session", "tree": {"sha": "918265f311ff251506ee157dba80662caa0d9890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/918265f311ff251506ee157dba80662caa0d9890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/285144a8def18534daf2a1a66baf9e89248e0f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/285144a8def18534daf2a1a66baf9e89248e0f63", "html_url": "https://github.com/rust-lang/rust/commit/285144a8def18534daf2a1a66baf9e89248e0f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/285144a8def18534daf2a1a66baf9e89248e0f63/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f03d8f305a80778ae034b0205803ea3edc297ac8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03d8f305a80778ae034b0205803ea3edc297ac8", "html_url": "https://github.com/rust-lang/rust/commit/f03d8f305a80778ae034b0205803ea3edc297ac8"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "324b01316fa4a63216b153ef005240e9e332cc24", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=285144a8def18534daf2a1a66baf9e89248e0f63", "patch": "@@ -20,6 +20,7 @@ use rustc_target::spec::Target;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_macros::HashStable;\n \n+pub use rustc_session::utils::NativeLibraryKind;\n pub use self::NativeLibraryKind::*;\n \n // lonely orphan structs and enums looking for a better home\n@@ -94,21 +95,6 @@ pub enum LinkagePreference {\n     RequireStatic,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         RustcEncodable, RustcDecodable, HashStable)]\n-pub enum NativeLibraryKind {\n-    /// native static library (.a archive)\n-    NativeStatic,\n-    /// native static library, which doesn't get bundled into .rlibs\n-    NativeStaticNobundle,\n-    /// macOS-specific\n-    NativeFramework,\n-    /// Windows dynamic library without import library.\n-    NativeRawDylib,\n-    /// default way to specify a dynamic library\n-    NativeUnknown,\n-}\n-\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,"}, {"sha": "1aea224e5665b4170c9316eb4d5aaf9c8c702164", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=285144a8def18534daf2a1a66baf9e89248e0f63", "patch": "@@ -2,7 +2,7 @@\n //! command-line options.\n \n use rustc_session::lint;\n-use crate::middle::cstore;\n+use rustc_session::utils::NativeLibraryKind;\n use crate::session::{early_error, early_warn, Session};\n use crate::session::search_paths::SearchPath;\n \n@@ -415,7 +415,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> [TRACKED],\n+        libs: Vec<(String, Option<String>, Option<NativeLibraryKind>)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],\n@@ -2379,7 +2379,7 @@ fn select_debuginfo(\n fn parse_libs(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, Option<cstore::NativeLibraryKind>)> {\n+) -> Vec<(String, Option<String>, Option<NativeLibraryKind>)> {\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n@@ -2390,10 +2390,12 @@ fn parse_libs(\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n                 (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(cstore::NativeUnknown)),\n-                (Some(name), \"framework\") => (name, Some(cstore::NativeFramework)),\n-                (Some(name), \"static\") => (name, Some(cstore::NativeStatic)),\n-                (Some(name), \"static-nobundle\") => (name, Some(cstore::NativeStaticNobundle)),\n+                (Some(name), \"dylib\") => (name, Some(NativeLibraryKind::NativeUnknown)),\n+                (Some(name), \"framework\") => (name, Some(NativeLibraryKind::NativeFramework)),\n+                (Some(name), \"static\") => (name, Some(NativeLibraryKind::NativeStatic)),\n+                (Some(name), \"static-nobundle\") => {\n+                    (name, Some(NativeLibraryKind::NativeStaticNobundle))\n+                }\n                 (_, s) => {\n                     early_error(\n                         error_format,\n@@ -2405,7 +2407,8 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == Some(cstore::NativeStaticNobundle) && !nightly_options::is_nightly_build() {\n+            if kind == Some(NativeLibraryKind::NativeStaticNobundle) &&\n+                !nightly_options::is_nightly_build() {\n                 early_error(\n                     error_format,\n                     &format!(\n@@ -2855,7 +2858,7 @@ impl PpMode {\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n     use rustc_session::lint;\n-    use crate::middle::cstore;\n+    use rustc_session::utils::NativeLibraryKind;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n@@ -2913,7 +2916,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(Option<cstore::NativeLibraryKind>);\n+    impl_dep_tracking_hash_via_hash!(Option<NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n@@ -2924,7 +2927,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n-    impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n+    impl_dep_tracking_hash_via_hash!(NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n@@ -2940,7 +2943,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!((\n         String,\n         Option<String>,\n-        Option<cstore::NativeLibraryKind>\n+        Option<NativeLibraryKind>\n     ));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);"}, {"sha": "ad593398a52bae2638f4b6f7566256edc95e3f74", "filename": "src/librustc_session/utils.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc_session%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/285144a8def18534daf2a1a66baf9e89248e0f63/src%2Flibrustc_session%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Futils.rs?ref=285144a8def18534daf2a1a66baf9e89248e0f63", "patch": "@@ -7,3 +7,19 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n \n     format!(\"{:.3}\", secs)\n }\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum NativeLibraryKind {\n+    /// native static library (.a archive)\n+    NativeStatic,\n+    /// native static library, which doesn't get bundled into .rlibs\n+    NativeStaticNobundle,\n+    /// macOS-specific\n+    NativeFramework,\n+    /// Windows dynamic library without import library.\n+    NativeRawDylib,\n+    /// default way to specify a dynamic library\n+    NativeUnknown,\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(NativeLibraryKind);"}]}