{"sha": "bb868f17faed948e261f381b8511f7cac82c3041", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODY4ZjE3ZmFlZDk0OGUyNjFmMzgxYjg1MTFmN2NhYzgyYzMwNDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-09T09:45:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-09T09:45:33Z"}, "message": "Auto merge of #32071 - jseyfried:parse_pub, r=nikomatsakis\n\nMake errors for unnecessary visibility qualifiers consistent\n\nThis PR refactors away `syntax::parse::parser::ParsePub` so that unnecessary visibility qualifiers on variant fields are reported not by the parser but by `privacy::SanePrivacyVisitor` (thanks to @petrochenkov's drive-by improvements in #31919).\n\nr? @nikomatsakis", "tree": {"sha": "9c15ddcf578581f644115190d41d0e667185d8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c15ddcf578581f644115190d41d0e667185d8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb868f17faed948e261f381b8511f7cac82c3041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb868f17faed948e261f381b8511f7cac82c3041", "html_url": "https://github.com/rust-lang/rust/commit/bb868f17faed948e261f381b8511f7cac82c3041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb868f17faed948e261f381b8511f7cac82c3041/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1704f76efdb265dc852f6fbac0452cb2a862e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1704f76efdb265dc852f6fbac0452cb2a862e02", "html_url": "https://github.com/rust-lang/rust/commit/e1704f76efdb265dc852f6fbac0452cb2a862e02"}, {"sha": "498059bb65e1be55d8952070a4cc5b4d06e9d695", "url": "https://api.github.com/repos/rust-lang/rust/commits/498059bb65e1be55d8952070a4cc5b4d06e9d695", "html_url": "https://github.com/rust-lang/rust/commit/498059bb65e1be55d8952070a4cc5b4d06e9d695"}], "stats": {"total": 70, "additions": 17, "deletions": 53}, "files": [{"sha": "5884be401503df31374d1c4e666107483bbc7838", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 34, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bb868f17faed948e261f381b8511f7cac82c3041/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb868f17faed948e261f381b8511f7cac82c3041/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bb868f17faed948e261f381b8511f7cac82c3041", "patch": "@@ -99,13 +99,6 @@ pub enum BoundParsingMode {\n     Modified,\n }\n \n-/// `pub` should be parsed in struct fields and not parsed in variant fields\n-#[derive(Clone, Copy, PartialEq)]\n-pub enum ParsePub {\n-    Yes,\n-    No,\n-}\n-\n #[derive(Clone, Copy, PartialEq)]\n pub enum SemiColonMode {\n     Break,\n@@ -5111,20 +5104,17 @@ impl<'a> Parser<'a> {\n                 VariantData::Unit(ast::DUMMY_NODE_ID)\n             } else {\n                 // If we see: `struct Foo<T> where T: Copy { ... }`\n-                VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n-                                    ast::DUMMY_NODE_ID)\n+                VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n             }\n         // No `where` so: `struct Foo<T>;`\n         } else if self.eat(&token::Semi) {\n             VariantData::Unit(ast::DUMMY_NODE_ID)\n         // Record-style struct definition\n         } else if self.token == token::OpenDelim(token::Brace) {\n-            VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::Yes)),\n-                                ast::DUMMY_NODE_ID)\n+            VariantData::Struct(try!(self.parse_record_struct_body()), ast::DUMMY_NODE_ID)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::Yes)),\n-                                          ast::DUMMY_NODE_ID);\n+            let body = VariantData::Tuple(try!(self.parse_tuple_struct_body()), ast::DUMMY_NODE_ID);\n             generics.where_clause = try!(self.parse_where_clause());\n             try!(self.expect(&token::Semi));\n             body\n@@ -5137,13 +5127,11 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Struct(vdata, generics), None))\n     }\n \n-    pub fn parse_record_struct_body(&mut self,\n-                                    parse_pub: ParsePub)\n-                                    -> PResult<'a, Vec<StructField>> {\n+    pub fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         let mut fields = Vec::new();\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(try!(self.parse_struct_decl_field(parse_pub)));\n+                fields.push(try!(self.parse_struct_decl_field()));\n             }\n \n             self.bump();\n@@ -5157,9 +5145,7 @@ impl<'a> Parser<'a> {\n         Ok(fields)\n     }\n \n-    pub fn parse_tuple_struct_body(&mut self,\n-                                   parse_pub: ParsePub)\n-                                   -> PResult<'a, Vec<StructField>> {\n+    pub fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         let fields = try!(self.parse_unspanned_seq(\n@@ -5170,13 +5156,7 @@ impl<'a> Parser<'a> {\n                 let attrs = try!(p.parse_outer_attributes());\n                 let lo = p.span.lo;\n                 let struct_field_ = ast::StructField_ {\n-                    kind: UnnamedField (\n-                        if parse_pub == ParsePub::Yes {\n-                            try!(p.parse_visibility())\n-                        } else {\n-                            Visibility::Inherited\n-                        }\n-                    ),\n+                    kind: UnnamedField(try!(p.parse_visibility())),\n                     id: ast::DUMMY_NODE_ID,\n                     ty: try!(p.parse_ty_sum()),\n                     attrs: attrs,\n@@ -5211,15 +5191,11 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an element of a struct definition\n-    fn parse_struct_decl_field(&mut self, parse_pub: ParsePub) -> PResult<'a, StructField> {\n+    fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n \n         let attrs = try!(self.parse_outer_attributes());\n \n         if self.eat_keyword(keywords::Pub) {\n-            if parse_pub == ParsePub::No {\n-                let span = self.last_span;\n-                self.span_err(span, \"`pub` is not allowed here\");\n-            }\n             return self.parse_single_struct_field(Visibility::Public, attrs);\n         }\n \n@@ -5585,11 +5561,11 @@ impl<'a> Parser<'a> {\n             if self.check(&token::OpenDelim(token::Brace)) {\n                 // Parse a struct variant.\n                 all_nullary = false;\n-                struct_def = VariantData::Struct(try!(self.parse_record_struct_body(ParsePub::No)),\n+                struct_def = VariantData::Struct(try!(self.parse_record_struct_body()),\n                                                  ast::DUMMY_NODE_ID);\n             } else if self.check(&token::OpenDelim(token::Paren)) {\n                 all_nullary = false;\n-                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body(ParsePub::No)),\n+                struct_def = VariantData::Tuple(try!(self.parse_tuple_struct_body()),\n                                                 ast::DUMMY_NODE_ID);\n             } else if self.eat(&token::Eq) {\n                 disr_expr = Some(try!(self.parse_expr()));"}, {"sha": "268b937c2916581f1631074ef823f0df4d675e6e", "filename": "src/test/compile-fail/useless-pub.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb868f17faed948e261f381b8511f7cac82c3041/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb868f17faed948e261f381b8511f7cac82c3041/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-pub.rs?ref=bb868f17faed948e261f381b8511f7cac82c3041", "patch": "@@ -18,4 +18,11 @@ impl E for A {\n     pub fn foo(&self) {}             //~ ERROR: unnecessary visibility\n }\n \n+enum Foo {\n+    V1 { pub f: i32 }, //~ ERROR unnecessary visibility qualifier\n+                       //| NOTE visibility qualifiers have no effect on variant fields\n+    V2(pub i32), //~ ERROR unnecessary visibility qualifier\n+                 //| NOTE visibility qualifiers have no effect on variant fields\n+}\n+\n fn main() {}"}, {"sha": "1824e32c425c44f65d94c4e644b9fbec31c5dab9", "filename": "src/test/parse-fail/struct-variant-no-pub.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1704f76efdb265dc852f6fbac0452cb2a862e02/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1704f76efdb265dc852f6fbac0452cb2a862e02/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fstruct-variant-no-pub.rs?ref=e1704f76efdb265dc852f6fbac0452cb2a862e02", "patch": "@@ -1,19 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-enum Foo {\n-    Bar {\n-        pub a: isize //~ ERROR: `pub` is not allowed here\n-    }\n-}\n-\n-fn main() {}"}]}