{"sha": "664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "node_id": "C_kwDOAAsO6NoAKDY2NGU4YTljZTU0MWYwOTIxYWYyM2RjOWU0OGI2Mzg2YjM0ZThiY2Y", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-05-22T10:18:32Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-05-22T10:18:32Z"}, "message": "[RFC 2011] Library code", "tree": {"sha": "981a0136a43653845adcd4ebccb13551f58e569b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/981a0136a43653845adcd4ebccb13551f58e569b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "html_url": "https://github.com/rust-lang/rust/commit/664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acfd327fd4e3a302ebb0a077f422a527a7935333", "url": "https://api.github.com/repos/rust-lang/rust/commits/acfd327fd4e3a302ebb0a077f422a527a7935333", "html_url": "https://github.com/rust-lang/rust/commit/acfd327fd4e3a302ebb0a077f422a527a7935333"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "212b637d34365811bced93c8142f46c0b23434a0", "filename": "library/core/src/asserting.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Fsrc%2Fasserting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Fsrc%2Fasserting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fasserting.rs?ref=664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "patch": "@@ -0,0 +1,109 @@\n+// Contains the machinery necessary to print useful `assert!` messages. Not intended for public\n+// usage, not even nightly use-cases.\n+//\n+// Based on https://github.com/dtolnay/case-studies/tree/master/autoref-specialization. When\n+// 'specialization' is robust enough (5 years? 10 years? Never?), `Capture` can be specialized\n+// to [Printable].\n+\n+#![allow(missing_debug_implementations)]\n+#![doc(hidden)]\n+#![unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+\n+use crate::{\n+    fmt::{Debug, Formatter},\n+    marker::PhantomData,\n+};\n+\n+// ***** TryCapture - Generic *****\n+\n+/// Marker used by [Capture]\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub struct TryCaptureWithoutDebug;\n+\n+/// Catches an arbitrary `E` and modifies `to` accordingly\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub trait TryCaptureGeneric<E, M> {\n+    /// Similar to [TryCapturePrintable] but generic to any `E`.\n+    fn try_capture(&self, to: &mut Capture<E, M>);\n+}\n+\n+impl<E> TryCaptureGeneric<E, TryCaptureWithoutDebug> for &Wrapper<&E> {\n+    #[inline]\n+    fn try_capture(&self, _: &mut Capture<E, TryCaptureWithoutDebug>) {}\n+}\n+\n+impl<E> Debug for Capture<E, TryCaptureWithoutDebug> {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {\n+        f.write_str(\"N/A\")\n+    }\n+}\n+\n+// ***** TryCapture - Printable *****\n+\n+/// Marker used by [Capture]\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub struct TryCaptureWithDebug;\n+\n+/// Catches an arbitrary `E: Printable` and modifies `to` accordingly\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub trait TryCapturePrintable<E, M> {\n+    /// Similar as [TryCaptureGeneric] but specialized to any `E: Printable`.\n+    fn try_capture(&self, to: &mut Capture<E, M>);\n+}\n+\n+impl<E> TryCapturePrintable<E, TryCaptureWithDebug> for Wrapper<&E>\n+where\n+    E: Printable,\n+{\n+    #[inline]\n+    fn try_capture(&self, to: &mut Capture<E, TryCaptureWithDebug>) {\n+        to.elem = Some(*self.0);\n+    }\n+}\n+\n+impl<E> Debug for Capture<E, TryCaptureWithDebug>\n+where\n+    E: Printable,\n+{\n+    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), core::fmt::Error> {\n+        match self.elem {\n+            None => f.write_str(\"N/A\"),\n+            Some(ref value) => Debug::fmt(value, f),\n+        }\n+    }\n+}\n+\n+// ***** Others *****\n+\n+/// All possible captured `assert!` elements\n+///\n+/// # Types\n+///\n+/// * `E`: **E**lement that is going to be displayed.\n+/// * `M`: **M**arker used to differentiate [Capture]s in regards to [Debug].\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub struct Capture<E, M> {\n+    // If None, then `E` does not implements [Printable] or `E` wasn't evaluated (`assert!( ... )`\n+    // short-circuited).\n+    //\n+    // If Some, then `E` implements [Printable] and was evaluated.\n+    pub elem: Option<E>,\n+    phantom: PhantomData<M>,\n+}\n+\n+impl<M, T> Capture<M, T> {\n+    #[inline]\n+    pub const fn new() -> Self {\n+        Self { elem: None, phantom: PhantomData }\n+    }\n+}\n+\n+/// Necessary for the implementations of `TryCapture*`\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub struct Wrapper<T>(pub T);\n+\n+/// Tells which elements can be copied and displayed\n+#[unstable(feature = \"generic_assert_internals\", issue = \"44838\")]\n+pub trait Printable: Copy + Debug {}\n+\n+impl<T> Printable for T where T: Copy + Debug {}"}, {"sha": "cfcc3ffb9c092c5755f27dc3bcf76273682106f1", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "patch": "@@ -310,6 +310,7 @@ pub mod ops;\n pub mod any;\n pub mod array;\n pub mod ascii;\n+pub mod asserting;\n #[unstable(feature = \"async_iterator\", issue = \"79024\")]\n pub mod async_iter;\n pub mod cell;"}, {"sha": "4b626ba6f2d5d62cdc6c39e86a865bd3d6ffcd18", "filename": "library/core/tests/asserting.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Ftests%2Fasserting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Ftests%2Fasserting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fasserting.rs?ref=664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "patch": "@@ -0,0 +1,37 @@\n+use core::asserting::{Capture, TryCaptureGeneric, TryCapturePrintable, Wrapper};\n+\n+macro_rules! test {\n+    ($test_name:ident, $elem:expr, $captured_elem:expr, $output:literal) => {\n+        #[test]\n+        fn $test_name() {\n+            let elem = $elem;\n+            let mut capture = Capture::new();\n+            assert!(capture.elem == None);\n+            (&Wrapper(&elem)).try_capture(&mut capture);\n+            assert!(capture.elem == $captured_elem);\n+            assert_eq!(format!(\"{:?}\", capture), $output);\n+        }\n+    };\n+}\n+\n+#[derive(Debug, PartialEq)]\n+struct NoCopy;\n+\n+#[derive(PartialEq)]\n+struct NoCopyNoDebug;\n+\n+#[derive(Clone, Copy, PartialEq)]\n+struct NoDebug;\n+\n+test!(\n+    capture_with_non_copyable_and_non_debugabble_elem_has_correct_params,\n+    NoCopyNoDebug,\n+    None,\n+    \"N/A\"\n+);\n+\n+test!(capture_with_non_copyable_elem_has_correct_params, NoCopy, None, \"N/A\");\n+\n+test!(capture_with_non_debugabble_elem_has_correct_params, NoDebug, None, \"N/A\");\n+\n+test!(capture_with_copyable_and_debugabble_elem_has_correct_params, 1i32, Some(1i32), \"1\");"}, {"sha": "9ea374e1045a56b372dd401dfcd83d0fd3905764", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664e8a9ce541f0921af23dc9e48b6386b34e8bcf/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=664e8a9ce541f0921af23dc9e48b6386b34e8bcf", "patch": "@@ -35,6 +35,7 @@\n #![feature(float_minimum_maximum)]\n #![feature(future_join)]\n #![feature(future_poll_fn)]\n+#![feature(generic_assert_internals)]\n #![feature(array_try_from_fn)]\n #![feature(hasher_prefixfree_extras)]\n #![feature(hashmap_internals)]\n@@ -104,6 +105,7 @@ mod alloc;\n mod any;\n mod array;\n mod ascii;\n+mod asserting;\n mod atomic;\n mod bool;\n mod cell;"}]}