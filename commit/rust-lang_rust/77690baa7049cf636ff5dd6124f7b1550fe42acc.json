{"sha": "77690baa7049cf636ff5dd6124f7b1550fe42acc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjkwYmFhNzA0OWNmNjM2ZmY1ZGQ2MTI0ZjdiMTU1MGZlNDJhY2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T08:15:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T09:07:42Z"}, "message": "rustdoc: Attach the AST node id to fndocs", "tree": {"sha": "043676671745927c16fe0a2a0844e3c916c779cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043676671745927c16fe0a2a0844e3c916c779cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77690baa7049cf636ff5dd6124f7b1550fe42acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77690baa7049cf636ff5dd6124f7b1550fe42acc", "html_url": "https://github.com/rust-lang/rust/commit/77690baa7049cf636ff5dd6124f7b1550fe42acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77690baa7049cf636ff5dd6124f7b1550fe42acc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a9ba240a07e7e9494fa53b0001282d795d1be52", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9ba240a07e7e9494fa53b0001282d795d1be52", "html_url": "https://github.com/rust-lang/rust/commit/7a9ba240a07e7e9494fa53b0001282d795d1be52"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "a2a34537085057548bc6cee79658e3cd0a169ceb", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=77690baa7049cf636ff5dd6124f7b1550fe42acc", "patch": "@@ -1,13 +1,18 @@\n export parse_fn;\n \n-fn parse_fn(name: str, attrs: [ast::attribute]) -> doc::fndoc {\n+fn parse_fn(\n+    name: str,\n+    id: ast::node_id,\n+    attrs: [ast::attribute]\n+) -> doc::fndoc {\n     let noargdocs = map::new_str_hash::<str>();\n     let _fndoc = none;\n     for attr: ast::attribute in attrs {\n         alt attr.node.value.node {\n             ast::meta_name_value(\n                 \"doc\", {node: ast::lit_str(value), span: _}) {\n                 _fndoc = some(~{\n+                    id: id,\n                     name: name,\n                     brief: value,\n                     desc: none,\n@@ -17,7 +22,7 @@ fn parse_fn(name: str, attrs: [ast::attribute]) -> doc::fndoc {\n             }\n             ast::meta_list(\"doc\", docs) {\n                 _fndoc = some(\n-                    parse_fn_(name, docs));\n+                    parse_fn_(name, id, docs));\n             }\n         }\n     }\n@@ -26,6 +31,7 @@ fn parse_fn(name: str, attrs: [ast::attribute]) -> doc::fndoc {\n         some(_d) { _d }\n         none. {\n           ~{\n+              id: id,\n               name: name,\n               brief: \"_undocumented_\",\n               desc: none,\n@@ -50,7 +56,11 @@ fn parse_fn(name: str, attrs: [ast::attribute]) -> doc::fndoc {\n   args(items = \"Doc attribute contents\"),\n   return = \"Parsed function docs.\"\n )]\n-fn parse_fn_(name: str, items: [@ast::meta_item]) -> doc::fndoc {\n+fn parse_fn_(\n+    name: str,\n+    id: ast::node_id,\n+    items: [@ast::meta_item]\n+) -> doc::fndoc {\n     let brief = none;\n     let desc = none;\n     let return = none;\n@@ -97,6 +107,7 @@ fn parse_fn_(name: str, items: [@ast::meta_item]) -> doc::fndoc {\n     };\n \n     ~{\n+        id: id,\n         name: name,\n         brief: _brief,\n         desc: desc,\n@@ -128,7 +139,7 @@ mod tests {\n     fn parse_fn_should_handle_undocumented_functions() {\n         let source = \"\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.brief == \"_undocumented_\";\n         assert doc.desc == none;\n         assert doc.return == none;\n@@ -139,39 +150,39 @@ mod tests {\n     fn parse_fn_should_parse_simple_doc_attributes() {\n         let source = \"#[doc = \\\"basic\\\"]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.brief == \"basic\";\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_brief_description() {\n         let source = \"#[doc(brief = \\\"short\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.brief == \"short\";\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_long_description() {\n         let source = \"#[doc(desc = \\\"description\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.desc == some(\"description\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_return_value_description() {\n         let source = \"#[doc(return = \\\"return value\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.return == some(\"return value\");\n     }\n \n     #[test]\n     fn parse_fn_should_parse_the_argument_descriptions() {\n         let source = \"#[doc(args(a = \\\"arg a\\\", b = \\\"arg b\\\"))]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.args.get(\"a\") == \"arg a\";\n         assert doc.args.get(\"b\") == \"arg b\";\n     }\n@@ -180,7 +191,7 @@ mod tests {\n     fn parse_fn_should_set_brief_desc_to_undocumented_if_not_exists() {\n         let source = \"#[doc(desc = \\\"long desc\\\")]\";\n         let attrs = parse_attributes(source);\n-        let doc = parse_fn(\"f\", attrs);\n+        let doc = parse_fn(\"f\", 0, attrs);\n         assert doc.brief == \"_undocumented_\";\n     }\n }\n\\ No newline at end of file"}, {"sha": "b1324713e119efe118b51822bddec58c38d644e4", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=77690baa7049cf636ff5dd6124f7b1550fe42acc", "patch": "@@ -1,3 +1,5 @@\n+type ast_id = int;\n+\n type cratedoc = ~{\n     topmod: moddoc,\n };\n@@ -9,6 +11,7 @@ type moddoc = ~{\n };\n \n type fndoc = ~{\n+    id: ast_id,\n     name: str,\n     brief: str,\n     desc: option::t<str>,"}, {"sha": "0dbf1548208877142805b0f7b0ccf9ea9679ae45", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=77690baa7049cf636ff5dd6124f7b1550fe42acc", "patch": "@@ -42,7 +42,7 @@ fn moddoc_from_mod(\n                 alt item.node {\n                   ast::item_fn(decl, typarams, _) {\n                     some(fndoc_from_fn(\n-                        decl, typarams, item.ident, item.attrs))\n+                        decl, typarams, item.ident, item.id, item.attrs))\n                   }\n                   _ {\n                     none\n@@ -56,9 +56,10 @@ fn fndoc_from_fn(\n     _decl: ast::fn_decl,\n     _typarams: [ast::ty_param],\n     name: ast::ident,\n+    id: ast::node_id,\n     attrs: [ast::attribute]\n ) -> doc::fndoc {\n-    attr_parser::parse_fn(name, attrs)\n+    attr_parser::parse_fn(name, id, attrs)\n }\n \n #[cfg(test)]\n@@ -102,4 +103,12 @@ mod tests {\n         assert doc.topmod.fns[0].name == \"a\";\n         assert doc.topmod.mods[0].fns[0].name == \"c\";\n     }\n+\n+    #[test]\n+    fn extract_should_set_fn_ast_id() {\n+        let source = \"fn a() { }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract(ast);\n+        assert doc.topmod.fns[0].id != 0;\n+    }\n }\n\\ No newline at end of file"}, {"sha": "029eb1eed156fa04550f946db3ea1b9b735002f5", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77690baa7049cf636ff5dd6124f7b1550fe42acc/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=77690baa7049cf636ff5dd6124f7b1550fe42acc", "patch": "@@ -23,7 +23,7 @@ import std::map;\n        item = \"AST item to document\")\n )]\n fn doc_item(ctxt: gen::ctxt, item: @ast::item) {\n-    let _fndoc0 = attr_parser::parse_fn(item.ident, item.attrs);\n+    let _fndoc0 = attr_parser::parse_fn(item.ident, item.id, item.attrs);\n \n     alt item.node {\n         ast::item_const(ty, expr) { }"}]}