{"sha": "4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMWQyMTlmMDY5MTJiZjk3YjFkOGIzNTkyZWUwZjZiYWViMzkyY2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-25T18:18:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-26T14:06:12Z"}, "message": "Implement some float intrinsics", "tree": {"sha": "380bafd06706dcec6b376c2f55bff7e50b84ce4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380bafd06706dcec6b376c2f55bff7e50b84ce4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "html_url": "https://github.com/rust-lang/rust/commit/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159c6585fe5c22d893c3ef70f737f8817e53906f", "url": "https://api.github.com/repos/rust-lang/rust/commits/159c6585fe5c22d893c3ef70f737f8817e53906f", "html_url": "https://github.com/rust-lang/rust/commit/159c6585fe5c22d893c3ef70f737f8817e53906f"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "98d9ed17b03086bfa47acfa9995d94091ca617d7", "filename": "example/std_example.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "patch": "@@ -20,6 +20,15 @@ fn main() {\n \n     // Make sure ByValPair values with differently sized components are correctly passed\n     map(None::<(u8, Box<Instruction>)>);\n+\n+    println!(\"{}\", 2.3f32.exp());\n+    println!(\"{}\", 2.3f32.exp2());\n+    println!(\"{}\", 2.3f32.abs());\n+    println!(\"{}\", 2.3f32.sqrt());\n+    println!(\"{}\", 2.3f32.floor());\n+    println!(\"{}\", 2.3f32.ceil());\n+    println!(\"{}\", 2.3f32.min(1.0));\n+    println!(\"{}\", 2.3f32.max(1.0));\n }\n \n #[derive(PartialEq)]"}, {"sha": "f8d5c0c0da42b8cbb137703938e76e9c8062fcf4", "filename": "src/intrinsics.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1d219f06912bf97b1d8b3592ee0f6baeb392cf/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=4e1d219f06912bf97b1d8b3592ee0f6baeb392cf", "patch": "@@ -586,6 +586,73 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         _ if intrinsic.starts_with(\"atomic_umin\"), <T> (v ptr, v src) {\n             atomic_minmax!(fx, IntCC::UnsignedLessThan, <T> (ptr, src) -> ret);\n         };\n+\n+        expf32, (c flt) {\n+            let res = fx.easy_call(\"expf\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        expf64, (c flt) {\n+            let res = fx.easy_call(\"exp\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        exp2f32, (c flt) {\n+            let res = fx.easy_call(\"exp2f\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        exp2f64, (c flt) {\n+            let res = fx.easy_call(\"exp2\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        fabsf32, (c flt) {\n+            let res = fx.easy_call(\"fabsf\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        fabsf64, (c flt) {\n+            let res = fx.easy_call(\"fabs\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        sqrtf32, (c flt) {\n+            let res = fx.easy_call(\"sqrtf\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        sqrtf64, (c flt) {\n+            let res = fx.easy_call(\"sqrt\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        floorf32, (c flt) {\n+            let res = fx.easy_call(\"floorf\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        floorf64, (c flt) {\n+            let res = fx.easy_call(\"floor\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        ceilf32, (c flt) {\n+            let res = fx.easy_call(\"ceilf\", &[flt], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        ceilf64, (c flt) {\n+            let res = fx.easy_call(\"ceil\", &[flt], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+\n+        minnumf32, (c a, c b) {\n+            let res = fx.easy_call(\"fminf\", &[a, b], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        minnumf64, (c a, c b) {\n+            let res = fx.easy_call(\"fmin\", &[a, b], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+        maxnumf32, (c a, c b) {\n+            let res = fx.easy_call(\"fmaxf\", &[a, b], fx.tcx.types.f32);\n+            ret.write_cvalue(fx, res);\n+        };\n+        maxnumf64, (c a, c b) {\n+            let res = fx.easy_call(\"fmax\", &[a, b], fx.tcx.types.f64);\n+            ret.write_cvalue(fx, res);\n+        };\n+\n     }\n \n     if let Some((_, dest)) = destination {"}]}