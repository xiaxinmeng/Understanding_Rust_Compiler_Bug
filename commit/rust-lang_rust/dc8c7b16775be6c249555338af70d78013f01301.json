{"sha": "dc8c7b16775be6c249555338af70d78013f01301", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjOGM3YjE2Nzc1YmU2YzI0OTU1NTMzOGFmNzBkNzgwMTNmMDEzMDE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-28T09:10:27Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-28T09:10:27Z"}, "message": "Atomics constants are now handled by the deprecation lint", "tree": {"sha": "30dae394df6199e352574297b5e56d6b239db528", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30dae394df6199e352574297b5e56d6b239db528"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8c7b16775be6c249555338af70d78013f01301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8c7b16775be6c249555338af70d78013f01301", "html_url": "https://github.com/rust-lang/rust/commit/dc8c7b16775be6c249555338af70d78013f01301", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8c7b16775be6c249555338af70d78013f01301/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36245feeb059cfec84ae15dc2a3ee211d0ed4e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/36245feeb059cfec84ae15dc2a3ee211d0ed4e42", "html_url": "https://github.com/rust-lang/rust/commit/36245feeb059cfec84ae15dc2a3ee211d0ed4e42"}], "stats": {"total": 159, "additions": 27, "deletions": 132}, "files": [{"sha": "47168445ad3c518941e14fd69c82469e7908f8f5", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dc8c7b16775be6c249555338af70d78013f01301/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8c7b16775be6c249555338af70d78013f01301/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=dc8c7b16775be6c249555338af70d78013f01301", "patch": "@@ -69,21 +69,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ReplaceConsts {\n const REPLACEMENTS: &[(&[&str], &str)] = &[\n     // Once\n     (&[\"core\", \"sync\", \"ONCE_INIT\"], \"Once::new()\"),\n-    // Atomic\n-    (\n-        &[\"core\", \"sync\", \"atomic\", \"ATOMIC_BOOL_INIT\"],\n-        \"AtomicBool::new(false)\",\n-    ),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_ISIZE_INIT\"], \"AtomicIsize::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I8_INIT\"], \"AtomicI8::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I16_INIT\"], \"AtomicI16::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I32_INIT\"], \"AtomicI32::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_I64_INIT\"], \"AtomicI64::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_USIZE_INIT\"], \"AtomicUsize::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U8_INIT\"], \"AtomicU8::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U16_INIT\"], \"AtomicU16::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U32_INIT\"], \"AtomicU32::new(0)\"),\n-    (&[\"core\", \"sync\", \"atomic\", \"ATOMIC_U64_INIT\"], \"AtomicU64::new(0)\"),\n     // Min\n     (&[\"core\", \"isize\", \"MIN\"], \"isize::min_value()\"),\n     (&[\"core\", \"i8\", \"MIN\"], \"i8::min_value()\"),"}, {"sha": "2c125f978d9893435803724beac9e9f67b40e802", "filename": "tests/ui/replace_consts.fixed", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.fixed?ref=dc8c7b16775be6c249555338af70d78013f01301", "patch": "@@ -10,18 +10,6 @@ use std::sync::{Once, ONCE_INIT};\n fn bad() {\n     // Once\n     { let foo = ONCE_INIT; };\n-    // Atomic\n-    { let foo = AtomicBool::new(false); };\n-    { let foo = AtomicIsize::new(0); };\n-    { let foo = AtomicI8::new(0); };\n-    { let foo = AtomicI16::new(0); };\n-    { let foo = AtomicI32::new(0); };\n-    { let foo = AtomicI64::new(0); };\n-    { let foo = AtomicUsize::new(0); };\n-    { let foo = AtomicU8::new(0); };\n-    { let foo = AtomicU16::new(0); };\n-    { let foo = AtomicU32::new(0); };\n-    { let foo = AtomicU64::new(0); };\n     // Min\n     { let foo = isize::min_value(); };\n     { let foo = i8::min_value(); };"}, {"sha": "3c7d8d07ed6f6dd7256fe9d4551bc5ead7929954", "filename": "tests/ui/replace_consts.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.rs?ref=dc8c7b16775be6c249555338af70d78013f01301", "patch": "@@ -10,18 +10,6 @@ use std::sync::{Once, ONCE_INIT};\n fn bad() {\n     // Once\n     { let foo = ONCE_INIT; };\n-    // Atomic\n-    { let foo = ATOMIC_BOOL_INIT; };\n-    { let foo = ATOMIC_ISIZE_INIT; };\n-    { let foo = ATOMIC_I8_INIT; };\n-    { let foo = ATOMIC_I16_INIT; };\n-    { let foo = ATOMIC_I32_INIT; };\n-    { let foo = ATOMIC_I64_INIT; };\n-    { let foo = ATOMIC_USIZE_INIT; };\n-    { let foo = ATOMIC_U8_INIT; };\n-    { let foo = ATOMIC_U16_INIT; };\n-    { let foo = ATOMIC_U32_INIT; };\n-    { let foo = ATOMIC_U64_INIT; };\n     // Min\n     { let foo = std::isize::MIN; };\n     { let foo = std::i8::MIN; };"}, {"sha": "be0d00726237fb72f91bbdfafac9c391d618e089", "filename": "tests/ui/replace_consts.stderr", "status": "modified", "additions": 27, "deletions": 93, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc8c7b16775be6c249555338af70d78013f01301/tests%2Fui%2Freplace_consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freplace_consts.stderr?ref=dc8c7b16775be6c249555338af70d78013f01301", "patch": "@@ -1,218 +1,152 @@\n-error: using `ATOMIC_BOOL_INIT`\n+error: using `MIN`\n   --> $DIR/replace_consts.rs:14:17\n    |\n-LL |     { let foo = ATOMIC_BOOL_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^ help: try this: `AtomicBool::new(false)`\n+LL |     { let foo = std::isize::MIN; };\n+   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n    |\n note: lint level defined here\n   --> $DIR/replace_consts.rs:4:9\n    |\n LL | #![deny(clippy::replace_consts)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: using `ATOMIC_ISIZE_INIT`\n-  --> $DIR/replace_consts.rs:15:17\n-   |\n-LL |     { let foo = ATOMIC_ISIZE_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicIsize::new(0)`\n-\n-error: using `ATOMIC_I8_INIT`\n-  --> $DIR/replace_consts.rs:16:17\n-   |\n-LL |     { let foo = ATOMIC_I8_INIT; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicI8::new(0)`\n-\n-error: using `ATOMIC_I16_INIT`\n-  --> $DIR/replace_consts.rs:17:17\n-   |\n-LL |     { let foo = ATOMIC_I16_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI16::new(0)`\n-\n-error: using `ATOMIC_I32_INIT`\n-  --> $DIR/replace_consts.rs:18:17\n-   |\n-LL |     { let foo = ATOMIC_I32_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI32::new(0)`\n-\n-error: using `ATOMIC_I64_INIT`\n-  --> $DIR/replace_consts.rs:19:17\n-   |\n-LL |     { let foo = ATOMIC_I64_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicI64::new(0)`\n-\n-error: using `ATOMIC_USIZE_INIT`\n-  --> $DIR/replace_consts.rs:20:17\n-   |\n-LL |     { let foo = ATOMIC_USIZE_INIT; };\n-   |                 ^^^^^^^^^^^^^^^^^ help: try this: `AtomicUsize::new(0)`\n-\n-error: using `ATOMIC_U8_INIT`\n-  --> $DIR/replace_consts.rs:21:17\n-   |\n-LL |     { let foo = ATOMIC_U8_INIT; };\n-   |                 ^^^^^^^^^^^^^^ help: try this: `AtomicU8::new(0)`\n-\n-error: using `ATOMIC_U16_INIT`\n-  --> $DIR/replace_consts.rs:22:17\n-   |\n-LL |     { let foo = ATOMIC_U16_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU16::new(0)`\n-\n-error: using `ATOMIC_U32_INIT`\n-  --> $DIR/replace_consts.rs:23:17\n-   |\n-LL |     { let foo = ATOMIC_U32_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU32::new(0)`\n-\n-error: using `ATOMIC_U64_INIT`\n-  --> $DIR/replace_consts.rs:24:17\n-   |\n-LL |     { let foo = ATOMIC_U64_INIT; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `AtomicU64::new(0)`\n-\n-error: using `MIN`\n-  --> $DIR/replace_consts.rs:26:17\n-   |\n-LL |     { let foo = std::isize::MIN; };\n-   |                 ^^^^^^^^^^^^^^^ help: try this: `isize::min_value()`\n-\n error: using `MIN`\n-  --> $DIR/replace_consts.rs:27:17\n+  --> $DIR/replace_consts.rs:15:17\n    |\n LL |     { let foo = std::i8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:28:17\n+  --> $DIR/replace_consts.rs:16:17\n    |\n LL |     { let foo = std::i16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:29:17\n+  --> $DIR/replace_consts.rs:17:17\n    |\n LL |     { let foo = std::i32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:30:17\n+  --> $DIR/replace_consts.rs:18:17\n    |\n LL |     { let foo = std::i64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:31:17\n+  --> $DIR/replace_consts.rs:19:17\n    |\n LL |     { let foo = std::i128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:32:17\n+  --> $DIR/replace_consts.rs:20:17\n    |\n LL |     { let foo = std::usize::MIN; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:33:17\n+  --> $DIR/replace_consts.rs:21:17\n    |\n LL |     { let foo = std::u8::MIN; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:34:17\n+  --> $DIR/replace_consts.rs:22:17\n    |\n LL |     { let foo = std::u16::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:35:17\n+  --> $DIR/replace_consts.rs:23:17\n    |\n LL |     { let foo = std::u32::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:36:17\n+  --> $DIR/replace_consts.rs:24:17\n    |\n LL |     { let foo = std::u64::MIN; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::min_value()`\n \n error: using `MIN`\n-  --> $DIR/replace_consts.rs:37:17\n+  --> $DIR/replace_consts.rs:25:17\n    |\n LL |     { let foo = std::u128::MIN; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::min_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:39:17\n+  --> $DIR/replace_consts.rs:27:17\n    |\n LL |     { let foo = std::isize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `isize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:40:17\n+  --> $DIR/replace_consts.rs:28:17\n    |\n LL |     { let foo = std::i8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `i8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:41:17\n+  --> $DIR/replace_consts.rs:29:17\n    |\n LL |     { let foo = std::i16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:42:17\n+  --> $DIR/replace_consts.rs:30:17\n    |\n LL |     { let foo = std::i32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:43:17\n+  --> $DIR/replace_consts.rs:31:17\n    |\n LL |     { let foo = std::i64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `i64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:44:17\n+  --> $DIR/replace_consts.rs:32:17\n    |\n LL |     { let foo = std::i128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `i128::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:45:17\n+  --> $DIR/replace_consts.rs:33:17\n    |\n LL |     { let foo = std::usize::MAX; };\n    |                 ^^^^^^^^^^^^^^^ help: try this: `usize::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:46:17\n+  --> $DIR/replace_consts.rs:34:17\n    |\n LL |     { let foo = std::u8::MAX; };\n    |                 ^^^^^^^^^^^^ help: try this: `u8::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:47:17\n+  --> $DIR/replace_consts.rs:35:17\n    |\n LL |     { let foo = std::u16::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u16::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:48:17\n+  --> $DIR/replace_consts.rs:36:17\n    |\n LL |     { let foo = std::u32::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u32::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:49:17\n+  --> $DIR/replace_consts.rs:37:17\n    |\n LL |     { let foo = std::u64::MAX; };\n    |                 ^^^^^^^^^^^^^ help: try this: `u64::max_value()`\n \n error: using `MAX`\n-  --> $DIR/replace_consts.rs:50:17\n+  --> $DIR/replace_consts.rs:38:17\n    |\n LL |     { let foo = std::u128::MAX; };\n    |                 ^^^^^^^^^^^^^^ help: try this: `u128::max_value()`\n \n-error: aborting due to 35 previous errors\n+error: aborting due to 24 previous errors\n "}]}