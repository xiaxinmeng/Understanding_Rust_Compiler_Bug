{"sha": "539de439ad6f32e9a9a8a593299072a106786890", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWRlNDM5YWQ2ZjMyZTlhOWE4YTU5MzI5OTA3MmExMDY3ODY4OTA=", "commit": {"author": {"name": "Gui Andrade", "email": "gh@archshift.com", "date": "2019-10-30T04:12:05Z"}, "committer": {"name": "Gui Andrade", "email": "gh@archshift.com", "date": "2019-10-30T04:12:05Z"}, "message": "Allow specifying key \"llvm-abiname\" in target specification\n\nThis addresses #65024, as it allows RISC-V target specification\nfiles to set \"llvm-abiname\": \"lp64d\". In general, it is useful\nfor the programmer to be able to set this codegen parameter,\nwhich other languages usually expose under a compiler argument\nlike \"-mabi=<XYZ>\".", "tree": {"sha": "712932c2c0e692647a67a001b64cebd066648935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712932c2c0e692647a67a001b64cebd066648935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539de439ad6f32e9a9a8a593299072a106786890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539de439ad6f32e9a9a8a593299072a106786890", "html_url": "https://github.com/rust-lang/rust/commit/539de439ad6f32e9a9a8a593299072a106786890", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539de439ad6f32e9a9a8a593299072a106786890/comments", "author": {"login": "archshift", "id": 5377832, "node_id": "MDQ6VXNlcjUzNzc4MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5377832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/archshift", "html_url": "https://github.com/archshift", "followers_url": "https://api.github.com/users/archshift/followers", "following_url": "https://api.github.com/users/archshift/following{/other_user}", "gists_url": "https://api.github.com/users/archshift/gists{/gist_id}", "starred_url": "https://api.github.com/users/archshift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/archshift/subscriptions", "organizations_url": "https://api.github.com/users/archshift/orgs", "repos_url": "https://api.github.com/users/archshift/repos", "events_url": "https://api.github.com/users/archshift/events{/privacy}", "received_events_url": "https://api.github.com/users/archshift/received_events", "type": "User", "site_admin": false}, "committer": {"login": "archshift", "id": 5377832, "node_id": "MDQ6VXNlcjUzNzc4MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5377832?v=4", "gravatar_id": "", "url": "https://api.github.com/users/archshift", "html_url": "https://github.com/archshift", "followers_url": "https://api.github.com/users/archshift/followers", "following_url": "https://api.github.com/users/archshift/following{/other_user}", "gists_url": "https://api.github.com/users/archshift/gists{/gist_id}", "starred_url": "https://api.github.com/users/archshift/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/archshift/subscriptions", "organizations_url": "https://api.github.com/users/archshift/orgs", "repos_url": "https://api.github.com/users/archshift/repos", "events_url": "https://api.github.com/users/archshift/events{/privacy}", "received_events_url": "https://api.github.com/users/archshift/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa69777ea2902208b24b3fd77767d577ceaf6386", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa69777ea2902208b24b3fd77767d577ceaf6386", "html_url": "https://github.com/rust-lang/rust/commit/aa69777ea2902208b24b3fd77767d577ceaf6386"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "fa14ce7b03c8ca69a215187cceefe170609f3d9f", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=539de439ad6f32e9a9a8a593299072a106786890", "patch": "@@ -161,6 +161,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n     let features = features.join(\",\");\n     let features = CString::new(features).unwrap();\n+    let abi = SmallCStr::new(&sess.target.target.options.llvm_abiname);\n     let is_pie_binary = !find_features && is_pie_binary(sess);\n     let trap_unreachable = sess.target.target.options.trap_unreachable;\n     let emit_stack_size_section = sess.opts.debugging_opts.emit_stack_sizes;\n@@ -170,7 +171,7 @@ pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_fea\n     Arc::new(move || {\n         let tm = unsafe {\n             llvm::LLVMRustCreateTargetMachine(\n-                triple.as_ptr(), cpu.as_ptr(), features.as_ptr(),\n+                triple.as_ptr(), cpu.as_ptr(), features.as_ptr(), abi.as_ptr(),\n                 code_model,\n                 reloc_model,\n                 opt_level,"}, {"sha": "85c181ba2f315e6107b1c82524e700105b4d25da", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=539de439ad6f32e9a9a8a593299072a106786890", "patch": "@@ -1684,6 +1684,7 @@ extern \"C\" {\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,\n+                                       Abi: *const c_char,\n                                        Model: CodeModel,\n                                        Reloc: RelocMode,\n                                        Level: CodeGenOptLevel,"}, {"sha": "e51772220b73f95953529dbde2ed646d09025ca8", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539de439ad6f32e9a9a8a593299072a106786890/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=539de439ad6f32e9a9a8a593299072a106786890", "patch": "@@ -793,7 +793,10 @@ pub struct TargetOptions {\n     pub merge_functions: MergeFunctions,\n \n     /// Use platform dependent mcount function\n-    pub target_mcount: String\n+    pub target_mcount: String,\n+\n+    /// LLVM ABI name, corresponds to the '-mabi' parameter available in multilib C compilers\n+    pub llvm_abiname: String,\n }\n \n impl Default for TargetOptions {\n@@ -880,6 +883,7 @@ impl Default for TargetOptions {\n             override_export_symbols: None,\n             merge_functions: MergeFunctions::Aliases,\n             target_mcount: \"mcount\".to_string(),\n+            llvm_abiname: \"\".to_string(),\n         }\n     }\n }\n@@ -1196,6 +1200,7 @@ impl Target {\n         key!(override_export_symbols, opt_list);\n         key!(merge_functions, MergeFunctions)?;\n         key!(target_mcount);\n+        key!(llvm_abiname);\n \n         if let Some(array) = obj.find(\"abi-blacklist\").and_then(Json::as_array) {\n             for name in array.iter().filter_map(|abi| abi.as_string()) {\n@@ -1414,6 +1419,7 @@ impl ToJson for Target {\n         target_option_val!(override_export_symbols);\n         target_option_val!(merge_functions);\n         target_option_val!(target_mcount);\n+        target_option_val!(llvm_abiname);\n \n         if default.abi_blacklist != self.options.abi_blacklist {\n             d.insert(\"abi-blacklist\".to_string(), self.options.abi_blacklist.iter()"}, {"sha": "5b3900ab496114e85d726aba323789ef7a39da9c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/539de439ad6f32e9a9a8a593299072a106786890/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/539de439ad6f32e9a9a8a593299072a106786890/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=539de439ad6f32e9a9a8a593299072a106786890", "patch": "@@ -343,7 +343,7 @@ extern \"C\" const char* LLVMRustGetHostCPUName(size_t *len) {\n \n extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     const char *TripleStr, const char *CPU, const char *Feature,\n-    LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n+    const char *ABIStr, LLVMRustCodeModel RustCM, LLVMRustRelocMode RustReloc,\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool PositionIndependentExecutable, bool FunctionSections,\n     bool DataSections,\n@@ -374,6 +374,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   Options.FunctionSections = FunctionSections;\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n+  Options.MCOptions.ABIName = ABIStr;\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction."}]}