{"sha": "c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGM2NDg2MDIzODk5ZTBlMmExNjY5ZmE0ZTMyYjhmNjJlMWY5N2Y=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T08:29:37Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-22T08:29:37Z"}, "message": "const prop into operands", "tree": {"sha": "fbccbdb21efff0b4da97b94578c60d61245409cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbccbdb21efff0b4da97b94578c60d61245409cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "html_url": "https://github.com/rust-lang/rust/commit/c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4825e12fc9c79954aa0fe18f5521efa6c19c7539", "url": "https://api.github.com/repos/rust-lang/rust/commits/4825e12fc9c79954aa0fe18f5521efa6c19c7539", "html_url": "https://github.com/rust-lang/rust/commit/4825e12fc9c79954aa0fe18f5521efa6c19c7539"}], "stats": {"total": 350, "additions": 261, "deletions": 89}, "files": [{"sha": "44c68abd249880979b67a6c95e090227b55fd95e", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 50, "deletions": 62, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -582,6 +582,34 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         Some(())\n     }\n \n+    fn propagate_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n+        match *operand {\n+            Operand::Copy(l) | Operand::Move(l) => {\n+                if let Some(value) = self.get_const(l) {\n+                    if self.should_const_prop(value) {\n+                        // FIXME(felix91gr): this code only handles `Scalar` cases.\n+                        // For now, we're not handling `ScalarPair` cases because\n+                        // doing so here would require a lot of code duplication.\n+                        // We should hopefully generalize `Operand` handling into a fn,\n+                        // and use it to do const-prop here and everywhere else\n+                        // where it makes sense.\n+                        if let interpret::Operand::Immediate(interpret::Immediate::Scalar(\n+                            ScalarMaybeUninit::Scalar(scalar),\n+                        )) = *value\n+                        {\n+                            *operand = self.operand_from_scalar(\n+                                scalar,\n+                                value.layout.ty,\n+                                self.source_info.unwrap().span,\n+                            );\n+                        }\n+                    }\n+                }\n+            }\n+            Operand::Constant(ref mut ct) => self.visit_constant(ct, location),\n+        }\n+    }\n+\n     fn const_prop(\n         &mut self,\n         rvalue: &Rvalue<'tcx>,\n@@ -905,6 +933,16 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n+    fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n+        // Only const prop copies and moves on `mir_opt_level=3` as doing so\n+        // currently increases compile time.\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n+            self.super_operand(operand, location)\n+        } else {\n+            self.propagate_operand(operand, location)\n+        }\n+    }\n+\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, location: Location) {\n         trace!(\"visit_constant: {:?}\", constant);\n         self.super_constant(constant, location);\n@@ -1072,18 +1110,13 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                     }\n                 }\n             }\n-            TerminatorKind::SwitchInt { ref mut discr, switch_ty, .. } => {\n-                if let Some(value) = self.eval_operand(&discr, source_info) {\n-                    if self.should_const_prop(value) {\n-                        if let ScalarMaybeUninit::Scalar(scalar) =\n-                            self.ecx.read_scalar(value).unwrap()\n-                        {\n-                            *discr = self.operand_from_scalar(scalar, switch_ty, source_info.span);\n-                        }\n-                    }\n-                }\n+            TerminatorKind::SwitchInt { ref mut discr, .. } => {\n+                // FIXME: This is currently redundant with `visit_operand`, but sadly\n+                // always visiting operands currently causes a perf regression, so\n+                // `visit_operand` currently only runs for propagates places for `mir_opt_level=3`.\n+                self.propagate_operand(discr, location)\n             }\n-            // None of these have Operands to const-propagate\n+            // None of these have Operands to const-propagate.\n             TerminatorKind::Goto { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Abort\n@@ -1096,61 +1129,16 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::FalseEdge { .. }\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::InlineAsm { .. } => {}\n-            // Every argument in our function calls can be const propagated.\n-            TerminatorKind::Call { ref mut args, .. } => {\n-                let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n-                // Constant Propagation into function call arguments is gated\n-                // under mir-opt-level 2, because LLVM codegen gives performance\n-                // regressions with it.\n-                if mir_opt_level >= 2 {\n-                    for opr in args {\n-                        /*\n-                          The following code would appear to be incomplete, because\n-                          the function `Operand::place()` returns `None` if the\n-                          `Operand` is of the variant `Operand::Constant`. In this\n-                          context however, that variant will never appear. This is why:\n-\n-                          When constructing the MIR, all function call arguments are\n-                          copied into `Locals` of `LocalKind::Temp`. At least, all arguments\n-                          that are not unsized (Less than 0.1% are unsized. See #71170\n-                          to learn more about those).\n-\n-                          This means that, conversely, all `Operands` found as function call\n-                          arguments are of the variant `Operand::Copy`. This allows us to\n-                          simplify our handling of `Operands` in this case.\n-                        */\n-                        if let Some(l) = opr.place() {\n-                            if let Some(value) = self.get_const(l) {\n-                                if self.should_const_prop(value) {\n-                                    // FIXME(felix91gr): this code only handles `Scalar` cases.\n-                                    // For now, we're not handling `ScalarPair` cases because\n-                                    // doing so here would require a lot of code duplication.\n-                                    // We should hopefully generalize `Operand` handling into a fn,\n-                                    // and use it to do const-prop here and everywhere else\n-                                    // where it makes sense.\n-                                    if let interpret::Operand::Immediate(\n-                                        interpret::Immediate::Scalar(ScalarMaybeUninit::Scalar(\n-                                            scalar,\n-                                        )),\n-                                    ) = *value\n-                                    {\n-                                        *opr = self.operand_from_scalar(\n-                                            scalar,\n-                                            value.layout.ty,\n-                                            source_info.span,\n-                                        );\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n+            // Every argument in our function calls have already been propagated in `visit_operand`.\n+            //\n+            // NOTE: because LLVM codegen gives performance regressions with it, so this is gated\n+            // on `mir_opt_level=3`.\n+            TerminatorKind::Call { .. } => {}\n         }\n \n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block.\n-        // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`\n+        // Take it out of the ecx so we can get a mutable reference to the ecx for `remove_const`.\n         let mut locals = std::mem::take(&mut self.ecx.machine.written_only_inside_own_block_locals);\n         for &local in locals.iter() {\n             Self::remove_const(&mut self.ecx, local);"}, {"sha": "bbd6c8042f1964ab3f22f748bbf70b7d4315bb5b", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -64,13 +64,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {"}, {"sha": "d9096e5f3f13e27a7a3174da6ee29cda6d11f0d7", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -64,13 +64,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 4_usize, const 2_usize) -> bb1; // scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000004))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/array_index.rs:5:18: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n       }\n   \n       bb1: {"}, {"sha": "4bd4bb0dd7dd4ea4b5fe846b7c29f64659ae1048", "filename": "src/test/mir-opt/const_prop/bad_op_div_by_zero/rustc.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_div_by_zero%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -38,15 +38,22 @@\n -                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + span: $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+-         assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(!const true, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          assert(!move _4, \"attempt to divide {} by zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n++                                          // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n@@ -90,29 +97,42 @@\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n -         assert(!move _7, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute `{} / {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-                                           // ty::Const\n++                                          // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb2: {\n-          _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n+-         _2 = Div(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++         _2 = Div(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_div_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_div_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_div_by_zero.rs:3:11: 6:2\n                                            // ty::Const"}, {"sha": "ecd030e32b4ee76dc01668d8925e9d79a7ee09b0", "filename": "src/test/mir-opt/const_prop/bad_op_mod_by_zero/rustc.main.ConstProp.diff", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -38,15 +38,22 @@\n -                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+-         assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +         _4 = const true;                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++         assert(!const true, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-          assert(!move _4, \"attempt to calculate the remainder of {} with a divisor of zero\", const 1_i32) -> bb1; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-                                           // ty::Const\n++                                          // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n@@ -90,29 +97,42 @@\n -         _7 = BitAnd(move _5, move _6);   // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n -         assert(!move _7, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, _3) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n-+                                          // ty::Const\n++         assert(!const false, \"attempt to compute the remainder of `{} % {}` which would overflow\", const 1_i32, const 0_i32) -> bb2; // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+                                           // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n +                                          // mir::Constant\n +                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-                                           // ty::Const\n++                                          // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n       }\n   \n       bb2: {\n-          _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n+-         _2 = Rem(const 1_i32, move _3);  // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++         _2 = Rem(const 1_i32, const 0_i32); // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n++                                          // ty::Const\n++                                          // + ty: i32\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_mod_by_zero.rs:5:14: 5:19\n++                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n           StorageDead(_3);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:5:18: 5:19\n           _0 = const ();                   // scope 0 at $DIR/bad_op_mod_by_zero.rs:3:11: 6:2\n                                            // ty::Const"}, {"sha": "2b5010759d75000e74b2f75c4e8e16a748c6a5de", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -47,8 +47,22 @@\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n++         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n       }\n   \n       bb1: {"}, {"sha": "301aaf29247612556cac550f40d633c26dba1952", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -47,8 +47,22 @@\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:23: 7:24\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n           _7 = Len((*_1));                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n-          assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         _8 = Lt(_6, _7);                 // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++         _8 = Lt(const 3_usize, _7);      // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n++         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, const 3_usize) -> bb1; // scope 2 at $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:7:18: 7:25\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n       }\n   \n       bb1: {"}, {"sha": "539a16f52dca285440733f10777372b557cb2204", "filename": "src/test/mir-opt/const_prop/discriminant/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -56,7 +56,14 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:11:26: 11:30\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb3: {"}, {"sha": "20875448eddc91c78abf5370fc501ce67b119f3f", "filename": "src/test/mir-opt/const_prop/discriminant/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -56,7 +56,14 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n+-         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n++         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n++                                          // ty::Const\n++                                          // + ty: bool\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/discriminant.rs:11:26: 11:30\n++                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n       }\n   \n       bb3: {"}, {"sha": "57906b1cabddb9c01b37afb877d0696e69b9b31a", "filename": "src/test/mir-opt/const_prop/indirect/rustc.main.ConstProp.diff", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -43,7 +43,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n-+         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n++         assert(!const false, \"attempt to compute `{} + {}` which would overflow\", const 2_u8, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x00))\n@@ -52,6 +52,12 @@\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +                                          // ty::Const\n                                            // + ty: u8\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/indirect.rs:5:13: 5:29\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n++                                          // ty::Const\n++                                          // + ty: u8\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n                                            // + span: $DIR/indirect.rs:5:28: 5:29"}, {"sha": "5312784bc8aaef138f7d45d4edff8cfd73049f98", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -139,13 +139,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000006))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n       }\n   \n       bb2: {"}, {"sha": "7af99841366676a9964333b963931e4334d53180", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -139,13 +139,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 6_usize, const 3_usize) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000006))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n       }\n   \n       bb2: {"}, {"sha": "c30075bbb05fdd7dcc0c2f845a5e21dd8192346b", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -48,13 +48,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000008))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n       }\n   \n       bb1: {"}, {"sha": "cadce59cf954db2dddcdb3270196210183bed789", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -48,13 +48,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 8_usize, const 2_usize) -> bb1; // scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000008))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000002))\n++                                          // mir::Constant\n++                                          // + span: $DIR/repeat.rs:6:18: 6:28\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n       }\n   \n       bb1: {"}, {"sha": "0a07a1a11f27541cff7a471ec14c87b9fe0ec395", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -54,13 +54,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000003)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n       }\n   \n       bb1: {"}, {"sha": "f8c6f29e854df77e106c790260f01b32ace6cb3e", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c74c6486023899e0e2a1669fa4e32b8f62e1f97f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=c74c6486023899e0e2a1669fa4e32b8f62e1f97f", "patch": "@@ -54,13 +54,25 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000003))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x0000000000000001))\n++                                          // mir::Constant\n++                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n       }\n   \n       bb1: {"}]}