{"sha": "146f5d8d1063ba3ea92eba33b64fcc2b59310643", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NmY1ZDhkMTA2M2JhM2VhOTJlYmEzM2I2NGZjYzJiNTkzMTA2NDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T19:16:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-02T19:16:55Z"}, "message": "rustup; test for return type mismatch", "tree": {"sha": "032b37ca5026197354d63367fdba5c6a5d38ed92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032b37ca5026197354d63367fdba5c6a5d38ed92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/146f5d8d1063ba3ea92eba33b64fcc2b59310643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/146f5d8d1063ba3ea92eba33b64fcc2b59310643", "html_url": "https://github.com/rust-lang/rust/commit/146f5d8d1063ba3ea92eba33b64fcc2b59310643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/146f5d8d1063ba3ea92eba33b64fcc2b59310643/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "317f90525a9620d9957b3bf37f8d605f50a8c889", "url": "https://api.github.com/repos/rust-lang/rust/commits/317f90525a9620d9957b3bf37f8d605f50a8c889", "html_url": "https://github.com/rust-lang/rust/commit/317f90525a9620d9957b3bf37f8d605f50a8c889"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "e4a389427c52aa249e26e4a34cf1eafae2faa548", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/146f5d8d1063ba3ea92eba33b64fcc2b59310643/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5d8d1063ba3ea92eba33b64fcc2b59310643/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=146f5d8d1063ba3ea92eba33b64fcc2b59310643", "patch": "@@ -233,6 +233,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryKinds = MiriMemoryKind;\n \n     const MUT_STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n+    const ENFORCE_VALIDITY: bool = false; // this is still WIP\n \n     /// Returns Ok() when the function was handled, fail otherwise\n     fn find_fn("}, {"sha": "13532764c973b1975dc08645d871d6863d24f54a", "filename": "src/operator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/146f5d8d1063ba3ea92eba33b64fcc2b59310643/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5d8d1063ba3ea92eba33b64fcc2b59310643/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=146f5d8d1063ba3ea92eba33b64fcc2b59310643", "patch": "@@ -142,8 +142,8 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     // allocations sit right next to each other.  The C/C++ standards are\n                     // somewhat fuzzy about this case, so I think for now this check is\n                     // \"good enough\".\n-                    self.memory.check_bounds(left, false)?;\n-                    self.memory.check_bounds(right, false)?;\n+                    self.memory.check_bounds_ptr(left, false)?;\n+                    self.memory.check_bounds_ptr(right, false)?;\n                     // Two live in-bounds pointers, we can compare across allocations\n                     left == right\n                 }\n@@ -296,9 +296,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n         if let Scalar::Ptr(ptr) = ptr {\n             // Both old and new pointer must be in-bounds.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            self.memory.check_bounds(ptr, false)?;\n+            self.memory.check_bounds_ptr(ptr, false)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can move around freely, as long as they do not overflow"}, {"sha": "e4ac95e676764bdcfc19b839acb1519f4a9d7044", "filename": "tests/compile-fail/cast_fn_ptr5.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/146f5d8d1063ba3ea92eba33b64fcc2b59310643/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/146f5d8d1063ba3ea92eba33b64fcc2b59310643/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr5.rs?ref=146f5d8d1063ba3ea92eba33b64fcc2b59310643", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    fn f() -> u32 { 42 }\n+\n+    let g = unsafe {\n+        std::mem::transmute::<fn() -> u32, fn()>(f)\n+    };\n+\n+    g() //~ ERROR tried to call a function with return type u32 passing return place of type ()\n+}"}]}