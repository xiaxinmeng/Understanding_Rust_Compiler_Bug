{"sha": "d58a9c73464133f95663bf5e78bb693ffb5de284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1OGE5YzczNDY0MTMzZjk1NjYzYmY1ZTc4YmI2OTNmZmI1ZGUyODQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T12:49:37Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-02T12:49:37Z"}, "message": "Expand the tutorial section on functions", "tree": {"sha": "6e8c73824a3397b4f513a04810ad11a3bd6c94e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e8c73824a3397b4f513a04810ad11a3bd6c94e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d58a9c73464133f95663bf5e78bb693ffb5de284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d58a9c73464133f95663bf5e78bb693ffb5de284", "html_url": "https://github.com/rust-lang/rust/commit/d58a9c73464133f95663bf5e78bb693ffb5de284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d58a9c73464133f95663bf5e78bb693ffb5de284/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "769e9b669bd020c5c972e9bd8c05fafefedb7fc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/769e9b669bd020c5c972e9bd8c05fafefedb7fc6", "html_url": "https://github.com/rust-lang/rust/commit/769e9b669bd020c5c972e9bd8c05fafefedb7fc6"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "c174b904fb9e40d3221392d4797610c53a7f4d3c", "filename": "doc/tutorial/func.md", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Ffunc.md", "raw_url": "https://github.com/rust-lang/rust/raw/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Ffunc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Ffunc.md?ref=d58a9c73464133f95663bf5e78bb693ffb5de284", "patch": "@@ -40,6 +40,11 @@ not see changes made to these variables after the `lambda` was\n evaluated. `lambda`s can be put in data structures and passed around\n without limitation.\n \n+The type of a closure is `lambda(args) -> type`, as opposed to\n+`fn(args) -> type`. The `fn` type stands for 'bare' functions, with no\n+closure attached. Keep this in mind when writing higher-order\n+functions.\n+\n A different form of closure is the block. Blocks are written like they\n are in Ruby: `{|x| x + y}`, the formal parameters between pipes,\n followed by the function body. They are stack-allocated and properly\n@@ -55,10 +60,25 @@ stored in data structures or returned.\n     }\n     map_int({|x| x + 1 }, [1, 2, 3]);\n \n+The type of blocks is spelled `block(args) -> type`. Both closures and\n+bare functions are automatically convert to `block`s when appropriate.\n+Most higher-order functions should take their function arguments as\n+`block`s.\n+\n A block with no arguments is written `{|| body(); }`\u2014you can not leave\n off the pipes.\n \n-FIXME mention bind\n+## Binding\n+\n+Partial application is done using the `bind` keyword in Rust.\n+\n+    let daynum = bind std::vec::position(_, [\"mo\", \"tu\", \"we\", \"do\",\n+                                             \"fr\", \"sa\", \"su\"]);\n+\n+Binding a function produces a closure (`lambda` type) in which some of\n+the arguments to the bound function have already been provided.\n+`daynum` will be a function taking a single string argument, and\n+returning the day of the week that string corresponds to (if any).\n \n ## Iteration\n "}, {"sha": "5ab964c107e31554aed13e998bb33f50e9872b2e", "filename": "doc/tutorial/lib/codemirror-rust.js", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js", "raw_url": "https://github.com/rust-lang/rust/raw/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Flib%2Fcodemirror-rust.js?ref=d58a9c73464133f95663bf5e78bb693ffb5de284", "patch": "@@ -8,7 +8,8 @@ CodeMirror.defineMode(\"rust\", function() {\n     \"lambda\": \"fn\", \"type\": \"type\", \"tag\": \"tag\", \"mod\": \"mod\",\n     \"as\": \"op\", \"true\": \"atom\", \"false\": \"atom\", \"assert\": \"op\", \"check\": \"op\",\n     \"claim\": \"op\", \"native\": \"ignore\", \"unsafe\": \"ignore\", \"import\": \"else-style\",\n-    \"export\": \"else-style\", \"copy\": \"op\", \"log\": \"op\", \"log_err\": \"op\", \"use\": \"op\"\n+    \"export\": \"else-style\", \"copy\": \"op\", \"log\": \"op\", \"log_err\": \"op\",\n+    \"use\": \"op\", \"bind\": \"op\"\n   };\n   var typeKeywords = function() {\n     var keywords = {\"fn\": \"fn\", \"block\": \"fn\", \"obj\": \"obj\"};"}, {"sha": "acef5163a592d9350cdb4deb0cd8331040594ea8", "filename": "doc/tutorial/syntax.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Fsyntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/d58a9c73464133f95663bf5e78bb693ffb5de284/doc%2Ftutorial%2Fsyntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial%2Fsyntax.md?ref=d58a9c73464133f95663bf5e78bb693ffb5de284", "patch": "@@ -130,31 +130,31 @@ annotation:\n The basic types are written like this:\n \n `()`\n-: Nil, the type that has only a single value.  \n+: Nil, the type that has only a single value.\n \n `bool`\n-: Boolean type..  \n+: Boolean type..\n \n `int`\n-: A machine-pointer-sized integer.  \n+: A machine-pointer-sized integer.\n \n `uint`\n-: A machine-pointer-sized unsigned integer.  \n+: A machine-pointer-sized unsigned integer.\n \n `i8`, `i16`, `i32`, `i64`\n-: Signed integers with a specific size (in bits).  \n+: Signed integers with a specific size (in bits).\n \n `u8`, `u16`, `u32`, `u64`\n-: Unsigned integers with a specific size.  \n+: Unsigned integers with a specific size.\n \n `f32`, `f64`\n-: Floating-point types.  \n+: Floating-point types.\n \n `float`\n-: The largest floating-point type efficiently supported on the target machine.  \n+: The largest floating-point type efficiently supported on the target machine.\n \n `char`\n-: A character is a 32-bit Unicode code point.  \n+: A character is a 32-bit Unicode code point.\n \n `str`\n : String type. A string contains a utf-8 encoded sequence of characters.\n@@ -163,22 +163,22 @@ These can be combined in composite types, which will be described in\n more detail later on (the `T`s here stand for any other type):\n \n `[T]`\n-: Vector type.  \n+: Vector type.\n \n `[mutable T]`\n-: Mutable vector type.  \n+: Mutable vector type.\n \n `(T1, T2)`\n-: Tuple type. Any arity above 1 is supported.  \n+: Tuple type. Any arity above 1 is supported.\n \n `{fname1: T1, fname2: T2}`\n-: Record type.  \n+: Record type.\n \n-`fn(arg1: T1, arg2: T2) -> T3`\n-: Function type.  \n+`fn(arg1: T1, arg2: T2) -> T3`, `lambda()`, `block()`\n+: Function types.\n \n `@T`, `~T`, `*T`\n-: Pointer types.  \n+: Pointer types.\n \n `obj { fn method1() }`\n : Object type."}]}