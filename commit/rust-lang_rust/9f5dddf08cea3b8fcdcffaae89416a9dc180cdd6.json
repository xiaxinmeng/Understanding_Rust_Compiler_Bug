{"sha": "9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNWRkZGYwOGNlYTNiOGZjZGNmZmFhZTg5NDE2YTlkYzE4MGNkZDY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-01T01:24:06Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-06-01T01:43:26Z"}, "message": "Now imports are not re-exported unless 'export' is explicitly used.", "tree": {"sha": "8d7e1b3c62cad49a09e2716c260a841982adfda2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7e1b3c62cad49a09e2716c260a841982adfda2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "html_url": "https://github.com/rust-lang/rust/commit/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b141d5d37135882ce88a095b6b36b3ea4e23d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b141d5d37135882ce88a095b6b36b3ea4e23d3c", "html_url": "https://github.com/rust-lang/rust/commit/8b141d5d37135882ce88a095b6b36b3ea4e23d3c"}], "stats": {"total": 375, "additions": 148, "deletions": 227}, "files": [{"sha": "f6f6c26f6ae6034a0ce5aeea6ee9edfeadda7a7c", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -1,10 +1,6 @@\n import middle::trans;\n \n import trans::decl_cdecl_fn;\n-import trans::type_names;\n-import trans::ModuleRef;\n-import trans::TypeRef;\n-import trans::ValueRef;\n \n import trans::T_f32;\n import trans::T_f64;\n@@ -23,6 +19,11 @@ import trans::T_taskptr;\n import trans::T_tydesc;\n import trans::T_void;\n \n+import lib::llvm::type_names;\n+import lib::llvm::llvm::ModuleRef;\n+import lib::llvm::llvm::ValueRef;\n+import lib::llvm::llvm::TypeRef;\n+\n type upcalls = rec(\n     ValueRef grow_task,\n     ValueRef log_int,"}, {"sha": "49bbf2b1e33fab485bdeaaa57806aea28e91c63b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -103,9 +103,9 @@ fn compile_input(session::session sess,\n     }\n \n     auto llmod =\n-        time[llvm::ModuleRef](time_passes, \"translation\",\n-                              bind trans::trans_crate(sess, crate,\n-                                                      ty_cx, output));\n+        time[llvm::llvm::ModuleRef](time_passes, \"translation\",\n+                                    bind trans::trans_crate(sess, crate,\n+                                                            ty_cx, output));\n \n     time[()](time_passes, \"LLVM passes\",\n              bind link::write::run_passes(sess, llmod, output));"}, {"sha": "4a8b96d5ed412fb0d8559a6e7df4108e6f41e73d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -438,20 +438,40 @@ tag native_item_ {\n }\n \n fn is_exported(ident i, _mod m) -> bool {\n-    auto count = 0;\n+    auto nonlocal = true;\n+    for (@ast::item it in m.items) {\n+        if (item_ident(it) == i) {\n+            nonlocal = false;\n+        }\n+        alt (it.node) {\n+            case (item_tag(_, ?variants, _, _, _)) {\n+                for (variant v in variants) {\n+                    if (v.node.name == i) {\n+                        nonlocal = false;\n+                    }\n+                }\n+            }\n+            case (_) {}\n+        }\n+    }\n+\n+\n+    auto count = 0u;\n     for (@ast::view_item vi in m.view_items) {\n         alt (vi.node) {\n             case (ast::view_item_export(?id)) {\n                 if (str::eq(i, id)) {\n+                    // even if it's nonlocal (since it's explicit)\n                     ret true;\n                 }\n-                count += 1;\n+                count += 1u;\n             }\n             case (_) { /* fall through */ }\n         }\n     }\n-    // If there are no declared exports then everything is exported\n-    if (count == 0) {\n+    // If there are no declared exports then \n+    // everything not imported is exported\n+    if (count == 0u && !nonlocal) {\n         ret true;\n     } else {\n         ret false;"}, {"sha": "29da15fda36c962e0c72653705c59ccff39623c2", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -231,7 +231,7 @@ fn expect(&parser p, token::token t) {\n     }\n }\n \n-fn spanned[T](uint lo, uint hi, &T node) -> ast::spanned[T] {\n+fn spanned[T](uint lo, uint hi, &T node) -> common::spanned[T] {\n     ret rec(node=node, span=rec(lo=lo, hi=hi));\n }\n \n@@ -1008,7 +1008,7 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n  * loading rust crates to process extensions.\n  */\n \n-fn expand_syntax_ext(&parser p, ast::span sp,\n+fn expand_syntax_ext(&parser p, common::span sp,\n                      &ast::path path, vec[@ast::expr] args,\n                      option::t[str] body) -> ast::expr_ {\n "}, {"sha": "d3ea00ab92de82b9aa65c1452808269205b9f32c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -26,6 +26,7 @@ import util::common::istr;\n import util::common::new_def_hash;\n import util::common::new_str_hash;\n import util::common::local_rhs_span;\n+import util::common::span;\n \n import lib::llvm::llvm;\n import lib::llvm::builder;\n@@ -215,7 +216,7 @@ state type fn_ctxt = rec(\n     hashmap[ty::t, derived_tydesc_info] derived_tydescs,\n \n     // The source span where this function comes from, for error reporting.\n-    ast::span sp,\n+    span sp,\n \n     // This function's enclosing local context.\n     @local_ctxt lcx\n@@ -273,7 +274,7 @@ state type block_ctxt = rec(\n     mutable vec[cleanup] cleanups,\n \n     // The source span where this block comes from, for error reporting.\n-    ast::span sp,\n+    span sp,\n \n     // The function context for the function to which this block is attached.\n     @fn_ctxt fcx\n@@ -502,7 +503,7 @@ fn T_glue_fn(&type_names tn) -> TypeRef {\n     ret t;\n }\n \n-fn T_dtor(&@crate_ctxt ccx, &ast::span sp, TypeRef llself_ty) -> TypeRef {\n+fn T_dtor(&@crate_ctxt ccx, &span sp, TypeRef llself_ty) -> TypeRef {\n     ret type_of_fn_full(ccx, sp, ast::proto_fn, some[TypeRef](llself_ty),\n                         vec::empty[ty::arg](), ty::mk_nil(ccx.tcx), 0u);\n }\n@@ -693,7 +694,7 @@ fn T_opaque_chan_ptr() -> TypeRef { ret T_ptr(T_i8()); }\n // return value was always meaningless in that case anyhow). Beware!\n //\n // TODO: Enforce via a predicate.\n-fn type_of(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> TypeRef {\n+fn type_of(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n     if (ty::type_has_dynamic_size(cx.tcx, t)) {\n         cx.sess.span_err (sp,\n           \"type_of() called on a type with dynamic size: \" +\n@@ -704,7 +705,7 @@ fn type_of(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> TypeRef {\n     ret type_of_inner(cx, sp, t);\n }\n \n-fn type_of_explicit_args(&@crate_ctxt cx, &ast::span sp,\n+fn type_of_explicit_args(&@crate_ctxt cx, &span sp,\n                          &vec[ty::arg] inputs) -> vec[TypeRef] {\n     let vec[TypeRef] atys = [];\n     for (ty::arg arg in inputs) {\n@@ -735,7 +736,7 @@ fn type_of_explicit_args(&@crate_ctxt cx, &ast::span sp,\n //  - trans_args\n \n fn type_of_fn_full(&@crate_ctxt cx,\n-                   &ast::span sp,\n+                   &span sp,\n                    ast::proto proto,\n                    &option::t[TypeRef] obj_self,\n                    &vec[ty::arg] inputs,\n@@ -792,7 +793,7 @@ fn type_of_fn_full(&@crate_ctxt cx,\n }\n \n fn type_of_fn(&@crate_ctxt cx,\n-              &ast::span sp,\n+              &span sp,\n               ast::proto proto,\n               &vec[ty::arg] inputs,\n               &ty::t output,\n@@ -801,7 +802,7 @@ fn type_of_fn(&@crate_ctxt cx,\n                         ty_param_count);\n }\n \n-fn type_of_native_fn(&@crate_ctxt cx, &ast::span sp, ast::native_abi abi,\n+fn type_of_native_fn(&@crate_ctxt cx, &span sp, ast::native_abi abi,\n                      &vec[ty::arg] inputs,\n                      &ty::t output,\n                      uint ty_param_count) -> TypeRef {\n@@ -819,7 +820,7 @@ fn type_of_native_fn(&@crate_ctxt cx, &ast::span sp, ast::native_abi abi,\n     ret T_fn(atys, type_of_inner(cx, sp, output));\n }\n \n-fn type_of_inner(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> TypeRef {\n+fn type_of_inner(&@crate_ctxt cx, &span sp, &ty::t t) -> TypeRef {\n     // Check the cache.\n     if (cx.lltypes.contains_key(t)) {\n         ret cx.lltypes.get(t);\n@@ -939,7 +940,7 @@ fn type_of_inner(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> TypeRef {\n     ret llty;\n }\n \n-fn type_of_arg(@local_ctxt cx, &ast::span sp, &ty::arg arg) -> TypeRef {\n+fn type_of_arg(@local_ctxt cx, &span sp, &ty::arg arg) -> TypeRef {\n     alt (ty::struct(cx.ccx.tcx, arg.ty)) {\n         case (ty::ty_param(_)) {\n             if (arg.mode == ty::mo_alias) {\n@@ -960,7 +961,7 @@ fn type_of_arg(@local_ctxt cx, &ast::span sp, &ty::arg arg) -> TypeRef {\n     ret typ;\n }\n \n-fn type_of_ty_param_count_and_ty(@local_ctxt lcx, &ast::span sp,\n+fn type_of_ty_param_count_and_ty(@local_ctxt lcx, &span sp,\n                                  &ty::ty_param_count_and_ty tpt) -> TypeRef {\n     alt (ty::struct(lcx.ccx.tcx, tpt._1)) {\n         case (ty::ty_fn(?proto, ?inputs, ?output, _)) {\n@@ -1284,7 +1285,7 @@ fn simplify_type(&@crate_ctxt ccx, &ty::t typ) -> ty::t {\n }\n \n // Computes the size of the data part of a non-dynamically-sized tag.\n-fn static_size_of_tag(&@crate_ctxt cx, &ast::span sp, &ty::t t) -> uint {\n+fn static_size_of_tag(&@crate_ctxt cx, &span sp, &ty::t t) -> uint {\n     if (ty::type_has_dynamic_size(cx.tcx, t)) {\n         log_err \"dynamically sized type passed to static_size_of_tag()\";\n         fail;\n@@ -1841,7 +1842,7 @@ fn set_glue_inlining(&@local_ctxt cx, ValueRef f, &ty::t t) {\n \n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n-fn declare_tydesc(&@local_ctxt cx, &ast::span sp, &ty::t t,\n+fn declare_tydesc(&@local_ctxt cx, &span sp, &ty::t t,\n                   vec[uint] ty_params) -> @tydesc_info {\n     log \"+++ declare_tydesc \" + ty::ty_to_str(cx.ccx.tcx, t);\n     auto ccx = cx.ccx;\n@@ -1905,7 +1906,7 @@ fn declare_generic_glue(&@local_ctxt cx,\n     ret llfn;\n }\n \n-fn make_generic_glue(&@local_ctxt cx, &ast::span sp,\n+fn make_generic_glue(&@local_ctxt cx, &span sp,\n                      &ty::t t,\n                      ValueRef llfn,\n                      &make_generic_glue_helper_fn helper,\n@@ -3356,7 +3357,7 @@ fn node_ann_type(&@crate_ctxt cx, &ast::ann a) -> ty::t {\n     ret ty::ann_to_monotype(cx.tcx, a);\n }\n \n-fn node_type(&@crate_ctxt cx, &ast::span sp, &ast::ann a) -> TypeRef {\n+fn node_type(&@crate_ctxt cx, &span sp, &ast::ann a) -> TypeRef {\n     ret type_of(cx, sp, node_ann_type(cx, a));\n }\n \n@@ -4539,7 +4540,7 @@ fn trans_path(&@block_ctxt cx, &ast::path p, &ast::ann ann) -> lval_result {\n     }\n }\n \n-fn trans_field(&@block_ctxt cx, &ast::span sp, ValueRef v, &ty::t t0,\n+fn trans_field(&@block_ctxt cx, &span sp, ValueRef v, &ty::t t0,\n                &ast::ident field, &ast::ann ann) -> lval_result {\n \n     auto r = autoderef(cx, v, t0);\n@@ -4580,7 +4581,7 @@ fn trans_field(&@block_ctxt cx, &ast::span sp, ValueRef v, &ty::t t0,\n     fail;\n }\n \n-fn trans_index(&@block_ctxt cx, &ast::span sp, &@ast::expr base,\n+fn trans_index(&@block_ctxt cx, &span sp, &@ast::expr base,\n                &@ast::expr idx, &ast::ann ann) -> lval_result {\n \n     auto lv = trans_expr(cx, base);\n@@ -4727,7 +4728,7 @@ fn trans_cast(&@block_ctxt cx, &@ast::expr e, &ast::ann ann) -> result {\n }\n \n fn trans_bind_thunk(&@local_ctxt cx,\n-                    &ast::span sp,\n+                    &span sp,\n                     &ty::t incoming_fty,\n                     &ty::t outgoing_fty,\n                     &vec[option::t[@ast::expr]] args,\n@@ -6318,7 +6319,7 @@ fn recv_val(&@block_ctxt cx, ValueRef lhs, &@ast::expr rhs,\n   wrapped inner object.\n \n */\n-fn trans_anon_obj(&@block_ctxt cx, &ast::span sp,\n+fn trans_anon_obj(&@block_ctxt cx, &span sp,\n                   &ast::anon_obj anon_obj, \n                   &vec[ast::ty_param] ty_params,\n                   &ast::obj_def_ids oid,\n@@ -6669,7 +6670,7 @@ fn mk_standard_basic_blocks(ValueRef llfn) ->\n //  - new_fn_ctxt\n //  - trans_args\n \n-fn new_fn_ctxt(@local_ctxt cx, &ast::span sp,\n+fn new_fn_ctxt(@local_ctxt cx, &span sp,\n                ValueRef llfndecl) -> @fn_ctxt {\n \n     let ValueRef llretptr = llvm::LLVMGetParam(llfndecl, 0u);\n@@ -6919,7 +6920,7 @@ fn finish_fn(&@fn_ctxt fcx, BasicBlockRef lltop) {\n \n // trans_fn: creates an LLVM function corresponding to a source language\n // function.\n-fn trans_fn(@local_ctxt cx, &ast::span sp, &ast::_fn f, ast::def_id fid,\n+fn trans_fn(@local_ctxt cx, &span sp, &ast::_fn f, ast::def_id fid,\n             option::t[tup(TypeRef, ty::t)] ty_self,\n             &vec[ast::ty_param] ty_params, &ast::ann ann) {\n     auto llfndecl = cx.ccx.item_ids.get(fid);\n@@ -7043,7 +7044,7 @@ fn trans_dtor(@local_ctxt cx,\n \n // trans_obj: creates an LLVM function that is the object constructor for the\n // object being translated.\n-fn trans_obj(@local_ctxt cx, &ast::span sp, &ast::_obj ob, ast::def_id oid,\n+fn trans_obj(@local_ctxt cx, &span sp, &ast::_obj ob, ast::def_id oid,\n              &vec[ast::ty_param] ty_params, &ast::ann ann) {\n     // To make a function, we have to create a function context and, inside\n     // that, a number of block contexts for which code is generated.\n@@ -7368,7 +7369,7 @@ fn get_pair_fn_ty(TypeRef llpairty) -> TypeRef {\n     ret llvm::LLVMGetElementType(pair_tys.(0));\n }\n \n-fn decl_fn_and_pair(&@crate_ctxt ccx, &ast::span sp,\n+fn decl_fn_and_pair(&@crate_ctxt ccx, &span sp,\n                     vec[str] path,\n                     str flav,\n                     vec[ast::ty_param] ty_params,\n@@ -7434,7 +7435,7 @@ fn native_fn_ty_param_count(&@crate_ctxt cx, &ast::def_id id) -> uint {\n     ret count;\n }\n \n-fn native_fn_wrapper_type(&@crate_ctxt cx, &ast::span sp, uint ty_param_count,\n+fn native_fn_wrapper_type(&@crate_ctxt cx, &span sp, uint ty_param_count,\n                           ty::t x) -> TypeRef {\n     alt (ty::struct(cx.tcx, x)) {\n         case (ty::ty_native_fn(?abi, ?args, ?out)) {\n@@ -7445,7 +7446,7 @@ fn native_fn_wrapper_type(&@crate_ctxt cx, &ast::span sp, uint ty_param_count,\n }\n \n fn decl_native_fn_and_pair(&@crate_ctxt ccx,\n-                           &ast::span sp,\n+                           &span sp,\n                            vec[str] path,\n                            str name,\n                            &ast::ann ann,"}, {"sha": "4c0308d182126b7c51d82ea70b2f8c6f46d72120", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -23,14 +23,14 @@ import front::ast::ident;\n import middle::walk::walk_crate;\n import middle::walk::walk_fn;\n import middle::walk::ast_visitor;\n-import front::ast::span;\n \n import aux::fn_info;\n import aux::var_info;\n import aux::crate_ctxt;\n \n import util::common::new_def_hash;\n import util::common::uistr;\n+import util::common::span;\n \n type identifier = rec(ident name, def_id id, span sp);\n "}, {"sha": "37598763058e93880be2d4c5e7806c8c59fe47bf", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 2, "deletions": 94, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -48,98 +48,7 @@ import bitvectors::declare_var;\n import bitvectors::bit_num;\n import bitvectors::gen;\n \n-import front::ast::_mod;\n-import front::ast;\n-import front::ast::method;\n-import front::ast::ann;\n-import front::ast::ty;\n-import front::ast::mutability;\n-import front::ast::item_const;\n-import front::ast::item_mod;\n-import front::ast::item_ty;\n-import front::ast::item_tag;\n-import front::ast::item_native_mod;\n-import front::ast::obj_field;\n-import front::ast::stmt;\n-import front::ast::stmt_;\n-import front::ast::ident;\n-import front::ast::def_id;\n-import front::ast::expr;\n-import front::ast::path;\n-import front::ast::crate_directive;\n-import front::ast::fn_decl;\n-import front::ast::native_mod;\n-import front::ast::variant;\n-import front::ast::ty_param;\n-import front::ast::proto;\n-import front::ast::pat;\n-import front::ast::binop;\n-import front::ast::unop;\n-import front::ast::def;\n-import front::ast::lit;\n-import front::ast::init_op;\n-import front::ast::controlflow;\n-import front::ast::noreturn;\n-import front::ast::return;\n-import front::ast::_fn;\n-import front::ast::_obj;\n-import front::ast::crate;\n-import front::ast::item_fn;\n-import front::ast::item_obj;\n-import front::ast::def_local;\n-import front::ast::def_fn;\n-import front::ast::item;\n-import front::ast::elt;\n-import front::ast::field;\n-import front::ast::decl;\n-import front::ast::decl_local;\n-import front::ast::decl_item;\n-import front::ast::initializer;\n-import front::ast::local;\n-import front::ast::arm;\n-import front::ast::expr_call;\n-import front::ast::expr_vec;\n-import front::ast::expr_tup;\n-import front::ast::expr_path;\n-import front::ast::expr_field;\n-import front::ast::expr_index;\n-import front::ast::expr_log;\n-import front::ast::expr_block;\n-import front::ast::expr_rec;\n-import front::ast::expr_if;\n-import front::ast::expr_binary;\n-import front::ast::expr_unary;\n-import front::ast::expr_move;\n-import front::ast::expr_assign;\n-import front::ast::expr_assign_op;\n-import front::ast::expr_while;\n-import front::ast::expr_do_while;\n-import front::ast::expr_alt;\n-import front::ast::expr_lit;\n-import front::ast::expr_ret;\n-import front::ast::expr_self_method;\n-import front::ast::expr_bind;\n-import front::ast::expr_spawn;\n-import front::ast::expr_ext;\n-import front::ast::expr_fail;\n-import front::ast::expr_break;\n-import front::ast::expr_cont;\n-import front::ast::expr_send;\n-import front::ast::expr_recv;\n-import front::ast::expr_put;\n-import front::ast::expr_port;\n-import front::ast::expr_chan;\n-import front::ast::expr_be;\n-import front::ast::expr_check;\n-import front::ast::expr_assert;\n-import front::ast::expr_cast;\n-import front::ast::expr_for;\n-import front::ast::expr_for_each;\n-import front::ast::expr_anon_obj;\n-import front::ast::stmt_decl;\n-import front::ast::stmt_expr;\n-import front::ast::block;\n-import front::ast::block_;\n+import front::ast::*;\n \n import middle::ty::expr_ann;\n \n@@ -155,8 +64,7 @@ import util::common::log_stmt;\n import util::common::log_expr_err;\n import util::common::log_block_err;\n import util::common::log_block;\n-\n-import front::ast::span;\n+import util::common::span;\n \n fn find_pre_post_mod(&_mod m) -> _mod {\n     log(\"implement find_pre_post_mod!\");"}, {"sha": "206ac9c68dfc607858016206cef7813c049534dd", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 91, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -59,97 +59,7 @@ import bitvectors::gen_poststate;\n import bitvectors::kill_poststate;\n \n import front::ast;\n-import front::ast::_fn;\n-import front::ast::method;\n-import front::ast::ty;\n-import front::ast::mutability;\n-import front::ast::item;\n-import front::ast::obj_field;\n-import front::ast::stmt;\n-import front::ast::stmt_;\n-import front::ast::def_id;\n-import front::ast::ann;\n-import front::ast::expr;\n-import front::ast::path;\n-import front::ast::crate_directive;\n-import front::ast::fn_decl;\n-import front::ast::_obj;\n-import front::ast::native_mod;\n-import front::ast::variant;\n-import front::ast::ty_param;\n-import front::ast::proto;\n-import front::ast::pat;\n-import front::ast::binop;\n-import front::ast::unop;\n-import front::ast::def;\n-import front::ast::lit;\n-import front::ast::init_op;\n-import front::ast::controlflow;\n-import front::ast::return;\n-import front::ast::noreturn;\n-import front::ast::_mod;\n-import front::ast::crate;\n-import front::ast::item_fn;\n-import front::ast::item_mod;\n-import front::ast::item_ty;\n-import front::ast::item_tag;\n-import front::ast::item_native_mod;\n-import front::ast::item_obj;\n-import front::ast::item_const;\n-import front::ast::def_local;\n-import front::ast::def_fn;\n-import front::ast::ident;\n-import front::ast::elt;\n-import front::ast::field;\n-import front::ast::decl;\n-import front::ast::decl_local;\n-import front::ast::decl_item;\n-import front::ast::initializer;\n-import front::ast::local;\n-import front::ast::arm;\n-import front::ast::expr_call;\n-import front::ast::expr_vec;\n-import front::ast::expr_tup;\n-import front::ast::expr_path;\n-import front::ast::expr_field;\n-import front::ast::expr_index;\n-import front::ast::expr_log;\n-import front::ast::expr_block;\n-import front::ast::expr_rec;\n-import front::ast::expr_if;\n-import front::ast::expr_binary;\n-import front::ast::expr_unary;\n-import front::ast::expr_move;\n-import front::ast::expr_assign;\n-import front::ast::expr_assign_op;\n-import front::ast::expr_while;\n-import front::ast::expr_do_while;\n-import front::ast::expr_alt;\n-import front::ast::expr_lit;\n-import front::ast::expr_ret;\n-import front::ast::expr_self_method;\n-import front::ast::expr_bind;\n-import front::ast::expr_spawn;\n-import front::ast::expr_ext;\n-import front::ast::expr_fail;\n-import front::ast::expr_break;\n-import front::ast::expr_cont;\n-import front::ast::expr_send;\n-import front::ast::expr_recv;\n-import front::ast::expr_put;\n-import front::ast::expr_port;\n-import front::ast::expr_chan;\n-import front::ast::expr_be;\n-import front::ast::expr_check;\n-import front::ast::expr_assert;\n-import front::ast::expr_cast;\n-import front::ast::expr_for;\n-import front::ast::expr_for_each;\n-import front::ast::expr_anon_obj;\n-import front::ast::stmt_decl;\n-import front::ast::stmt_expr;\n-import front::ast::block;\n-import front::ast::block_;\n+import front::ast::*;\n \n import middle::ty::expr_ann;\n import middle::ty::expr_ty;"}, {"sha": "6b69dba49ae17203ee4ff3e65c48df6a73c2e949", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -115,7 +115,7 @@ fn substitute_ty_params(&@crate_ctxt ccx,\n \n \n // Returns the type parameter count and the type for the given definition.\n-fn ty_param_count_and_ty_for_def(&@fn_ctxt fcx, &ast::span sp, &ast::def defn)\n+fn ty_param_count_and_ty_for_def(&@fn_ctxt fcx, &span sp, &ast::def defn)\n         -> ty_param_count_and_ty {\n     alt (defn) {\n         case (ast::def_arg(?id)) {"}, {"sha": "7eea2fe5c8f5df63a2e281c6d050dccbd2a31f67", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -4,7 +4,7 @@ import std::option;\n import std::option::some;\n import std::option::none;\n \n-import front::ast::span;\n+import util::common::span;\n \n // FIXME: Should visit patterns as well.\n type ast_visitor ="}, {"sha": "33b89eff26c3f0939c4e7d2a88850aab82da04f8", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -220,7 +220,7 @@ fn has_nonlocal_exits(&ast::block b) -> bool {\n     ret *has_exits;\n }\n \n-fn local_rhs_span(&@ast::local l, &ast::span def) -> ast::span {\n+fn local_rhs_span(&@ast::local l, &span def) -> span {\n     alt (l.init) {\n         case (some(?i)) { ret i.expr.span; }\n         case (_) { ret def; }"}, {"sha": "388ed3d58255a3a24772660b7844e5db888a5d85", "filename": "src/lib/str.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -2,6 +2,51 @@ import rustrt::sbuf;\n \n import vec::rustrt::vbuf;\n \n+export sbuf;\n+export rustrt;\n+export eq;\n+export lteq;\n+export hash;\n+export is_utf8;\n+export is_ascii;\n+export alloc;\n+export byte_len;\n+export buf;\n+export bytes;\n+export from_bytes;\n+export unsafe_from_bytes;\n+export unsafe_from_byte;\n+export str_from_cstr;\n+export str_from_buf;\n+export push_utf8_bytes;\n+export from_char;\n+export from_chars;\n+export utf8_char_width;\n+export char_range_at;\n+export char_at;\n+export char_len;\n+export to_chars;\n+export push_char;\n+export pop_char;\n+export shift_char;\n+export unshift_char;\n+export refcount;\n+export index;\n+export rindex;\n+export find;\n+export starts_with;\n+export ends_with;\n+export substr;\n+export slice;\n+export shift_byte;\n+export pop_byte;\n+export push_byte;\n+export unshift_byte;\n+export split;\n+export concat;\n+export connect;\n+export to_upper;\n+\n native \"rust\" mod rustrt {\n     type sbuf;\n     fn str_buf(str s) -> sbuf;"}, {"sha": "3fbe2408a5267c311b7e30b89b0b76e462a21aa8", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -2,6 +2,9 @@\n // error-pattern: unresolved name\n mod circ1 {\n   import circ1::*;\n+  export f1;\n+  export f2;\n+  export common;\n   fn f1() {\n     log \"f1\";\n   }\n@@ -12,6 +15,9 @@ mod circ1 {\n \n mod circ2 {\n   import circ2::*;\n+  export f1;\n+  export f2;\n+  export common;\n   fn f2() {\n     log \"f2\";\n   }"}, {"sha": "7667c39c8947435de9332ef957669878e0e4614a", "filename": "src/test/compile-fail/import-loop-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop-2.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -2,10 +2,12 @@\n \n mod a {\n   import b::x;\n+  export x;\n }\n \n mod b {\n   import a::x;\n+  export x;\n \n   fn main() {\n     auto y = x;"}, {"sha": "c5d13ceeecde534e5664446af127f3a4394cfb26", "filename": "src/test/compile-fail/import-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-loop.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -4,6 +4,7 @@ import y::x;\n \n mod y {\n     import x;\n+    export x;\n }\n \n fn main() {"}, {"sha": "3e926fd8fff492428c6eb6684730484a21194da1", "filename": "src/test/compile-fail/import5.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Fcompile-fail%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport5.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -0,0 +1,15 @@\n+// error-pattern:unresolved import: foo\n+\n+mod m1 {\n+  fn foo() { log \"foo\"; }\n+}\n+\n+mod m2 {\n+  import m1::foo;\n+}\n+\n+mod m3 {\n+  import m2::foo;\n+}\n+\n+fn main () {}\n\\ No newline at end of file"}, {"sha": "fb9648fe9ac7412595d12cd7220812f114a2b622", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -3,15 +3,18 @@ import a1::b1::word_traveler;\n mod a1 {                    // \n   mod b1 {                  // \n     import a2::b1::*;       //         <-\\ \n+    export word_traveler;   //           |\n   }                         //           |\n   mod b2 {                  //           |\n     import a2::b2::*;       // <-\\  -\\   |\n+    export word_traveler;   //   |   |   |\n   }                         //   |   |   |\n }                           //   |   |   |\n                             //   |   |   |\n mod a2 {                    //   |   |   |\n   native mod b1 {           //   |   |   |\n     import a1::b2::*;       //   | <-/  -/\n+    export word_traveler;   //   |\n   }                         //   |\n   mod b2 {                  //   |\n     fn word_traveler() {    //   |"}, {"sha": "333cde25dd31fda2bf940b42afcc51d40c937116", "filename": "src/test/run-pass/import-glob-circular.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-circular.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -3,6 +3,9 @@ import test2::*;\n \n mod circ1 {\n   import circ1::*;\n+  export f1;\n+  export f2;\n+  export common;\n   fn f1() -> uint {\n     ret 1u\n   }\n@@ -13,6 +16,9 @@ mod circ1 {\n \n mod circ2 {\n   import circ2::*;\n+  export f1;\n+  export f2;\n+  export common;\n   fn f2() -> uint {\n     ret 2u;\n   }"}, {"sha": "b629520a93b215890747790d11e67f62573cd3e8", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -1,6 +1,7 @@\n import foo::bar;\n mod foo {\n   import zed::bar;\n+  export bar;\n   mod zed {\n     fn bar() {\n       log \"foo\";"}, {"sha": "d4b82f41ba5412faf44c58457f6671f76873ee11", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -9,6 +9,7 @@ mod foo {\n }\n mod bar {\n   import zed::baz;\n+  export baz;\n }\n fn main(vec[str] args) {\n   baz();"}, {"sha": "3970ff58d2b4dff76893b682bd6549627e1a2b3b", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=9f5dddf08cea3b8fcdcffaae89416a9dc180cdd6", "patch": "@@ -9,6 +9,7 @@ mod foo {\n }\n mod bar {\n   import zed::baz;\n+  export baz;\n   mod foo {\n     mod zed {\n     }"}]}