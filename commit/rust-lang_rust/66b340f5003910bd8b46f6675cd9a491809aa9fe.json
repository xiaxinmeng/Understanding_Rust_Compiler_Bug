{"sha": "66b340f5003910bd8b46f6675cd9a491809aa9fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjM0MGY1MDAzOTEwYmQ4YjQ2ZjY2NzVjZDlhNDkxODA5YWE5ZmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-30T17:12:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-31T08:14:32Z"}, "message": "test more ways of mutably accessing a place", "tree": {"sha": "31ad57d7c86754941d9cb449217ddf7ae5459d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ad57d7c86754941d9cb449217ddf7ae5459d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b340f5003910bd8b46f6675cd9a491809aa9fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b340f5003910bd8b46f6675cd9a491809aa9fe", "html_url": "https://github.com/rust-lang/rust/commit/66b340f5003910bd8b46f6675cd9a491809aa9fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b340f5003910bd8b46f6675cd9a491809aa9fe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97974e3cabefe725b6bea24c20e5fb9709e08a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/97974e3cabefe725b6bea24c20e5fb9709e08a02", "html_url": "https://github.com/rust-lang/rust/commit/97974e3cabefe725b6bea24c20e5fb9709e08a02"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "df598eea9ef0f7a138a9da4dfbe1dd1e5565e77f", "filename": "src/test/ui/union/union-deref.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66b340f5003910bd8b46f6675cd9a491809aa9fe/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b340f5003910bd8b46f6675cd9a491809aa9fe/src%2Ftest%2Fui%2Funion%2Funion-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.rs?ref=66b340f5003910bd8b46f6675cd9a491809aa9fe", "patch": "@@ -13,8 +13,16 @@ fn main() {\n     let mut u : U1<Vec<i32>> = U1 { x: () };\n     unsafe { (*u.f).0 = Vec::new() }; // explicit deref, this compiles\n     unsafe { u.f.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n+    unsafe { &mut (*u.f).0 }; // explicit deref, this compiles\n+    unsafe { &mut u.f.0 }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n+    unsafe { (*u.f).0.push(0) }; // explicit deref, this compiles\n+    unsafe { u.f.0.push(0) }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n \n     let mut u : U2<Vec<i32>> = U2 { x: () };\n     unsafe { (*u.f.0).0 = Vec::new() }; // explicit deref, this compiles\n     unsafe { u.f.0.0 = Vec::new() }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n+    unsafe { &mut (*u.f.0).0 }; // explicit deref, this compiles\n+    unsafe { &mut u.f.0.0 }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n+    unsafe { (*u.f.0).0.push(0) }; // explicit deref, this compiles\n+    unsafe { u.f.0.0.push(0) }; //~ERROR not automatically applying `DerefMut` on `ManuallyDrop` union field\n }"}, {"sha": "fb16649767fb73c974969c1420f77b62bd3a45ba", "filename": "src/test/ui/union/union-deref.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/66b340f5003910bd8b46f6675cd9a491809aa9fe/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66b340f5003910bd8b46f6675cd9a491809aa9fe/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-deref.stderr?ref=66b340f5003910bd8b46f6675cd9a491809aa9fe", "patch": "@@ -7,14 +7,50 @@ LL |     unsafe { u.f.0 = Vec::new() };\n    = help: writing to this reference calls the destructor for the old value\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:17:19\n+   |\n+LL |     unsafe { &mut u.f.0 };\n+   |                   ^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n   --> $DIR/union-deref.rs:19:14\n    |\n+LL |     unsafe { u.f.0.push(0) };\n+   |              ^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:23:14\n+   |\n LL |     unsafe { u.f.0.0 = Vec::new() };\n    |              ^^^^^^^\n    |\n    = help: writing to this reference calls the destructor for the old value\n    = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n \n-error: aborting due to 2 previous errors\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:25:19\n+   |\n+LL |     unsafe { &mut u.f.0.0 };\n+   |                   ^^^^^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: not automatically applying `DerefMut` on `ManuallyDrop` union field\n+  --> $DIR/union-deref.rs:27:14\n+   |\n+LL |     unsafe { u.f.0.0.push(0) };\n+   |              ^^^^^^^\n+   |\n+   = help: writing to this reference calls the destructor for the old value\n+   = help: add an explicit `*` if that is desired, or call `ptr::write` to not run the destructor\n+\n+error: aborting due to 6 previous errors\n "}]}