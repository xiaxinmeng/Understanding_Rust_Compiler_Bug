{"sha": "661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MTk3NmNiZDFjYTNmOWNkMzJkNjBjYzBjNDhkOWIyOTFkNzg4N2Y=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-12-30T02:06:19Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-01-04T22:11:32Z"}, "message": "Add a human-readable textual form for MIR.\n\nThis can be dumped for a particular `fn` with the attribute\n`#![rustc_mir(pretty = \"filename.mir\"]`.", "tree": {"sha": "7f7149d380c5c6ae2297b238c2b36864f80345b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7149d380c5c6ae2297b238c2b36864f80345b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "html_url": "https://github.com/rust-lang/rust/commit/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7", "html_url": "https://github.com/rust-lang/rust/commit/badc23b6ad47c6b6d401a3ea1dc5163bdcd86cd7"}], "stats": {"total": 120, "additions": 103, "deletions": 17}, "files": [{"sha": "9cc40bbc3838a2e35c549c8d2fe54ba280d19a03", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "patch": "@@ -29,8 +29,8 @@ extern crate rustc_back;\n extern crate syntax;\n \n pub mod build;\n-pub mod mir_map;\n+pub mod graphviz;\n mod hair;\n-mod graphviz;\n+pub mod mir_map;\n+pub mod pretty;\n pub mod transform;\n-"}, {"sha": "a3ca4c05456021827de3b4d726c55233c8df93d7", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "patch": "@@ -22,6 +22,7 @@ extern crate rustc_front;\n \n use build;\n use graphviz;\n+use pretty;\n use transform::*;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n@@ -152,29 +153,29 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n                                          .flat_map(|a| a.meta_item_list())\n                                          .flat_map(|l| l.iter());\n                 for item in meta_item_list {\n-                    if item.check_name(\"graphviz\") {\n+                    if item.check_name(\"graphviz\") || item.check_name(\"pretty\") {\n                         match item.value_str() {\n                             Some(s) => {\n-                                match\n-                                    File::create(format!(\"{}{}\", prefix, s))\n-                                    .and_then(|ref mut output| {\n+                                let filename = format!(\"{}{}\", prefix, s);\n+                                let result = File::create(&filename).and_then(|ref mut output| {\n+                                    if item.check_name(\"graphviz\") {\n                                         graphviz::write_mir_graphviz(&mir, output)\n-                                    })\n-                                {\n-                                    Ok(()) => { }\n-                                    Err(e) => {\n-                                        self.tcx.sess.span_fatal(\n-                                            item.span,\n-                                            &format!(\"Error writing graphviz \\\n-                                                      results to `{}`: {}\",\n-                                                     s, e));\n+                                    } else {\n+                                        pretty::write_mir_pretty(&mir, output)\n                                     }\n+                                });\n+\n+                                if let Err(e) = result {\n+                                    self.tcx.sess.span_fatal(\n+                                        item.span,\n+                                        &format!(\"Error writing MIR {} results to `{}`: {}\",\n+                                                 item.name(), filename, e));\n                                 }\n                             }\n                             None => {\n                                 self.tcx.sess.span_err(\n                                     item.span,\n-                                    \"graphviz attribute requires a path\");\n+                                    &format!(\"{} attribute requires a path\", item.name()));\n                             }\n                         }\n                     }"}, {"sha": "1251154891ba795094998a44a06e767220f966b5", "filename": "src/librustc_mir/pretty.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661976cbd1ca3f9cd32d60cc0c48d9b291d7887f/src%2Flibrustc_mir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fpretty.rs?ref=661976cbd1ca3f9cd32d60cc0c48d9b291d7887f", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::mir::repr::*;\n+use rustc::middle::ty;\n+use std::io::{self, Write};\n+\n+const INDENT: &'static str = \"    \";\n+\n+/// Write out a human-readable textual representation for the given MIR.\n+pub fn write_mir_pretty<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n+    try!(write_mir_intro(mir, w));\n+\n+    // Nodes\n+    for block in mir.all_basic_blocks() {\n+        try!(write_basic_block(block, mir, w));\n+    }\n+\n+    writeln!(w, \"}}\")\n+}\n+\n+/// Write out a human-readable textual representation for the given basic block.\n+fn write_basic_block<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n+    let data = mir.basic_block_data(block);\n+\n+    // Basic block label at the top.\n+    try!(writeln!(w, \"\\n{}{:?}: {{\", INDENT, block));\n+\n+    // List of statements in the middle.\n+    for statement in &data.statements {\n+        try!(writeln!(w, \"{0}{0}{1:?};\", INDENT, statement));\n+    }\n+\n+    // Terminator at the bottom.\n+    try!(writeln!(w, \"{0}{0}{1:?};\", INDENT, data.terminator));\n+\n+    writeln!(w, \"{}}}\", INDENT)\n+}\n+\n+/// Write out a human-readable textual representation of the MIR's `fn` type and the types of its\n+/// local variables (both user-defined bindings and compiler temporaries).\n+fn write_mir_intro<W: Write>(mir: &Mir, w: &mut W) -> io::Result<()> {\n+    try!(write!(w, \"fn(\"));\n+\n+    // fn argument types.\n+    for (i, arg) in mir.arg_decls.iter().enumerate() {\n+        if i > 0 {\n+            try!(write!(w, \", \"));\n+        }\n+        try!(write!(w, \"{:?}: {}\", Lvalue::Arg(i as u32), arg.ty));\n+    }\n+\n+    try!(write!(w, \") -> \"));\n+\n+    // fn return type.\n+    match mir.return_ty {\n+        ty::FnOutput::FnConverging(ty) => try!(write!(w, \"{}\", ty)),\n+        ty::FnOutput::FnDiverging => try!(write!(w, \"!\")),\n+    }\n+\n+    try!(writeln!(w, \" {{\"));\n+\n+    // User variable types (including the user's name in a comment).\n+    for (i, var) in mir.var_decls.iter().enumerate() {\n+        try!(write!(w, \"{}let \", INDENT));\n+        if var.mutability == Mutability::Mut {\n+            try!(write!(w, \"mut \"));\n+        }\n+        try!(writeln!(w, \"{:?}: {}; // {}\", Lvalue::Var(i as u32), var.ty, var.name));\n+    }\n+\n+    // Compiler-introduced temporary types.\n+    for (i, temp) in mir.temp_decls.iter().enumerate() {\n+        try!(writeln!(w, \"{}let {:?}: {};\", INDENT, Lvalue::Temp(i as u32), temp.ty));\n+    }\n+\n+    Ok(())\n+}"}]}