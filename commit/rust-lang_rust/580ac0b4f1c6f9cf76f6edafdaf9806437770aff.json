{"sha": "580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MGFjMGI0ZjFjNmY5Y2Y3NmY2ZWRhZmRhZjk4MDY0Mzc3NzBhZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T08:24:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-30T08:24:22Z"}, "message": "Auto merge of #67658 - spastorino:do-not-copy-zsts, r=oli-obk\n\nAvoid memory copy logic for zsts\n\nr? @oli-obk\n\nOne of the included commits is work done by @HeroicKatora in #62655", "tree": {"sha": "3910e01b274b7ba13f801a400cc986dc6af583ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3910e01b274b7ba13f801a400cc986dc6af583ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "html_url": "https://github.com/rust-lang/rust/commit/580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580ac0b4f1c6f9cf76f6edafdaf9806437770aff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d297b1966391e3f9990b9400b8c81408a6594cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d297b1966391e3f9990b9400b8c81408a6594cbd", "html_url": "https://github.com/rust-lang/rust/commit/d297b1966391e3f9990b9400b8c81408a6594cbd"}, {"sha": "250a636217977ece9bbfcf21e5af7600ee57b5c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/250a636217977ece9bbfcf21e5af7600ee57b5c5", "html_url": "https://github.com/rust-lang/rust/commit/250a636217977ece9bbfcf21e5af7600ee57b5c5"}], "stats": {"total": 70, "additions": 45, "deletions": 25}, "files": [{"sha": "a06b23367e6daeca9c5862c56fbcba2b4a3a0f40", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/580ac0b4f1c6f9cf76f6edafdaf9806437770aff/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580ac0b4f1c6f9cf76f6edafdaf9806437770aff/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "patch": "@@ -594,6 +594,14 @@ pub struct AllocationDefinedness {\n     ranges: smallvec::SmallVec<[u64; 1]>,\n }\n \n+impl AllocationDefinedness {\n+    pub fn all_bytes_undef(&self) -> bool {\n+        // The `ranges` are run-length encoded and of alternating definedness.\n+        // So if `ranges.len() > 1` then the second block is a range of defined.\n+        self.initial == false && self.ranges.len() == 1\n+    }\n+}\n+\n /// Transferring the definedness mask to other allocations.\n impl<Tag, Extra> Allocation<Tag, Extra> {\n     /// Creates a run-length encoding of the undef mask."}, {"sha": "cb676821fd438ee407774a6e1eea3d34ed0d42cf", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/580ac0b4f1c6f9cf76f6edafdaf9806437770aff/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580ac0b4f1c6f9cf76f6edafdaf9806437770aff/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=580ac0b4f1c6f9cf76f6edafdaf9806437770aff", "patch": "@@ -841,11 +841,38 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         let tcx = self.tcx.tcx;\n \n+        // The bits have to be saved locally before writing to dest in case src and dest overlap.\n+        assert_eq!(size.bytes() as usize as u64, size.bytes());\n+\n         // This checks relocation edges on the src.\n         let src_bytes =\n             self.get_raw(src.alloc_id)?.get_bytes_with_undef_and_ptr(&tcx, src, size)?.as_ptr();\n         let dest_bytes =\n-            self.get_raw_mut(dest.alloc_id)?.get_bytes_mut(&tcx, dest, size * length)?.as_mut_ptr();\n+            self.get_raw_mut(dest.alloc_id)?.get_bytes_mut(&tcx, dest, size * length)?;\n+\n+        // If `dest_bytes` is empty we just optimize to not run anything for zsts.\n+        // See #67539\n+        if dest_bytes.is_empty() {\n+            return Ok(());\n+        }\n+\n+        let dest_bytes = dest_bytes.as_mut_ptr();\n+\n+        // Prepare a copy of the undef mask.\n+        let compressed = self.get_raw(src.alloc_id)?.compress_undef_range(src, size);\n+\n+        if compressed.all_bytes_undef() {\n+            // Fast path: If all bytes are `undef` then there is nothing to copy. The target range\n+            // is marked as undef but we otherwise omit changing the byte representation which may\n+            // be arbitrary for undef bytes.\n+            // This also avoids writing to the target bytes so that the backing allocation is never\n+            // touched if the bytes stay undef for the whole interpreter execution. On contemporary\n+            // operating system this can avoid physically allocating the page.\n+            let dest_alloc = self.get_raw_mut(dest.alloc_id)?;\n+            dest_alloc.mark_definedness(dest, size * length, false);\n+            dest_alloc.mark_relocation_range(relocations);\n+            return Ok(());\n+        }\n \n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n         // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and\n@@ -881,38 +908,23 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        // copy definedness to the destination\n-        self.copy_undef_mask(src, dest, size, length)?;\n+        // now fill in all the data\n+        self.get_raw_mut(dest.alloc_id)?.mark_compressed_undef_range(\n+            &compressed,\n+            dest,\n+            size,\n+            length,\n+        );\n+\n         // copy the relocations to the destination\n         self.get_raw_mut(dest.alloc_id)?.mark_relocation_range(relocations);\n \n         Ok(())\n     }\n }\n \n-/// Undefined bytes\n+/// Machine pointer introspection.\n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n-    // FIXME: Add a fast version for the common, nonoverlapping case\n-    fn copy_undef_mask(\n-        &mut self,\n-        src: Pointer<M::PointerTag>,\n-        dest: Pointer<M::PointerTag>,\n-        size: Size,\n-        repeat: u64,\n-    ) -> InterpResult<'tcx> {\n-        // The bits have to be saved locally before writing to dest in case src and dest overlap.\n-        assert_eq!(size.bytes() as usize as u64, size.bytes());\n-\n-        let src_alloc = self.get_raw(src.alloc_id)?;\n-        let compressed = src_alloc.compress_undef_range(src, size);\n-\n-        // now fill in all the data\n-        let dest_allocation = self.get_raw_mut(dest.alloc_id)?;\n-        dest_allocation.mark_compressed_undef_range(&compressed, dest, size, repeat);\n-\n-        Ok(())\n-    }\n-\n     pub fn force_ptr(\n         &self,\n         scalar: Scalar<M::PointerTag>,"}]}