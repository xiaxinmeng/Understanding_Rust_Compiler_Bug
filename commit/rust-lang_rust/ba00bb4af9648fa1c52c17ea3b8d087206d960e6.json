{"sha": "ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDBiYjRhZjk2NDhmYTFjNTJjMTdlYTNiOGQwODcyMDZkOTYwZTY=", "commit": {"author": {"name": "Fisher Darling", "email": "fdarlingco@gmail.com", "date": "2020-12-10T19:42:04Z"}, "committer": {"name": "Fisher Darling", "email": "fdarlingco@gmail.com", "date": "2021-01-13T23:04:37Z"}, "message": "Sort impls by trait definition\n\nCloses #6110", "tree": {"sha": "f9ef088f9ac0df7edca669c8e9696f09753f6784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9ef088f9ac0df7edca669c8e9696f09753f6784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "html_url": "https://github.com/rust-lang/rust/commit/ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/comments", "author": {"login": "fisherdarling", "id": 14206675, "node_id": "MDQ6VXNlcjE0MjA2Njc1", "avatar_url": "https://avatars.githubusercontent.com/u/14206675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fisherdarling", "html_url": "https://github.com/fisherdarling", "followers_url": "https://api.github.com/users/fisherdarling/followers", "following_url": "https://api.github.com/users/fisherdarling/following{/other_user}", "gists_url": "https://api.github.com/users/fisherdarling/gists{/gist_id}", "starred_url": "https://api.github.com/users/fisherdarling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fisherdarling/subscriptions", "organizations_url": "https://api.github.com/users/fisherdarling/orgs", "repos_url": "https://api.github.com/users/fisherdarling/repos", "events_url": "https://api.github.com/users/fisherdarling/events{/privacy}", "received_events_url": "https://api.github.com/users/fisherdarling/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fisherdarling", "id": 14206675, "node_id": "MDQ6VXNlcjE0MjA2Njc1", "avatar_url": "https://avatars.githubusercontent.com/u/14206675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fisherdarling", "html_url": "https://github.com/fisherdarling", "followers_url": "https://api.github.com/users/fisherdarling/followers", "following_url": "https://api.github.com/users/fisherdarling/following{/other_user}", "gists_url": "https://api.github.com/users/fisherdarling/gists{/gist_id}", "starred_url": "https://api.github.com/users/fisherdarling/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fisherdarling/subscriptions", "organizations_url": "https://api.github.com/users/fisherdarling/orgs", "repos_url": "https://api.github.com/users/fisherdarling/repos", "events_url": "https://api.github.com/users/fisherdarling/events{/privacy}", "received_events_url": "https://api.github.com/users/fisherdarling/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab210d9b2d877ca9ed02bd7e0c8952d133965d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab210d9b2d877ca9ed02bd7e0c8952d133965d3", "html_url": "https://github.com/rust-lang/rust/commit/dab210d9b2d877ca9ed02bd7e0c8952d133965d3"}], "stats": {"total": 238, "additions": 238, "deletions": 0}, "files": [{"sha": "309f291c8631d4ba5b8ac0bd75595f88a06b7b89", "filename": "crates/assists/src/handlers/reorder_impl.rs", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freorder_impl.rs?ref=ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "patch": "@@ -0,0 +1,201 @@\n+use itertools::Itertools;\n+use rustc_hash::FxHashMap;\n+\n+use hir::{PathResolution, Semantics};\n+use ide_db::RootDatabase;\n+use syntax::{\n+    algo,\n+    ast::{self, NameOwner},\n+    AstNode,\n+};\n+use test_utils::mark;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: reorder_impl\n+//\n+// Reorder the methods of an `impl Trait`. The methods will be ordered\n+// in the same order as in the trait definition.\n+//\n+// ```\n+// trait Foo {\n+//     fn a() {}\n+//     fn b() {}\n+//     fn c() {}\n+// }\n+//\n+// struct Bar;\n+// $0impl Foo for Bar {\n+//     fn b() {}\n+//     fn c() {}\n+//     fn a() {}\n+// }\n+// ```\n+// ->\n+// ```\n+// trait Foo {\n+//     fn a() {}\n+//     fn b() {}\n+//     fn c() {}\n+// }\n+//\n+// struct Bar;\n+// impl Foo for Bar {\n+//     fn a() {}\n+//     fn b() {}\n+//     fn c() {}\n+// }\n+// ```\n+//\n+pub(crate) fn reorder_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let impl_ast = ctx.find_node_at_offset::<ast::Impl>()?;\n+    let items = impl_ast.assoc_item_list()?;\n+    let methods = get_methods(&items);\n+\n+    let path = impl_ast\n+        .trait_()\n+        .and_then(|t| match t {\n+            ast::Type::PathType(path) => Some(path),\n+            _ => None,\n+        })?\n+        .path()?;\n+\n+    let ranks = compute_method_ranks(&path, ctx)?;\n+    let sorted: Vec<_> = methods\n+        .iter()\n+        .cloned()\n+        .sorted_by_key(|f| {\n+            f.name().and_then(|n| ranks.get(&n.to_string()).copied()).unwrap_or(usize::max_value())\n+        })\n+        .collect();\n+\n+    // Don't edit already sorted methods:\n+    if methods == sorted {\n+        mark::hit!(not_applicable_if_sorted);\n+        return None;\n+    }\n+\n+    let target = items.syntax().text_range();\n+    acc.add(AssistId(\"reorder_impl\", AssistKind::RefactorRewrite), \"Sort methods\", target, |edit| {\n+        let mut rewriter = algo::SyntaxRewriter::default();\n+        for (old, new) in methods.iter().zip(&sorted) {\n+            rewriter.replace(old.syntax(), new.syntax());\n+        }\n+        edit.rewrite(rewriter);\n+    })\n+}\n+\n+fn compute_method_ranks(path: &ast::Path, ctx: &AssistContext) -> Option<FxHashMap<String, usize>> {\n+    let td = trait_definition(path, &ctx.sema)?;\n+\n+    Some(\n+        td.items(ctx.db())\n+            .iter()\n+            .flat_map(|i| match i {\n+                hir::AssocItem::Function(f) => Some(f),\n+                _ => None,\n+            })\n+            .enumerate()\n+            .map(|(idx, func)| ((func.name(ctx.db()).to_string(), idx)))\n+            .collect(),\n+    )\n+}\n+\n+fn trait_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<hir::Trait> {\n+    match sema.resolve_path(path)? {\n+        PathResolution::Def(hir::ModuleDef::Trait(trait_)) => Some(trait_),\n+        _ => None,\n+    }\n+}\n+\n+fn get_methods(items: &ast::AssocItemList) -> Vec<ast::Fn> {\n+    items\n+        .assoc_items()\n+        .flat_map(|i| match i {\n+            ast::AssocItem::Fn(f) => Some(f),\n+            _ => None,\n+        })\n+        .filter(|f| f.name().is_some())\n+        .collect()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use test_utils::mark;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn not_applicable_if_sorted() {\n+        mark::check!(not_applicable_if_sorted);\n+        check_assist_not_applicable(\n+            reorder_impl,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+struct Foo;\n+$0impl Bar for Foo {\n+    fn a() {}\n+    fn z() {}\n+    fn b() {}\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_empty() {\n+        check_assist_not_applicable(\n+            reorder_impl,\n+            r#\"\n+trait Bar {};\n+struct Foo;\n+$0impl Bar for Foo {}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_impl_trait_methods() {\n+        check_assist(\n+            reorder_impl,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn c() {}\n+    fn b() {}\n+    fn d() {}\n+}\n+\n+struct Foo;\n+$0impl Bar for Foo {\n+    fn d() {}\n+    fn b() {}\n+    fn c() {}\n+    fn a() {}\n+}\n+        \"#,\n+            r#\"\n+trait Bar {\n+    fn a() {}\n+    fn c() {}\n+    fn b() {}\n+    fn d() {}\n+}\n+\n+struct Foo;\n+impl Bar for Foo {\n+    fn a() {}\n+    fn c() {}\n+    fn b() {}\n+    fn d() {}\n+}\n+        \"#,\n+        )\n+    }\n+}"}, {"sha": "1080294abc83f39078be8f8b3e6d106e5ef19e4d", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "patch": "@@ -146,6 +146,7 @@ mod handlers {\n     mod remove_mut;\n     mod remove_unused_param;\n     mod reorder_fields;\n+    mod reorder_impl;\n     mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod replace_impl_trait_with_generic;\n@@ -202,6 +203,7 @@ mod handlers {\n             remove_mut::remove_mut,\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n+            reorder_impl::reorder_impl,\n             replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_if_let_with_match::replace_match_with_if_let,"}, {"sha": "217f577eba99c97f88de63ddd104deecb25ce4a5", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba00bb4af9648fa1c52c17ea3b8d087206d960e6/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ba00bb4af9648fa1c52c17ea3b8d087206d960e6", "patch": "@@ -895,6 +895,41 @@ const test: Foo = Foo {foo: 1, bar: 0}\n     )\n }\n \n+#[test]\n+fn doctest_reorder_impl() {\n+    check_doc_test(\n+        \"reorder_impl\",\n+        r#####\"\n+trait Foo {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+\n+struct Bar;\n+$0impl Foo for Bar {\n+    fn b() {}\n+    fn c() {}\n+    fn a() {}\n+}\n+\"#####,\n+        r#####\"\n+trait Foo {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+\n+struct Bar;\n+impl Foo for Bar {\n+    fn a() {}\n+    fn b() {}\n+    fn c() {}\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_derive_with_manual_impl() {\n     check_doc_test("}]}