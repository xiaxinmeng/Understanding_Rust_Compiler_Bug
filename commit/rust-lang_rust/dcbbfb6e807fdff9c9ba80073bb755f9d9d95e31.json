{"sha": "dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYmJmYjZlODA3ZmRmZjljOWJhODAwNzNiYjc1NWY5ZDlkOTVlMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-12T17:34:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-12T17:34:21Z"}, "message": "Auto merge of #45007 - undecidabot:optimize-iter, r=bluss\n\nOptimize comparison functions of Iterator\n\nReplaced matching on tuples which led to less performant code generation. Testing on microbenchmarks consistently showed ~1.35x improvement in performance on my machine.\n\nFixes #44729.", "tree": {"sha": "957e84b32722a8f1bc57f53cfea5a1ae5efd4a0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/957e84b32722a8f1bc57f53cfea5a1ae5efd4a0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "html_url": "https://github.com/rust-lang/rust/commit/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1807f27a338e8e3f8c3a9c99fde2223b5942e640", "url": "https://api.github.com/repos/rust-lang/rust/commits/1807f27a338e8e3f8c3a9c99fde2223b5942e640", "html_url": "https://github.com/rust-lang/rust/commit/1807f27a338e8e3f8c3a9c99fde2223b5942e640"}, {"sha": "3264c836bbbbf9d62bc088443ca844709f8746a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3264c836bbbbf9d62bc088443ca844709f8746a1", "html_url": "https://github.com/rust-lang/rust/commit/3264c836bbbbf9d62bc088443ca844709f8746a1"}], "stats": {"total": 186, "additions": 114, "deletions": 72}, "files": [{"sha": "79767b37601f8e91c55d8b1a3f34dd95cda7ced1", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 114, "deletions": 72, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=dcbbfb6e807fdff9c9ba80073bb755f9d9d95e31", "patch": "@@ -2059,14 +2059,23 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return Ordering::Equal,\n-                (None, _   ) => return Ordering::Less,\n-                (_   , None) => return Ordering::Greater,\n-                (Some(x), Some(y)) => match x.cmp(&y) {\n-                    Ordering::Equal => (),\n-                    non_eq => return non_eq,\n+            let x = match self.next() {\n+                None => if other.next().is_none() {\n+                    return Ordering::Equal\n+                } else {\n+                    return Ordering::Less\n                 },\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return Ordering::Greater,\n+                Some(val) => val,\n+            };\n+\n+            match x.cmp(&y) {\n+                Ordering::Equal => (),\n+                non_eq => return non_eq,\n             }\n         }\n     }\n@@ -2082,14 +2091,23 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return Some(Ordering::Equal),\n-                (None, _   ) => return Some(Ordering::Less),\n-                (_   , None) => return Some(Ordering::Greater),\n-                (Some(x), Some(y)) => match x.partial_cmp(&y) {\n-                    Some(Ordering::Equal) => (),\n-                    non_eq => return non_eq,\n+            let x = match self.next() {\n+                None => if other.next().is_none() {\n+                    return Some(Ordering::Equal)\n+                } else {\n+                    return Some(Ordering::Less)\n                 },\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return Some(Ordering::Greater),\n+                Some(val) => val,\n+            };\n+\n+            match x.partial_cmp(&y) {\n+                Some(Ordering::Equal) => (),\n+                non_eq => return non_eq,\n             }\n         }\n     }\n@@ -2105,11 +2123,17 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return true,\n-                (None, _) | (_, None) => return false,\n-                (Some(x), Some(y)) => if x != y { return false },\n-            }\n+            let x = match self.next() {\n+                None => return other.next().is_none(),\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return false,\n+                Some(val) => val,\n+            };\n+\n+            if x != y { return false }\n         }\n     }\n \n@@ -2124,11 +2148,17 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return false,\n-                (None, _) | (_, None) => return true,\n-                (Some(x), Some(y)) => if x.ne(&y) { return true },\n-            }\n+            let x = match self.next() {\n+                None => return other.next().is_some(),\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return true,\n+                Some(val) => val,\n+            };\n+\n+            if x != y { return true }\n         }\n     }\n \n@@ -2143,18 +2173,21 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return false,\n-                (None, _   ) => return true,\n-                (_   , None) => return false,\n-                (Some(x), Some(y)) => {\n-                    match x.partial_cmp(&y) {\n-                        Some(Ordering::Less) => return true,\n-                        Some(Ordering::Equal) => {}\n-                        Some(Ordering::Greater) => return false,\n-                        None => return false,\n-                    }\n-                },\n+            let x = match self.next() {\n+                None => return other.next().is_some(),\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return false,\n+                Some(val) => val,\n+            };\n+\n+            match x.partial_cmp(&y) {\n+                Some(Ordering::Less) => return true,\n+                Some(Ordering::Equal) => (),\n+                Some(Ordering::Greater) => return false,\n+                None => return false,\n             }\n         }\n     }\n@@ -2170,18 +2203,21 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return true,\n-                (None, _   ) => return true,\n-                (_   , None) => return false,\n-                (Some(x), Some(y)) => {\n-                    match x.partial_cmp(&y) {\n-                        Some(Ordering::Less) => return true,\n-                        Some(Ordering::Equal) => {}\n-                        Some(Ordering::Greater) => return false,\n-                        None => return false,\n-                    }\n-                },\n+            let x = match self.next() {\n+                None => { other.next(); return true; },\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return false,\n+                Some(val) => val,\n+            };\n+\n+            match x.partial_cmp(&y) {\n+                Some(Ordering::Less) => return true,\n+                Some(Ordering::Equal) => (),\n+                Some(Ordering::Greater) => return false,\n+                None => return false,\n             }\n         }\n     }\n@@ -2197,18 +2233,21 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return false,\n-                (None, _   ) => return false,\n-                (_   , None) => return true,\n-                (Some(x), Some(y)) => {\n-                    match x.partial_cmp(&y) {\n-                        Some(Ordering::Less) => return false,\n-                        Some(Ordering::Equal) => {}\n-                        Some(Ordering::Greater) => return true,\n-                        None => return false,\n-                    }\n-                }\n+            let x = match self.next() {\n+                None => { other.next(); return false; },\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return true,\n+                Some(val) => val,\n+            };\n+\n+            match x.partial_cmp(&y) {\n+                Some(Ordering::Less) => return false,\n+                Some(Ordering::Equal) => (),\n+                Some(Ordering::Greater) => return true,\n+                None => return false,\n             }\n         }\n     }\n@@ -2224,18 +2263,21 @@ pub trait Iterator {\n         let mut other = other.into_iter();\n \n         loop {\n-            match (self.next(), other.next()) {\n-                (None, None) => return true,\n-                (None, _   ) => return false,\n-                (_   , None) => return true,\n-                (Some(x), Some(y)) => {\n-                    match x.partial_cmp(&y) {\n-                        Some(Ordering::Less) => return false,\n-                        Some(Ordering::Equal) => {}\n-                        Some(Ordering::Greater) => return true,\n-                        None => return false,\n-                    }\n-                },\n+            let x = match self.next() {\n+                None => return other.next().is_none(),\n+                Some(val) => val,\n+            };\n+\n+            let y = match other.next() {\n+                None => return true,\n+                Some(val) => val,\n+            };\n+\n+            match x.partial_cmp(&y) {\n+                Some(Ordering::Less) => return false,\n+                Some(Ordering::Equal) => (),\n+                Some(Ordering::Greater) => return true,\n+                None => return false,\n             }\n         }\n     }"}]}