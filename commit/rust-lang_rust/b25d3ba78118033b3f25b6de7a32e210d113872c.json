{"sha": "b25d3ba78118033b3f25b6de7a32e210d113872c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWQzYmE3ODExODAzM2IzZjI1YjZkZTdhMzJlMjEwZDExMzg3MmM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-15T21:36:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-03-16T08:41:24Z"}, "message": "ast/hir: Rename field-related structures\n\nStructField -> FieldDef (\"field definition\")\nField -> ExprField (\"expression field\", not \"field expression\")\nFieldPat -> PatField (\"pattern field\", not \"field pattern\")\n\nAlso rename visiting and other methods working on them.", "tree": {"sha": "52e2c28767768d4303c4e9161862cbc6b99c10b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e2c28767768d4303c4e9161862cbc6b99c10b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25d3ba78118033b3f25b6de7a32e210d113872c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25d3ba78118033b3f25b6de7a32e210d113872c", "html_url": "https://github.com/rust-lang/rust/commit/b25d3ba78118033b3f25b6de7a32e210d113872c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25d3ba78118033b3f25b6de7a32e210d113872c/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195ad4830e11a544391abe296b146450dea8411b", "url": "https://api.github.com/repos/rust-lang/rust/commits/195ad4830e11a544391abe296b146450dea8411b", "html_url": "https://github.com/rust-lang/rust/commit/195ad4830e11a544391abe296b146450dea8411b"}], "stats": {"total": 614, "additions": 313, "deletions": 301}, "files": [{"sha": "e3de0cc0a7ededa08fe6969fd81bfb13f8cce65a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -647,7 +647,7 @@ impl Pat {\n /// are treated the same as `x: x, y: ref y, z: ref mut z`,\n /// except when `is_shorthand` is true.\n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct FieldPat {\n+pub struct PatField {\n     /// The identifier for the field.\n     pub ident: Ident,\n     /// The pattern the field is destructured to.\n@@ -692,7 +692,7 @@ pub enum PatKind {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(Path, Vec<FieldPat>, /* recovered */ bool),\n+    Struct(Path, Vec<PatField>, /* recovered */ bool),\n \n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     TupleStruct(Path, Vec<P<Pat>>),\n@@ -1027,9 +1027,9 @@ pub struct Arm {\n     pub is_placeholder: bool,\n }\n \n-/// Access of a named (e.g., `obj.foo`) or unnamed (e.g., `obj.0`) struct field.\n+/// A single field in a struct expression, e.g. `x: value` and `y` in `Foo { x: value, y }`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct Field {\n+pub struct ExprField {\n     pub attrs: AttrVec,\n     pub id: NodeId,\n     pub span: Span,\n@@ -1369,7 +1369,7 @@ pub enum ExprKind {\n     /// A struct literal expression.\n     ///\n     /// E.g., `Foo {x: 1, y: 2}`, or `Foo {x: 1, .. rest}`.\n-    Struct(Path, Vec<Field>, StructRest),\n+    Struct(Path, Vec<ExprField>, StructRest),\n \n     /// An array literal constructed from one repeated element.\n     ///\n@@ -2519,11 +2519,11 @@ impl VisibilityKind {\n     }\n }\n \n-/// Field of a struct.\n+/// Field definition in a struct, variant or union.\n ///\n /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.\n #[derive(Clone, Encodable, Decodable, Debug)]\n-pub struct StructField {\n+pub struct FieldDef {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n@@ -2540,11 +2540,11 @@ pub enum VariantData {\n     /// Struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(Vec<StructField>, bool),\n+    Struct(Vec<FieldDef>, bool),\n     /// Tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(Vec<StructField>, NodeId),\n+    Tuple(Vec<FieldDef>, NodeId),\n     /// Unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n@@ -2553,7 +2553,7 @@ pub enum VariantData {\n \n impl VariantData {\n     /// Return the fields of this variant.\n-    pub fn fields(&self) -> &[StructField] {\n+    pub fn fields(&self) -> &[FieldDef] {\n         match *self {\n             VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, _) => fields,\n             _ => &[],"}, {"sha": "63bc7c49a99956b1858e796bfb0a84671433d742", "filename": "compiler/rustc_ast/src/ast_like.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast_like.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1,6 +1,6 @@\n use super::ptr::P;\n use super::tokenstream::LazyTokenStream;\n-use super::{Arm, Field, FieldPat, GenericParam, Param, StructField, Variant};\n+use super::{Arm, ExprField, FieldDef, GenericParam, Param, PatField, Variant};\n use super::{AssocItem, Expr, ForeignItem, Item, Local};\n use super::{AttrItem, AttrKind, Block, Pat, Path, Ty, Visibility};\n use super::{AttrVec, Attribute, Stmt, StmtKind};\n@@ -187,8 +187,7 @@ derive_has_tokens_and_attrs! {\n // These ast nodes only support inert attributes, so they don't\n // store tokens (since nothing can observe them)\n derive_has_attrs_no_tokens! {\n-    StructField, Arm,\n-    Field, FieldPat, Variant, Param, GenericParam\n+    FieldDef, Arm, ExprField, PatField, Variant, Param, GenericParam\n }\n \n // These AST nodes don't support attributes, but can"}, {"sha": "9bdd89359147a806f33e10a87a79aa6344b4ac9c", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -102,8 +102,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_fn_header(header, self);\n     }\n \n-    fn flat_map_struct_field(&mut self, sf: StructField) -> SmallVec<[StructField; 1]> {\n-        noop_flat_map_struct_field(sf, self)\n+    fn flat_map_field_def(&mut self, fd: FieldDef) -> SmallVec<[FieldDef; 1]> {\n+        noop_flat_map_field_def(fd, self)\n     }\n \n     fn visit_item_kind(&mut self, i: &mut ItemKind) {\n@@ -254,8 +254,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_mt(mt, self);\n     }\n \n-    fn flat_map_field(&mut self, f: Field) -> SmallVec<[Field; 1]> {\n-        noop_flat_map_field(f, self)\n+    fn flat_map_expr_field(&mut self, f: ExprField) -> SmallVec<[ExprField; 1]> {\n+        noop_flat_map_expr_field(f, self)\n     }\n \n     fn visit_where_clause(&mut self, where_clause: &mut WhereClause) {\n@@ -278,8 +278,8 @@ pub trait MutVisitor: Sized {\n         // Do nothing.\n     }\n \n-    fn flat_map_field_pattern(&mut self, fp: FieldPat) -> SmallVec<[FieldPat; 1]> {\n-        noop_flat_map_field_pattern(fp, self)\n+    fn flat_map_pat_field(&mut self, fp: PatField) -> SmallVec<[PatField; 1]> {\n+        noop_flat_map_pat_field(fp, self)\n     }\n }\n \n@@ -385,11 +385,11 @@ pub fn visit_delim_span<T: MutVisitor>(dspan: &mut DelimSpan, vis: &mut T) {\n     vis.visit_span(&mut dspan.close);\n }\n \n-pub fn noop_flat_map_field_pattern<T: MutVisitor>(\n-    mut fp: FieldPat,\n+pub fn noop_flat_map_pat_field<T: MutVisitor>(\n+    mut fp: PatField,\n     vis: &mut T,\n-) -> SmallVec<[FieldPat; 1]> {\n-    let FieldPat { attrs, id, ident, is_placeholder: _, is_shorthand: _, pat, span } = &mut fp;\n+) -> SmallVec<[PatField; 1]> {\n+    let PatField { attrs, id, ident, is_placeholder: _, is_shorthand: _, pat, span } = &mut fp;\n     vis.visit_id(id);\n     vis.visit_ident(ident);\n     vis.visit_pat(pat);\n@@ -842,10 +842,10 @@ pub fn noop_visit_where_predicate<T: MutVisitor>(pred: &mut WherePredicate, vis:\n pub fn noop_visit_variant_data<T: MutVisitor>(vdata: &mut VariantData, vis: &mut T) {\n     match vdata {\n         VariantData::Struct(fields, ..) => {\n-            fields.flat_map_in_place(|field| vis.flat_map_struct_field(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_field_def(field));\n         }\n         VariantData::Tuple(fields, id) => {\n-            fields.flat_map_in_place(|field| vis.flat_map_struct_field(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_field_def(field));\n             vis.visit_id(id);\n         }\n         VariantData::Unit(id) => vis.visit_id(id),\n@@ -864,22 +864,25 @@ pub fn noop_visit_poly_trait_ref<T: MutVisitor>(p: &mut PolyTraitRef, vis: &mut\n     vis.visit_span(span);\n }\n \n-pub fn noop_flat_map_struct_field<T: MutVisitor>(\n-    mut sf: StructField,\n+pub fn noop_flat_map_field_def<T: MutVisitor>(\n+    mut fd: FieldDef,\n     visitor: &mut T,\n-) -> SmallVec<[StructField; 1]> {\n-    let StructField { span, ident, vis, id, ty, attrs, is_placeholder: _ } = &mut sf;\n+) -> SmallVec<[FieldDef; 1]> {\n+    let FieldDef { span, ident, vis, id, ty, attrs, is_placeholder: _ } = &mut fd;\n     visitor.visit_span(span);\n     visit_opt(ident, |ident| visitor.visit_ident(ident));\n     visitor.visit_vis(vis);\n     visitor.visit_id(id);\n     visitor.visit_ty(ty);\n     visit_attrs(attrs, visitor);\n-    smallvec![sf]\n+    smallvec![fd]\n }\n \n-pub fn noop_flat_map_field<T: MutVisitor>(mut f: Field, vis: &mut T) -> SmallVec<[Field; 1]> {\n-    let Field { ident, expr, span, is_shorthand: _, attrs, id, is_placeholder: _ } = &mut f;\n+pub fn noop_flat_map_expr_field<T: MutVisitor>(\n+    mut f: ExprField,\n+    vis: &mut T,\n+) -> SmallVec<[ExprField; 1]> {\n+    let ExprField { ident, expr, span, is_shorthand: _, attrs, id, is_placeholder: _ } = &mut f;\n     vis.visit_ident(ident);\n     vis.visit_expr(expr);\n     vis.visit_id(id);\n@@ -1102,7 +1105,7 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n         }\n         PatKind::Struct(path, fields, _etc) => {\n             vis.visit_path(path);\n-            fields.flat_map_in_place(|field| vis.flat_map_field_pattern(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_pat_field(field));\n         }\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n@@ -1285,7 +1288,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n         ExprKind::MacCall(mac) => vis.visit_mac_call(mac),\n         ExprKind::Struct(path, fields, expr) => {\n             vis.visit_path(path);\n-            fields.flat_map_in_place(|field| vis.flat_map_field(field));\n+            fields.flat_map_in_place(|field| vis.flat_map_expr_field(field));\n             match expr {\n                 StructRest::Base(expr) => vis.visit_expr(expr),\n                 StructRest::Rest(_span) => {}"}, {"sha": "722666af7ac673b6616d26ef7e6d9c64de371c58", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -151,8 +151,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_variant_data(&mut self, s: &'ast VariantData) {\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &'ast StructField) {\n-        walk_struct_field(self, s)\n+    fn visit_field_def(&mut self, s: &'ast FieldDef) {\n+        walk_field_def(self, s)\n     }\n     fn visit_enum_def(\n         &mut self,\n@@ -208,11 +208,11 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_fn_header(&mut self, _header: &'ast FnHeader) {\n         // Nothing to do\n     }\n-    fn visit_field(&mut self, f: &'ast Field) {\n-        walk_field(self, f)\n+    fn visit_expr_field(&mut self, f: &'ast ExprField) {\n+        walk_expr_field(self, f)\n     }\n-    fn visit_field_pattern(&mut self, fp: &'ast FieldPat) {\n-        walk_field_pattern(self, fp)\n+    fn visit_pat_field(&mut self, fp: &'ast PatField) {\n+        walk_pat_field(self, fp)\n     }\n }\n \n@@ -364,13 +364,13 @@ where\n     walk_list!(visitor, visit_attribute, &variant.attrs);\n }\n \n-pub fn walk_field<'a, V: Visitor<'a>>(visitor: &mut V, f: &'a Field) {\n+pub fn walk_expr_field<'a, V: Visitor<'a>>(visitor: &mut V, f: &'a ExprField) {\n     visitor.visit_expr(&f.expr);\n     visitor.visit_ident(f.ident);\n     walk_list!(visitor, visit_attribute, f.attrs.iter());\n }\n \n-pub fn walk_field_pattern<'a, V: Visitor<'a>>(visitor: &mut V, fp: &'a FieldPat) {\n+pub fn walk_pat_field<'a, V: Visitor<'a>>(visitor: &mut V, fp: &'a PatField) {\n     visitor.visit_ident(fp.ident);\n     visitor.visit_pat(&fp.pat);\n     walk_list!(visitor, visit_attribute, fp.attrs.iter());\n@@ -509,7 +509,7 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n         }\n         PatKind::Struct(ref path, ref fields, _) => {\n             visitor.visit_path(path, pattern.id);\n-            walk_list!(visitor, visit_field_pattern, fields);\n+            walk_list!(visitor, visit_pat_field, fields);\n         }\n         PatKind::Box(ref subpattern)\n         | PatKind::Ref(ref subpattern, _)\n@@ -668,16 +668,16 @@ pub fn walk_assoc_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a AssocItem,\n }\n \n pub fn walk_struct_def<'a, V: Visitor<'a>>(visitor: &mut V, struct_definition: &'a VariantData) {\n-    walk_list!(visitor, visit_struct_field, struct_definition.fields());\n+    walk_list!(visitor, visit_field_def, struct_definition.fields());\n }\n \n-pub fn walk_struct_field<'a, V: Visitor<'a>>(visitor: &mut V, struct_field: &'a StructField) {\n-    visitor.visit_vis(&struct_field.vis);\n-    if let Some(ident) = struct_field.ident {\n+pub fn walk_field_def<'a, V: Visitor<'a>>(visitor: &mut V, field: &'a FieldDef) {\n+    visitor.visit_vis(&field.vis);\n+    if let Some(ident) = field.ident {\n         visitor.visit_ident(ident);\n     }\n-    visitor.visit_ty(&struct_field.ty);\n-    walk_list!(visitor, visit_attribute, &struct_field.attrs);\n+    visitor.visit_ty(&field.ty);\n+    walk_list!(visitor, visit_attribute, &field.attrs);\n }\n \n pub fn walk_block<'a, V: Visitor<'a>>(visitor: &mut V, block: &'a Block) {\n@@ -723,7 +723,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         }\n         ExprKind::Struct(ref path, ref fields, ref optional_base) => {\n             visitor.visit_path(path, expression.id);\n-            walk_list!(visitor, visit_field, fields);\n+            walk_list!(visitor, visit_expr_field, fields);\n             match optional_base {\n                 StructRest::Base(expr) => visitor.visit_expr(expr),\n                 StructRest::Rest(_span) => {}"}, {"sha": "16514f7cc13790b433ebaa643130023b6f081762", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -244,7 +244,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             ParamMode::Optional,\n                             ImplTraitContext::disallowed(),\n                         )),\n-                        self.arena.alloc_from_iter(fields.iter().map(|x| self.lower_field(x))),\n+                        self.arena.alloc_from_iter(fields.iter().map(|x| self.lower_expr_field(x))),\n                         rest,\n                     )\n                 }\n@@ -1113,7 +1113,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ExprKind::Struct(path, fields, rest) => {\n                 let field_pats = self.arena.alloc_from_iter(fields.iter().map(|f| {\n                     let pat = self.destructure_assign(&f.expr, eq_sign_span, assignments);\n-                    hir::FieldPat {\n+                    hir::PatField {\n                         hir_id: self.next_id(),\n                         ident: f.ident,\n                         pat,\n@@ -1244,7 +1244,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e))).map(|(s, e)| {\n                 let expr = self.lower_expr(&e);\n                 let ident = Ident::new(Symbol::intern(s), e.span);\n-                self.field(ident, expr, e.span)\n+                self.expr_field(ident, expr, e.span)\n             }),\n         );\n \n@@ -1658,8 +1658,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::ExprKind::LlvmInlineAsm(self.arena.alloc(hir_asm))\n     }\n \n-    fn lower_field(&mut self, f: &Field) -> hir::Field<'hir> {\n-        hir::Field {\n+    fn lower_expr_field(&mut self, f: &ExprField) -> hir::ExprField<'hir> {\n+        hir::ExprField {\n             hir_id: self.next_id(),\n             ident: f.ident,\n             expr: self.lower_expr(&f.expr),\n@@ -2156,8 +2156,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         hir::Expr { hir_id, kind, span }\n     }\n \n-    fn field(&mut self, ident: Ident, expr: &'hir hir::Expr<'hir>, span: Span) -> hir::Field<'hir> {\n-        hir::Field { hir_id: self.next_id(), ident, span, expr, is_shorthand: false }\n+    fn expr_field(\n+        &mut self,\n+        ident: Ident,\n+        expr: &'hir hir::Expr<'hir>,\n+        span: Span,\n+    ) -> hir::ExprField<'hir> {\n+        hir::ExprField { hir_id: self.next_id(), ident, span, expr, is_shorthand: false }\n     }\n \n     fn arm(&mut self, pat: &'hir hir::Pat<'hir>, expr: &'hir hir::Expr<'hir>) -> hir::Arm<'hir> {"}, {"sha": "edd0c5fb9647eae5746f394d18aa22fe97400cfc", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -769,15 +769,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match *vdata {\n             VariantData::Struct(ref fields, recovered) => hir::VariantData::Struct(\n                 self.arena\n-                    .alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_struct_field(f))),\n+                    .alloc_from_iter(fields.iter().enumerate().map(|f| self.lower_field_def(f))),\n                 recovered,\n             ),\n             VariantData::Tuple(ref fields, id) => {\n                 let ctor_id = self.lower_node_id(id);\n                 self.alias_attrs(ctor_id, parent_id);\n                 hir::VariantData::Tuple(\n                     self.arena.alloc_from_iter(\n-                        fields.iter().enumerate().map(|f| self.lower_struct_field(f)),\n+                        fields.iter().enumerate().map(|f| self.lower_field_def(f)),\n                     ),\n                     ctor_id,\n                 )\n@@ -790,7 +790,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField<'hir> {\n+    fn lower_field_def(&mut self, (index, f): (usize, &FieldDef)) -> hir::FieldDef<'hir> {\n         let ty = if let TyKind::Path(ref qself, ref path) = f.ty.kind {\n             let t = self.lower_path_ty(\n                 &f.ty,\n@@ -805,7 +805,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n-        hir::StructField {\n+        hir::FieldDef {\n             span: f.span,\n             hir_id,\n             ident: match f.ident {"}, {"sha": "ccf34898ba879cfe2d6089dae476acdf2f7a968e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -2607,8 +2607,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         span: Span,\n         pat: &'hir hir::Pat<'hir>,\n-    ) -> &'hir [hir::FieldPat<'hir>] {\n-        let field = hir::FieldPat {\n+    ) -> &'hir [hir::PatField<'hir>] {\n+        let field = hir::PatField {\n             hir_id: self.next_id(),\n             ident: Ident::new(sym::integer(0), span),\n             is_shorthand: false,\n@@ -2622,7 +2622,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         span: Span,\n         lang_item: hir::LangItem,\n-        fields: &'hir [hir::FieldPat<'hir>],\n+        fields: &'hir [hir::PatField<'hir>],\n     ) -> &'hir hir::Pat<'hir> {\n         let qpath = hir::QPath::LangItem(lang_item, span);\n         self.pat(span, hir::PatKind::Struct(qpath, fields, false))"}, {"sha": "2451409aac88ebc1654197b4048ec3e538225866", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             ImplTraitContext::disallowed(),\n                         );\n \n-                        let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::FieldPat {\n+                        let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {\n                             hir_id: self.next_id(),\n                             ident: f.ident,\n                             pat: self.lower_pat(&f.pat),"}, {"sha": "3980e6da68250497ade236d24a6354c7fb834f5d", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -88,9 +88,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &StructField) {\n+    fn visit_field_def(&mut self, s: &FieldDef) {\n         self.count += 1;\n-        walk_struct_field(self, s)\n+        walk_field_def(self, s)\n     }\n     fn visit_enum_def(\n         &mut self,"}, {"sha": "9b893de7da3908f3f0876d4058eb355f63309481", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1711,7 +1711,7 @@ impl<'a> State<'a> {\n     fn print_expr_struct(\n         &mut self,\n         path: &ast::Path,\n-        fields: &[ast::Field],\n+        fields: &[ast::ExprField],\n         rest: &ast::StructRest,\n         attrs: &[ast::Attribute],\n     ) {"}, {"sha": "025872df0173f17c65061f6b51949bb13b6439b4", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -67,20 +67,20 @@ impl CfgEval<'_> {\n                 expr\n             }),\n             Annotatable::Arm(arm) => Annotatable::Arm(self.flat_map_arm(arm).pop().unwrap()),\n-            Annotatable::Field(field) => {\n-                Annotatable::Field(self.flat_map_field(field).pop().unwrap())\n+            Annotatable::ExprField(field) => {\n+                Annotatable::ExprField(self.flat_map_expr_field(field).pop().unwrap())\n             }\n-            Annotatable::FieldPat(fp) => {\n-                Annotatable::FieldPat(self.flat_map_field_pattern(fp).pop().unwrap())\n+            Annotatable::PatField(fp) => {\n+                Annotatable::PatField(self.flat_map_pat_field(fp).pop().unwrap())\n             }\n             Annotatable::GenericParam(param) => {\n                 Annotatable::GenericParam(self.flat_map_generic_param(param).pop().unwrap())\n             }\n             Annotatable::Param(param) => {\n                 Annotatable::Param(self.flat_map_param(param).pop().unwrap())\n             }\n-            Annotatable::StructField(sf) => {\n-                Annotatable::StructField(self.flat_map_struct_field(sf).pop().unwrap())\n+            Annotatable::FieldDef(sf) => {\n+                Annotatable::FieldDef(self.flat_map_field_def(sf).pop().unwrap())\n             }\n             Annotatable::Variant(v) => {\n                 Annotatable::Variant(self.flat_map_variant(v).pop().unwrap())\n@@ -135,20 +135,20 @@ impl MutVisitor for CfgEval<'_> {\n         mut_visit::noop_flat_map_arm(configure!(self, arm), self)\n     }\n \n-    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n-        mut_visit::noop_flat_map_field(configure!(self, field), self)\n+    fn flat_map_expr_field(&mut self, field: ast::ExprField) -> SmallVec<[ast::ExprField; 1]> {\n+        mut_visit::noop_flat_map_expr_field(configure!(self, field), self)\n     }\n \n-    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n-        mut_visit::noop_flat_map_field_pattern(configure!(self, fp), self)\n+    fn flat_map_pat_field(&mut self, fp: ast::PatField) -> SmallVec<[ast::PatField; 1]> {\n+        mut_visit::noop_flat_map_pat_field(configure!(self, fp), self)\n     }\n \n     fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n         mut_visit::noop_flat_map_param(configure!(self, p), self)\n     }\n \n-    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n-        mut_visit::noop_flat_map_struct_field(configure!(self, sf), self)\n+    fn flat_map_field_def(&mut self, sf: ast::FieldDef) -> SmallVec<[ast::FieldDef; 1]> {\n+        mut_visit::noop_flat_map_field_def(configure!(self, sf), self)\n     }\n \n     fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {"}, {"sha": "da85cc73ffd3c7457d42319a2c098cfca3cbb7c2", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1578,7 +1578,7 @@ impl<'a> TraitDef<'a> {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n-                        ast::FieldPat {\n+                        ast::PatField {\n                             ident: ident.unwrap(),\n                             is_shorthand: false,\n                             attrs: ast::AttrVec::new(),"}, {"sha": "05e5c13dab78009b93d558b19d6c55eb3f822a43", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -36,11 +36,11 @@ pub enum Annotatable {\n     Stmt(P<ast::Stmt>),\n     Expr(P<ast::Expr>),\n     Arm(ast::Arm),\n-    Field(ast::Field),\n-    FieldPat(ast::FieldPat),\n+    ExprField(ast::ExprField),\n+    PatField(ast::PatField),\n     GenericParam(ast::GenericParam),\n     Param(ast::Param),\n-    StructField(ast::StructField),\n+    FieldDef(ast::FieldDef),\n     Variant(ast::Variant),\n }\n \n@@ -54,11 +54,11 @@ impl AstLike for Annotatable {\n             Annotatable::Stmt(ref stmt) => stmt.attrs(),\n             Annotatable::Expr(ref expr) => &expr.attrs,\n             Annotatable::Arm(ref arm) => &arm.attrs,\n-            Annotatable::Field(ref field) => &field.attrs,\n-            Annotatable::FieldPat(ref fp) => &fp.attrs,\n+            Annotatable::ExprField(ref field) => &field.attrs,\n+            Annotatable::PatField(ref fp) => &fp.attrs,\n             Annotatable::GenericParam(ref gp) => &gp.attrs,\n             Annotatable::Param(ref p) => &p.attrs,\n-            Annotatable::StructField(ref sf) => &sf.attrs,\n+            Annotatable::FieldDef(ref sf) => &sf.attrs,\n             Annotatable::Variant(ref v) => &v.attrs(),\n         }\n     }\n@@ -72,11 +72,11 @@ impl AstLike for Annotatable {\n             Annotatable::Stmt(stmt) => stmt.visit_attrs(f),\n             Annotatable::Expr(expr) => expr.visit_attrs(f),\n             Annotatable::Arm(arm) => arm.visit_attrs(f),\n-            Annotatable::Field(field) => field.visit_attrs(f),\n-            Annotatable::FieldPat(fp) => fp.visit_attrs(f),\n+            Annotatable::ExprField(field) => field.visit_attrs(f),\n+            Annotatable::PatField(fp) => fp.visit_attrs(f),\n             Annotatable::GenericParam(gp) => gp.visit_attrs(f),\n             Annotatable::Param(p) => p.visit_attrs(f),\n-            Annotatable::StructField(sf) => sf.visit_attrs(f),\n+            Annotatable::FieldDef(sf) => sf.visit_attrs(f),\n             Annotatable::Variant(v) => v.visit_attrs(f),\n         }\n     }\n@@ -90,11 +90,11 @@ impl AstLike for Annotatable {\n             Annotatable::Stmt(stmt) => stmt.tokens_mut(),\n             Annotatable::Expr(expr) => expr.tokens_mut(),\n             Annotatable::Arm(arm) => arm.tokens_mut(),\n-            Annotatable::Field(field) => field.tokens_mut(),\n-            Annotatable::FieldPat(fp) => fp.tokens_mut(),\n+            Annotatable::ExprField(field) => field.tokens_mut(),\n+            Annotatable::PatField(fp) => fp.tokens_mut(),\n             Annotatable::GenericParam(gp) => gp.tokens_mut(),\n             Annotatable::Param(p) => p.tokens_mut(),\n-            Annotatable::StructField(sf) => sf.tokens_mut(),\n+            Annotatable::FieldDef(sf) => sf.tokens_mut(),\n             Annotatable::Variant(v) => v.tokens_mut(),\n         }\n     }\n@@ -110,11 +110,11 @@ impl Annotatable {\n             Annotatable::Stmt(ref stmt) => stmt.span,\n             Annotatable::Expr(ref expr) => expr.span,\n             Annotatable::Arm(ref arm) => arm.span,\n-            Annotatable::Field(ref field) => field.span,\n-            Annotatable::FieldPat(ref fp) => fp.pat.span,\n+            Annotatable::ExprField(ref field) => field.span,\n+            Annotatable::PatField(ref fp) => fp.pat.span,\n             Annotatable::GenericParam(ref gp) => gp.ident.span,\n             Annotatable::Param(ref p) => p.span,\n-            Annotatable::StructField(ref sf) => sf.span,\n+            Annotatable::FieldDef(ref sf) => sf.span,\n             Annotatable::Variant(ref v) => v.span,\n         }\n     }\n@@ -128,11 +128,11 @@ impl Annotatable {\n             Annotatable::Stmt(stmt) => visitor.visit_stmt(stmt),\n             Annotatable::Expr(expr) => visitor.visit_expr(expr),\n             Annotatable::Arm(arm) => visitor.visit_arm(arm),\n-            Annotatable::Field(field) => visitor.visit_field(field),\n-            Annotatable::FieldPat(fp) => visitor.visit_field_pattern(fp),\n+            Annotatable::ExprField(field) => visitor.visit_expr_field(field),\n+            Annotatable::PatField(fp) => visitor.visit_pat_field(fp),\n             Annotatable::GenericParam(gp) => visitor.visit_generic_param(gp),\n             Annotatable::Param(p) => visitor.visit_param(p),\n-            Annotatable::StructField(sf) => visitor.visit_struct_field(sf),\n+            Annotatable::FieldDef(sf) => visitor.visit_field_def(sf),\n             Annotatable::Variant(v) => visitor.visit_variant(v),\n         }\n     }\n@@ -149,11 +149,11 @@ impl Annotatable {\n             Annotatable::Stmt(stmt) => token::NtStmt(stmt.into_inner()),\n             Annotatable::Expr(expr) => token::NtExpr(expr),\n             Annotatable::Arm(..)\n-            | Annotatable::Field(..)\n-            | Annotatable::FieldPat(..)\n+            | Annotatable::ExprField(..)\n+            | Annotatable::PatField(..)\n             | Annotatable::GenericParam(..)\n             | Annotatable::Param(..)\n-            | Annotatable::StructField(..)\n+            | Annotatable::FieldDef(..)\n             | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n         }\n     }\n@@ -214,16 +214,16 @@ impl Annotatable {\n         }\n     }\n \n-    pub fn expect_field(self) -> ast::Field {\n+    pub fn expect_expr_field(self) -> ast::ExprField {\n         match self {\n-            Annotatable::Field(field) => field,\n+            Annotatable::ExprField(field) => field,\n             _ => panic!(\"expected field\"),\n         }\n     }\n \n-    pub fn expect_field_pattern(self) -> ast::FieldPat {\n+    pub fn expect_pat_field(self) -> ast::PatField {\n         match self {\n-            Annotatable::FieldPat(fp) => fp,\n+            Annotatable::PatField(fp) => fp,\n             _ => panic!(\"expected field pattern\"),\n         }\n     }\n@@ -242,9 +242,9 @@ impl Annotatable {\n         }\n     }\n \n-    pub fn expect_struct_field(self) -> ast::StructField {\n+    pub fn expect_field_def(self) -> ast::FieldDef {\n         match self {\n-            Annotatable::StructField(sf) => sf,\n+            Annotatable::FieldDef(sf) => sf,\n             _ => panic!(\"expected struct field\"),\n         }\n     }\n@@ -430,11 +430,11 @@ pub trait MacResult {\n         None\n     }\n \n-    fn make_fields(self: Box<Self>) -> Option<SmallVec<[ast::Field; 1]>> {\n+    fn make_expr_fields(self: Box<Self>) -> Option<SmallVec<[ast::ExprField; 1]>> {\n         None\n     }\n \n-    fn make_field_patterns(self: Box<Self>) -> Option<SmallVec<[ast::FieldPat; 1]>> {\n+    fn make_pat_fields(self: Box<Self>) -> Option<SmallVec<[ast::PatField; 1]>> {\n         None\n     }\n \n@@ -446,7 +446,7 @@ pub trait MacResult {\n         None\n     }\n \n-    fn make_struct_fields(self: Box<Self>) -> Option<SmallVec<[ast::StructField; 1]>> {\n+    fn make_field_defs(self: Box<Self>) -> Option<SmallVec<[ast::FieldDef; 1]>> {\n         None\n     }\n \n@@ -630,11 +630,11 @@ impl MacResult for DummyResult {\n         Some(SmallVec::new())\n     }\n \n-    fn make_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::Field; 1]>> {\n+    fn make_expr_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::ExprField; 1]>> {\n         Some(SmallVec::new())\n     }\n \n-    fn make_field_patterns(self: Box<DummyResult>) -> Option<SmallVec<[ast::FieldPat; 1]>> {\n+    fn make_pat_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::PatField; 1]>> {\n         Some(SmallVec::new())\n     }\n \n@@ -646,7 +646,7 @@ impl MacResult for DummyResult {\n         Some(SmallVec::new())\n     }\n \n-    fn make_struct_fields(self: Box<DummyResult>) -> Option<SmallVec<[ast::StructField; 1]>> {\n+    fn make_field_defs(self: Box<DummyResult>) -> Option<SmallVec<[ast::FieldDef; 1]>> {\n         Some(SmallVec::new())\n     }\n "}, {"sha": "efaac1f11e9825ea70c63f2162b69e6a85ae7bbe", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -267,8 +267,8 @@ impl<'a> ExtCtxt<'a> {\n     pub fn expr_block(&self, b: P<ast::Block>) -> P<ast::Expr> {\n         self.expr(b.span, ast::ExprKind::Block(b, None))\n     }\n-    pub fn field_imm(&self, span: Span, ident: Ident, e: P<ast::Expr>) -> ast::Field {\n-        ast::Field {\n+    pub fn field_imm(&self, span: Span, ident: Ident, e: P<ast::Expr>) -> ast::ExprField {\n+        ast::ExprField {\n             ident: ident.with_span_pos(span),\n             expr: e,\n             span,\n@@ -282,15 +282,15 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         path: ast::Path,\n-        fields: Vec<ast::Field>,\n+        fields: Vec<ast::ExprField>,\n     ) -> P<ast::Expr> {\n         self.expr(span, ast::ExprKind::Struct(path, fields, ast::StructRest::None))\n     }\n     pub fn expr_struct_ident(\n         &self,\n         span: Span,\n         id: Ident,\n-        fields: Vec<ast::Field>,\n+        fields: Vec<ast::ExprField>,\n     ) -> P<ast::Expr> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n@@ -419,7 +419,7 @@ impl<'a> ExtCtxt<'a> {\n         &self,\n         span: Span,\n         path: ast::Path,\n-        field_pats: Vec<ast::FieldPat>,\n+        field_pats: Vec<ast::PatField>,\n     ) -> P<ast::Pat> {\n         self.pat(span, PatKind::Struct(path, field_pats, false))\n     }"}, {"sha": "0992f598431145f50895d88f59e5c3e101c9ac6b", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -177,14 +177,14 @@ ast_fragments! {\n     Arms(SmallVec<[ast::Arm; 1]>) {\n         \"match arm\"; many fn flat_map_arm; fn visit_arm(); fn make_arms;\n     }\n-    Fields(SmallVec<[ast::Field; 1]>) {\n-        \"field expression\"; many fn flat_map_field; fn visit_field(); fn make_fields;\n+    Fields(SmallVec<[ast::ExprField; 1]>) {\n+        \"field expression\"; many fn flat_map_expr_field; fn visit_expr_field(); fn make_expr_fields;\n     }\n-    FieldPats(SmallVec<[ast::FieldPat; 1]>) {\n+    FieldPats(SmallVec<[ast::PatField; 1]>) {\n         \"field pattern\";\n-        many fn flat_map_field_pattern;\n-        fn visit_field_pattern();\n-        fn make_field_patterns;\n+        many fn flat_map_pat_field;\n+        fn visit_pat_field();\n+        fn make_pat_fields;\n     }\n     GenericParams(SmallVec<[ast::GenericParam; 1]>) {\n         \"generic parameter\";\n@@ -195,11 +195,11 @@ ast_fragments! {\n     Params(SmallVec<[ast::Param; 1]>) {\n         \"function parameter\"; many fn flat_map_param; fn visit_param(); fn make_params;\n     }\n-    StructFields(SmallVec<[ast::StructField; 1]>) {\n+    StructFields(SmallVec<[ast::FieldDef; 1]>) {\n         \"field\";\n-        many fn flat_map_struct_field;\n-        fn visit_struct_field();\n-        fn make_struct_fields;\n+        many fn flat_map_field_def;\n+        fn visit_field_def();\n+        fn make_field_defs;\n     }\n     Variants(SmallVec<[ast::Variant; 1]>) {\n         \"variant\"; many fn flat_map_variant; fn visit_variant(); fn make_variants;\n@@ -243,10 +243,10 @@ impl AstFragmentKind {\n                 AstFragment::Arms(items.map(Annotatable::expect_arm).collect())\n             }\n             AstFragmentKind::Fields => {\n-                AstFragment::Fields(items.map(Annotatable::expect_field).collect())\n+                AstFragment::Fields(items.map(Annotatable::expect_expr_field).collect())\n             }\n             AstFragmentKind::FieldPats => {\n-                AstFragment::FieldPats(items.map(Annotatable::expect_field_pattern).collect())\n+                AstFragment::FieldPats(items.map(Annotatable::expect_pat_field).collect())\n             }\n             AstFragmentKind::GenericParams => {\n                 AstFragment::GenericParams(items.map(Annotatable::expect_generic_param).collect())\n@@ -255,7 +255,7 @@ impl AstFragmentKind {\n                 AstFragment::Params(items.map(Annotatable::expect_param).collect())\n             }\n             AstFragmentKind::StructFields => {\n-                AstFragment::StructFields(items.map(Annotatable::expect_struct_field).collect())\n+                AstFragment::StructFields(items.map(Annotatable::expect_field_def).collect())\n             }\n             AstFragmentKind::Variants => {\n                 AstFragment::Variants(items.map(Annotatable::expect_variant).collect())\n@@ -321,8 +321,8 @@ impl InvocationKind {\n         // The assumption is that the attribute expansion cannot change field visibilities,\n         // and it holds because only inert attributes are supported in this position.\n         match self {\n-            InvocationKind::Attr { item: Annotatable::StructField(field), .. }\n-            | InvocationKind::Derive { item: Annotatable::StructField(field), .. }\n+            InvocationKind::Attr { item: Annotatable::FieldDef(field), .. }\n+            | InvocationKind::Derive { item: Annotatable::FieldDef(field), .. }\n                 if field.ident.is_none() =>\n             {\n                 Some(field.vis.clone())\n@@ -787,11 +787,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             Annotatable::Expr(_) => \"expressions\",\n             Annotatable::Arm(..)\n-            | Annotatable::Field(..)\n-            | Annotatable::FieldPat(..)\n+            | Annotatable::ExprField(..)\n+            | Annotatable::PatField(..)\n             | Annotatable::GenericParam(..)\n             | Annotatable::Param(..)\n-            | Annotatable::StructField(..)\n+            | Annotatable::FieldDef(..)\n             | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n         };\n         if self.cx.ecfg.proc_macro_hygiene() {\n@@ -1108,28 +1108,28 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         noop_flat_map_arm(arm, self)\n     }\n \n-    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n+    fn flat_map_expr_field(&mut self, field: ast::ExprField) -> SmallVec<[ast::ExprField; 1]> {\n         let mut field = configure!(self, field);\n \n         if let Some(attr) = self.take_first_attr(&mut field) {\n             return self\n-                .collect_attr(attr, Annotatable::Field(field), AstFragmentKind::Fields)\n-                .make_fields();\n+                .collect_attr(attr, Annotatable::ExprField(field), AstFragmentKind::Fields)\n+                .make_expr_fields();\n         }\n \n-        noop_flat_map_field(field, self)\n+        noop_flat_map_expr_field(field, self)\n     }\n \n-    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n+    fn flat_map_pat_field(&mut self, fp: ast::PatField) -> SmallVec<[ast::PatField; 1]> {\n         let mut fp = configure!(self, fp);\n \n         if let Some(attr) = self.take_first_attr(&mut fp) {\n             return self\n-                .collect_attr(attr, Annotatable::FieldPat(fp), AstFragmentKind::FieldPats)\n-                .make_field_patterns();\n+                .collect_attr(attr, Annotatable::PatField(fp), AstFragmentKind::FieldPats)\n+                .make_pat_fields();\n         }\n \n-        noop_flat_map_field_pattern(fp, self)\n+        noop_flat_map_pat_field(fp, self)\n     }\n \n     fn flat_map_param(&mut self, p: ast::Param) -> SmallVec<[ast::Param; 1]> {\n@@ -1144,16 +1144,16 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         noop_flat_map_param(p, self)\n     }\n \n-    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n+    fn flat_map_field_def(&mut self, sf: ast::FieldDef) -> SmallVec<[ast::FieldDef; 1]> {\n         let mut sf = configure!(self, sf);\n \n         if let Some(attr) = self.take_first_attr(&mut sf) {\n             return self\n-                .collect_attr(attr, Annotatable::StructField(sf), AstFragmentKind::StructFields)\n-                .make_struct_fields();\n+                .collect_attr(attr, Annotatable::FieldDef(sf), AstFragmentKind::StructFields)\n+                .make_field_defs();\n         }\n \n-        noop_flat_map_struct_field(sf, self)\n+        noop_flat_map_field_def(sf, self)\n     }\n \n     fn flat_map_variant(&mut self, variant: ast::Variant) -> SmallVec<[ast::Variant; 1]> {"}, {"sha": "6586ba138fb9956c61baf25f0eb13edd301cdbd5", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -117,7 +117,7 @@ pub fn placeholder(\n             span,\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::Fields => AstFragment::Fields(smallvec![ast::Field {\n+        AstFragmentKind::Fields => AstFragment::Fields(smallvec![ast::ExprField {\n             attrs: Default::default(),\n             expr: expr_placeholder(),\n             id,\n@@ -126,7 +126,7 @@ pub fn placeholder(\n             span,\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::FieldPats => AstFragment::FieldPats(smallvec![ast::FieldPat {\n+        AstFragmentKind::FieldPats => AstFragment::FieldPats(smallvec![ast::PatField {\n             attrs: Default::default(),\n             id,\n             ident,\n@@ -153,7 +153,7 @@ pub fn placeholder(\n             ty: ty(),\n             is_placeholder: true,\n         }]),\n-        AstFragmentKind::StructFields => AstFragment::StructFields(smallvec![ast::StructField {\n+        AstFragmentKind::StructFields => AstFragment::StructFields(smallvec![ast::FieldDef {\n             attrs: Default::default(),\n             id,\n             ident: None,\n@@ -205,19 +205,19 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    fn flat_map_field(&mut self, field: ast::Field) -> SmallVec<[ast::Field; 1]> {\n+    fn flat_map_expr_field(&mut self, field: ast::ExprField) -> SmallVec<[ast::ExprField; 1]> {\n         if field.is_placeholder {\n-            self.remove(field.id).make_fields()\n+            self.remove(field.id).make_expr_fields()\n         } else {\n-            noop_flat_map_field(field, self)\n+            noop_flat_map_expr_field(field, self)\n         }\n     }\n \n-    fn flat_map_field_pattern(&mut self, fp: ast::FieldPat) -> SmallVec<[ast::FieldPat; 1]> {\n+    fn flat_map_pat_field(&mut self, fp: ast::PatField) -> SmallVec<[ast::PatField; 1]> {\n         if fp.is_placeholder {\n-            self.remove(fp.id).make_field_patterns()\n+            self.remove(fp.id).make_pat_fields()\n         } else {\n-            noop_flat_map_field_pattern(fp, self)\n+            noop_flat_map_pat_field(fp, self)\n         }\n     }\n \n@@ -240,11 +240,11 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    fn flat_map_struct_field(&mut self, sf: ast::StructField) -> SmallVec<[ast::StructField; 1]> {\n+    fn flat_map_field_def(&mut self, sf: ast::FieldDef) -> SmallVec<[ast::FieldDef; 1]> {\n         if sf.is_placeholder {\n-            self.remove(sf.id).make_struct_fields()\n+            self.remove(sf.id).make_field_defs()\n         } else {\n-            noop_flat_map_struct_field(sf, self)\n+            noop_flat_map_field_def(sf, self)\n         }\n     }\n "}, {"sha": "ddf8218616988756edeea2657241a69ff0a00d32", "filename": "compiler/rustc_hir/src/arena.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Farena.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -25,8 +25,8 @@ macro_rules! arena_types {\n             [] generic_bound: rustc_hir::GenericBound<$tcx>,\n             [] generic_param: rustc_hir::GenericParam<$tcx>,\n             [] expr: rustc_hir::Expr<$tcx>,\n-            [] field: rustc_hir::Field<$tcx>,\n-            [] field_pat: rustc_hir::FieldPat<$tcx>,\n+            [] expr_field: rustc_hir::ExprField<$tcx>,\n+            [] pat_field: rustc_hir::PatField<$tcx>,\n             [] fn_decl: rustc_hir::FnDecl<$tcx>,\n             [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n             [few] foreign_item_ref: rustc_hir::ForeignItemRef<$tcx>,\n@@ -42,7 +42,7 @@ macro_rules! arena_types {\n             [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n             [] qpath: rustc_hir::QPath<$tcx>,\n             [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] struct_field: rustc_hir::StructField<$tcx>,\n+            [] field_def: rustc_hir::FieldDef<$tcx>,\n             [] trait_item_ref: rustc_hir::TraitItemRef,\n             [] ty: rustc_hir::Ty<$tcx>,\n             [] type_binding: rustc_hir::TypeBinding<$tcx>,"}, {"sha": "82ee69058fa49654850e7ad5a3e66040d7879dcd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -882,7 +882,7 @@ impl<'hir> Pat<'hir> {\n /// are treated the same as` x: x, y: ref y, z: ref mut z`,\n /// except `is_shorthand` is true.\n #[derive(Debug, HashStable_Generic)]\n-pub struct FieldPat<'hir> {\n+pub struct PatField<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n     /// The identifier for the field.\n@@ -946,7 +946,7 @@ pub enum PatKind<'hir> {\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`.\n-    Struct(QPath<'hir>, &'hir [FieldPat<'hir>], bool),\n+    Struct(QPath<'hir>, &'hir [PatField<'hir>], bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n@@ -1203,7 +1203,7 @@ pub enum Guard<'hir> {\n }\n \n #[derive(Debug, HashStable_Generic)]\n-pub struct Field<'hir> {\n+pub struct ExprField<'hir> {\n     #[stable_hasher(ignore)]\n     pub hir_id: HirId,\n     pub ident: Ident,\n@@ -1762,7 +1762,7 @@ pub enum ExprKind<'hir> {\n     ///\n     /// E.g., `Foo {x: 1, y: 2}`, or `Foo {x: 1, .. base}`,\n     /// where `base` is the `Option<Expr>`.\n-    Struct(&'hir QPath<'hir>, &'hir [Field<'hir>], Option<&'hir Expr<'hir>>),\n+    Struct(&'hir QPath<'hir>, &'hir [ExprField<'hir>], Option<&'hir Expr<'hir>>),\n \n     /// An array literal constructed from one repeated element.\n     ///\n@@ -2623,7 +2623,7 @@ impl VisibilityKind<'_> {\n }\n \n #[derive(Debug, HashStable_Generic)]\n-pub struct StructField<'hir> {\n+pub struct FieldDef<'hir> {\n     pub span: Span,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n@@ -2632,7 +2632,7 @@ pub struct StructField<'hir> {\n     pub ty: &'hir Ty<'hir>,\n }\n \n-impl StructField<'_> {\n+impl FieldDef<'_> {\n     // Still necessary in couple of places\n     pub fn is_positional(&self) -> bool {\n         let first = self.ident.as_str().as_bytes()[0];\n@@ -2646,11 +2646,11 @@ pub enum VariantData<'hir> {\n     /// A struct variant.\n     ///\n     /// E.g., `Bar { .. }` as in `enum Foo { Bar { .. } }`.\n-    Struct(&'hir [StructField<'hir>], /* recovered */ bool),\n+    Struct(&'hir [FieldDef<'hir>], /* recovered */ bool),\n     /// A tuple variant.\n     ///\n     /// E.g., `Bar(..)` as in `enum Foo { Bar(..) }`.\n-    Tuple(&'hir [StructField<'hir>], HirId),\n+    Tuple(&'hir [FieldDef<'hir>], HirId),\n     /// A unit variant.\n     ///\n     /// E.g., `Bar = ..` as in `enum Foo { Bar = .. }`.\n@@ -2659,7 +2659,7 @@ pub enum VariantData<'hir> {\n \n impl VariantData<'hir> {\n     /// Return the fields of this variant.\n-    pub fn fields(&self) -> &'hir [StructField<'hir>] {\n+    pub fn fields(&self) -> &'hir [FieldDef<'hir>] {\n         match *self {\n             VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => fields,\n             _ => &[],\n@@ -2967,7 +2967,7 @@ pub enum Node<'hir> {\n     TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem<'hir>),\n     Variant(&'hir Variant<'hir>),\n-    Field(&'hir StructField<'hir>),\n+    Field(&'hir FieldDef<'hir>),\n     AnonConst(&'hir AnonConst),\n     Expr(&'hir Expr<'hir>),\n     Stmt(&'hir Stmt<'hir>),\n@@ -2998,7 +2998,7 @@ impl<'hir> Node<'hir> {\n             Node::TraitItem(TraitItem { ident, .. })\n             | Node::ImplItem(ImplItem { ident, .. })\n             | Node::ForeignItem(ForeignItem { ident, .. })\n-            | Node::Field(StructField { ident, .. })\n+            | Node::Field(FieldDef { ident, .. })\n             | Node::Variant(Variant { ident, .. })\n             | Node::MacroDef(MacroDef { ident, .. })\n             | Node::Item(Item { ident, .. }) => Some(*ident),\n@@ -3046,7 +3046,7 @@ impl<'hir> Node<'hir> {\n             | Node::ImplItem(ImplItem { def_id, .. })\n             | Node::ForeignItem(ForeignItem { def_id, .. })\n             | Node::MacroDef(MacroDef { def_id, .. }) => Some(HirId::make_owner(*def_id)),\n-            Node::Field(StructField { hir_id, .. })\n+            Node::Field(FieldDef { hir_id, .. })\n             | Node::AnonConst(AnonConst { hir_id, .. })\n             | Node::Expr(Expr { hir_id, .. })\n             | Node::Stmt(Stmt { hir_id, .. })"}, {"sha": "1ed8ab044fe53749faa8da980ec611f10b6500d9", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -415,8 +415,8 @@ pub trait Visitor<'v>: Sized {\n     ) {\n         walk_struct_def(self, s)\n     }\n-    fn visit_struct_field(&mut self, s: &'v StructField<'v>) {\n-        walk_struct_field(self, s)\n+    fn visit_field_def(&mut self, s: &'v FieldDef<'v>) {\n+        walk_field_def(self, s)\n     }\n     fn visit_enum_def(\n         &mut self,\n@@ -1045,14 +1045,14 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(\n     struct_definition: &'v VariantData<'v>,\n ) {\n     walk_list!(visitor, visit_id, struct_definition.ctor_hir_id());\n-    walk_list!(visitor, visit_struct_field, struct_definition.fields());\n+    walk_list!(visitor, visit_field_def, struct_definition.fields());\n }\n \n-pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField<'v>) {\n-    visitor.visit_id(struct_field.hir_id);\n-    visitor.visit_vis(&struct_field.vis);\n-    visitor.visit_ident(struct_field.ident);\n-    visitor.visit_ty(&struct_field.ty);\n+pub fn walk_field_def<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v FieldDef<'v>) {\n+    visitor.visit_id(field.hir_id);\n+    visitor.visit_vis(&field.vis);\n+    visitor.visit_ident(field.ident);\n+    visitor.visit_ty(&field.ty);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {"}, {"sha": "9eab6cab64d411947e961dd9d55b4eb01bc0def6", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -114,7 +114,7 @@ impl<'a> State<'a> {\n             Node::Lifetime(a) => self.print_lifetime(&a),\n             Node::Visibility(a) => self.print_visibility(&a),\n             Node::GenericParam(_) => panic!(\"cannot print Node::GenericParam\"),\n-            Node::Field(_) => panic!(\"cannot print StructField\"),\n+            Node::Field(_) => panic!(\"cannot print Node::Field\"),\n             // These cases do not carry enough information in the\n             // `hir_map` to reconstruct their full structure for pretty\n             // printing.\n@@ -1207,7 +1207,7 @@ impl<'a> State<'a> {\n     fn print_expr_struct(\n         &mut self,\n         qpath: &hir::QPath<'_>,\n-        fields: &[hir::Field<'_>],\n+        fields: &[hir::ExprField<'_>],\n         wth: &Option<&hir::Expr<'_>>,\n     ) {\n         self.print_qpath(qpath, true);"}, {"sha": "f1f69f1510bf13472b8fbb98fcb2cd51642dd723", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -182,9 +182,9 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n         intravisit::walk_impl_item(self, impl_item);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n         self.process_attrs(s.hir_id);\n-        intravisit::walk_struct_field(self, s);\n+        intravisit::walk_field_def(self, s);\n     }\n }\n "}, {"sha": "1a8bbb67cfe953e284c0626f0d08309cada2c645", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -651,7 +651,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, foreign_item.hir_id(), foreign_item.span, article, desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_>, sf: &hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'_>, sf: &hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             self.check_missing_docs_attrs(cx, sf.hir_id, sf.span, \"a\", \"struct field\")\n         }\n@@ -1345,7 +1345,7 @@ impl<'tcx> LateLintPass<'tcx> for UnreachablePub {\n         );\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_>, field: &hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         self.perform_lint(cx, \"field\", field.hir_id, &field.vis, field.span, false);\n     }\n "}, {"sha": "647ecad046962c551642c1c8595c0d5edfffbb26", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -163,10 +163,10 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_struct_def_post, s);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'a ast::StructField) {\n+    fn visit_field_def(&mut self, s: &'a ast::FieldDef) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_early_pass!(cx, check_struct_field, s);\n-            ast_visit::walk_struct_field(cx, s);\n+            run_early_pass!(cx, check_field_def, s);\n+            ast_visit::walk_field_def(cx, s);\n         })\n     }\n "}, {"sha": "d325b5fe7f8c69080c3ac55fe30fbde93b413f35", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -219,10 +219,10 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         lint_callback!(self, check_struct_def_post, s);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n         self.with_lint_attrs(s.hir_id, |cx| {\n-            lint_callback!(cx, check_struct_field, s);\n-            hir_visit::walk_struct_field(cx, s);\n+            lint_callback!(cx, check_field_def, s);\n+            hir_visit::walk_field_def(cx, s);\n         })\n     }\n "}, {"sha": "5e6b090027c11cf5c456b2a4285c389c8146e062", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -619,9 +619,9 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         })\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n         self.with_lint_attrs(s.hir_id, |builder| {\n-            intravisit::walk_struct_field(builder, s);\n+            intravisit::walk_field_def(builder, s);\n         })\n     }\n "}, {"sha": "bbe17dcf4b7365feeabe25a28cf302dae595ffef", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -57,7 +57,7 @@ macro_rules! late_lint_methods {\n             fn check_impl_item_post(a: &$hir hir::ImplItem<$hir>);\n             fn check_struct_def(a: &$hir hir::VariantData<$hir>);\n             fn check_struct_def_post(a: &$hir hir::VariantData<$hir>);\n-            fn check_struct_field(a: &$hir hir::StructField<$hir>);\n+            fn check_field_def(a: &$hir hir::FieldDef<$hir>);\n             fn check_variant(a: &$hir hir::Variant<$hir>);\n             fn check_variant_post(a: &$hir hir::Variant<$hir>);\n             fn check_lifetime(a: &$hir hir::Lifetime);\n@@ -193,7 +193,7 @@ macro_rules! early_lint_methods {\n             fn check_impl_item_post(a: &ast::AssocItem);\n             fn check_struct_def(a: &ast::VariantData);\n             fn check_struct_def_post(a: &ast::VariantData);\n-            fn check_struct_field(a: &ast::StructField);\n+            fn check_field_def(a: &ast::FieldDef);\n             fn check_variant(a: &ast::Variant);\n             fn check_variant_post(a: &ast::Variant);\n             fn check_lifetime(a: &ast::Lifetime);"}, {"sha": "17c985adbb21b8e45688fbbe45086f770bfc6817", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -554,10 +554,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n-    fn visit_struct_field(&mut self, field: &'hir StructField<'hir>) {\n+    fn visit_field_def(&mut self, field: &'hir FieldDef<'hir>) {\n         self.insert(field.span, field.hir_id, Node::Field(field));\n         self.with_parent(field.hir_id, |this| {\n-            intravisit::walk_struct_field(this, field);\n+            intravisit::walk_field_def(this, field);\n         });\n     }\n "}, {"sha": "1a348657ddcceb4d28850f27b4240fd59e0e7e0e", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1084,7 +1084,10 @@ impl<'thir, 'tcx> Cx<'thir, 'tcx> {\n     }\n \n     /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.\n-    fn field_refs(&mut self, fields: &'tcx [hir::Field<'tcx>]) -> &'thir [FieldExpr<'thir, 'tcx>] {\n+    fn field_refs(\n+        &mut self,\n+        fields: &'tcx [hir::ExprField<'tcx>],\n+    ) -> &'thir [FieldExpr<'thir, 'tcx>] {\n         self.arena.alloc_from_iter(fields.iter().map(|field| FieldExpr {\n             name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),\n             expr: self.mirror_expr(field.expr),"}, {"sha": "083702d946941650911a5df2ce0446f3facccc5d", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -10,7 +10,7 @@ use rustc_ast::tokenstream::Spacing;\n use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n-use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, Field, Lit, UnOp, DUMMY_NODE_ID};\n+use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, RangeLimits};\n use rustc_ast_pretty::pprust;\n@@ -2316,7 +2316,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let recovery_field = self.find_struct_error_after_field_looking_code();\n-            let parsed_field = match self.parse_field() {\n+            let parsed_field = match self.parse_expr_field() {\n                 Ok(f) => Some(f),\n                 Err(mut e) => {\n                     if pth == kw::Async {\n@@ -2378,13 +2378,13 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Use in case of error after field-looking code: `S { foo: () with a }`.\n-    fn find_struct_error_after_field_looking_code(&self) -> Option<Field> {\n+    fn find_struct_error_after_field_looking_code(&self) -> Option<ExprField> {\n         match self.token.ident() {\n             Some((ident, is_raw))\n                 if (is_raw || !ident.is_reserved())\n                     && self.look_ahead(1, |t| *t == token::Colon) =>\n             {\n-                Some(ast::Field {\n+                Some(ast::ExprField {\n                     ident,\n                     span: self.token.span,\n                     expr: self.mk_expr_err(self.token.span),\n@@ -2418,7 +2418,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `ident (COLON expr)?`.\n-    fn parse_field(&mut self) -> PResult<'a, Field> {\n+    fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n@@ -2438,7 +2438,7 @@ impl<'a> Parser<'a> {\n             };\n \n             Ok((\n-                ast::Field {\n+                ast::ExprField {\n                     ident,\n                     span: lo.to(expr.span),\n                     expr,"}, {"sha": "025415036b67b8e86066e2a0628f0f19b43d77a7", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_ast::{self as ast, AttrVec, Attribute, DUMMY_NODE_ID};\n use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\n use rustc_ast::{BindingMode, Block, FnDecl, FnSig, Param, SelfKind};\n-use rustc_ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n+use rustc_ast::{EnumDef, FieldDef, Generics, TraitRef, Ty, TyKind, Variant, VariantData};\n use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, VisibilityKind};\n use rustc_ast::{MacArgs, MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n@@ -1231,14 +1231,12 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    fn parse_record_struct_body(\n-        &mut self,\n-    ) -> PResult<'a, (Vec<StructField>, /* recovered */ bool)> {\n+    fn parse_record_struct_body(&mut self) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n         let mut fields = Vec::new();\n         let mut recovered = false;\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                let field = self.parse_struct_decl_field().map_err(|e| {\n+                let field = self.parse_field_def().map_err(|e| {\n                     self.consume_block(token::Brace, ConsumeClosingDelim::No);\n                     recovered = true;\n                     e\n@@ -1263,7 +1261,7 @@ impl<'a> Parser<'a> {\n         Ok((fields, recovered))\n     }\n \n-    fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n+    fn parse_tuple_struct_body(&mut self) -> PResult<'a, Vec<FieldDef>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n         // Unit like structs are handled in parse_item_struct function\n         self.parse_paren_comma_seq(|p| {\n@@ -1274,7 +1272,7 @@ impl<'a> Parser<'a> {\n                 let ty = p.parse_ty()?;\n \n                 Ok((\n-                    StructField {\n+                    FieldDef {\n                         span: lo.to(ty.span),\n                         vis,\n                         ident: None,\n@@ -1291,7 +1289,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an element of a struct declaration.\n-    fn parse_struct_decl_field(&mut self) -> PResult<'a, StructField> {\n+    fn parse_field_def(&mut self) -> PResult<'a, FieldDef> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n@@ -1306,7 +1304,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n-    ) -> PResult<'a, StructField> {\n+    ) -> PResult<'a, FieldDef> {\n         let mut seen_comma: bool = false;\n         let a_var = self.parse_name_and_ty(lo, vis, attrs)?;\n         if self.token == token::Comma {\n@@ -1398,11 +1396,11 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         vis: Visibility,\n         attrs: Vec<Attribute>,\n-    ) -> PResult<'a, StructField> {\n+    ) -> PResult<'a, FieldDef> {\n         let name = self.parse_ident_common(false)?;\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n-        Ok(StructField {\n+        Ok(FieldDef {\n             span: lo.to(self.prev_token.span),\n             ident: Some(name),\n             vis,"}, {"sha": "51c01f5a775a1b573f30c0da5f116b8e0122d923", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -3,7 +3,7 @@ use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use rustc_ast::mut_visit::{noop_visit_pat, MutVisitor};\n use rustc_ast::ptr::P;\n use rustc_ast::token;\n-use rustc_ast::{self as ast, AttrVec, Attribute, FieldPat, MacCall, Pat, PatKind, RangeEnd};\n+use rustc_ast::{self as ast, AttrVec, Attribute, MacCall, Pat, PatField, PatKind, RangeEnd};\n use rustc_ast::{BindingMode, Expr, ExprKind, Mutability, Path, QSelf, RangeSyntax};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, PResult};\n@@ -928,7 +928,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the fields of a struct-like pattern.\n-    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<FieldPat>, bool)> {\n+    fn parse_pat_fields(&mut self) -> PResult<'a, (Vec<PatField>, bool)> {\n         let mut fields = Vec::new();\n         let mut etc = false;\n         let mut ate_comma = true;\n@@ -1072,7 +1072,7 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n-    fn parse_pat_field(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, FieldPat> {\n+    fn parse_pat_field(&mut self, lo: Span, attrs: Vec<Attribute>) -> PResult<'a, PatField> {\n         // Check if a colon exists one ahead. This means we're parsing a fieldname.\n         let hi;\n         let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n@@ -1104,7 +1104,7 @@ impl<'a> Parser<'a> {\n             (subpat, fieldname, true)\n         };\n \n-        Ok(FieldPat {\n+        Ok(PatField {\n             ident: fieldname,\n             pat: subpat,\n             is_shorthand,"}, {"sha": "775e27e68f8a22a6a3d25499b2458f78d4c338e4", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1282,9 +1282,9 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n-    fn visit_struct_field(&mut self, struct_field: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {\n         self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n-        intravisit::walk_struct_field(self, struct_field);\n+        intravisit::walk_field_def(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {"}, {"sha": "c63edf365a1aa1e27bbc58b7fa4f0e8e1cf2bc91", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -153,7 +153,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         &mut self,\n         lhs: &hir::Pat<'_>,\n         res: Res,\n-        pats: &[hir::FieldPat<'_>],\n+        pats: &[hir::PatField<'_>],\n     ) {\n         let variant = match self.typeck_results().node_type(lhs.hir_id).kind() {\n             ty::Adt(adt, _) => adt.variant_of_res(res),\n@@ -224,7 +224,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n     }\n \n-    fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::Field<'_>]) {\n+    fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::ExprField<'_>]) {\n         if adt.is_union() && adt.non_enum_variant().fields.len() > 1 && adt.did.is_local() {\n             for field in fields {\n                 let index = self.tcx.field_index(field.hir_id, self.typeck_results());\n@@ -525,7 +525,7 @@ impl DeadVisitor<'tcx> {\n         should_warn && !self.symbol_is_live(item.hir_id())\n     }\n \n-    fn should_warn_about_field(&mut self, field: &hir::StructField<'_>) -> bool {\n+    fn should_warn_about_field(&mut self, field: &hir::FieldDef<'_>) -> bool {\n         let field_type = self.tcx.type_of(self.tcx.hir().local_def_id(field.hir_id));\n         !field.is_positional()\n             && !self.symbol_is_live(field.hir_id)\n@@ -650,11 +650,11 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n-    fn visit_struct_field(&mut self, field: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, field: &'tcx hir::FieldDef<'tcx>) {\n         if self.should_warn_about_field(&field) {\n             self.warn_dead_code(field.hir_id, field.span, field.ident.name, \"read\");\n         }\n-        intravisit::walk_struct_field(self, field);\n+        intravisit::walk_field_def(self, field);\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {"}, {"sha": "2bed8cadeb95dde915d1306c74905a335683c8a4", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -201,9 +201,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param_bound(self, bounds)\n     }\n \n-    fn visit_struct_field(&mut self, s: &'v hir::StructField<'v>) {\n-        self.record(\"StructField\", Id::Node(s.hir_id), s);\n-        hir_visit::walk_struct_field(self, s)\n+    fn visit_field_def(&mut self, s: &'v hir::FieldDef<'v>) {\n+        self.record(\"FieldDef\", Id::Node(s.hir_id), s);\n+        hir_visit::walk_field_def(self, s)\n     }\n \n     fn visit_variant(\n@@ -316,9 +316,9 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         ast_visit::walk_param_bound(self, bounds)\n     }\n \n-    fn visit_struct_field(&mut self, s: &'v ast::StructField) {\n-        self.record(\"StructField\", Id::None, s);\n-        ast_visit::walk_struct_field(self, s)\n+    fn visit_field_def(&mut self, s: &'v ast::FieldDef) {\n+        self.record(\"FieldDef\", Id::None, s);\n+        ast_visit::walk_field_def(self, s)\n     }\n \n     fn visit_variant(&mut self, v: &'v ast::Variant) {"}, {"sha": "dd9cb51c858b455dd278b44fce2aca0894f8f3ca", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::{Generics, HirId, Item, StructField, TraitRef, Ty, TyKind, Variant};\n+use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         )\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n         self.annotate(\n             s.hir_id,\n             s.span,\n@@ -474,7 +474,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n             InheritConstStability::No,\n             InheritStability::Yes,\n             |v| {\n-                intravisit::walk_struct_field(v, s);\n+                intravisit::walk_field_def(v, s);\n             },\n         );\n     }\n@@ -610,9 +610,9 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx FieldDef<'tcx>) {\n         self.check_missing_stability(s.hir_id, s.span);\n-        intravisit::walk_struct_field(self, s);\n+        intravisit::walk_field_def(self, s);\n     }\n \n     fn visit_foreign_item(&mut self, i: &'tcx hir::ForeignItem<'tcx>) {"}, {"sha": "84240f86b53e2c4c0a2698e211a76a1ea56e38c5", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1698,9 +1698,9 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n+    fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {\n         if s.vis.node.is_pub() || self.in_variant {\n-            intravisit::walk_struct_field(self, s);\n+            intravisit::walk_field_def(self, s);\n         }\n     }\n "}, {"sha": "d77022a65e43979d32baa55fd0fa6b3d9b5de9f7", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1426,19 +1426,19 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    fn visit_field(&mut self, f: &'b ast::Field) {\n+    fn visit_expr_field(&mut self, f: &'b ast::ExprField) {\n         if f.is_placeholder {\n             self.visit_invoc(f.id);\n         } else {\n-            visit::walk_field(self, f);\n+            visit::walk_expr_field(self, f);\n         }\n     }\n \n-    fn visit_field_pattern(&mut self, fp: &'b ast::FieldPat) {\n+    fn visit_pat_field(&mut self, fp: &'b ast::PatField) {\n         if fp.is_placeholder {\n             self.visit_invoc(fp.id);\n         } else {\n-            visit::walk_field_pattern(self, fp);\n+            visit::walk_pat_field(self, fp);\n         }\n     }\n \n@@ -1458,13 +1458,13 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, sf: &'b ast::StructField) {\n+    fn visit_field_def(&mut self, sf: &'b ast::FieldDef) {\n         if sf.is_placeholder {\n             self.visit_invoc(sf.id);\n         } else {\n             let vis = self.resolve_visibility(&sf.vis);\n             self.r.visibilities.insert(self.r.local_def_id(sf.id), vis);\n-            visit::walk_struct_field(self, sf);\n+            visit::walk_field_def(self, sf);\n         }\n     }\n "}, {"sha": "17f0c39e39735d89f961b27ec1df9c7003a0c346", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n         self.impl_trait_context = orig_itc;\n     }\n \n-    fn collect_field(&mut self, field: &'a StructField, index: Option<usize>) {\n+    fn collect_field(&mut self, field: &'a FieldDef, index: Option<usize>) {\n         let index = |this: &Self| {\n             index.unwrap_or_else(|| {\n                 let node_id = NodeId::placeholder_from_expn_id(this.expansion);\n@@ -66,7 +66,7 @@ impl<'a, 'b> DefCollector<'a, 'b> {\n         } else {\n             let name = field.ident.map_or_else(|| sym::integer(index(self)), |ident| ident.name);\n             let def = self.create_def(field.id, DefPathData::ValueNs(name), field.span);\n-            self.with_parent(def, |this| visit::walk_struct_field(this, field));\n+            self.with_parent(def, |this| visit::walk_field_def(this, field));\n         }\n     }\n \n@@ -309,15 +309,19 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n         if arm.is_placeholder { self.visit_macro_invoc(arm.id) } else { visit::walk_arm(self, arm) }\n     }\n \n-    fn visit_field(&mut self, f: &'a Field) {\n-        if f.is_placeholder { self.visit_macro_invoc(f.id) } else { visit::walk_field(self, f) }\n+    fn visit_expr_field(&mut self, f: &'a ExprField) {\n+        if f.is_placeholder {\n+            self.visit_macro_invoc(f.id)\n+        } else {\n+            visit::walk_expr_field(self, f)\n+        }\n     }\n \n-    fn visit_field_pattern(&mut self, fp: &'a FieldPat) {\n+    fn visit_pat_field(&mut self, fp: &'a PatField) {\n         if fp.is_placeholder {\n             self.visit_macro_invoc(fp.id)\n         } else {\n-            visit::walk_field_pattern(self, fp)\n+            visit::walk_pat_field(self, fp)\n         }\n     }\n \n@@ -333,7 +337,7 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n \n     // This method is called only when we are visiting an individual field\n     // after expanding an attribute on it.\n-    fn visit_struct_field(&mut self, field: &'a StructField) {\n+    fn visit_field_def(&mut self, field: &'a FieldDef) {\n         self.collect_field(field, None);\n     }\n }"}, {"sha": "15435df32bec118dc186272305043930a531068f", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -301,7 +301,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n \n     fn process_struct_field_def(\n         &mut self,\n-        field: &'tcx hir::StructField<'tcx>,\n+        field: &'tcx hir::FieldDef<'tcx>,\n         parent_id: hir::HirId,\n     ) {\n         let field_data = self.save_ctxt.get_field_data(field, parent_id);\n@@ -793,7 +793,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         &mut self,\n         ex: &'tcx hir::Expr<'tcx>,\n         path: &'tcx hir::QPath<'tcx>,\n-        fields: &'tcx [hir::Field<'tcx>],\n+        fields: &'tcx [hir::ExprField<'tcx>],\n         variant: &'tcx ty::VariantDef,\n         rest: Option<&'tcx hir::Expr<'tcx>>,\n     ) {"}, {"sha": "2acae29cc254214f4112c28ffb7443e20de84ffe", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -379,7 +379,7 @@ impl<'tcx> SaveContext<'tcx> {\n         }\n     }\n \n-    pub fn get_field_data(&self, field: &hir::StructField<'_>, scope: hir::HirId) -> Option<Def> {\n+    pub fn get_field_data(&self, field: &hir::FieldDef<'_>, scope: hir::HirId) -> Option<Def> {\n         let name = field.ident.to_string();\n         let scope_def_id = self.tcx.hir().local_def_id(scope).to_def_id();\n         let qualname = format!(\"::{}::{}\", self.tcx.def_path_str(scope_def_id), field.ident);\n@@ -769,7 +769,7 @@ impl<'tcx> SaveContext<'tcx> {\n \n     pub fn get_field_ref_data(\n         &self,\n-        field_ref: &hir::Field<'_>,\n+        field_ref: &hir::ExprField<'_>,\n         variant: &ty::VariantDef,\n     ) -> Option<Ref> {\n         filter!(self.span_utils, field_ref.ident.span);"}, {"sha": "53150a9266434907b69d2224b56b5bfb9cc8965e", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -55,7 +55,7 @@ pub fn foreign_item_signature(\n \n /// Signature for a struct or tuple field declaration.\n /// Does not include a trailing comma.\n-pub fn field_signature(field: &hir::StructField<'_>, scx: &SaveContext<'_>) -> Option<Signature> {\n+pub fn field_signature(field: &hir::FieldDef<'_>, scx: &SaveContext<'_>) -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n@@ -655,7 +655,7 @@ impl<'hir> Sig for hir::Generics<'hir> {\n     }\n }\n \n-impl<'hir> Sig for hir::StructField<'hir> {\n+impl<'hir> Sig for hir::FieldDef<'hir> {\n     fn make(&self, offset: usize, _parent_id: Option<hir::HirId>, scx: &SaveContext<'_>) -> Result {\n         let mut text = String::new();\n "}, {"sha": "8951c08bd338942d5484198954921e42088a867c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1158,7 +1158,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'_>,\n         expected: Expectation<'tcx>,\n         qpath: &QPath<'_>,\n-        fields: &'tcx [hir::Field<'tcx>],\n+        fields: &'tcx [hir::ExprField<'tcx>],\n         base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,\n     ) -> Ty<'tcx> {\n         // Find the relevant variant\n@@ -1231,7 +1231,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_id: hir::HirId,\n         span: Span,\n         variant: &'tcx ty::VariantDef,\n-        ast_fields: &'tcx [hir::Field<'tcx>],\n+        ast_fields: &'tcx [hir::ExprField<'tcx>],\n         check_completeness: bool,\n     ) -> bool {\n         let tcx = self.tcx;\n@@ -1320,7 +1320,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn check_struct_fields_on_error(\n         &self,\n-        fields: &'tcx [hir::Field<'tcx>],\n+        fields: &'tcx [hir::ExprField<'tcx>],\n         base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,\n     ) {\n         for field in fields {\n@@ -1411,8 +1411,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         ty: Ty<'tcx>,\n         variant: &'tcx ty::VariantDef,\n-        field: &hir::Field<'_>,\n-        skip_fields: &[hir::Field<'_>],\n+        field: &hir::ExprField<'_>,\n+        skip_fields: &[hir::ExprField<'_>],\n         kind_name: &str,\n         ty_span: Span,\n     ) {"}, {"sha": "79c544bd3860556ff9de4e165ff1869daf9a587f", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -680,7 +680,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &'tcx Pat<'tcx>,\n         qpath: &hir::QPath<'_>,\n-        fields: &'tcx [hir::FieldPat<'tcx>],\n+        fields: &'tcx [hir::PatField<'tcx>],\n         etc: bool,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n@@ -1151,7 +1151,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         adt_ty: Ty<'tcx>,\n         pat: &'tcx Pat<'tcx>,\n         variant: &'tcx ty::VariantDef,\n-        fields: &'tcx [hir::FieldPat<'tcx>],\n+        fields: &'tcx [hir::PatField<'tcx>],\n         etc: bool,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n@@ -1291,7 +1291,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         variant: &VariantDef,\n         pat: &'_ Pat<'_>,\n-        fields: &[hir::FieldPat<'_>],\n+        fields: &[hir::PatField<'_>],\n     ) -> Option<DiagnosticBuilder<'_>> {\n         // if this is a tuple struct, then all field names will be numbers\n         // so if any fields in a struct pattern use shorthand syntax, they will\n@@ -1446,7 +1446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_tuple_variant_as_struct_pat(\n         &self,\n         pat: &Pat<'_>,\n-        fields: &'tcx [hir::FieldPat<'tcx>],\n+        fields: &'tcx [hir::PatField<'tcx>],\n         variant: &ty::VariantDef,\n     ) -> Option<DiagnosticBuilder<'tcx>> {\n         if let (CtorKind::Fn, PatKind::Struct(qpath, ..)) = (variant.ctor_kind, &pat.kind) {\n@@ -1484,7 +1484,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn get_suggested_tuple_struct_pattern(\n         &self,\n-        fields: &[hir::FieldPat<'_>],\n+        fields: &[hir::PatField<'_>],\n         variant: &VariantDef,\n     ) -> String {\n         let variant_field_idents = variant.fields.iter().map(|f| f.ident).collect::<Vec<Ident>>();\n@@ -1528,7 +1528,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_no_accessible_fields(\n         &self,\n         pat: &Pat<'_>,\n-        fields: &'tcx [hir::FieldPat<'tcx>],\n+        fields: &'tcx [hir::PatField<'tcx>],\n     ) -> DiagnosticBuilder<'tcx> {\n         let mut err = self\n             .tcx\n@@ -1574,7 +1574,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat: &Pat<'_>,\n         unmentioned_fields: &[(&ty::FieldDef, Ident)],\n-        fields: &'tcx [hir::FieldPat<'tcx>],\n+        fields: &'tcx [hir::PatField<'tcx>],\n     ) -> DiagnosticBuilder<'tcx> {\n         let field_names = if unmentioned_fields.len() == 1 {\n             format!(\"field `{}`\", unmentioned_fields[0].1)"}, {"sha": "2f2621d728c5c4465d32a814ef661a779a772c05", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -397,7 +397,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n \n     fn walk_struct_expr(\n         &mut self,\n-        fields: &[hir::Field<'_>],\n+        fields: &[hir::ExprField<'_>],\n         opt_with: &Option<&'hir hir::Expr<'_>>,\n     ) {\n         // Consume the expressions supplying values for each field."}, {"sha": "ead9d7d66463539d74379ede4056d96b277bffb3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1754,7 +1754,7 @@ impl<'tcx> Clean<Constant> for ty::Const<'tcx> {\n     }\n }\n \n-impl Clean<Item> for hir::StructField<'_> {\n+impl Clean<Item> for hir::FieldDef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let what_rustc_thinks = Item::from_hir_id_and_parts(\n             self.hir_id,"}, {"sha": "d9e97e02a14ef6a17603b4b8e1b921ab8f1f61e2", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1089,9 +1089,9 @@ impl<'a, 'hir, 'tcx> intravisit::Visitor<'hir> for HirCollector<'a, 'hir, 'tcx>\n         });\n     }\n \n-    fn visit_struct_field(&mut self, f: &'hir hir::StructField<'_>) {\n+    fn visit_field_def(&mut self, f: &'hir hir::FieldDef<'_>) {\n         self.visit_testable(f.ident.to_string(), f.hir_id, f.span, |this| {\n-            intravisit::walk_struct_field(this, f);\n+            intravisit::walk_field_def(this, f);\n         });\n     }\n "}, {"sha": "48aef74e4d3c300039b4fa2fe2368ca8bf311e6f", "filename": "src/tools/clippy/clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -119,7 +119,7 @@ impl LateLintPass<'_> for InconsistentStructConstructor {\n \n // Check whether the order of the fields in the constructor is consistent with the order in the\n // definition.\n-fn is_consistent_order<'tcx>(fields: &'tcx [hir::Field<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n+fn is_consistent_order<'tcx>(fields: &'tcx [hir::ExprField<'tcx>], def_order_map: &FxHashMap<Symbol, usize>) -> bool {\n     let mut cur_idx = usize::MIN;\n     for f in fields {\n         let next_idx = def_order_map[&f.ident.name];"}, {"sha": "7e6d4d3a2160bd055095e53160f6ab870a9afe8c", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, Item, ItemKind, StructField, Variant, VariantData, VisibilityKind};\n+use rustc_ast::ast::{Attribute, Item, ItemKind, FieldDef, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -142,11 +142,11 @@ fn check_manual_non_exhaustive_enum(cx: &EarlyContext<'_>, item: &Item, variants\n }\n \n fn check_manual_non_exhaustive_struct(cx: &EarlyContext<'_>, item: &Item, data: &VariantData) {\n-    fn is_private(field: &StructField) -> bool {\n+    fn is_private(field: &FieldDef) -> bool {\n         matches!(field.vis.kind, VisibilityKind::Inherited)\n     }\n \n-    fn is_non_exhaustive_marker(field: &StructField) -> bool {\n+    fn is_non_exhaustive_marker(field: &FieldDef) -> bool {\n         is_private(field) && field.ty.kind.is_unit() && field.ident.map_or(true, |n| n.as_str().starts_with('_'))\n     }\n "}, {"sha": "985a66b6cfca24f333a57f0a2449e5bc356f0017", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -188,7 +188,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, attrs, impl_item.span, article, desc);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, sf: &'tcx hir::FieldDef<'_>) {\n         if !sf.is_positional() {\n             let attrs = cx.tcx.hir().attrs(sf.hir_id);\n             self.check_missing_docs_attrs(cx, attrs, sf.span, \"a\", \"struct field\");"}, {"sha": "e76c8624b6fe8ac50cd27fbe9b59643fefbdf458", "filename": "src/tools/clippy/clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{last_path_segment, span_lint_and_help};\n use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, FieldPat, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n+    intravisit, Body, Expr, ExprKind, PatField, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n     QPath, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -281,7 +281,7 @@ where\n \n fn find_first_mismatch_in_struct<'tcx>(\n     cx: &LateContext<'tcx>,\n-    field_pats: &[FieldPat<'_>],\n+    field_pats: &[PatField<'_>],\n     field_defs: &[FieldDef],\n     substs_ref: SubstsRef<'tcx>,\n ) -> Option<(Span, Mutability, Level)> {"}, {"sha": "f7a6399a7f048499b1fff6bdb166d3ddf3612d78", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         self.check_fn_decl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'_>, field: &hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n         self.check_ty(cx, &field.ty, false);\n     }\n \n@@ -821,7 +821,7 @@ impl<'tcx> LateLintPass<'tcx> for TypeComplexity {\n         self.check_fndecl(cx, decl);\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         // enum variants are also struct fields now\n         self.check_type(cx, &field.ty);\n     }"}, {"sha": "fa613bb7da3001958f3b7d901ec2d37e890580d8", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -276,7 +276,7 @@ fn transform_with_focus_on_idx(alternatives: &mut Vec<P<Pat>>, focus_idx: usize)\n /// and check that all `fp_i` where `i \u2208 ((0...n) \\ k)` between two patterns are equal.\n fn extend_with_struct_pat(\n     path1: &ast::Path,\n-    fps1: &mut Vec<ast::FieldPat>,\n+    fps1: &mut Vec<ast::PatField>,\n     rest1: bool,\n     start: usize,\n     alternatives: &mut Vec<P<Pat>>,"}, {"sha": "c57614800805ea2ae2c9f52fe26b9edfc4607c75", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -101,12 +101,12 @@ impl<'tcx> LateLintPass<'tcx> for Author {\n         done();\n     }\n \n-    fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::StructField<'_>) {\n+    fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx hir::FieldDef<'_>) {\n         if !has_attr(cx, field.hir_id) {\n             return;\n         }\n         prelude();\n-        PrintVisitor::new(\"field\").visit_struct_field(field);\n+        PrintVisitor::new(\"field\").visit_field_def(field);\n         done();\n     }\n "}, {"sha": "64ee9e65bb1a6e16aa10ec7718afc511ac9c36d6", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -80,8 +80,8 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     // }\n     // }\n     //\n-    // fn check_struct_field(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n-    // hir::StructField) {\n+    // fn check_field_def(&mut self, cx: &LateContext<'tcx>, field: &'tcx\n+    // hir::FieldDef) {\n     // if !has_attr(&field.attrs) {\n     // return;\n     // }"}, {"sha": "05afa5342962f6f134beb7d8ebcd7623ca1ba735", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -66,7 +66,7 @@ pub fn eq_range_end(l: &RangeEnd, r: &RangeEnd) -> bool {\n     }\n }\n \n-pub fn eq_field_pat(l: &FieldPat, r: &FieldPat) -> bool {\n+pub fn eq_field_pat(l: &PatField, r: &PatField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_pat(&l.pat, &r.pat)\n@@ -175,7 +175,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n     }\n }\n \n-pub fn eq_field(l: &Field, r: &Field) -> bool {\n+pub fn eq_field(l: &ExprField, r: &ExprField) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && eq_id(l.ident, r.ident)\n         && eq_expr(&l.expr, &r.expr)\n@@ -359,7 +359,7 @@ pub fn eq_variant_data(l: &VariantData, r: &VariantData) -> bool {\n     }\n }\n \n-pub fn eq_struct_field(l: &StructField, r: &StructField) -> bool {\n+pub fn eq_struct_field(l: &FieldDef, r: &FieldDef) -> bool {\n     l.is_placeholder == r.is_placeholder\n         && over(&l.attrs, &r.attrs, |l, r| eq_attr(l, r))\n         && eq_vis(&l.vis, &r.vis)"}, {"sha": "0c0e4d3b4ce80ada140aff0ba44192048c84be2a", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -51,7 +51,7 @@ pub struct Range<'a> {\n pub fn range<'a>(expr: &'a hir::Expr<'_>) -> Option<Range<'a>> {\n     /// Finds the field named `name` in the field. Always return `Some` for\n     /// convenience.\n-    fn get_field<'c>(name: &str, fields: &'c [hir::Field<'_>]) -> Option<&'c hir::Expr<'c>> {\n+    fn get_field<'c>(name: &str, fields: &'c [hir::ExprField<'_>]) -> Option<&'c hir::Expr<'c>> {\n         let expr = &fields.iter().find(|field| field.ident.name.as_str() == name)?.expr;\n \n         Some(expr)"}, {"sha": "af82f992d56f6475a599177b0a4b034a3685b44a", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25d3ba78118033b3f25b6de7a32e210d113872c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=b25d3ba78118033b3f25b6de7a32e210d113872c", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def::Res;\n use rustc_hir::{\n-    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, Field, FieldPat, FnRetTy,\n+    BinOpKind, Block, BlockCheckMode, BodyId, BorrowKind, CaptureBy, Expr, ExprKind, ExprField, PatField, FnRetTy,\n     GenericArg, GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path,\n     PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n@@ -266,7 +266,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         over(left, right, |l, r| self.eq_expr(l, r))\n     }\n \n-    fn eq_field(&mut self, left: &Field<'_>, right: &Field<'_>) -> bool {\n+    fn eq_field(&mut self, left: &ExprField<'_>, right: &ExprField<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_expr(&left.expr, &right.expr)\n     }\n \n@@ -290,8 +290,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.name == right.name\n     }\n \n-    fn eq_fieldpat(&mut self, left: &FieldPat<'_>, right: &FieldPat<'_>) -> bool {\n-        let (FieldPat { ident: li, pat: lp, .. }, FieldPat { ident: ri, pat: rp, .. }) = (&left, &right);\n+    fn eq_fieldpat(&mut self, left: &PatField<'_>, right: &PatField<'_>) -> bool {\n+        let (PatField { ident: li, pat: lp, .. }, PatField { ident: ri, pat: rp, .. }) = (&left, &right);\n         li.name == ri.name && self.eq_pat(lp, rp)\n     }\n "}]}