{"sha": "06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmEyN2Q3Yzg0YTIxYWY4NDQ5ZTA2ZjNjNTBiMjQzYzRkNWE3YWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-01T16:34:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-01T16:34:27Z"}, "message": "Auto merge of #49561 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 3 pull requests\n\n- Successful merges: #49451, #49498, #49549\n- Failed merges:", "tree": {"sha": "83b9f310edae4d92016c2f2ad72612446e918a12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83b9f310edae4d92016c2f2ad72612446e918a12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "html_url": "https://github.com/rust-lang/rust/commit/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2235f20b5295394450f4962fb5f93254e63640c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2235f20b5295394450f4962fb5f93254e63640c", "html_url": "https://github.com/rust-lang/rust/commit/d2235f20b5295394450f4962fb5f93254e63640c"}, {"sha": "36f9f76356b3c2eb12bb3090c6c1349be8593333", "url": "https://api.github.com/repos/rust-lang/rust/commits/36f9f76356b3c2eb12bb3090c6c1349be8593333", "html_url": "https://github.com/rust-lang/rust/commit/36f9f76356b3c2eb12bb3090c6c1349be8593333"}], "stats": {"total": 143, "additions": 103, "deletions": 40}, "files": [{"sha": "8729335faba817a8660d42f29b75fbc1561941ea", "filename": "src/Cargo.lock", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -152,9 +152,6 @@ dependencies = [\n [[package]]\n name = \"build_helper\"\n version = \"0.1.0\"\n-dependencies = [\n- \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n \n [[package]]\n name = \"byteorder\"\n@@ -270,11 +267,11 @@ dependencies = [\n \n [[package]]\n name = \"clippy\"\n-version = \"0.0.189\"\n+version = \"0.0.191\"\n dependencies = [\n  \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy-mini-macro-test 0.2.0\",\n- \"clippy_lints 0.0.189\",\n+ \"clippy_lints 0.0.191\",\n  \"compiletest_rs 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -291,6 +288,26 @@ version = \"0.2.0\"\n [[package]]\n name = \"clippy_lints\"\n version = \"0.0.189\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex-syntax 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"clippy_lints\"\n+version = \"0.0.191\"\n dependencies = [\n  \"if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1398,7 +1415,7 @@ version = \"0.126.0\"\n dependencies = [\n  \"cargo 0.27.0\",\n  \"cargo_metadata 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"clippy_lints 0.0.189\",\n+ \"clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2631,6 +2648,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7c20ebe0b2b08b0aeddba49c609fe7957ba2e33449882cb186a180bc60682fa9\"\n \"checksum clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0f16b89cbb9ee36d87483dc939fe9f1e13c05898d56d7b230a0d4dff033a536\"\n+\"checksum clippy_lints 0.0.189 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef652630bbf8c5e89601220abd000f5057e8fa9db608484b5ebaad98e9bce53\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\""}, {"sha": "e6aa78fba52ffd21209eef963e3cde30fdad6a72", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -1120,7 +1120,7 @@ pub fn run_cargo(build: &Build, cargo: &mut Command, stamp: &Path, is_check: boo\n     let max = max.unwrap();\n     let max_path = max_path.unwrap();\n     if stamp_contents == new_contents && max <= stamp_mtime {\n-        build.verbose(&format!(\"not updating {:?}; contents equal and {} <= {}\",\n+        build.verbose(&format!(\"not updating {:?}; contents equal and {:?} <= {:?}\",\n                 stamp, max, stamp_mtime));\n         return deps\n     }"}, {"sha": "01d704f816bbc8fc00813d2636f3fe44a847db35", "filename": "src/build_helper/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -6,6 +6,3 @@ authors = [\"The Rust Project Developers\"]\n [lib]\n name = \"build_helper\"\n path = \"lib.rs\"\n-\n-[dependencies]\n-filetime = \"0.1\""}, {"sha": "5a12afd03e13b820c891aec362d9b6f3c5683f70", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -10,14 +10,11 @@\n \n #![deny(warnings)]\n \n-extern crate filetime;\n-\n use std::fs::File;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n use std::{fs, env};\n-\n-use filetime::FileTime;\n+use std::time::{SystemTime, UNIX_EPOCH};\n \n /// A helper macro to `unwrap` a result except also print out details like:\n ///\n@@ -137,10 +134,8 @@ pub fn rerun_if_changed_anything_in_dir(dir: &Path) {\n }\n \n /// Returns the last-modified time for `path`, or zero if it doesn't exist.\n-pub fn mtime(path: &Path) -> FileTime {\n-    fs::metadata(path).map(|f| {\n-        FileTime::from_last_modification_time(&f)\n-    }).unwrap_or(FileTime::zero())\n+pub fn mtime(path: &Path) -> SystemTime {\n+    fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)\n }\n \n /// Returns whether `dst` is up to date given that the file or files in `src`\n@@ -157,9 +152,9 @@ pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n         Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n     };\n     if meta.is_dir() {\n-        dir_up_to_date(src, &threshold)\n+        dir_up_to_date(src, threshold)\n     } else {\n-        FileTime::from_last_modification_time(&meta) <= threshold\n+        meta.modified().unwrap_or(UNIX_EPOCH) <= threshold\n     }\n }\n \n@@ -226,13 +221,13 @@ pub fn sanitizer_lib_boilerplate(sanitizer_name: &str) -> Result<NativeLibBoiler\n                            search_path)\n }\n \n-fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n+fn dir_up_to_date(src: &Path, threshold: SystemTime) -> bool {\n     t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n         let meta = t!(e.metadata());\n         if meta.is_dir() {\n             dir_up_to_date(&e.path(), threshold)\n         } else {\n-            FileTime::from_last_modification_time(&meta) < *threshold\n+            meta.modified().unwrap_or(UNIX_EPOCH) < threshold\n         }\n     })\n }"}, {"sha": "bf97fb4686180f981f7c9e4983606f9910455f1b", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -348,6 +348,19 @@ details.\n \n [issue-display-warnings]: https://github.com/rust-lang/rust/issues/41574\n \n+### `--edition`: control the edition of docs and doctests\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options --edition 2018\n+$ rustdoc --test src/lib.rs -Z unstable-options --edition 2018\n+```\n+\n+This flag allows rustdoc to treat your rust code as the given edition. It will compile doctests with\n+the given edition as well. As with `rustc`, the default edition that `rustdoc` will use is `2015`\n+(the first edition).\n+\n ### `-Z force-unstable-if-unmarked`\n \n Using this flag looks like this:"}, {"sha": "6e2be2610cec072a4001c72d5788ba8049643be8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -26,6 +26,7 @@ use rustc_back::target::TargetTriple;\n \n use syntax::ast::NodeId;\n use syntax::codemap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use errors;\n use errors::emitter::ColorConfig;\n@@ -123,7 +124,8 @@ pub fn run_core(search_paths: SearchPaths,\n                 maybe_sysroot: Option<PathBuf>,\n                 allow_warnings: bool,\n                 crate_name: Option<String>,\n-                force_unstable_if_unmarked: bool) -> (clean::Crate, RenderInfo)\n+                force_unstable_if_unmarked: bool,\n+                edition: Edition) -> (clean::Crate, RenderInfo)\n {\n     // Parse, resolve, and typecheck the given crate.\n \n@@ -148,6 +150,7 @@ pub fn run_core(search_paths: SearchPaths,\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions {\n             force_unstable_if_unmarked,\n+            edition,\n             ..config::basic_debugging_options()\n         },\n         ..config::basic_options().clone()"}, {"sha": "e31390f59e292cead33782f4d7dac0d2cc4ea70d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -61,6 +61,7 @@ use std::path::{Path, PathBuf};\n use std::process;\n use std::sync::mpsc::channel;\n \n+use syntax::edition::Edition;\n use externalfiles::ExternalHtml;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::{ErrorOutputType, RustcOptGroup, nightly_options, Externs};\n@@ -271,6 +272,11 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                       \\\"light-suffix.css\\\"\",\n                      \"PATH\")\n         }),\n+        unstable(\"edition\", |o| {\n+            o.optopt(\"\", \"edition\",\n+                     \"edition to use when compiling rust code (default: 2015)\",\n+                     \"EDITION\")\n+        }),\n     ]\n }\n \n@@ -429,14 +435,23 @@ pub fn main_args(args: &[String]) -> isize {\n     let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n     let resource_suffix = matches.opt_str(\"resource-suffix\");\n \n+    let edition = matches.opt_str(\"edition\").unwrap_or(\"2015\".to_string());\n+    let edition = match edition.parse() {\n+        Ok(e) => e,\n+        Err(_) => {\n+            print_error(\"could not parse edition\");\n+            return 1;\n+        }\n+    };\n+\n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot,\n-                                  display_warnings, linker)\n+                                  display_warnings, linker, edition)\n         }\n         (true, false) => {\n             return test::run(Path::new(input), cfgs, libs, externs, test_args, crate_name,\n-                             maybe_sysroot, display_warnings, linker)\n+                             maybe_sysroot, display_warnings, linker, edition)\n         }\n         (false, true) => return markdown::render(Path::new(input),\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),\n@@ -446,7 +461,7 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     let output_format = matches.opt_str(\"w\");\n-    let res = acquire_input(PathBuf::from(input), externs, &matches, move |out| {\n+    let res = acquire_input(PathBuf::from(input), externs, edition, &matches, move |out| {\n         let Output { krate, passes, renderinfo } = out;\n         info!(\"going to format\");\n         match output_format.as_ref().map(|s| &**s) {\n@@ -487,14 +502,15 @@ fn print_error<T>(error_message: T) where T: Display {\n /// and files and then generates the necessary rustdoc output for formatting.\n fn acquire_input<R, F>(input: PathBuf,\n                        externs: Externs,\n+                       edition: Edition,\n                        matches: &getopts::Matches,\n                        f: F)\n                        -> Result<R, String>\n where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n     match matches.opt_str(\"r\").as_ref().map(|s| &**s) {\n-        Some(\"rust\") => Ok(rust_input(input, externs, matches, f)),\n+        Some(\"rust\") => Ok(rust_input(input, externs, edition, matches, f)),\n         Some(s) => Err(format!(\"unknown input format: {}\", s)),\n-        None => Ok(rust_input(input, externs, matches, f))\n+        None => Ok(rust_input(input, externs, edition, matches, f))\n     }\n }\n \n@@ -520,8 +536,14 @@ fn parse_externs(matches: &getopts::Matches) -> Result<Externs, String> {\n /// generated from the cleaned AST of the crate.\n ///\n /// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(cratefile: PathBuf, externs: Externs, matches: &getopts::Matches, f: F) -> R\n-where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n+fn rust_input<R, F>(cratefile: PathBuf,\n+                    externs: Externs,\n+                    edition: Edition,\n+                    matches: &getopts::Matches,\n+                    f: F) -> R\n+where R: 'static + Send,\n+      F: 'static + Send + FnOnce(Output) -> R\n+{\n     let mut default_passes = !matches.opt_present(\"no-defaults\");\n     let mut passes = matches.opt_strs(\"passes\");\n     let mut plugins = matches.opt_strs(\"plugins\");\n@@ -570,7 +592,7 @@ where R: 'static + Send, F: 'static + Send + FnOnce(Output) -> R {\n         let (mut krate, renderinfo) =\n             core::run_core(paths, cfgs, externs, Input::File(cratefile), triple, maybe_sysroot,\n                            display_warnings, crate_name.clone(),\n-                           force_unstable_if_unmarked);\n+                           force_unstable_if_unmarked, edition);\n \n         info!(\"finished with rustc\");\n "}, {"sha": "daa8966b104e8d193c22925b9d426872b4d92eb1", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -18,6 +18,7 @@ use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n use syntax::codemap::DUMMY_SP;\n+use syntax::edition::Edition;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -139,7 +140,7 @@ pub fn render(input: &Path, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            display_warnings: bool, linker: Option<PathBuf>) -> isize {\n+            display_warnings: bool, linker: Option<PathBuf>, edition: Edition) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -151,7 +152,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_owned(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(PathBuf::from(input)),\n-                                       linker);\n+                                       linker, edition);\n     find_testable_code(&input_str, &mut collector, DUMMY_SP, None);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests,"}, {"sha": "ab11b0d62e9f71055dec5ef63071aadd6ab554a3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fa27d7c84a21af8449e06f3c50b243c4d5a7ad/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -34,6 +34,7 @@ use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n+use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n use syntax::with_globals;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n@@ -57,7 +58,8 @@ pub fn run(input_path: &Path,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n            display_warnings: bool,\n-           linker: Option<PathBuf>)\n+           linker: Option<PathBuf>,\n+           edition: Edition)\n            -> isize {\n     let input = config::Input::File(input_path.to_owned());\n \n@@ -70,6 +72,10 @@ pub fn run(input_path: &Path,\n         unstable_features: UnstableFeatures::from_environment(),\n         lint_cap: Some(::rustc::lint::Level::Allow),\n         actually_rustdoc: true,\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n \n@@ -117,7 +123,8 @@ pub fn run(input_path: &Path,\n                                        maybe_sysroot,\n                                        Some(codemap),\n                                        None,\n-                                       linker);\n+                                       linker,\n+                                       edition);\n \n     {\n         let map = hir::map::map_crate(&sess, &cstore, &mut hir_forest, &defs);\n@@ -177,8 +184,7 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>,\n-            linker: Option<PathBuf>) {\n+            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -204,6 +210,10 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         },\n         test: as_test_harness,\n         unstable_features: UnstableFeatures::from_environment(),\n+        debugging_opts: config::DebuggingOptions {\n+            edition,\n+            ..config::basic_debugging_options()\n+        },\n         ..config::basic_options().clone()\n     };\n \n@@ -465,13 +475,14 @@ pub struct Collector {\n     codemap: Option<Lrc<CodeMap>>,\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n+    edition: Edition,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n                codemap: Option<Lrc<CodeMap>>, filename: Option<PathBuf>,\n-               linker: Option<PathBuf>) -> Collector {\n+               linker: Option<PathBuf>, edition: Edition) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -486,6 +497,7 @@ impl Collector {\n             codemap,\n             filename,\n             linker,\n+            edition,\n         }\n     }\n \n@@ -505,6 +517,7 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n+        let edition = self.edition;\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -535,7 +548,8 @@ impl Collector {\n                                  error_codes,\n                                  &opts,\n                                  maybe_sysroot,\n-                                 linker)\n+                                 linker,\n+                                 edition)\n                     }))\n                 } {\n                     Ok(()) => (),"}, {"sha": "b45801ff192e6f1bd3504c05e612a1004f52a24e", "filename": "src/tools/clippy", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy?ref=06fa27d7c84a21af8449e06f3c50b243c4d5a7ad", "patch": "@@ -1 +1 @@\n-Subproject commit b75618206cec71bd87ff7b07f0a8698ee854a2d1\n+Subproject commit b45801ff192e6f1bd3504c05e612a1004f52a24e"}]}