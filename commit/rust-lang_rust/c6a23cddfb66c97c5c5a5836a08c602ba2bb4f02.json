{"sha": "c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTIzY2RkZmI2NmM5N2M1YzVhNTgzNmEwOGM2MDJiYTJiYjRmMDI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-14T23:31:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-31T04:23:34Z"}, "message": "rustc: Make unique closures use the new unique allocator", "tree": {"sha": "6e63ae5e38eaa553163b64edbbba23f7c1dbc71e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e63ae5e38eaa553163b64edbbba23f7c1dbc71e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "html_url": "https://github.com/rust-lang/rust/commit/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654f7e3086ba3e13c4c0621fe5839dd62edb581e", "url": "https://api.github.com/repos/rust-lang/rust/commits/654f7e3086ba3e13c4c0621fe5839dd62edb581e", "html_url": "https://github.com/rust-lang/rust/commit/654f7e3086ba3e13c4c0621fe5839dd62edb581e"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "f1d0e4e8746f16eef4db2c121f4827be9c000185", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "patch": "@@ -179,10 +179,7 @@ fn allocate_cbox(bcx: block,\n         (bcx, box)\n       }\n       ty::ck_uniq {\n-        let uniq_cbox_ty = mk_tuplified_uniq_cbox_ty(tcx, cdata_ty);\n-        let box = uniq::alloc_uniq(bcx, uniq_cbox_ty);\n-        nuke_ref_count(bcx, box);\n-        let bcx = store_tydesc(bcx, cdata_ty, box, ti);\n+        let box = malloc_unique_raw(bcx, cdata_ty);\n         (bcx, box)\n       }\n       ty::ck_block {\n@@ -606,7 +603,7 @@ fn make_opaque_cbox_free_glue(\n       ty::ck_box | ty::ck_uniq { /* hard cases: */ }\n     }\n \n-    let ccx = bcx.ccx(), tcx = ccx.tcx;\n+    let ccx = bcx.ccx();\n     with_cond(bcx, IsNotNull(bcx, cbox)) {|bcx|\n         // Load the type descr found in the cbox\n         let lltydescty = T_ptr(ccx.tydesc_type);\n@@ -628,8 +625,7 @@ fn make_opaque_cbox_free_glue(\n             trans_free(bcx, cbox)\n           }\n           ty::ck_uniq {\n-            let bcx = free_ty(bcx, tydesc, ty::mk_type(tcx));\n-            trans_shared_free(bcx, cbox)\n+            trans_unique_free(bcx, cbox)\n           }\n         }\n     }"}, {"sha": "a3325fc4904afc00d690a9e870faa0512d277878", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=c6a23cddfb66c97c5c5a5836a08c602ba2bb4f02", "patch": "@@ -5,7 +5,7 @@ import build::*;\n import base::*;\n import shape::llsize_of;\n \n-export trans_uniq, make_free_glue, autoderef, duplicate, alloc_uniq;\n+export trans_uniq, make_free_glue, autoderef, duplicate;\n \n fn trans_uniq(bcx: block, contents: @ast::expr,\n               node_id: ast::node_id, dest: dest) -> block {\n@@ -19,15 +19,6 @@ fn trans_uniq(bcx: block, contents: @ast::expr,\n     ret store_in_dest(bcx, box, dest);\n }\n \n-fn alloc_uniq(bcx: block, uniq_ty: ty::t) -> ValueRef {\n-    let _icx = bcx.insn_ctxt(\"uniq::alloc_uniq\");\n-    let contents_ty = content_ty(uniq_ty);\n-    let llty = type_of::type_of(bcx.ccx(), contents_ty);\n-    let llsz = llsize_of(bcx.ccx(), llty);\n-    let llptrty = T_ptr(llty);\n-    shared_malloc(bcx, llptrty, llsz)\n-}\n-\n fn make_free_glue(bcx: block, vptr: ValueRef, t: ty::t)\n     -> block {\n     let _icx = bcx.insn_ctxt(\"uniq::make_free_glue\");"}]}