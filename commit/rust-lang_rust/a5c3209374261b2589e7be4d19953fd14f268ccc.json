{"sha": "a5c3209374261b2589e7be4d19953fd14f268ccc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YzMyMDkzNzQyNjFiMjU4OWU3YmU0ZDE5OTUzZmQxNGYyNjhjY2M=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-14T08:14:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-14T08:14:31Z"}, "message": "Rollup merge of #48033 - GuillaumeGomez:better-char-cast-message, r=estebank\n\nShow better warning for trying to cast non-u8 scalar to char\n\nFixes #44201.", "tree": {"sha": "4cb86c185204f5e0d74d7c43ccb45095a936d1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cb86c185204f5e0d74d7c43ccb45095a936d1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5c3209374261b2589e7be4d19953fd14f268ccc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJag+/nCRBK7hj4Ov3rIwAAdHIIAItb44Ytc/j8rSSTfxoxAs8J\nl3aKh3zyEYbIMyZ9DoopHF/0sOP7ASgM5KUTiwEhWMg/tWIHngjPAqZhXC80S2gR\nMMP+emaQFGLnzPR/A5l6ON6yl9sN0mEKdccSCdzVdFaCZo1eaxQrqZXIXGXBvs36\njpkcIAUupIpmRuezuU5dOduO63Luoz961Z/+4fJG2QPHdvncdMOgJ+GMbnX7k+XF\n70eA9lffPIWfvFH8balFDDANQWm9dfWbJjh3E8eHzFmfVY+e+47aVQVqhNZwgW7u\nnyG6HaxXdEQBZ0yTnEnhrfgT/RJXlob6bjQ/yo3hyiUcvCVI8ReZyphaRSzgCjE=\n=AvA5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cb86c185204f5e0d74d7c43ccb45095a936d1d6\nparent c88a6fe569bb599c0b2f8fa48a9d72ef9d717897\nparent 0cccd9aca51e3fe2952633b34c4c877539d1113d\nauthor kennytm <kennytm@gmail.com> 1518596071 +0800\ncommitter GitHub <noreply@github.com> 1518596071 +0800\n\nRollup merge of #48033 - GuillaumeGomez:better-char-cast-message, r=estebank\n\nShow better warning for trying to cast non-u8 scalar to char\n\nFixes #44201.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c3209374261b2589e7be4d19953fd14f268ccc", "html_url": "https://github.com/rust-lang/rust/commit/a5c3209374261b2589e7be4d19953fd14f268ccc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5c3209374261b2589e7be4d19953fd14f268ccc/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88a6fe569bb599c0b2f8fa48a9d72ef9d717897", "url": "https://api.github.com/repos/rust-lang/rust/commits/c88a6fe569bb599c0b2f8fa48a9d72ef9d717897", "html_url": "https://github.com/rust-lang/rust/commit/c88a6fe569bb599c0b2f8fa48a9d72ef9d717897"}, {"sha": "0cccd9aca51e3fe2952633b34c4c877539d1113d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cccd9aca51e3fe2952633b34c4c877539d1113d", "html_url": "https://github.com/rust-lang/rust/commit/0cccd9aca51e3fe2952633b34c4c877539d1113d"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "f734f3182a93139b29a84a249c251c59646e1837", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=a5c3209374261b2589e7be4d19953fd14f268ccc", "patch": "@@ -11,6 +11,7 @@\n #![allow(non_snake_case)]\n \n use rustc::hir::def_id::DefId;\n+use rustc::hir::map as hir_map;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind, Ty, TyCtxt};\n use rustc::ty::layout::{self, LayoutOf};\n@@ -176,6 +177,22 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             _ => bug!(),\n                         };\n                         if lit_val < min || lit_val > max {\n+                            let parent_id = cx.tcx.hir.get_parent_node(e.id);\n+                            if let hir_map::NodeExpr(parent_expr) = cx.tcx.hir.get(parent_id) {\n+                                if let hir::ExprCast(..) = parent_expr.node {\n+                                    if let ty::TyChar = cx.tables.expr_ty(parent_expr).sty {\n+                                        let mut err = cx.struct_span_lint(\n+                                                             OVERFLOWING_LITERALS,\n+                                                             parent_expr.span,\n+                                                             \"only u8 can be casted into char\");\n+                                        err.span_suggestion(parent_expr.span,\n+                                                            &\"use a char literal instead\",\n+                                                            format!(\"'\\\\u{{{:X}}}'\", lit_val));\n+                                        err.emit();\n+                                        return\n+                                    }\n+                                }\n+                            }\n                             cx.span_lint(OVERFLOWING_LITERALS,\n                                          e.span,\n                                          &format!(\"literal out of range for {:?}\", t));"}, {"sha": "cd8ade5e51a1b748597ea000d83d6c17719e1a49", "filename": "src/test/ui/cast_char.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Ftest%2Fui%2Fcast_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Ftest%2Fui%2Fcast_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.rs?ref=a5c3209374261b2589e7be4d19953fd14f268ccc", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(overflowing_literals)]\n+\n+fn main() {\n+    const XYZ: char = 0x1F888 as char;\n+    //~^ ERROR only u8 can be casted into char\n+    const XY: char = 129160 as char;\n+    //~^ ERROR only u8 can be casted into char\n+    const ZYX: char = '\\u{01F888}';\n+    println!(\"{}\", XYZ);\n+}"}, {"sha": "e42a38dace9d21aa48af4d79c02c324e35ba1e3a", "filename": "src/test/ui/cast_char.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Ftest%2Fui%2Fcast_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5c3209374261b2589e7be4d19953fd14f268ccc/src%2Ftest%2Fui%2Fcast_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast_char.stderr?ref=a5c3209374261b2589e7be4d19953fd14f268ccc", "patch": "@@ -0,0 +1,20 @@\n+error: only u8 can be casted into char\n+  --> $DIR/cast_char.rs:14:23\n+   |\n+14 |     const XYZ: char = 0x1F888 as char;\n+   |                       ^^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+   |\n+note: lint level defined here\n+  --> $DIR/cast_char.rs:11:9\n+   |\n+11 | #![deny(overflowing_literals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: only u8 can be casted into char\n+  --> $DIR/cast_char.rs:16:22\n+   |\n+16 |     const XY: char = 129160 as char;\n+   |                      ^^^^^^^^^^^^^^ help: use a char literal instead: `'/u{1F888}'`\n+\n+error: aborting due to 2 previous errors\n+"}]}