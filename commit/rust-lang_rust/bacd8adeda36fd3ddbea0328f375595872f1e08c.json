{"sha": "bacd8adeda36fd3ddbea0328f375595872f1e08c", "node_id": "C_kwDOAAsO6NoAKGJhY2Q4YWRlZGEzNmZkM2RkYmVhMDMyOGYzNzU1OTU4NzJmMWUwOGM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-27T09:02:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T20:50:14Z"}, "message": "Fail gracefully when encountering an HRTB in APIT.", "tree": {"sha": "33f14e36d782552173a11aee20a21932e982d3c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33f14e36d782552173a11aee20a21932e982d3c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bacd8adeda36fd3ddbea0328f375595872f1e08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bacd8adeda36fd3ddbea0328f375595872f1e08c", "html_url": "https://github.com/rust-lang/rust/commit/bacd8adeda36fd3ddbea0328f375595872f1e08c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bacd8adeda36fd3ddbea0328f375595872f1e08c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc", "html_url": "https://github.com/rust-lang/rust/commit/7e9b92cb43a489b34e2bcb8d21f36198e02eedbc"}], "stats": {"total": 95, "additions": 87, "deletions": 8}, "files": [{"sha": "dbbdb8b192b143f935b53741d801106ce91b36e0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bacd8adeda36fd3ddbea0328f375595872f1e08c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd8adeda36fd3ddbea0328f375595872f1e08c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=bacd8adeda36fd3ddbea0328f375595872f1e08c", "patch": "@@ -734,7 +734,7 @@ impl<'hir> WherePredicate<'hir> {\n     }\n }\n \n-#[derive(Debug, HashStable_Generic, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, HashStable_Generic, PartialEq, Eq)]\n pub enum PredicateOrigin {\n     WhereClause,\n     GenericParam,"}, {"sha": "bfc42902be4ca23bb5b7be05ec421caa0b3debfa", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 64, "deletions": 7, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bacd8adeda36fd3ddbea0328f375595872f1e08c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd8adeda36fd3ddbea0328f375595872f1e08c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=bacd8adeda36fd3ddbea0328f375595872f1e08c", "patch": "@@ -207,6 +207,13 @@ enum Scope<'a> {\n         /// In some cases not allowing late bounds allows us to avoid ICEs.\n         /// This is almost ways set to true.\n         allow_late_bound: bool,\n+\n+        /// If this binder comes from a where clause, specify how it was created.\n+        /// This is used to diagnose inaccessible lifetimes in APIT:\n+        /// ```ignore (illustrative)\n+        /// fn foo(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}\n+        /// ```\n+        where_bound_origin: Option<hir::PredicateOrigin>,\n     },\n \n     /// Lifetimes introduced by a fn are scoped to the call-site for that fn,\n@@ -277,17 +284,19 @@ impl<'a> fmt::Debug for TruncatedScopeDebug<'a> {\n                 opaque_type_parent,\n                 scope_type,\n                 hir_id,\n-                s: _,\n                 allow_late_bound,\n+                where_bound_origin,\n+                s: _,\n             } => f\n                 .debug_struct(\"Binder\")\n                 .field(\"lifetimes\", lifetimes)\n                 .field(\"next_early_index\", next_early_index)\n                 .field(\"opaque_type_parent\", opaque_type_parent)\n                 .field(\"scope_type\", scope_type)\n                 .field(\"hir_id\", hir_id)\n-                .field(\"s\", &\"..\")\n                 .field(\"allow_late_bound\", allow_late_bound)\n+                .field(\"where_bound_origin\", where_bound_origin)\n+                .field(\"s\", &\"..\")\n                 .finish(),\n             Scope::Body { id, s: _ } => {\n                 f.debug_struct(\"Body\").field(\"id\", id).field(\"s\", &\"..\").finish()\n@@ -638,6 +647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, move |this| intravisit::walk_fn(this, fk, fd, b, s, hir_id));\n             }\n@@ -753,6 +763,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     scope_type: BinderScopeType::Normal,\n                     s: ROOT_SCOPE,\n                     allow_late_bound: false,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -818,6 +829,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: false,\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n                     // a bare fn has no bounds, so everything\n@@ -1006,6 +1018,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n                             allow_late_bound: false,\n+                            where_bound_origin: None,\n                         };\n                         this.with(scope, |this| {\n                             this.visit_generics(generics);\n@@ -1026,6 +1039,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         opaque_type_parent: false,\n                         scope_type: BinderScopeType::Normal,\n                         allow_late_bound: false,\n+                        where_bound_origin: None,\n                     };\n                     self.with(scope, |this| {\n                         let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1084,6 +1098,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: false,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1151,6 +1166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: true,\n                     scope_type: BinderScopeType::Normal,\n                     allow_late_bound: true,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n                     let scope = Scope::TraitRefBoundary { s: this.scope };\n@@ -1266,6 +1282,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         ref bounded_ty,\n                         bounds,\n                         ref bound_generic_params,\n+                        origin,\n                         ..\n                     }) => {\n                         let (lifetimes, binders): (FxIndexMap<LocalDefId, Region>, Vec<_>) =\n@@ -1296,6 +1313,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                             opaque_type_parent: false,\n                             scope_type: BinderScopeType::Normal,\n                             allow_late_bound: true,\n+                            where_bound_origin: Some(origin),\n                         };\n                         this.with(scope, |this| {\n                             this.visit_ty(&bounded_ty);\n@@ -1368,6 +1386,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     opaque_type_parent: false,\n                     scope_type,\n                     allow_late_bound: true,\n+                    where_bound_origin: None,\n                 };\n                 self.with(scope, |this| {\n                     intravisit::walk_param_bound(this, bound);\n@@ -1420,6 +1439,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             opaque_type_parent: false,\n             scope_type,\n             allow_late_bound: true,\n+            where_bound_origin: None,\n         };\n         self.with(scope, |this| {\n             walk_list!(this, visit_generic_param, trait_ref.bound_generic_params);\n@@ -1680,6 +1700,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             opaque_type_parent: true,\n             scope_type: BinderScopeType::Normal,\n             allow_late_bound: true,\n+            where_bound_origin: None,\n         };\n         self.with(scope, walk);\n     }\n@@ -1783,12 +1804,48 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             self.insert_lifetime(lifetime_ref, def);\n-        } else {\n-            self.tcx.sess.delay_span_bug(\n-                lifetime_ref.span,\n-                &format!(\"Could not resolve {:?} in scope {:#?}\", lifetime_ref, self.scope,),\n-            );\n+            return;\n         }\n+\n+        // We may fail to resolve higher-ranked lifetimes that are mentionned by APIT.\n+        // AST-based resolution does not care for impl-trait desugaring, which are the\n+        // responibility of lowering.  This may create a mismatch between the resolution\n+        // AST found (`region_def_id`) which points to HRTB, and what HIR allows.\n+        // ```\n+        // fn foo(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}\n+        // ```\n+        //\n+        // In such case, walk back the binders to diagnose it properly.\n+        let mut scope = self.scope;\n+        loop {\n+            match *scope {\n+                Scope::Binder {\n+                    where_bound_origin: Some(hir::PredicateOrigin::ImplTrait), ..\n+                } => {\n+                    let mut err = self.tcx.sess.struct_span_err(\n+                        lifetime_ref.span,\n+                        \"`impl Trait` can only mention lifetimes bound at the fn or impl level\",\n+                    );\n+                    err.span_note(self.tcx.def_span(region_def_id), \"lifetime declared here\");\n+                    err.emit();\n+                    return;\n+                }\n+                Scope::Root => break,\n+                Scope::Binder { s, .. }\n+                | Scope::Body { s, .. }\n+                | Scope::Elision { s, .. }\n+                | Scope::ObjectLifetimeDefault { s, .. }\n+                | Scope::Supertrait { s, .. }\n+                | Scope::TraitRefBoundary { s, .. } => {\n+                    scope = s;\n+                }\n+            }\n+        }\n+\n+        self.tcx.sess.delay_span_bug(\n+            lifetime_ref.span,\n+            &format!(\"Could not resolve {:?} in scope {:#?}\", lifetime_ref, self.scope,),\n+        );\n     }\n \n     fn visit_segment_args("}, {"sha": "b9551c2ceb0e52bc0ce0d01c70c6e3092fc798d3", "filename": "src/test/ui/impl-trait/universal_wrong_hrtb.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bacd8adeda36fd3ddbea0328f375595872f1e08c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bacd8adeda36fd3ddbea0328f375595872f1e08c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.rs?ref=bacd8adeda36fd3ddbea0328f375595872f1e08c", "patch": "@@ -0,0 +1,8 @@\n+trait Trait<'a> {\n+    type Assoc;\n+}\n+\n+fn test_argument_position(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}\n+//~^ ERROR `impl Trait` can only mention lifetimes bound at the fn or impl level\n+\n+fn main() {}"}, {"sha": "37eb8dfa1a1415260884c5c386828cb704ede398", "filename": "src/test/ui/impl-trait/universal_wrong_hrtb.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bacd8adeda36fd3ddbea0328f375595872f1e08c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bacd8adeda36fd3ddbea0328f375595872f1e08c/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal_wrong_hrtb.stderr?ref=bacd8adeda36fd3ddbea0328f375595872f1e08c", "patch": "@@ -0,0 +1,14 @@\n+error: `impl Trait` can only mention lifetimes bound at the fn or impl level\n+  --> $DIR/universal_wrong_hrtb.rs:5:73\n+   |\n+LL | fn test_argument_position(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}\n+   |                                                                         ^^\n+   |\n+note: lifetime declared here\n+  --> $DIR/universal_wrong_hrtb.rs:5:39\n+   |\n+LL | fn test_argument_position(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}\n+   |                                       ^^\n+\n+error: aborting due to previous error\n+"}]}