{"sha": "11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZGNiNDhjNmE5OWU4NDk1MmRlM2I3ZDVjMWY2OTI4ZDdiMDU4Njc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-05T01:35:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-14T21:24:12Z"}, "message": "Add a test\n\nAnd fix bustage in make check", "tree": {"sha": "05e225d4e6627ca75b4b59ad23808189c892e667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e225d4e6627ca75b4b59ad23808189c892e667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "html_url": "https://github.com/rust-lang/rust/commit/11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6", "html_url": "https://github.com/rust-lang/rust/commit/b976d9e6660c16f4a1d5a28b11afa7ccb4f75da6"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "a7fd170b91c37778196b1a080c66acd5c605aeee", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -118,11 +118,11 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     };\n \n     let codemap = Rc::new(codemap::CodeMap::new());\n-    let diagnostic_handler = errors::Handler::new(ColorConfig::Auto,\n-                                                  None,\n-                                                  true,\n-                                                  false,\n-                                                  codemap.clone());\n+    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n+                                                               None,\n+                                                               true,\n+                                                               false,\n+                                                               codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n     let sess = session::build_session_(sessopts, cpath, diagnostic_handler,"}, {"sha": "dce537fe9d292a0a5923dba022b0c0ac3c14bcab", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -50,6 +50,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -62,7 +63,7 @@ use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n use rustc::session::search_paths::SearchPaths;\n-use syntax::errors::emitter::ColorConfig;\n+use rustc::session::config::ErrorOutputType;\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -225,7 +226,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        libs.add_path(s, ColorConfig::Auto);\n+        libs.add_path(s, ErrorOutputType::default());\n     }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n@@ -360,7 +361,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     // First, parse the crate and extract all relevant information.\n     let mut paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        paths.add_path(s, ColorConfig::Auto);\n+        paths.add_path(s, ErrorOutputType::default());\n     }\n     let cfgs = matches.opt_strs(\"cfg\");\n     let triple = matches.opt_str(\"target\");"}, {"sha": "d7d30f065bf0e9c857fe5aa83cfb4db23431a854", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -73,11 +73,11 @@ pub fn run(input: &str,\n     };\n \n     let codemap = Rc::new(CodeMap::new());\n-    let diagnostic_handler = errors::Handler::new(ColorConfig::Auto,\n-                                                  None,\n-                                                  true,\n-                                                  false,\n-                                                  codemap.clone());\n+    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n+                                                               None,\n+                                                               true,\n+                                                               false,\n+                                                               codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n     let sess = session::build_session_(sessopts,"}, {"sha": "713190ef419d69a974f4989f62999608836b8091", "filename": "src/libsyntax/errors/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -131,7 +131,7 @@ impl<'a> Diagnostic<'a> {\n                         je: &JsonEmitter)\n                         -> Diagnostic<'a> {\n         Diagnostic {\n-            msg: msg,\n+            message: msg,\n             code: None,\n             level: level.to_str(),\n             span: Some(DiagnosticSpan::from_render_span(span, je)),"}, {"sha": "dc409f393a86a971fa82fb3005fc0ef78eb286dc", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -195,7 +195,7 @@ fn build_exec_options(sysroot: PathBuf) -> Options {\n     opts.maybe_sysroot = Some(sysroot);\n \n     // Prefer faster build time\n-    opts.optimize = config::No;\n+    opts.optimize = config::OptLevel::No;\n \n     // Don't require a `main` function\n     opts.crate_types = vec![config::CrateTypeDylib];"}, {"sha": "2c1eae8115086356ae5912ffbc6ba07a6774bd8d", "filename": "src/test/run-make/json-errors/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp foo.rs $(TMPDIR)\n+\tcd $(TMPDIR)\n+\t$(RUSTC) -Z unstable-options --output=json foo.rs 2>foo.log || true\n+\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":523,\"byte_end\":524,\"line_start\":14,\"line_end\":14,\"column_start\":18,\"column_end\":19},\"children\":\\[\\]}' foo.log"}, {"sha": "9a6f4ad8359e08f4987e201884be72ff99e69e85", "filename": "src/test/run-make/json-errors/foo.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+fn main() {\n+    let x = 42 + y;\n+}"}, {"sha": "56481dc646a9c5e35a694a4daac24cc24e532094", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11dcb48c6a99e84952de3b7d5c1f6928d7b05867/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=11dcb48c6a99e84952de3b7d5c1f6928d7b05867", "patch": "@@ -35,7 +35,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &diagnostics::registry::Registry,\n-                      _: errors::emitter::ColorConfig)\n+                      _: config::ErrorOutputType)\n                       -> Compilation {\n         self.count *= 2;\n         Compilation::Continue"}]}