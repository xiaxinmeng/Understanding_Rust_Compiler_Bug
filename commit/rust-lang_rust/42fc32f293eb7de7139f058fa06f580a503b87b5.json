{"sha": "42fc32f293eb7de7139f058fa06f580a503b87b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZmMzMmYyOTNlYjdkZTcxMzlmMDU4ZmEwNmY1ODBhNTAzYjg3YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T20:41:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-14T20:41:36Z"}, "message": "auto merge of #12869 : thestinger/rust/cmp, r=brson\n\nThe `Float` trait provides correct `min` and `max` methods on floating\r\npoint types, providing a consistent result regardless of the order the\r\nparameters are passed.\r\n\r\nThese generic functions do not take the necessary performance hit to\r\ncorrectly support a partial order, so the true requirement should be\r\ngiven as a type bound.\r\n\r\nCloses #12712", "tree": {"sha": "3e59bee58501bd7e74f7ca03c887f78eef81b6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e59bee58501bd7e74f7ca03c887f78eef81b6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42fc32f293eb7de7139f058fa06f580a503b87b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42fc32f293eb7de7139f058fa06f580a503b87b5", "html_url": "https://github.com/rust-lang/rust/commit/42fc32f293eb7de7139f058fa06f580a503b87b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42fc32f293eb7de7139f058fa06f580a503b87b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99d523707c8058383e7a551e49d59ce622d5765", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99d523707c8058383e7a551e49d59ce622d5765", "html_url": "https://github.com/rust-lang/rust/commit/e99d523707c8058383e7a551e49d59ce622d5765"}, {"sha": "4e1c2158f29fbb6c2bdb4d50f1fdc6a30685bc3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1c2158f29fbb6c2bdb4d50f1fdc6a30685bc3c", "html_url": "https://github.com/rust-lang/rust/commit/4e1c2158f29fbb6c2bdb4d50f1fdc6a30685bc3c"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "976077f70c86e6d1a65cf4e962797ea02f147a80", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=42fc32f293eb7de7139f058fa06f580a503b87b5", "patch": "@@ -351,8 +351,6 @@ fn pnorm(nums: &~[f64], p: uint) -> f64 {\n \n fn main() {\n     let numbers = vec::from_fn(1000000, |_| rand::random::<f64>());\n-    println!(\"Inf-norm = {}\",  *numbers.iter().max().unwrap());\n-\n     let numbers_arc = Arc::new(numbers);\n \n     for num in range(1u, 10) {"}, {"sha": "023b20287039959e4bb37f02cbdfde03408005e3", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=42fc32f293eb7de7139f058fa06f580a503b87b5", "patch": "@@ -184,12 +184,12 @@ pub trait Equiv<T> {\n }\n \n #[inline]\n-pub fn min<T:Ord>(v1: T, v2: T) -> T {\n+pub fn min<T: TotalOrd>(v1: T, v2: T) -> T {\n     if v1 < v2 { v1 } else { v2 }\n }\n \n #[inline]\n-pub fn max<T:Ord>(v1: T, v2: T) -> T {\n+pub fn max<T: TotalOrd>(v1: T, v2: T) -> T {\n     if v1 > v2 { v1 } else { v2 }\n }\n "}, {"sha": "6bcac425420512e8d3990b9f83f471625a0e435d", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=42fc32f293eb7de7139f058fa06f580a503b87b5", "patch": "@@ -68,7 +68,7 @@ use cmp;\n use num::{Zero, One, CheckedAdd, CheckedSub, Saturating, ToPrimitive, Int};\n use option::{Option, Some, None};\n use ops::{Add, Mul, Sub};\n-use cmp::{Eq, Ord};\n+use cmp::{Eq, Ord, TotalOrd};\n use clone::Clone;\n use uint;\n use mem;\n@@ -626,7 +626,7 @@ pub trait Iterator<A> {\n     /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n     #[inline]\n-    fn max_by<B: Ord>(&mut self, f: |&A| -> B) -> Option<A> {\n+    fn max_by<B: TotalOrd>(&mut self, f: |&A| -> B) -> Option<A> {\n         self.fold(None, |max: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match max {\n@@ -650,7 +650,7 @@ pub trait Iterator<A> {\n     /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n     #[inline]\n-    fn min_by<B: Ord>(&mut self, f: |&A| -> B) -> Option<A> {\n+    fn min_by<B: TotalOrd>(&mut self, f: |&A| -> B) -> Option<A> {\n         self.fold(None, |min: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match min {\n@@ -917,7 +917,7 @@ pub trait OrdIterator<A> {\n     fn min_max(&mut self) -> MinMaxResult<A>;\n }\n \n-impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n+impl<A: TotalOrd, T: Iterator<A>> OrdIterator<A> for T {\n     #[inline]\n     fn max(&mut self) -> Option<A> {\n         self.fold(None, |max, x| {"}, {"sha": "b4561b3075db01987212999beae3213b71a76dcd", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42fc32f293eb7de7139f058fa06f580a503b87b5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=42fc32f293eb7de7139f058fa06f580a503b87b5", "patch": "@@ -1070,7 +1070,7 @@ impl MetricMap {\n                     if delta.abs() <= noise {\n                         LikelyNoise\n                     } else {\n-                        let pct = delta.abs() / cmp::max(vold.value, f64::EPSILON) * 100.0;\n+                        let pct = delta.abs() / vold.value.max(f64::EPSILON) * 100.0;\n                         if vold.noise < 0.0 {\n                             // When 'noise' is negative, it means we want\n                             // to see deltas that go up over time, and can"}]}