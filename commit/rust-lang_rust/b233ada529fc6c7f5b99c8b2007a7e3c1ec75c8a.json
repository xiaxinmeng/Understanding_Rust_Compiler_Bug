{"sha": "b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzNhZGE1MjlmYzZjN2Y1Yjk5YzhiMjAwN2E3ZTNjMWVjNzVjOGE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-19T04:59:01Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-12-19T04:59:01Z"}, "message": "Change Option<Value> to Value, using ByVal(Undef).\n\nThis job isn't quite finished because it caused me to discover bugs\nrelated to reading `ByVal(Undef)` when a `ByValPair` is expected, e.g.\nfor a fat pointer. This wasn't a problem with the `None` of\n`Option<Value>`, but I realized an equivalent bug existed even then,\nsince you could transmute a `u64` like `ByVal(Bytes(42))` to a fat\npointer type on 32-bit targets.\n\nLikewise, you could transmute a fat pointer to `u64` and get panics\nrelated to expecting `ByVal` but finding `ByValPair`, so the problem\ngoes both ways.", "tree": {"sha": "13bb03f878014485a3f36466a7b5252c2fc39f4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13bb03f878014485a3f36466a7b5252c2fc39f4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "html_url": "https://github.com/rust-lang/rust/commit/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459a27d6bd80a2170492e14b19f0b3d3238c9038", "url": "https://api.github.com/repos/rust-lang/rust/commits/459a27d6bd80a2170492e14b19f0b3d3238c9038", "html_url": "https://github.com/rust-lang/rust/commit/459a27d6bd80a2170492e14b19f0b3d3238c9038"}], "stats": {"total": 218, "additions": 93, "deletions": 125}, "files": [{"sha": "a9d930e0fdf52c078cd8fd91bc37c231284439dc", "filename": "src/eval_context.rs", "status": "modified", "additions": 69, "deletions": 85, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "patch": "@@ -77,8 +77,8 @@ pub struct Frame<'tcx> {\n     /// `[arguments..., variables..., temporaries...]`. The locals are stored as `Value`s, which\n     /// can either directly contain `PrimVal` or refer to some part of an `Allocation`.\n     ///\n-    /// Before being initialized, a local is simply marked as None.\n-    pub locals: Vec<Option<Value>>,\n+    /// Before being initialized, all locals are `Value::ByVal(PrimVal::Undef)`.\n+    pub locals: Vec<Value>,\n \n     /// Temporary allocations introduced to save stackframes\n     /// This is pure interpreter magic and has nothing to do with how rustc does it\n@@ -283,7 +283,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         // Subtract 1 because `local_decls` includes the ReturnPointer, but we don't store a local\n         // `Value` for that.\n         let num_locals = mir.local_decls.len() - 1;\n-        let locals = vec![None; num_locals];\n+        let locals = vec![Value::ByVal(PrimVal::Undef); num_locals];\n \n         self.stack.push(Frame {\n             mir: mir,\n@@ -310,10 +310,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         match frame.return_to_block {\n             StackPopCleanup::Freeze => if let Lvalue::Global(id) = frame.return_lvalue {\n-                let global_value = self.globals\n-                                       .get_mut(&id)\n-                                       .expect(\"global should have been cached (freeze)\");\n-                match global_value.data.expect(\"global should have been initialized\") {\n+                let global_value = self.globals.get_mut(&id)\n+                    .expect(\"global should have been cached (freeze)\");\n+                match global_value.value {\n                     Value::ByRef(ptr) => self.memory.freeze(ptr.alloc_id)?,\n                     Value::ByVal(val) => if let PrimVal::Ptr(ptr) = val {\n                         self.memory.freeze(ptr.alloc_id)?;\n@@ -337,7 +336,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         }\n         // deallocate all locals that are backed by an allocation\n         for local in frame.locals.into_iter() {\n-            if let Some(Value::ByRef(ptr)) = local {\n+            if let Value::ByRef(ptr) = local {\n                 trace!(\"deallocating local\");\n                 self.memory.dump_alloc(ptr.alloc_id);\n                 match self.memory.deallocate(ptr) {\n@@ -423,7 +422,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                     Array { .. } => {\n                         let elem_size = match dest_ty.sty {\n-                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty)?.expect(\"array elements are sized\") as u64,\n+                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty)?\n+                                .expect(\"array elements are sized\") as u64,\n                             _ => bug!(\"tried to assign {:?} to non-array type {:?}\", kind, dest_ty),\n                         };\n                         let offsets = (0..).map(|i| i * elem_size);\n@@ -488,7 +488,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 let dest = self.force_allocation(dest)?.to_ptr();\n \n                                 let dest = dest.offset(offset.bytes());\n-                                let dest_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");\n+                                let dest_size = self.type_size(ty)?\n+                                    .expect(\"bad StructWrappedNullablePointer discrfield\");\n                                 self.memory.write_int(dest, 0, dest_size)?;\n                             }\n                         } else {\n@@ -541,7 +542,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     _ => bug!(\"tried to assign array-repeat to non-array type {:?}\", dest_ty),\n                 };\n                 self.inc_step_counter_and_check_limit(length)?;\n-                let elem_size = self.type_size(elem_ty)?.expect(\"repeat element type must be sized\");\n+                let elem_size = self.type_size(elem_ty)?\n+                    .expect(\"repeat element type must be sized\");\n                 let value = self.eval_operand(operand)?;\n \n                 // FIXME(solson)\n@@ -811,36 +813,32 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let new_lvalue = match lvalue {\n             Lvalue::Local { frame, local } => {\n                 match self.stack[frame].get_local(local) {\n-                    Some(Value::ByRef(ptr)) => Lvalue::from_ptr(ptr),\n-                    opt_val => {\n+                    Value::ByRef(ptr) => Lvalue::from_ptr(ptr),\n+                    val => {\n                         let ty = self.stack[frame].mir.local_decls[local].ty;\n                         let ty = self.monomorphize(ty, self.stack[frame].substs);\n                         let substs = self.stack[frame].substs;\n                         let ptr = self.alloc_ptr_with_substs(ty, substs)?;\n                         self.stack[frame].set_local(local, Value::ByRef(ptr));\n-                        if let Some(val) = opt_val {\n-                            self.write_value_to_ptr(val, ptr, ty)?;\n-                        }\n+                        self.write_value_to_ptr(val, ptr, ty)?;\n                         Lvalue::from_ptr(ptr)\n                     }\n                 }\n             }\n             Lvalue::Ptr { .. } => lvalue,\n             Lvalue::Global(cid) => {\n                 let global_val = *self.globals.get(&cid).expect(\"global not cached\");\n-                match global_val.data {\n-                    Some(Value::ByRef(ptr)) => Lvalue::from_ptr(ptr),\n+                match global_val.value {\n+                    Value::ByRef(ptr) => Lvalue::from_ptr(ptr),\n                     _ => {\n                         let ptr = self.alloc_ptr_with_substs(global_val.ty, cid.substs)?;\n-                        if let Some(val) = global_val.data {\n-                            self.write_value_to_ptr(val, ptr, global_val.ty)?;\n-                        }\n+                        self.write_value_to_ptr(global_val.value, ptr, global_val.ty)?;\n                         if !global_val.mutable {\n                             self.memory.freeze(ptr.alloc_id)?;\n                         }\n                         let lval = self.globals.get_mut(&cid).expect(\"already checked\");\n                         *lval = Global {\n-                            data: Some(Value::ByRef(ptr)),\n+                            value: Value::ByRef(ptr),\n                             .. global_val\n                         };\n                         Lvalue::from_ptr(ptr)\n@@ -881,8 +879,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match dest {\n             Lvalue::Ptr { ptr, extra } => {\n                 assert_eq!(extra, LvalueExtra::None);\n-                let kind = self.ty_to_primval_kind(dest_ty)?;\n-                self.memory.write_primval(ptr, val, kind)\n+                let size = self.type_size(dest_ty)?.expect(\"dest type must be sized\");\n+                self.memory.write_primval(ptr, val, size)\n             }\n             Lvalue::Local { frame, local } => {\n                 self.stack[frame].set_local(local, Value::ByVal(val));\n@@ -891,7 +889,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Lvalue::Global(cid) => {\n                 let global_val = self.globals.get_mut(&cid).expect(\"global not cached\");\n                 if global_val.mutable {\n-                    global_val.data = Some(Value::ByVal(val));\n+                    global_val.value = Value::ByVal(val);\n                     Ok(())\n                 } else {\n                     Err(EvalError::ModifiedConstantMemory)\n@@ -912,12 +910,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 if !dest.mutable {\n                     return Err(EvalError::ModifiedConstantMemory);\n                 }\n-                self.write_value_possibly_by_val(\n-                    src_val,\n-                    |this, val| *this.globals.get_mut(&cid).expect(\"already checked\") = Global { data: Some(val), ..dest },\n-                    dest.data,\n-                    dest_ty,\n-                )\n+                let write_dest = |this: &mut Self, val| {\n+                    *this.globals.get_mut(&cid).expect(\"already checked\") = Global {\n+                        value: val,\n+                        ..dest\n+                    }\n+                };\n+                self.write_value_possibly_by_val(src_val, write_dest, dest.value, dest_ty)\n             },\n \n             Lvalue::Ptr { ptr, extra } => {\n@@ -942,10 +941,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         src_val: Value,\n         write_dest: F,\n-        old_dest_val: Option<Value>,\n+        old_dest_val: Value,\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n-        if let Some(Value::ByRef(dest_ptr)) = old_dest_val {\n+        if let Value::ByRef(dest_ptr) = old_dest_val {\n             // If the value is already `ByRef` (that is, backed by an `Allocation`),\n             // then we must write the new value into this allocation, because there may be\n             // other pointers into the allocation. These other pointers are logically\n@@ -992,8 +991,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match value {\n             Value::ByRef(ptr) => self.copy(ptr, dest, dest_ty),\n             Value::ByVal(primval) => {\n-                let kind = self.ty_to_primval_kind(dest_ty)?;\n-                self.memory.write_primval(dest, primval, kind)\n+                let size = self.type_size(dest_ty)?.expect(\"dest type must be sized\");\n+                self.memory.write_primval(dest, primval, size)\n             }\n             Value::ByValPair(a, b) => self.write_pair_to_ptr(a, b, dest, dest_ty),\n         }\n@@ -1011,10 +1010,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let field_1 = self.get_field_offset(ty, 1)?.bytes();\n         let field_0_ty = self.get_field_ty(ty, 0)?;\n         let field_1_ty = self.get_field_ty(ty, 1)?;\n-        let field_0_kind = self.ty_to_primval_kind(field_0_ty)?;\n-        let field_1_kind = self.ty_to_primval_kind(field_1_ty)?;\n-        self.memory.write_primval(ptr.offset(field_0), a, field_0_kind)?;\n-        self.memory.write_primval(ptr.offset(field_1), b, field_1_kind)?;\n+        let field_0_size = self.type_size(field_0_ty)?.expect(\"pair element type must be sized\");\n+        let field_1_size = self.type_size(field_1_ty)?.expect(\"pair element type must be sized\");\n+        self.memory.write_primval(ptr.offset(field_0), a, field_0_size)?;\n+        self.memory.write_primval(ptr.offset(field_1), b, field_1_size)?;\n         Ok(())\n     }\n \n@@ -1293,83 +1292,68 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let mut allocs = Vec::new();\n \n         if let Lvalue::Local { frame, local } = lvalue {\n-            if let Some(val) = self.stack[frame].get_local(local) {\n-                match val {\n-                    Value::ByRef(ptr) => {\n-                        trace!(\"frame[{}] {:?}:\", frame, local);\n-                        allocs.push(ptr.alloc_id);\n-                    }\n-                    Value::ByVal(val) => {\n-                        trace!(\"frame[{}] {:?}: {:?}\", frame, local, val);\n-                        if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n-                    }\n-                    Value::ByValPair(val1, val2) => {\n-                        trace!(\"frame[{}] {:?}: ({:?}, {:?})\", frame, local, val1, val2);\n-                        if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n-                        if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n-                    }\n+            match self.stack[frame].get_local(local) {\n+                Value::ByRef(ptr) => {\n+                    trace!(\"frame[{}] {:?}:\", frame, local);\n+                    allocs.push(ptr.alloc_id);\n+                }\n+                Value::ByVal(val) => {\n+                    trace!(\"frame[{}] {:?}: {:?}\", frame, local, val);\n+                    if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n+                }\n+                Value::ByValPair(val1, val2) => {\n+                    trace!(\"frame[{}] {:?}: ({:?}, {:?})\", frame, local, val1, val2);\n+                    if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n+                    if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n                 }\n             }\n         }\n \n         self.memory.dump_allocs(allocs);\n     }\n \n-    /// convenience function to ensure correct usage of globals and code-sharing with locals\n-    pub fn modify_global<\n-        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n-    >(\n-        &mut self,\n-        cid: GlobalId<'tcx>,\n-        f: F,\n-    ) -> EvalResult<'tcx, ()> {\n+    /// Convenience function to ensure correct usage of globals and code-sharing with locals.\n+    pub fn modify_global<F>(&mut self, cid: GlobalId<'tcx>, f: F) -> EvalResult<'tcx, ()>\n+        where F: FnOnce(&mut Self, Value) -> EvalResult<'tcx, Value>,\n+    {\n         let mut val = *self.globals.get(&cid).expect(\"global not cached\");\n         if !val.mutable {\n             return Err(EvalError::ModifiedConstantMemory);\n         }\n-        val.data = f(self, val.data)?;\n+        val.value = f(self, val.value)?;\n         *self.globals.get_mut(&cid).expect(\"already checked\") = val;\n         Ok(())\n     }\n \n-    /// convenience function to ensure correct usage of locals and code-sharing with globals\n-    pub fn modify_local<\n-        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n-    >(\n+    /// Convenience function to ensure correct usage of locals and code-sharing with globals.\n+    pub fn modify_local<F>(\n         &mut self,\n         frame: usize,\n         local: mir::Local,\n         f: F,\n-    ) -> EvalResult<'tcx, ()> {\n+    ) -> EvalResult<'tcx, ()>\n+        where F: FnOnce(&mut Self, Value) -> EvalResult<'tcx, Value>,\n+    {\n         let val = self.stack[frame].get_local(local);\n-        let val = f(self, val)?;\n-        if let Some(val) = val {\n-            self.stack[frame].set_local(local, val);\n-        } else {\n-            self.deallocate_local(frame, local)?;\n-        }\n-        Ok(())\n-    }\n-\n-    pub fn deallocate_local(&mut self, frame: usize, local: mir::Local) -> EvalResult<'tcx, ()> {\n-        if let Some(Value::ByRef(ptr)) = self.stack[frame].get_local(local) {\n-            self.memory.deallocate(ptr)?;\n-        }\n-        // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n-        self.stack[frame].locals[local.index() - 1] = None;\n+        let new_val = f(self, val)?;\n+        self.stack[frame].set_local(local, new_val);\n+        // FIXME(solson): Run this when setting to Undef? (See previous version of this code.)\n+        // if let Value::ByRef(ptr) = self.stack[frame].get_local(local) {\n+        //     self.memory.deallocate(ptr)?;\n+        // }\n         Ok(())\n     }\n }\n \n impl<'tcx> Frame<'tcx> {\n-    pub fn get_local(&self, local: mir::Local) -> Option<Value> {\n+    pub fn get_local(&self, local: mir::Local) -> Value {\n         // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n         self.locals[local.index() - 1]\n     }\n \n     fn set_local(&mut self, local: mir::Local, value: Value) {\n         // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n-        self.locals[local.index() - 1] = Some(value);\n+        self.locals[local.index() - 1] = value;\n     }\n }\n "}, {"sha": "8776d297495fb3814785593f8853fb8750836062", "filename": "src/lvalue.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "patch": "@@ -55,7 +55,7 @@ pub struct GlobalId<'tcx> {\n \n #[derive(Copy, Clone, Debug)]\n pub struct Global<'tcx> {\n-    pub(super) data: Option<Value>,\n+    pub(super) value: Value,\n     pub(super) mutable: bool,\n     pub(super) ty: Ty<'tcx>,\n }\n@@ -98,7 +98,7 @@ impl<'tcx> Lvalue<'tcx> {\n impl<'tcx> Global<'tcx> {\n     pub(super) fn uninitialized(ty: Ty<'tcx>) -> Self {\n         Global {\n-            data: None,\n+            value: Value::ByVal(PrimVal::Undef),\n             mutable: true,\n             ty: ty,\n         }\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n         if let mir::Lvalue::Projection(ref proj) = *lvalue {\n             if let mir::Lvalue::Local(index) = proj.base {\n-                if let Some(Value::ByValPair(a, b)) = self.frame().get_local(index) {\n+                if let Value::ByValPair(a, b) = self.frame().get_local(index) {\n                     if let mir::ProjectionElem::Field(ref field, _) = proj.elem {\n                         let val = [a, b][field.index()];\n                         return Ok(Value::ByVal(val));\n@@ -127,16 +127,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 assert_eq!(extra, LvalueExtra::None);\n                 Value::ByRef(ptr)\n             }\n-            Lvalue::Local { frame, local } => {\n-                self.stack[frame].get_local(local).unwrap_or(Value::ByVal(PrimVal::Undef))\n-            }\n-            Lvalue::Global(cid) => {\n-                self.globals\n-                    .get(&cid)\n-                    .expect(\"global not cached\")\n-                    .data\n-                    .unwrap_or(Value::ByVal(PrimVal::Undef))\n-            }\n+            Lvalue::Local { frame, local } => self.stack[frame].get_local(local),\n+            Lvalue::Global(cid) => self.globals.get(&cid).expect(\"global not cached\").value,\n         }\n     }\n "}, {"sha": "2825f55eab4b516c737eb888183f6e9c5a4eca81", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "patch": "@@ -11,7 +11,7 @@ use rustc::ty::layout::{self, TargetDataLayout};\n use syntax::abi::Abi;\n \n use error::{EvalError, EvalResult};\n-use value::{PrimVal, PrimValKind};\n+use value::PrimVal;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Allocations and pointers\n@@ -584,17 +584,8 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         &mut self,\n         dest: Pointer,\n         val: PrimVal,\n-        kind: PrimValKind,\n+        size: u64,\n     ) -> EvalResult<'tcx, ()> {\n-        use value::PrimValKind::*;\n-        let size = match kind {\n-            I8 | U8 | Bool         => 1,\n-            I16 | U16              => 2,\n-            I32 | U32 | F32 | Char => 4,\n-            I64 | U64 | F64        => 8,\n-            Ptr | FnPtr            => self.pointer_size(),\n-        };\n-\n         match val {\n             PrimVal::Ptr(ptr) => {\n                 assert_eq!(size, self.pointer_size());\n@@ -609,7 +600,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n                     2 => 0xffff,\n                     4 => 0xffffffff,\n                     8 => 0xffffffffffffffff,\n-                    _ => bug!(\"unexpected PrimVal size\"),\n+                    _ => bug!(\"unexpected PrimVal::Bytes size\"),\n                 };\n                 self.write_uint(dest, bytes & mask, size)\n             }"}, {"sha": "193abd2138906085e12a79eaea4a219a5b0c7bac", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "patch": "@@ -227,26 +227,27 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"forget\" => {}\n \n             \"init\" => {\n-                let size = self.type_size(dest_ty)?.expect(\"cannot zero unsized value\");;\n-                let init = |this: &mut Self, val: Option<Value>| {\n+                let size = self.type_size(dest_ty)?.expect(\"cannot zero unsized value\");\n+                let init = |this: &mut Self, val: Value| {\n                     let zero_val = match val {\n-                        Some(Value::ByRef(ptr)) => {\n+                        Value::ByRef(ptr) => {\n                             this.memory.write_repeat(ptr, 0, size)?;\n                             Value::ByRef(ptr)\n                         },\n-                        None => match this.ty_to_primval_kind(dest_ty) {\n+                        // TODO(solson): Revisit this, it's fishy to check for Undef here.\n+                        Value::ByVal(PrimVal::Undef) => match this.ty_to_primval_kind(dest_ty) {\n                             Ok(_) => Value::ByVal(PrimVal::Bytes(0)),\n                             Err(_) => {\n                                 let ptr = this.alloc_ptr_with_substs(dest_ty, substs)?;\n                                 this.memory.write_repeat(ptr, 0, size)?;\n                                 Value::ByRef(ptr)\n                             }\n                         },\n-                        Some(Value::ByVal(_)) => Value::ByVal(PrimVal::Bytes(0)),\n-                        Some(Value::ByValPair(..)) =>\n+                        Value::ByVal(_) => Value::ByVal(PrimVal::Bytes(0)),\n+                        Value::ByValPair(..) =>\n                             Value::ByValPair(PrimVal::Bytes(0), PrimVal::Bytes(0)),\n                     };\n-                    Ok(Some(zero_val))\n+                    Ok(zero_val)\n                 };\n                 match dest {\n                     Lvalue::Local { frame, local } => self.modify_local(frame, local, init)?,\n@@ -371,19 +372,19 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"uninit\" => {\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes();\n-                let uninit = |this: &mut Self, val: Option<Value>| {\n+                let uninit = |this: &mut Self, val: Value| {\n                     match val {\n-                        Some(Value::ByRef(ptr)) => {\n+                        Value::ByRef(ptr) => {\n                             this.memory.mark_definedness(ptr, size, false)?;\n-                            Ok(Some(Value::ByRef(ptr)))\n+                            Ok(Value::ByRef(ptr))\n                         },\n-                        None => Ok(None),\n-                        Some(_) => Ok(None),\n+                        _ => Ok(Value::ByVal(PrimVal::Undef)),\n                     }\n                 };\n                 match dest {\n                     Lvalue::Local { frame, local } => self.modify_local(frame, local, uninit)?,\n-                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.mark_definedness(ptr, size, false)?,\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } =>\n+                        self.memory.mark_definedness(ptr, size, false)?,\n                     Lvalue::Ptr { .. } => bug!(\"uninit intrinsic tried to write to fat ptr target\"),\n                     Lvalue::Global(cid) => self.modify_global(cid, uninit)?,\n                 }"}, {"sha": "d74458a87cda8d41d9a2ae744526cd3173801073", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=b233ada529fc6c7f5b99c8b2007a7e3c1ec75c8a", "patch": "@@ -515,8 +515,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             Value::ByRef(ptr) => ptr,\n                             Value::ByVal(primval) => {\n                                 let ptr = self.alloc_ptr(args[0].1)?;\n-                                let kind = self.ty_to_primval_kind(args[0].1)?;\n-                                self.memory.write_primval(ptr, primval, kind)?;\n+                                let size = self.type_size(args[0].1)?.expect(\"closures are sized\");\n+                                self.memory.write_primval(ptr, primval, size)?;\n                                 temporaries.push(ptr);\n                                 ptr\n                             },"}]}