{"sha": "6651c1b9b2a1b3e995565467218ff7eca7479c5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTFjMWI5YjJhMWIzZTk5NTU2NTQ2NzIxOGZmN2VjYTc0NzljNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T18:22:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T18:22:37Z"}, "message": "Auto merge of #5470 - flip1995:rollup-cvkuiza, r=flip1995\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #5226 (Add lint for explicit deref and deref_mut method calls)\n - #5248 (Add lint on large non scalar const)\n - #5430 (Disallow bit-shifting in integer_arithmetic)\n - #5466 (large_enum_variant: Report sizes of variants)\n - #5468 (Zero single char names)\n\nFailed merges:\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "fe3273564dbc148d29144027124abdd128b97001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3273564dbc148d29144027124abdd128b97001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6651c1b9b2a1b3e995565467218ff7eca7479c5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6651c1b9b2a1b3e995565467218ff7eca7479c5e", "html_url": "https://github.com/rust-lang/rust/commit/6651c1b9b2a1b3e995565467218ff7eca7479c5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6651c1b9b2a1b3e995565467218ff7eca7479c5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9a4c8e630f03889160e0eafa9c546f9cb71921a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a4c8e630f03889160e0eafa9c546f9cb71921a", "html_url": "https://github.com/rust-lang/rust/commit/a9a4c8e630f03889160e0eafa9c546f9cb71921a"}, {"sha": "19183a6af530d50ac6a6670cb9a1dae81db24f27", "url": "https://api.github.com/repos/rust-lang/rust/commits/19183a6af530d50ac6a6670cb9a1dae81db24f27", "html_url": "https://github.com/rust-lang/rust/commit/19183a6af530d50ac6a6670cb9a1dae81db24f27"}], "stats": {"total": 770, "additions": 731, "deletions": 39}, "files": [{"sha": "65eab69667f29bc248ea6f9b177e5cd44601c86b", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -1256,6 +1256,7 @@ Released 2018-09-13\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n+[`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n [`explicit_into_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n [`explicit_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\n [`explicit_write`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write\n@@ -1319,6 +1320,7 @@ Released 2018-09-13\n [`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n [`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n [`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n+[`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n [`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n [`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n [`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays"}, {"sha": "6cbe10a5352d1d1cf3b91caccfd3c59f8408c2da", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -6,11 +6,17 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for plain integer arithmetic.\n+    /// **What it does:** Checks for integer arithmetic operations which could overflow or panic.\n     ///\n-    /// **Why is this bad?** This is only checked against overflow in debug builds.\n-    /// In some applications one wants explicitly checked, wrapping or saturating\n-    /// arithmetic.\n+    /// Specifically, checks for any operators (`+`, `-`, `*`, `<<`, etc) which are capable\n+    /// of overflowing according to the [Rust\n+    /// Reference](https://doc.rust-lang.org/reference/expressions/operator-expr.html#overflow),\n+    /// or which can panic (`/`, `%`). No bounds analysis or sophisticated reasoning is\n+    /// attempted.\n+    ///\n+    /// **Why is this bad?** Integer overflow will trigger a panic in debug builds or will wrap in\n+    /// release mode. Division by zero will cause a panic in either mode. In some applications one\n+    /// wants explicitly checked, wrapping or saturating arithmetic.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -21,7 +27,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INTEGER_ARITHMETIC,\n     restriction,\n-    \"any integer arithmetic statement\"\n+    \"any integer arithmetic expression which could overflow or panic\"\n }\n \n declare_clippy_lint! {\n@@ -71,8 +77,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Arithmetic {\n                     | hir::BinOpKind::BitAnd\n                     | hir::BinOpKind::BitOr\n                     | hir::BinOpKind::BitXor\n-                    | hir::BinOpKind::Shl\n-                    | hir::BinOpKind::Shr\n                     | hir::BinOpKind::Eq\n                     | hir::BinOpKind::Lt\n                     | hir::BinOpKind::Le"}, {"sha": "68ec07e2bcb0f58f874bdbce221741d1559c7c54", "filename": "clippy_lints/src/dereference.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,113 @@\n+use crate::utils::{get_parent_expr, implements_trait, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX, PREC_PREFIX};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n+    ///\n+    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// when not part of a method chain.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// use std::ops::Deref;\n+    /// let a: &mut String = &mut String::from(\"foo\");\n+    /// let b: &str = a.deref();\n+    /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let a: &mut String = &mut String::from(\"foo\");\n+    /// let b = &*a;\n+    /// ```\n+    ///\n+    /// This lint excludes\n+    /// ```rust,ignore\n+    /// let _ = d.unwrap().deref();\n+    /// ```\n+    pub EXPLICIT_DEREF_METHODS,\n+    pedantic,\n+    \"Explicit use of deref or deref_mut method while not in a method chain.\"\n+}\n+\n+declare_lint_pass!(Dereferencing => [\n+    EXPLICIT_DEREF_METHODS\n+]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n+        if_chain! {\n+            if !expr.span.from_expansion();\n+            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n+            if args.len() == 1;\n+\n+            then {\n+                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n+                    // Check if we have the whole call chain here\n+                    if let ExprKind::MethodCall(..) = parent_expr.kind {\n+                        return;\n+                    }\n+                    // Check for Expr that we don't want to be linted\n+                    let precedence = parent_expr.precedence();\n+                    match precedence {\n+                        // Lint a Call is ok though\n+                        ExprPrecedence::Call | ExprPrecedence::AddrOf => (),\n+                        _ => {\n+                            if precedence.order() >= PREC_PREFIX && precedence.order() <= PREC_POSTFIX {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                }\n+                let name = method_name.ident.as_str();\n+                lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n+            }\n+        }\n+    }\n+}\n+\n+fn lint_deref(cx: &LateContext<'_, '_>, method_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n+    match method_name {\n+        \"deref\" => {\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_trait()\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHODS,\n+                    expr_span,\n+                    \"explicit deref method call\",\n+                    \"try this\",\n+                    format!(\"&*{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        },\n+        \"deref_mut\" => {\n+            if cx\n+                .tcx\n+                .lang_items()\n+                .deref_mut_trait()\n+                .map_or(false, |id| implements_trait(cx, cx.tables.expr_ty(&call_expr), id, &[]))\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    EXPLICIT_DEREF_METHODS,\n+                    expr_span,\n+                    \"explicit deref_mut method call\",\n+                    \"try this\",\n+                    format!(\"&mut *{}\", &snippet(cx, var_span, \"..\")),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        },\n+        _ => (),\n+    }\n+}"}, {"sha": "4c3030cf2e7c443892539caa1ba1dc5a5b17c6b4", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,85 @@\n+use crate::rustc_target::abi::LayoutOf;\n+use crate::utils::span_lint_and_then;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::mir::interpret::ConstValue;\n+use rustc_middle::ty::{self, ConstKind};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{BytePos, Pos, Span};\n+use rustc_typeck::hir_ty_to_ty;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for large `const` arrays that should\n+    /// be defined as `static` instead.\n+    ///\n+    /// **Why is this bad?** Performance: const variables are inlined upon use.\n+    /// Static items result in only one instance and has a fixed location in memory.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// // Bad\n+    /// pub const a = [0u32; 1_000_000];\n+    ///\n+    /// // Good\n+    /// pub static a = [0u32; 1_000_000];\n+    /// ```\n+    pub LARGE_CONST_ARRAYS,\n+    perf,\n+    \"large non-scalar const array may cause performance overhead\"\n+}\n+\n+pub struct LargeConstArrays {\n+    maximum_allowed_size: u64,\n+}\n+\n+impl LargeConstArrays {\n+    #[must_use]\n+    pub fn new(maximum_allowed_size: u64) -> Self {\n+        Self { maximum_allowed_size }\n+    }\n+}\n+\n+impl_lint_pass!(LargeConstArrays => [LARGE_CONST_ARRAYS]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeConstArrays {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item<'_>) {\n+        if_chain! {\n+            if !item.span.from_expansion();\n+            if let ItemKind::Const(hir_ty, _) = &item.kind;\n+            let ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+            if let ty::Array(element_type, cst) = ty.kind;\n+            if let ConstKind::Value(val) = cst.val;\n+            if let ConstValue::Scalar(element_count) = val;\n+            if let Ok(element_count) = element_count.to_machine_usize(&cx.tcx);\n+            if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n+            if self.maximum_allowed_size < element_count * element_size;\n+\n+            then {\n+                let hi_pos = item.ident.span.lo() - BytePos::from_usize(1);\n+                let sugg_span = Span::new(\n+                    hi_pos - BytePos::from_usize(\"const\".len()),\n+                    hi_pos,\n+                    item.span.ctxt(),\n+                );\n+                span_lint_and_then(\n+                    cx,\n+                    LARGE_CONST_ARRAYS,\n+                    item.span,\n+                    \"large array defined as const\",\n+                    |db| {\n+                        db.span_suggestion(\n+                            sugg_span,\n+                            \"make this a static item\",\n+                            \"static\".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "7ac83739be67bd6bb9286db8c705d4a7d0fec3ba", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -21,11 +21,19 @@ declare_clippy_lint! {\n     /// measure the change this lint suggests.\n     ///\n     /// **Example:**\n+    ///\n     /// ```rust\n+    /// // Bad\n     /// enum Test {\n     ///     A(i32),\n     ///     B([i32; 8000]),\n     /// }\n+    ///\n+    /// // Possibly better\n+    /// enum Test2 {\n+    ///     A(i32),\n+    ///     B(Box<[i32; 8000]>),\n+    /// }\n     /// ```\n     pub LARGE_ENUM_VARIANT,\n     perf,\n@@ -84,12 +92,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                 if difference > self.maximum_size_difference_allowed {\n                     let (i, variant) = largest.1;\n \n+                    let help_text = \"consider boxing the large fields to reduce the total size of the enum\";\n                     span_lint_and_then(\n                         cx,\n                         LARGE_ENUM_VARIANT,\n                         def.variants[i].span,\n                         \"large size difference between variants\",\n                         |db| {\n+                            db.span_label(\n+                                def.variants[(largest.1).0].span,\n+                                &format!(\"this variant is {} bytes\", largest.0),\n+                            );\n+                            db.span_note(\n+                                def.variants[(second.1).0].span,\n+                                &format!(\"and the second-largest variant is {} bytes:\", second.0),\n+                            );\n                             if variant.fields.len() == 1 {\n                                 let span = match def.variants[i].data {\n                                     VariantData::Struct(ref fields, ..) | VariantData::Tuple(ref fields, ..) => {\n@@ -100,18 +117,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n                                 if let Some(snip) = snippet_opt(cx, span) {\n                                     db.span_suggestion(\n                                         span,\n-                                        \"consider boxing the large fields to reduce the total size of the \\\n-                                         enum\",\n+                                        help_text,\n                                         format!(\"Box<{}>\", snip),\n                                         Applicability::MaybeIncorrect,\n                                     );\n                                     return;\n                                 }\n                             }\n-                            db.span_help(\n-                                def.variants[i].span,\n-                                \"consider boxing the large fields to reduce the total size of the enum\",\n-                            );\n+                            db.span_help(def.variants[i].span, help_text);\n                         },\n                     );\n                 }"}, {"sha": "1158e70b7a3f68235524bbe6cabca8bf4375cce4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -191,6 +191,7 @@ mod copies;\n mod copy_iterator;\n mod dbg_macro;\n mod default_trait_access;\n+mod dereference;\n mod derive;\n mod doc;\n mod double_comparison;\n@@ -231,6 +232,7 @@ mod inline_fn_without_body;\n mod int_plus_one;\n mod integer_division;\n mod items_after_statements;\n+mod large_const_arrays;\n mod large_enum_variant;\n mod large_stack_arrays;\n mod len_zero;\n@@ -513,6 +515,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n+        &dereference::EXPLICIT_DEREF_METHODS,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n@@ -580,6 +583,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &int_plus_one::INT_PLUS_ONE,\n         &integer_division::INTEGER_DIVISION,\n         &items_after_statements::ITEMS_AFTER_STATEMENTS,\n+        &large_const_arrays::LARGE_CONST_ARRAYS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n@@ -1024,6 +1028,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box to_digit_is_some::ToDigitIsSome);\n     let array_size_threshold = conf.array_size_threshold;\n     store.register_late_pass(move || box large_stack_arrays::LargeStackArrays::new(array_size_threshold));\n+    store.register_late_pass(move || box large_const_arrays::LargeConstArrays::new(array_size_threshold));\n     store.register_late_pass(move || box floating_point_arithmetic::FloatingPointArithmetic);\n     store.register_early_pass(|| box as_conversions::AsConversions);\n     store.register_early_pass(|| box utils::internal_lints::ProduceIce);\n@@ -1039,6 +1044,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n+    store.register_late_pass(|| box dereference::Dereferencing);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1089,6 +1095,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&copies::SAME_FUNCTIONS_IN_IF_CONDITION),\n         LintId::of(&copy_iterator::COPY_ITERATOR),\n         LintId::of(&default_trait_access::DEFAULT_TRAIT_ACCESS),\n+        LintId::of(&dereference::EXPLICIT_DEREF_METHODS),\n         LintId::of(&derive::EXPL_IMPL_CLONE_ON_COPY),\n         LintId::of(&doc::DOC_MARKDOWN),\n         LintId::of(&doc::MISSING_ERRORS_DOC),\n@@ -1221,6 +1228,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING_SHADOW_DISPLAY),\n         LintId::of(&inline_fn_without_body::INLINE_FN_WITHOUT_BODY),\n         LintId::of(&int_plus_one::INT_PLUS_ONE),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n@@ -1652,6 +1660,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&bytecount::NAIVE_BYTECOUNT),\n         LintId::of(&entry::MAP_ENTRY),\n         LintId::of(&escape::BOXED_LOCAL),\n+        LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::NEEDLESS_COLLECT),"}, {"sha": "45809b359866168f5c5cde87a15d1c4cc749b846", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx> SimilarNamesLocalVisitor<'a, 'tcx> {\n     fn check_single_char_names(&self) {\n         let num_single_char_names = self.single_char_names.iter().flatten().count();\n         let threshold = self.lint.single_char_binding_names_threshold;\n-        if num_single_char_names as u64 >= threshold {\n+        if num_single_char_names as u64 > threshold {\n             let span = self\n                 .single_char_names\n                 .iter()"}, {"sha": "4b81ff33495c7c089c0ad55ffc96f5336958aa8a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -135,7 +135,7 @@ define_Conf! {\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have\n     (type_complexity_threshold, \"type_complexity_threshold\": u64, 250),\n     /// Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have\n-    (single_char_binding_names_threshold, \"single_char_binding_names_threshold\": u64, 5),\n+    (single_char_binding_names_threshold, \"single_char_binding_names_threshold\": u64, 4),\n     /// Lint: BOXED_LOCAL. The maximum size of objects (in bytes) that will be linted. Larger objects are ok on the heap\n     (too_large_for_stack, \"too_large_for_stack\": u64, 200),\n     /// Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger\n@@ -150,7 +150,7 @@ define_Conf! {\n     (trivial_copy_size_limit, \"trivial_copy_size_limit\": Option<u64>, None),\n     /// Lint: TOO_MANY_LINES. The maximum number of lines a function or method can have\n     (too_many_lines_threshold, \"too_many_lines_threshold\": u64, 100),\n-    /// Lint: LARGE_STACK_ARRAYS. The maximum allowed size for arrays on the stack\n+    /// Lint: LARGE_STACK_ARRAYS, LARGE_CONST_ARRAYS. The maximum allowed size for arrays on the stack\n     (array_size_threshold, \"array_size_threshold\": u64, 512_000),\n     /// Lint: VEC_BOX. The size of the boxed type in bytes, where boxing in a `Vec` is allowed\n     (vec_box_size_threshold, \"vec_box_size_threshold\": u64, 4096),"}, {"sha": "d4602a3ad8e6a82d71fa4a9e273511c1dcbbe82f", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -528,6 +528,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"explicit_deref_methods\",\n+        group: \"pedantic\",\n+        desc: \"Explicit use of deref or deref_mut method while not in a method chain.\",\n+        deprecation: None,\n+        module: \"dereference\",\n+    },\n     Lint {\n         name: \"explicit_into_iter_loop\",\n         group: \"pedantic\",\n@@ -846,7 +853,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"integer_arithmetic\",\n         group: \"restriction\",\n-        desc: \"any integer arithmetic statement\",\n+        desc: \"any integer arithmetic expression which could overflow or panic\",\n         deprecation: None,\n         module: \"arithmetic\",\n     },\n@@ -941,6 +948,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"non_expressive_names\",\n     },\n+    Lint {\n+        name: \"large_const_arrays\",\n+        group: \"perf\",\n+        desc: \"large non-scalar const array may cause performance overhead\",\n+        deprecation: None,\n+        module: \"large_const_arrays\",\n+    },\n     Lint {\n         name: \"large_digit_groups\",\n         group: \"pedantic\","}, {"sha": "42a1067b95edd2a3d4590c72c12bfb4a0dbc23b1", "filename": "tests/ui-toml/zero_single_char_names/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui-toml%2Fzero_single_char_names%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui-toml%2Fzero_single_char_names%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fzero_single_char_names%2Fclippy.toml?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1 @@\n+single-char-binding-names-threshold = 0"}, {"sha": "22aaa242b9b9d94641798dac2ccaf349b1d9d8ca", "filename": "tests/ui-toml/zero_single_char_names/zero_single_char_names.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui-toml%2Fzero_single_char_names%2Fzero_single_char_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui-toml%2Fzero_single_char_names%2Fzero_single_char_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fzero_single_char_names%2Fzero_single_char_names.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,3 @@\n+#![warn(clippy::many_single_char_names)]\n+\n+fn main() {}"}, {"sha": "459ca91b93b9e5b7dc4f67d7481e8a32ad8a7884", "filename": "tests/ui/dereference.fixed", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.fixed?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_methods)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn concat(deref_str: &str) -> String {\n+    format!(\"{}bar\", deref_str)\n+}\n+\n+fn just_return(deref_str: &str) -> &str {\n+    deref_str\n+}\n+\n+struct CustomVec(Vec<u8>);\n+impl Deref for CustomVec {\n+    type Target = Vec<u8>;\n+\n+    fn deref(&self) -> &Vec<u8> {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", &*a, &*a);\n+\n+    println!(\"{}\", &*a);\n+\n+    #[allow(clippy::match_single_binding)]\n+    match &*a {\n+        _ => (),\n+    }\n+\n+    let b: String = concat(&*a);\n+\n+    let b = &*just_return(a);\n+\n+    let b: String = concat(&*just_return(a));\n+\n+    let b: &str = &*a.deref();\n+\n+    let opt_a = Some(a.clone());\n+    let b = &*opt_a.unwrap();\n+\n+    // following should not require linting\n+\n+    let cv = CustomVec(vec![0, 42]);\n+    let c = cv.deref()[0];\n+\n+    let b: &str = &*a.deref();\n+\n+    let b: String = a.deref().clone();\n+\n+    let b: usize = a.deref_mut().len();\n+\n+    let b: &usize = &a.deref().len();\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n+    }\n+    let b: &str = expr_deref!(a);\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n+}"}, {"sha": "8dc5272e67fa529fb5afc0bc8a6d1db62a51bdc1", "filename": "tests/ui/dereference.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,93 @@\n+// run-rustfix\n+\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_methods)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+fn concat(deref_str: &str) -> String {\n+    format!(\"{}bar\", deref_str)\n+}\n+\n+fn just_return(deref_str: &str) -> &str {\n+    deref_str\n+}\n+\n+struct CustomVec(Vec<u8>);\n+impl Deref for CustomVec {\n+    type Target = Vec<u8>;\n+\n+    fn deref(&self) -> &Vec<u8> {\n+        &self.0\n+    }\n+}\n+\n+fn main() {\n+    let a: &mut String = &mut String::from(\"foo\");\n+\n+    // these should require linting\n+\n+    let b: &str = a.deref();\n+\n+    let b: &mut str = a.deref_mut();\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+\n+    println!(\"{}\", a.deref());\n+\n+    #[allow(clippy::match_single_binding)]\n+    match a.deref() {\n+        _ => (),\n+    }\n+\n+    let b: String = concat(a.deref());\n+\n+    let b = just_return(a).deref();\n+\n+    let b: String = concat(just_return(a).deref());\n+\n+    let b: &str = a.deref().deref();\n+\n+    let opt_a = Some(a.clone());\n+    let b = opt_a.unwrap().deref();\n+\n+    // following should not require linting\n+\n+    let cv = CustomVec(vec![0, 42]);\n+    let c = cv.deref()[0];\n+\n+    let b: &str = &*a.deref();\n+\n+    let b: String = a.deref().clone();\n+\n+    let b: usize = a.deref_mut().len();\n+\n+    let b: &usize = &a.deref().len();\n+\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n+\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n+    }\n+    let b: &str = expr_deref!(a);\n+\n+    // The struct does not implement Deref trait\n+    #[derive(Copy, Clone)]\n+    struct NoLint(u32);\n+    impl NoLint {\n+        pub fn deref(self) -> u32 {\n+            self.0\n+        }\n+        pub fn deref_mut(self) -> u32 {\n+            self.0\n+        }\n+    }\n+    let no_lint = NoLint(42);\n+    let b = no_lint.deref();\n+    let b = no_lint.deref_mut();\n+}"}, {"sha": "d26b462a4336236b79472bc5dd8b001f99c08473", "filename": "tests/ui/dereference.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,70 @@\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:30:19\n+   |\n+LL |     let b: &str = a.deref();\n+   |                   ^^^^^^^^^ help: try this: `&*a`\n+   |\n+   = note: `-D clippy::explicit-deref-methods` implied by `-D warnings`\n+\n+error: explicit deref_mut method call\n+  --> $DIR/dereference.rs:32:23\n+   |\n+LL |     let b: &mut str = a.deref_mut();\n+   |                       ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:35:39\n+   |\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                       ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:35:50\n+   |\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                                  ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:37:20\n+   |\n+LL |     println!(\"{}\", a.deref());\n+   |                    ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:40:11\n+   |\n+LL |     match a.deref() {\n+   |           ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:44:28\n+   |\n+LL |     let b: String = concat(a.deref());\n+   |                            ^^^^^^^^^ help: try this: `&*a`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:46:13\n+   |\n+LL |     let b = just_return(a).deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:48:28\n+   |\n+LL |     let b: String = concat(just_return(a).deref());\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*just_return(a)`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:50:19\n+   |\n+LL |     let b: &str = a.deref().deref();\n+   |                   ^^^^^^^^^^^^^^^^^ help: try this: `&*a.deref()`\n+\n+error: explicit deref method call\n+  --> $DIR/dereference.rs:53:13\n+   |\n+LL |     let b = opt_a.unwrap().deref();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&*opt_a.unwrap()`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "7b1b64f390a5aa25a5f4039761dab8b8dc832e54", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -17,6 +17,8 @@ fn main() {\n     i / 2; // no error, this is part of the expression in the preceding line\n     i - 2 + 2 - i;\n     -i;\n+    i >> 1;\n+    i << 1;\n \n     // no error, overflows are checked by `overflowing_literals`\n     -1;\n@@ -25,18 +27,16 @@ fn main() {\n     i & 1; // no wrapping\n     i | 1;\n     i ^ 1;\n-    i >> 1;\n-    i << 1;\n \n     i += 1;\n     i -= 1;\n     i *= 2;\n     i /= 2;\n     i %= 2;\n-\n-    // no errors\n     i <<= 3;\n     i >>= 2;\n+\n+    // no errors\n     i |= 1;\n     i &= 1;\n     i ^= i;\n@@ -72,8 +72,6 @@ fn main() {\n             1 + 1\n         };\n     }\n-\n-\n }\n \n // warn on references as well! (#5328)"}, {"sha": "83e8a9cde3ff11873f6cbb715af32565f9461ed5", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -31,6 +31,18 @@ error: integer arithmetic detected\n LL |     -i;\n    |     ^^\n \n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:20:5\n+   |\n+LL |     i >> 1;\n+   |     ^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:21:5\n+   |\n+LL |     i << 1;\n+   |     ^^^^^^\n+\n error: integer arithmetic detected\n   --> $DIR/integer_arithmetic.rs:31:5\n    |\n@@ -62,46 +74,58 @@ LL |     i %= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:81:5\n+  --> $DIR/integer_arithmetic.rs:36:5\n+   |\n+LL |     i <<= 3;\n+   |     ^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:37:5\n+   |\n+LL |     i >>= 2;\n+   |     ^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/integer_arithmetic.rs:79:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:82:5\n+  --> $DIR/integer_arithmetic.rs:80:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:83:5\n+  --> $DIR/integer_arithmetic.rs:81:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:88:5\n+  --> $DIR/integer_arithmetic.rs:86:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:92:5\n+  --> $DIR/integer_arithmetic.rs:90:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:96:5\n+  --> $DIR/integer_arithmetic.rs:94:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:100:5\n+  --> $DIR/integer_arithmetic.rs:98:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 21 previous errors\n "}, {"sha": "c5af07c8a1728bc671c4837ccb7d7bec70150ae5", "filename": "tests/ui/large_const_arrays.fixed", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.fixed?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) static FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub static FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+static FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub static BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    static BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub static BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    static BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub static BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    static BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "a160b9f8ad5b0249adeb8099f4dbcfa40c8abe51", "filename": "tests/ui/large_const_arrays.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.rs?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,37 @@\n+// run-rustfix\n+\n+#![warn(clippy::large_const_arrays)]\n+#![allow(dead_code)]\n+\n+#[derive(Clone, Copy)]\n+pub struct S {\n+    pub data: [u64; 32],\n+}\n+\n+// Should lint\n+pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+\n+// Good\n+pub(crate) const G_FOO_PUB_CRATE: [u32; 1_000] = [0u32; 1_000];\n+pub const G_FOO_PUB: [u32; 1_000] = [0u32; 1_000];\n+const G_FOO: [u32; 1_000] = [0u32; 1_000];\n+\n+fn main() {\n+    // Should lint\n+    pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+    const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+    pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+    pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+    const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+\n+    // Good\n+    pub const G_BAR_PUB: [u32; 1_000] = [0u32; 1_000];\n+    const G_BAR: [u32; 1_000] = [0u32; 1_000];\n+    pub const G_BAR_STRUCT_PUB: [S; 500] = [S { data: [0; 32] }; 500];\n+    const G_BAR_STRUCT: [S; 500] = [S { data: [0; 32] }; 500];\n+    pub const G_BAR_S_PUB: [Option<&str>; 200] = [Some(\"str\"); 200];\n+    const G_BAR_S: [Option<&str>; 200] = [Some(\"str\"); 200];\n+}"}, {"sha": "3fb0acbca67de8225e1df60c6ba873cedd6fdc82", "filename": "tests/ui/large_const_arrays.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_const_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_const_arrays.stderr?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -0,0 +1,76 @@\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:12:1\n+   |\n+LL | pub(crate) const FOO_PUB_CRATE: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |            |\n+   |            help: make this a static item: `static`\n+   |\n+   = note: `-D clippy::large-const-arrays` implied by `-D warnings`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:13:1\n+   |\n+LL | pub const FOO_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:14:1\n+   |\n+LL | const FOO: [u32; 1_000_000] = [0u32; 1_000_000];\n+   | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | |\n+   | help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:23:5\n+   |\n+LL |     pub const BAR_PUB: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:24:5\n+   |\n+LL |     const BAR: [u32; 1_000_000] = [0u32; 1_000_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:25:5\n+   |\n+LL |     pub const BAR_STRUCT_PUB: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:26:5\n+   |\n+LL |     const BAR_STRUCT: [S; 5_000] = [S { data: [0; 32] }; 5_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:27:5\n+   |\n+LL |     pub const BAR_S_PUB: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     ^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: make this a static item: `static`\n+\n+error: large array defined as const\n+  --> $DIR/large_const_arrays.rs:28:5\n+   |\n+LL |     const BAR_S: [Option<&str>; 200_000] = [Some(\"str\"); 200_000];\n+   |     -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: make this a static item: `static`\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "8ce641a81f29746289c9b750b11cad95ba133cf2", "filename": "tests/ui/large_enum_variant.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -2,9 +2,14 @@ error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:7:5\n    |\n LL |     B([i32; 8000]),\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ this variant is 32000 bytes\n    |\n    = note: `-D clippy::large-enum-variant` implied by `-D warnings`\n+note: and the second-largest variant is 4 bytes:\n+  --> $DIR/large_enum_variant.rs:6:5\n+   |\n+LL |     A(i32),\n+   |     ^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n    |\n LL |     B(Box<[i32; 8000]>),\n@@ -14,8 +19,13 @@ error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:31:5\n    |\n LL |     ContainingLargeEnum(LargeEnum),\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32004 bytes\n+   |\n+note: and the second-largest variant is 8 bytes:\n+  --> $DIR/large_enum_variant.rs:30:5\n    |\n+LL |     VariantOk(i32, u32),\n+   |     ^^^^^^^^^^^^^^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n    |\n LL |     ContainingLargeEnum(Box<LargeEnum>),\n@@ -25,8 +35,13 @@ error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:41:5\n    |\n LL |     StructLikeLarge { x: [i32; 8000], y: i32 },\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32004 bytes\n    |\n+note: and the second-largest variant is 8 bytes:\n+  --> $DIR/large_enum_variant.rs:40:5\n+   |\n+LL |     VariantOk(i32, u32),\n+   |     ^^^^^^^^^^^^^^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n   --> $DIR/large_enum_variant.rs:41:5\n    |\n@@ -37,8 +52,13 @@ error: large size difference between variants\n   --> $DIR/large_enum_variant.rs:46:5\n    |\n LL |     StructLikeLarge2 { x: [i32; 8000] },\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this variant is 32000 bytes\n+   |\n+note: and the second-largest variant is 8 bytes:\n+  --> $DIR/large_enum_variant.rs:45:5\n    |\n+LL |     VariantOk(i32, u32),\n+   |     ^^^^^^^^^^^^^^^^^^^\n help: consider boxing the large fields to reduce the total size of the enum\n    |\n LL |     StructLikeLarge2 { x: Box<[i32; 8000]> },"}, {"sha": "d0d9beb9b2d9fa686d907f650dfb55343d62feb0", "filename": "util/lintlib.py", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6651c1b9b2a1b3e995565467218ff7eca7479c5e/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/6651c1b9b2a1b3e995565467218ff7eca7479c5e/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=6651c1b9b2a1b3e995565467218ff7eca7479c5e", "patch": "@@ -14,7 +14,7 @@\n group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n conf_re = re.compile(r'''define_Conf! {\\n([^}]*)\\n}''', re.MULTILINE)\n confvar_re = re.compile(\n-    r'''/// Lint: (\\w+)\\. (.*)\\n\\s*\\([^,]+,\\s+\"([^\"]+)\":\\s+([^,]+),\\s+([^\\.\\)]+).*\\),''', re.MULTILINE)\n+    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\([^,]+,\\s+\"([^\"]+)\":\\s+([^,]+),\\s+([^\\.\\)]+).*\\),''', re.MULTILINE)\n comment_re = re.compile(r'''\\s*/// ?(.*)''')\n \n lint_levels = {\n@@ -93,9 +93,9 @@ def parse_configs(path):\n     match = re.search(conf_re, contents)\n     confvars = re.findall(confvar_re, match.group(1))\n \n-    for (lint, doc, name, ty, default) in confvars:\n-        configs[lint.lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n-\n+    for (lints, doc, name, ty, default) in confvars:\n+        for lint in lints.split(','):\n+            configs[lint.strip().lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n     return configs\n \n "}]}