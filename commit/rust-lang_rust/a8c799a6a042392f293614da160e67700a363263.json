{"sha": "a8c799a6a042392f293614da160e67700a363263", "node_id": "C_kwDOAAsO6NoAKGE4Yzc5OWE2YTA0MjM5MmYyOTM2MTRkYTE2MGU2NzcwMGEzNjMyNjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-12T15:09:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-12T15:09:09Z"}, "message": "Rollup merge of #100022 - joboet:faster_threadid, r=joshtriplett\n\nOptimize thread ID generation\n\nBy using atomics where available, thread IDs can be generated without locking while still enforcing uniqueness.", "tree": {"sha": "7108b40da1ae70ba383bf330357648fed38ae3c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7108b40da1ae70ba383bf330357648fed38ae3c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8c799a6a042392f293614da160e67700a363263", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9m0VCRBK7hj4Ov3rIwAA3twIAFRY6yQ91pZpb0qsmpVpCsXT\nVIacOP7Ie/MOlqbl7t+ZN5kTgPVuXyKbwcusUXxfg9QqS64dPRQaT9MRnAd1kFOF\neH6z4957w0tXcpYPnfUK9Zt1cJIGPW+bPff9FOfwMFp9OAko8b36g29OaOfZCo3x\n5NyHfC//GiN1qtx0+U2gn0oHwx4KhjSFTR6F4/FvZIt46R7XUuwFaPZvM/IDC52p\n//qo1miIzP7bY1Qspy+G7UhUP9VTkhbMzmJbkbEO6Z2nEQdiYiKnk8/F/JuTucmF\n1PO5yULTIZkKbsb8QOMUbRDFWyaz41wXu8j+eMboaemlLgCu8/RtAEgy70xtw3Q=\n=th5S\n-----END PGP SIGNATURE-----\n", "payload": "tree 7108b40da1ae70ba383bf330357648fed38ae3c3\nparent 569788e47ee3595c9c6f0e332844d982b3e991c2\nparent 3d21c371effa15fcf3562b5b722c80623dbd2c43\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660316949 +0530\ncommitter GitHub <noreply@github.com> 1660316949 +0530\n\nRollup merge of #100022 - joboet:faster_threadid, r=joshtriplett\n\nOptimize thread ID generation\n\nBy using atomics where available, thread IDs can be generated without locking while still enforcing uniqueness.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c799a6a042392f293614da160e67700a363263", "html_url": "https://github.com/rust-lang/rust/commit/a8c799a6a042392f293614da160e67700a363263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8c799a6a042392f293614da160e67700a363263/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569788e47ee3595c9c6f0e332844d982b3e991c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/569788e47ee3595c9c6f0e332844d982b3e991c2", "html_url": "https://github.com/rust-lang/rust/commit/569788e47ee3595c9c6f0e332844d982b3e991c2"}, {"sha": "3d21c371effa15fcf3562b5b722c80623dbd2c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d21c371effa15fcf3562b5b722c80623dbd2c43", "html_url": "https://github.com/rust-lang/rust/commit/3d21c371effa15fcf3562b5b722c80623dbd2c43"}], "stats": {"total": 59, "additions": 41, "deletions": 18}, "files": [{"sha": "479669647c12843c743b19ebabd9b6743e6919f2", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a8c799a6a042392f293614da160e67700a363263/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8c799a6a042392f293614da160e67700a363263/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=a8c799a6a042392f293614da160e67700a363263", "patch": "@@ -170,7 +170,6 @@ use crate::ptr::addr_of_mut;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys::thread as imp;\n-use crate::sys_common::mutex;\n use crate::sys_common::thread;\n use crate::sys_common::thread_info;\n use crate::sys_common::thread_parker::Parker;\n@@ -1033,24 +1032,48 @@ pub struct ThreadId(NonZeroU64);\n impl ThreadId {\n     // Generate a new unique thread ID.\n     fn new() -> ThreadId {\n-        // It is UB to attempt to acquire this mutex reentrantly!\n-        static GUARD: mutex::StaticMutex = mutex::StaticMutex::new();\n-        static mut COUNTER: u64 = 1;\n-\n-        unsafe {\n-            let guard = GUARD.lock();\n-\n-            // If we somehow use up all our bits, panic so that we're not\n-            // covering up subtle bugs of IDs being reused.\n-            if COUNTER == u64::MAX {\n-                drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n-                panic!(\"failed to generate unique thread ID: bitspace exhausted\");\n-            }\n-\n-            let id = COUNTER;\n-            COUNTER += 1;\n+        #[cold]\n+        fn exhausted() -> ! {\n+            panic!(\"failed to generate unique thread ID: bitspace exhausted\")\n+        }\n \n-            ThreadId(NonZeroU64::new(id).unwrap())\n+        cfg_if::cfg_if! {\n+            if #[cfg(target_has_atomic = \"64\")] {\n+                use crate::sync::atomic::{AtomicU64, Ordering::Relaxed};\n+\n+                static COUNTER: AtomicU64 = AtomicU64::new(0);\n+\n+                let mut last = COUNTER.load(Relaxed);\n+                loop {\n+                    let Some(id) = last.checked_add(1) else {\n+                        exhausted();\n+                    };\n+\n+                    match COUNTER.compare_exchange_weak(last, id, Relaxed, Relaxed) {\n+                        Ok(_) => return ThreadId(NonZeroU64::new(id).unwrap()),\n+                        Err(id) => last = id,\n+                    }\n+                }\n+            } else {\n+                use crate::sys_common::mutex::StaticMutex;\n+\n+                // It is UB to attempt to acquire this mutex reentrantly!\n+                static GUARD: StaticMutex = StaticMutex::new();\n+                static mut COUNTER: u64 = 0;\n+\n+                unsafe {\n+                    let guard = GUARD.lock();\n+\n+                    let Some(id) = COUNTER.checked_add(1) else {\n+                        drop(guard); // in case the panic handler ends up calling `ThreadId::new()`, avoid reentrant lock acquire.\n+                        exhausted();\n+                    };\n+\n+                    COUNTER = id;\n+                    drop(guard);\n+                    ThreadId(NonZeroU64::new(id).unwrap())\n+                }\n+            }\n         }\n     }\n "}]}