{"sha": "5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTFmOWZmZWQ5NmQ0MTZlYjg3N2RmZThkMDMxY2Q4Yzk0NzhjNmU=", "commit": {"author": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T05:18:51Z"}, "committer": {"name": "Ahmed Charles", "email": "acharles@outlook.com", "date": "2015-10-12T05:18:51Z"}, "message": "Run rustfmt on liballoc_jemalloc.", "tree": {"sha": "998f150cfdf4a548e751f31754d3ac8e2ed9b18c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998f150cfdf4a548e751f31754d3ac8e2ed9b18c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e", "html_url": "https://github.com/rust-lang/rust/commit/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e/comments", "author": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ahmedcharles", "id": 3112514, "node_id": "MDQ6VXNlcjMxMTI1MTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3112514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ahmedcharles", "html_url": "https://github.com/ahmedcharles", "followers_url": "https://api.github.com/users/ahmedcharles/followers", "following_url": "https://api.github.com/users/ahmedcharles/following{/other_user}", "gists_url": "https://api.github.com/users/ahmedcharles/gists{/gist_id}", "starred_url": "https://api.github.com/users/ahmedcharles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ahmedcharles/subscriptions", "organizations_url": "https://api.github.com/users/ahmedcharles/orgs", "repos_url": "https://api.github.com/users/ahmedcharles/repos", "events_url": "https://api.github.com/users/ahmedcharles/events{/privacy}", "received_events_url": "https://api.github.com/users/ahmedcharles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81b3b27cf533e50424f749d1c1db23e5d8db952f", "url": "https://api.github.com/repos/rust-lang/rust/commits/81b3b27cf533e50424f749d1c1db23e5d8db952f", "html_url": "https://github.com/rust-lang/rust/commit/81b3b27cf533e50424f749d1c1db23e5d8db952f"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "f46b12e80c56ada9cae738e5b6934bd2e4b4b85f", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=5ea1f9ffed96d416eb877dfe8d031cd8c9478c6e", "patch": "@@ -43,8 +43,7 @@ use libc::{c_int, c_void, size_t};\n extern {\n     fn je_mallocx(size: size_t, flags: c_int) -> *mut c_void;\n     fn je_rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t,\n-                  flags: c_int) -> size_t;\n+    fn je_xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n     fn je_sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n     fn je_nallocx(size: size_t, flags: c_int) -> size_t;\n }\n@@ -63,40 +62,52 @@ const MIN_ALIGN: usize = 8;\n const MIN_ALIGN: usize = 16;\n \n // MALLOCX_ALIGN(a) macro\n-fn mallocx_align(a: usize) -> c_int { a.trailing_zeros() as c_int }\n+fn mallocx_align(a: usize) -> c_int {\n+    a.trailing_zeros() as c_int\n+}\n \n fn align_to_flags(align: usize) -> c_int {\n-    if align <= MIN_ALIGN { 0 } else { mallocx_align(align) }\n+    if align <= MIN_ALIGN {\n+        0\n+    } else {\n+        mallocx_align(align)\n+    }\n }\n \n #[no_mangle]\n-pub extern fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n+pub extern \"C\" fn __rust_allocate(size: usize, align: usize) -> *mut u8 {\n     let flags = align_to_flags(align);\n     unsafe { je_mallocx(size as size_t, flags) as *mut u8 }\n }\n \n #[no_mangle]\n-pub extern fn __rust_reallocate(ptr: *mut u8, _old_size: usize, size: usize,\n-                                align: usize) -> *mut u8 {\n+pub extern \"C\" fn __rust_reallocate(ptr: *mut u8,\n+                                    _old_size: usize,\n+                                    size: usize,\n+                                    align: usize)\n+                                    -> *mut u8 {\n     let flags = align_to_flags(align);\n     unsafe { je_rallocx(ptr as *mut c_void, size as size_t, flags) as *mut u8 }\n }\n \n #[no_mangle]\n-pub extern fn __rust_reallocate_inplace(ptr: *mut u8, _old_size: usize,\n-                                        size: usize, align: usize) -> usize {\n+pub extern \"C\" fn __rust_reallocate_inplace(ptr: *mut u8,\n+                                            _old_size: usize,\n+                                            size: usize,\n+                                            align: usize)\n+                                            -> usize {\n     let flags = align_to_flags(align);\n     unsafe { je_xallocx(ptr as *mut c_void, size as size_t, 0, flags) as usize }\n }\n \n #[no_mangle]\n-pub extern fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n+pub extern \"C\" fn __rust_deallocate(ptr: *mut u8, old_size: usize, align: usize) {\n     let flags = align_to_flags(align);\n     unsafe { je_sdallocx(ptr as *mut c_void, old_size as size_t, flags) }\n }\n \n #[no_mangle]\n-pub extern fn __rust_usable_size(size: usize, align: usize) -> usize {\n+pub extern \"C\" fn __rust_usable_size(size: usize, align: usize) -> usize {\n     let flags = align_to_flags(align);\n     unsafe { je_nallocx(size as size_t, flags) as usize }\n }"}]}