{"sha": "e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOWJlZjgxMGE5NWM4MmZhNWRlMDg4NzJmY2NmZmRkNWUwZmUxZTc=", "commit": {"author": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-07-31T23:45:29Z"}, "committer": {"name": "Stuart Pernsteiner", "email": "spernsteiner@mozilla.com", "date": "2014-09-05T16:18:57Z"}, "message": "avoid duplicate translation of monomorphizations, drop glue, and visit glue\n\nUse a shared lookup table of previously-translated monomorphizations/glue\nfunctions to avoid translating those functions in every compilation unit where\nthey're used.  Instead, the function will be translated in whichever\ncompilation unit uses it first, and the remaining compilation units will link\nagainst that original definition.", "tree": {"sha": "d5ef7a6a59de6b99c1588b340fad5c3921e0efbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ef7a6a59de6b99c1588b340fad5c3921e0efbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "html_url": "https://github.com/rust-lang/rust/commit/e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/comments", "author": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spernsteiner", "id": 3031136, "node_id": "MDQ6VXNlcjMwMzExMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/3031136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spernsteiner", "html_url": "https://github.com/spernsteiner", "followers_url": "https://api.github.com/users/spernsteiner/followers", "following_url": "https://api.github.com/users/spernsteiner/following{/other_user}", "gists_url": "https://api.github.com/users/spernsteiner/gists{/gist_id}", "starred_url": "https://api.github.com/users/spernsteiner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spernsteiner/subscriptions", "organizations_url": "https://api.github.com/users/spernsteiner/orgs", "repos_url": "https://api.github.com/users/spernsteiner/repos", "events_url": "https://api.github.com/users/spernsteiner/events{/privacy}", "received_events_url": "https://api.github.com/users/spernsteiner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da9606247d5ddd0edebafaffd0367c541fbaee7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9606247d5ddd0edebafaffd0367c541fbaee7e", "html_url": "https://github.com/rust-lang/rust/commit/da9606247d5ddd0edebafaffd0367c541fbaee7e"}], "stats": {"total": 145, "additions": 114, "deletions": 31}, "files": [{"sha": "e85e61d829187318890049e49c5e97fb99e628c8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "patch": "@@ -2124,11 +2124,24 @@ impl<'a> Visitor<()> for TransItemVisitor<'a> {\n     }\n }\n \n-pub fn update_linkage(ccx: &CrateContext, llval: ValueRef, id: ast::NodeId) {\n-    if ccx.reachable().contains(&id) || ccx.sess().opts.cg.codegen_units > 1 {\n-        llvm::SetLinkage(llval, llvm::ExternalLinkage);\n-    } else {\n-        llvm::SetLinkage(llval, llvm::InternalLinkage);\n+/// Set the appropriate linkage for an LLVM `ValueRef` (function or global).\n+/// If the `llval` is the direct translation of a specific Rust item, `id`\n+/// should be set to the `NodeId` of that item.  (This mapping should be\n+/// 1-to-1, so monomorphizations and drop/visit glue should have `id` set to\n+/// `None`.)\n+pub fn update_linkage(ccx: &CrateContext, llval: ValueRef, id: Option<ast::NodeId>) {\n+    match id {\n+        Some(id) if ccx.reachable().contains(&id) => {\n+            llvm::SetLinkage(llval, llvm::ExternalLinkage);\n+        },\n+        _ => {\n+            // `id` does not refer to an item in `ccx.reachable`.\n+            if ccx.sess().opts.cg.codegen_units > 1 {\n+                llvm::SetLinkage(llval, llvm::ExternalLinkage);\n+            } else {\n+                llvm::SetLinkage(llval, llvm::InternalLinkage);\n+            }\n+        },\n     }\n }\n \n@@ -2157,7 +2170,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                          item.id,\n                          item.attrs.as_slice());\n             }\n-            update_linkage(ccx, llfn, item.id);\n+            update_linkage(ccx, llfn, Some(item.id));\n         }\n \n         // Be sure to travel more than just one layer deep to catch nested\n@@ -2185,7 +2198,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n           consts::trans_const(ccx, m, item.id);\n \n           let g = get_item_val(ccx, item.id);\n-          update_linkage(ccx, g, item.id);\n+          update_linkage(ccx, g, Some(item.id));\n \n           // Do static_assert checking. It can't really be done much earlier\n           // because we need to get the value of the bool out of LLVM"}, {"sha": "64722208aa5f46e59bce0f0963b5127ae264932b", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "patch": "@@ -72,6 +72,10 @@ pub struct SharedCrateContext {\n     symbol_hasher: RefCell<Sha256>,\n     tcx: ty::ctxt,\n     stats: Stats,\n+\n+    available_monomorphizations: RefCell<HashSet<String>>,\n+    available_drop_glues: RefCell<HashMap<ty::t, String>>,\n+    available_visit_glues: RefCell<HashMap<ty::t, String>>,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -233,6 +237,9 @@ impl SharedCrateContext {\n                 llvm_insns: RefCell::new(HashMap::new()),\n                 fn_stats: RefCell::new(Vec::new()),\n             },\n+            available_monomorphizations: RefCell::new(HashSet::new()),\n+            available_drop_glues: RefCell::new(HashMap::new()),\n+            available_visit_glues: RefCell::new(HashMap::new()),\n         };\n \n         for i in range(0, local_count) {\n@@ -612,6 +619,18 @@ impl<'b> CrateContext<'b> {\n         &self.shared.stats\n     }\n \n+    pub fn available_monomorphizations<'a>(&'a self) -> &'a RefCell<HashSet<String>> {\n+        &self.shared.available_monomorphizations\n+    }\n+\n+    pub fn available_drop_glues<'a>(&'a self) -> &'a RefCell<HashMap<ty::t, String>> {\n+        &self.shared.available_drop_glues\n+    }\n+\n+    pub fn available_visit_glues<'a>(&'a self) -> &'a RefCell<HashMap<ty::t, String>> {\n+        &self.shared.available_visit_glues\n+    }\n+\n     pub fn int_type(&self) -> Type {\n         self.local.int_type\n     }"}, {"sha": "e0ef867c23eb3863bce19d4e1e311e0f3a47212a", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "patch": "@@ -171,11 +171,30 @@ pub fn get_drop_glue(ccx: &CrateContext, t: ty::t) -> ValueRef {\n     };\n \n     let llfnty = Type::glue_fn(ccx, llty);\n-    let glue = declare_generic_glue(ccx, t, llfnty, \"drop\");\n+\n+    let (glue, new_sym) = match ccx.available_drop_glues().borrow().find(&t) {\n+        Some(old_sym) => {\n+            let glue = decl_cdecl_fn(ccx, old_sym.as_slice(), llfnty, ty::mk_nil());\n+            (glue, None)\n+        },\n+        None => {\n+            let (sym, glue) = declare_generic_glue(ccx, t, llfnty, \"drop\");\n+            (glue, Some(sym))\n+        },\n+    };\n \n     ccx.drop_glues().borrow_mut().insert(t, glue);\n \n-    make_generic_glue(ccx, t, glue, make_drop_glue, \"drop\");\n+    // To avoid infinite recursion, don't `make_drop_glue` until after we've\n+    // added the entry to the `drop_glues` cache.\n+    match new_sym {\n+        Some(sym) => {\n+            ccx.available_drop_glues().borrow_mut().insert(t, sym);\n+            // We're creating a new drop glue, so also generate a body.\n+            make_generic_glue(ccx, t, glue, make_drop_glue, \"drop\");\n+        },\n+        None => {},\n+    }\n \n     glue\n }\n@@ -189,9 +208,28 @@ pub fn lazily_emit_visit_glue(ccx: &CrateContext, ti: &tydesc_info) -> ValueRef\n         Some(visit_glue) => visit_glue,\n         None => {\n             debug!(\"+++ lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_string(ccx.tcx(), ti.ty));\n-            let glue_fn = declare_generic_glue(ccx, ti.ty, llfnty, \"visit\");\n+\n+            let (glue_fn, new_sym) = match ccx.available_visit_glues().borrow().find(&ti.ty) {\n+                Some(old_sym) => {\n+                    let glue_fn = decl_cdecl_fn(ccx, old_sym.as_slice(), llfnty, ty::mk_nil());\n+                    (glue_fn, None)\n+                },\n+                None => {\n+                    let (sym, glue_fn) = declare_generic_glue(ccx, ti.ty, llfnty, \"visit\");\n+                    (glue_fn, Some(sym))\n+                },\n+            };\n+\n             ti.visit_glue.set(Some(glue_fn));\n-            make_generic_glue(ccx, ti.ty, glue_fn, make_visit_glue, \"visit\");\n+\n+            match new_sym {\n+                Some(sym) => {\n+                    ccx.available_visit_glues().borrow_mut().insert(ti.ty, sym);\n+                    make_generic_glue(ccx, ti.ty, glue_fn, make_visit_glue, \"visit\");\n+                },\n+                None => {},\n+            }\n+\n             debug!(\"--- lazily_emit_tydesc_glue VISIT {}\", ppaux::ty_to_string(ccx.tcx(), ti.ty));\n             glue_fn\n         }\n@@ -602,15 +640,15 @@ pub fn declare_tydesc(ccx: &CrateContext, t: ty::t) -> tydesc_info {\n }\n \n fn declare_generic_glue(ccx: &CrateContext, t: ty::t, llfnty: Type,\n-                        name: &str) -> ValueRef {\n+                        name: &str) -> (String, ValueRef) {\n     let _icx = push_ctxt(\"declare_generic_glue\");\n     let fn_nm = mangle_internal_name_by_type_and_seq(\n         ccx,\n         t,\n         format!(\"glue_{}\", name).as_slice());\n     let llfn = decl_cdecl_fn(ccx, fn_nm.as_slice(), llfnty, ty::mk_nil());\n-    note_unique_llvm_symbol(ccx, fn_nm);\n-    return llfn;\n+    note_unique_llvm_symbol(ccx, fn_nm.clone());\n+    return (fn_nm, llfn);\n }\n \n fn make_generic_glue(ccx: &CrateContext,\n@@ -631,7 +669,8 @@ fn make_generic_glue(ccx: &CrateContext,\n \n     let bcx = init_function(&fcx, false, ty::mk_nil());\n \n-    llvm::SetLinkage(llfn, llvm::InternalLinkage);\n+    update_linkage(ccx, llfn, None);\n+\n     ccx.stats().n_glues_created.set(ccx.stats().n_glues_created.get() + 1u);\n     // All glue functions take values passed *by alias*; this is a\n     // requirement since in many contexts glue is invoked indirectly and"}, {"sha": "f1101060d979d7952253988a5e1ee48b4be0baa4", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "patch": "@@ -85,7 +85,7 @@ pub fn trans_impl(ccx: &CrateContext,\n                              &param_substs::empty(),\n                              method.id,\n                              []);\n-                    update_linkage(ccx, llfn, method.id);\n+                    update_linkage(ccx, llfn, Some(method.id));\n                 }\n                 let mut v = TransItemVisitor {\n                     ccx: ccx,"}, {"sha": "1dd0de3904d82a5a882d83ed32066a7e7d070400", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09bef810a95c82fa5de08872fccffdd5e0fe1e7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=e09bef810a95c82fa5de08872fccffdd5e0fe1e7", "patch": "@@ -159,14 +159,18 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                   ..\n               } => {\n                   let d = mk_lldecl(abi);\n+                  base::update_linkage(ccx, d, None);\n                   set_llvm_fn_attrs(i.attrs.as_slice(), d);\n \n-                  if abi != abi::Rust {\n-                      foreign::trans_rust_fn_with_foreign_abi(\n-                          ccx, &**decl, &**body, [], d, &psubsts, fn_id.node,\n-                          Some(hash.as_slice()));\n-                  } else {\n-                      trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, []);\n+                  if !ccx.available_monomorphizations().borrow().contains(&s) {\n+                      ccx.available_monomorphizations().borrow_mut().insert(s.clone());\n+                      if abi != abi::Rust {\n+                          foreign::trans_rust_fn_with_foreign_abi(\n+                              ccx, &**decl, &**body, [], d, &psubsts, fn_id.node,\n+                              Some(hash.as_slice()));\n+                      } else {\n+                          trans_fn(ccx, &**decl, &**body, d, &psubsts, fn_id.node, []);\n+                      }\n                   }\n \n                   d\n@@ -201,14 +205,18 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             match *ii {\n                 ast::MethodImplItem(mth) => {\n                     let d = mk_lldecl(abi::Rust);\n+                    base::update_linkage(ccx, d, None);\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-                    trans_fn(ccx,\n-                             &*mth.pe_fn_decl(),\n-                             &*mth.pe_body(),\n-                             d,\n-                             &psubsts,\n-                             mth.id,\n-                             []);\n+                    if !ccx.available_monomorphizations().borrow().contains(&s) {\n+                        ccx.available_monomorphizations().borrow_mut().insert(s.clone());\n+                            trans_fn(ccx,\n+                                     &*mth.pe_fn_decl(),\n+                                     &*mth.pe_body(),\n+                                     d,\n+                                     &psubsts,\n+                                     mth.id,\n+                                     []);\n+                    }\n                     d\n                 }\n             }\n@@ -217,9 +225,13 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             match *method {\n                 ast::ProvidedMethod(mth) => {\n                     let d = mk_lldecl(abi::Rust);\n+                    base::update_linkage(ccx, d, None);\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-                    trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d,\n-                             &psubsts, mth.id, []);\n+                    if !ccx.available_monomorphizations().borrow().contains(&s) {\n+                        ccx.available_monomorphizations().borrow_mut().insert(s.clone());\n+                        trans_fn(ccx, &*mth.pe_fn_decl(), &*mth.pe_body(), d,\n+                                 &psubsts, mth.id, []);\n+                    }\n                     d\n                 }\n                 _ => {"}]}