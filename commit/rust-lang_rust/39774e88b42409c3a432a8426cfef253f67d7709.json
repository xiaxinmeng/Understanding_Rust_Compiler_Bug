{"sha": "39774e88b42409c3a432a8426cfef253f67d7709", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Nzc0ZTg4YjQyNDA5YzNhNDMyYTg0MjZjZmVmMjUzZjY3ZDc3MDk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-07T18:20:57Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-07T21:19:19Z"}, "message": "Add a very basic crate-dump utility\n\n'rustc -ls [cratelib]' will now dump out a list of symbols defined by\nthe crate, as well as a short description of what they are.", "tree": {"sha": "31e390c973e7ccdc8bf88eddf5f7f45e122621b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e390c973e7ccdc8bf88eddf5f7f45e122621b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39774e88b42409c3a432a8426cfef253f67d7709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39774e88b42409c3a432a8426cfef253f67d7709", "html_url": "https://github.com/rust-lang/rust/commit/39774e88b42409c3a432a8426cfef253f67d7709", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39774e88b42409c3a432a8426cfef253f67d7709/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d678dad434d85c25457fc8c234386f65fae4f07b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d678dad434d85c25457fc8c234386f65fae4f07b", "html_url": "https://github.com/rust-lang/rust/commit/d678dad434d85c25457fc8c234386f65fae4f07b"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "928c934a7ecfc3d32050e5748806f5deca6d81d6", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39774e88b42409c3a432a8426cfef253f67d7709/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39774e88b42409c3a432a8426cfef253f67d7709/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=39774e88b42409c3a432a8426cfef253f67d7709", "patch": "@@ -98,6 +98,7 @@ fn usage(session.session sess, str argv0) {\n     log \"    -glue              generate glue.bc file\";\n     log \"    -shared            compile a shared-library crate\";\n     log \"    -pp                pretty-print the input instead of compiling\";\n+    log \"    -ls                list the symbols defined by a crate file\";\n     log \"    -L <path>          add a directory to the library search path\";\n     log \"    -h                 display this message\";\n     log \"\";\n@@ -130,6 +131,7 @@ impure fn main(vec[str] args) {\n     let bool do_warn = true;\n     let bool shared = false;\n     let bool pretty = false;\n+    let bool ls = false;\n     let bool glue = false;\n \n     // FIXME: Maybe we should support -O0, -O1, -Os, etc\n@@ -152,6 +154,8 @@ impure fn main(vec[str] args) {\n                 shared = true;\n             } else if (_str.eq(arg, \"-pp\")) {\n                 pretty = true;\n+            } else if (_str.eq(arg, \"-ls\")) {\n+                ls = true;\n             } else if (_str.eq(arg, \"-o\")) {\n                 if (i+1u < len) {\n                     output_file = some(args.(i+1u));\n@@ -214,8 +218,9 @@ impure fn main(vec[str] args) {\n             auto env = default_environment(sess, args.(0), ifile);\n             if (pretty) {\n                 pretty_print_input(sess, env, ifile);\n-            }\n-            else {\n+            } else if (ls) {\n+                front.creader.list_file_metadata(ifile, std.io.stdout());\n+            } else {\n                 alt (output_file) {\n                     case (none[str]) {\n                         let vec[str] parts = _str.split(ifile, '.' as u8);"}, {"sha": "7fc6e24726cb652ae732a25ea8673ccae94a94d7", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/39774e88b42409c3a432a8426cfef253f67d7709/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39774e88b42409c3a432a8426cfef253f67d7709/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=39774e88b42409c3a432a8426cfef253f67d7709", "patch": "@@ -566,6 +566,72 @@ fn get_tag_variants(session.session sess, ast.def_id def)\n     ret infos;\n }\n \n+impure fn list_file_metadata(str path, io.writer out) {\n+    alt (get_metadata_section(path)) {\n+        case (option.some[vec[u8]](?bytes)) {\n+            list_crate_metadata(bytes, out);\n+        }\n+        case (option.none[vec[u8]]) {\n+            out.write_str(\"Could not find metadata in \" + path + \".\\n\");\n+        }\n+    }\n+}\n+\n+fn read_path(&ebml.doc d) -> tup(str, uint) {\n+    auto desc = ebml.doc_data(d);\n+    auto pos = ebml.be_uint_from_bytes(desc, 0u, 4u);\n+    auto pathbytes = _vec.slice[u8](desc, 4u, _vec.len[u8](desc));\n+    auto path = _str.unsafe_from_bytes(pathbytes);\n+    ret tup(path, pos);\n+}\n+\n+impure fn list_crate_metadata(vec[u8] bytes, io.writer out) {\n+    auto md = ebml.new_doc(bytes);\n+    auto paths = ebml.get_doc(md, metadata.tag_paths);\n+    auto items = ebml.get_doc(md, metadata.tag_items);\n+    auto index = ebml.get_doc(paths, metadata.tag_index);\n+    auto bs = ebml.get_doc(index, metadata.tag_index_buckets);\n+    for each (ebml.doc bucket in\n+              ebml.tagged_docs(bs, metadata.tag_index_buckets_bucket)) {\n+        auto et = metadata.tag_index_buckets_bucket_elt;\n+        for each (ebml.doc elt in ebml.tagged_docs(bucket, et)) {\n+            auto data = read_path(elt);\n+            auto def = ebml.doc_at(bytes, data._1);\n+            auto did_doc = ebml.get_doc(def, metadata.tag_def_id);\n+            auto did = parse_def_id(ebml.doc_data(did_doc));\n+            out.write_str(#fmt(\"%s (%s)\\n\", data._0,\n+                               describe_def(items, did)));\n+        }\n+    }\n+}\n+\n+fn describe_def(&ebml.doc items, ast.def_id id) -> str {\n+    if (id._0 != 0) {ret \"external\";}\n+    alt (maybe_find_item(id._1 as int, items)) {\n+        case (option.some[ebml.doc](?item)) {\n+            ret item_kind_to_str(item_kind(item));\n+        }\n+        case (option.none[ebml.doc]) {\n+            ret \"??\"; // Native modules don't seem to get item entries.\n+        }\n+    }\n+}\n+\n+fn item_kind_to_str(u8 kind) -> str {\n+    alt (kind as char) {\n+        case ('c') {ret \"const\";}\n+        case ('f') {ret \"fn\";}\n+        case ('F') {ret \"native fn\";}\n+        case ('y') {ret \"type\";}\n+        case ('o') {ret \"obj\";}\n+        case ('T') {ret \"native type\";}\n+        case ('t') {ret \"type\";}\n+        case ('m') {ret \"mod\";}\n+        case ('n') {ret \"native mod\";}\n+        case ('v') {ret \"tag\";}\n+    }\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}]}