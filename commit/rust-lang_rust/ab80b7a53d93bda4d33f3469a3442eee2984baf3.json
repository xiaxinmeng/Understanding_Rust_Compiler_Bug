{"sha": "ab80b7a53d93bda4d33f3469a3442eee2984baf3", "node_id": "C_kwDOAAsO6NoAKGFiODBiN2E1M2Q5M2JkYTRkMzNmMzQ2OWEzNDQyZWVlMjk4NGJhZjM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-04T17:18:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-04T17:18:22Z"}, "message": "Rollup merge of #111186 - jmillikin:nonzero-is-positive, r=dtolnay\n\nAdd `is_positive` method for signed non-zero integers.\n\nACP: https://github.com/rust-lang/libs-team/issues/105", "tree": {"sha": "9b01b569d44edbc25e95eedfa94a73563f9b8a65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b01b569d44edbc25e95eedfa94a73563f9b8a65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab80b7a53d93bda4d33f3469a3442eee2984baf3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkU+jeCRBK7hj4Ov3rIwAAK6QIAJ/IIrQAAJueUCvamfMIXSst\nkJLUmw1zS7whb7WCaZJB+CFRwoNHvp6K7FO5+nVapCQa/ptiodv5X/TgsLKaV7cE\n88ozT/lNlOfXz+l1DpU1AOEJBUbcR+yXhvNhZpgrw5BCZYeMfulKqJ0A8NQWFaXj\nmb4GWATjyYHHzn24QLsWdNWFD4B2585SK4x7x7evLls+TIhn9W9qOXbOq9FmsOL2\nixPv03UaqzWycb0XtHoelKJRAYxmSQ3KbrMgHAMOu2pDyQbVmwBNbVR1fNB5y0jR\nMXXKwLS1Lvd0NLj3mb3tCWHYo7bUQNErz0Fa5f41vHU8rc0odRMZYFPyB12tYUc=\n=uJJz\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b01b569d44edbc25e95eedfa94a73563f9b8a65\nparent c0ca84b006d86cfb76c9bc6c5e2c3805de073f5f\nparent 70523fb0b1eac3903d3be05e839534507f448aad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683220702 +0200\ncommitter GitHub <noreply@github.com> 1683220702 +0200\n\nRollup merge of #111186 - jmillikin:nonzero-is-positive, r=dtolnay\n\nAdd `is_positive` method for signed non-zero integers.\n\nACP: https://github.com/rust-lang/libs-team/issues/105\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab80b7a53d93bda4d33f3469a3442eee2984baf3", "html_url": "https://github.com/rust-lang/rust/commit/ab80b7a53d93bda4d33f3469a3442eee2984baf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab80b7a53d93bda4d33f3469a3442eee2984baf3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ca84b006d86cfb76c9bc6c5e2c3805de073f5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0ca84b006d86cfb76c9bc6c5e2c3805de073f5f", "html_url": "https://github.com/rust-lang/rust/commit/c0ca84b006d86cfb76c9bc6c5e2c3805de073f5f"}, {"sha": "70523fb0b1eac3903d3be05e839534507f448aad", "url": "https://api.github.com/repos/rust-lang/rust/commits/70523fb0b1eac3903d3be05e839534507f448aad", "html_url": "https://github.com/rust-lang/rust/commit/70523fb0b1eac3903d3be05e839534507f448aad"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "74a325b89d442a1f3b614216e38541edeaa188ea", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ab80b7a53d93bda4d33f3469a3442eee2984baf3/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab80b7a53d93bda4d33f3469a3442eee2984baf3/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=ab80b7a53d93bda4d33f3469a3442eee2984baf3", "patch": "@@ -713,6 +713,32 @@ macro_rules! nonzero_signed_operations {\n                     unsafe { $Uty::new_unchecked(self.get().unsigned_abs()) }\n                 }\n \n+                /// Returns `true` if `self` is positive and `false` if the\n+                /// number is negative.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                ///\n+                /// assert!(pos_five.is_positive());\n+                /// assert!(!neg_five.is_positive());\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[must_use]\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"102443\")]\n+                pub const fn is_positive(self) -> bool {\n+                    self.get().is_positive()\n+                }\n+\n                 /// Returns `true` if `self` is negative and `false` if the\n                 /// number is positive.\n                 ///"}]}