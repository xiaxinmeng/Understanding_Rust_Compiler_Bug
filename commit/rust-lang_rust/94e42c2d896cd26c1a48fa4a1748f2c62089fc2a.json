{"sha": "94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZTQyYzJkODk2Y2QyNmMxYTQ4ZmE0YTE3NDhmMmM2MjA4OWZjMmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-12T01:08:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-23T20:20:16Z"}, "message": "collections: Make push_back/pop_back default methods", "tree": {"sha": "08b0c436e2e57cf4a278883de067d52223d461d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b0c436e2e57cf4a278883de067d52223d461d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "html_url": "https://github.com/rust-lang/rust/commit/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d79bfa4150c356240d934b14623d6e90f7e48c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d79bfa4150c356240d934b14623d6e90f7e48c4", "html_url": "https://github.com/rust-lang/rust/commit/2d79bfa4150c356240d934b14623d6e90f7e48c4"}], "stats": {"total": 56, "additions": 18, "deletions": 38}, "files": [{"sha": "19488ee9f85434e46bffa30abf5f62b6883f8536", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "patch": "@@ -249,29 +249,17 @@ impl<T> Deque<T> for DList<T> {\n     fn pop_front(&mut self) -> Option<T> {\n         self.pop_front_node().map(|box Node{value, ..}| value)\n     }\n+}\n \n-    /// Add an element last in the list\n-    ///\n-    /// O(1)\n-    #[deprecated = \"use the `push` method\"]\n-    fn push_back(&mut self, elt: T) {\n+impl<T> MutableSeq<T> for DList<T> {\n+    fn push(&mut self, elt: T) {\n         self.push_back_node(box Node::new(elt))\n     }\n-\n-    /// Remove the last element and return it, or None if the list is empty\n-    ///\n-    /// O(1)\n-    #[deprecated = \"use the `pop` method\"]\n-    fn pop_back(&mut self) -> Option<T> {\n+    fn pop(&mut self) -> Option<T> {\n         self.pop_back_node().map(|box Node{value, ..}| value)\n     }\n }\n \n-impl<T> MutableSeq<T> for DList<T> {\n-    fn push(&mut self, elt: T) { self.push_back(elt) }\n-    fn pop(&mut self) -> Option<T> { self.pop_back() }\n-}\n-\n impl<T> Default for DList<T> {\n     #[inline]\n     fn default() -> DList<T> { DList::new() }"}, {"sha": "8d008f921da17c4f5c9975484e9f1087c3038968", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "patch": "@@ -516,7 +516,7 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// assert_eq!(d.front(), Some(&1i));\n     /// ```\n     #[deprecated = \"use the `push` method\"]\n-    fn push_back(&mut self, elt: T);\n+    fn push_back(&mut self, elt: T) { self.push(elt) }\n \n     /// Remove the last element and return it, or `None` if the sequence is empty.\n     ///\n@@ -534,7 +534,7 @@ pub trait Deque<T> : MutableSeq<T> {\n     /// assert_eq!(d.pop_back(), None);\n     /// ```\n     #[deprecated = \"use the `pop` method\"]\n-    fn pop_back(&mut self) -> Option<T>;\n+    fn pop_back(&mut self) -> Option<T> { self.pop() }\n \n     /// Remove the first element and return it, or `None` if the sequence is empty.\n     ///"}, {"sha": "c56781ec30b72c45ed07f0317b8a5dfd79bbb940", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94e42c2d896cd26c1a48fa4a1748f2c62089fc2a/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=94e42c2d896cd26c1a48fa4a1748f2c62089fc2a", "patch": "@@ -80,18 +80,6 @@ impl<T> Deque<T> for RingBuf<T> {\n         result\n     }\n \n-    /// Remove and return the last element in the RingBuf, or None if it is empty\n-    #[deprecated = \"use the `pop` method\"]\n-    fn pop_back(&mut self) -> Option<T> {\n-        if self.nelts > 0 {\n-            self.nelts -= 1;\n-            let hi = self.raw_index(self.nelts);\n-            self.elts.get_mut(hi).take()\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Prepend an element to the RingBuf\n     fn push_front(&mut self, t: T) {\n         if self.nelts == self.elts.len() {\n@@ -103,22 +91,26 @@ impl<T> Deque<T> for RingBuf<T> {\n         *self.elts.get_mut(self.lo) = Some(t);\n         self.nelts += 1u;\n     }\n+}\n \n-    /// Append an element to the RingBuf\n-    #[deprecated = \"use the `push` method\"]\n-    fn push_back(&mut self, t: T) {\n+impl<T> MutableSeq<T> for RingBuf<T> {\n+    fn push(&mut self, t: T) {\n         if self.nelts == self.elts.len() {\n             grow(self.nelts, &mut self.lo, &mut self.elts);\n         }\n         let hi = self.raw_index(self.nelts);\n         *self.elts.get_mut(hi) = Some(t);\n         self.nelts += 1u;\n     }\n-}\n-\n-impl<T> MutableSeq<T> for RingBuf<T> {\n-    fn push(&mut self, t: T) { self.push_back(t) }\n-    fn pop(&mut self) -> Option<T> { self.pop_back() }\n+    fn pop(&mut self) -> Option<T> {\n+        if self.nelts > 0 {\n+            self.nelts -= 1;\n+            let hi = self.raw_index(self.nelts);\n+            self.elts.get_mut(hi).take()\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl<T> Default for RingBuf<T> {"}]}