{"sha": "8cefdb5527d011d7d5ca2902791b7c3da0276fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZWZkYjU1MjdkMDExZDdkNWNhMjkwMjc5MWI3YzNkYTAyNzZmZWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T20:11:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-18T20:11:08Z"}, "message": "use quote! macro to generate grammar\n\nWe already use syn&quote elsewhere (transitively), so it make sense to\ncut down on the number of technologies and get rid of tera", "tree": {"sha": "b40d906a23b8ffa37b40edd4916a13fd9e6f4ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b40d906a23b8ffa37b40edd4916a13fd9e6f4ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cefdb5527d011d7d5ca2902791b7c3da0276fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cefdb5527d011d7d5ca2902791b7c3da0276fec", "html_url": "https://github.com/rust-lang/rust/commit/8cefdb5527d011d7d5ca2902791b7c3da0276fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cefdb5527d011d7d5ca2902791b7c3da0276fec/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d545a5c75cb181758dd745b031eacfd7fc8a6929", "url": "https://api.github.com/repos/rust-lang/rust/commits/d545a5c75cb181758dd745b031eacfd7fc8a6929", "html_url": "https://github.com/rust-lang/rust/commit/d545a5c75cb181758dd745b031eacfd7fc8a6929"}], "stats": {"total": 221, "additions": 181, "deletions": 40}, "files": [{"sha": "530764c37a317f23db46dd6c6a6418adb77f8062", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cefdb5527d011d7d5ca2902791b7c3da0276fec/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/8cefdb5527d011d7d5ca2902791b7c3da0276fec/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=8cefdb5527d011d7d5ca2902791b7c3da0276fec", "patch": "@@ -1362,6 +1362,7 @@ name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "26efeeba996b104c064eafdb26131c18895199c7", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=8cefdb5527d011d7d5ca2902791b7c3da0276fec", "patch": "@@ -263,7 +263,7 @@ Grammar(\n         \"SourceFile\": (\n             traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n             collections: [\n-                [\"modules\", \"Module\"],\n+                (\"modules\", \"Module\"),\n             ]\n         ),\n         \"FnDef\": (\n@@ -286,7 +286,7 @@ Grammar(\n                 \"DocCommentsOwner\"\n             ]\n         ),\n-        \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n+        \"NamedFieldDefList\": (collections: [(\"fields\", \"NamedFieldDef\")]),\n         \"NamedFieldDef\": (\n             traits: [\n                 \"VisibilityOwner\",\n@@ -296,7 +296,7 @@ Grammar(\n                 \"TypeAscriptionOwner\"\n             ]\n         ),\n-        \"PosFieldDefList\": (collections: [[\"fields\", \"PosFieldDef\"]]),\n+        \"PosFieldDefList\": (collections: [(\"fields\", \"PosFieldDef\")]),\n         \"PosFieldDef\": ( traits: [\"VisibilityOwner\", \"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n             \"VisibilityOwner\",\n@@ -305,7 +305,7 @@ Grammar(\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n-        \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n+        \"EnumVariantList\": ( collections: [(\"variants\", \"EnumVariant\")] ),\n         \"EnumVariant\": ( traits: [\"NameOwner\", \"DocCommentsOwner\", \"AttrsOwner\"], options: [\"Expr\"] ),\n         \"TraitDef\": (\n             traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\", \"TypeParamsOwner\", \"TypeBoundsOwner\"],\n@@ -316,7 +316,7 @@ Grammar(\n             options: [ \"ItemList\" ]\n         ),\n         \"ItemList\": (\n-            collections: [[\"impl_items\", \"ImplItem\"]],\n+            collections: [(\"impl_items\", \"ImplItem\")],\n             traits: [ \"FnDefOwner\", \"ModuleItemOwner\" ],\n         ),\n         \"ConstDef\": (\n@@ -355,7 +355,7 @@ Grammar(\n         \"ImplBlock\": (options: [\"ItemList\"], traits: [\"TypeParamsOwner\", \"AttrsOwner\"]),\n \n         \"ParenType\": (options: [\"TypeRef\"]),\n-        \"TupleType\": ( collections: [[\"fields\", \"TypeRef\"]] ),\n+        \"TupleType\": ( collections: [(\"fields\", \"TypeRef\")] ),\n         \"NeverType\": (),\n         \"PathType\": (options: [\"Path\"]),\n         \"PointerType\": (options: [\"TypeRef\"]),\n@@ -405,10 +405,10 @@ Grammar(\n         ),\n \n         \"TupleExpr\": (\n-            collections: [[\"exprs\", \"Expr\"]]\n+            collections: [(\"exprs\", \"Expr\")]\n         ),\n         \"ArrayExpr\": (\n-            collections: [[\"exprs\", \"Expr\"]]\n+            collections: [(\"exprs\", \"Expr\")]\n         ),\n         \"ParenExpr\": (options: [\"Expr\"]),\n         \"PathExpr\": (options: [\"Path\"]),\n@@ -449,21 +449,21 @@ Grammar(\n             options: [ \"Expr\", \"MatchArmList\" ],\n         ),\n         \"MatchArmList\": (\n-            collections: [ [\"arms\", \"MatchArm\"] ],\n+            collections: [ (\"arms\", \"MatchArm\") ],\n             traits: [ \"AttrsOwner\" ]\n         ),\n         \"MatchArm\": (\n             options: [\n                 [ \"guard\", \"MatchGuard\" ],\n                 \"Expr\",\n             ],\n-            collections: [ [ \"pats\", \"Pat\" ] ],\n+            collections: [ (\"pats\", \"Pat\") ],\n             traits: [ \"AttrsOwner\" ]\n         ),\n         \"MatchGuard\": (options: [\"Expr\"]),\n         \"StructLit\": (options: [\"Path\", \"NamedFieldList\"]),\n         \"NamedFieldList\": (\n-            collections: [ [\"fields\", \"NamedField\"] ],\n+            collections: [ (\"fields\", \"NamedField\") ],\n             options: [[\"spread\", \"Expr\"]]\n         ),\n         \"NamedField\": (options: [\"NameRef\", \"Expr\"]),\n@@ -532,8 +532,8 @@ Grammar(\n         \"StructPat\": ( options: [\"FieldPatList\", \"Path\"] ),\n         \"FieldPatList\": (\n             collections: [\n-                [\"field_pats\", \"FieldPat\"],\n-                [\"bind_pats\", \"BindPat\"],\n+                (\"field_pats\", \"FieldPat\"),\n+                (\"bind_pats\", \"BindPat\"),\n             ]\n         ),\n         \"FieldPat\": (\n@@ -542,9 +542,9 @@ Grammar(\n         ),\n         \"TupleStructPat\": (\n             options: [\"Path\"],\n-            collections: [[\"args\", \"Pat\"]],\n+            collections: [(\"args\", \"Pat\")],\n         ),\n-        \"TuplePat\": ( collections: [[\"args\", \"Pat\"]] ),\n+        \"TuplePat\": ( collections: [(\"args\", \"Pat\")] ),\n         \"SlicePat\": (),\n         \"RangePat\": (),\n         \"LiteralPat\": (options: [\"Literal\"]),\n@@ -575,8 +575,8 @@ Grammar(\n         \"TokenTree\": (),\n         \"TypeParamList\": (\n             collections: [\n-                [\"type_params\", \"TypeParam\" ],\n-                [\"lifetime_params\", \"LifetimeParam\" ],\n+                (\"type_params\", \"TypeParam\" ),\n+                (\"lifetime_params\", \"LifetimeParam\" ),\n             ]\n         ),\n         \"TypeParam\": ( traits: [\"NameOwner\", \"AttrsOwner\", \"TypeBoundsOwner\", \"DefaultTypeParamOwner\"] ),\n@@ -590,7 +590,7 @@ Grammar(\n         ),\n         \"TypeBoundList\": (\n             collections: [\n-                [\"bounds\", \"TypeBound\"],\n+                (\"bounds\", \"TypeBound\"),\n             ]\n         ),\n         \"WherePred\": (\n@@ -603,7 +603,7 @@ Grammar(\n         ),\n         \"WhereClause\": (\n             collections: [\n-                [\"predicates\", \"WherePred\"],\n+                (\"predicates\", \"WherePred\"),\n             ],\n         ),\n         \"ExprStmt\": (\n@@ -627,7 +627,7 @@ Grammar(\n         \"Block\": (\n             options: [ \"Expr\" ],\n             collections: [\n-                [\"statements\", \"Stmt\"],\n+                (\"statements\", \"Stmt\"),\n             ],\n             traits: [\n                 \"AttrsOwner\",\n@@ -636,7 +636,7 @@ Grammar(\n         \"ParamList\": (\n             options: [ \"SelfParam\" ],\n             collections: [\n-                [\"params\", \"Param\"]\n+                (\"params\", \"Param\"),\n             ]\n         ),\n         \"SelfParam\": (\n@@ -663,14 +663,14 @@ Grammar(\n             traits: [\"NameOwner\"],\n         ),\n         \"UseTreeList\": (\n-            collections: [[\"use_trees\", \"UseTree\"]]\n+            collections: [(\"use_trees\", \"UseTree\")]\n         ),\n         \"ExternCrateItem\": (\n             options: [\"NameRef\", \"Alias\"],\n         ),\n         \"ArgList\": (\n             collections: [\n-                [\"args\", \"Expr\"]\n+                (\"args\", \"Expr\"),\n             ]\n         ),\n         \"Path\": (\n@@ -683,9 +683,9 @@ Grammar(\n             options: [ \"NameRef\", \"TypeArgList\" ]\n         ),\n         \"TypeArgList\": (collections: [\n-            [\"type_args\", \"TypeArg\"],\n-            [\"lifetime_args\", \"LifetimeArg\"],\n-            [\"assoc_type_args\", \"AssocTypeArg\"],\n+            (\"type_args\", \"TypeArg\"),\n+            (\"lifetime_args\", \"LifetimeArg\"),\n+            (\"assoc_type_args\", \"AssocTypeArg\"),\n         ]),\n         \"TypeArg\": (options: [\"TypeRef\"]),\n         \"AssocTypeArg\": (options: [\"NameRef\", \"TypeRef\"]),\n@@ -698,7 +698,7 @@ Grammar(\n         \"MacroStmts\" : (\n             options: [ \"Expr\" ],\n             collections: [\n-                [\"statements\", \"Stmt\"],\n+                (\"statements\", \"Stmt\"),\n             ],\n         )\n     },"}, {"sha": "1bb6fb71c7830a682f14102cd26d9c80a52ce220", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=8cefdb5527d011d7d5ca2902791b7c3da0276fec", "patch": "@@ -12,4 +12,5 @@ itertools = \"0.8.0\"\n clap = \"2.32.0\"\n quote = \"1.0.2\"\n ron = \"0.5.1\"\n+heck = \"0.3.0\"\n serde = { version = \"1.0.0\", features = [\"derive\"] }"}, {"sha": "e140927049e82e36b242fdf1fe94e6d4038b4ad3", "filename": "crates/ra_tools/src/codegen.rs", "status": "modified", "additions": 152, "deletions": 13, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cefdb5527d011d7d5ca2902791b7c3da0276fec/crates%2Fra_tools%2Fsrc%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fcodegen.rs?ref=8cefdb5527d011d7d5ca2902791b7c3da0276fec", "patch": "@@ -1,27 +1,162 @@\n-use std::{collections::BTreeMap, fs, path::Path};\n+use std::{\n+    collections::BTreeMap,\n+    fs,\n+    io::Write,\n+    path::Path,\n+    process::{Command, Stdio},\n+};\n \n-use quote::quote;\n+use heck::{ShoutySnakeCase, SnakeCase};\n+use quote::{format_ident, quote};\n use ron;\n use serde::Deserialize;\n \n-use crate::{project_root, Mode, Result, AST, GRAMMAR};\n+use crate::{project_root, Mode, Result, AST, GRAMMAR, SYNTAX_KINDS};\n \n pub fn generate(mode: Mode) -> Result<()> {\n     let grammar = project_root().join(GRAMMAR);\n-    // let syntax_kinds = project_root().join(SYNTAX_KINDS);\n-    let ast = project_root().join(AST);\n-    generate_ast(&grammar, &ast, mode)\n-}\n-\n-fn generate_ast(grammar_src: &Path, dst: &Path, mode: Mode) -> Result<()> {\n-    let src: Grammar = {\n-        let text = fs::read_to_string(grammar_src)?;\n+    let grammar: Grammar = {\n+        let text = fs::read_to_string(grammar)?;\n         ron::de::from_str(&text)?\n     };\n-    eprintln!(\"{:#?}\", src);\n+\n+    let _syntax_kinds = project_root().join(SYNTAX_KINDS);\n+    let _ast = project_root().join(AST);\n+\n+    let ast = generate_ast(&grammar)?;\n+    println!(\"{}\", ast);\n     Ok(())\n }\n \n+fn generate_ast(grammar: &Grammar) -> Result<String> {\n+    let nodes = grammar.ast.iter().map(|(name, ast_node)| {\n+        let variants =\n+            ast_node.variants.iter().map(|var| format_ident!(\"{}\", var)).collect::<Vec<_>>();\n+        let name = format_ident!(\"{}\", name);\n+\n+        let kinds = if variants.is_empty() { vec![name.clone()] } else { variants.clone() }\n+            .into_iter()\n+            .map(|name| format_ident!(\"{}\", name.to_string().to_shouty_snake_case()))\n+            .collect::<Vec<_>>();\n+\n+        let variants = if variants.is_empty() {\n+            None\n+        } else {\n+            let kind_enum = format_ident!(\"{}Kind\", name);\n+            Some(quote!(\n+                pub enum #kind_enum {\n+                    #(#variants(#variants),)*\n+                }\n+\n+                #(\n+                impl From<#variants> for #name {\n+                    fn from(node: #variants) -> #name {\n+                        #name { syntax: node.syntax }\n+                    }\n+                }\n+                )*\n+\n+                impl #name {\n+                    pub fn kind(&self) -> #kind_enum {\n+                        let syntax = self.syntax.clone();\n+                        match syntax.kind() {\n+                            #(\n+                            #kinds =>\n+                                #kind_enum::#variants(#variants { syntax }),\n+                            )*\n+                            _ => unreachable!(),\n+                        }\n+                    }\n+                }\n+            ))\n+        };\n+\n+        let traits = ast_node.traits.iter().map(|trait_name| {\n+            let trait_name = format_ident!(\"{}\", trait_name);\n+            quote!(impl ast::#trait_name for #name {})\n+        });\n+\n+        let collections = ast_node.collections.iter().map(|(name, kind)| {\n+            let method_name = format_ident!(\"{}\", name);\n+            let kind = format_ident!(\"{}\", kind);\n+            quote! {\n+                pub fn #method_name(&self) -> AstChildren<#kind> {\n+                    AstChildren::new(&self.syntax)\n+                }\n+            }\n+        });\n+\n+        let options = ast_node.options.iter().map(|attr| {\n+            let method_name = match attr {\n+                Attr::Type(t) => format_ident!(\"{}\", t.to_snake_case()),\n+                Attr::NameType(n, _) => format_ident!(\"{}\", n),\n+            };\n+            let ty = match attr {\n+                Attr::Type(t) | Attr::NameType(_, t) => format_ident!(\"{}\", t),\n+            };\n+            quote! {\n+                pub fn #method_name(&self) -> Option<#ty> {\n+                    AstChildren::new(&self.syntax).next()\n+                }\n+            }\n+        });\n+\n+        quote! {\n+            #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+            pub struct #name {\n+                pub(crate) syntax: SyntaxNode,\n+            }\n+\n+            impl AstNode for #name {\n+                fn can_cast(kind: SyntaxKind) -> bool {\n+                    match kind {\n+                        #(#kinds)|* => true,\n+                        _ => false,\n+                    }\n+                }\n+                fn cast(syntax: SyntaxNode) -> Option<Self> {\n+                    if Self::can_cast(syntax.kind()) { Some(Self { syntax }) } else { None }\n+                }\n+                fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+            }\n+\n+            #variants\n+\n+            #(#traits)*\n+\n+            impl #name {\n+                #(#collections)*\n+                #(#options)*\n+            }\n+        }\n+    });\n+\n+    let ast = quote! {\n+        use crate::{\n+            SyntaxNode, SyntaxKind::{self, *},\n+            ast::{self, AstNode, AstChildren},\n+        };\n+\n+        #(#nodes)*\n+    };\n+\n+    let pretty = reformat(ast)?;\n+    Ok(pretty)\n+}\n+\n+fn reformat(text: impl std::fmt::Display) -> Result<String> {\n+    let mut rustfmt = Command::new(\"rustfmt\")\n+        .arg(\"--config-path\")\n+        .arg(project_root().join(\"rustfmt.toml\"))\n+        .stdin(Stdio::piped())\n+        .stdout(Stdio::piped())\n+        .spawn()?;\n+    write!(rustfmt.stdin.take().unwrap(), \"{}\", text)?;\n+    let output = rustfmt.wait_with_output()?;\n+    let stdout = String::from_utf8(output.stdout)?;\n+    Ok(stdout)\n+}\n+\n #[derive(Deserialize, Debug)]\n struct Grammar {\n     single_byte_tokens: Vec<(String, String)>,\n@@ -35,10 +170,14 @@ struct Grammar {\n \n #[derive(Deserialize, Debug)]\n struct AstNode {\n+    #[serde(default)]\n+    #[serde(rename = \"enum\")]\n+    variants: Vec<String>,\n+\n     #[serde(default)]\n     traits: Vec<String>,\n     #[serde(default)]\n-    collections: Vec<Attr>,\n+    collections: Vec<(String, String)>,\n     #[serde(default)]\n     options: Vec<Attr>,\n }"}]}