{"sha": "2420bd34ba68a625840022de2a56aec228500359", "node_id": "C_kwDOAAsO6NoAKDI0MjBiZDM0YmE2OGE2MjU4NDAwMjJkZTJhNTZhZWMyMjg1MDAzNTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-26T05:55:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-26T05:55:32Z"}, "message": "Auto merge of #106428 - saethlin:inline-diverging-functions, r=cjgillot\n\nPermit the MIR inliner to inline diverging functions\n\nThis heuristic prevents inlining of `hint::unreachable_unchecked`, which in turn makes `Option/Result::unwrap_unchecked` a bad inlining candidate. I looked through the changes to `core`, `alloc`, `std`, and `hashbrown` by hand and they all seem reasonable. Let's see how this looks in perf...\n\n---\n\nBased on rustc-perf it looks like this regresses ctfe-stress, and the cachegrind diff indicates that this regression is in `InterpCx::statement`. I don't know how to do any deeper analysis because that function is _enormous_ in the try toolchain, which has no debuginfo in it. And a local build produces significantly different codegen for that function, even with LTO.", "tree": {"sha": "6ebb3558a94bed0ee8332e293b882927d8abd454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ebb3558a94bed0ee8332e293b882927d8abd454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2420bd34ba68a625840022de2a56aec228500359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2420bd34ba68a625840022de2a56aec228500359", "html_url": "https://github.com/rust-lang/rust/commit/2420bd34ba68a625840022de2a56aec228500359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2420bd34ba68a625840022de2a56aec228500359/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ae1b335f91ff137f955005f015b83fa24b8044", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ae1b335f91ff137f955005f015b83fa24b8044", "html_url": "https://github.com/rust-lang/rust/commit/48ae1b335f91ff137f955005f015b83fa24b8044"}, {"sha": "b93275198430e846715d0861111a55b672ca47e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93275198430e846715d0861111a55b672ca47e4", "html_url": "https://github.com/rust-lang/rust/commit/b93275198430e846715d0861111a55b672ca47e4"}], "stats": {"total": 860, "additions": 777, "deletions": 83}, "files": [{"sha": "27fad8a655ed51f5390d5bfc95abf9ff928b4fd9", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -424,13 +424,6 @@ impl<'tcx> Inliner<'tcx> {\n         debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n-        let diverges = matches!(\n-            callee_body.basic_blocks[START_BLOCK].terminator().kind,\n-            TerminatorKind::Unreachable | TerminatorKind::Call { target: None, .. }\n-        );\n-        if diverges && !matches!(callee_attrs.inline, InlineAttr::Always) {\n-            return Err(\"callee diverges unconditionally\");\n-        }\n \n         let mut checker = CostChecker {\n             tcx: self.tcx,"}, {"sha": "c926390aa2b8793683ff485ed77cad54e215537b", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -4,7 +4,7 @@ use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n-    SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n+    SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n };\n use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n@@ -44,6 +44,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n+            ctx.combine_duplicate_switch_targets(&mut block.terminator.as_mut().unwrap());\n         }\n     }\n }\n@@ -217,6 +218,19 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n \n+    fn combine_duplicate_switch_targets(&self, terminator: &mut Terminator<'tcx>) {\n+        let TerminatorKind::SwitchInt { targets, .. } = &mut terminator.kind\n+        else { return };\n+\n+        let otherwise = targets.otherwise();\n+        if targets.iter().any(|t| t.1 == otherwise) {\n+            *targets = SwitchTargets::new(\n+                targets.iter().filter(|t| t.1 != otherwise),\n+                targets.otherwise(),\n+            );\n+        }\n+    }\n+\n     fn combine_intrinsic_assert(\n         &self,\n         terminator: &mut Terminator<'tcx>,"}, {"sha": "5bdb8ab6bfc1d1d41f84ed77826e7af5790d2bdb", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -28,7 +28,7 @@\n //! return.\n \n use crate::MirPass;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n@@ -48,6 +48,7 @@ impl SimplifyCfg {\n \n pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     CfgSimplifier::new(body).simplify();\n+    remove_duplicate_unreachable_blocks(tcx, body);\n     remove_dead_blocks(tcx, body);\n \n     // FIXME: Should probably be moved into some kind of pass manager\n@@ -259,6 +260,49 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n+pub fn remove_duplicate_unreachable_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+    struct OptApplier<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+        duplicates: FxIndexSet<BasicBlock>,\n+    }\n+\n+    impl<'tcx> MutVisitor<'tcx> for OptApplier<'tcx> {\n+        fn tcx(&self) -> TyCtxt<'tcx> {\n+            self.tcx\n+        }\n+\n+        fn visit_terminator(&mut self, terminator: &mut Terminator<'tcx>, location: Location) {\n+            for target in terminator.successors_mut() {\n+                // We don't have to check whether `target` is a cleanup block, because have\n+                // entirely excluded cleanup blocks in building the set of duplicates.\n+                if self.duplicates.contains(target) {\n+                    *target = self.duplicates[0];\n+                }\n+            }\n+\n+            self.super_terminator(terminator, location);\n+        }\n+    }\n+\n+    let unreachable_blocks = body\n+        .basic_blocks\n+        .iter_enumerated()\n+        .filter(|(_, bb)| {\n+            // CfgSimplifier::simplify leaves behind some unreachable basic blocks without a\n+            // terminator. Those blocks will be deleted by remove_dead_blocks, but we run just\n+            // before then so we need to handle missing terminators.\n+            // We also need to prevent confusing cleanup and non-cleanup blocks. In practice we\n+            // don't emit empty unreachable cleanup blocks, so this simple check suffices.\n+            bb.terminator.is_some() && bb.is_empty_unreachable() && !bb.is_cleanup\n+        })\n+        .map(|(block, _)| block)\n+        .collect::<FxIndexSet<_>>();\n+\n+    if unreachable_blocks.len() > 1 {\n+        OptApplier { tcx, duplicates: unreachable_blocks }.visit_body(body);\n+    }\n+}\n+\n pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let reachable = traversal::reachable_as_bitset(body);\n     let num_blocks = body.basic_blocks.len();"}, {"sha": "838e33aca04c19f0e774c5ce68b6af91874c5e3d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -1941,6 +1941,12 @@ impl<'a> Builder<'a> {\n                 rustflags.arg(\"-Zvalidate-mir\");\n                 rustflags.arg(&format!(\"-Zmir-opt-level={}\", mir_opt_level));\n             }\n+            // Always enable inlining MIR when building the standard library.\n+            // Without this flag, MIR inlining is disabled when incremental compilation is enabled.\n+            // That causes some mir-opt tests which inline functions from the standard library to\n+            // break when incremental compilation is enabled. So this overrides the \"no inlining\n+            // during incremental builds\" heuristic for the standard library.\n+            rustflags.arg(\"-Zinline-mir\");\n         }\n \n         Cargo { command: cargo, rustflags, rustdocflags, allow_features }"}, {"sha": "fd6485de863c22636b874b733bdd5dad00f11ef6", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -90,7 +90,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n \n     bb0: {\n         _39 = discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))); // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        switchInt(move _39) -> [0: bb1, 1: bb29, 3: bb27, 4: bb28, otherwise: bb30]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        switchInt(move _39) -> [0: bb1, 1: bb28, 3: bb26, 4: bb27, otherwise: bb29]; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n     bb1: {\n@@ -263,7 +263,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_29);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_26);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n         _32 = discriminant(_25);         // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-        switchInt(move _32) -> [0: bb22, 1: bb20, otherwise: bb21]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n+        switchInt(move _32) -> [0: bb21, 1: bb20, otherwise: bb9]; // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n \n     bb20: {\n@@ -281,10 +281,6 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     }\n \n     bb21: {\n-        unreachable;                     // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n-    }\n-\n-    bb22: {\n         StorageLive(_33);                // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         _33 = ((_25 as Ready).0: ());    // scope 4 at $DIR/async_await.rs:+2:5: +2:14\n         _37 = _33;                       // scope 6 at $DIR/async_await.rs:+2:5: +2:14\n@@ -293,34 +289,34 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_28);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_25);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         StorageDead(_24);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n+        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n     }\n \n-    bb23: {\n+    bb22: {\n         StorageDead(_36);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         _38 = move _35;                  // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         StorageDead(_35);                // scope 4 at $DIR/async_await.rs:+2:13: +2:14\n         _7 = const ();                   // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n         goto -> bb16;                    // scope 4 at $DIR/async_await.rs:+2:8: +2:14\n     }\n \n-    bb24: {\n+    bb23: {\n         nop;                             // scope 0 at $DIR/async_await.rs:+2:13: +2:14\n-        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        goto -> bb24;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n     }\n \n-    bb25: {\n+    bb24: {\n         StorageDead(_21);                // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n-        goto -> bb26;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n+        goto -> bb25;                    // scope 0 at $DIR/async_await.rs:+3:1: +3:2\n     }\n \n-    bb26: {\n+    bb25: {\n         _0 = Poll::<()>::Ready(move _37); // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         discriminant((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2]))) = 1; // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n         return;                          // scope 0 at $DIR/async_await.rs:+3:2: +3:2\n     }\n \n-    bb27: {\n+    bb26: {\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_19);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n@@ -329,19 +325,19 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         goto -> bb11;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb28: {\n+    bb27: {\n         StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_35);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         StorageLive(_36);                // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n         _35 = move _2;                   // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n-        goto -> bb23;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+        goto -> bb22;                    // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb29: {\n-        assert(const false, \"`async fn` resumed after completion\") -> bb29; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n+    bb28: {\n+        assert(const false, \"`async fn` resumed after completion\") -> bb28; // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n \n-    bb30: {\n+    bb29: {\n         unreachable;                     // scope 0 at $DIR/async_await.rs:+0:18: +3:2\n     }\n }"}, {"sha": "e55fa745abce83d021311724f9b92e020953951d", "filename": "tests/mir-opt/inline/unchecked_shifts.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,17 @@\n+#![crate_type = \"lib\"]\n+#![feature(unchecked_math)]\n+\n+// ignore-debug: the debug assertions prevent the inlining we are testing for\n+// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+\n+// EMIT_MIR unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff\n+// EMIT_MIR unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir\n+pub unsafe fn unchecked_shl_unsigned_smaller(a: u16, b: u32) -> u16 {\n+    a.unchecked_shl(b)\n+}\n+\n+// EMIT_MIR unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff\n+// EMIT_MIR unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir\n+pub unsafe fn unchecked_shr_signed_smaller(a: i16, b: u32) -> i16 {\n+    a.unchecked_shr(b)\n+}"}, {"sha": "5fd918b3aa535bfaa6ed56c263c4cf263f801dcb", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,115 @@\n+- // MIR for `unchecked_shl_unsigned_smaller` before Inline\n++ // MIR for `unchecked_shl_unsigned_smaller` after Inline\n+  \n+  fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n+      debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n+      debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n+      let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n+      let mut _3: u16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+      let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n++     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n++         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _6: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _7: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         scope 2 {\n++             scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _9: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 4 {\n++                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 5 {\n++                     scope 6 {\n++                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                     }\n++                 }\n++             }\n++             scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _10: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 8 {\n++                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++                 scope 9 {\n++                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 12 {\n++                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                             }\n++                         }\n++                     }\n++                 }\n++                 scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          _3 = _1;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+          _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+-         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _7 = <u32 as TryInto<u16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:10:7: 10:20\n+-                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb2: {\n++         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb4: {\n++         _6 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         _9 = move ((_7 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<u16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _5 = move ((_6 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "c5501cef743e0ffbc7fa213f1f2df1d161ca63a3", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `unchecked_shl_unsigned_smaller` after PreCodegen\n+\n+fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n+    debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n+    debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n+    let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n+    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _4: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _5: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        scope 2 {\n+            scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _7: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 4 {\n+                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 5 {\n+                    scope 6 {\n+                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    }\n+                }\n+            }\n+            scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _8: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 8 {\n+                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+                scope 9 {\n+                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 12 {\n+                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                }\n+                scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _5 = <u32 as TryInto<u16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb4: {\n+        _4 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<u16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _3 = move ((_4 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "68d3b21fc2a4c1aa7840f4158771a91235f155bf", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,115 @@\n+- // MIR for `unchecked_shr_signed_smaller` before Inline\n++ // MIR for `unchecked_shr_signed_smaller` after Inline\n+  \n+  fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n+      debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n+      debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n+      let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n+      let mut _3: i16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+      let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n++     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n++         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _6: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _7: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         scope 2 {\n++             scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _9: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 4 {\n++                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 5 {\n++                     scope 6 {\n++                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                     }\n++                 }\n++             }\n++             scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _10: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 8 {\n++                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++                 scope 9 {\n++                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 12 {\n++                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                             }\n++                         }\n++                     }\n++                 }\n++                 scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          _3 = _1;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+          _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+-         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _7 = <u32 as TryInto<i16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:16:7: 16:20\n+-                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb2: {\n++         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+          StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb4: {\n++         _6 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         _9 = move ((_7 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<i16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _5 = move ((_6 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "ed3a89ceace1c1208d9118252e28b00b81346dc7", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `unchecked_shr_signed_smaller` after PreCodegen\n+\n+fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n+    debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n+    debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n+    let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n+    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _4: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _5: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        scope 2 {\n+            scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _7: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 4 {\n+                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 5 {\n+                    scope 6 {\n+                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    }\n+                }\n+            }\n+            scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _8: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 8 {\n+                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+                scope 9 {\n+                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 12 {\n+                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                }\n+                scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _5 = <u32 as TryInto<i16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb4: {\n+        _4 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<i16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _3 = move ((_4 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "5856f1479414cb979b662d07c2378fe026240b88", "filename": "tests/mir-opt/inline/unwrap_unchecked.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,11 @@\n+#![crate_type = \"lib\"]\n+\n+// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-debug: the debug assertions prevent the inlining we are testing for\n+// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+\n+// EMIT_MIR unwrap_unchecked.unwrap_unchecked.Inline.diff\n+// EMIT_MIR unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir\n+pub unsafe fn unwrap_unchecked<T>(slf: Option<T>) -> T {\n+    slf.unwrap_unchecked()\n+}"}, {"sha": "543ddcfc44c1d7cc7d53fee785a91a84d50fcc69", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.Inline.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `unwrap_unchecked` before Inline\n++ // MIR for `unwrap_unchecked` after Inline\n+  \n+  fn unwrap_unchecked(_1: Option<T>) -> T {\n+      debug slf => _1;                     // in scope 0 at $DIR/unwrap_unchecked.rs:+0:35: +0:38\n+      let mut _0: T;                       // return place in scope 0 at $DIR/unwrap_unchecked.rs:+0:54: +0:55\n+      let mut _2: std::option::Option<T>;  // in scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n++     scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) { // at $DIR/unwrap_unchecked.rs:10:9: 10:27\n++         debug self => _2;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         let mut _3: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         let mut _4: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         scope 2 {\n++             debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n++         }\n++         scope 3 {\n++             scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 6 {\n++                     scope 7 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                     }\n++                 }\n++             }\n++         }\n++         scope 4 (inlined Option::<T>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++             debug self => _3;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n+          _2 = move _1;                    // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n+-         _0 = Option::<T>::unwrap_unchecked(move _2) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:27\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unwrap_unchecked.rs:10:9: 10:25\n+-                                          // + literal: Const { ty: unsafe fn(Option<T>) -> T {Option::<T>::unwrap_unchecked}, val: Value(<ZST>) }\n++         StorageLive(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n++         _4 = discriminant(_2);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _4) -> [0: bb1, 1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:26: +1:27\n+-         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n++         unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+      }\n+  \n+-     bb2 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unwrap_unchecked.rs:+0:1: +2:2\n++     bb2: {\n++         _0 = move ((_2 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n++         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:26: +1:27\n++         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "c5e2469fc27c60c3ade8b7d15ac1f012951a0021", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,41 @@\n+// MIR for `unwrap_unchecked` after PreCodegen\n+\n+fn unwrap_unchecked(_1: Option<T>) -> T {\n+    debug slf => _1;                     // in scope 0 at $DIR/unwrap_unchecked.rs:+0:35: +0:38\n+    let mut _0: T;                       // return place in scope 0 at $DIR/unwrap_unchecked.rs:+0:54: +0:55\n+    scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) { // at $DIR/unwrap_unchecked.rs:10:9: 10:27\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _2: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        scope 2 {\n+            debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        }\n+        scope 3 {\n+            scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 6 {\n+                    scope 7 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    }\n+                }\n+            }\n+        }\n+        scope 4 (inlined Option::<T>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+            debug self => _2;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        _3 = discriminant(_1);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "e04079453d214380e4276bf2cb77d5ffeda265b5", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.assert_zero.InstCombine.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `assert_zero` before InstCombine\n++ // MIR for `assert_zero` after InstCombine\n+  \n+  fn assert_zero(_1: u8) -> u8 {\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+0:37: +0:39\n+  \n+      bb0: {\n+-         switchInt(_1) -> [0: bb2, 1: bb1, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n++         switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n+      }\n+  \n+      bb1: {\n+          unreachable;                     // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+10:13: +10:26\n+      }\n+  \n+      bb2: {\n+          _0 = _1;                         // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+13:13: +13:20\n+          return;                          // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+14:13: +14:21\n+      }\n+  }\n+  "}, {"sha": "ef3b487afa32f7d523cadedbbf50e1bfa0e7fb3e", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,27 @@\n+#![feature(custom_mir, core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+use std::intrinsics::mir::*;\n+\n+// unit-test: InstCombine\n+\n+// EMIT_MIR instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+pub unsafe fn assert_zero(x: u8) -> u8 {\n+    mir!(\n+        {\n+            match x {\n+                0 => retblock,\n+                1 => unreachable,\n+                _ => unreachable,\n+            }\n+        }\n+        unreachable = {\n+            Unreachable()\n+        }\n+        retblock = {\n+            RET = x;\n+            Return()\n+        }\n+    )\n+}"}, {"sha": "b5e0a66d83f6e13a6fe0e0b02a46d5a5bc492d62", "filename": "tests/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -61,33 +61,29 @@\n   \n       bb4: {\n           _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-          switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n+          switchInt(move _8) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n       }\n   \n       bb5: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n           _0 = Option::<i32>::None;        // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n       }\n   \n       bb6: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      }\n-  \n-      bb7: {\n           StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n           StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n           _0 = Option::<i32>::Some(move _10); // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          goto -> bb8;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n+          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n       }\n   \n-      bb8: {\n+      bb7: {\n           StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n           return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n       }"}, {"sha": "f7f50206af252aab57bdcb9fc7ae2d662952a199", "filename": "tests/mir-opt/simplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,25 @@\n+- // MIR for `assert_nonzero_nonmax` before SimplifyCfg-after-uninhabited-enum-branching\n++ // MIR for `assert_nonzero_nonmax` after SimplifyCfg-after-uninhabited-enum-branching\n+  \n+  fn assert_nonzero_nonmax(_1: u8) -> u8 {\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+0:47: +0:49\n+  \n+      bb0: {\n+-         switchInt(_1) -> [0: bb1, 255: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+3:13: +7:14\n++         switchInt(_1) -> [0: bb1, 255: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+3:13: +7:14\n+      }\n+  \n+      bb1: {\n+          unreachable;                     // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+10:13: +10:26\n+      }\n+  \n+      bb2: {\n+-         unreachable;                     // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+13:13: +13:26\n+-     }\n+- \n+-     bb3: {\n+          _0 = _1;                         // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+16:13: +16:20\n+          return;                          // scope 0 at $DIR/simplify_duplicate_unreachable_blocks.rs:+17:13: +17:21\n+      }\n+  }\n+  "}, {"sha": "e2578407fea9db894319b9c7b6c263bb3d3ab0d0", "filename": "tests/mir-opt/simplify_duplicate_unreachable_blocks.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_duplicate_unreachable_blocks.rs?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -0,0 +1,30 @@\n+#![feature(custom_mir, core_intrinsics)]\n+#![crate_type = \"lib\"]\n+\n+use std::intrinsics::mir::*;\n+\n+// unit-test: SimplifyCfg-after-uninhabited-enum-branching\n+\n+// EMIT_MIR simplify_duplicate_unreachable_blocks.assert_nonzero_nonmax.SimplifyCfg-after-uninhabited-enum-branching.diff\n+#[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n+pub unsafe fn assert_nonzero_nonmax(x: u8) -> u8 {\n+    mir!(\n+        {\n+            match x {\n+                0 => unreachable1,\n+                u8::MAX => unreachable2,\n+                _ => retblock,\n+            }\n+        }\n+        unreachable1 = {\n+            Unreachable()\n+        }\n+        unreachable2 = {\n+            Unreachable()\n+        }\n+        retblock = {\n+            RET = x;\n+            Return()\n+        }\n+    )\n+}"}, {"sha": "935dbb28b0f5ab1d430faa2b8b8f21cbe11fdcbb", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -26,37 +26,37 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n         _3 = discriminant(_1);           // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n-        switchInt(move _3) -> [0: bb2, 1: bb1, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n+        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+3:13: +3:20\n     }\n \n     bb1: {\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         _2 = ControlFlow::<E, T>::Break(move _5); // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n-        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+5:47: +5:48\n     }\n \n     bb2: {\n+        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+3:19: +3:20\n+    }\n+\n+    bb3: {\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         _2 = ControlFlow::<E, T>::Continue(move _4); // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n-        goto -> bb3;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n+        goto -> bb4;                     // scope 0 at $DIR/try_identity_e2e.rs:+4:49: +4:50\n     }\n \n-    bb3: {\n+    bb4: {\n         _6 = discriminant(_2);           // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n+        switchInt(move _6) -> [0: bb6, 1: bb5, otherwise: bb2]; // scope 0 at $DIR/try_identity_e2e.rs:+2:9: +7:10\n     }\n \n-    bb4: {\n+    bb5: {\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         _0 = Result::<T, E>::Err(move _8); // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         StorageDead(_2);                 // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n         return;                          // scope 0 at $DIR/try_identity_e2e.rs:+12:1: +12:2\n     }\n \n-    bb5: {\n-        unreachable;                     // scope 0 at $DIR/try_identity_e2e.rs:+2:15: +7:10\n-    }\n-\n     bb6: {\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         _0 = Result::<T, E>::Ok(move _7); // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6"}, {"sha": "a0b556640755b038b471e4202fd3368d824232bc", "filename": "tests/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -34,7 +34,7 @@ fn main() -> () {\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-        switchInt(move _8) -> [4: bb5, 5: bb3, otherwise: bb4]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+        switchInt(move _8) -> [4: bb4, 5: bb3, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n     }\n \n     bb2: {\n@@ -49,22 +49,18 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+        goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n     }\n \n     bb4: {\n-        unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-    }\n-\n-    bb5: {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-        goto -> bb6;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+        goto -> bb5;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "58d6e42812f90ffe214cacc8976dfc3f1045ebcf", "filename": "tests/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -63,7 +63,7 @@\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-          switchInt(move _8) -> [4: bb8, 5: bb6, otherwise: bb7]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n+          switchInt(move _8) -> [4: bb7, 5: bb6, otherwise: bb2]; // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:5: +7:19\n       }\n   \n       bb6: {\n@@ -74,22 +74,18 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:21: +9:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n-          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n+          goto -> bb8;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+9:23: +9:24\n       }\n   \n       bb7: {\n-          unreachable;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+7:11: +7:19\n-      }\n-  \n-      bb8: {\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb9;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n+          goto -> bb8;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:+8:21: +8:24\n       }\n   \n-      bb9: {\n+      bb8: {\n           StorageDead(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           StorageDead(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:+10:6: +10:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching.rs:+0:11: +11:2"}, {"sha": "0368b5f18c9a9b33cc9f5a9189055b3108b95080", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -63,7 +63,7 @@ fn main() -> () {\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n         _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-        switchInt(move _10) -> [2: bb7, 3: bb5, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+        switchInt(move _10) -> [2: bb6, 3: bb5, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n     }\n \n     bb5: {\n@@ -74,25 +74,21 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+        goto -> bb7;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n     }\n \n     bb6: {\n-        unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-    }\n-\n-    bb7: {\n         StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-        goto -> bb8;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+        goto -> bb7;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n     }\n \n-    bb8: {\n+    bb7: {\n         StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n         _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}, {"sha": "73353941fae7074ca88118adb8d3979d2d06c648", "filename": "tests/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2420bd34ba68a625840022de2a56aec228500359/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=2420bd34ba68a625840022de2a56aec228500359", "patch": "@@ -84,8 +84,8 @@\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+8:6: +8:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +15:6\n           _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n--         switchInt(move _10) -> [0: bb9, 1: bb10, 2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n-+         switchInt(move _10) -> [2: bb11, 3: bb7, otherwise: bb8]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n+-         switchInt(move _10) -> [0: bb8, 1: bb9, 2: bb10, 3: bb7, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n++         switchInt(move _10) -> [2: bb10, 3: bb7, otherwise: bb2]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:5: +10:21\n       }\n   \n       bb7: {\n@@ -96,44 +96,40 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:21: +14:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+14:23: +14:24\n       }\n   \n       bb8: {\n-          unreachable;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:+10:11: +10:21\n-      }\n-  \n-      bb9: {\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+11:24: +11:34\n       }\n   \n-      bb10: {\n+      bb9: {\n           StorageLive(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:24: +12:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+12:33: +12:34\n       }\n   \n-      bb11: {\n+      bb10: {\n           StorageLive(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:21: +13:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n-          goto -> bb12;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n+          goto -> bb11;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:+13:23: +13:24\n       }\n   \n-      bb12: {\n+      bb11: {\n           StorageDead(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:+15:6: +15:7\n           _0 = const ();                   // scope 0 at $DIR/uninhabited_enum_branching2.rs:+0:11: +16:2\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching2.rs:+16:1: +16:2"}]}