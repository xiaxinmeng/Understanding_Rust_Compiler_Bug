{"sha": "c2b4c2dffaab572cc060e96e52ded4b108614b82", "node_id": "C_kwDOAAsO6NoAKGMyYjRjMmRmZmFhYjU3MmNjMDYwZTk2ZTUyZGVkNGIxMDg2MTRiODI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T22:12:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-22T22:12:32Z"}, "message": "Auto merge of #95739 - lqd:proc-macro-expansions, r=wesleywiser\n\nself-profiler: record spans for proc-macro expansions\n\nThis PR is a follow-up to #95473, using the arg recorder feature from #95689:\n- it adds support code to easily record spans in the event's arguments, when using `generic_activity_with_arg_recorder`.\n- uses that to record the spans where proc-macro expansions happen in addition to their name.\n\nAs for the other 2 PRs, the goal here is to provide visibility into proc-macro expansion performance, so that users can diagnose which uses of proc-macros in their code could be causing compile time issues.\n\nSome areas where I'd love feedback:\n- [x] the API and names: the `SpannedEventArgRecorder` trait and its method, much like #95689 had the same question about the `EventArgRecorder` naming\n- [x] we don't currently have a way to record the names of the event arguments, so should `record_arg_spanned` record the span as \"location: {}\" or similar ?", "tree": {"sha": "e685604e471b86b9e3d737f6440a6c922a8c7844", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e685604e471b86b9e3d737f6440a6c922a8c7844"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b4c2dffaab572cc060e96e52ded4b108614b82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b4c2dffaab572cc060e96e52ded4b108614b82", "html_url": "https://github.com/rust-lang/rust/commit/c2b4c2dffaab572cc060e96e52ded4b108614b82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b4c2dffaab572cc060e96e52ded4b108614b82/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4ec0e7cff545e932ce30e39087b16687f0affa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ec0e7cff545e932ce30e39087b16687f0affa1", "html_url": "https://github.com/rust-lang/rust/commit/f4ec0e7cff545e932ce30e39087b16687f0affa1"}, {"sha": "c52539605818d5c00870e1e973e99e8220c4a888", "url": "https://api.github.com/repos/rust-lang/rust/commits/c52539605818d5c00870e1e973e99e8220c4a888", "html_url": "https://github.com/rust-lang/rust/commit/c52539605818d5c00870e1e973e99e8220c4a888"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "8e1966a0711d6c6087b0dc540f34f5e34ae3a0bd", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=c2b4c2dffaab572cc060e96e52ded4b108614b82", "patch": "@@ -9,6 +9,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorGuaranteed;\n use rustc_parse::nt_to_tokenstream;\n use rustc_parse::parser::ForceCollect;\n+use rustc_span::profiling::SpannedEventArgRecorder;\n use rustc_span::{Span, DUMMY_SP};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n@@ -25,7 +26,10 @@ impl base::ProcMacro for BangProcMacro {\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n-            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+            });\n+\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -51,7 +55,10 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n         let _timer =\n-            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+            });\n+\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -103,7 +110,9 @@ impl MultiItemModifier for ProcMacroDerive {\n \n         let stream = {\n             let _timer =\n-                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+                ecx.sess.prof.generic_activity_with_arg_recorder(\"expand_proc_macro\", |recorder| {\n+                    recorder.record_arg_with_span(ecx.expansion_descr(), span);\n+                });\n             let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n             let server = proc_macro_server::Rustc::new(ecx);\n             match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {"}, {"sha": "f22faef2580a56c6482570ba083e44fc790eb548", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=c2b4c2dffaab572cc060e96e52ded4b108614b82", "patch": "@@ -59,6 +59,8 @@ pub use symbol::{sym, Symbol};\n mod analyze_source_file;\n pub mod fatal_error;\n \n+pub mod profiling;\n+\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{Lock, Lrc};\n "}, {"sha": "f169007fab43d77ff58d09d7168049706d2fee08", "filename": "compiler/rustc_span/src/profiling.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b4c2dffaab572cc060e96e52ded4b108614b82/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fprofiling.rs?ref=c2b4c2dffaab572cc060e96e52ded4b108614b82", "patch": "@@ -0,0 +1,35 @@\n+use std::borrow::Borrow;\n+\n+use rustc_data_structures::profiling::EventArgRecorder;\n+\n+/// Extension trait for self-profiling purposes: allows to record spans within a generic activity's\n+/// event arguments.\n+pub trait SpannedEventArgRecorder {\n+    /// Records the following event arguments within the current generic activity being profiled:\n+    /// - the provided `event_arg`\n+    /// - a string representation of the provided `span`\n+    ///\n+    /// Note: when self-profiling with costly event arguments, at least one argument\n+    /// needs to be recorded. A panic will be triggered if that doesn't happen.\n+    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    where\n+        A: Borrow<str> + Into<String>;\n+}\n+\n+impl SpannedEventArgRecorder for EventArgRecorder<'_> {\n+    fn record_arg_with_span<A>(&mut self, event_arg: A, span: crate::Span)\n+    where\n+        A: Borrow<str> + Into<String>,\n+    {\n+        self.record_arg(event_arg);\n+\n+        let span_arg = crate::with_session_globals(|session_globals| {\n+            if let Some(source_map) = &*session_globals.source_map.borrow() {\n+                source_map.span_to_embeddable_string(span)\n+            } else {\n+                format!(\"{:?}\", span)\n+            }\n+        });\n+        self.record_arg(span_arg);\n+    }\n+}"}]}