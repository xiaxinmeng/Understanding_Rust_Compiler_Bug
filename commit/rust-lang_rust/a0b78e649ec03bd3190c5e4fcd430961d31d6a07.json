{"sha": "a0b78e649ec03bd3190c5e4fcd430961d31d6a07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYjc4ZTY0OWVjMDNiZDMxOTBjNWU0ZmNkNDMwOTYxZDMxZDZhMDc=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-12T18:59:21Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-07-12T19:01:02Z"}, "message": "\"Narrow scope forgives many sins.\" -- M. Schwern", "tree": {"sha": "dbb27892a5198e57199f32c5408fdb27357c4858", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbb27892a5198e57199f32c5408fdb27357c4858"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0b78e649ec03bd3190c5e4fcd430961d31d6a07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b78e649ec03bd3190c5e4fcd430961d31d6a07", "html_url": "https://github.com/rust-lang/rust/commit/a0b78e649ec03bd3190c5e4fcd430961d31d6a07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0b78e649ec03bd3190c5e4fcd430961d31d6a07/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b77a5011b6e7f57a403f3a4d334da6190a1d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b77a5011b6e7f57a403f3a4d334da6190a1d49", "html_url": "https://github.com/rust-lang/rust/commit/a9b77a5011b6e7f57a403f3a4d334da6190a1d49"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "e250d2c999305691d1367d44d0701f3ce967ced1", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a0b78e649ec03bd3190c5e4fcd430961d31d6a07/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0b78e649ec03bd3190c5e4fcd430961d31d6a07/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a0b78e649ec03bd3190c5e4fcd430961d31d6a07", "patch": "@@ -7129,7 +7129,6 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n         methods = anon_obj.methods,\n         dtor = none[@ast::method]);\n \n-    let option::t[result] with_obj_val = none;\n     let ty::t with_obj_ty;\n     auto vtbl;\n     alt (anon_obj.with_obj) {\n@@ -7152,11 +7151,6 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n                                additional_field_tys);\n         }\n         case (some(?e)) {\n-            // If with_obj (the object being extended) exists, translate it.\n-            // Translating with_obj returns a ValueRef (pointer to a 2-word\n-            // value) wrapped in a result.\n-            with_obj_val = some(trans_expr(bcx, e));\n-\n             // TODO: What makes more sense to get the type of an expr --\n             // calling ty::expr_ty(ccx.tcx, e) on it or calling\n             // ty::node_id_to_type(ccx.tcx, id) on its id?\n@@ -7327,17 +7321,22 @@ fn trans_anon_obj(@block_ctxt bcx, &span sp, &ast::anon_obj anon_obj,\n             i += 1;\n         }\n \n-        // Copy a pointer to the with_obj into the object's body.\n-        auto body_with_obj =\n-            GEP_tup_like(bcx, body_ty, body.val,\n-                         ~[0, abi::obj_body_elt_with_obj]);\n-        bcx = body_with_obj.bcx;\n-        alt (with_obj_val) {\n-            case (some(?v)) {\n+        // If there's a with_obj, copy a pointer to it into the object's body.\n+        alt (anon_obj.with_obj) {\n+            case (none) { }\n+            case (some(?e)) {\n+                // If with_obj (the object being extended) exists, translate\n+                // it.  Translating with_obj returns a ValueRef (pointer to a\n+                // 2-word value) wrapped in a result.\n+                let result with_obj_val = trans_expr(bcx, e);\n+\n+                auto body_with_obj =\n+                    GEP_tup_like(bcx, body_ty, body.val,\n+                                 ~[0, abi::obj_body_elt_with_obj]);\n+                bcx = body_with_obj.bcx;\n                 bcx = copy_val(bcx, INIT, body_with_obj.val,\n-                               v.val, with_obj_ty).bcx;\n+                               with_obj_val.val, with_obj_ty).bcx;\n             }\n-            case (_) {}\n         }\n \n         // Store box ptr in outer pair."}]}