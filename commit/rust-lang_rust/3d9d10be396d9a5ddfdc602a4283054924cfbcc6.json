{"sha": "3d9d10be396d9a5ddfdc602a4283054924cfbcc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWQxMGJlMzk2ZDlhNWRkZmRjNjAyYTQyODMwNTQ5MjRjZmJjYzY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-04T09:21:14Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-09-04T09:25:17Z"}, "message": "fix: use placeholder as default type in `Extract into function`.", "tree": {"sha": "2d5b850b827fbc7f8a6482eea35d7510914f685c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5b850b827fbc7f8a6482eea35d7510914f685c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9d10be396d9a5ddfdc602a4283054924cfbcc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9d10be396d9a5ddfdc602a4283054924cfbcc6", "html_url": "https://github.com/rust-lang/rust/commit/3d9d10be396d9a5ddfdc602a4283054924cfbcc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9d10be396d9a5ddfdc602a4283054924cfbcc6/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c650edf60782ae2a8da6134d3b080e7e3dca00", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c650edf60782ae2a8da6134d3b080e7e3dca00", "html_url": "https://github.com/rust-lang/rust/commit/a6c650edf60782ae2a8da6134d3b080e7e3dca00"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "1e21050911d7cc878b4b286f49c6772f0c335ed2", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3d9d10be396d9a5ddfdc602a4283054924cfbcc6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9d10be396d9a5ddfdc602a4283054924cfbcc6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=3d9d10be396d9a5ddfdc602a4283054924cfbcc6", "patch": "@@ -1319,23 +1319,23 @@ impl Function {\n                     .type_arguments()\n                     .nth(1)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n             FlowHandler::If { .. } => make::ext::ty_bool(),\n             FlowHandler::IfOption { action } => {\n                 let handler_ty = action\n                     .expr_ty(ctx)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_option(handler_ty)\n             }\n             FlowHandler::MatchOption { .. } => make::ext::ty_option(fun_ty.make_ty(ctx, module)),\n             FlowHandler::MatchResult { err } => {\n                 let handler_ty = err\n                     .expr_ty(ctx)\n                     .map(|ty| make_ty(&ty, ctx, module))\n-                    .unwrap_or_else(make::ty_unit);\n+                    .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n         };\n@@ -1501,7 +1501,7 @@ fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext, module: hir::Module) -> String {\n-    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"()\".to_string())\n+    ty.display_source_code(ctx.db(), module.into()).ok().unwrap_or_else(|| \"_\".to_string())\n }\n \n fn make_ty(ty: &hir::Type, ctx: &AssistContext, module: hir::Module) -> ast::Type {\n@@ -4191,6 +4191,29 @@ fn main() {\n fn $0fun_name(bar: &str) {\n     m!(bar);\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn unresolveable_types_default_to_placeholder() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+fn foo() {\n+    let a = __unresolved;\n+    let _ = $0{a}$0;\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    let a = __unresolved;\n+    let _ = fun_name(a);\n+}\n+\n+fn $0fun_name(a: _) -> _ {\n+    a\n+}\n \"#,\n         );\n     }"}]}