{"sha": "aff3db26aa6e427b68fea577548a270cacdd0153", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjNkYjI2YWE2ZTQyN2I2OGZlYTU3NzU0OGEyNzBjYWNkZDAxNTM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T15:51:10Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-25T15:55:18Z"}, "message": "use mutable function argument syntax in treemap", "tree": {"sha": "7fb5cf1ebab88101e36ea0a41997026822779316", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb5cf1ebab88101e36ea0a41997026822779316"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff3db26aa6e427b68fea577548a270cacdd0153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff3db26aa6e427b68fea577548a270cacdd0153", "html_url": "https://github.com/rust-lang/rust/commit/aff3db26aa6e427b68fea577548a270cacdd0153", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff3db26aa6e427b68fea577548a270cacdd0153/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e447521c1ca2dbead5b485ddc43060b282840817", "url": "https://api.github.com/repos/rust-lang/rust/commits/e447521c1ca2dbead5b485ddc43060b282840817", "html_url": "https://github.com/rust-lang/rust/commit/e447521c1ca2dbead5b485ddc43060b282840817"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "ff8a054700f3bf758352f9a41ceb223a624400db", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aff3db26aa6e427b68fea577548a270cacdd0153/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff3db26aa6e427b68fea577548a270cacdd0153/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=aff3db26aa6e427b68fea577548a270cacdd0153", "patch": "@@ -526,9 +526,8 @@ pure fn each_reverse<K: Ord, V>(node: &Option<~TreeNode<K, V>>,\n }\n \n // Remove left horizontal link by rotating right\n-fn skew<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn skew<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n     if node.left.map_default(false, |x| x.level == node.level) {\n-        let mut node = node;\n         let mut save = node.left.swap_unwrap();\n         node.left <-> save.right; // save.right now None\n         save.right = Some(node);\n@@ -540,10 +539,9 @@ fn skew<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n \n // Remove dual horizontal link by rotating left and increasing level of\n // the parent\n-fn split<K: Ord, V>(node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n+fn split<K: Ord, V>(mut node: ~TreeNode<K, V>) -> ~TreeNode<K, V> {\n     if node.right.map_default(false,\n       |x| x.right.map_default(false, |y| y.level == node.level)) {\n-        let mut node = node;\n         let mut save = node.right.swap_unwrap();\n         node.right <-> save.left; // save.left now None\n         save.left = Some(node);\n@@ -582,8 +580,7 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n     fn heir_swap<K: Ord, V>(node: &mut TreeNode<K, V>,\n                             child: &mut Option<~TreeNode<K, V>>) {\n         // *could* be done without recursion, but it won't borrow check\n-        do child.mutate |child| {\n-            let mut child = child;\n+        do child.mutate |mut child| {\n             if child.right.is_some() {\n                 heir_swap(&mut *node, &mut child.right);\n             } else {\n@@ -636,15 +633,13 @@ fn remove<K: Ord, V>(node: &mut Option<~TreeNode<K, V>>, key: &K) -> bool {\n             save.level -= 1;\n \n             if right_level > save.level {\n-                do save.right.mutate |x| {\n-                    let mut x = x; x.level = save.level; x\n-                }\n+                do save.right.mutate |mut x| { x.level = save.level; x }\n             }\n \n             save = skew(save);\n \n-            do save.right.mutate |right| {\n-                let mut right = skew(right);\n+            do save.right.mutate |mut right| {\n+                right = skew(right);\n                 right.right.mutate(skew);\n                 right\n             }"}]}