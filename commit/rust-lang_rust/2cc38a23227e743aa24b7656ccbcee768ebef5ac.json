{"sha": "2cc38a23227e743aa24b7656ccbcee768ebef5ac", "node_id": "C_kwDOAAsO6NoAKDJjYzM4YTIzMjI3ZTc0M2FhMjRiNzY1NmNjYmNlZTc2OGViZWY1YWM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-05T18:46:35Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-01-05T18:46:35Z"}, "message": "Lint `iter_not_returning_iterator` on the trait definition rather than the implementation", "tree": {"sha": "64483779eedbedea2d393e85aa76693599e4d7bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64483779eedbedea2d393e85aa76693599e4d7bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cc38a23227e743aa24b7656ccbcee768ebef5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cc38a23227e743aa24b7656ccbcee768ebef5ac", "html_url": "https://github.com/rust-lang/rust/commit/2cc38a23227e743aa24b7656ccbcee768ebef5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cc38a23227e743aa24b7656ccbcee768ebef5ac/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92048f4826a445872eb50760a4f46a92837b243e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92048f4826a445872eb50760a4f46a92837b243e", "html_url": "https://github.com/rust-lang/rust/commit/92048f4826a445872eb50760a4f46a92837b243e"}], "stats": {"total": 81, "additions": 60, "deletions": 21}, "files": [{"sha": "91d3c00039a02f5bcc5c862aaaeab400e63ce58e", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2cc38a23227e743aa24b7656ccbcee768ebef5ac/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc38a23227e743aa24b7656ccbcee768ebef5ac/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=2cc38a23227e743aa24b7656ccbcee768ebef5ac", "patch": "@@ -1,8 +1,7 @@\n-use clippy_utils::{diagnostics::span_lint, return_ty, ty::implements_trait};\n-use rustc_hir::{ImplItem, ImplItemKind};\n+use clippy_utils::{diagnostics::span_lint, get_parent_node, ty::implements_trait};\n+use rustc_hir::{def_id::LocalDefId, FnSig, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::kw;\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n@@ -41,25 +40,47 @@ declare_clippy_lint! {\n declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n-    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name = impl_item.ident.name.as_str();\n-        if_chain! {\n-            if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n-            let ret_ty = return_ty(cx, impl_item.hir_id());\n-            if matches!(name, \"iter\" | \"iter_mut\");\n-            if let [param] = cx.tcx.fn_arg_names(impl_item.def_id);\n-            if param.name == kw::SelfLower;\n-            if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n-            if !implements_trait(cx, ret_ty, iter_trait_id, &[]);\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        let name = item.ident.name.as_str();\n+        if matches!(name, \"iter\" | \"iter_mut\") {\n+            if let TraitItemKind::Fn(fn_sig, _) = &item.kind {\n+                check_sig(cx, name, fn_sig, item.def_id);\n+            }\n+        }\n+    }\n \n-            then {\n-                span_lint(\n-                    cx,\n-                    ITER_NOT_RETURNING_ITERATOR,\n-                    fn_sig.span,\n-                    &format!(\"this method is named `{}` but its return type does not implement `Iterator`\", name),\n-                );\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'tcx>) {\n+        let name = item.ident.name.as_str();\n+        if matches!(name, \"iter\" | \"iter_mut\")\n+            && !matches!(\n+                get_parent_node(cx.tcx, item.hir_id()),\n+                Some(Node::Item(Item { kind: ItemKind::Impl(i), .. })) if i.of_trait.is_some()\n+            )\n+        {\n+            if let ImplItemKind::Fn(fn_sig, _) = &item.kind {\n+                check_sig(cx, name, fn_sig, item.def_id);\n             }\n         }\n     }\n }\n+\n+fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n+    if sig.decl.implicit_self.has_implicit_self() {\n+        let ret_ty = cx.tcx.fn_sig(fn_id).skip_binder().output();\n+        if cx\n+            .tcx\n+            .get_diagnostic_item(sym::Iterator)\n+            .map_or(false, |iter_id| !implements_trait(cx, ret_ty, iter_id, &[]))\n+        {\n+            span_lint(\n+                cx,\n+                ITER_NOT_RETURNING_ITERATOR,\n+                sig.span,\n+                &format!(\n+                    \"this method is named `{}` but its return type does not implement `Iterator`\",\n+                    name\n+                ),\n+            );\n+        }\n+    }\n+}"}, {"sha": "f5ee044576c532b44a81660ea64033e4811d83d5", "filename": "tests/ui/iter_not_returning_iterator.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2cc38a23227e743aa24b7656ccbcee768ebef5ac/tests%2Fui%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cc38a23227e743aa24b7656ccbcee768ebef5ac/tests%2Fui%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.rs?ref=2cc38a23227e743aa24b7656ccbcee768ebef5ac", "patch": "@@ -44,4 +44,16 @@ impl Iterator for Counter {\n     }\n }\n \n+trait Iter {\n+    type I;\n+    fn iter(&self) -> Self::I;\n+}\n+\n+impl Iter for () {\n+    type I = core::slice::Iter<'static, ()>;\n+    fn iter(&self) -> Self::I {\n+        [].iter()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ddb2b88d5f90b60040900560f25f0d843de96cfc", "filename": "tests/ui/iter_not_returning_iterator.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cc38a23227e743aa24b7656ccbcee768ebef5ac/tests%2Fui%2Fiter_not_returning_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cc38a23227e743aa24b7656ccbcee768ebef5ac/tests%2Fui%2Fiter_not_returning_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.stderr?ref=2cc38a23227e743aa24b7656ccbcee768ebef5ac", "patch": "@@ -12,5 +12,11 @@ error: this method is named `iter_mut` but its return type does not implement `I\n LL |     fn iter_mut(&self) -> Counter2 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: this method is named `iter` but its return type does not implement `Iterator`\n+  --> $DIR/iter_not_returning_iterator.rs:49:5\n+   |\n+LL |     fn iter(&self) -> Self::I;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}