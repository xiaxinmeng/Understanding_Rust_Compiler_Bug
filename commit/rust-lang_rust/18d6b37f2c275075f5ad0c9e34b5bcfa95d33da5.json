{"sha": "18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDZiMzdmMmMyNzUwNzVmNWFkMGM5ZTM0YjViY2ZhOTVkMzNkYTU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-23T04:54:10Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-12-31T08:16:02Z"}, "message": "Use `entry` API to avoid double lookup when interning dep nodes", "tree": {"sha": "1503f4258b4a338b5778d44f1434c635766eaa1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1503f4258b4a338b5778d44f1434c635766eaa1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5", "html_url": "https://github.com/rust-lang/rust/commit/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a426d47f5805a1127778aef27e1fd2315649a803", "url": "https://api.github.com/repos/rust-lang/rust/commits/a426d47f5805a1127778aef27e1fd2315649a803", "html_url": "https://github.com/rust-lang/rust/commit/a426d47f5805a1127778aef27e1fd2315649a803"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "5268c6cdd639be1fa32b7a74162b2627ab8998f3", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=18d6b37f2c275075f5ad0c9e34b5bcfa95d33da5", "patch": "@@ -6,6 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::sync::{Lrc, Lock};\n use std::env;\n use std::hash::Hash;\n+use std::collections::hash_map::Entry;\n use ty::{self, TyCtxt};\n use util::common::{ProfileQueriesMsg, profq_msg};\n \n@@ -655,17 +656,13 @@ impl DepGraph {\n         let (dep_node_index, did_allocation) = {\n             let mut current = data.current.borrow_mut();\n \n-            if let Some(&dep_node_index) = current.node_to_node_index.get(&dep_node) {\n-                // Someone else allocated it before us\n-                (dep_node_index, false)\n-            } else {\n-                // Copy the fingerprint from the previous graph,\n-                // so we don't have to recompute it\n-                let fingerprint = data.previous.fingerprint_by_index(prev_dep_node_index);\n-                // We allocating an entry for the node in the current dependency graph and\n-                // adding all the appropriate edges imported from the previous graph\n-                (current.alloc_node(*dep_node, current_deps, fingerprint), true)\n-            }\n+            // Copy the fingerprint from the previous graph,\n+            // so we don't have to recompute it\n+            let fingerprint = data.previous.fingerprint_by_index(prev_dep_node_index);\n+\n+            // We allocating an entry for the node in the current dependency graph and\n+            // adding all the appropriate edges imported from the previous graph\n+            current.intern_node(*dep_node, current_deps, fingerprint)\n         };\n \n         // ... emitting any stored diagnostic ...\n@@ -958,11 +955,7 @@ impl CurrentDepGraph {\n                 hash: fingerprint,\n             };\n \n-            if let Some(&index) = self.node_to_node_index.get(&target_dep_node) {\n-                index\n-            } else {\n-                self.alloc_node(target_dep_node, reads, Fingerprint::ZERO)\n-            }\n+            self.intern_node(target_dep_node, reads, Fingerprint::ZERO).0\n         } else {\n             bug!(\"pop_anon_task() - Expected anonymous task to be popped\")\n         }\n@@ -1023,21 +1016,37 @@ impl CurrentDepGraph {\n         })\n     }\n \n-    fn alloc_node(&mut self,\n-                  dep_node: DepNode,\n-                  edges: SmallVec<[DepNodeIndex; 8]>,\n-                  fingerprint: Fingerprint)\n-                  -> DepNodeIndex {\n-        debug_assert_eq!(self.node_to_node_index.len(), self.data.len());\n+    fn alloc_node(\n+        &mut self,\n+        dep_node: DepNode,\n+        edges: SmallVec<[DepNodeIndex; 8]>,\n+        fingerprint: Fingerprint\n+    ) -> DepNodeIndex {\n         debug_assert!(!self.node_to_node_index.contains_key(&dep_node));\n-        let dep_node_index = DepNodeIndex::new(self.data.len());\n-        self.data.push(DepNodeData {\n-            node: dep_node,\n-            edges,\n-            fingerprint\n-        });\n-        self.node_to_node_index.insert(dep_node, dep_node_index);\n-        dep_node_index\n+        self.intern_node(dep_node, edges, fingerprint).0\n+    }\n+\n+    fn intern_node(\n+        &mut self,\n+        dep_node: DepNode,\n+        edges: SmallVec<[DepNodeIndex; 8]>,\n+        fingerprint: Fingerprint\n+    ) -> (DepNodeIndex, bool) {\n+        debug_assert_eq!(self.node_to_node_index.len(), self.data.len());\n+\n+        match self.node_to_node_index.entry(dep_node) {\n+            Entry::Occupied(entry) => (*entry.get(), false),\n+            Entry::Vacant(entry) => {\n+                let dep_node_index = DepNodeIndex::new(self.data.len());\n+                self.data.push(DepNodeData {\n+                    node: dep_node,\n+                    edges,\n+                    fingerprint\n+                });\n+                entry.insert(dep_node_index);\n+                (dep_node_index, true)\n+            }\n+        }\n     }\n }\n "}]}