{"sha": "526640668d1d7469e0c767452bb5ac60c3fa0043", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNjY0MDY2OGQxZDc0NjllMGM3Njc0NTJiYjVhYzYwYzNmYTAwNDM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-25T01:09:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-02-28T18:50:13Z"}, "message": "rustbuild: Enable cross-compiling LLVM\n\nCurrently all multi-host builds assume the the build platform can run the\n`llvm-config` binary generated for each host platform we're creating a compiler\nfor. Unfortunately this assumption isn't always true when cross compiling, so we\nneed to handle this case.\n\nThis commit alters the build script of `rustc_llvm` to understand when it's\nrunning an `llvm-config` which is different than the platform we're targeting for.", "tree": {"sha": "1a8650d71f081731c9a5b2317705a130c81dead4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a8650d71f081731c9a5b2317705a130c81dead4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/526640668d1d7469e0c767452bb5ac60c3fa0043", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/526640668d1d7469e0c767452bb5ac60c3fa0043", "html_url": "https://github.com/rust-lang/rust/commit/526640668d1d7469e0c767452bb5ac60c3fa0043", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/526640668d1d7469e0c767452bb5ac60c3fa0043/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a707a61caed22687b0a2ea9a4eea855109eafb26", "url": "https://api.github.com/repos/rust-lang/rust/commits/a707a61caed22687b0a2ea9a4eea855109eafb26", "html_url": "https://github.com/rust-lang/rust/commit/a707a61caed22687b0a2ea9a4eea855109eafb26"}], "stats": {"total": 57, "additions": 50, "deletions": 7}, "files": [{"sha": "cb7cf9bd9afbf5972ba804a1db0e5f63d5d1092a", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/526640668d1d7469e0c767452bb5ac60c3fa0043/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526640668d1d7469e0c767452bb5ac60c3fa0043/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=526640668d1d7469e0c767452bb5ac60c3fa0043", "patch": "@@ -131,10 +131,13 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n     if !build.unstable_features {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n-    if let Some(config) = build.config.target_config.get(target) {\n-        if let Some(ref s) = config.llvm_config {\n-            cargo.env(\"LLVM_CONFIG\", s);\n-        }\n+    let target_config = build.config.target_config.get(target);\n+    if let Some(ref s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n+        cargo.env(\"LLVM_CONFIG\", s);\n+    } else {\n+        let llvm_config = build.llvm_out(&build.config.build).join(\"bin\")\n+                               .join(exe(\"llvm-config\", target));\n+        cargo.env(\"LLVM_CONFIG\", llvm_config);\n     }\n     if build.config.llvm_static_stdcpp {\n         cargo.env(\"LLVM_STATIC_STDCPP\","}, {"sha": "59164161b3d5ec12289ebec50f883f762dca9517", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/526640668d1d7469e0c767452bb5ac60c3fa0043/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/526640668d1d7469e0c767452bb5ac60c3fa0043/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=526640668d1d7469e0c767452bb5ac60c3fa0043", "patch": "@@ -38,6 +38,25 @@ fn main() {\n \n     println!(\"cargo:rerun-if-changed={}\", llvm_config.display());\n \n+    // Test whether we're cross-compiling LLVM. This is a pretty rare case\n+    // currently where we're producing an LLVM for a different platform than\n+    // what this build script is currently running on.\n+    //\n+    // In that case, there's no guarantee that we can actually run the target,\n+    // so the build system works around this by giving us the LLVM_CONFIG for\n+    // the host platform. This only really works if the host LLVM and target\n+    // LLVM are compiled the same way, but for us that's typically the case.\n+    //\n+    // We detect this cross compiling situation by asking llvm-config what it's\n+    // host-target is. If that's not the TARGET, then we're cross compiling.\n+    // This generally just means that we can't trust all the output of\n+    // llvm-config becaues it might be targeted for the host rather than the\n+    // target.\n+    let target = env::var(\"TARGET\").unwrap();\n+    let host = output(Command::new(&llvm_config).arg(\"--host-target\"));\n+    let host = host.trim();\n+    let is_crossed = target != host;\n+\n     let optional_components = [\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n                                \"pnacl\"];\n \n@@ -69,6 +88,10 @@ fn main() {\n     let cxxflags = output(&mut cmd);\n     let mut cfg = gcc::Config::new();\n     for flag in cxxflags.split_whitespace() {\n+        // Ignore flags like `-m64` when we're doing a cross build\n+        if is_crossed && flag.starts_with(\"-m\") {\n+            continue\n+        }\n         cfg.flag(flag);\n     }\n     cfg.file(\"../rustllvm/ExecutionEngineWrapper.cpp\")\n@@ -79,9 +102,16 @@ fn main() {\n        .cpp_link_stdlib(None) // we handle this below\n        .compile(\"librustllvm.a\");\n \n-    // Link in all LLVM libraries\n+    // Link in all LLVM libraries, if we're uwring the \"wrong\" llvm-config then\n+    // we don't pick up system libs because unfortunately they're for the host\n+    // of llvm-config, not the target that we're attempting to link.\n     let mut cmd = Command::new(&llvm_config);\n-    cmd.arg(\"--libs\").arg(\"--system-libs\").args(&components[..]);\n+    cmd.arg(\"--libs\");\n+    if !is_crossed {\n+        cmd.arg(\"--system-libs\");\n+    }\n+    cmd.args(&components[..]);\n+\n     for lib in output(&mut cmd).split_whitespace() {\n         let name = if lib.starts_with(\"-l\") {\n             &lib[2..]\n@@ -105,10 +135,20 @@ fn main() {\n     }\n \n     // LLVM ldflags\n+    //\n+    // If we're a cross-compile of LLVM then unfortunately we can't trust these\n+    // ldflags (largely where all the LLVM libs are located). Currently just\n+    // hack around this by replacing the host triple with the target and pray\n+    // that those -L directories are the same!\n     let mut cmd = Command::new(&llvm_config);\n     cmd.arg(\"--ldflags\");\n     for lib in output(&mut cmd).split_whitespace() {\n-        if lib.starts_with(\"-l\") {\n+        if is_crossed {\n+            if lib.starts_with(\"-L\") {\n+                println!(\"cargo:rustc-link-search=native={}\",\n+                         lib[2..].replace(&host, &target));\n+            }\n+        } else if lib.starts_with(\"-l\") {\n             println!(\"cargo:rustc-link-lib={}\", &lib[2..]);\n         } else if lib.starts_with(\"-L\") {\n             println!(\"cargo:rustc-link-search=native={}\", &lib[2..]);"}]}