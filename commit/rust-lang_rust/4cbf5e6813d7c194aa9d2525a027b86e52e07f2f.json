{"sha": "4cbf5e6813d7c194aa9d2525a027b86e52e07f2f", "node_id": "C_kwDOAAsO6NoAKDRjYmY1ZTY4MTNkN2MxOTRhYTlkMjUyNWEwMjdiODZlNTJlMDdmMmY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-01T21:10:36Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:22:27Z"}, "message": "Introduce composite debuginfo.", "tree": {"sha": "d192fb483f207dbec2198f2f44917323abdf1e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d192fb483f207dbec2198f2f44917323abdf1e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f", "html_url": "https://github.com/rust-lang/rust/commit/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5378b465f0fcb3c675950157cfc17c1ebf58295c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5378b465f0fcb3c675950157cfc17c1ebf58295c", "html_url": "https://github.com/rust-lang/rust/commit/5378b465f0fcb3c675950157cfc17c1ebf58295c"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "a81585d412846e641c968302f4540944e264ab0b", "filename": "src/debuginfo.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cbf5e6813d7c194aa9d2525a027b86e52e07f2f/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=4cbf5e6813d7c194aa9d2525a027b86e52e07f2f", "patch": "@@ -4,16 +4,25 @@ use rustc_codegen_ssa::traits::{DebugInfoBuilderMethods, DebugInfoMethods};\n use rustc_middle::mir;\n use rustc_middle::ty::{Instance, PolyExistentialTraitRef, Ty};\n use rustc_span::{SourceFile, Span, Symbol};\n-use rustc_target::abi::Size;\n use rustc_target::abi::call::FnAbi;\n+use rustc_target::abi::Size;\n+use std::ops::Range;\n \n use crate::builder::Builder;\n use crate::context::CodegenCx;\n \n impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n     // FIXME(eddyb) find a common convention for all of the debuginfo-related\n     // names (choose between `dbg`, `debug`, `debuginfo`, `debug_info` etc.).\n-    fn dbg_var_addr(&mut self, _dbg_var: Self::DIVariable, _scope_metadata: Self::DIScope, _variable_alloca: Self::Value, _direct_offset: Size, _indirect_offsets: &[Size]) {\n+    fn dbg_var_addr(\n+        &mut self,\n+        _dbg_var: Self::DIVariable,\n+        _scope_metadata: Self::DIScope,\n+        _variable_alloca: Self::Value,\n+        _direct_offset: Size,\n+        _indirect_offsets: &[Size],\n+        _fragment: Option<Range<Size>>,\n+    ) {\n         unimplemented!();\n     }\n \n@@ -31,32 +40,64 @@ impl<'a, 'gcc, 'tcx> DebugInfoBuilderMethods for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'gcc, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n-    fn create_vtable_debuginfo(&self, _ty: Ty<'tcx>, _trait_ref: Option<PolyExistentialTraitRef<'tcx>>, _vtable: Self::Value) {\n+    fn create_vtable_debuginfo(\n+        &self,\n+        _ty: Ty<'tcx>,\n+        _trait_ref: Option<PolyExistentialTraitRef<'tcx>>,\n+        _vtable: Self::Value,\n+    ) {\n         // TODO(antoyo)\n     }\n \n-    fn create_function_debug_context(&self, _instance: Instance<'tcx>, _fn_abi: &FnAbi<'tcx, Ty<'tcx>>, _llfn: RValue<'gcc>, _mir: &mir::Body<'tcx>) -> Option<FunctionDebugContext<Self::DIScope, Self::DILocation>> {\n+    fn create_function_debug_context(\n+        &self,\n+        _instance: Instance<'tcx>,\n+        _fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+        _llfn: RValue<'gcc>,\n+        _mir: &mir::Body<'tcx>,\n+    ) -> Option<FunctionDebugContext<Self::DIScope, Self::DILocation>> {\n         // TODO(antoyo)\n         None\n     }\n \n-    fn extend_scope_to_file(&self, _scope_metadata: Self::DIScope, _file: &SourceFile) -> Self::DIScope {\n+    fn extend_scope_to_file(\n+        &self,\n+        _scope_metadata: Self::DIScope,\n+        _file: &SourceFile,\n+    ) -> Self::DIScope {\n         unimplemented!();\n     }\n \n     fn debuginfo_finalize(&self) {\n         // TODO(antoyo)\n     }\n \n-    fn create_dbg_var(&self, _variable_name: Symbol, _variable_type: Ty<'tcx>, _scope_metadata: Self::DIScope, _variable_kind: VariableKind, _span: Span) -> Self::DIVariable {\n+    fn create_dbg_var(\n+        &self,\n+        _variable_name: Symbol,\n+        _variable_type: Ty<'tcx>,\n+        _scope_metadata: Self::DIScope,\n+        _variable_kind: VariableKind,\n+        _span: Span,\n+    ) -> Self::DIVariable {\n         unimplemented!();\n     }\n \n-    fn dbg_scope_fn(&self, _instance: Instance<'tcx>, _fn_abi: &FnAbi<'tcx, Ty<'tcx>>, _maybe_definition_llfn: Option<RValue<'gcc>>) -> Self::DIScope {\n+    fn dbg_scope_fn(\n+        &self,\n+        _instance: Instance<'tcx>,\n+        _fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n+        _maybe_definition_llfn: Option<RValue<'gcc>>,\n+    ) -> Self::DIScope {\n         unimplemented!();\n     }\n \n-    fn dbg_loc(&self, _scope: Self::DIScope, _inlined_at: Option<Self::DILocation>, _span: Span) -> Self::DILocation {\n+    fn dbg_loc(\n+        &self,\n+        _scope: Self::DIScope,\n+        _inlined_at: Option<Self::DILocation>,\n+        _span: Span,\n+    ) -> Self::DILocation {\n         unimplemented!();\n     }\n }"}]}