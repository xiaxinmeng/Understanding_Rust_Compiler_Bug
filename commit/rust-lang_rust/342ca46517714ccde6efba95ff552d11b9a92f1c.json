{"sha": "342ca46517714ccde6efba95ff552d11b9a92f1c", "node_id": "C_kwDOAAsO6NoAKDM0MmNhNDY1MTc3MTRjY2RlNmVmYmE5NWZmNTUyZDExYjlhOTJmMWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-10T20:15:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-10T20:15:45Z"}, "message": "Rollup merge of #108017 - chbaker0:fix-105967, r=chbaker0\n\nAdd `--no-undefined-version` link flag and fix associated breakage\n\nLLVM upstream sets `--no-undefined-version` by default in lld: https://reviews.llvm.org/D135402.\n\nDue to a bug in how version scripts are generated, this breaks the `dylib` output type for most crates. See https://github.com/rust-lang/rust/issues/105967#issuecomment-1428671533 for details.\n\nThis PR adds the flag to gcc flavor linkers in anticipation of this LLVM change rolling in, and patches `rustc` to not attempt to export `__rust_*` allocator symbols when they weren't generated.\n\nFixes #105967", "tree": {"sha": "dd3b11270980457ac988e1ec3349398857dfc163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3b11270980457ac988e1ec3349398857dfc163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342ca46517714ccde6efba95ff552d11b9a92f1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkC4/xCRBK7hj4Ov3rIwAAhqwIAIpbegDHfnsPCkfpAHp02pna\ntyPjZhBpjGIg2iOxTvReqdr1swoGs+E/VZo+UbthtggKc39vbN6Sud54d6YjA5HW\nZjnf8TkC1fVmuni9ZT3HMz8HniFjdlSSj12PSoZ0szgFmx7c/9aH+VD7xtLj8zNW\niYdyRfpdRTSZX5AIXhNumD12xvMPLEM6FfM0knielYZwzA5JuG3LV3gNVNVNTNM2\ntmWxYOedmYd8XixaRhBlvOHysbBX7/j+kniVuorD8beNSPvfV/iOWDwe34gmn/ln\n3i/Rq7GuhK4O7dMylVSStAQoor+Z7XjlbJX76HUBWMFD3eOZh1cwdHcGaQ0pWhA=\n=dlwI\n-----END PGP SIGNATURE-----\n", "payload": "tree dd3b11270980457ac988e1ec3349398857dfc163\nparent 93316d7f28b06ac2cc86526dec143952ad2a4b25\nparent cb41803899ae6531ea2e8fd236f67663e7815ae3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678479345 +0100\ncommitter GitHub <noreply@github.com> 1678479345 +0100\n\nRollup merge of #108017 - chbaker0:fix-105967, r=chbaker0\n\nAdd `--no-undefined-version` link flag and fix associated breakage\n\nLLVM upstream sets `--no-undefined-version` by default in lld: https://reviews.llvm.org/D135402.\n\nDue to a bug in how version scripts are generated, this breaks the `dylib` output type for most crates. See https://github.com/rust-lang/rust/issues/105967#issuecomment-1428671533 for details.\n\nThis PR adds the flag to gcc flavor linkers in anticipation of this LLVM change rolling in, and patches `rustc` to not attempt to export `__rust_*` allocator symbols when they weren't generated.\n\nFixes #105967\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342ca46517714ccde6efba95ff552d11b9a92f1c", "html_url": "https://github.com/rust-lang/rust/commit/342ca46517714ccde6efba95ff552d11b9a92f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342ca46517714ccde6efba95ff552d11b9a92f1c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93316d7f28b06ac2cc86526dec143952ad2a4b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/93316d7f28b06ac2cc86526dec143952ad2a4b25", "html_url": "https://github.com/rust-lang/rust/commit/93316d7f28b06ac2cc86526dec143952ad2a4b25"}, {"sha": "cb41803899ae6531ea2e8fd236f67663e7815ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb41803899ae6531ea2e8fd236f67663e7815ae3", "html_url": "https://github.com/rust-lang/rust/commit/cb41803899ae6531ea2e8fd236f67663e7815ae3"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "2c246ceb37d54fa43940774b79a359f39c346da3", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=342ca46517714ccde6efba95ff552d11b9a92f1c", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n use rustc_span::symbol::sym;\n \n@@ -13,24 +14,15 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n-        use rustc_middle::middle::dependency_format::Linkage;\n-        list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n-    });\n-    if any_dynamic_crate {\n-        false\n-    } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(\n-            module,\n-            unwind_context,\n-            kind,\n-            tcx.alloc_error_handler_kind(()).unwrap(),\n-            tcx.sess.opts.unstable_opts.oom,\n-        );\n-        true\n-    } else {\n-        false\n-    }\n+    let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n+    codegen_inner(\n+        module,\n+        unwind_context,\n+        kind,\n+        tcx.alloc_error_handler_kind(()).unwrap(),\n+        tcx.sess.opts.unstable_opts.oom,\n+    );\n+    true\n }\n \n fn codegen_inner("}, {"sha": "23e2b272410e6b99b950ff52a675adb2b642db92", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=342ca46517714ccde6efba95ff552d11b9a92f1c", "patch": "@@ -720,6 +720,7 @@ impl<'a> Linker for GccLinker<'a> {\n                 let mut arg = OsString::from(\"--version-script=\");\n                 arg.push(path);\n                 self.linker_arg(arg);\n+                self.linker_arg(\"--no-undefined-version\");\n             }\n         }\n     }"}, {"sha": "7b58e55dbe84a8f24af945bb5089a66dbd6ae5e6", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=342ca46517714ccde6efba95ff552d11b9a92f1c", "patch": "@@ -1,3 +1,5 @@\n+use crate::base::allocator_kind_for_codegen;\n+\n use std::collections::hash_map::Entry::*;\n \n use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n@@ -200,7 +202,8 @@ fn exported_symbols_provider_local(\n         ));\n     }\n \n-    if tcx.allocator_kind(()).is_some() {\n+    // Mark allocator shim symbols as exported only if they were generated.\n+    if allocator_kind_for_codegen(tcx).is_some() {\n         for symbol_name in ALLOCATOR_METHODS\n             .iter()\n             .map(|method| format!(\"__rust_{}\", method.name))"}, {"sha": "abc510e360d56657d4c1b5c09f21579b1286fa5f", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342ca46517714ccde6efba95ff552d11b9a92f1c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=342ca46517714ccde6efba95ff552d11b9a92f1c", "patch": "@@ -13,6 +13,7 @@ use crate::mir::place::PlaceRef;\n use crate::traits::*;\n use crate::{CachedModuleCodegen, CompiledModule, CrateInfo, MemFlags, ModuleCodegen, ModuleKind};\n \n+use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n@@ -545,6 +546,23 @@ pub fn collect_debugger_visualizers_transitive(\n         .collect::<BTreeSet<_>>()\n }\n \n+/// Decide allocator kind to codegen. If `Some(_)` this will be the same as\n+/// `tcx.allocator_kind`, but it may be `None` in more cases (e.g. if using\n+/// allocator definitions from a dylib dependency).\n+pub fn allocator_kind_for_codegen(tcx: TyCtxt<'_>) -> Option<AllocatorKind> {\n+    // If the crate doesn't have an `allocator_kind` set then there's definitely\n+    // no shim to generate. Otherwise we also check our dependency graph for all\n+    // our output crate types. If anything there looks like its a `Dynamic`\n+    // linkage, then it's already got an allocator shim and we'll be using that\n+    // one instead. If nothing exists then it's our job to generate the\n+    // allocator!\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n+        use rustc_middle::middle::dependency_format::Linkage;\n+        list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n+    });\n+    if any_dynamic_crate { None } else { tcx.allocator_kind(()) }\n+}\n+\n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'_>,\n@@ -615,20 +633,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     );\n \n     // Codegen an allocator shim, if necessary.\n-    //\n-    // If the crate doesn't have an `allocator_kind` set then there's definitely\n-    // no shim to generate. Otherwise we also check our dependency graph for all\n-    // our output crate types. If anything there looks like its a `Dynamic`\n-    // linkage, then it's already got an allocator shim and we'll be using that\n-    // one instead. If nothing exists then it's our job to generate the\n-    // allocator!\n-    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n-        use rustc_middle::middle::dependency_format::Linkage;\n-        list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n-    });\n-    let allocator_module = if any_dynamic_crate {\n-        None\n-    } else if let Some(kind) = tcx.allocator_kind(()) {\n+    if let Some(kind) = allocator_kind_for_codegen(tcx) {\n         let llmod_id =\n             cgu_name_builder.build_cgu_name(LOCAL_CRATE, &[\"crate\"], Some(\"allocator\")).to_string();\n         let module_llvm = tcx.sess.time(\"write_allocator_module\", || {\n@@ -642,13 +647,10 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             )\n         });\n \n-        Some(ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator })\n-    } else {\n-        None\n-    };\n-\n-    if let Some(allocator_module) = allocator_module {\n-        ongoing_codegen.submit_pre_codegened_module_to_llvm(tcx, allocator_module);\n+        ongoing_codegen.submit_pre_codegened_module_to_llvm(\n+            tcx,\n+            ModuleCodegen { name: llmod_id, module_llvm, kind: ModuleKind::Allocator },\n+        );\n     }\n \n     // For better throughput during parallel processing by LLVM, we used to sort"}]}