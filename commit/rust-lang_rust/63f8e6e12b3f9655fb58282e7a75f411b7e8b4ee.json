{"sha": "63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZjhlNmUxMmIzZjk2NTVmYjU4MjgyZTdhNzVmNDExYjdlOGI0ZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-17T04:18:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-17T04:18:14Z"}, "message": "Auto merge of #56642 - nikic:llvm-6, r=alexcrichton\n\nBump minimum required LLVM version to 6.0\n\nBased on the discussion in #55842, while the overall position of Rust wrt LLVM continues to be contentious, there does seem to be a consensus that there is no need for continued support of LLVM 5. This PR bumps our version requirement to LLVM 6.0 and makes Travis run against that.\n\nI hope that this is going to unblock #52694. If I understand correctly, while this issue still exists in LLVM 6, Ubuntu has backported the relevant patch.\n\nr? @alexcrichton", "tree": {"sha": "75450095f0d6357635b763ac09087285226ee575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75450095f0d6357635b763ac09087285226ee575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "html_url": "https://github.com/rust-lang/rust/commit/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6fb01d62916afa0c489670b665a39d1fe903a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fb01d62916afa0c489670b665a39d1fe903a4a", "html_url": "https://github.com/rust-lang/rust/commit/c6fb01d62916afa0c489670b665a39d1fe903a4a"}, {"sha": "6c2d704950a5f05b8ee5468df53d8db9b94e2028", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2d704950a5f05b8ee5468df53d8db9b94e2028", "html_url": "https://github.com/rust-lang/rust/commit/6c2d704950a5f05b8ee5468df53d8db9b94e2028"}], "stats": {"total": 111, "additions": 16, "deletions": 95}, "files": [{"sha": "9e46e6b8ef6b15a39e7d2b472befb604b5ad2e06", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -16,7 +16,7 @@ matrix:\n   fast_finish: true\n   include:\n     # Images used in testing PR and try-build should be run first.\n-    - env: IMAGE=x86_64-gnu-llvm-5.0 RUST_BACKTRACE=1\n+    - env: IMAGE=x86_64-gnu-llvm-6.0 RUST_BACKTRACE=1\n       if: type = pull_request OR branch = auto\n \n     - env: IMAGE=dist-x86_64-linux DEPLOY=1"}, {"sha": "d9f51f6fd3d070315eb47323809d89fc9dd16c58", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -278,11 +278,11 @@ fn check_llvm_version(builder: &Builder, llvm_config: &Path) {\n     let mut parts = version.split('.').take(2)\n         .filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 5 {\n+        if major >= 6 {\n             return\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=5.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=6.0\\n\\n\", version)\n }\n \n fn configure_cmake(builder: &Builder,"}, {"sha": "160b23e0b00d176672d8f17f350a91412fa49052", "filename": "src/ci/docker/x86_64-gnu-llvm-6.0/Dockerfile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-6.0%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-6.0%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-6.0%2FDockerfile?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -11,7 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-5.0-tools \\\n+  llvm-6.0-tools \\\n   libedit-dev \\\n   zlib1g-dev \\\n   xz-utils\n@@ -22,6 +22,6 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-5.0 \\\n+      --llvm-root=/usr/lib/llvm-6.0 \\\n       --enable-llvm-link-shared\n ENV RUST_CHECK_TARGET check", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-5.0/Dockerfile"}, {"sha": "01b1387d9cc2f50dc5284c844541c588ac93716b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -1024,17 +1024,11 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn minnum(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"minnum\");\n-        unsafe {\n-            let instr = llvm::LLVMRustBuildMinNum(self.llbuilder, lhs, rhs);\n-            instr.expect(\"LLVMRustBuildMinNum is not available in LLVM version < 6.0\")\n-        }\n+        unsafe { llvm::LLVMRustBuildMinNum(self.llbuilder, lhs, rhs) }\n     }\n     fn maxnum(&mut self, lhs: &'ll Value, rhs: &'ll Value) -> &'ll Value {\n         self.count_insn(\"maxnum\");\n-        unsafe {\n-            let instr = llvm::LLVMRustBuildMaxNum(self.llbuilder, lhs, rhs);\n-            instr.expect(\"LLVMRustBuildMaxNum is not available in LLVM version < 6.0\")\n-        }\n+        unsafe { llvm::LLVMRustBuildMaxNum(self.llbuilder, lhs, rhs) }\n     }\n \n     fn select("}, {"sha": "b75cd8f68b368070fadbee4c90814dfefaddd51a", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -10,7 +10,6 @@\n \n use attributes;\n use llvm;\n-use llvm_util;\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n use debuginfo;\n@@ -446,10 +445,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         attributes::apply_target_cpu_attr(self, llfn)\n     }\n \n-    fn closure_env_needs_indirect_debuginfo(&self) -> bool {\n-        llvm_util::get_major_version() < 6\n-    }\n-\n     fn create_used_variable(&self) {\n         let name = const_cstr!(\"llvm.used\");\n         let section = const_cstr!(\"llvm.metadata\");"}, {"sha": "4732db88ec1cb60535213affef54373fc772a998", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -1222,12 +1222,12 @@ extern \"C\" {\n         B: &Builder<'a>,\n         LHS: &'a Value,\n         LHS: &'a Value,\n-    ) -> Option<&'a Value>;\n+    ) -> &'a Value;\n     pub fn LLVMRustBuildMaxNum(\n         B: &Builder<'a>,\n         LHS: &'a Value,\n         LHS: &'a Value,\n-    ) -> Option<&'a Value>;\n+    ) -> &'a Value;\n \n     // Atomic Operations\n     pub fn LLVMRustBuildAtomicLoad(B: &Builder<'a>,"}, {"sha": "d316b3ec3508c71c69b52edcb1e862c9de2e3489", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -610,35 +610,13 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             };\n             let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n-            // Store the pointer to closure data in an alloca for debuginfo\n-            // because that's what the llvm.dbg.declare intrinsic expects.\n-\n-            // FIXME(eddyb) this shouldn't be necessary but SROA seems to\n-            // mishandle DW_OP_plus not preceded by DW_OP_deref, i.e., it\n-            // doesn't actually strip the offset when splitting the closure\n-            // environment into its components so it ends up out of bounds.\n-            // (cuviper) It seems to be fine without the alloca on LLVM 6 and later.\n-            let env_alloca = !env_ref && bx.closure_env_needs_indirect_debuginfo();\n-            let env_ptr = if env_alloca {\n-                let scratch = PlaceRef::alloca(bx,\n-                    bx.layout_of(tcx.mk_mut_ptr(arg.layout.ty)),\n-                    \"__debuginfo_env_ptr\");\n-                bx.store(place.llval, scratch.llval, scratch.align);\n-                scratch.llval\n-            } else {\n-                place.llval\n-            };\n-\n             for (i, (decl, ty)) in mir.upvar_decls.iter().zip(upvar_tys).enumerate() {\n                 let byte_offset_of_var_in_env = closure_layout.fields.offset(i).bytes();\n \n                 let ops = bx.debuginfo_upvar_decls_ops_sequence(byte_offset_of_var_in_env);\n \n                 // The environment and the capture can each be indirect.\n-\n-                // FIXME(eddyb) see above why we sometimes have to keep\n-                // a pointer in an alloca for debuginfo atm.\n-                let mut ops = if env_ref || env_alloca { &ops[..] } else { &ops[1..] };\n+                let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n \n                 let ty = if let (true, &ty::Ref(_, ty, _)) = (decl.by_ref, &ty.sty) {\n                     ty\n@@ -648,7 +626,7 @@ fn arg_local_refs<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n                 };\n \n                 let variable_access = VariableAccess::IndirectVariable {\n-                    alloca: env_ptr,\n+                    alloca: place.llval,\n                     address_operations: &ops\n                 };\n                 bx.declare_local("}, {"sha": "57afb800d014cc7fdead38ea10844bbede3ecebe", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -32,7 +32,6 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn stats(&self) -> &RefCell<Stats>;\n     fn consume_stats(self) -> RefCell<Stats>;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n-    fn closure_env_needs_indirect_debuginfo(&self) -> bool;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;\n     fn set_frame_pointer_elimination(&self, llfn: Self::Value);\n     fn apply_target_cpu_attr(&self, llfn: Self::Value);"}, {"sha": "2f8dc0d466fb4e8271169a1643c455450bec8d0a", "filename": "src/rustllvm/ArchiveWrapper.cpp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FArchiveWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FArchiveWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FArchiveWrapper.cpp?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -216,16 +216,11 @@ LLVMRustWriteArchive(char *Dst, size_t NumMembers,\n       Members.push_back(std::move(*MOrErr));\n     }\n   }\n+\n   auto Result = writeArchive(Dst, Members, WriteSymbtab, Kind, true, false);\n-#if LLVM_VERSION_GE(6, 0)\n   if (!Result)\n     return LLVMRustResult::Success;\n   LLVMRustSetLastError(toString(std::move(Result)).c_str());\n-#else\n-  if (!Result.second)\n-    return LLVMRustResult::Success;\n-  LLVMRustSetLastError(Result.second.message().c_str());\n-#endif\n \n   return LLVMRustResult::Failure;\n }"}, {"sha": "4d95368c00f1e5a9e171ef678489db717c0d3d59", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -17,21 +17,15 @@\n \n #include \"llvm/Analysis/TargetLibraryInfo.h\"\n #include \"llvm/Analysis/TargetTransformInfo.h\"\n+#include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n #include \"llvm/IR/AutoUpgrade.h\"\n #include \"llvm/IR/AssemblyAnnotationWriter.h\"\n+#include \"llvm/IR/IntrinsicInst.h\"\n #include \"llvm/Support/CBindingWrapping.h\"\n #include \"llvm/Support/FileSystem.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Target/TargetMachine.h\"\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n-\n-#if LLVM_VERSION_GE(6, 0)\n-#include \"llvm/CodeGen/TargetSubtargetInfo.h\"\n-#include \"llvm/IR/IntrinsicInst.h\"\n-#else\n-#include \"llvm/Target/TargetSubtargetInfo.h\"\n-#endif\n-\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n@@ -198,13 +192,9 @@ GEN_SUBTARGETS\n \n extern \"C\" bool LLVMRustHasFeature(LLVMTargetMachineRef TM,\n                                    const char *Feature) {\n-#if LLVM_VERSION_GE(6, 0)\n   TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   return MCInfo->checkFeatures(std::string(\"+\") + Feature);\n-#else\n-  return false;\n-#endif\n }\n \n enum class LLVMRustCodeModel {\n@@ -392,13 +382,9 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     Options.ThreadModel = ThreadModel::Single;\n   }\n \n-#if LLVM_VERSION_GE(6, 0)\n   Options.EmitStackSizeSection = EmitStackSizeSection;\n \n   Optional<CodeModel::Model> CM;\n-#else\n-  CodeModel::Model CM = CodeModel::Model::Default;\n-#endif\n   if (RustCM != LLVMRustCodeModel::None)\n     CM = fromRust(RustCM);\n   TargetMachine *TM = TheTarget->createTargetMachine("}, {"sha": "86c5dfcfb98277df0b886649e8e49c1f19a7f589", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -297,11 +297,7 @@ extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n // enable fpmath flag UnsafeAlgebra\n extern \"C\" void LLVMRustSetHasUnsafeAlgebra(LLVMValueRef V) {\n   if (auto I = dyn_cast<Instruction>(unwrap<Value>(V))) {\n-#if LLVM_VERSION_GE(6, 0)\n     I->setFast(true);\n-#else\n-    I->setHasUnsafeAlgebra(true);\n-#endif\n   }\n }\n \n@@ -1437,7 +1433,6 @@ LLVMRustBuildVectorReduceFMax(LLVMBuilderRef B, LLVMValueRef Src, bool NoNaN) {\n   return wrap(unwrap(B)->CreateFPMaxReduce(unwrap(Src), NoNaN));\n }\n \n-#if LLVM_VERSION_GE(6, 0)\n extern \"C\" LLVMValueRef\n LLVMRustBuildMinNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n     return wrap(unwrap(B)->CreateMinNum(unwrap(LHS),unwrap(RHS)));\n@@ -1446,13 +1441,3 @@ extern \"C\" LLVMValueRef\n LLVMRustBuildMaxNum(LLVMBuilderRef B, LLVMValueRef LHS, LLVMValueRef RHS) {\n     return wrap(unwrap(B)->CreateMaxNum(unwrap(LHS),unwrap(RHS)));\n }\n-#else\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildMinNum(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n-   return nullptr;\n-}\n-extern \"C\" LLVMValueRef\n-LLVMRustBuildMaxNum(LLVMBuilderRef, LLVMValueRef, LLVMValueRef) {\n-   return nullptr;\n-}\n-#endif"}, {"sha": "52bdb1b103afd0fec930686c894a485ce4105951", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 6.0\n \n #![crate_type = \"lib\"]\n #![feature(custom_attribute)]"}, {"sha": "ebd436cc6478b94f721da754bfe78f149de40d35", "filename": "src/test/codegen/issue-44056-macos-tls-align.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -11,7 +11,6 @@\n // ignore-tidy-linelength\n // only-macos\n // no-system-llvm\n-// min-llvm-version 6.0\n // compile-flags: -O\n \n #![crate_type = \"rlib\"]"}, {"sha": "a6e633bf285ac6cf80939e7711ea60aec15cf6c7", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags: -O\n-// min-llvm-version 6.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "f916c1a0640931ac614236a47b3827c9d9e73c34", "filename": "src/test/codegen/issue-45466.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45466.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags: -O\n-// min-llvm-version 6.0\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "605a952e8ff051e85858a5efa5aead868dc882ef", "filename": "src/test/codegen/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-gather.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten\n // ignore-tidy-linelength\n-// min-llvm-version 6.0\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "6645778468cbed3dfd6ef8c907d0d88e24fb3b2c", "filename": "src/test/codegen/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic-generic-scatter.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-emscripten\n // ignore-tidy-linelength\n-// min-llvm-version 6.0\n \n // compile-flags: -C no-prepopulate-passes\n "}, {"sha": "cb96a844341b7ffffd6e70991d072b15ae141d0d", "filename": "src/test/codegen/vtabletype.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-llvm-version 6.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "e5ac5775b0cb946b4e4c56c110ccd832e8fa9be7", "filename": "src/test/run-pass/simd/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd%2Fsimd-intrinsic-generic-gather.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -10,7 +10,6 @@\n \n // run-pass\n // ignore-emscripten\n-// min-llvm-version 6.0\n \n // Test that the simd_{gather,scatter} intrinsics produce the correct results.\n "}, {"sha": "779c72b8df127bcf93e24ce41ec57c73fc102610", "filename": "src/test/run-pass/sse2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Frun-pass%2Fsse2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Frun-pass%2Fsse2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsse2.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(stable_features)]\n-// min-llvm-version 6.0\n-// ^ needs MCSubtargetInfo::checkFeatures()\n // ignore-cloudabi no std::env\n \n+#![allow(stable_features)]\n #![feature(cfg_target_feature)]\n \n use std::env;"}, {"sha": "2d0fb78897de10403e2f25fd0d2272a1aa93c473", "filename": "src/test/ui/target-feature-gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fui%2Ftarget-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.rs?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -24,7 +24,6 @@\n // gate-test-mips_target_feature\n // gate-test-mmx_target_feature\n // gate-test-wasm_target_feature\n-// min-llvm-version 6.0\n \n #[target_feature(enable = \"avx512bw\")]\n //~^ ERROR: currently unstable"}, {"sha": "24141d0064fb0f2c0cf92dd52a710ad22bb54785", "filename": "src/test/ui/target-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature-gate.stderr?ref=63f8e6e12b3f9655fb58282e7a75f411b7e8b4ee", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable (see issue #44839)\n-  --> $DIR/target-feature-gate.rs:29:18\n+  --> $DIR/target-feature-gate.rs:28:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}]}