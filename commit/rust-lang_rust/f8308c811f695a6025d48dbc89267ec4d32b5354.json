{"sha": "f8308c811f695a6025d48dbc89267ec4d32b5354", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzA4YzgxMWY2OTVhNjAyNWQ0OGRiYzg5MjY3ZWM0ZDMyYjUzNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T14:17:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-08T14:17:47Z"}, "message": "Auto merge of #5438 - flip1995:rollup-pi762oy, r=flip1995\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #5406 (Fix update_lints)\n - #5409 (Downgrade let_unit_value to pedantic)\n - #5410 (Downgrade trivially_copy_pass_by_ref to pedantic)\n - #5412 (Downgrade inefficient_to_string to pedantic)\n - #5415 (Add new lint for `Result<T, E>.map_or(None, Some(T))`)\n - #5417 (Update doc links and mentioned names in docs)\n - #5419 (Downgrade unreadable_literal to pedantic)\n - #5420 (Downgrade new_ret_no_self to pedantic)\n - #5422 (CONTRIBUTING.md: fix broken triage link)\n - #5424 (Incorrect suspicious_op_assign_impl)\n - #5425 (Ehance opt_as_ref_deref lint.)\n\nFailed merges:\n\n - #5345 (Add lint for float in array comparison)\n - #5411 (Downgrade implicit_hasher to pedantic)\n - #5428 (Move cognitive_complexity to nursery)\n\nr? @ghost\n\nchangelog: rollup", "tree": {"sha": "b1b33f3c00582af966bc01e70f1e962398277bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1b33f3c00582af966bc01e70f1e962398277bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8308c811f695a6025d48dbc89267ec4d32b5354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8308c811f695a6025d48dbc89267ec4d32b5354", "html_url": "https://github.com/rust-lang/rust/commit/f8308c811f695a6025d48dbc89267ec4d32b5354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8308c811f695a6025d48dbc89267ec4d32b5354/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "html_url": "https://github.com/rust-lang/rust/commit/0b4098335d9ea2468f0ceea82f3c8315fa5decc1"}, {"sha": "381f9cb34e499501f73b99f086f3ef85ab15d401", "url": "https://api.github.com/repos/rust-lang/rust/commits/381f9cb34e499501f73b99f086f3ef85ab15d401", "html_url": "https://github.com/rust-lang/rust/commit/381f9cb34e499501f73b99f086f3ef85ab15d401"}], "stats": {"total": 1219, "additions": 687, "deletions": 532}, "files": [{"sha": "b7ac3cace2048a7684cc55d20af461770b361f2c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1448,6 +1448,7 @@ Released 2018-09-13\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n+[`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n [`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used"}, {"sha": "50a5ee8bbf3c83bc0e583927d97ace463b3a3794", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -36,7 +36,8 @@ High level approach:\n \n ### Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help with a bug just ask @Manishearth, @llogiq, @mcarton or @oli-obk.\n+All issues on Clippy are mentored, if you want help with a bug just ask\n+@Manishearth, @flip1995, @phansch or @yaahc.\n \n Some issues are easier than others. The [`good first issue`] label can be used to find the easy issues.\n If you want to work on an issue, please leave a comment so that we can assign it to you!\n@@ -70,24 +71,22 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [`T-AST`]: https://github.com/rust-lang/rust-clippy/labels/T-AST\n [`T-middle`]: https://github.com/rust-lang/rust-clippy/labels/T-middle\n [`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n-[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty\n+[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty\n [nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n [deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/mem_forget.rs#L29-L43\n [if_chain]: https://docs.rs/if_chain/*/if_chain\n [nest-less]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/bit_mask.rs#L124-L150\n \n ## Writing code\n \n-Have a look at the [docs for writing lints][adding_lints] for more details. [Llogiq's blog post on lints]\n-is also a nice primer to lint-writing, though it does get into advanced stuff and may be a bit outdated.\n+Have a look at the [docs for writing lints][adding_lints] for more details.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n [lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n quick read.\n \n [adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n-[Llogiq's blog post on lints]: https://llogiq.github.io/2015/06/04/workflows.html\n [clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n [rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n [rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n@@ -223,7 +222,7 @@ You can find the Clippy bors queue [here][homu_queue].\n If you have @bors permissions, you can find an overview of the available\n commands [here][homu_instructions].\n \n-[triage]: https://forge.rust-lang.org/triage-procedure.html\n+[triage]: https://forge.rust-lang.org/release/triage-procedure.html\n [l-crash]: https://github.com/rust-lang/rust-clippy/labels/L-crash%20%3Aboom%3A\n [l-bug]: https://github.com/rust-lang/rust-clippy/labels/L-bug%20%3Abeetle%3A\n [homu]: https://github.com/rust-lang/homu"}, {"sha": "1f8510f43a61daea0d05388b567505303708e308", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 53, "deletions": 75, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -62,110 +62,89 @@ impl Lint {\n     }\n \n     /// Returns all non-deprecated lints and non-internal lints\n-    pub fn usable_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.deprecation.is_none() && !l.is_internal())\n+    #[must_use]\n+    pub fn usable_lints(lints: &[Self]) -> Vec<Self> {\n+        lints\n+            .iter()\n+            .filter(|l| l.deprecation.is_none() && !l.group.starts_with(\"internal\"))\n+            .cloned()\n+            .collect()\n     }\n \n     /// Returns all internal lints (not `internal_warn` lints)\n-    pub fn internal_lints(lints: impl Iterator<Item = Self>) -> impl Iterator<Item = Self> {\n-        lints.filter(|l| l.group == \"internal\")\n+    #[must_use]\n+    pub fn internal_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.group == \"internal\").cloned().collect()\n     }\n \n-    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n+    /// Returns all deprecated lints\n     #[must_use]\n-    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n-        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n+    pub fn deprecated_lints(lints: &[Self]) -> Vec<Self> {\n+        lints.iter().filter(|l| l.deprecation.is_some()).cloned().collect()\n     }\n \n+    /// Returns the lints in a `HashMap`, grouped by the different lint groups\n     #[must_use]\n-    pub fn is_internal(&self) -> bool {\n-        self.group.starts_with(\"internal\")\n+    pub fn by_lint_group(lints: impl Iterator<Item = Self>) -> HashMap<String, Vec<Self>> {\n+        lints.map(|lint| (lint.group.to_string(), lint)).into_group_map()\n     }\n }\n \n /// Generates the Vec items for `register_lint_group` calls in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_lint_group_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_lint_group_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n-            }\n-        })\n+        .map(|l| format!(\"        LintId::of(&{}::{}),\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the `pub mod module_name` list in `clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_modules_list(lints: Vec<Lint>) -> Vec<String> {\n+pub fn gen_modules_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .into_iter()\n-        .filter_map(|l| {\n-            if l.is_internal() || l.deprecation.is_some() {\n-                None\n-            } else {\n-                Some(l.module)\n-            }\n-        })\n+        .map(|l| &l.module)\n         .unique()\n-        .map(|module| format!(\"pub mod {};\", module))\n+        .map(|module| format!(\"mod {};\", module))\n         .sorted()\n         .collect::<Vec<String>>()\n }\n \n /// Generates the list of lint links at the bottom of the README\n #[must_use]\n-pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n-    let mut lint_list_sorted: Vec<Lint> = lints;\n-    lint_list_sorted.sort_by_key(|l| l.name.clone());\n-    lint_list_sorted\n-        .iter()\n-        .filter_map(|l| {\n-            if l.is_internal() {\n-                None\n-            } else {\n-                Some(format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n-            }\n-        })\n+pub fn gen_changelog_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n+    lints\n+        .sorted_by_key(|l| &l.name)\n+        .map(|l| format!(\"[`{}`]: {}#{}\", l.name, DOCS_LINK, l.name))\n         .collect()\n }\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n #[must_use]\n-pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_deprecated<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     lints\n-        .iter()\n-        .filter_map(|l| {\n-            l.clone().deprecation.map(|depr_text| {\n-                vec![\n-                    \"    store.register_removed(\".to_string(),\n-                    format!(\"        \\\"clippy::{}\\\",\", l.name),\n-                    format!(\"        \\\"{}\\\",\", depr_text),\n-                    \"    );\".to_string(),\n-                ]\n-            })\n+        .flat_map(|l| {\n+            l.deprecation\n+                .clone()\n+                .map(|depr_text| {\n+                    vec![\n+                        \"    store.register_removed(\".to_string(),\n+                        format!(\"        \\\"clippy::{}\\\",\", l.name),\n+                        format!(\"        \\\"{}\\\",\", depr_text),\n+                        \"    );\".to_string(),\n+                    ]\n+                })\n+                .expect(\"only deprecated lints should be passed\")\n         })\n-        .flatten()\n         .collect::<Vec<String>>()\n }\n \n #[must_use]\n-pub fn gen_register_lint_list(lints: &[Lint]) -> Vec<String> {\n+pub fn gen_register_lint_list<'a>(lints: impl Iterator<Item = &'a Lint>) -> Vec<String> {\n     let pre = \"    store.register_lints(&[\".to_string();\n     let post = \"    ]);\".to_string();\n     let mut inner = lints\n-        .iter()\n-        .filter_map(|l| {\n-            if !l.is_internal() && l.deprecation.is_none() {\n-                Some(format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n-            } else {\n-                None\n-            }\n-        })\n+        .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n         .sorted()\n         .collect::<Vec<String>>();\n     inner.insert(0, pre);\n@@ -439,7 +418,7 @@ fn test_usable_lints() {\n         None,\n         \"module_name\",\n     )];\n-    assert_eq!(expected, Lint::usable_lints(lints.into_iter()).collect::<Vec<Lint>>());\n+    assert_eq!(expected, Lint::usable_lints(&lints));\n }\n \n #[test]\n@@ -469,13 +448,12 @@ fn test_gen_changelog_lint_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         format!(\"[`should_assert_eq`]: {}#should_assert_eq\", DOCS_LINK.to_string()),\n         format!(\"[`should_assert_eq2`]: {}#should_assert_eq2\", DOCS_LINK.to_string()),\n     ];\n-    assert_eq!(expected, gen_changelog_lint_list(lints));\n+    assert_eq!(expected, gen_changelog_lint_list(lints.iter()));\n }\n \n #[test]\n@@ -495,7 +473,6 @@ fn test_gen_deprecated() {\n             Some(\"will be removed\"),\n             \"module_name\",\n         ),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\"),\n     ];\n     let expected: Vec<String> = vec![\n         \"    store.register_removed(\",\n@@ -510,36 +487,37 @@ fn test_gen_deprecated() {\n     .into_iter()\n     .map(String::from)\n     .collect();\n-    assert_eq!(expected, gen_deprecated(&lints));\n+    assert_eq!(expected, gen_deprecated(lints.iter()));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_gen_deprecated_fail() {\n+    let lints = vec![Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")];\n+    let _ = gen_deprecated(lints.iter());\n }\n \n #[test]\n fn test_gen_modules_list() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"incorrect_stuff\", \"group3\", \"abc\", None, \"another_module\"),\n-        Lint::new(\"incorrect_internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n-    ];\n-    let expected = vec![\n-        \"pub mod another_module;\".to_string(),\n-        \"pub mod module_name;\".to_string(),\n     ];\n-    assert_eq!(expected, gen_modules_list(lints));\n+    let expected = vec![\"mod another_module;\".to_string(), \"mod module_name;\".to_string()];\n+    assert_eq!(expected, gen_modules_list(lints.iter()));\n }\n \n #[test]\n fn test_gen_lint_group_list() {\n     let lints = vec![\n         Lint::new(\"abc\", \"group1\", \"abc\", None, \"module_name\"),\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", None, \"module_name\"),\n-        Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", Some(\"abc\"), \"deprecated\"),\n         Lint::new(\"internal\", \"internal_style\", \"abc\", None, \"module_name\"),\n     ];\n     let expected = vec![\n         \"        LintId::of(&module_name::ABC),\".to_string(),\n         \"        LintId::of(&module_name::INTERNAL),\".to_string(),\n         \"        LintId::of(&module_name::SHOULD_ASSERT_EQ),\".to_string(),\n     ];\n-    assert_eq!(expected, gen_lint_group_list(lints));\n+    assert_eq!(expected, gen_lint_group_list(lints.iter()));\n }"}, {"sha": "a9a7092994269b7cc84075756d74f0eda57a3af0", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -14,14 +14,14 @@ pub enum UpdateMode {\n pub fn run(update_mode: UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n \n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = round_to_fifty(usable_lints.len());\n-\n+    let internal_lints = Lint::internal_lints(&lint_list);\n+    let deprecated_lints = Lint::deprecated_lints(&lint_list);\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let mut sorted_usable_lints = usable_lints.clone();\n     sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n \n+    let usable_lint_count = round_to_fifty(usable_lints.len());\n+\n     let mut file_change = replace_region_in_file(\n         Path::new(\"src/lintlist/mod.rs\"),\n         \"begin lint list\",\n@@ -61,7 +61,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(lint_list.clone()),\n+        || gen_changelog_lint_list(usable_lints.iter().chain(deprecated_lints.iter())),\n     )\n     .changed;\n \n@@ -71,7 +71,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end deprecated lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n+        || gen_deprecated(deprecated_lints.iter()),\n     )\n     .changed;\n \n@@ -81,7 +81,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end register lints\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&lint_list),\n+        || gen_register_lint_list(usable_lints.iter().chain(internal_lints.iter())),\n     )\n     .changed;\n \n@@ -91,7 +91,7 @@ pub fn run(update_mode: UpdateMode) {\n         \"end lints modules\",\n         false,\n         update_mode == UpdateMode::Change,\n-        || gen_modules_list(lint_list.clone()),\n+        || gen_modules_list(usable_lints.iter()),\n     )\n     .changed;\n \n@@ -104,13 +104,9 @@ pub fn run(update_mode: UpdateMode) {\n         update_mode == UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect();\n+            let all_group_lints = usable_lints.iter().filter(|l| {\n+                l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+            });\n \n             gen_lint_group_list(all_group_lints)\n         },\n@@ -125,7 +121,7 @@ pub fn run(update_mode: UpdateMode) {\n             r#\"\\]\\);\"#,\n             false,\n             update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.clone()),\n+            || gen_lint_group_list(lints.iter()),\n         )\n         .changed;\n     }\n@@ -140,8 +136,8 @@ pub fn run(update_mode: UpdateMode) {\n }\n \n pub fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+    let usable_lints = Lint::usable_lints(&lint_list);\n     let usable_lint_count = usable_lints.len();\n     let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n "}, {"sha": "2cd22633bc87fa2ede39717c99987c62a402604d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 165, "deletions": 161, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -170,157 +170,157 @@ mod consts;\n mod utils;\n \n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n-pub mod approx_const;\n-pub mod arithmetic;\n-pub mod as_conversions;\n-pub mod assertions_on_constants;\n-pub mod assign_ops;\n-pub mod atomic_ordering;\n-pub mod attrs;\n-pub mod bit_mask;\n-pub mod blacklisted_name;\n-pub mod block_in_if_condition;\n-pub mod booleans;\n-pub mod bytecount;\n-pub mod cargo_common_metadata;\n-pub mod checked_conversions;\n-pub mod cognitive_complexity;\n-pub mod collapsible_if;\n-pub mod comparison_chain;\n-pub mod copies;\n-pub mod copy_iterator;\n-pub mod dbg_macro;\n-pub mod default_trait_access;\n-pub mod derive;\n-pub mod doc;\n-pub mod double_comparison;\n-pub mod double_parens;\n-pub mod drop_bounds;\n-pub mod drop_forget_ref;\n-pub mod duration_subsec;\n-pub mod else_if_without_else;\n-pub mod empty_enum;\n-pub mod entry;\n-pub mod enum_clike;\n-pub mod enum_variants;\n-pub mod eq_op;\n-pub mod erasing_op;\n-pub mod escape;\n-pub mod eta_reduction;\n-pub mod eval_order_dependence;\n-pub mod excessive_bools;\n-pub mod exit;\n-pub mod explicit_write;\n-pub mod fallible_impl_from;\n-pub mod float_literal;\n-pub mod floating_point_arithmetic;\n-pub mod format;\n-pub mod formatting;\n-pub mod functions;\n-pub mod get_last_with_len;\n-pub mod identity_conversion;\n-pub mod identity_op;\n-pub mod if_let_some_result;\n-pub mod if_not_else;\n-pub mod implicit_return;\n-pub mod indexing_slicing;\n-pub mod infinite_iter;\n-pub mod inherent_impl;\n-pub mod inherent_to_string;\n-pub mod inline_fn_without_body;\n-pub mod int_plus_one;\n-pub mod integer_division;\n-pub mod items_after_statements;\n-pub mod large_enum_variant;\n-pub mod large_stack_arrays;\n-pub mod len_zero;\n-pub mod let_if_seq;\n-pub mod let_underscore;\n-pub mod lifetimes;\n-pub mod literal_representation;\n-pub mod loops;\n-pub mod macro_use;\n-pub mod main_recursion;\n-pub mod map_clone;\n-pub mod map_unit_fn;\n-pub mod matches;\n-pub mod mem_discriminant;\n-pub mod mem_forget;\n-pub mod mem_replace;\n-pub mod methods;\n-pub mod minmax;\n-pub mod misc;\n-pub mod misc_early;\n-pub mod missing_const_for_fn;\n-pub mod missing_doc;\n-pub mod missing_inline;\n-pub mod modulo_arithmetic;\n-pub mod multiple_crate_versions;\n-pub mod mut_key;\n-pub mod mut_mut;\n-pub mod mut_reference;\n-pub mod mutable_debug_assertion;\n-pub mod mutex_atomic;\n-pub mod needless_bool;\n-pub mod needless_borrow;\n-pub mod needless_borrowed_ref;\n-pub mod needless_continue;\n-pub mod needless_pass_by_value;\n-pub mod needless_update;\n-pub mod neg_cmp_op_on_partial_ord;\n-pub mod neg_multiply;\n-pub mod new_without_default;\n-pub mod no_effect;\n-pub mod non_copy_const;\n-pub mod non_expressive_names;\n-pub mod open_options;\n-pub mod option_env_unwrap;\n-pub mod overflow_check_conditional;\n-pub mod panic_unimplemented;\n-pub mod partialeq_ne_impl;\n-pub mod path_buf_push_overwrite;\n-pub mod precedence;\n-pub mod ptr;\n-pub mod ptr_offset_with_cast;\n-pub mod question_mark;\n-pub mod ranges;\n-pub mod redundant_clone;\n-pub mod redundant_field_names;\n-pub mod redundant_pattern_matching;\n-pub mod redundant_pub_crate;\n-pub mod redundant_static_lifetimes;\n-pub mod reference;\n-pub mod regex;\n-pub mod returns;\n-pub mod serde_api;\n-pub mod shadow;\n-pub mod single_component_path_imports;\n-pub mod slow_vector_initialization;\n-pub mod strings;\n-pub mod suspicious_trait_impl;\n-pub mod swap;\n-pub mod tabs_in_doc_comments;\n-pub mod temporary_assignment;\n-pub mod to_digit_is_some;\n-pub mod trait_bounds;\n-pub mod transmute;\n-pub mod transmuting_null;\n-pub mod trivially_copy_pass_by_ref;\n-pub mod try_err;\n-pub mod types;\n-pub mod unicode;\n-pub mod unnamed_address;\n-pub mod unsafe_removed_from_name;\n-pub mod unused_io_amount;\n-pub mod unused_self;\n-pub mod unwrap;\n-pub mod use_self;\n-pub mod vec;\n-pub mod verbose_file_reads;\n-pub mod wildcard_dependencies;\n-pub mod wildcard_imports;\n-pub mod write;\n-pub mod zero_div_zero;\n+mod approx_const;\n+mod arithmetic;\n+mod as_conversions;\n+mod assertions_on_constants;\n+mod assign_ops;\n+mod atomic_ordering;\n+mod attrs;\n+mod bit_mask;\n+mod blacklisted_name;\n+mod block_in_if_condition;\n+mod booleans;\n+mod bytecount;\n+mod cargo_common_metadata;\n+mod checked_conversions;\n+mod cognitive_complexity;\n+mod collapsible_if;\n+mod comparison_chain;\n+mod copies;\n+mod copy_iterator;\n+mod dbg_macro;\n+mod default_trait_access;\n+mod derive;\n+mod doc;\n+mod double_comparison;\n+mod double_parens;\n+mod drop_bounds;\n+mod drop_forget_ref;\n+mod duration_subsec;\n+mod else_if_without_else;\n+mod empty_enum;\n+mod entry;\n+mod enum_clike;\n+mod enum_variants;\n+mod eq_op;\n+mod erasing_op;\n+mod escape;\n+mod eta_reduction;\n+mod eval_order_dependence;\n+mod excessive_bools;\n+mod exit;\n+mod explicit_write;\n+mod fallible_impl_from;\n+mod float_literal;\n+mod floating_point_arithmetic;\n+mod format;\n+mod formatting;\n+mod functions;\n+mod get_last_with_len;\n+mod identity_conversion;\n+mod identity_op;\n+mod if_let_some_result;\n+mod if_not_else;\n+mod implicit_return;\n+mod indexing_slicing;\n+mod infinite_iter;\n+mod inherent_impl;\n+mod inherent_to_string;\n+mod inline_fn_without_body;\n+mod int_plus_one;\n+mod integer_division;\n+mod items_after_statements;\n+mod large_enum_variant;\n+mod large_stack_arrays;\n+mod len_zero;\n+mod let_if_seq;\n+mod let_underscore;\n+mod lifetimes;\n+mod literal_representation;\n+mod loops;\n+mod macro_use;\n+mod main_recursion;\n+mod map_clone;\n+mod map_unit_fn;\n+mod matches;\n+mod mem_discriminant;\n+mod mem_forget;\n+mod mem_replace;\n+mod methods;\n+mod minmax;\n+mod misc;\n+mod misc_early;\n+mod missing_const_for_fn;\n+mod missing_doc;\n+mod missing_inline;\n+mod modulo_arithmetic;\n+mod multiple_crate_versions;\n+mod mut_key;\n+mod mut_mut;\n+mod mut_reference;\n+mod mutable_debug_assertion;\n+mod mutex_atomic;\n+mod needless_bool;\n+mod needless_borrow;\n+mod needless_borrowed_ref;\n+mod needless_continue;\n+mod needless_pass_by_value;\n+mod needless_update;\n+mod neg_cmp_op_on_partial_ord;\n+mod neg_multiply;\n+mod new_without_default;\n+mod no_effect;\n+mod non_copy_const;\n+mod non_expressive_names;\n+mod open_options;\n+mod option_env_unwrap;\n+mod overflow_check_conditional;\n+mod panic_unimplemented;\n+mod partialeq_ne_impl;\n+mod path_buf_push_overwrite;\n+mod precedence;\n+mod ptr;\n+mod ptr_offset_with_cast;\n+mod question_mark;\n+mod ranges;\n+mod redundant_clone;\n+mod redundant_field_names;\n+mod redundant_pattern_matching;\n+mod redundant_pub_crate;\n+mod redundant_static_lifetimes;\n+mod reference;\n+mod regex;\n+mod returns;\n+mod serde_api;\n+mod shadow;\n+mod single_component_path_imports;\n+mod slow_vector_initialization;\n+mod strings;\n+mod suspicious_trait_impl;\n+mod swap;\n+mod tabs_in_doc_comments;\n+mod temporary_assignment;\n+mod to_digit_is_some;\n+mod trait_bounds;\n+mod transmute;\n+mod transmuting_null;\n+mod trivially_copy_pass_by_ref;\n+mod try_err;\n+mod types;\n+mod unicode;\n+mod unnamed_address;\n+mod unsafe_removed_from_name;\n+mod unused_io_amount;\n+mod unused_self;\n+mod unwrap;\n+mod use_self;\n+mod vec;\n+mod verbose_file_reads;\n+mod wildcard_dependencies;\n+mod wildcard_imports;\n+mod write;\n+mod zero_div_zero;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n@@ -666,6 +666,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::OPTION_UNWRAP_USED,\n         &methods::OR_FUN_CALL,\n         &methods::RESULT_EXPECT_USED,\n+        &methods::RESULT_MAP_OR_INTO_OPTION,\n         &methods::RESULT_MAP_UNWRAP_OR_ELSE,\n         &methods::RESULT_UNWRAP_USED,\n         &methods::SEARCH_IS_SOME,\n@@ -828,6 +829,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &unwrap::PANICKING_UNWRAP,\n         &unwrap::UNNECESSARY_UNWRAP,\n         &use_self::USE_SELF,\n+        &utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n+        &utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n+        &utils::internal_lints::DEFAULT_LINT,\n+        &utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        &utils::internal_lints::OUTER_EXPN_EXPN_DATA,\n+        &utils::internal_lints::PRODUCE_ICE,\n         &vec::USELESS_VEC,\n         &verbose_file_reads::VERBOSE_FILE_READS,\n         &wildcard_dependencies::WILDCARD_DEPENDENCIES,\n@@ -1098,14 +1105,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&items_after_statements::ITEMS_AFTER_STATEMENTS),\n         LintId::of(&large_stack_arrays::LARGE_STACK_ARRAYS),\n         LintId::of(&literal_representation::LARGE_DIGIT_GROUPS),\n+        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EXPLICIT_INTO_ITER_LOOP),\n         LintId::of(&loops::EXPLICIT_ITER_LOOP),\n         LintId::of(&macro_use::MACRO_USE_IMPORTS),\n         LintId::of(&matches::SINGLE_MATCH_ELSE),\n         LintId::of(&methods::FILTER_MAP),\n         LintId::of(&methods::FILTER_MAP_NEXT),\n         LintId::of(&methods::FIND_MAP),\n+        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n+        LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OPTION_MAP_UNWRAP_OR),\n         LintId::of(&methods::OPTION_MAP_UNWRAP_OR_ELSE),\n         LintId::of(&methods::RESULT_MAP_UNWRAP_OR_ELSE),\n@@ -1119,12 +1129,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n+        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::CAST_LOSSLESS),\n         LintId::of(&types::CAST_POSSIBLE_TRUNCATION),\n         LintId::of(&types::CAST_POSSIBLE_WRAP),\n         LintId::of(&types::CAST_PRECISION_LOSS),\n         LintId::of(&types::CAST_SIGN_LOSS),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n+        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n         LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n@@ -1219,7 +1231,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&lifetimes::NEEDLESS_LIFETIMES),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n         LintId::of(&literal_representation::MISTYPED_LITERAL_SUFFIXES),\n-        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::EXPLICIT_COUNTER_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n@@ -1259,20 +1270,19 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::EXPECT_FUN_CALL),\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n-        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::INTO_ITER_ON_REF),\n         LintId::of(&methods::ITERATOR_STEP_BY_ZERO),\n         LintId::of(&methods::ITER_CLONED_COLLECT),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_AND_THEN_SOME),\n         LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::OR_FUN_CALL),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n@@ -1365,7 +1375,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::UNSOUND_COLLECTION_TRANSMUTE),\n         LintId::of(&transmute::WRONG_TRANSMUTE),\n         LintId::of(&transmuting_null::TRANSMUTING_NULL),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&try_err::TRY_ERR),\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n         LintId::of(&types::BORROWED_BOX),\n@@ -1376,7 +1385,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n         LintId::of(&types::UNIT_ARG),\n@@ -1428,7 +1436,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_if_seq::USELESS_LET_IF_SEQ),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),\n-        LintId::of(&literal_representation::UNREADABLE_LITERAL),\n         LintId::of(&loops::EMPTY_LOOP),\n         LintId::of(&loops::FOR_KV_MAP),\n         LintId::of(&loops::NEEDLESS_RANGE_LOOP),\n@@ -1450,9 +1457,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::ITER_NTH_ZERO),\n         LintId::of(&methods::ITER_SKIP_NEXT),\n         LintId::of(&methods::MANUAL_SATURATING_ARITHMETIC),\n-        LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n+        LintId::of(&methods::RESULT_MAP_OR_INTO_OPTION),\n         LintId::of(&methods::SHOULD_IMPLEMENT_TRAIT),\n         LintId::of(&methods::STRING_EXTEND_CHARS),\n         LintId::of(&methods::UNNECESSARY_FOLD),\n@@ -1489,7 +1496,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST),\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&types::IMPLICIT_HASHER),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n@@ -1652,15 +1658,13 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&loops::MANUAL_MEMCPY),\n         LintId::of(&loops::NEEDLESS_COLLECT),\n         LintId::of(&methods::EXPECT_FUN_CALL),\n-        LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::ITER_NTH),\n         LintId::of(&methods::OR_FUN_CALL),\n         LintId::of(&methods::SINGLE_CHAR_PATTERN),\n         LintId::of(&misc::CMP_OWNED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&redundant_clone::REDUNDANT_CLONE),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n-        LintId::of(&trivially_copy_pass_by_ref::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&types::BOX_VEC),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&vec::USELESS_VEC),"}, {"sha": "0a6ffc1130a306f78bc214bb83408403958205fa", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// let x: u64 = 61864918973511;\n     /// ```\n     pub UNREADABLE_LITERAL,\n-    style,\n+    pedantic,\n     \"long integer literal without underscores\"\n }\n "}, {"sha": "8e1501956dd068800aea44c54c6a0140639bd1ed", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -654,15 +654,15 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n \n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n     let stmts = block.stmts.iter().map(stmt_to_expr);\n-    let expr = once(block.expr.as_ref().map(|p| &**p));\n+    let expr = once(block.expr.as_deref());\n     let mut iter = stmts.chain(expr).filter_map(|e| e);\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n-        StmtKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n+        StmtKind::Local(ref local) => local.init.as_deref(),\n         _ => None,\n     }\n }"}, {"sha": "4298e62b80375f5c1189a61ca5eceb3717d00124", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1197,3 +1197,40 @@ where\n \n     None\n }\n+\n+#[test]\n+fn test_overlapping() {\n+    use rustc_span::source_map::DUMMY_SP;\n+\n+    let sp = |s, e| SpannedRange {\n+        span: DUMMY_SP,\n+        node: (s, e),\n+    };\n+\n+    assert_eq!(None, overlapping::<u8>(&[]));\n+    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n+    assert_eq!(\n+        None,\n+        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        None,\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(10, Bound::Included(11))\n+        ],)\n+    );\n+    assert_eq!(\n+        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n+        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n+    );\n+    assert_eq!(\n+        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n+        overlapping(&[\n+            sp(1, Bound::Included(4)),\n+            sp(5, Bound::Included(6)),\n+            sp(6, Bound::Included(11))\n+        ],)\n+    );\n+}"}, {"sha": "3b2f96e4d09fc6acb6663fc1070b9c56e612129a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 123, "deletions": 37, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -331,6 +331,32 @@ declare_clippy_lint! {\n     \"using `Option.map_or(None, f)`, which is more succinctly expressed as `and_then(f)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.map_or(None, Some)`.\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as\n+    /// `_.ok()`.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// Bad:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.map_or(None, Some));\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// # let r: Result<u32, &str> = Ok(1);\n+    /// assert_eq!(Some(1), r.ok());\n+    /// ```\n+    pub RESULT_MAP_OR_INTO_OPTION,\n+    style,\n+    \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `_.and_then(|x| Some(y))`.\n     ///\n@@ -699,7 +725,7 @@ declare_clippy_lint! {\n     /// [\"foo\", \"bar\"].iter().map(|&s| s.to_string());\n     /// ```\n     pub INEFFICIENT_TO_STRING,\n-    perf,\n+    pedantic,\n     \"using `to_string` on `&&T` where `T: ToString`\"\n }\n \n@@ -722,7 +748,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub NEW_RET_NO_SELF,\n-    style,\n+    pedantic,\n     \"not returning `Self` in a `new` method\"\n }\n \n@@ -1249,6 +1275,7 @@ declare_lint_pass!(Methods => [\n     OPTION_MAP_UNWRAP_OR,\n     OPTION_MAP_UNWRAP_OR_ELSE,\n     RESULT_MAP_UNWRAP_OR_ELSE,\n+    RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n     OR_FUN_CALL,\n@@ -2524,38 +2551,78 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n     }\n }\n \n-/// lint use of `_.map_or(None, _)` for `Option`s\n+/// lint use of `_.map_or(None, _)` for `Option`s and `Result`s\n fn lint_map_or_none<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     map_or_args: &'tcx [hir::Expr<'_>],\n ) {\n-    if match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION) {\n-        // check if the first non-self argument to map_or() is None\n-        let map_or_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n+    let is_option = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION);\n+    let is_result = match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::RESULT);\n+\n+    // There are two variants of this `map_or` lint:\n+    // (1) using `map_or` as an adapter from `Result<T,E>` to `Option<T>`\n+    // (2) using `map_or` as a combinator instead of `and_then`\n+    //\n+    // (For this lint) we don't care if any other type calls `map_or`\n+    if !is_option && !is_result {\n+        return;\n+    }\n+\n+    let (lint_name, msg, instead, hint) = {\n+        let default_arg_is_none = if let hir::ExprKind::Path(ref qpath) = map_or_args[1].kind {\n             match_qpath(qpath, &paths::OPTION_NONE)\n+        } else {\n+            return;\n+        };\n+\n+        if !default_arg_is_none {\n+            // nothing to lint!\n+            return;\n+        }\n+\n+        let f_arg_is_some = if let hir::ExprKind::Path(ref qpath) = map_or_args[2].kind {\n+            match_qpath(qpath, &paths::OPTION_SOME)\n         } else {\n             false\n         };\n \n-        if map_or_arg_is_none {\n-            // lint message\n+        if is_option {\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            let func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(f)` instead\";\n-            let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n-            let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n-            let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n-            span_lint_and_sugg(\n-                cx,\n+            (\n                 OPTION_MAP_OR_NONE,\n-                expr.span,\n                 msg,\n                 \"try using `and_then` instead\",\n-                hint,\n-                Applicability::MachineApplicable,\n-            );\n+                format!(\"{0}.and_then({1})\", self_snippet, func_snippet),\n+            )\n+        } else if f_arg_is_some {\n+            let msg = \"called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling \\\n+                       `ok()` instead\";\n+            let self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n+            (\n+                RESULT_MAP_OR_INTO_OPTION,\n+                msg,\n+                \"try using `ok` instead\",\n+                format!(\"{0}.ok()\", self_snippet),\n+            )\n+        } else {\n+            // nothing to lint!\n+            return;\n         }\n-    }\n+    };\n+\n+    span_lint_and_sugg(\n+        cx,\n+        lint_name,\n+        expr.span,\n+        msg,\n+        instead,\n+        hint,\n+        Applicability::MachineApplicable,\n+    );\n }\n \n /// Lint use of `_.and_then(|x| Some(y))` for `Option`s\n@@ -3166,6 +3233,8 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n ) {\n+    let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n+\n     let option_ty = cx.tables.expr_ty(&as_ref_args[0]);\n     if !match_type(cx, option_ty, &paths::OPTION) {\n         return;\n@@ -3188,39 +3257,56 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n         hir::ExprKind::Closure(_, _, body_id, _, _) => {\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n-            if_chain! {\n-                if let hir::ExprKind::MethodCall(_, _, args) = &closure_expr.kind;\n-                if args.len() == 1;\n-                if let hir::ExprKind::Path(qpath) = &args[0].kind;\n-                if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n-                if closure_body.params[0].pat.hir_id == local_id;\n-                let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n-                if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n-                then {\n-                    let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n-                    deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n-                } else {\n-                    false\n-                }\n+\n+            match &closure_expr.kind {\n+                hir::ExprKind::MethodCall(_, _, args) => {\n+                    if_chain! {\n+                        if args.len() == 1;\n+                        if let hir::ExprKind::Path(qpath) = &args[0].kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n+                        if closure_body.params[0].pat.hir_id == local_id;\n+                        let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                        if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n+                        then {\n+                            let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n+                            deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref inner) if same_mutability(m) => {\n+                    if_chain! {\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n+                        if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, inner2.hir_id);\n+                        then {\n+                            closure_body.params[0].pat.hir_id == local_id\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                _ => false,\n             }\n         },\n-\n         _ => false,\n     };\n \n     if is_deref {\n         let current_method = if is_mut {\n-            \".as_mut().map(DerefMut::deref_mut)\"\n+            format!(\".as_mut().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         } else {\n-            \".as_ref().map(Deref::deref)\"\n+            format!(\".as_ref().map({})\", snippet(cx, map_args[1].span, \"..\"))\n         };\n         let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n         let hint = format!(\"{}.{}()\", snippet(cx, as_ref_args[0].span, \"..\"), method_hint);\n         let suggestion = format!(\"try using {} instead\", method_hint);\n \n         let msg = format!(\n-            \"called `{0}` (or with one of deref aliases) on an Option value. \\\n-             This can be done more directly by calling `{1}` instead\",\n+            \"called `{0}` on an Option value. This can be done more directly \\\n+            by calling `{1}` instead\",\n             current_method, hint\n         );\n         span_lint_and_sugg("}, {"sha": "f1e223d9a48c65c95268893cac55b88854afcb68", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -54,7 +54,7 @@ declare_lint_pass!(SuspiciousImpl => [SUSPICIOUS_ARITHMETIC_IMPL, SUSPICIOUS_OP_\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if let hir::ExprKind::Binary(binop, _, _) = expr.kind {\n+        if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind {\n             match binop.node {\n                 hir::BinOpKind::Eq\n                 | hir::BinOpKind::Lt\n@@ -65,14 +65,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for SuspiciousImpl {\n                 _ => {},\n             }\n             // Check if the binary expression is part of another bi/unary expression\n-            // as a child node\n+            // or operator assignment as a child node\n             let mut parent_expr = cx.tcx.hir().get_parent_node(expr.hir_id);\n             while parent_expr != hir::CRATE_HIR_ID {\n                 if let hir::Node::Expr(e) = cx.tcx.hir().get(parent_expr) {\n                     match e.kind {\n                         hir::ExprKind::Binary(..)\n                         | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-                        | hir::ExprKind::Unary(hir::UnOp::UnNeg, _) => return,\n+                        | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+                        | hir::ExprKind::AssignOp(..) => return,\n                         _ => {},\n                     }\n                 }\n@@ -191,7 +192,8 @@ impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n             | hir::ExprKind::Unary(hir::UnOp::UnNot, _)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNeg, _) => self.in_binary_expr = true,\n+            | hir::ExprKind::Unary(hir::UnOp::UnNeg, _)\n+            | hir::ExprKind::AssignOp(..) => self.in_binary_expr = true,\n             _ => {},\n         }\n "}, {"sha": "2c101220c5d6897f943b0799d615993283d2194e", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -49,7 +49,7 @@ declare_clippy_lint! {\n     /// fn foo(v: u32) {}\n     /// ```\n     pub TRIVIALLY_COPY_PASS_BY_REF,\n-    perf,\n+    pedantic,\n     \"functions taking small copyable arguments by reference\"\n }\n "}, {"sha": "e2b16079f8f5de0c8fa264fcefeb60f3c4b80119", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -593,7 +593,7 @@ declare_clippy_lint! {\n     /// };\n     /// ```\n     pub LET_UNIT_VALUE,\n-    style,\n+    pedantic,\n     \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n "}, {"sha": "a66d4e66add2ca54a8979409410bd63a35820652", "filename": "doc/adding_lints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -463,11 +463,11 @@ don't hesitate to ask on [Discord] or in the issue/PR.\n [utils]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/utils/mod.rs\n [if_chain]: https://docs.rs/if_chain/*/if_chain/\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n-[in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/lint/fn.in_external_macro.html\n+[in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/fn.in_external_macro.html\n [span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html\n [applicability]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/enum.Applicability.html\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n-[nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/\n+[nightly_docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/\n [ast]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/index.html\n-[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/sty/index.html\n+[ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/sty/index.html\n [Discord]: https://discord.gg/rust-lang"}, {"sha": "00add20b7ae8bb87660470ca43d3c3ad78bc58f6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -789,7 +789,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"inefficient_to_string\",\n-        group: \"perf\",\n+        group: \"pedantic\",\n         desc: \"using `to_string` on `&&T` where `T: ToString`\",\n         deprecation: None,\n         module: \"methods\",\n@@ -999,7 +999,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"let_unit_value\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"creating a `let` binding to a value of unit type, which usually can\\'t be used afterwards\",\n         deprecation: None,\n         module: \"types\",\n@@ -1447,7 +1447,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"new_ret_no_self\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"not returning `Self` in a `new` method\",\n         deprecation: None,\n         module: \"methods\",\n@@ -1823,6 +1823,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"result_map_or_into_option\",\n+        group: \"style\",\n+        desc: \"using `Result.map_or(None, Some)`, which is more succinctly expressed as `ok()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\",\n@@ -2161,7 +2168,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"trivially_copy_pass_by_ref\",\n-        group: \"perf\",\n+        group: \"pedantic\",\n         desc: \"functions taking small copyable arguments by reference\",\n         deprecation: None,\n         module: \"trivially_copy_pass_by_ref\",\n@@ -2294,7 +2301,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"unreadable_literal\",\n-        group: \"style\",\n+        group: \"pedantic\",\n         desc: \"long integer literal without underscores\",\n         deprecation: None,\n         module: \"literal_representation\","}, {"sha": "6691c074caf9ed1de8d434922927f1457724b591", "filename": "tests/matches.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b4098335d9ea2468f0ceea82f3c8315fa5decc1/tests%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmatches.rs?ref=0b4098335d9ea2468f0ceea82f3c8315fa5decc1", "patch": "@@ -1,42 +0,0 @@\n-#![feature(rustc_private)]\n-\n-extern crate rustc_span;\n-use std::collections::Bound;\n-\n-#[test]\n-fn test_overlapping() {\n-    use clippy_lints::matches::overlapping;\n-    use rustc_span::source_map::DUMMY_SP;\n-\n-    let sp = |s, e| clippy_lints::matches::SpannedRange {\n-        span: DUMMY_SP,\n-        node: (s, e),\n-    };\n-\n-    assert_eq!(None, overlapping::<u8>(&[]));\n-    assert_eq!(None, overlapping(&[sp(1, Bound::Included(4))]));\n-    assert_eq!(\n-        None,\n-        overlapping(&[sp(1, Bound::Included(4)), sp(5, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        None,\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(10, Bound::Included(11))\n-        ],)\n-    );\n-    assert_eq!(\n-        Some((&sp(1, Bound::Included(4)), &sp(3, Bound::Included(6)))),\n-        overlapping(&[sp(1, Bound::Included(4)), sp(3, Bound::Included(6))])\n-    );\n-    assert_eq!(\n-        Some((&sp(5, Bound::Included(6)), &sp(6, Bound::Included(11)))),\n-        overlapping(&[\n-            sp(1, Bound::Included(4)),\n-            sp(5, Bound::Included(6)),\n-            sp(6, Bound::Included(11))\n-        ],)\n-    );\n-}"}, {"sha": "19019a2541631767abf56555c0411d03465af1af", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]"}, {"sha": "912761a8f009c2dfd2e856d7e62d12ad5113e94c", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,13 +1,17 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:11\n+  --> $DIR/test.rs:15:11\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |           ^^^^ help: consider passing by value instead: `u16`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/test.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:14:20\n+  --> $DIR/test.rs:15:20\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`"}, {"sha": "fb57a0becbb25e81b751bef0e1be0ddb0b559253", "filename": "tests/ui/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n #[warn(clippy::approx_constant)]\n-#[allow(unused, clippy::shadow_unrelated, clippy::similar_names, clippy::unreadable_literal)]\n+#[allow(unused, clippy::shadow_unrelated, clippy::similar_names)]\n fn main() {\n     let my_e = 2.7182;\n     let almost_e = 2.718;"}, {"sha": "5bfa256623b6bbcd5b56bb93421b655e417f0d68", "filename": "tests/ui/clone_on_copy_mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fclone_on_copy_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fclone_on_copy_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclone_on_copy_mut.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -5,7 +5,6 @@ pub fn dec_read_dec(i: &mut i32) -> i32 {\n     ret\n }\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n pub fn minus_1(i: &i32) -> i32 {\n     dec_read_dec(&mut i.clone())\n }"}, {"sha": "b061fff6b9e9dfb775f5cab14783c01678d802cc", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,7 @@\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n #![warn(clippy::debug_assert_with_mut_call)]\n-#![allow(clippy::trivially_copy_pass_by_ref, clippy::cognitive_complexity, clippy::redundant_closure_call)]\n+#![allow(clippy::cognitive_complexity, clippy::redundant_closure_call)]\n \n struct S;\n "}, {"sha": "484aa72d59a25a43c6276ebf4d48dd7ba12e7c01", "filename": "tests/ui/doc_unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fdoc_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fdoc_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -88,7 +88,6 @@ very_unsafe!();\n // we don't lint code from external macros\n undocd_unsafe!();\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     unsafe {\n         you_dont_see_me();"}, {"sha": "1b34c2f74eba1cf41055c0fe3436fea25f79a541", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "4f050bd8479ae90e7784ffc33bd44698c17724df", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -6,8 +6,7 @@\n     clippy::redundant_closure_call,\n     clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n-    clippy::option_map_unit_fn,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::option_map_unit_fn\n )]\n #![warn(\n     clippy::redundant_closure,"}, {"sha": "c4713ca8083dd1f1afb28d0dafe2c7fc793d5da3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,77 +1,77 @@\n error: redundant closure found\n-  --> $DIR/eta.rs:21:27\n+  --> $DIR/eta.rs:20:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: remove closure as shown: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:22:10\n+  --> $DIR/eta.rs:21:10\n    |\n LL |     meta(|a| foo(a));\n    |          ^^^^^^^^^^ help: remove closure as shown: `foo`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:25:21\n+  --> $DIR/eta.rs:24:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:32:27\n+  --> $DIR/eta.rs:31:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `generic`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:75:51\n+  --> $DIR/eta.rs:74:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: remove closure as shown: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:77:51\n+  --> $DIR/eta.rs:76:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `TestTrait::trait_foo`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:80:42\n+  --> $DIR/eta.rs:79:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: remove closure as shown: `std::vec::Vec::clear`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:85:29\n+  --> $DIR/eta.rs:84:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: remove closure as shown: `std::string::ToString::to_string`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:87:27\n+  --> $DIR/eta.rs:86:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:90:65\n+  --> $DIR/eta.rs:89:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove closure as shown: `char::to_ascii_uppercase`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:173:27\n+  --> $DIR/eta.rs:172:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `foo_ptr`\n \n error: redundant closure found\n-  --> $DIR/eta.rs:178:27\n+  --> $DIR/eta.rs:177:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: remove closure as shown: `closure`"}, {"sha": "ddbf4e98c51ab6921808eb14b64055975b4557e8", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,10 +1,4 @@\n-#![allow(\n-    unused,\n-    dead_code,\n-    clippy::needless_lifetimes,\n-    clippy::needless_pass_by_value,\n-    clippy::trivially_copy_pass_by_ref\n-)]\n+#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {}"}, {"sha": "16bbb1c037d84c6f3a86c442edfc639eddc534ef", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:14:14\n+  --> $DIR/extra_unused_lifetimes.rs:8:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:16:25\n+  --> $DIR/extra_unused_lifetimes.rs:10:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:41:10\n+  --> $DIR/extra_unused_lifetimes.rs:35:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:67:22\n+  --> $DIR/extra_unused_lifetimes.rs:61:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "60fa7569eb9dd5f14fb0292608534a72d1b1bc20", "filename": "tests/ui/float_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ffloat_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ffloat_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "1ceffb35beede707299d01555ee718c7ad3bb1ea", "filename": "tests/ui/float_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ffloat_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ffloat_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_arithmetic.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,103 +1,103 @@\n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:16:5\n+  --> $DIR/float_arithmetic.rs:15:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::float-arithmetic` implied by `-D warnings`\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:18:5\n+  --> $DIR/float_arithmetic.rs:17:5\n    |\n LL |     1.0 + f;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:19:5\n+  --> $DIR/float_arithmetic.rs:18:5\n    |\n LL |     f * 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:20:5\n+  --> $DIR/float_arithmetic.rs:19:5\n    |\n LL |     f / 2.0;\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:21:5\n+  --> $DIR/float_arithmetic.rs:20:5\n    |\n LL |     f - 2.0 * 4.2;\n    |     ^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:22:5\n+  --> $DIR/float_arithmetic.rs:21:5\n    |\n LL |     -f;\n    |     ^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:24:5\n+  --> $DIR/float_arithmetic.rs:23:5\n    |\n LL |     f += 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:25:5\n+  --> $DIR/float_arithmetic.rs:24:5\n    |\n LL |     f -= 1.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:26:5\n+  --> $DIR/float_arithmetic.rs:25:5\n    |\n LL |     f *= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:27:5\n+  --> $DIR/float_arithmetic.rs:26:5\n    |\n LL |     f /= 2.0;\n    |     ^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:33:5\n+  --> $DIR/float_arithmetic.rs:32:5\n    |\n LL |     3.1_f32 + &1.2_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:34:5\n+  --> $DIR/float_arithmetic.rs:33:5\n    |\n LL |     &3.4_f32 + 1.5_f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:35:5\n+  --> $DIR/float_arithmetic.rs:34:5\n    |\n LL |     &3.5_f32 + &1.3_f32;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:40:5\n+  --> $DIR/float_arithmetic.rs:39:5\n    |\n LL |     a + f\n    |     ^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:44:5\n+  --> $DIR/float_arithmetic.rs:43:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:48:5\n+  --> $DIR/float_arithmetic.rs:47:5\n    |\n LL |     f1 + f2\n    |     ^^^^^^^\n \n error: floating-point arithmetic detected\n-  --> $DIR/float_arithmetic.rs:52:5\n+  --> $DIR/float_arithmetic.rs:51:5\n    |\n LL |     (&f1 + &f2)\n    |     ^^^^^^^^^^^"}, {"sha": "ae4d1806af494af782da82b7fd39261839edaa40", "filename": "tests/ui/inconsistent_digit_grouping.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #[warn(clippy::inconsistent_digit_grouping)]\n+#[deny(clippy::unreadable_literal)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n     macro_rules! mac1 {"}, {"sha": "a1ac21746f648254ca08e4f337ea1643a4488fca", "filename": "tests/ui/inconsistent_digit_grouping.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #[warn(clippy::inconsistent_digit_grouping)]\n+#[deny(clippy::unreadable_literal)]\n #[allow(unused_variables, clippy::excessive_precision)]\n fn main() {\n     macro_rules! mac1 {"}, {"sha": "b8ac915546200718aba29271f5776a380980efe7", "filename": "tests/ui/inconsistent_digit_grouping.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finconsistent_digit_grouping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finconsistent_digit_grouping.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,63 +1,67 @@\n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:16\n+  --> $DIR/inconsistent_digit_grouping.rs:26:16\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                ^^^^^^^^ help: consider: `123_456`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:26\n+  --> $DIR/inconsistent_digit_grouping.rs:26:26\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                          ^^^^^^^^^^ help: consider: `12_345_678`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:38\n+  --> $DIR/inconsistent_digit_grouping.rs:26:38\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                      ^^^^^^^^ help: consider: `1_234_567`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:48\n+  --> $DIR/inconsistent_digit_grouping.rs:26:48\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                ^^^^^^^^^^^^^^ help: consider: `1_234.567_8_f32`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:25:64\n+  --> $DIR/inconsistent_digit_grouping.rs:26:64\n    |\n LL |     let bad = (1_23_456, 1_234_5678, 1234_567, 1_234.5678_f32, 1.234_5678_f32);\n    |                                                                ^^^^^^^^^^^^^^ help: consider: `1.234_567_8_f32`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:28:13\n+  --> $DIR/inconsistent_digit_grouping.rs:29:13\n    |\n LL |     let _ = 0x100000;\n    |             ^^^^^^^^ help: consider: `0x0010_0000`\n    |\n-   = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/inconsistent_digit_grouping.rs:3:8\n+   |\n+LL | #[deny(clippy::unreadable_literal)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:29:13\n+  --> $DIR/inconsistent_digit_grouping.rs:30:13\n    |\n LL |     let _ = 0x1000000;\n    |             ^^^^^^^^^ help: consider: `0x0100_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:30:13\n+  --> $DIR/inconsistent_digit_grouping.rs:31:13\n    |\n LL |     let _ = 0x10000000;\n    |             ^^^^^^^^^^ help: consider: `0x1000_0000`\n \n error: long literal lacking separators\n-  --> $DIR/inconsistent_digit_grouping.rs:31:13\n+  --> $DIR/inconsistent_digit_grouping.rs:32:13\n    |\n LL |     let _ = 0x100000000_u64;\n    |             ^^^^^^^^^^^^^^^ help: consider: `0x0001_0000_0000_u64`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/inconsistent_digit_grouping.rs:34:18\n+  --> $DIR/inconsistent_digit_grouping.rs:35:18\n    |\n LL |     let _: f32 = 1_23_456.;\n    |                  ^^^^^^^^^ help: consider: `123_456.`"}, {"sha": "1fe688977659d962c5535b4127df8cf546c4852a", "filename": "tests/ui/infinite_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,4 @@\n use std::iter::repeat;\n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn square_is_lower_64(x: &u32) -> bool {\n     x * x < 64\n }"}, {"sha": "5f5e7ac9f253a0e0589dec0a662495f5747d2bb4", "filename": "tests/ui/infinite_iter.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_iter.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,29 +1,29 @@\n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:10:5\n+  --> $DIR/infinite_iter.rs:9:5\n    |\n LL |     repeat(0_u8).collect::<Vec<_>>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:8:8\n+  --> $DIR/infinite_iter.rs:7:8\n    |\n LL | #[deny(clippy::infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:11:5\n+  --> $DIR/infinite_iter.rs:10:5\n    |\n LL |     (0..8_u32).take_while(square_is_lower_64).cycle().count(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:12:5\n+  --> $DIR/infinite_iter.rs:11:5\n    |\n LL |     (0..8_u64).chain(0..).max(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:17:5\n+  --> $DIR/infinite_iter.rs:16:5\n    |\n LL | /     (0..8_u32)\n LL | |         .rev()\n@@ -33,37 +33,37 @@ LL | |         .for_each(|x| println!(\"{}\", x)); // infinite iter\n    | |________________________________________^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:23:5\n+  --> $DIR/infinite_iter.rs:22:5\n    |\n LL |     (0_usize..).flat_map(|x| 0..x).product::<usize>(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:24:5\n+  --> $DIR/infinite_iter.rs:23:5\n    |\n LL |     (0_u64..).filter(|x| x % 2 == 0).last(); // infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:31:5\n+  --> $DIR/infinite_iter.rs:30:5\n    |\n LL |     (0..).zip((0..).take_while(square_is_lower_64)).count(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/infinite_iter.rs:29:8\n+  --> $DIR/infinite_iter.rs:28:8\n    |\n LL | #[deny(clippy::maybe_infinite_iter)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:32:5\n+  --> $DIR/infinite_iter.rs:31:5\n    |\n LL |     repeat(42).take_while(|x| *x == 42).chain(0..42).max(); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:33:5\n+  --> $DIR/infinite_iter.rs:32:5\n    |\n LL | /     (1..)\n LL | |         .scan(0, |state, x| {\n@@ -74,31 +74,31 @@ LL | |         .min(); // maybe infinite iter\n    | |______________^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:39:5\n+  --> $DIR/infinite_iter.rs:38:5\n    |\n LL |     (0..).find(|x| *x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:40:5\n+  --> $DIR/infinite_iter.rs:39:5\n    |\n LL |     (0..).position(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:41:5\n+  --> $DIR/infinite_iter.rs:40:5\n    |\n LL |     (0..).any(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: possible infinite iteration detected\n-  --> $DIR/infinite_iter.rs:42:5\n+  --> $DIR/infinite_iter.rs:41:5\n    |\n LL |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:65:31\n+  --> $DIR/infinite_iter.rs:64:31\n    |\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "72591f12baf852811efbc511a1ee7cf965929fe7", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,3 @@\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n-\n fn fn_val(i: i32) -> i32 {\n     unimplemented!()\n }"}, {"sha": "1fcb29eff18e41c05d34873d57bfe2ab77dd7f48", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:23:11\n+  --> $DIR/infinite_loop.rs:21:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -8,71 +8,71 @@ LL |     while y < 10 {\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:28:11\n+  --> $DIR/infinite_loop.rs:26:11\n    |\n LL |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:35:11\n+  --> $DIR/infinite_loop.rs:33:11\n    |\n LL |     while !cond {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:79:11\n+  --> $DIR/infinite_loop.rs:77:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:84:11\n+  --> $DIR/infinite_loop.rs:82:11\n    |\n LL |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:88:11\n+  --> $DIR/infinite_loop.rs:86:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:103:11\n+  --> $DIR/infinite_loop.rs:101:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:108:11\n+  --> $DIR/infinite_loop.rs:106:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:174:15\n+  --> $DIR/infinite_loop.rs:172:15\n    |\n LL |         while self.count < n {\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:182:11\n+  --> $DIR/infinite_loop.rs:180:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -82,7 +82,7 @@ LL |     while y < 10 {\n    = help: rewrite it as `if cond { loop { } }`\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:189:11\n+  --> $DIR/infinite_loop.rs:187:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^"}, {"sha": "2fe32c6ace875c8790f8e302d44d6401cd1a8d79", "filename": "tests/ui/integer_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finteger_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finteger_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -5,8 +5,7 @@\n     clippy::shadow_unrelated,\n     clippy::no_effect,\n     clippy::unnecessary_operation,\n-    clippy::op_ref,\n-    clippy::trivially_copy_pass_by_ref\n+    clippy::op_ref\n )]\n \n #[rustfmt::skip]"}, {"sha": "64c44d7ecc7b06bfa3e3d321c8304726a11f3c5b", "filename": "tests/ui/integer_arithmetic.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finteger_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Finteger_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finteger_arithmetic.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,104 +1,104 @@\n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:15:5\n+  --> $DIR/integer_arithmetic.rs:14:5\n    |\n LL |     1 + i;\n    |     ^^^^^\n    |\n    = note: `-D clippy::integer-arithmetic` implied by `-D warnings`\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:16:5\n+  --> $DIR/integer_arithmetic.rs:15:5\n    |\n LL |     i * 2;\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:17:5\n+  --> $DIR/integer_arithmetic.rs:16:5\n    |\n LL | /     1 %\n LL | |     i / 2; // no error, this is part of the expression in the preceding line\n    | |_________^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:19:5\n+  --> $DIR/integer_arithmetic.rs:18:5\n    |\n LL |     i - 2 + 2 - i;\n    |     ^^^^^^^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:20:5\n+  --> $DIR/integer_arithmetic.rs:19:5\n    |\n LL |     -i;\n    |     ^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:32:5\n+  --> $DIR/integer_arithmetic.rs:31:5\n    |\n LL |     i += 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:33:5\n+  --> $DIR/integer_arithmetic.rs:32:5\n    |\n LL |     i -= 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:34:5\n+  --> $DIR/integer_arithmetic.rs:33:5\n    |\n LL |     i *= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:35:5\n+  --> $DIR/integer_arithmetic.rs:34:5\n    |\n LL |     i /= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:36:5\n+  --> $DIR/integer_arithmetic.rs:35:5\n    |\n LL |     i %= 2;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:82:5\n+  --> $DIR/integer_arithmetic.rs:81:5\n    |\n LL |     3 + &1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:83:5\n+  --> $DIR/integer_arithmetic.rs:82:5\n    |\n LL |     &3 + 1;\n    |     ^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:84:5\n+  --> $DIR/integer_arithmetic.rs:83:5\n    |\n LL |     &3 + &1;\n    |     ^^^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:89:5\n+  --> $DIR/integer_arithmetic.rs:88:5\n    |\n LL |     a + x\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:93:5\n+  --> $DIR/integer_arithmetic.rs:92:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:97:5\n+  --> $DIR/integer_arithmetic.rs:96:5\n    |\n LL |     x + y\n    |     ^^^^^\n \n error: integer arithmetic detected\n-  --> $DIR/integer_arithmetic.rs:101:5\n+  --> $DIR/integer_arithmetic.rs:100:5\n    |\n LL |     (&x + &y)\n    |     ^^^^^^^^^"}, {"sha": "a9a04c8f56b945ca7c0e94b35a211119f7799a2d", "filename": "tests/ui/mut_from_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fmut_from_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fmut_from_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_from_ref.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused)]\n #![warn(clippy::mut_from_ref)]\n \n struct Foo;"}, {"sha": "73906121c402efba40d6f13c9cc696d7f669c628", "filename": "tests/ui/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused_variables, clippy::trivially_copy_pass_by_ref)]\n+#![allow(unused_variables)]\n \n fn takes_an_immutable_reference(a: &i32) {}\n fn takes_a_mutable_reference(a: &mut i32) {}"}, {"sha": "5ae4a0e79b99d39a9ca852111c09ed7ed313fa51", "filename": "tests/ui/needless_borrow.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "1e281316c8a39c10e053d2d529896c93b19b1400", "filename": "tests/ui/needless_borrow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(clippy::needless_borrowed_reference)]\n \n-#[allow(clippy::trivially_copy_pass_by_ref)]\n fn x(y: &i32) -> i32 {\n     *y\n }"}, {"sha": "0bfeda7914db70182e39f4eef6d960251d208a8c", "filename": "tests/ui/needless_borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,25 +1,25 @@\n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:15:15\n+  --> $DIR/needless_borrow.rs:14:15\n    |\n LL |     let c = x(&&a);\n    |               ^^^ help: change this to: `&a`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:22:17\n+  --> $DIR/needless_borrow.rs:21:17\n    |\n LL |     if let Some(ref cake) = Some(&5) {}\n    |                 ^^^^^^^^ help: change this to: `cake`\n \n error: this expression borrows a reference that is immediately dereferenced by the compiler\n-  --> $DIR/needless_borrow.rs:29:15\n+  --> $DIR/needless_borrow.rs:28:15\n    |\n LL |         46 => &&a,\n    |               ^^^ help: change this to: `&a`\n \n error: this pattern creates a reference to a reference\n-  --> $DIR/needless_borrow.rs:52:31\n+  --> $DIR/needless_borrow.rs:51:31\n    |\n LL |     let _ = v.iter().filter(|&ref a| a.is_empty());\n    |                               ^^^^^ help: change this to: `a`"}, {"sha": "913cd004f19f4bd70941f49127930ec902573669", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_lifetimes)]\n-#![allow(dead_code, clippy::needless_pass_by_value, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code, clippy::needless_pass_by_value)]\n \n fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) {}\n "}, {"sha": "35aaecc9ac42372ff23bb38e17837ed659351ecb", "filename": "tests/ui/new_ret_no_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fnew_ret_no_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fnew_ret_no_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_ret_no_self.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::new_ret_no_self)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}, {"sha": "076692e6445175da398e3ae788c803c5b57ba901", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -35,4 +35,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_deref();\n+    let _ = opt.as_deref_mut();\n }"}, {"sha": "3bf5f715f8339525b8ad547d75eea77a96b0c1f2", "filename": "tests/ui/option_as_ref_deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -38,4 +38,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_ref().map(|x| &**x);\n+    let _ = opt.as_mut().map(|x| &mut **x);\n }"}, {"sha": "a106582a633232b4bfcdc95c78308440d2480137", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,12 +1,12 @@\n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:13:13\n    |\n LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n    |\n    = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+error: called `.as_ref().map(Deref::deref)` on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:16:13\n    |\n LL |       let _ = opt.clone()\n@@ -16,77 +16,89 @@ LL | |             Deref::deref\n LL | |         )\n    | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(DerefMut::deref_mut)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:22:13\n    |\n LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(String::as_str)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:24:13\n    |\n LL |     let _ = opt.as_ref().map(String::as_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.as_str())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:25:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.as_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(String::as_mut_str)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:26:13\n    |\n LL |     let _ = opt.as_mut().map(String::as_mut_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.as_mut_str())` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:27:13\n    |\n LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n+error: called `.as_ref().map(CString::as_c_str)` on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:28:13\n    |\n LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n+error: called `.as_ref().map(OsString::as_os_str)` on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:29:13\n    |\n LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n+error: called `.as_ref().map(PathBuf::as_path)` on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:30:13\n    |\n LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n+error: called `.as_ref().map(Vec::as_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:31:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n+error: called `.as_mut().map(Vec::as_mut_slice)` on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:32:13\n    |\n LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n \n-error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+error: called `.as_ref().map(|x| x.deref())` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n   --> $DIR/option_as_ref_deref.rs:34:13\n    |\n LL |     let _ = opt.as_ref().map(|x| x.deref());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n \n-error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n+error: called `.as_mut().map(|x| x.deref_mut())` on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n   --> $DIR/option_as_ref_deref.rs:35:13\n    |\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n-error: aborting due to 14 previous errors\n+error: called `.as_ref().map(|x| &**x)` on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:42:13\n+   |\n+LL |     let _ = opt.as_ref().map(|x| &**x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_mut().map(|x| &mut **x)` on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:43:13\n+   |\n+LL |     let _ = opt.as_mut().map(|x| &mut **x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "538fa1ed9cb021341511fbe33f59fb34acc5df29", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     Ok::<i32, i32>(42).is_ok();"}, {"sha": "34d2cd62e54e92db0439cf44d2765c4900b2593d", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,7 @@\n \n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n-#![allow(clippy::unit_arg, clippy::let_unit_value, unused_must_use)]\n+#![allow(clippy::unit_arg, unused_must_use)]\n \n fn main() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}"}, {"sha": "331531b5165f61dce075c4d800d9d806a7dba3e3", "filename": "tests/ui/result_map_or_into_option.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.ok();\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "3058480e2ad3d935c114a144ea504e495d033f7f", "filename": "tests/ui/result_map_or_into_option.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#![warn(clippy::result_map_or_into_option)]\n+\n+fn main() {\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, Some);\n+\n+    let rewrap = |s: u32| -> Option<u32> { Some(s) };\n+\n+    // A non-Some `f` arg should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    let _ = opt.map_or(None, rewrap);\n+\n+    // A non-Some `f` closure where the argument is not used as the\n+    // return should not emit the lint\n+    let opt: Result<u32, &str> = Ok(1);\n+    opt.map_or(None, |_x| Some(1));\n+}"}, {"sha": "febf32147d132d3e163e13080e025ccd31d30263", "filename": "tests/ui/result_map_or_into_option.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fresult_map_or_into_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_or_into_option.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -0,0 +1,10 @@\n+error: called `map_or(None, Some)` on a `Result` value. This can be done more directly by calling `ok()` instead\n+  --> $DIR/result_map_or_into_option.rs:7:13\n+   |\n+LL |     let _ = opt.map_or(None, Some);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try using `ok` instead: `opt.ok()`\n+   |\n+   = note: `-D clippy::result-map-or-into-option` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1f5b981188706fd579b77f761c5563a79bdaa7f6", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::suspicious_arithmetic_impl)]\n-use std::ops::{Add, AddAssign, Div, Mul, Sub};\n+use std::ops::{Add, AddAssign, BitOrAssign, Div, DivAssign, Mul, MulAssign, Sub};\n \n #[derive(Copy, Clone)]\n struct Foo(u32);\n@@ -18,6 +18,25 @@ impl AddAssign for Foo {\n     }\n }\n \n+impl BitOrAssign for Foo {\n+    fn bitor_assign(&mut self, other: Foo) {\n+        let idx = other.0;\n+        self.0 |= 1 << idx; // OK: BinOpKind::Shl part of AssignOp as child node\n+    }\n+}\n+\n+impl MulAssign for Foo {\n+    fn mul_assign(&mut self, other: Foo) {\n+        self.0 /= other.0;\n+    }\n+}\n+\n+impl DivAssign for Foo {\n+    fn div_assign(&mut self, other: Foo) {\n+        self.0 /= other.0; // OK: BinOpKind::Div == DivAssign\n+    }\n+}\n+\n impl Mul for Foo {\n     type Output = Foo;\n "}, {"sha": "7e42d72c30b2cefd6503f6315ac316e0e372053f", "filename": "tests/ui/suspicious_arithmetic_impl.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -14,5 +14,11 @@ LL |         *self = *self - other;\n    |\n    = note: `#[deny(clippy::suspicious_op_assign_impl)]` on by default\n \n-error: aborting due to 2 previous errors\n+error: Suspicious use of binary operator in `MulAssign` impl\n+  --> $DIR/suspicious_arithmetic_impl.rs:30:16\n+   |\n+LL |         self.0 /= other.0;\n+   |                ^^\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "316426f1cf181788dbc48dba7e69f244f4908531", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,6 +1,7 @@\n // normalize-stderr-test \"\\(\\d+ byte\\)\" -> \"(N byte)\"\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n+#![deny(clippy::trivially_copy_pass_by_ref)]\n #![allow(\n     clippy::many_single_char_names,\n     clippy::blacklisted_name,"}, {"sha": "be0914e4a7947f7197002ee591009b0c79fa8abd", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,91 +1,95 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n-   = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n+note: the lint level is defined here\n+  --> $DIR/trivially_copy_pass_by_ref.rs:4:9\n+   |\n+LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:50:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:57:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:59:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:71:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:72:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:75:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:76:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:37\n+  --> $DIR/trivially_copy_pass_by_ref.rs:80:37\n    |\n LL |     fn trait_method2(&self, _color: &Color);\n    |                                     ^^^^^^ help: consider passing by value instead: `Color`"}, {"sha": "f42b884e0f0e546ce0bb95dd5793fbb85dda4e34", "filename": "tests/ui/uninit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -2,7 +2,6 @@\n \n use std::mem::MaybeUninit;\n \n-#[allow(clippy::let_unit_value)]\n fn main() {\n     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n "}, {"sha": "a37233ecddaee0dd4181bb95e80ecc347d9210e2", "filename": "tests/ui/uninit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Funinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Funinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,13 +1,13 @@\n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:7:29\n+  --> $DIR/uninit.rs:6:29\n    |\n LL |     let _: usize = unsafe { MaybeUninit::uninit().assume_init() };\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::uninit_assumed_init)]` on by default\n \n error: this call for this type may be undefined behavior\n-  --> $DIR/uninit.rs:10:31\n+  --> $DIR/uninit.rs:9:31\n    |\n LL |     let _: [u8; 0] = unsafe { MaybeUninit::uninit().assume_init() };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e356f13d087b1fcdeffbb7a3c4f15d52b55b183e", "filename": "tests/ui/useless_asref.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.fixed?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "2a80291f5d837b4614de012ac60f9fb1d2b9b256", "filename": "tests/ui/useless_asref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,7 +1,6 @@\n // run-rustfix\n \n #![deny(clippy::useless_asref)]\n-#![allow(clippy::trivially_copy_pass_by_ref)]\n \n use std::fmt::Debug;\n "}, {"sha": "5876b54aca8f0e8347995ae6c6ead836768b6a7c", "filename": "tests/ui/useless_asref.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,5 +1,5 @@\n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:44:18\n+  --> $DIR/useless_asref.rs:43:18\n    |\n LL |         foo_rstr(rstr.as_ref());\n    |                  ^^^^^^^^^^^^^ help: try this: `rstr`\n@@ -11,61 +11,61 @@ LL | #![deny(clippy::useless_asref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:46:20\n+  --> $DIR/useless_asref.rs:45:20\n    |\n LL |         foo_rslice(rslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^ help: try this: `rslice`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:50:21\n+  --> $DIR/useless_asref.rs:49:21\n    |\n LL |         foo_mrslice(mrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:52:20\n+  --> $DIR/useless_asref.rs:51:20\n    |\n LL |         foo_rslice(mrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:59:20\n+  --> $DIR/useless_asref.rs:58:20\n    |\n LL |         foo_rslice(rrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^ help: try this: `rrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:61:18\n+  --> $DIR/useless_asref.rs:60:18\n    |\n LL |         foo_rstr(rrrrrstr.as_ref());\n    |                  ^^^^^^^^^^^^^^^^^ help: try this: `rrrrrstr`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:66:21\n+  --> $DIR/useless_asref.rs:65:21\n    |\n LL |         foo_mrslice(mrrrrrslice.as_mut());\n    |                     ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:68:20\n+  --> $DIR/useless_asref.rs:67:20\n    |\n LL |         foo_rslice(mrrrrrslice.as_ref());\n    |                    ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:72:16\n+  --> $DIR/useless_asref.rs:71:16\n    |\n LL |     foo_rrrrmr((&&&&MoreRef).as_ref());\n    |                ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&&&&MoreRef)`\n \n error: this call to `as_mut` does nothing\n-  --> $DIR/useless_asref.rs:122:13\n+  --> $DIR/useless_asref.rs:121:13\n    |\n LL |     foo_mrt(mrt.as_mut());\n    |             ^^^^^^^^^^^^ help: try this: `mrt`\n \n error: this call to `as_ref` does nothing\n-  --> $DIR/useless_asref.rs:124:12\n+  --> $DIR/useless_asref.rs:123:12\n    |\n LL |     foo_rt(mrt.as_ref());\n    |            ^^^^^^^^^^^^ help: try this: `mrt`"}, {"sha": "99652ca4470c2a47530812a3b78f0e2381f68ec3", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8308c811f695a6025d48dbc89267ec4d32b5354/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=f8308c811f695a6025d48dbc89267ec4d32b5354", "patch": "@@ -1,6 +1,6 @@\n #![warn(clippy::wrong_self_convention)]\n #![warn(clippy::wrong_pub_self_convention)]\n-#![allow(dead_code, clippy::trivially_copy_pass_by_ref)]\n+#![allow(dead_code)]\n \n fn main() {}\n "}]}