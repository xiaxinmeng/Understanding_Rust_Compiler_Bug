{"sha": "4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmU0YzM3Y2UwMWE5OGM3NjhhOTg2YjBiODdhNmU5M2VmNzI2OTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T21:05:22Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T21:05:22Z"}, "message": "librustc: Make `use` statements crate-relative by default. r=brson", "tree": {"sha": "2797f91282868d040c9066e20e5eb83821ba0b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2797f91282868d040c9066e20e5eb83821ba0b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "html_url": "https://github.com/rust-lang/rust/commit/4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c8dca429a9f8048227449cb9a5c5bb974c9891e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8dca429a9f8048227449cb9a5c5bb974c9891e", "html_url": "https://github.com/rust-lang/rust/commit/3c8dca429a9f8048227449cb9a5c5bb974c9891e"}], "stats": {"total": 2446, "additions": 1315, "deletions": 1131}, "files": [{"sha": "4fc8ddd9cdb124448364fb0f49d3777ecfb50b13", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -42,26 +42,25 @@ extern mod std(vers = \"0.5\");\n extern mod rustc(vers = \"0.5\");\n extern mod syntax(vers = \"0.5\");\n \n-use core::*;\n-\n #[legacy_exports]\n mod pgp;\n \n-use syntax::{ast, codemap, parse, visit, attr};\n-use syntax::diagnostic::span_handler;\n-use codemap::span;\n-use rustc::metadata::filesearch::{get_cargo_root, get_cargo_root_nearest,\n-                                     get_cargo_sysroot, libdir};\n-use syntax::diagnostic;\n+use rustc::metadata::filesearch::{get_cargo_root, get_cargo_root_nearest};\n+use rustc::metadata::filesearch::{get_cargo_sysroot, libdir};\n \n-use result::{Ok, Err};\n-use io::WriterUtil;\n-use send_map::linear::LinearMap;\n+use core::*;\n+\n+use core::dvec::DVec;\n+use core::io::WriterUtil;\n+use core::result::{Ok, Err};\n+use core::send_map::linear::LinearMap;\n+use std::getopts::{optflag, optopt, opt_present};\n+use std::map::HashMap;\n use std::{map, json, tempfile, term, sort, getopts};\n-use map::HashMap;\n-use to_str::to_str;\n-use getopts::{optflag, optopt, opt_present};\n-use dvec::DVec;\n+use syntax::codemap::span;\n+use syntax::diagnostic::span_handler;\n+use syntax::diagnostic;\n+use syntax::{ast, codemap, parse, visit, attr};\n \n struct Package {\n     name: ~str,"}, {"sha": "bfdc0a6eb0d6830c7ef839594e28cb54b92f6208", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -247,7 +247,7 @@ mod core {\n #[cfg(test)]\n mod std {\n     extern mod std(vers = \"0.5\");\n-    pub use std::test;\n+    pub use std::std::test;\n }\n \n "}, {"sha": "3878d6a5205336ee65d64b347d749b465bc08aad", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,7 +12,12 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+#[cfg(stage0)]\n use T = inst::T;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+use T = self::inst::T;\n+\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n use num::from_int;"}, {"sha": "98d833adea98a872a13a13fc9edd8d6095d8ece2", "filename": "src/libcore/int-template/int.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template%2Fint.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,11 @@\n \n //! Operations and constants for `int`\n \n+#[cfg(stage0)]\n pub use inst::pow;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub use self::inst::pow;\n \n mod inst {\n     pub type T = int;\n@@ -54,4 +58,4 @@ mod inst {\n         assert (min_value <= 0);\n         assert (min_value + max_value + 1 == 0);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dfb91c49b7d577ed7e62560f4f15f10ee1be97a7", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -16,7 +16,12 @@\n #[forbid(deprecated_pattern)];\n \n use cmp::{Eq, Ord};\n+\n+#[cfg(stage0)]\n use inst::{IMPL_T, EACH, SIZE_HINT};\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+use self::inst::{IMPL_T, EACH, SIZE_HINT};\n \n impl<A> IMPL_T<A>: iter::BaseIter<A> {\n     pure fn each(blk: fn(v: &A) -> bool) { EACH(&self, blk) }"}, {"sha": "80e3a22dcba221f78bfde6aba45758e363d41a20", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 99, "deletions": 83, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -59,89 +59,109 @@\n // Initial glob-exports mean that all the contents of all the modules\n // wind up exported, if you're interested in writing platform-specific code.\n \n-pub use types::common::c95::*;\n-pub use types::common::c99::*;\n-pub use types::common::posix88::*;\n-pub use types::common::posix01::*;\n-pub use types::common::posix08::*;\n-pub use types::common::bsd44::*;\n-pub use types::os::common::posix01::*;\n-pub use types::os::arch::c95::*;\n-pub use types::os::arch::c99::*;\n-pub use types::os::arch::posix88::*;\n-pub use types::os::arch::posix01::*;\n-pub use types::os::arch::posix08::*;\n-pub use types::os::arch::bsd44::*;\n-pub use types::os::arch::extra::*;\n-\n-pub use consts::os::c95::*;\n-pub use consts::os::c99::*;\n-pub use consts::os::posix88::*;\n-pub use consts::os::posix01::*;\n-pub use consts::os::posix08::*;\n-pub use consts::os::bsd44::*;\n-pub use consts::os::extra::*;\n-\n-pub use funcs::c95::ctype::*;\n-pub use funcs::c95::stdio::*;\n-pub use funcs::c95::stdlib::*;\n-pub use funcs::c95::string::*;\n-\n-pub use funcs::posix88::stat_::*;\n-pub use funcs::posix88::stdio::*;\n-pub use funcs::posix88::fcntl::*;\n-pub use funcs::posix88::dirent::*;\n-pub use funcs::posix88::unistd::*;\n-\n-pub use funcs::posix01::stat_::*;\n-pub use funcs::posix01::unistd::*;\n-pub use funcs::posix08::unistd::*;\n-\n-pub use funcs::bsd44::*;\n-pub use funcs::extra::*;\n+pub use libc::types::common::c95::*;\n+pub use libc::types::common::c99::*;\n+pub use libc::types::common::posix88::*;\n+pub use libc::types::common::posix01::*;\n+pub use libc::types::common::posix08::*;\n+pub use libc::types::common::bsd44::*;\n+pub use libc::types::os::common::posix01::*;\n+pub use libc::types::os::arch::c95::*;\n+pub use libc::types::os::arch::c99::*;\n+pub use libc::types::os::arch::posix88::*;\n+pub use libc::types::os::arch::posix01::*;\n+pub use libc::types::os::arch::posix08::*;\n+pub use libc::types::os::arch::bsd44::*;\n+pub use libc::types::os::arch::extra::*;\n+\n+pub use libc::consts::os::c95::*;\n+pub use libc::consts::os::c99::*;\n+pub use libc::consts::os::posix88::*;\n+pub use libc::consts::os::posix01::*;\n+pub use libc::consts::os::posix08::*;\n+pub use libc::consts::os::bsd44::*;\n+pub use libc::consts::os::extra::*;\n+\n+pub use libc::funcs::c95::ctype::*;\n+pub use libc::funcs::c95::stdio::*;\n+pub use libc::funcs::c95::stdlib::*;\n+pub use libc::funcs::c95::string::*;\n+\n+pub use libc::funcs::posix88::stat_::*;\n+pub use libc::funcs::posix88::stdio::*;\n+pub use libc::funcs::posix88::fcntl::*;\n+pub use libc::funcs::posix88::dirent::*;\n+pub use libc::funcs::posix88::unistd::*;\n+\n+pub use libc::funcs::posix01::stat_::*;\n+pub use libc::funcs::posix01::unistd::*;\n+pub use libc::funcs::posix08::unistd::*;\n+\n+pub use libc::funcs::bsd44::*;\n+pub use libc::funcs::extra::*;\n+\n+#[cfg(target_os = \"win32\")]\n+pub use libc::funcs::extra::kernel32::*;\n+#[cfg(target_os = \"win32\")]\n+pub use libc::funcs::extra::msvcrt::*;\n \n // Explicit export lists for the intersection (provided here) mean that\n // you can write more-platform-agnostic code if you stick to just these\n // symbols.\n \n-pub use size_t;\n-pub use c_float, c_double, c_void, FILE, fpos_t;\n-pub use DIR, dirent_t;\n-pub use c_char, c_schar, c_uchar;\n-pub use c_short, c_ushort, c_int, c_uint, c_long, c_ulong;\n-pub use size_t, ptrdiff_t, clock_t, time_t;\n-pub use c_longlong, c_ulonglong, intptr_t, uintptr_t;\n-pub use off_t, dev_t, ino_t, pid_t, mode_t, ssize_t;\n-\n-pub use EXIT_FAILURE, EXIT_SUCCESS, RAND_MAX,\n-EOF, SEEK_SET, SEEK_CUR, SEEK_END, _IOFBF, _IONBF, _IOLBF,\n-BUFSIZ, FOPEN_MAX, FILENAME_MAX, L_tmpnam, TMP_MAX,\n-O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, O_CREAT, O_EXCL, O_TRUNC,\n-S_IFIFO, S_IFCHR, S_IFBLK, S_IFDIR, S_IFREG, S_IFMT, S_IEXEC,\n-S_IWRITE, S_IREAD, S_IRWXU, S_IXUSR, S_IWUSR, S_IRUSR, F_OK, R_OK,\n-W_OK, X_OK, STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO;\n-\n-pub use isalnum, isalpha, iscntrl, isdigit, islower, isprint, ispunct,\n-isspace, isupper, isxdigit, tolower, toupper;\n-\n-pub use fopen, freopen, fflush, fclose, remove, tmpfile, setvbuf, setbuf,\n-fgetc, fgets, fputc, fputs, puts, ungetc, fread, fwrite, fseek, ftell,\n-rewind, fgetpos, fsetpos, feof, ferror, perror;\n-\n-pub use abs, labs, atof, atoi, strtod, strtol, strtoul, calloc, malloc,\n-realloc, free, abort, exit, system, getenv, rand, srand;\n-\n-pub use strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcoll, strchr,\n-strrchr, strspn, strcspn, strpbrk, strstr, strlen, strerror, strtok,\n-strxfrm, memcpy, memmove, memcmp, memchr, memset;\n-\n-pub use chmod, mkdir;\n-pub use popen, pclose, fdopen, fileno;\n-pub use open, creat;\n-pub use access, chdir, close, dup, dup2, execv, execve, execvp, getcwd,\n-getpid, isatty, lseek, pipe, read, rmdir, unlink, write;\n-\n-pub use fstat, stat;\n+pub use libc::types::common::c95::{FILE, c_void, fpos_t};\n+pub use libc::types::common::posix88::{DIR, dirent_t};\n+pub use libc::types::os::arch::c95::{c_char, c_double, c_float, c_int};\n+pub use libc::types::os::arch::c95::{c_long, c_short, c_uchar, c_ulong};\n+pub use libc::types::os::arch::c95::{c_ushort, clock_t, ptrdiff_t};\n+pub use libc::types::os::arch::c95::{size_t, time_t};\n+pub use libc::types::os::arch::c99::{c_longlong, c_ulonglong, intptr_t};\n+pub use libc::types::os::arch::c99::{uintptr_t};\n+pub use libc::types::os::arch::posix88::{dev_t, dirent_t, ino_t, mode_t};\n+pub use libc::types::os::arch::posix88::{off_t, pid_t, ssize_t};\n+\n+pub use libc::consts::os::c95::{_IOFBF, _IOLBF, _IONBF, BUFSIZ, EOF};\n+pub use libc::consts::os::c95::{EXIT_FAILURE, EXIT_SUCCESS};\n+pub use libc::consts::os::c95::{FILENAME_MAX, FOPEN_MAX, L_tmpnam};\n+pub use libc::consts::os::c95::{RAND_MAX, SEEK_CUR, SEEK_END};\n+pub use libc::consts::os::c95::{SEEK_SET, TMP_MAX};\n+pub use libc::consts::os::posix88::{F_OK, O_APPEND, O_CREAT, O_EXCL};\n+pub use libc::consts::os::posix88::{O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n+pub use libc::consts::os::posix88::{R_OK, S_IEXEC, S_IFBLK, S_IFCHR};\n+pub use libc::consts::os::posix88::{S_IFDIR, S_IFIFO, S_IFMT, S_IFREG};\n+pub use libc::consts::os::posix88::{S_IREAD, S_IRUSR, S_IRWXU, S_IWUSR};\n+pub use libc::consts::os::posix88::{STDERR_FILENO, STDIN_FILENO};\n+pub use libc::consts::os::posix88::{STDOUT_FILENO, W_OK, X_OK};\n+\n+pub use libc::funcs::c95::ctype::{isalnum, isalpha, iscntrl, isdigit};\n+pub use libc::funcs::c95::ctype::{islower, isprint, ispunct, isspace};\n+pub use libc::funcs::c95::ctype::{isupper, isxdigit, tolower, toupper};\n+\n+pub use libc::funcs::c95::stdio::{fclose, feof, ferror, fflush, fgetc};\n+pub use libc::funcs::c95::stdio::{fgetpos, fgets, fopen, fputc, fputs};\n+pub use libc::funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n+pub use libc::funcs::c95::stdio::{fwrite, perror, puts, remove, rewind};\n+pub use libc::funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n+\n+pub use libc::funcs::c95::stdlib::{abort, abs, atof, atoi, calloc, exit};\n+pub use libc::funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n+pub use libc::funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n+pub use libc::funcs::c95::stdlib::{strtoul, system};\n+\n+pub use libc::funcs::c95::string::{memchr, memcmp, memcpy, memmove};\n+pub use libc::funcs::c95::string::{memset, strcat, strchr, strcmp};\n+pub use libc::funcs::c95::string::{strcoll, strcpy, strcspn, strerror};\n+pub use libc::funcs::c95::string::{strlen, strncat, strncmp, strncpy};\n+pub use libc::funcs::c95::string::{strpbrk, strrchr, strspn, strstr};\n+pub use libc::funcs::c95::string::{strtok, strxfrm};\n+\n+pub use libc::funcs::posix88::fcntl::{open, creat};\n+pub use libc::funcs::posix88::stat_::{chmod, fstat, mkdir, stat};\n+pub use libc::funcs::posix88::stdio::{fdopen, fileno, pclose, popen};\n+pub use libc::funcs::posix88::unistd::{access, chdir, close, dup, dup2};\n+pub use libc::funcs::posix88::unistd::{execv, execve, execvp, getcwd};\n+pub use libc::funcs::posix88::unistd::{getpid, isatty, lseek, pipe, read};\n+pub use libc::funcs::posix88::unistd::{rmdir, unlink, write};\n \n \n mod types {\n@@ -1365,10 +1385,6 @@ pub mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     pub mod extra {\n-        use types::os::arch::extra::*;\n-        pub use kernel32::*;\n-        pub use msvcrt::*;\n-\n         #[abi = \"stdcall\"]\n         pub extern mod kernel32 {\n             fn GetEnvironmentVariableW(n: LPCWSTR,\n@@ -1396,7 +1412,7 @@ pub mod funcs {\n         #[nolink]\n         pub extern mod msvcrt {\n             #[link_name = \"_commit\"]\n-            fn commit(fd: c_int) -> c_int;\n+            pub fn commit(fd: c_int) -> c_int;\n         }\n     }\n }"}, {"sha": "c3bf8df5114ed427e269f24eb2474725a51d55a1", "filename": "src/libcore/os.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012 The Rust Project Developers.src/libcore/os.rs\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -36,7 +36,7 @@ pub use libc::{close, fclose};\n \n use option::{Some, None};\n \n-pub use consts::*;\n+pub use os::consts::*;\n use task::TaskBuilder;\n \n // FIXME: move these to str perhaps? #2620\n@@ -77,8 +77,8 @@ pub fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n }\n \n #[cfg(windows)]\n-mod win32 {\n-    use libc::DWORD;\n+pub mod win32 {\n+    use libc::types::os::arch::extra::DWORD;\n \n     pub fn fill_utf16_buf_and_decode(f: fn(*mut u16, DWORD) -> DWORD)\n         -> Option<~str> {\n@@ -224,7 +224,7 @@ mod global_env {\n \n         #[cfg(windows)]\n         pub fn getenv(n: &str) -> Option<~str> {\n-            use win32::*;\n+            use os::win32::*;\n             do as_utf16_p(n) |u| {\n                 do fill_utf16_buf_and_decode() |buf, sz| {\n                     libc::GetEnvironmentVariableW(u, buf, sz)\n@@ -245,7 +245,7 @@ mod global_env {\n \n         #[cfg(windows)]\n         pub fn setenv(n: &str, v: &str) {\n-            use win32::*;\n+            use os::win32::*;\n             do as_utf16_p(n) |nbuf| {\n                 do as_utf16_p(v) |vbuf| {\n                     libc::SetEnvironmentVariableW(nbuf, vbuf);\n@@ -403,7 +403,7 @@ pub fn self_exe_path() -> Option<Path> {\n \n     #[cfg(windows)]\n     fn load_self() -> Option<~str> {\n-        use win32::*;\n+        use os::win32::*;\n         do fill_utf16_buf_and_decode() |buf, sz| {\n             libc::GetModuleFileNameW(0u as libc::DWORD, buf, sz)\n         }\n@@ -566,7 +566,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n \n     #[cfg(windows)]\n     fn mkdir(p: &Path, _mode: c_int) -> bool {\n-        use win32::*;\n+        use os::win32::*;\n         // FIXME: turn mode into something useful? #2623\n         do as_utf16_p(p.to_str()) |buf| {\n             libc::CreateDirectoryW(buf, unsafe {\n@@ -614,7 +614,7 @@ pub fn remove_dir(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn rmdir(p: &Path) -> bool {\n-        use win32::*;\n+        use os::win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::RemoveDirectoryW(buf) != (0 as libc::BOOL)\n         };\n@@ -633,7 +633,7 @@ pub fn change_dir(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn chdir(p: &Path) -> bool {\n-        use win32::*;\n+        use os::win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::SetCurrentDirectoryW(buf) != (0 as libc::BOOL)\n         };\n@@ -653,7 +653,7 @@ pub fn copy_file(from: &Path, to: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn do_copy_file(from: &Path, to: &Path) -> bool {\n-        use win32::*;\n+        use os::win32::*;\n         return do as_utf16_p(from.to_str()) |fromp| {\n             do as_utf16_p(to.to_str()) |top| {\n                 libc::CopyFileW(fromp, top, (0 as libc::BOOL)) !=\n@@ -713,7 +713,7 @@ pub fn remove_file(p: &Path) -> bool {\n \n     #[cfg(windows)]\n     fn unlink(p: &Path) -> bool {\n-        use win32::*;\n+        use os::win32::*;\n         return do as_utf16_p(p.to_str()) |buf| {\n             libc::DeleteFileW(buf) != (0 as libc::BOOL)\n         };"}, {"sha": "af6b2c163779b2ecd13c081036bce839c4ea6e23", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -451,7 +451,7 @@ pub mod linear {\n \n #[test]\n pub mod test {\n-    use linear::LinearMap;\n+    use send_map::linear::LinearMap;\n \n     #[test]\n     pub fn inserts() {"}, {"sha": "ca8cc67dc4a90a9093dcd022ce78ea20242c616c", "filename": "src/libcore/task/local_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -26,7 +26,7 @@ magic.\n \n */\n \n-use local_data_priv::{\n+use task::local_data_priv::{\n     local_pop,\n     local_get,\n     local_set,"}, {"sha": "a5ae3291b877e9c2dc79547ad2addc5334311b67", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,8 +10,13 @@\n \n #[doc(hidden)]; // FIXME #3538\n \n-use local_data::LocalDataKey;\n+use task::local_data::LocalDataKey;\n+\n+#[cfg(notest)]\n use rt::rust_task;\n+#[cfg(test)]\n+#[allow(non_camel_case_types)]\n+type rust_task = libc::c_void;\n \n pub trait LocalData { }\n impl<T: Owned> @T: LocalData { }"}, {"sha": "d9b040abf7bf4311f376a41416261f32be9dd311", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -41,12 +41,10 @@\n use cmp::Eq;\n use result::Result;\n use pipes::{stream, Chan, Port};\n-use local_data_priv::{local_get, local_set};\n+use task::local_data_priv::{local_get, local_set};\n+use task::rt::{task_id, rust_task};\n use util::replace;\n \n-use rt::task_id;\n-use rt::rust_task;\n-\n mod local_data_priv;\n pub mod local_data;\n pub mod rt;"}, {"sha": "e2ed853ee2932e7d6a3e6235b353ebd29428762a", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -73,8 +73,8 @@\n #[doc(hidden)]; // FIXME #3538\n #[warn(deprecated_mode)];\n \n-use rt::rust_task;\n-use rt::rust_closure;\n+use task::rt::rust_task;\n+use task::rt::rust_closure;\n \n macro_rules! move_it (\n     { $x:expr } => ( unsafe { let y = move *ptr::addr_of(&($x)); move y } )"}, {"sha": "55055470f10f1303a1f33cfeab9db84849a7ca72", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -18,7 +18,7 @@ The `ToStr` trait for converting to strings\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n-pub trait ToStr { pure fn to_str() -> ~str; }\n+pub trait ToStr { pub pure fn to_str() -> ~str; }\n \n impl int: ToStr {\n     pure fn to_str() -> ~str { int::str(self) }"}, {"sha": "a7d37c3ae61ab2b4ef5614496a7425a3c6b30247", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,7 +12,12 @@\n #[forbid(deprecated_mode)];\n #[forbid(deprecated_pattern)];\n \n+#[cfg(stage0)]\n use T = inst::T;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+use T = self::inst::T;\n+\n use cmp::{Eq, Ord};\n use from_str::FromStr;\n "}, {"sha": "4d0b3f2d4b71827c992aa6d26ebfd8a2ff624c6f", "filename": "src/libcore/uint-template/u8.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fu8.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,11 @@\n \n //! Operations and constants for `u8`\n \n+#[cfg(stage0)]\n pub use inst::is_ascii;\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub use self::inst::is_ascii;\n \n mod inst {\n     pub type T = u8;"}, {"sha": "8451d78d8e0dc7d4500bb0d523410d72b81b0c25", "filename": "src/libcore/uint-template/uint.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibcore%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template%2Fuint.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,10 +10,17 @@\n \n //! Operations and constants for `uint`\n \n+#[cfg(stage0)]\n pub use inst::{\n     div_ceil, div_round, div_floor, iterate,\n     next_power_of_two\n };\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+pub use self::inst::{\n+    div_ceil, div_round, div_floor, iterate,\n+    next_power_of_two\n+};\n \n mod inst {\n     pub type T = uint;\n@@ -169,4 +176,4 @@ mod inst {\n         assert(uint::div_ceil(3u, 4u)  == 1u);\n         assert(uint::div_round(3u, 4u) == 1u);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b2cb6da78ddc283accb5ca76645fca1f5bf6eb9c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,15 +9,16 @@\n // except according to those terms.\n \n \n-use syntax::{ast, codemap};\n+use back::link;\n+use back::target_strs;\n+use metadata::filesearch;\n+use middle::lint;\n+\n use syntax::ast::node_id;\n-use codemap::span;\n use syntax::ast::{int_ty, uint_ty, float_ty};\n+use syntax::codemap::span;\n use syntax::parse::parse_sess;\n-use metadata::filesearch;\n-use back::target_strs;\n-use back::link;\n-use middle::lint;\n+use syntax::{ast, codemap};\n \n \n enum os { os_win32, os_macos, os_linux, os_freebsd, }"}, {"sha": "8703e6047444959558c4e6bb9a52bdd75bddf3c0", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -14,7 +14,7 @@\n mod intrinsic {\n     #[legacy_exports];\n \n-    pub use rusti::visit_tydesc;\n+    pub use intrinsic::rusti::visit_tydesc;\n \n     // FIXME (#3727): remove this when the interface has settled and the\n     // version in sys is no longer present."}, {"sha": "bebddec94d34d10cb7d5f0525b36621624710e22", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -17,8 +17,8 @@ use syntax::visit;\n use syntax::codemap::span;\n use std::map::HashMap;\n use syntax::print::pprust;\n-use filesearch::FileSearch;\n-use common::*;\n+use metadata::filesearch::FileSearch;\n+use metadata::common::*;\n use dvec::DVec;\n use syntax::parse::token::ident_interner;\n "}, {"sha": "ae56cf45dbcf28d9248d1afbfc48e7c7a1ee7368", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,19 +10,20 @@\n \n // Searching for information from the cstore\n \n-use std::ebml;\n+use metadata::common::*;\n+use middle::ty;\n+\n+use core::dvec::DVec;\n+use core::option::{Some, None};\n use reader = std::ebml::reader;\n+use std::ebml;\n+use std::map::HashMap;\n use syntax::ast;\n-use syntax::ast_util;\n use syntax::ast_map;\n-use middle::ty;\n-use option::{Some, None};\n-use syntax::diagnostic::span_handler;\n+use syntax::ast_util::dummy_sp;\n+use syntax::ast_util;\n use syntax::diagnostic::expect;\n-use ast_util::dummy_sp;\n-use common::*;\n-use std::map::HashMap;\n-use dvec::DVec;\n+use syntax::diagnostic::span_handler;\n \n export struct_dtor;\n export get_symbol;"}, {"sha": "1e86eb78cfe3f8ad7cbb33c072abcf8948d2dd08", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,27 +10,28 @@\n \n // Decoding metadata from a single crate's metadata\n \n+use cmd = metadata::cstore::crate_metadata;\n+use dvec::DVec;\n+use hash::{Hash, HashUtil};\n+use io::WriterUtil;\n+use metadata::common::*;\n+use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n+use metadata::tydecode::{parse_ty_data, parse_def_id, parse_bounds_data};\n+use metadata::tydecode::{parse_ident};\n+use middle::ty;\n+use util::ppaux::ty_to_str;\n+\n+use reader = std::ebml::reader;\n use std::ebml;\n-use std::map;\n use std::map::HashMap;\n+use std::map;\n use std::serialization::deserialize;\n-use reader = ebml::reader;\n-use io::WriterUtil;\n-use dvec::DVec;\n-use syntax::{ast, ast_util};\n-use syntax::attr;\n-use middle::ty;\n use syntax::ast_map;\n-use tydecode::{parse_ty_data, parse_def_id, parse_bounds_data,\n-        parse_ident};\n-use syntax::print::pprust;\n-use cmd=cstore::crate_metadata;\n-use util::ppaux::ty_to_str;\n+use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use common::*;\n use syntax::parse::token::ident_interner;\n-use hash::{Hash, HashUtil};\n-use csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n+use syntax::print::pprust;\n+use syntax::{ast, ast_util};\n \n export struct_dtor;\n export get_struct_fields;"}, {"sha": "6000c20ba1bd02f7da78b85c6843fb9d3592936c", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -15,12 +15,12 @@ use util::ppaux::ty_to_str;\n use std::{ebml, map};\n use std::map::HashMap;\n use io::WriterUtil;\n-use writer = ebml::writer;\n+use writer = std::ebml::writer;\n use syntax::ast::*;\n use syntax::print::pprust;\n use syntax::{ast_util, visit};\n use syntax::ast_util::*;\n-use common::*;\n+use metadata::common::*;\n use middle::ty;\n use middle::ty::node_id_to_type;\n use middle::resolve;"}, {"sha": "5901e58aeb190afb78116c30366397d0ad4d3c2d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -15,7 +15,7 @@ use syntax::{ast, attr};\n use syntax::print::pprust;\n use syntax::codemap::span;\n use lib::llvm::{False, llvm, mk_object_file, mk_section_iter};\n-use filesearch::FileSearch;\n+use metadata::filesearch::FileSearch;\n use io::WriterUtil;\n use syntax::parse::token::ident_interner;\n "}, {"sha": "4ba6abb03831093ee8fc40895c562d13cfb2b25b", "filename": "src/librustc/metadata/mod.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -41,35 +41,3 @@ mod loader;\n #[legacy_exports]\n mod filesearch;\n \n-\n-// Define the rustc API's that the metadata module has access to\n-// Over time we will reduce these dependencies and, once metadata has\n-// no dependencies on rustc it can move into its own crate.\n-\n-mod middle {\n-    #[legacy_exports];\n-    pub use middle_::ty;\n-    pub use middle_::resolve;\n-}\n-\n-mod front {\n-    #[legacy_exports];\n-}\n-\n-mod back {\n-    #[legacy_exports];\n-}\n-\n-mod driver {\n-    #[legacy_exports];\n-}\n-\n-mod util {\n-    #[legacy_exports];\n-    pub use util_::ppaux;\n-}\n-\n-mod lib {\n-    #[legacy_exports];\n-    pub use lib_::llvm;\n-}"}, {"sha": "9289e17eeb2db0a5dfedaab55d89fcfde775aea4", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,13 +13,14 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n+use middle::ty;\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n+\n use syntax::ast;\n use syntax::ast::*;\n use syntax::ast_util;\n use syntax::ast_util::respan;\n-use middle::ty;\n use std::map::HashMap;\n-use ty::{FnTyBase, FnMeta, FnSig};\n \n export parse_state_from_data;\n export parse_arg_data, parse_ty_data, parse_def_id, parse_ident;"}, {"sha": "cf6b0bf332e413dbccf91e72e75924092f0aeffb", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,46 +8,40 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use c = metadata::common;\n+use cstore = metadata::cstore;\n+use driver::session::Session;\n+use e = metadata::encoder;\n+use metadata::decoder;\n+use metadata::encoder;\n+use metadata::tydecode;\n+use metadata::tyencode;\n+use middle::freevars::freevar_entry;\n+use middle::typeck::{method_origin, method_map_entry, vtable_res};\n+use middle::typeck::{vtable_origin};\n+use middle::{ty, typeck};\n use util::ppaux::ty_to_str;\n \n+use reader = std::ebml::reader;\n+use std::ebml::reader::get_doc;\n+use std::ebml::writer::Serializer;\n+use std::ebml;\n+use std::map::HashMap;\n+use std::serialization::{DeserializerHelpers, deserialize};\n+use std::serialization::{Serializable, SerializerHelpers};\n+use std::serialization;\n use syntax::ast;\n-use syntax::fold;\n-use syntax::fold::*;\n-use syntax::visit;\n use syntax::ast_map;\n use syntax::ast_util;\n use syntax::codemap::span;\n-use std::ebml;\n-use writer = std::ebml::writer;\n-use reader = std::ebml::reader;\n-use reader::get_doc;\n-use writer::Serializer;\n-use std::map::HashMap;\n-use std::serialization;\n-use std::serialization::{Serializable,\n-                         SerializerHelpers,\n-                         DeserializerHelpers,\n-                         deserialize};\n-use middle::{ty, typeck};\n-use middle::typeck::{method_origin, method_map_entry,\n-                     vtable_res,\n-                     vtable_origin};\n-use driver::session::Session;\n-use middle::freevars::freevar_entry;\n-use c = metadata::common;\n-use e = metadata::encoder;\n-use cstore = metadata::cstore;\n-use metadata::encoder;\n-use metadata::decoder;\n-use metadata::tyencode;\n-use metadata::tydecode;\n-\n-\n-// used in testing:\n-use syntax::diagnostic;\n use syntax::codemap;\n+use syntax::diagnostic;\n+use syntax::fold::*;\n+use syntax::fold;\n use syntax::parse;\n use syntax::print::pprust;\n+use syntax::visit;\n+use writer = std::ebml::writer;\n \n export maps;\n export encode_inlined_item;"}, {"sha": "d5809a7389e811770a9ba413f2164c3354e94af1", "filename": "src/librustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -16,9 +16,9 @@\n // their associated scopes.  In phase two, checking loans, we will then make\n // sure that all of these loans are honored.\n \n-use mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n-use preserve::{preserve_condition, pc_ok, pc_if_pure};\n-use ty::{ty_region};\n+use middle::mem_categorization::{mem_categorization_ctxt, opt_deref_kind};\n+use middle::borrowck::preserve::{preserve_condition, pc_ok, pc_if_pure};\n+use middle::ty::{ty_region};\n \n use core::send_map::linear::LinearMap;\n "}, {"sha": "90de32814470ee8e83216066d34c1bcd26ac3b9e", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -226,34 +226,36 @@ Borrowck results in two maps.\n \n #[legacy_exports];\n \n-use syntax::ast;\n+use middle::mem_categorization::*;\n+use middle::ty::to_str;\n+use util::common::indenter;\n+use util::ppaux::{expr_repr, note_and_explain_region};\n+use util::ppaux::{ty_to_str, region_to_str, explain_region};\n+\n+use core::dvec::DVec;\n+use core::result::{Result, Ok, Err};\n+use std::list::{List, Cons, Nil};\n+use std::list;\n+use std::map::{HashMap, Set};\n use syntax::ast::{mutability, m_mutbl, m_imm, m_const};\n-use syntax::visit;\n-use syntax::ast_util;\n+use syntax::ast;\n use syntax::ast_map;\n+use syntax::ast_util;\n use syntax::codemap::span;\n-use util::ppaux::{ty_to_str, region_to_str, explain_region,\n-                  expr_repr, note_and_explain_region};\n-use std::map::{HashMap, Set};\n-use std::list;\n-use std::list::{List, Cons, Nil};\n-use result::{Result, Ok, Err};\n use syntax::print::pprust;\n-use util::common::indenter;\n-use ty::to_str;\n-use dvec::DVec;\n-use mem_categorization::*;\n+use syntax::visit;\n \n #[legacy_exports]\n-mod check_loans;\n+pub mod check_loans;\n #[legacy_exports]\n-mod gather_loans;\n+pub mod gather_loans;\n #[legacy_exports]\n-mod loan;\n+pub mod loan;\n #[legacy_exports]\n-mod preserve;\n+pub mod preserve;\n \n export check_crate, root_map, mutbl_map;\n+export check_loans, gather_loans, loan, preserve;\n \n fn check_crate(tcx: ty::ctxt,\n                method_map: typeck::method_map,"}, {"sha": "d3448a5f3a9bc877357727ce6595cf3a06271e3a", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n+use middle::const_eval::{eval_const_expr, const_val, const_int, const_bool};\n+use middle::pat_util::*;\n+use middle::ty::*;\n+use middle::ty;\n+use middle::typeck::method_map;\n+use util::ppaux::ty_to_str;\n+\n+use std::map::HashMap;\n use syntax::ast::*;\n use syntax::ast_util::{variant_def_ids, dummy_sp, unguarded_pat, walk_pat};\n-use const_eval::{eval_const_expr, const_val, const_int, const_bool,\n-                 compare_const_vals, lookup_const_by_id};\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n-use util::ppaux::ty_to_str;\n-use pat_util::*;\n use syntax::visit;\n-use middle::ty;\n-use middle::ty::*;\n-use middle::typeck::method_map;\n-use std::map::HashMap;\n \n struct AltCheckCtxt {\n     tcx: ty::ctxt,"}, {"sha": "a51885b1fc7eb35e72128605ca6c505cb66aa28e", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::{ast,ast_map,ast_util,visit};\n-use ast::*;\n+use syntax::{ast, ast_map, ast_util, visit};\n+use syntax::ast::*;\n \n //\n // This pass classifies expressions by their constant-ness."}, {"sha": "a8395013958eb3c71e904518f0c62c0796c77630", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::{visit, ast_util};\n-use syntax::ast::*;\n-use syntax::codemap::span;\n-use middle::ty::{Kind, kind_copyable, kind_noncopyable, kind_const};\n+use middle::freevars::freevar_entry;\n+use middle::lint::{non_implicitly_copyable_typarams, implicit_copies};\n use middle::ty::{CopyValue, MoveValue, ReadValue};\n-use std::map::HashMap;\n+use middle::ty::{Kind, kind_copyable, kind_noncopyable, kind_const};\n use util::ppaux::{ty_to_str, tys_to_str};\n+\n+use std::map::HashMap;\n+use syntax::ast::*;\n+use syntax::codemap::span;\n use syntax::print::pprust::expr_to_str;\n-use freevars::freevar_entry;\n-use lint::{non_implicitly_copyable_typarams,implicit_copies};\n+use syntax::{visit, ast_util};\n \n // Kind analysis pass.\n //"}, {"sha": "48fff1a269bde792cbf09af1f847f40000b4efb6", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -102,16 +102,17 @@\n  *   to return explicitly.\n  */\n \n-use dvec::DVec;\n+use middle::capture::{cap_move, cap_drop, cap_copy, cap_ref};\n+use middle::ty::MoveValue;\n+\n+use core::dvec::DVec;\n+use core::io::WriterUtil;\n use std::map::HashMap;\n-use syntax::{visit, ast_util};\n-use syntax::print::pprust::{expr_to_str, block_to_str};\n-use visit::vt;\n-use syntax::codemap::span;\n use syntax::ast::*;\n-use io::WriterUtil;\n-use capture::{cap_move, cap_drop, cap_copy, cap_ref};\n-use middle::ty::MoveValue;\n+use syntax::codemap::span;\n+use syntax::print::pprust::{expr_to_str, block_to_str};\n+use syntax::visit::vt;\n+use syntax::{visit, ast_util};\n \n export check_crate;\n export last_use_map;"}, {"sha": "5819db17f58a842eea6a82224ff5ae68040746b2", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,6 +11,9 @@\n // A pass that checks to make sure private fields and methods aren't used\n // outside their scopes.\n \n+use middle::ty::{ty_struct, ty_enum};\n+use middle::typeck::{method_map, method_origin, method_param, method_self};\n+use middle::typeck::{method_static, method_trait};\n use /*mod*/ syntax::ast;\n use /*mod*/ syntax::visit;\n use syntax::ast_map;\n@@ -21,9 +24,6 @@ use syntax::ast::{provided, required};\n use syntax::ast_map::{node_item, node_method};\n use syntax::ast_util::{Private, Public, has_legacy_export_attr, is_local};\n use syntax::ast_util::{visibility_to_privacy};\n-use ty::{ty_struct, ty_enum};\n-use typeck::{method_map, method_origin, method_param, method_self};\n-use typeck::{method_static, method_trait};\n \n use core::util::ignore;\n use dvec::DVec;"}, {"sha": "f746e0236807ed3daa6f980a25768d027a70fd4b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -18,18 +18,19 @@ region parameterized.\n */\n \n use driver::session::Session;\n-use middle::ty;\n-use syntax::{ast, visit};\n-use syntax::codemap::span;\n-use syntax::print::pprust;\n-use syntax::ast_map;\n-use dvec::DVec;\n use metadata::csearch;\n-use ty::{region_variance, rv_covariant, rv_invariant, rv_contravariant};\n+use middle::ty::{region_variance, rv_covariant, rv_invariant};\n+use middle::ty::{rv_contravariant};\n+use middle::ty;\n \n+use core::dvec::DVec;\n use std::list;\n use std::list::list;\n use std::map::HashMap;\n+use syntax::ast_map;\n+use syntax::codemap::span;\n+use syntax::print::pprust;\n+use syntax::{ast, visit};\n \n type parent = Option<ast::node_id>;\n "}, {"sha": "bc728e5319a33c79eeac6151f42301bf92f6270b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 157, "deletions": 25, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -313,6 +313,16 @@ enum XrayFlag {\n     Xray        //< Private items can be accessed.\n }\n \n+enum UseLexicalScopeFlag {\n+    DontUseLexicalScope,\n+    UseLexicalScope\n+}\n+\n+struct ModulePrefixResult {\n+    result: ResolveResult<@Module>,\n+    prefix_len: uint\n+}\n+\n impl XrayFlag : cmp::Eq {\n     pure fn eq(&self, other: &XrayFlag) -> bool {\n         ((*self) as uint) == ((*other) as uint)\n@@ -2108,9 +2118,10 @@ impl Resolver {\n         } else {\n             // First, resolve the module path for the directive, if necessary.\n             match self.resolve_module_path_for_import(module_,\n-                                                    module_path,\n-                                                    NoXray,\n-                                                    import_directive.span) {\n+                                                      module_path,\n+                                                      NoXray,\n+                                                      DontUseLexicalScope,\n+                                                      import_directive.span) {\n \n                 Failed => {\n                     resolution_result = Failed;\n@@ -2650,8 +2661,11 @@ impl Resolver {\n \n         while index < module_path_len {\n             let name = (*module_path).get_elt(index);\n-            match self.resolve_name_in_module(search_module, name, TypeNS,\n-                                              xray) {\n+            match self.resolve_name_in_module(search_module,\n+                                              name,\n+                                              TypeNS,\n+                                              xray,\n+                                              false) {\n                 Failed => {\n                     self.session.span_err(span, ~\"unresolved name\");\n                     return Failed;\n@@ -2702,12 +2716,13 @@ impl Resolver {\n     }\n \n     /**\n-     * Attempts to resolve the module part of an import directive rooted at\n-     * the given module.\n+     * Attempts to resolve the module part of an import directive or path\n+     * rooted at the given module.\n      */\n     fn resolve_module_path_for_import(module_: @Module,\n                                       module_path: @DVec<ident>,\n                                       xray: XrayFlag,\n+                                      use_lexical_scope: UseLexicalScopeFlag,\n                                       span: span)\n                                    -> ResolveResult<@Module> {\n \n@@ -2722,9 +2737,20 @@ impl Resolver {\n         // The first element of the module path must be in the current scope\n         // chain.\n \n-        let first_element = (*module_path).get_elt(0);\n+        let resolve_result = match use_lexical_scope {\n+            DontUseLexicalScope => {\n+                self.resolve_module_prefix(module_, module_path)\n+            }\n+            UseLexicalScope => {\n+                let result = self.resolve_module_in_lexical_scope(\n+                    module_,\n+                    module_path.get_elt(0));\n+                ModulePrefixResult { result: result, prefix_len: 1 }\n+            }\n+        };\n+\n         let mut search_module;\n-        match self.resolve_module_in_lexical_scope(module_, first_element) {\n+        match resolve_result.result {\n             Failed => {\n                 self.session.span_err(span, ~\"unresolved name\");\n                 return Failed;\n@@ -2740,10 +2766,10 @@ impl Resolver {\n         }\n \n         return self.resolve_module_path_from_root(search_module,\n-                                               module_path,\n-                                               1,\n-                                               xray,\n-                                               span);\n+                                                  module_path,\n+                                                  resolve_result.prefix_len,\n+                                                  xray,\n+                                                  span);\n     }\n \n     fn resolve_item_in_lexical_scope(module_: @Module,\n@@ -2811,8 +2837,11 @@ impl Resolver {\n             }\n \n             // Resolve the name in the parent module.\n-            match self.resolve_name_in_module(search_module, name, namespace,\n-                                            Xray) {\n+            match self.resolve_name_in_module(search_module,\n+                                              name,\n+                                              namespace,\n+                                              Xray,\n+                                              false) {\n                 Failed => {\n                     // Continue up the search chain.\n                 }\n@@ -2832,9 +2861,15 @@ impl Resolver {\n         }\n     }\n \n+    /** Resolves a module name in the current lexical scope. */\n     fn resolve_module_in_lexical_scope(module_: @Module, name: ident)\n                                     -> ResolveResult<@Module> {\n-        match self.resolve_item_in_lexical_scope(module_, name, TypeNS) {\n+        // If this module is an anonymous module, resolve the item in the\n+        // lexical scope. Otherwise, resolve the item from the crate root.\n+        let resolve_result = self.resolve_item_in_lexical_scope(module_,\n+                                                                name,\n+                                                                TypeNS);\n+        match resolve_result {\n             Success(target) => {\n                 match target.bindings.type_def {\n                     Some(ref type_def) => {\n@@ -2870,6 +2905,102 @@ impl Resolver {\n         }\n     }\n \n+    /**\n+     * Resolves a \"module prefix\". A module prefix is one of (a) the name of a\n+     * module; (b) \"self::\"; (c) some chain of \"super::\".\n+     */\n+    fn resolve_module_prefix(module_: @Module,\n+                             module_path: @DVec<ident>)\n+                          -> ModulePrefixResult {\n+        let interner = self.session.parse_sess.interner;\n+\n+        let mut containing_module = self.graph_root.get_module();\n+        let mut i = 0;\n+        loop {\n+            if *interner.get(module_path.get_elt(i)) == ~\"self\" {\n+                containing_module = module_;\n+                i += 1;\n+                break;\n+            }\n+            if *interner.get(module_path.get_elt(i)) == ~\"super\" {\n+                match containing_module.parent_link {\n+                    NoParentLink => {\n+                        return ModulePrefixResult {\n+                            result: Failed,\n+                            prefix_len: i\n+                        };\n+                    }\n+                    BlockParentLink(new_module, _) |\n+                    ModuleParentLink(new_module, _) => {\n+                        containing_module = new_module;\n+                    }\n+                }\n+                i += 1;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        // Is the containing module the current module? If so, we allow\n+        // globs to be unresolved.\n+        let allow_globs = core::managed::ptr_eq(containing_module, module_);\n+\n+        let name = module_path.get_elt(i);\n+        let resolve_result = self.resolve_name_in_module(containing_module,\n+                                                         name,\n+                                                         TypeNS,\n+                                                         Xray,\n+                                                         allow_globs);\n+        match resolve_result {\n+            Success(target) => {\n+                match target.bindings.type_def {\n+                    Some(ref type_def) => {\n+                        match (*type_def).module_def {\n+                            None => {\n+                                error!(\"!!! (resolving crate-relative \\\n+                                        module) module wasn't actually a \\\n+                                        module!\");\n+                                return ModulePrefixResult {\n+                                    result: Failed,\n+                                    prefix_len: i + 1\n+                                };\n+                            }\n+                            Some(module_def) => {\n+                                return ModulePrefixResult {\n+                                    result: Success(module_def),\n+                                    prefix_len: i + 1\n+                                };\n+                            }\n+                        }\n+                    }\n+                    None => {\n+                        error!(\"!!! (resolving crate-relative module) module\n+                                wasn't actually a module!\");\n+                        return ModulePrefixResult {\n+                            result: Failed,\n+                            prefix_len: i + 1\n+                        };\n+                    }\n+                }\n+            }\n+            Indeterminate => {\n+                debug!(\"(resolving crate-relative module) indeterminate; \\\n+                        bailing\");\n+                return ModulePrefixResult {\n+                    result: Indeterminate,\n+                    prefix_len: i + 1\n+                };\n+            }\n+            Failed => {\n+                debug!(\"(resolving crate-relative module) failed to resolve\");\n+                return ModulePrefixResult {\n+                    result: Failed,\n+                    prefix_len: i + 1\n+                };\n+            }\n+        }\n+    }\n+\n     fn name_is_exported(module_: @Module, name: ident) -> bool {\n         return !module_.legacy_exports ||\n             module_.exported_names.size() == 0 ||\n@@ -2884,7 +3015,8 @@ impl Resolver {\n     fn resolve_name_in_module(module_: @Module,\n                               name: ident,\n                               namespace: Namespace,\n-                              xray: XrayFlag)\n+                              xray: XrayFlag,\n+                              allow_globs: bool)\n                            -> ResolveResult<Target> {\n \n         debug!(\"(resolving name in module) resolving `%s` in `%s`\",\n@@ -2910,10 +3042,10 @@ impl Resolver {\n             }\n         }\n \n-        // Next, check the module's imports. If the module has a glob, then\n-        // we bail out; we don't know its imports yet.\n-\n-        if module_.glob_count > 0 {\n+        // Next, check the module's imports. If the module has a glob and\n+        // globs were not allowed, then we bail out; we don't know its imports\n+        // yet.\n+        if !allow_globs && module_.glob_count > 0 {\n             debug!(\"(resolving name in module) module has glob; bailing out\");\n             return Indeterminate;\n         }\n@@ -4627,10 +4759,10 @@ impl Resolver {\n \n         let mut containing_module;\n         match self.resolve_module_path_for_import(self.current_module,\n-                                                module_path_idents,\n-                                                xray,\n-                                                path.span) {\n-\n+                                                  module_path_idents,\n+                                                  xray,\n+                                                  UseLexicalScope,\n+                                                  path.span) {\n             Failed => {\n                 self.session.span_err(path.span,\n                                       fmt!(\"use of undeclared module `%s`\","}, {"sha": "7885a8ea0b60111fba93dbfb1d3bd2d07d673011", "filename": "src/librustc/middle/trans/alt.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Falt.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -142,26 +142,27 @@\n  *\n  */\n \n+use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, BasicBlockRef};\n-use pat_util::*;\n-use build::*;\n-use base::*;\n+use middle::pat_util::*;\n+use middle::resolve::DefMap;\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n+use middle::trans::expr::Dest;\n+use middle::ty::{CopyValue, MoveValue, ReadValue};\n+use util::common::indenter;\n+\n+use core::dvec::DVec;\n+use std::map::HashMap;\n+use syntax::ast::def_id;\n use syntax::ast;\n-use syntax::ast_util;\n use syntax::ast_util::{dummy_sp, path_to_ident};\n-use syntax::ast::def_id;\n+use syntax::ast_util;\n use syntax::codemap::span;\n use syntax::print::pprust::pat_to_str;\n-use middle::resolve::DefMap;\n-use middle::ty::{CopyValue, MoveValue, ReadValue};\n-use back::abi;\n-use std::map::HashMap;\n-use dvec::DVec;\n-use datum::*;\n-use common::*;\n-use expr::Dest;\n-use util::common::indenter;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "a65f6668cd3582abcb5160be569fd489eec2074b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 31, "deletions": 32, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -23,45 +23,44 @@\n //     but many TypeRefs correspond to one ty::t; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-use libc::{c_uint, c_ulonglong};\n-use std::{map, time, list};\n-use std::map::HashMap;\n-use driver::session;\n-use session::Session;\n-use syntax::attr;\n+use back::link::{mangle_exported_name};\n+use back::link::{mangle_internal_name_by_path_and_seq};\n+use back::link::{mangle_internal_name_by_path};\n+use back::link::{mangle_internal_name_by_seq};\n+use back::link::{mangle_internal_name_by_type_only};\n use back::{link, abi, upcall};\n-use syntax::{ast, ast_util, codemap, ast_map};\n-use ast_util::{def_id_of_def, local_def, path_to_ident};\n-use syntax::visit;\n-use syntax::codemap::span;\n-use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n-use pat_util::*;\n-use visit::vt;\n-use util::common::is_main_name;\n-use lib::llvm::{llvm, mk_target_data, mk_type_names};\n+use driver::session;\n+use driver::session::Session;\n use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n use lib::llvm::{True, False};\n-use link::{mangle_internal_name_by_type_only,\n-              mangle_internal_name_by_seq,\n-              mangle_internal_name_by_path,\n-              mangle_internal_name_by_path_and_seq,\n-              mangle_exported_name};\n-use metadata::{csearch, cstore, decoder, encoder};\n+use lib::llvm::{llvm, mk_target_data, mk_type_names};\n use metadata::common::link_meta;\n-use util::ppaux;\n-use util::ppaux::{ty_to_str, ty_to_short_str};\n-use syntax::diagnostic::expect;\n+use metadata::{csearch, cstore, decoder, encoder};\n+use middle::pat_util::*;\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n+use middle::trans::shape::*;\n+use middle::trans::type_of::*;\n use util::common::indenter;\n+use util::common::is_main_name;\n+use util::ppaux::{ty_to_str, ty_to_short_str};\n+use util::ppaux;\n \n-use build::*;\n-use shape::*;\n-use type_of::*;\n-use common::*;\n+use core::libc::{c_uint, c_ulonglong};\n+use core::option::{is_none, is_some};\n+use std::map::HashMap;\n+use std::smallintmap;\n+use std::{map, time, list};\n use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_util::{def_id_of_def, local_def, path_to_ident};\n+use syntax::attr;\n+use syntax::codemap::span;\n+use syntax::diagnostic::expect;\n use syntax::parse::token::special_idents;\n-\n-use std::smallintmap;\n-use option::{is_none, is_some};\n+use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n+use syntax::visit;\n+use syntax::visit::vt;\n+use syntax::{ast, ast_util, codemap, ast_map};\n \n struct icx_popper {\n     ccx: @crate_ctxt,\n@@ -1228,7 +1227,7 @@ fn with_scope_datumblock(bcx: block, opt_node_info: Option<node_info>,\n                          name: ~str, f: fn(block) -> datum::DatumBlock)\n     -> datum::DatumBlock\n {\n-    use datum::DatumBlock;\n+    use middle::trans::datum::DatumBlock;\n \n     let _icx = bcx.insn_ctxt(\"with_scope_result\");\n     let scope_cx = scope_block(bcx, opt_node_info, name);"}, {"sha": "614a02a9700529906fa535f61fe63598b881a271", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n-use libc::{c_uint, c_int};\n-use lib::llvm::llvm;\n-use syntax::codemap;\n use codemap::span;\n+use lib::llvm::llvm;\n+use lib::llvm::{CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n+use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False};\n use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n-use lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n-        CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n-use common::*;\n+use libc::{c_uint, c_int};\n+use middle::trans::common::*;\n+\n+use std::map::HashMap;\n+use syntax::codemap;\n \n fn B(cx: block) -> BuilderRef {\n     let b = cx.fcx.ccx.builder.B;"}, {"sha": "7117ae6910cc27271e6e4a2166f6c4833911e3e0", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -17,15 +17,16 @@\n // closure.\n \n use lib::llvm::ValueRef;\n+use middle::trans::base::{get_item_val, trans_external_path};\n+use middle::trans::build::*;\n+use middle::trans::common::{block, node_id_type_params};\n+use middle::trans::datum::*;\n+use middle::trans::datum::Datum;\n+use util::common::indenter;\n+\n use syntax::ast;\n-use datum::Datum;\n-use common::{block, node_id_type_params};\n-use build::*;\n-use base::{get_item_val, trans_external_path};\n-use syntax::visit;\n use syntax::print::pprust::{expr_to_str, stmt_to_str, path_to_str};\n-use datum::*;\n-use util::common::indenter;\n+use syntax::visit;\n \n // Represents a (possibly monomorphized) top-level fn item or method\n // item.  Note that this is just the fn-ptr and is not a Rust closure"}, {"sha": "5110bc261f7a987f1f9b954a6c09b39d529538db", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,26 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::c_uint;\n-use syntax::ast;\n-use syntax::ast_util;\n+use back::abi;\n+use back::link::{mangle_internal_name_by_path_and_seq};\n+use back::link::{mangle_internal_name_by_path};\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n-use common::*;\n-use build::*;\n-use base::*;\n-use type_of::*;\n-use back::abi;\n-use syntax::codemap::span;\n-use syntax::print::pprust::expr_to_str;\n-use back::link::{\n-    mangle_internal_name_by_path,\n-    mangle_internal_name_by_path_and_seq};\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::{Datum, INIT, ByRef, ByValue, FromLvalue};\n+use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n-use syntax::ast_map::{path, path_mod, path_name};\n-use driver::session::session;\n+\n+use core::libc::c_uint;\n use std::map::HashMap;\n-use datum::{Datum, INIT, ByRef, ByValue, FromLvalue};\n+use syntax::ast;\n+use syntax::ast_map::{path, path_mod, path_name};\n+use syntax::ast_util;\n+use syntax::codemap::span;\n+use syntax::print::pprust::expr_to_str;\n \n // ___Good to know (tm)__________________________________________________\n //"}, {"sha": "355e78014805dc9343d0540353adbdf5fb037989", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::*;\n+use middle::trans::base::get_insn_ctxt;\n+use middle::trans::common::*;\n+\n use syntax::{ast, ast_util, codemap, ast_map};\n-use base::get_insn_ctxt;\n \n fn const_lit(cx: @crate_ctxt, e: @ast::expr, lit: ast::lit)\n     -> ValueRef {"}, {"sha": "2a9cece231b7359b377148a15ebfe5e179b5dd18", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use lib::llvm::ValueRef;\n-use common::*;\n-use datum::*;\n-use base::*;\n+use middle::trans::base::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "e303b3611c577dc4d206d222a54eb1d826ca2e71", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -96,11 +96,11 @@\n  * values. */\n \n use lib::llvm::ValueRef;\n-use base::*;\n-use common::*;\n-use build::*;\n-use util::ppaux::ty_to_str;\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n use util::common::indenter;\n+use util::ppaux::ty_to_str;\n \n enum CopyAction {\n     INIT,"}, {"sha": "b255b47bab30bac3297a746fd920456b6e664ce4", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,21 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map;\n-use std::map::HashMap;\n-use lib::llvm::llvm;\n+use driver::session;\n use lib::llvm::ValueRef;\n-use trans::common::*;\n-use trans::base;\n-use trans::build::B;\n+use lib::llvm::llvm;\n+use middle::pat_util::*;\n+use middle::trans::base;\n+use middle::trans::build::B;\n+use middle::trans::common::*;\n use middle::ty;\n-use syntax::{ast, codemap, ast_util, ast_map};\n-use syntax::parse::token::ident_interner;\n-use codemap::{span, CharPos};\n-use ast::Ty;\n-use pat_util::*;\n use util::ppaux::ty_to_str;\n-use driver::session::session;\n+\n+use std::map::HashMap;\n+use std::map;\n+use syntax::ast::Ty;\n+use syntax::codemap::{span, CharPos};\n+use syntax::parse::token::ident_interner;\n+use syntax::{ast, codemap, ast_util, ast_map};\n \n export create_local_var;\n export create_function;"}, {"sha": "764ddabd1434f38a68b9c995354f3a5e66c897c5", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -111,17 +111,18 @@ lvalues are *never* stored by value.\n \n */\n \n-use ty::struct_mutable_fields;\n use lib::llvm::ValueRef;\n-use common::*;\n-use datum::*;\n-use base::*;\n-use syntax::print::pprust::{expr_to_str};\n-use util::ppaux::ty_to_str;\n-use util::common::indenter;\n-use ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n-use callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n+use middle::trans::base::*;\n+use middle::trans::callee::{AutorefArg, DoAutorefArg, DontAutorefArg};\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n use middle::ty::MoveValue;\n+use middle::ty::struct_mutable_fields;\n+use middle::ty::{AutoPtr, AutoBorrowVec, AutoBorrowVecRef, AutoBorrowFn};\n+use util::common::indenter;\n+use util::ppaux::ty_to_str;\n+\n+use syntax::print::pprust::{expr_to_str};\n \n // The primary two functions for translating expressions:\n export trans_to_datum, trans_into;"}, {"sha": "38c3a4f7cb3589516e29749cf4e7ca96dbcefacb", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,26 +11,27 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n+use back::{link, abi};\n use driver::session::arch_x86_64;\n+use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n+use lib::llvm::{Struct, Array, ModuleRef, CallConv, Attribute};\n+use lib::llvm::{StructRetAttribute, ByValAttribute};\n+use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::callee::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n+use middle::trans::expr::{Dest, Ignore};\n+use middle::trans::type_of::*;\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use util::ppaux::ty_to_str;\n+\n+use core::libc::c_uint;\n+use std::map::HashMap;\n use syntax::codemap::span;\n-use libc::c_uint;\n-use syntax::{attr, ast_map};\n-use lib::llvm::{ llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double,\n-    Struct, Array, ModuleRef, CallConv, Attribute,\n-    StructRetAttribute, ByValAttribute,\n-    SequentiallyConsistent, Acquire, Release, Xchg };\n use syntax::{ast, ast_util};\n-use back::{link, abi};\n-use common::*;\n-use build::*;\n-use base::*;\n-use type_of::*;\n-use std::map::HashMap;\n-use util::ppaux::ty_to_str;\n-use datum::*;\n-use callee::*;\n-use expr::{Dest, Ignore};\n-use ty::{FnTyBase, FnMeta, FnSig};\n+use syntax::{attr, ast_map};\n \n export link_name, trans_foreign_mod, register_foreign_fn, trans_foreign_fn,\n        trans_intrinsic;"}, {"sha": "a42dee615e4b5e3deed3f2dca21457938a666144", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,10 +13,10 @@\n // Code relating to taking, dropping, etc as well as type descriptors.\n \n use lib::llvm::{ValueRef, TypeRef};\n-use base::*;\n-use common::*;\n-use build::*;\n-use type_of::type_of;\n+use middle::trans::base::*;\n+use middle::trans::common::*;\n+use middle::trans::build::*;\n+use middle::trans::type_of::type_of;\n \n fn trans_free(cx: block, v: ValueRef) -> block {\n     let _icx = cx.insn_ctxt(\"trans_free\");"}, {"sha": "6f5aa792c4748546a8b4cde12c916d06153fc8a8", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,12 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::*;\n+use middle::trans::base::{get_insn_ctxt};\n+use middle::trans::base::{impl_owned_self, impl_self, no_self};\n+use middle::trans::base::{trans_item, get_item_val, self_arg, trans_fn};\n+use middle::trans::common::*;\n+\n use syntax::ast;\n-use syntax::ast_util::local_def;\n use syntax::ast_map::{path, path_mod, path_name};\n-use base::{trans_item, get_item_val, self_arg, trans_fn, impl_owned_self,\n-           impl_self, no_self, get_insn_ctxt};\n+use syntax::ast_util::local_def;\n \n // `translate` will be true if this function is allowed to translate the\n // item and false otherwise. Currently, this parameter is set to false when"}, {"sha": "0488ed1e5b3da68b85d100683101721008e1a3ef", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,25 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::c_uint;\n-use base::*;\n-use common::*;\n-use type_of::*;\n-use build::*;\n-use driver::session::{session, expect};\n-use syntax::{ast, ast_map};\n-use ast_map::{path, path_mod, path_name, node_id_to_str};\n-use syntax::ast_util::local_def;\n-use metadata::csearch;\n use back::{link, abi};\n+use lib::llvm::llvm::LLVMGetParam;\n use lib::llvm::llvm;\n use lib::llvm::{ValueRef, TypeRef};\n-use lib::llvm::llvm::LLVMGetParam;\n-use std::map::HashMap;\n+use metadata::csearch;\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::callee::*;\n+use middle::trans::common::*;\n+use middle::trans::expr::{SaveIn, Ignore};\n+use middle::trans::type_of::*;\n use util::ppaux::{ty_to_str, tys_to_str};\n-use callee::*;\n+\n+use core::libc::c_uint;\n+use std::map::HashMap;\n+use syntax::ast_map::{path, path_mod, path_name, node_id_to_str};\n+use syntax::ast_util::local_def;\n use syntax::print::pprust::expr_to_str;\n-use expr::{SaveIn, Ignore};\n+use syntax::{ast, ast_map};\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n "}, {"sha": "9d662f875510cb2172a5fad160ae3d9cb27d5986", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::*;\n+use back::link::mangle_exported_name;\n+use middle::trans::base::{get_insn_ctxt};\n+use middle::trans::base::{set_inline_hint_if_appr, set_inline_hint};\n+use middle::trans::base::{trans_enum_variant, trans_struct_dtor};\n+use middle::trans::base::{trans_fn, impl_self, decl_internal_cdecl_fn};\n+use middle::trans::base::{trans_item, get_item_val, no_self, self_arg};\n+use middle::trans::common::*;\n+use middle::trans::type_of::type_of_fn_from_ty;\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n+\n use syntax::ast;\n-use syntax::ast_util::local_def;\n use syntax::ast_map::{path, path_mod, path_name};\n-use base::{trans_item, get_item_val, no_self, self_arg, trans_fn,\n-              impl_self, decl_internal_cdecl_fn,\n-              set_inline_hint_if_appr, set_inline_hint,\n-              trans_enum_variant, trans_struct_dtor,\n-              get_insn_ctxt};\n+use syntax::ast_util::local_def;\n use syntax::parse::token::special_idents;\n-use type_of::type_of_fn_from_ty;\n-use back::link::mangle_exported_name;\n-use middle::ty::{FnTyBase, FnMeta, FnSig};\n \n fn monomorphic_fn(ccx: @crate_ctxt,\n                   fn_id: ast::def_id,"}, {"sha": "d15a9c101b9555e169c77502712d47aa56bfacc6", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,19 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::map::HashMap;\n-use lib::llvm::{TypeRef, ValueRef};\n-use syntax::ast;\n use back::abi;\n-use common::*;\n-use build::*;\n-use base::*;\n-use type_of::*;\n-use ast::def_id;\n+use lib::llvm::{TypeRef, ValueRef};\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::callee::{ArgVals, DontAutorefArg};\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n+use middle::trans::expr::SaveIn;\n+use middle::trans::type_of::*;\n use util::ppaux::ty_to_str;\n-use datum::*;\n-use callee::{ArgVals, DontAutorefArg};\n-use expr::SaveIn;\n+\n+use std::map::HashMap;\n+use syntax::ast::def_id;\n+use syntax::ast;\n \n enum reflector = {\n     visitor_val: ValueRef,"}, {"sha": "51c3cb9362f399972c862683fc8ab5a9a3930a3a", "filename": "src/librustc/middle/trans/shape.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,25 +11,23 @@\n // A \"shape\" is a compact encoding of a type that is used by interpreted glue.\n // This substitutes for the runtime tags used by e.g. MLs.\n \n+use back::abi;\n use lib::llvm::llvm;\n use lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n-use driver::session;\n-use driver::session::session;\n-use trans::base;\n+use middle::trans::base;\n use middle::trans::common::*;\n use middle::trans::machine::*;\n-use back::abi;\n-use middle::ty;\n use middle::ty::field;\n-use syntax::ast;\n-use syntax::ast_util::dummy_sp;\n-use syntax::util::interner;\n+use middle::ty;\n use util::ppaux::ty_to_str;\n-use syntax::codemap::span;\n-use dvec::DVec;\n \n+use core::dvec::DVec;\n+use core::option::is_some;\n use std::map::HashMap;\n-use option::is_some;\n+use syntax::ast;\n+use syntax::ast_util::dummy_sp;\n+use syntax::codemap::span;\n+use syntax::util::interner;\n \n use ty_ctxt = middle::ty::ctxt;\n "}, {"sha": "2eaf15818d89f5cee5257a1adb7d55f8e7f51df3", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,18 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast;\n-use lib::llvm::{ValueRef, TypeRef};\n use back::abi;\n-use syntax::codemap::span;\n-use shape::llsize_of;\n-use build::*;\n-use common::*;\n+use lib::llvm::{ValueRef, TypeRef};\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::*;\n+use middle::trans::expr::{Dest, Ignore, SaveIn};\n+use middle::trans::shape::llsize_of;\n+use util::common::indenter;\n use util::ppaux::ty_to_str;\n-use expr::{Dest, SaveIn, Ignore};\n-use datum::*;\n+\n+use syntax::ast;\n+use syntax::codemap::span;\n use syntax::print::pprust::{expr_to_str};\n-use util::common::indenter;\n \n // Boxed vector types are in some sense currently a \"shorthand\" for a box\n // containing an unboxed vector. This expands a boxed vector type into such an"}, {"sha": "f146d556a9d9a31b011d3f056f74dbe00f7cb4ad", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use common::*;\n-use lib::llvm::{TypeRef};\n-use syntax::ast;\n use lib::llvm::llvm;\n-use driver::session::session;\n+use lib::llvm::{TypeRef};\n+use middle::trans::common::*;\n+\n use std::map::HashMap;\n+use syntax::ast;\n \n export type_of;\n export type_of_dtor;"}, {"sha": "2f9a97aa2d883c439a4f80af70d0d629d25ac15c", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -27,13 +27,16 @@\n // much information, but have the disadvantage of being very\n // invasive.)\n \n-use std::map::HashMap;\n-use std::list;\n-use std::list::{List, Cons, Nil};\n use metadata::csearch;\n-use syntax::ast::*, syntax::ast_util, syntax::visit;\n+use middle::trans::common::*;\n+\n+use std::list::{List, Cons, Nil};\n+use std::list;\n+use std::map::HashMap;\n+use syntax::ast::*;\n use syntax::ast_map;\n-use common::*;\n+use syntax::ast_util;\n+use syntax::visit;\n \n type type_uses = uint; // Bitmask\n const use_repr: uint = 1u;   /* Dependency on size/alignment/mode and"}, {"sha": "30d47d60e589260cf8925e253dfbc4a3e721a64a", "filename": "src/librustc/middle/trans/uniq.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use syntax::ast;\n use lib::llvm::ValueRef;\n-use common::*;\n-use build::*;\n-use base::*;\n-use datum::immediate_rvalue;\n+use middle::trans::base::*;\n+use middle::trans::build::*;\n+use middle::trans::common::*;\n+use middle::trans::datum::immediate_rvalue;\n+\n+use syntax::ast;\n \n export make_free_glue, autoderef, duplicate;\n "}, {"sha": "37958f84d5962b12095606d14d5c1479905cd2e6", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -52,12 +52,13 @@\n  * an rptr (`&r.T`) use the region `r` that appears in the rptr.\n  */\n \n-use check::fn_ctxt;\n-use rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n-use rscope::{in_binding_rscope, region_scope, type_rscope};\n-use ty::{FnTyBase, FnMeta, FnSig};\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use middle::typeck::check::fn_ctxt;\n+use middle::typeck::rscope::{anon_rscope, binding_rscope, empty_rscope};\n+use middle::typeck::rscope::{in_anon_rscope, in_binding_rscope};\n+use middle::typeck::rscope::{region_scope, type_rscope};\n \n-trait ast_conv {\n+pub trait ast_conv {\n     fn tcx() -> ty::ctxt;\n     fn ccx() -> @crate_ctxt;\n     fn get_item_ty(id: ast::def_id) -> ty::ty_param_bounds_and_ty;\n@@ -141,7 +142,7 @@ fn ast_path_to_substs_and_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n     {substs: substs, ty: ty::subst(tcx, &substs, decl_ty)}\n }\n \n-fn ast_path_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n+pub fn ast_path_to_ty<AC: ast_conv, RS: region_scope Copy Owned>(\n     self: AC,\n     rscope: RS,\n     did: ast::def_id,"}, {"sha": "9432ca186f94ed2242e8e3d75a1ab30ffcc7ded2", "filename": "src/librustc/middle/typeck/check/alt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Falt.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::pat_util::{pat_is_binding, pat_is_const};\n+use middle::pat_util::{pat_is_variant_or_struct};\n+\n+use syntax::ast_util::walk_pat;\n use syntax::print::pprust;\n-use syntax::ast_util::{walk_pat};\n-use pat_util::{pat_is_binding, pat_is_const, pat_is_variant_or_struct};\n \n fn check_alt(fcx: @fn_ctxt,\n              expr: @ast::expr,"}, {"sha": "89726e22283d9523011b8251f87b0402851b9441", "filename": "src/librustc/middle/typeck/check/demand.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fdemand.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use check::fn_ctxt;\n+use middle::typeck::check::fn_ctxt;\n \n // Requires that the two types unify, and prints an error message if they\n // don't.\n@@ -18,10 +18,10 @@ fn suptype(fcx: @fn_ctxt, sp: span,\n         |sp, e, a, s| { fcx.report_mismatched_types(sp, e, a, s) })\n }\n \n-fn suptype_with_fn(fcx: @fn_ctxt, sp: span,\n-           expected: ty::t, actual: ty::t,\n+fn suptype_with_fn(fcx: @fn_ctxt,\n+                   sp: span,\n+                   expected: ty::t, actual: ty::t,\n                    handle_err: fn(span, ty::t, ty::t, &ty::type_err)) {\n-\n     // n.b.: order of actual, expected is reversed\n     match infer::mk_subty(fcx.infcx(), false, sp,\n                           actual, expected) {\n@@ -32,9 +32,7 @@ fn suptype_with_fn(fcx: @fn_ctxt, sp: span,\n     }\n }\n \n-fn eqtype(fcx: @fn_ctxt, sp: span,\n-          expected: ty::t, actual: ty::t) {\n-\n+fn eqtype(fcx: @fn_ctxt, sp: span, expected: ty::t, actual: ty::t) {\n     match infer::mk_eqty(fcx.infcx(), false, sp, actual, expected) {\n         Ok(()) => { /* ok */ }\n         Err(ref err) => {"}, {"sha": "8dfcb8c7bd9863282d14189c00f177940e555ee5", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -79,16 +79,18 @@ obtained the type `Foo`, we would never match this method.\n \n */\n \n-use coherence::get_base_type_def_id;\n use middle::resolve::{Impl, MethodInfo};\n use middle::ty::*;\n-use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box,\n-                  sty_uniq, sty_static, node_id, by_copy, by_ref,\n-                  m_const, m_mutbl, m_imm};\n+use middle::typeck::check;\n+use middle::typeck::coherence::get_base_type_def_id;\n+\n+use core::dvec::DVec;\n+use syntax::ast::{def_id, sty_by_ref, sty_value, sty_region, sty_box};\n+use syntax::ast::{sty_uniq, sty_static, node_id, by_copy, by_ref};\n+use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast_map;\n use syntax::ast_map::node_id_to_str;\n use syntax::ast_util::dummy_sp;\n-use dvec::DVec;\n \n fn lookup(\n     fcx: @fn_ctxt,"}, {"sha": "ace51539727ba0b46d0eff8a904d3f7ff4d3b4e6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 54, "deletions": 36, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -76,35 +76,51 @@ type parameter).\n \n */\n \n-use astconv::{ast_conv, ast_path_to_ty, ast_ty_to_ty};\n-use astconv::{ast_region_to_region};\n use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_};\n-use regionmanip::{replace_bound_regions_in_fn_ty};\n-use rscope::{anon_rscope, binding_rscope, empty_rscope, in_anon_rscope};\n-use rscope::{in_binding_rscope, region_scope, type_rscope,\n-                bound_self_region};\n+use middle::typeck::astconv::{ast_conv, ast_path_to_ty};\n+use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n+use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n+use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n+use middle::typeck::infer::{resolve_type, force_tvar};\n+use middle::typeck::rscope::{anon_rscope, binding_rscope, bound_self_region};\n+use middle::typeck::rscope::{empty_rscope, in_anon_rscope};\n+use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n+use util::ppaux;\n+\n+use core::result::{Result, Ok, Err};\n+use std::map::HashMap;\n use syntax::ast::ty_i;\n-use typeck::infer::{resolve_type, force_tvar};\n-use result::{Result, Ok, Err};\n-use syntax::print::pprust;\n-use syntax::parse::token::special_idents;\n use syntax::ast_util::{is_local, visibility_to_privacy, Private, Public};\n-use vtable::{LocationInfo, VtableContext};\n+use syntax::parse::token::special_idents;\n+use syntax::print::pprust;\n \n-use std::map::HashMap;\n+export alt;\n+export vtable;\n+export writeback;\n+export regionmanip;\n+export regionck;\n+export demand;\n+export method;\n+export fn_ctxt;\n+export lookup_local;\n+export impl_self_ty;\n+export DerefArgs;\n+export DontDerefArgs;\n+export DoDerefArgs;\n+export check_item_types;\n \n #[legacy_exports]\n-mod alt;\n+pub mod alt;\n #[legacy_exports]\n-mod vtable;\n+pub mod vtable;\n #[legacy_exports]\n-mod writeback;\n+pub mod writeback;\n #[legacy_exports]\n-mod regionmanip;\n+pub mod regionmanip;\n #[legacy_exports]\n-mod regionck;\n+pub mod regionck;\n #[legacy_exports]\n-mod demand;\n+pub mod demand;\n #[legacy_exports]\n pub mod method;\n \n@@ -135,7 +151,7 @@ struct inherited {\n \n enum FnKind { ForLoop, DoBlock, Vanilla }\n \n-struct fn_ctxt {\n+pub struct fn_ctxt {\n     // var_bindings, locals and next_var_id are shared\n     // with any nested functions that capture the environment\n     // (and with any functions whose environment is being captured).\n@@ -252,9 +268,9 @@ fn check_fn(ccx: @crate_ctxt,\n     let ret_ty = fn_ty.sig.output;\n \n     debug!(\"check_fn(arg_tys=%?, ret_ty=%?, self_info.self_ty=%?)\",\n-           arg_tys.map(|a| ty_to_str(tcx, *a)),\n-           ty_to_str(tcx, ret_ty),\n-           option::map(&self_info, |s| ty_to_str(tcx, s.self_ty)));\n+           arg_tys.map(|a| ppaux::ty_to_str(tcx, *a)),\n+           ppaux::ty_to_str(tcx, ret_ty),\n+           option::map(&self_info, |s| ppaux::ty_to_str(tcx, s.self_ty)));\n \n     // ______________________________________________________________________\n     // Create the function context.  This is either derived from scratch or,\n@@ -631,7 +647,7 @@ impl @fn_ctxt {\n     #[inline(always)]\n     fn write_ty(node_id: ast::node_id, ty: ty::t) {\n         debug!(\"write_ty(%d, %s) in fcx %s\",\n-               node_id, ty_to_str(self.tcx(), ty), self.tag());\n+               node_id, ppaux::ty_to_str(self.tcx(), ty), self.tag());\n         self.inh.node_types.insert(node_id, ty);\n     }\n \n@@ -793,12 +809,13 @@ impl @fn_ctxt {\n                     self.tcx().sess.span_err(sp, fmt!(\"A for-loop body must \\\n                         return (), but it returns %s here. \\\n                         Perhaps you meant to write a `do`-block?\",\n-                                            ty_to_str(self.tcx(), a))),\n+                                            ppaux::ty_to_str(self.tcx(), a))),\n             DoBlock if ty::type_is_bool(e) && ty::type_is_nil(a) =>\n                 // If we expected bool and got ()...\n                     self.tcx().sess.span_err(sp, fmt!(\"Do-block body must \\\n                         return %s, but returns () here. Perhaps you meant \\\n-                        to write a `for`-loop?\", ty_to_str(self.tcx(), e))),\n+                        to write a `for`-loop?\",\n+                        ppaux::ty_to_str(self.tcx(), e))),\n             _ => self.infcx().report_mismatched_types(sp, e, a, err)\n         }\n     }\n@@ -921,10 +938,11 @@ fn check_expr(fcx: @fn_ctxt, expr: @ast::expr,\n // declared on the impl declaration e.g., `impl<A,B> for ~[(A,B)]`\n // would return ($0, $1) where $0 and $1 are freshly instantiated type\n // variables.\n-fn impl_self_ty(vcx: &VtableContext,\n-                location_info: &LocationInfo, // (potential) receiver for\n-                                              // this impl\n-                did: ast::def_id) -> ty_param_substs_and_ty {\n+pub fn impl_self_ty(vcx: &VtableContext,\n+                    location_info: &LocationInfo, // (potential) receiver for\n+                                                  // this impl\n+                    did: ast::def_id)\n+                 -> ty_param_substs_and_ty {\n     let tcx = vcx.tcx();\n \n     let {n_tps, region_param, raw_ty} = if did.crate == ast::local_crate {\n@@ -1540,7 +1558,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n                 // (1) verify that the class id actually has a field called\n                 // field\n-                debug!(\"class named %s\", ty_to_str(tcx, base_t));\n+                debug!(\"class named %s\", ppaux::ty_to_str(tcx, base_t));\n                 let cls_items = ty::lookup_struct_fields(tcx, base_id);\n                 match lookup_field_ty(tcx, base_id, cls_items,\n                                       field, &(*substs)) {\n@@ -2400,9 +2418,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n \n     debug!(\"type of expr %s is %s, expected is %s\",\n            syntax::print::pprust::expr_to_str(expr, tcx.sess.intr()),\n-           ty_to_str(tcx, fcx.expr_ty(expr)),\n+           ppaux::ty_to_str(tcx, fcx.expr_ty(expr)),\n            match expected {\n-               Some(t) => ty_to_str(tcx, t),\n+               Some(t) => ppaux::ty_to_str(tcx, t),\n                _ => ~\"empty\"\n            });\n \n@@ -2565,7 +2583,7 @@ fn check_instantiable(tcx: ty::ctxt,\n         tcx.sess.span_err(sp, fmt!(\"this type cannot be instantiated \\\n                   without an instance of itself; \\\n                   consider using `option<%s>`\",\n-                                   ty_to_str(tcx, item_ty)));\n+                                   ppaux::ty_to_str(tcx, item_ty)));\n     }\n }\n \n@@ -2678,7 +2696,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n     check_instantiable(ccx.tcx, sp, id);\n }\n \n-fn lookup_local(fcx: @fn_ctxt, sp: span, id: ast::node_id) -> TyVid {\n+pub fn lookup_local(fcx: @fn_ctxt, sp: span, id: ast::node_id) -> TyVid {\n     match fcx.inh.locals.find(id) {\n         Some(x) => x,\n         _ => {\n@@ -2893,7 +2911,7 @@ fn check_bounds_are_used(ccx: @crate_ctxt,\n                          tps: ~[ast::ty_param],\n                          ty: ty::t) {\n     debug!(\"check_bounds_are_used(n_tps=%u, ty=%s)\",\n-           tps.len(), ty_to_str(ccx.tcx, ty));\n+           tps.len(), ppaux::ty_to_str(ccx.tcx, ty));\n \n     // make a vector of booleans initially false, set to true when used\n     if tps.len() == 0u { return; }\n@@ -3158,6 +3176,6 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n             tcx, None, false, it.span, i_ty.ty, fty,\n             || fmt!(\"intrinsic has wrong type: \\\n                       expected `%s`\",\n-                     ty_to_str(ccx.tcx, fty)));\n+                     ppaux::ty_to_str(ccx.tcx, fty)));\n     }\n }"}, {"sha": "e58add83c0944d6e1546169f53d2108032039eb8", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -27,18 +27,18 @@ this point a bit better.\n \n */\n \n-use util::ppaux;\n-use ppaux::{note_and_explain_region, ty_to_str};\n-use syntax::print::pprust;\n-use infer::{resolve_and_force_all_but_regions, fres};\n-use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n-use syntax::ast::{ProtoBare, ProtoBox, ProtoUniq, ProtoBorrowed};\n use middle::freevars::get_freevars;\n use middle::kind::check_owned;\n use middle::pat_util::pat_bindings;\n use middle::ty::{encl_region, re_scope};\n use middle::ty::{ty_fn_proto, vstore_box, vstore_fixed, vstore_slice};\n use middle::ty::{vstore_uniq};\n+use middle::typeck::infer::{resolve_and_force_all_but_regions, fres};\n+use util::ppaux::{note_and_explain_region, ty_to_str};\n+\n+use syntax::ast::{ProtoBare, ProtoBox, ProtoUniq, ProtoBorrowed};\n+use syntax::ast::{def_arg, def_binding, def_local, def_self, def_upvar};\n+use syntax::print::pprust;\n \n enum rcx { rcx_({fcx: @fn_ctxt, mut errors_reported: uint}) }\n type rvt = visit::vt<@rcx>;"}, {"sha": "0bcb032d8259cdc14afc16ab26ad749c660f3b6f", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,6 +11,8 @@\n // #[warn(deprecated_mode)];\n // #[warn(deprecated_pattern)];\n \n+use util::ppaux;\n+\n use syntax::print::pprust::{expr_to_str};\n \n // Helper functions related to manipulating region types.\n@@ -47,9 +49,9 @@ fn replace_bound_regions_in_fn_ty(\n \n     debug!(\"replace_bound_regions_in_fn_ty(self_info.self_ty=%?, fn_ty=%s, \\\n                 all_tys=%?)\",\n-           self_ty.map(|t| ty_to_str(tcx, *t)),\n-           ty_to_str(tcx, ty::mk_fn(tcx, *fn_ty)),\n-           all_tys.map(|t| ty_to_str(tcx, *t)));\n+           self_ty.map(|t| ppaux::ty_to_str(tcx, *t)),\n+           ppaux::ty_to_str(tcx, ty::mk_fn(tcx, *fn_ty)),\n+           all_tys.map(|t| ppaux::ty_to_str(tcx, *t)));\n     let _i = indenter();\n \n     let isr = do create_bound_region_mapping(tcx, isr, all_tys) |br| {\n@@ -64,8 +66,8 @@ fn replace_bound_regions_in_fn_ty(\n \n     debug!(\"result of replace_bound_regions_in_fn_ty: self_info.self_ty=%?, \\\n                 fn_ty=%s\",\n-           t_self.map(|t| ty_to_str(tcx, *t)),\n-           ty_to_str(tcx, t_fn));\n+           t_self.map(|t| ppaux::ty_to_str(tcx, *t)),\n+           ppaux::ty_to_str(tcx, t_fn));\n \n \n     // Glue updated self_ty back together with its original def_id."}, {"sha": "5751a462760641127c5e6df39ba7ba2ca77ce540", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use check::{fn_ctxt, impl_self_ty};\n-use infer::{infer_ctxt, resolve_type, resolve_and_force_all_but_regions,\n-               fixup_err_to_str};\n+use middle::typeck::check::{fn_ctxt, impl_self_ty};\n+use middle::typeck::infer::{fixup_err_to_str, infer_ctxt};\n+use middle::typeck::infer::{resolve_and_force_all_but_regions, resolve_type};\n+use util::common::indenter;\n+use util::ppaux;\n+\n+use result::{Result, Ok, Err};\n use syntax::codemap::span;\n use syntax::print::pprust;\n-use result::{Result, Ok, Err};\n-use util::common::indenter;\n \n // vtable resolution looks for places where trait bounds are\n // subsituted in and figures out which vtable is used. There is some\n@@ -81,14 +83,14 @@ fn lookup_vtables(vcx: &VtableContext,\n             tcx, bounds[i]) |trait_ty| {\n \n             debug!(\"about to subst: %?, %?\",\n-                   ty_to_str(tcx, trait_ty),\n+                   ppaux::ty_to_str(tcx, trait_ty),\n                    ty::substs_to_str(tcx, substs));\n \n             let new_substs = {self_ty: Some(*ty), ..*substs};\n             let trait_ty = ty::subst(tcx, &new_substs, trait_ty);\n \n             debug!(\"after subst: %?\",\n-                   ty_to_str(tcx, trait_ty));\n+                   ppaux::ty_to_str(tcx, trait_ty));\n \n             match lookup_vtable(vcx, location_info, *ty, trait_ty,\n                                 allow_unsafe, is_early) {\n@@ -98,8 +100,8 @@ fn lookup_vtables(vcx: &VtableContext,\n                         location_info.span,\n                         fmt!(\"failed to find an implementation of \\\n                               trait %s for %s\",\n-                             ty_to_str(vcx.tcx(), trait_ty),\n-                             ty_to_str(vcx.tcx(), *ty)));\n+                             ppaux::ty_to_str(vcx.tcx(), trait_ty),\n+                             ppaux::ty_to_str(vcx.tcx(), *ty)));\n                 }\n             }\n         }\n@@ -664,8 +666,8 @@ fn early_resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, is_early: bool) {\n                             ex.span,\n                             fmt!(\"failed to find an implementation of trait \\\n                                   %s for %s\",\n-                                 ty_to_str(fcx.tcx(), target_ty),\n-                                 ty_to_str(fcx.tcx(), ty)));\n+                                 ppaux::ty_to_str(fcx.tcx(), target_ty),\n+                                 ppaux::ty_to_str(fcx.tcx(), ty)));\n                     }\n                 }\n                 Some(vtable) => {"}, {"sha": "dd3f240f3434326e041bb05628780a7c080d19da", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,11 +12,15 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use check::{fn_ctxt, lookup_local};\n-use infer::{resolve_type, resolve_region, resolve_all, force_all};\n+use middle::typeck::check::{fn_ctxt, lookup_local};\n+use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n+use middle::typeck::infer::{resolve_type};\n+use util::ppaux;\n+\n+use result::{Result, Ok, Err};\n+\n export resolve_type_vars_in_fn;\n export resolve_type_vars_in_expr;\n-use result::{Result, Ok, Err};\n \n fn resolve_type_vars_in_type(fcx: @fn_ctxt, sp: span, typ: ty::t)\n     -> Option<ty::t>\n@@ -97,7 +101,7 @@ fn resolve_type_vars_for_node(wbcx: wb_ctxt, sp: span, id: ast::node_id)\n \n       Some(t) => {\n         debug!(\"resolve_type_vars_for_node(id=%d, n_ty=%s, t=%s)\",\n-               id, ty_to_str(tcx, n_ty), ty_to_str(tcx, t));\n+               id, ppaux::ty_to_str(tcx, n_ty), ppaux::ty_to_str(tcx, t));\n         write_ty_to_tcx(tcx, id, t);\n         match fcx.opt_node_ty_substs(id) {\n           Some(ref substs) => {"}, {"sha": "3ab3ac387f9ce57a4c1a3a672a4281b45779b449", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -43,11 +43,11 @@ use syntax::visit::{mk_simple_visitor, mk_vt, visit_crate, visit_item};\n use syntax::visit::{visit_mod};\n use util::ppaux::ty_to_str;\n \n-use dvec::DVec;\n-use result::Ok;\n+use core::dvec::DVec;\n+use core::result::Ok;\n use std::map::HashMap;\n-use uint::range;\n-use vec::{len, push};\n+use core::uint::range;\n+use core::vec::{len, push};\n \n fn get_base_type(inference_context: infer_ctxt, span: span, original_type: t)\n               -> Option<t> {"}, {"sha": "8e8d7380f8f392abd2685f2c27b471b5d5799ec8", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -30,14 +30,16 @@ are represented as `ty_param()` instances.\n \n */\n \n-use astconv::{ast_conv, ty_of_fn_decl, ty_of_arg, ast_ty_to_ty};\n-use ast_util::trait_method_to_ty_method;\n-use middle::ty::{FnMeta, FnSig, FnTyBase};\n-use rscope::*;\n-use ty::{FnTyBase, FnMeta, FnSig, InstantiatedTraitRef};\n+use middle::ty::{FnMeta, FnSig, FnTyBase, InstantiatedTraitRef};\n+use middle::typeck::astconv::{ast_conv, ty_of_fn_decl, ty_of_arg};\n+use middle::typeck::astconv::{ast_ty_to_ty};\n+use middle::typeck::rscope::*;\n use util::common::pluralize;\n+use util::ppaux;\n use util::ppaux::bound_to_str;\n \n+use syntax::ast_util::trait_method_to_ty_method;\n+\n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n \n     // FIXME (#2592): hooking into the \"intrinsic\" root module is crude.\n@@ -403,10 +405,10 @@ fn compare_impl_method(tcx: ty::ctxt,\n     // - replace self region with a fresh, dummy region\n     let impl_fty = {\n         let impl_fty = ty::mk_fn(tcx, impl_m.fty);\n-        debug!(\"impl_fty (pre-subst): %s\", ty_to_str(tcx, impl_fty));\n+        debug!(\"impl_fty (pre-subst): %s\", ppaux::ty_to_str(tcx, impl_fty));\n         replace_bound_self(tcx, impl_fty, dummy_self_r)\n     };\n-    debug!(\"impl_fty: %s\", ty_to_str(tcx, impl_fty));\n+    debug!(\"impl_fty: %s\", ppaux::ty_to_str(tcx, impl_fty));\n     let trait_fty = {\n         let dummy_tps = do vec::from_fn((*trait_m.tps).len()) |i| {\n             // hack: we don't know the def id of the impl tp, but it\n@@ -421,7 +423,7 @@ fn compare_impl_method(tcx: ty::ctxt,\n             tps: vec::append(trait_tps, dummy_tps)\n         };\n         let trait_fty = ty::mk_fn(tcx, trait_m.fty);\n-        debug!(\"trait_fty (pre-subst): %s\", ty_to_str(tcx, trait_fty));\n+        debug!(\"trait_fty (pre-subst): %s\", ppaux::ty_to_str(tcx, trait_fty));\n         ty::subst(tcx, &substs, trait_fty)\n     };\n \n@@ -574,7 +576,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n       ast::item_trait(tps, supertraits, ref trait_methods) => {\n         let tpt = ty_of_item(ccx, it);\n         debug!(\"item_trait(it.id=%d, tpt.ty=%s)\",\n-               it.id, ty_to_str(tcx, tpt.ty));\n+               it.id, ppaux::ty_to_str(tcx, tpt.ty));\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n         ensure_trait_methods(ccx, it.id, tpt.ty);\n         ensure_supertraits(ccx, it.id, it.span, rp, supertraits);\n@@ -774,7 +776,9 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n                    region_param: None,\n                    ty: ty::mk_fn(ccx.tcx, tofd)};\n         debug!(\"type of %s (id %d) is %s\",\n-               tcx.sess.str_of(it.ident), it.id, ty_to_str(tcx, tpt.ty));\n+               tcx.sess.str_of(it.ident),\n+               it.id,\n+               ppaux::ty_to_str(tcx, tpt.ty));\n         ccx.tcx.tcache.insert(local_def(it.id), tpt);\n         return tpt;\n       }"}, {"sha": "1abe2156a1ebb50fe8dda0363a134aeb09ae1369", "filename": "src/librustc/middle/typeck/infer/assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fassignment.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -58,8 +58,8 @@\n // A.  But this upper-bound might be stricter than what is truly\n // needed.\n \n-use to_str::ToStr;\n-use combine::combine_fields;\n+use middle::typeck::infer::combine::combine_fields;\n+use middle::typeck::infer::to_str::ToStr;\n \n fn to_ares(+c: cres<ty::t>) -> ares {\n     match c {"}, {"sha": "da66ecd922b687c239c92e126b5fdae070b115b8", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -54,8 +54,9 @@\n // terms of error reporting, although we do not do that properly right\n // now.\n \n-use to_str::ToStr;\n-use ty::{FnTyBase, FnMeta, FnSig};\n+use middle::ty::{FnTyBase, FnMeta, FnSig};\n+use middle::typeck::infer::to_str::ToStr;\n+\n use syntax::ast::Onceness;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export.\n@@ -92,7 +93,7 @@ trait combine {\n                a: ty::vstore, b: ty::vstore) -> cres<ty::vstore>;\n }\n \n-struct combine_fields {\n+pub struct combine_fields {\n     infcx: infer_ctxt,\n     a_is_expected: bool,\n     span: span,\n@@ -108,7 +109,7 @@ fn expected_found<C: combine,T>(\n     }\n }\n \n-fn eq_tys<C: combine>(self: &C, a: ty::t, b: ty::t) -> ures {\n+pub fn eq_tys<C: combine>(self: &C, a: ty::t, b: ty::t) -> ures {\n     let suber = self.sub();\n     do self.infcx().try {\n         do suber.tys(a, b).chain |_ok| {"}, {"sha": "9537325c097f8384c75d6a92ce08e44d47f182ac", "filename": "src/librustc/middle/typeck/infer/floating.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ffloating.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -14,8 +14,8 @@ Code related to floating-point type inference.\n \n */\n \n-use to_str::ToStr;\n use middle::ty::ty_float;\n+use middle::typeck::infer::to_str::ToStr;\n \n // Bitvector to represent sets of floating-point types.\n pub enum float_ty_set = uint;"}, {"sha": "b6e179d27a91b9c52d41f902d04d9f3a168de7f2", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use combine::*;\n-use lattice::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::combine::*;\n+use middle::typeck::infer::lattice::*;\n+use middle::typeck::infer::to_str::ToStr;\n+\n use syntax::ast::{Many, Once};\n \n enum Glb = combine_fields;  // \"greatest lower bound\" (common subtype)"}, {"sha": "f3e5e1ac73e623486b02afffeef8863561632493", "filename": "src/librustc/middle/typeck/infer/integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fintegral.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -14,7 +14,7 @@ Code related to integral type inference.\n \n */\n \n-use to_str::ToStr;\n+use middle::typeck::infer::to_str::ToStr;\n \n // Bitvector to represent sets of integral types\n enum int_ty_set = uint;"}, {"sha": "b47dd2064522e2ba72501b5124eaccabab0fa668", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use combine::*;\n-use unify::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::combine::*;\n+use middle::typeck::infer::unify::*;\n+use middle::typeck::infer::to_str::ToStr;\n \n // ______________________________________________________________________\n // Lattice operations on variables"}, {"sha": "cfb93e93a65ba26efbf9b66b2903c82cfdfd08e2", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use combine::*;\n-use lattice::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::combine::*;\n+use middle::typeck::infer::lattice::*;\n+use middle::typeck::infer::to_str::ToStr;\n+\n use syntax::ast::{Many, Once};\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export."}, {"sha": "fb8ca5632910eeed5d135c0d9904c3fcce76cec9", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -259,40 +259,40 @@ section on \"Type Combining\" below for details.\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-use std::smallintmap;\n-use std::smallintmap::smallintmap;\n-use std::map::HashMap;\n+use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, vid};\n+use middle::ty::{mk_fn, type_is_bot};\n+use middle::ty::{ty_int, ty_uint, get, terr_fn, TyVar, IntVar, FloatVar};\n use middle::ty;\n-use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, vid,\n-                 ty_int, ty_uint, get, terr_fn, TyVar, IntVar, FloatVar};\n-use syntax::{ast, ast_util};\n-use syntax::ast::{ret_style, purity};\n-use util::ppaux::{ty_to_str, mt_to_str};\n-use result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n-use ty::{mk_fn, type_is_bot};\n-use check::regionmanip::{replace_bound_regions_in_fn_ty};\n+use middle::typeck::check::regionmanip::{replace_bound_regions_in_fn_ty};\n+use middle::typeck::infer::assignment::Assign;\n+use middle::typeck::infer::combine::{combine_fields, eq_tys};\n+use middle::typeck::infer::floating::{float_ty_set, float_ty_set_all};\n+use middle::typeck::infer::glb::Glb;\n+use middle::typeck::infer::integral::{int_ty_set, int_ty_set_all};\n+use middle::typeck::infer::lub::Lub;\n+use middle::typeck::infer::region_inference::{RegionVarBindings};\n+use middle::typeck::infer::resolve::{force_all, not_regions};\n+use middle::typeck::infer::resolve::{force_tvar, force_rvar, force_ivar};\n+use middle::typeck::infer::resolve::{resolve_and_force_all_but_regions};\n+use middle::typeck::infer::resolve::{resolve_ivar, resolve_all};\n+use middle::typeck::infer::resolve::{resolve_nested_tvar, resolve_rvar};\n+use middle::typeck::infer::resolve::{resolver};\n+use middle::typeck::infer::sub::Sub;\n+use middle::typeck::infer::to_str::ToStr;\n+use middle::typeck::infer::unify::{vals_and_bindings, root};\n use util::common::{indent, indenter};\n-use ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n-use ast::{m_const, m_imm, m_mutbl};\n-use dvec::DVec;\n-use region_inference::{RegionVarBindings};\n-use ast_util::dummy_sp;\n-use cmp::Eq;\n-\n-// From submodules:\n-use resolve::{resolve_nested_tvar, resolve_rvar, resolve_ivar, resolve_all,\n-                 force_tvar, force_rvar, force_ivar, force_all, not_regions,\n-                 resolve_and_force_all_but_regions, resolver};\n-use unify::{vals_and_bindings, root};\n-use integral::{int_ty_set, int_ty_set_all};\n-use floating::{float_ty_set, float_ty_set_all};\n-use combine::{combine_fields, eq_tys};\n-use assignment::Assign;\n-use to_str::ToStr;\n-\n-use sub::Sub;\n-use lub::Lub;\n-use glb::Glb;\n+use util::ppaux::{ty_to_str, mt_to_str};\n+\n+use core::cmp::Eq;\n+use core::dvec::DVec;\n+use core::result::{Result, Ok, Err, map_vec, map_vec2, iter_vec2};\n+use std::map::HashMap;\n+use std::smallintmap;\n+use syntax::ast::{ret_style, purity};\n+use syntax::ast::{m_const, m_imm, m_mutbl};\n+use syntax::ast::{unsafe_fn, impure_fn, pure_fn, extern_fn};\n+use syntax::ast_util::dummy_sp;\n+use syntax::{ast, ast_util};\n \n export infer_ctxt;\n export new_infer_ctxt;\n@@ -311,6 +311,18 @@ export cres, fres, fixup_err, fixup_err_to_str;\n export assignment;\n export root, to_str;\n export int_ty_set_all;\n+export assignment;\n+export combine;\n+export floating;\n+export glb;\n+export integral;\n+export lattice;\n+export lub;\n+export region_inference;\n+export resolve;\n+export sub;\n+export to_str;\n+export unify;\n \n #[legacy_exports]\n mod assignment;"}, {"sha": "99d636559dbc26c05ed771c47480a2ce859a287d", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -453,20 +453,20 @@ write it)\n #[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n-use dvec::DVec;\n+use middle::region::is_subregion_of;\n+use middle::ty::{Region, RegionVid, re_static, re_infer, re_free, re_bound};\n+use middle::ty::{re_scope, ReVar, ReSkolemized};\n+use middle::typeck::infer::to_str::ToStr;\n+use syntax::codemap;\n+use util::ppaux::note_and_explain_region;\n+\n+use core::dvec::DVec;\n use result::Result;\n use result::{Ok, Err};\n use std::map::HashMap;\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n \n-use region::is_subregion_of;\n-use ty::{Region, RegionVid, re_static, re_infer, re_free, re_bound,\n-         re_scope, ReVar, ReSkolemized};\n-use syntax::codemap;\n-use to_str::ToStr;\n-use util::ppaux::note_and_explain_region;\n-\n export RegionVarBindings;\n export make_subregion;\n export lub_regions;"}, {"sha": "91689ff06ddc9e6e850423132c8bcb17531afc8d", "filename": "src/librustc/middle/typeck/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fresolve.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -46,9 +46,9 @@\n // future).  If you want to resolve everything but one type, you are\n // probably better off writing `resolve_all - resolve_ivar`.\n \n-use integral::*;\n-use floating::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::floating::*;\n+use middle::typeck::infer::integral::*;\n+use middle::typeck::infer::to_str::ToStr;\n \n const resolve_nested_tvar: uint = 0b00000001;\n const resolve_rvar: uint        = 0b00000010;"}, {"sha": "1cec971f15629ede46f38c6fe8353ada1b214385", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use combine::*;\n-use unify::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::combine::*;\n+use middle::typeck::infer::to_str::ToStr;\n+use middle::typeck::infer::unify::*;\n+\n use std::list;\n \n fn macros() { include!(\"macros.rs\"); } // FIXME(#3114): Macro import/export."}, {"sha": "166907ba7a86207a769eb55750338dbc5f58d7d2", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use integral::{int_ty_set};\n-use floating::{float_ty_set};\n-use unify::{var_value, redirect, root};\n+use middle::typeck::infer::integral::int_ty_set;\n+use middle::typeck::infer::floating::float_ty_set;\n+use middle::typeck::infer::unify::{redirect, root, var_value};\n \n trait ToStr {\n     fn to_str(cx: infer_ctxt) -> ~str;"}, {"sha": "2ec356a6dc845ac2ce1744be09c05526a43faf31", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use combine::combine;\n-use integral::*;\n-use floating::*;\n-use to_str::ToStr;\n+use middle::typeck::infer::combine::combine;\n+use middle::typeck::infer::floating::*;\n+use middle::typeck::infer::integral::*;\n+use middle::typeck::infer::to_str::ToStr;\n+\n use std::smallintmap::SmallIntMap;\n \n enum var_value<V:Copy, T:Copy> {"}, {"sha": "aaf53e017388a0810932f5ba97540de5e6c75651", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -50,31 +50,31 @@ independently:\n \n #[legacy_exports];\n \n-use result::Result;\n-use syntax::{ast, ast_util, ast_map};\n-use ast::spanned;\n-use ast::{required, provided};\n-use syntax::ast_map::node_id_to_str;\n-use syntax::ast_util::{local_def, respan, split_trait_methods,\n-                       has_legacy_export_attr};\n-use syntax::visit;\n use metadata::csearch;\n-use util::common::{block_query, loop_query};\n-use syntax::codemap::span;\n-use pat_util::{pat_id_map, PatIdMap};\n-use middle::ty;\n+use middle::pat_util::{pat_id_map, PatIdMap};\n use middle::ty::{arg, field, node_type_table, mk_nil, ty_param_bounds_and_ty};\n use middle::ty::{ty_param_substs_and_ty, vstore_uniq};\n-use std::smallintmap;\n-use std::map;\n+use middle::ty;\n+use util::common::{block_query, indent, indenter, loop_query};\n+use util::ppaux::{bound_region_to_str, vstore_to_str, expr_repr};\n+use util::ppaux::{ty_to_str, tys_to_str, region_to_str};\n+use util::ppaux;\n+\n+use core::dvec::DVec;\n+use core::result::Result;\n+use std::list::{List, Nil, Cons};\n+use std::list;\n use std::map::HashMap;\n+use std::map;\n+use std::smallintmap;\n+use syntax::ast::{provided, required, spanned};\n+use syntax::ast_map::node_id_to_str;\n+use syntax::ast_util::{has_legacy_export_attr};\n+use syntax::ast_util::{local_def, respan, split_trait_methods};\n+use syntax::codemap::span;\n use syntax::print::pprust::*;\n-use util::ppaux::{ty_to_str, tys_to_str, region_to_str,\n-                  bound_region_to_str, vstore_to_str, expr_repr};\n-use util::common::{indent, indenter};\n-use std::list;\n-use list::{List, Nil, Cons};\n-use dvec::DVec;\n+use syntax::visit;\n+use syntax::{ast, ast_util, ast_map};\n \n export check;\n export check_crate;\n@@ -89,24 +89,31 @@ export method_static, method_param, method_trait, method_self;\n export vtable_static, vtable_param, vtable_trait;\n export provided_methods_map;\n export coherence;\n+export check;\n+export rscope;\n+export astconv;\n+export infer;\n+export collect;\n+export coherence;\n+export deriving;\n \n #[legacy_exports]\n #[path = \"check/mod.rs\"]\n pub mod check;\n #[legacy_exports]\n-mod rscope;\n+pub mod rscope;\n #[legacy_exports]\n-mod astconv;\n+pub mod astconv;\n #[path = \"infer/mod.rs\"]\n-mod infer;\n+pub mod infer;\n #[legacy_exports]\n-mod collect;\n+pub mod collect;\n #[legacy_exports]\n-mod coherence;\n+pub mod coherence;\n \n #[auto_serialize]\n #[auto_deserialize]\n-enum method_origin {\n+pub enum method_origin {\n     // fully statically resolved method\n     method_static(ast::def_id),\n \n@@ -139,7 +146,7 @@ type method_param = {\n     bound_num: uint\n };\n \n-type method_map_entry = {\n+pub type method_map_entry = {\n     // the type and mode of the self parameter, which is not reflected\n     // in the fn type (FIXME #3446)\n     self_arg: ty::arg,\n@@ -153,12 +160,12 @@ type method_map_entry = {\n \n // maps from an expression id that corresponds to a method call to the details\n // of the method to be invoked\n-type method_map = HashMap<ast::node_id, method_map_entry>;\n+pub type method_map = HashMap<ast::node_id, method_map_entry>;\n \n // Resolutions for bounds of all parameters, left to right, for a given path.\n-type vtable_res = @~[vtable_origin];\n+pub type vtable_res = @~[vtable_origin];\n \n-enum vtable_origin {\n+pub enum vtable_origin {\n     /*\n       Statically known vtable. def_id gives the class or impl item\n       from whence comes the vtable, and tys are the type substs.\n@@ -198,7 +205,7 @@ impl vtable_origin {\n             vtable_trait(def_id, ref tys) => {\n                 fmt!(\"vtable_trait(%?:%s, %?)\",\n                      def_id, ty::item_path_str(tcx, def_id),\n-                     tys.map(|t| ty_to_str(tcx, *t)))\n+                     tys.map(|t| ppaux::ty_to_str(tcx, *t)))\n             }\n         }\n     }\n@@ -220,15 +227,15 @@ enum crate_ctxt {\n \n // Functions that write types into the node type table\n fn write_ty_to_tcx(tcx: ty::ctxt, node_id: ast::node_id, ty: ty::t) {\n-    debug!(\"write_ty_to_tcx(%d, %s)\", node_id, ty_to_str(tcx, ty));\n+    debug!(\"write_ty_to_tcx(%d, %s)\", node_id, ppaux::ty_to_str(tcx, ty));\n     smallintmap::insert(*tcx.node_types, node_id as uint, ty);\n }\n fn write_substs_to_tcx(tcx: ty::ctxt,\n                        node_id: ast::node_id,\n                        +substs: ~[ty::t]) {\n     if substs.len() > 0u {\n         debug!(\"write_substs_to_tcx(%d, %?)\", node_id,\n-               substs.map(|t| ty_to_str(tcx, *t)));\n+               substs.map(|t| ppaux::ty_to_str(tcx, *t)));\n         tcx.node_type_substs.insert(node_id, substs);\n     }\n }\n@@ -356,13 +363,13 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n                     main_span,\n                     fmt!(\"Wrong type in main function: found `%s`, \\\n                           expected `fn() -> ()`\",\n-                         ty_to_str(tcx, main_t)));\n+                         ppaux::ty_to_str(tcx, main_t)));\n             }\n         }\n         _ => {\n             tcx.sess.span_bug(main_span,\n                               ~\"main has a non-function type: found `\" +\n-                              ty_to_str(tcx, main_t) + ~\"`\");\n+                              ppaux::ty_to_str(tcx, main_t) + ~\"`\");\n         }\n     }\n }"}, {"sha": "cbbb417eae6a5ffa2fdf5cbe9d0a14934118a18a", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use result::Result;\n+use core::result::Result;\n use syntax::parse::token::special_idents;\n \n trait region_scope {"}, {"sha": "45aa78be02606fbb1b8adb08370479c3bc383339", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -145,7 +145,7 @@ mod middle {\n     #[path = \"middle/lint.rs\"]\n     mod lint;\n     #[path = \"middle/borrowck/mod.rs\"]\n-    mod borrowck;\n+    pub mod borrowck;\n     #[legacy_exports]\n     #[path = \"middle/mem_categorization.rs\"]\n     mod mem_categorization;"}, {"sha": "a0685c4b3ac992ff6693d4cd380dd4c88dd5860d", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -17,19 +17,19 @@ query AST-related information, shielding the rest of Rustdoc from its\n non-sendableness.\n */\n \n-use std::map::HashMap;\n-use rustc::driver::session;\n-use session::{basic_options, options};\n-use session::Session;\n+use rustc::back::link;\n use rustc::driver::driver;\n-use syntax::diagnostic;\n-use syntax::diagnostic::handler;\n+use rustc::driver::session::Session;\n+use rustc::driver::session::{basic_options, options};\n+use rustc::driver::session;\n+use rustc::front;\n+use rustc::metadata::filesearch;\n+use std::map::HashMap;\n use syntax::ast;\n-use syntax::codemap;\n use syntax::ast_map;\n-use rustc::back::link;\n-use rustc::metadata::filesearch;\n-use rustc::front;\n+use syntax::codemap;\n+use syntax::diagnostic::handler;\n+use syntax::diagnostic;\n \n pub type Ctxt = {\n     ast: @ast::crate,"}, {"sha": "db97f34f20168d49ef8ab1ebc35e48c32747b028", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,12 +10,12 @@\n \n //! AST-parsing helpers\n \n+use rustc::driver::driver::{file_input, str_input};\n use rustc::driver::driver;\n-use driver::{file_input, str_input};\n use rustc::driver::session;\n-use syntax::diagnostic;\n use syntax::ast;\n use syntax::codemap;\n+use syntax::diagnostic;\n use syntax::parse;\n \n pub fn from_file(file: &Path) -> @ast::crate {"}, {"sha": "a2e1167eaa816a21213d5e0709c5fe6b3b1232c6", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -28,7 +28,7 @@ extern mod rustc(vers = \"0.5\");\n extern mod syntax(vers = \"0.5\");\n \n use core::*;\n-use io::{ReaderUtil, WriterUtil};\n+use core::io::{ReaderUtil, WriterUtil};\n use rustc::back;\n use rustc::driver::{driver, session};\n use rustc::front;\n@@ -38,8 +38,8 @@ use rustc::middle::{freevars, kind, lint, trans, ty, typeck};\n use rustc::middle;\n use syntax::{ast, ast_util, codemap, diagnostic, fold, parse, print, visit};\n use syntax::ast_util::*;\n-use parse::token;\n-use print::{pp, pprust};\n+use syntax::parse::token;\n+use syntax::print::{pp, pprust};\n use std::rl;\n \n /**"}, {"sha": "8a3e6213325a78fc9dfd818a0fde5b64c8acf107", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -582,4 +582,4 @@ pub impl<D: Deserializer> D: DeserializerHelpers {\n }\n }\n \n-pub use traits::*;\n+pub use serialization::traits::*;"}, {"sha": "c9754ad99801c8e4d6859ab55dacc2fab524c26e", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,9 +12,8 @@\n \n #[forbid(deprecated_mode)];\n \n-use uv = uv;\n use uv::iotask;\n-use iotask::IoTask;\n+use uv::iotask::IoTask;\n use comm = core::comm;\n \n /**"}, {"sha": "58b9a8d3d944528175711ca80b02cc6852a56348", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -15,10 +15,10 @@\n use ll = uv_ll;\n use iotask = uv_iotask;\n use get_gl = get;\n-use iotask::{IoTask, spawn_iotask};\n+use uv_iotask::{IoTask, spawn_iotask};\n use private::{chan_from_global_ptr, weaken_task};\n use comm = core::comm;\n-use comm::{Port, Chan, select2, listen};\n+use core::comm::{Port, Chan, select2, listen};\n use task::TaskBuilder;\n use either::{Left, Right};\n "}, {"sha": "19f5997a57d7342515a6207b25e63a5941632406", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -19,7 +19,7 @@\n use libc::c_void;\n use ptr::addr_of;\n use comm = core::comm;\n-use comm::{Port, Chan, listen};\n+use core::comm::{Port, Chan, listen};\n use task::TaskBuilder;\n use ll = uv_ll;\n "}, {"sha": "359414cff42bc6d1410995b66e7c96a52f850571", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -88,7 +88,7 @@ node twice.\n \n */\n \n-use base::*;\n+use ext::base::*;\n use codemap::span;\n use std::map;\n use std::map::HashMap;"}, {"sha": "0d40ede4dbcdb6e9b234e7e1e81f48dd5f38ca16", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use codemap::span;\n-use base::ext_ctxt;\n+use ext::base::ext_ctxt;\n \n fn mk_expr(cx: ext_ctxt, sp: codemap::span, expr: ast::expr_) ->\n     @ast::expr {"}, {"sha": "d84d79082a4f8a33212388adf278bf1d403efaf3", "filename": "src/libsyntax/ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat_idents.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use base::*;\n+use ext::base::*;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])\n     -> base::mac_result {"}, {"sha": "f0eaf2115b8960a4a23e65e42ee227f52561fdb5", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -18,7 +18,7 @@ use ast::{pat_ident, pat_wild, public, pure_fn, re_anon, stmt, struct_def};\n use ast::{struct_variant_kind, sty_by_ref, sty_region, tuple_variant_kind};\n use ast::{ty_nil, ty_param, ty_param_bound, ty_path, ty_rptr, unnamed_field};\n use ast::{variant};\n-use base::ext_ctxt;\n+use ext::base::ext_ctxt;\n use codemap::span;\n use parse::token::special_idents::clownshoes_extensions;\n "}, {"sha": "b5c55437d70b325c24b6ba419a9fbb270d1648b6", "filename": "src/libsyntax/ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fenv.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -14,8 +14,8 @@\n  * should all get sucked into either the compiler syntax extension plugin\n  * interface.\n  */\n-use base::*;\n-use build::mk_uniq_str;\n+use ext::base::*;\n+use ext::build::mk_uniq_str;\n export expand_syntax_ext;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: span, tts: ~[ast::token_tree])"}, {"sha": "2b5f95c4066dae38a4a5f5c03c0c236c34faeef2", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -16,7 +16,7 @@\n  * compiler syntax extension plugin interface.\n  */\n use extfmt::ct::*;\n-use base::*;\n+use ext::base::*;\n use codemap::span;\n use ext::build::*;\n export expand_syntax_ext;"}, {"sha": "47096182fe848140073277ef3ce3db3e8129efe4", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use base::*;\n+use ext::base::*;\n use io::WriterUtil;\n \n fn expand_syntax_ext(cx: ext_ctxt, sp: codemap::span, tt: ~[ast::token_tree])"}, {"sha": "56f426e3853bfc78dec06c5afb392d2f9b41b9d6", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -17,7 +17,7 @@ use ast::{ident, node_id};\n use ast_util::{ident_to_path, respan, dummy_sp};\n use codemap::span;\n use ext::base::mk_ctxt;\n-use quote::rt::*;\n+use ext::quote::rt::*;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "7193a00950e28fd33cf305ee137dc6ede3c21dab", "filename": "src/libsyntax/ext/pipes/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fcheck.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -31,7 +31,7 @@ that.\n \n use ext::base::ext_ctxt;\n \n-use proto::{state, protocol, next_state};\n+use ext::pipes::proto::{state, protocol, next_state};\n \n impl ext_ctxt: proto::visitor<(), (), ()>  {\n     fn visit_proto(_proto: protocol,"}, {"sha": "0a02bca88ca99859045a029f0998c9a39a1d2590", "filename": "src/libsyntax/ext/pipes/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -49,9 +49,8 @@ use ast::tt_delim;\n use parse::lexer::{new_tt_reader, reader};\n use parse::parser::Parser;\n \n-use pipes::parse_proto::proto_parser;\n-\n-use pipes::proto::{visit, protocol};\n+use ext::pipes::parse_proto::proto_parser;\n+use ext::pipes::proto::{visit, protocol};\n \n #[legacy_exports]\n mod ast_builder;"}, {"sha": "0f6b9dbda284349bc3bd3de97130367f2c1103ff", "filename": "src/libsyntax/ext/pipes/parse_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fparse_proto.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,7 +13,7 @@\n use parse::parser;\n use parse::token;\n \n-use pipec::*;\n+use ext::pipes::pipec::*;\n \n trait proto_parser {\n     fn parse_proto(id: ~str) -> protocol;"}, {"sha": "c07170e5c364097e4ae7bab3aff1e2c58e7bf03d", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -19,16 +19,9 @@ use ast_util::dummy_sp;\n use util::interner;\n use ext::base::ext_ctxt;\n use parse::*;\n-use proto::*;\n-use quote::rt::*;\n-use ast_builder::{append_types, path};\n-\n-// Transitional reexports so qquote can find the paths it is looking for\n-mod syntax {\n-    #[legacy_exports];\n-    pub use ext;\n-    pub use parse;\n-}\n+use ext::pipes::proto::*;\n+use ext::quote::rt::*;\n+use ext::pipes::ast_builder::{append_types, path};\n \n trait gen_send {\n     fn gen_send(cx: ext_ctxt, try: bool) -> @ast::item;"}, {"sha": "76757d027a5c82a7b6637a996f012ea35e153b43", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,7 +11,7 @@\n use to_str::ToStr;\n use dvec::DVec;\n \n-use ast_builder::{path, append_types};\n+use ext::pipes::ast_builder::{path, append_types};\n \n enum direction { send, recv }\n "}, {"sha": "c498c3407c28ab523d4fc9eb6e5d9502b450925d", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,7 +13,7 @@ use mod parse::token;\n \n use codemap::{span, BytePos};\n use ext::base::ext_ctxt;\n-use token::*;\n+use parse::token::*;\n \n /**\n *\n@@ -34,7 +34,7 @@ pub mod rt {\n     pub use codemap::span;\n \n     use print::pprust;\n-    use pprust::{item_to_str, ty_to_str};\n+    use print::pprust::{item_to_str, ty_to_str};\n \n     trait ToTokens {\n         pub fn to_tokens(_cx: ext_ctxt) -> ~[token_tree];"}, {"sha": "099764a3278b4eff0e1412801a911c84535ca49b", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use base::*;\n+use ext::base::*;\n use codemap::{span, Loc, FileMap};\n use print::pprust;\n-use build::{mk_base_vec_e,mk_uint,mk_u8,mk_uniq_str};\n+use ext::build::{mk_base_vec_e, mk_uint, mk_u8, mk_uniq_str};\n \n export expand_line;\n export expand_col;"}, {"sha": "e93f3d6e38b24d8538e3b6979d74641857898c0f", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,15 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n+use ext::base::{ext_ctxt, mac_result, mr_any, mr_def, normal_tt};\n use codemap::span;\n use ast::{ident, matcher_, matcher, match_tok,\n              match_nonterminal, match_seq, tt_delim};\n use parse::lexer::{new_tt_reader, reader};\n use parse::token::{FAT_ARROW, SEMI, LBRACE, RBRACE, nt_matchers, nt_tt};\n use parse::parser::Parser;\n-use macro_parser::{parse, parse_or_else, success, failure, named_match,\n-                      matched_seq, matched_nonterminal, error};\n+use ext::tt::macro_parser::{parse, parse_or_else, success, failure,\n+                            named_match, matched_seq, matched_nonterminal,\n+                            error};\n use std::map::HashMap;\n use parse::token::special_idents;\n use ast_util::dummy_sp;"}, {"sha": "a68482ea46b3653484df210b69017ba2ad3e69d4", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,7 @@\n \n use diagnostic::span_handler;\n use ast::{token_tree, tt_delim, tt_tok, tt_seq, tt_nonterminal,ident};\n-use macro_parser::{named_match, matched_seq, matched_nonterminal};\n+use ext::tt::macro_parser::{named_match, matched_seq, matched_nonterminal};\n use codemap::span;\n use parse::token::{EOF, INTERPOLATED, IDENT, Token, nt_ident, ident_interner};\n use std::map::HashMap;"}, {"sha": "a4bef47fdf290bfa89171a6166ad29252d49ae9a", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,7 @@\n \n use either::{Either, Left, Right};\n use ast_util::spanned;\n-use common::*; //resolve bug?\n+use parse::common::*; //resolve bug?\n \n export parser_attr;\n "}, {"sha": "22b40736748b54238fc6bb8e0b10778807ea70be", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::println;//XXXXXXXXxxx\n use io::ReaderUtil;\n use util::interner;\n-use lexer::{string_reader, bump, is_eof, nextch,\n-               is_whitespace, get_str_from, reader};\n+use parse::lexer::{string_reader, bump, is_eof, nextch,\n+                   is_whitespace, get_str_from, reader};\n use codemap::{FileMap, CharPos};\n \n export cmnt;"}, {"sha": "246a8fa9c7c55075b6e7689e89ab2d7c6642f415", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,8 +10,8 @@\n \n use std::map::{HashMap};\n use ast_util::spanned;\n-use parser::Parser;\n-use lexer::reader;\n+use parse::parser::Parser;\n+use parse::lexer::reader;\n \n type seq_sep = {\n     sep: Option<token::Token>,"}, {"sha": "803135f7599e20dcb76e1f3c9081b0699e066b09", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -20,6 +20,7 @@ export comments;\n export prec;\n export classify;\n export attr;\n+export obsolete;\n \n export parse_sess;\n export new_parse_sess, new_parse_sess_special_handler;\n@@ -35,14 +36,14 @@ export parse_stmt_from_source_str;\n export parse_tts_from_source_str;\n export parse_from_source_str;\n \n-use parser::Parser;\n-use attr::parser_attr;\n use ast::node_id;\n-use util::interner;\n+use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n-use lexer::{reader, string_reader};\n+use parse::attr::parser_attr;\n+use parse::lexer::{reader, string_reader};\n+use parse::parser::Parser;\n use parse::token::{ident_interner, mk_ident_interner};\n-use codemap::{span, CodeMap, FileMap, CharPos, BytePos};\n+use util::interner;\n \n \n #[legacy_exports]"}, {"sha": "3db635f3b431d3fba362eaa45e9c7694d0acbf07", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -20,7 +20,7 @@ removed.\n use codemap::span;\n use ast::{expr, expr_lit, lit_nil};\n use ast_util::{respan};\n-use token::Token;\n+use parse::token::Token;\n \n /// The specific types of unsupported syntax\n pub enum ObsoleteSyntax {"}, {"sha": "47f65ed2f8d37ed2ba217cd78edaf2b2483a006a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,19 +13,19 @@ use print::pprust::expr_to_str;\n use result::Result;\n use either::{Either, Left, Right};\n use std::map::HashMap;\n-use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n-            INTERPOLATED, special_idents};\n+use parse::token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n+                   INTERPOLATED, special_idents};\n use codemap::{span,FssNone, BytePos};\n use util::interner::Interner;\n use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n-use lexer::reader;\n-use prec::{as_prec, token_to_binop};\n-use attr::parser_attr;\n-use common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n-                seq_sep_none, token_to_str};\n+use parse::lexer::reader;\n+use parse::prec::{as_prec, token_to_binop};\n+use parse::attr::parser_attr;\n+use parse::common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,\n+                    seq_sep_none, token_to_str};\n use dvec::DVec;\n use vec::{push};\n-use obsolete::{\n+use parse::obsolete::{\n     ObsoleteSyntax,\n     ObsoleteLowerCaseKindBounds, ObsoleteLet,\n     ObsoleteFieldTerminator, ObsoleteStructCtor,"}, {"sha": "4663b875bb5d7a23cf3b73dc852014a229da9a86", "filename": "src/libsyntax/parse/prec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fparse%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fprec.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,8 +12,8 @@ export as_prec;\n export unop_prec;\n export token_to_binop;\n \n-use token::*;\n-use token::Token;\n+use parse::token::*;\n+use parse::token::Token;\n use ast::*;\n \n /// Unary operators have higher precedence than binary"}, {"sha": "e977327e919b45e561230f08b35aebbceafcdc8d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,8 +10,8 @@\n \n use parse::{comments, lexer, token};\n use codemap::{CodeMap, BytePos};\n-use pp::{break_offset, word, printer, space, zerobreak, hardbreak, breaks};\n-use pp::{consistent, inconsistent, eof};\n+use print::pp::{break_offset, word, printer, space, zerobreak, hardbreak};\n+use print::pp::{breaks, consistent, inconsistent, eof};\n use ast::{required, provided};\n use ast_util::{operator_prec};\n use dvec::DVec;"}, {"sha": "119e1e25fb7c1c57fc037c4a18425df110040013", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -31,6 +31,11 @@ extern mod std(vers = \"0.5\");\n \n use core::*;\n \n+pub mod syntax {\n+    pub use ext;\n+    pub use parse;\n+}\n+\n #[legacy_exports]\n mod attr;\n #[legacy_exports]"}, {"sha": "5e7424cf41e64d137eb8eb052203a11f9819b8f0", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,7 +12,7 @@\n \n export foo;\n \n-use comm::*;\n+use core::comm::*;\n \n fn foo<T: Send Copy>(x: T) -> Port<T> {\n     let p = Port();"}, {"sha": "162f7de4b1b43b9b5f6db36588bde9a353e07896", "filename": "src/test/auxiliary/pub_use_mods_xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -16,6 +16,6 @@ pub mod a {\n         }\n     }\n \n-    pub use b::c;\n+    pub use a::b::c;\n }\n "}, {"sha": "21b9e5292b19ed09cf745876cb6ac50ff29c1367", "filename": "src/test/compile-fail/super-at-top-level.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuper-at-top-level.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -0,0 +1,7 @@\n+use super::f;   //~ ERROR unresolved name\n+//~^ ERROR failed to resolve import\n+\n+fn main() {\n+    \n+}\n+"}, {"sha": "beb1a5fc6c237604c017e9c85788c667e2a74f3f", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,8 +11,6 @@\n \n \n // Regression test for issue #374\n-extern mod std;\n-use option::None;\n \n enum sty { ty_nil, }\n "}, {"sha": "c90bec114ed26e3dc1cf179dba0681b32ea14865", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,12 +11,10 @@\n \n \n // -*- rust -*-\n-use core::sys;\n-\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    let count = sys::refcount(s);\n+    let count = core::sys::refcount(s);\n     let x: t = make_t(s); // ref up\n \n     match x {\n@@ -26,20 +24,20 @@ fn foo(s: @int) {\n       }\n       _ => { debug!(\"?\"); fail; }\n     }\n-    log(debug, sys::refcount(s));\n-    assert (sys::refcount(s) == count + 1u);\n-    let _ = sys::refcount(s); // don't get bitten by last-use.\n+    log(debug, core::sys::refcount(s));\n+    assert (core::sys::refcount(s) == count + 1u);\n+    let _ = core::sys::refcount(s); // don't get bitten by last-use.\n }\n \n fn main() {\n     let s: @int = @0; // ref up\n \n-    let count = sys::refcount(s);\n+    let count = core::sys::refcount(s);\n \n     foo(s); // ref up then down\n \n-    log(debug, sys::refcount(s));\n-    let count2 = sys::refcount(s);\n-    let _ = sys::refcount(s); // don't get bitten by last-use.\n+    log(debug, core::sys::refcount(s));\n+    let count2 = core::sys::refcount(s);\n+    let _ = core::sys::refcount(s); // don't get bitten by last-use.\n     assert count == count2;\n }"}, {"sha": "bd0e91f153e2265fd26cd1e2992492c79ce882b0", "filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use to_str::ToStr;\n-\n trait Foo {\n     fn f(&self);\n }\n@@ -37,4 +35,4 @@ impl Bar : Baz {\n fn main() {\n     let y = Bar { x: 42 };\n     y.f();\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5472903f32b300d9d4998bdeb8fbad8be825fbe5", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "834040e0e57f9fc6a34ba4e7f40a69b2d179977e", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,31 +10,25 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use comm::Chan;\n-use comm::Port;\n-use comm::send;\n-use comm::recv;\n-\n-fn a(c: Chan<int>) { send(c, 10); }\n+fn a(c: core::comm::Chan<int>) { core::comm::send(c, 10); }\n \n fn main() {\n-    let p = Port();\n-    let ch = Chan(&p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| a(ch) );\n     let mut n: int = 0;\n-    n = recv(p);\n-    n = recv(p);\n+    n = core::comm::recv(p);\n+    n = core::comm::recv(p);\n     //    debug!(\"Finished.\");\n }\n \n-fn b(c: Chan<int>) {\n+fn b(c: core::comm::Chan<int>) {\n     //    debug!(\"task b0\");\n     //    debug!(\"task b1\");\n     //    debug!(\"task b2\");\n     //    debug!(\"task b3\");\n     //    debug!(\"task b4\");\n     //    debug!(\"task b5\");\n-    send(c, 10);\n+    core::comm::send(c, 10);\n }"}, {"sha": "df8eb39da30433d34d15ca2f3cb895a7aefe3c7b", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,30 +10,28 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use comm::Port;\n-use comm::send;\n-use comm::Chan;\n-use comm::recv;\n-\n-fn a(c: Chan<int>) { debug!(\"task a0\"); debug!(\"task a1\"); send(c, 10); }\n+fn a(c: core::comm::Chan<int>) {\n+    debug!(\"task a0\");\n+    debug!(\"task a1\");\n+    core::comm::send(c, 10);\n+}\n \n fn main() {\n-    let p = Port();\n-    let ch = Chan(&p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut n: int = 0;\n-    n = recv(p);\n-    n = recv(p);\n+    n = core::comm::recv(p);\n+    n = core::comm::recv(p);\n     debug!(\"Finished.\");\n }\n \n-fn b(c: Chan<int>) {\n+fn b(c: core::comm::Chan<int>) {\n     debug!(\"task b0\");\n     debug!(\"task b1\");\n     debug!(\"task b2\");\n     debug!(\"task b2\");\n     debug!(\"task b3\");\n-    send(c, 10);\n+    core::comm::send(c, 10);\n }"}, {"sha": "bc7b194d7b4e30d0d3975ec30d2ef639ade04e2a", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,20 +10,15 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use comm::send;\n-use comm::Chan;\n-use comm::recv;\n-\n-fn a(c: Chan<int>) {\n+fn a(c: core::comm::Chan<int>) {\n     if true {\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n     }\n-    send(c, 10);\n+    core::comm::send(c, 10);\n }\n \n fn k(x: int) -> int { return 15; }\n@@ -39,18 +34,18 @@ fn main() {\n     let mut n: int = 2 + 3 * 7;\n     let s: ~str = ~\"hello there\";\n     let p = comm::Port();\n-    let ch = comm::Chan(&p);\n+    let ch = core::comm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut x: int = 10;\n     x = g(n, s);\n     log(debug, x);\n-    n = recv(p);\n-    n = recv(p);\n+    n = core::comm::recv(p);\n+    n = core::comm::recv(p);\n     debug!(\"children finished, root finishing\");\n }\n \n-fn b(c: Chan<int>) {\n+fn b(c: core::comm::Chan<int>) {\n     if true {\n         debug!(\"task b\");\n         debug!(\"task b\");\n@@ -59,5 +54,5 @@ fn b(c: Chan<int>) {\n         debug!(\"task b\");\n         debug!(\"task b\");\n     }\n-    send(c, 10);\n+    core::comm::send(c, 10);\n }"}, {"sha": "9c2a16e3e37e629add88618164e72d91fe7e8ba4", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // xfail-test\n+// xfail-fast\n extern mod std;\n use std::arc;\n fn dispose(+_x: arc::ARC<bool>) unsafe { }"}, {"sha": "72299e2b329c1e52878f8f40c6cb6a012a8b4176", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,9 +10,6 @@\n \n // Binop corner cases\n \n-extern mod std;\n-use cast::reinterpret_cast;\n-\n fn test_nil() {\n     assert (() == ());\n     assert (!(() != ()));\n@@ -66,9 +63,9 @@ fn test_box() {\n }\n \n fn test_ptr() unsafe {\n-    let p1: *u8 = cast::reinterpret_cast(&0);\n-    let p2: *u8 = cast::reinterpret_cast(&0);\n-    let p3: *u8 = cast::reinterpret_cast(&1);\n+    let p1: *u8 = core::cast::reinterpret_cast(&0);\n+    let p2: *u8 = core::cast::reinterpret_cast(&0);\n+    let p3: *u8 = core::cast::reinterpret_cast(&1);\n \n     assert p1 == p2;\n     assert p1 != p3;\n@@ -113,8 +110,8 @@ fn test_class() {\n   \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&q))),\n-         (cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&r))));\n+         (core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&q))),\n+         (core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&r))));\n   }\n   assert(q == r);\n   r.y = 17;"}, {"sha": "ff0de7a469660a9e4be4a5a101280a78939dbcf1", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "93ab2ba2c4134a280518d14f822d900eba46b72f", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ptr::to_uint;\n-\n fn borrow(x: &int, f: fn(x: &int)) {\n     f(x)\n }\n@@ -18,11 +16,11 @@ fn test1(x: @~int) {\n     // Right now, at least, this induces a copy of the unique pointer:\n     do borrow({*x}) |p| {\n         let x_a = ptr::addr_of(&(**x));\n-        assert (x_a as uint) != to_uint(p);\n+        assert (x_a as uint) != ptr::to_uint(p);\n         assert unsafe{*x_a} == *p;\n     }\n }\n \n fn main() {\n     test1(@~22);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3eaf273a5785e9a1c3b18fc3192f90508c161a9a", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dvec::DVec;\n-\n fn foo() -> int { 22 }\n \n fn main() {\n-    let x = DVec::<@fn() -> int>();\n+    let x = dvec::DVec::<@fn() -> int>();\n     x.push(foo);\n     assert (x[0])() == 22;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c82fc0bcd6860a0238204c64571bc03f3b44bdc6", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags:-Z no-opt\n-use comm::*;\n \n // This test has to be setup just so to trigger\n // the condition which was causing us a crash.\n@@ -25,9 +24,9 @@ use comm::*;\n // course preferable, as the value itself is\n // irrelevant).\n \n-fn foo(&&x: ()) -> Port<()> {\n-    let p = Port();\n-    let c = Chan(&p);\n+fn foo(&&x: ()) -> core::comm::Port<()> {\n+    let p = core::comm::Port();\n+    let c = core::comm::Chan(&p);\n     do task::spawn() |copy c, copy x| {\n         c.send(x);\n     }"}, {"sha": "b88799c4475d37ac05cdc6d76e5f1cd0f61dd5e8", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,38 +10,32 @@\n \n // Issue #763\n \n-extern mod std;\n-use comm::Chan;\n-use comm::send;\n-use comm::Port;\n-use comm::recv;\n+enum request { quit, close(core::comm::Chan<bool>), }\n \n-enum request { quit, close(Chan<bool>), }\n+type ctx = core::comm::Chan<request>;\n \n-type ctx = Chan<request>;\n-\n-fn request_task(c: Chan<ctx>) {\n-    let p = Port();\n-    send(c, Chan(&p));\n+fn request_task(c: core::comm::Chan<ctx>) {\n+    let p = core::comm::Port();\n+    core::comm::send(c, core::comm::Chan(&p));\n     let mut req: request;\n-    req = recv(p);\n+    req = core::comm::recv(p);\n     // Need to drop req before receiving it again\n-    req = recv(p);\n+    req = core::comm::recv(p);\n }\n \n fn new_cx() -> ctx {\n-    let p = Port();\n-    let ch = Chan(&p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n     let t = task::spawn(|| request_task(ch) );\n     let mut cx: ctx;\n-    cx = recv(p);\n+    cx = core::comm::recv(p);\n     return cx;\n }\n \n fn main() {\n     let cx = new_cx();\n \n-    let p = Port::<bool>();\n-    send(cx, close(Chan(&p)));\n-    send(cx, quit);\n+    let p = core::comm::Port::<bool>();\n+    core::comm::send(cx, close(core::comm::Chan(&p)));\n+    core::comm::send(cx, quit);\n }"}, {"sha": "b3e85c518956efbcdea119dd8102a290c3eb2c29", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "cae462c4d5d930f3467adf00409b05376a12612c", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,23 +10,18 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use comm::Chan;\n-use comm::send;\n-use comm::recv;\n-\n fn main() {\n     let p = comm::Port();\n-    let ch = comm::Chan(&p);\n+    let ch = core::comm::Chan(&p);\n     let t = task::spawn(|| child(ch) );\n-    let y = recv(p);\n+    let y = core::comm::recv(p);\n     error!(\"received\");\n     log(error, y);\n     assert (y == 10);\n }\n \n-fn child(c: Chan<int>) {\n+fn child(c: core::comm::Chan<int>) {\n     error!(\"sending\");\n-    send(c, 10);\n+    core::comm::send(c, 10);\n     error!(\"value sent\");\n }"}, {"sha": "5ddea6055870443ff186044cff88934194ff5b87", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "a78ca37172b28d94220033adf2787f614536786d", "filename": "src/test/run-pass/core-export-f64-sqrt.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,11 +10,9 @@\n \n // Regression test that f64 exports things properly\n \n-use io::println;\n-\n fn main() {\n \n     let digits: uint = 10 as uint;\n \n-    println(float::to_str(f64::sqrt(42.0f64) as float, digits));\n-}\n\\ No newline at end of file\n+    core::io::println(float::to_str(f64::sqrt(42.0f64) as float, digits));\n+}"}, {"sha": "4d1ad84225d4e4bb0a14e96b2b7c75015388ac37", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,19 +10,13 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use comm::Port;\n-use comm::Chan;\n-use comm::send;\n-use comm::recv;\n-\n fn main() {\n-    let po = Port();\n-    let ch = Chan(&po);\n-    send(ch, 10);\n-    let i = recv(po);\n+    let po = core::comm::Port();\n+    let ch = core::comm::Chan(&po);\n+    core::comm::send(ch, 10);\n+    let i = core::comm::recv(po);\n     assert (i == 10);\n-    send(ch, 11);\n-    let j = recv(po);\n+    core::comm::send(ch, 11);\n+    let j = core::comm::recv(po);\n     assert (j == 11);\n }"}, {"sha": "f569e9116e39a963b4808e4d0a41e9a27fe19dcc", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dvec::DVec;\n-\n fn main() {\n-    let d = DVec();\n+    let d = dvec::DVec();\n     d.push(3);\n     d.push(4);\n     assert d.get() == ~[3, 4];"}, {"sha": "5f547e09c8951eb445dfd1a657d65b63fc1d7f87", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,7 +17,7 @@\n \n mod foo {\n     #[legacy_exports];\n-    use bar::*;\n+    use foo::bar::*;\n     mod bar {\n         #[legacy_exports];\n         const a : int = 10;"}, {"sha": "4c0287843fc05a322787fa7a2a4b60da5e08a5a6", "filename": "src/test/run-pass/export-glob.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-glob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,8 +17,9 @@\n \n mod foo {\n     #[legacy_exports];\n-    use bar::*;\n+    use foo::bar::*;\n     export a;\n+    export bar;\n     mod bar {\n         #[legacy_exports];\n         const a : int = 10;"}, {"sha": "c9d7fe4d6b9df918ae86ca25332282d4741aeed0", "filename": "src/test/run-pass/export-multi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-multi.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "badff7bdfd69adbee6be2eebbc8ce0e1eb9c4165", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "166625ce1a819946c07c7e0b09c1412bd355cc09", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "66e48d1e7a95c483e803b6515c02081269b4340f", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,5 +1,3 @@\n-use option::*;\n-\n enum Q { R(Option<uint>) }\n \n fn xyzzy(q: Q) -> uint {\n@@ -12,4 +10,4 @@ fn xyzzy(q: Q) -> uint {\n \n fn main() {\n     assert xyzzy(R(Some(5))) == 0;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "9a3b67e42dc7724c982a0f78f1e07861e066c014", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -16,8 +18,6 @@\n \n extern mod std;\n \n-use option::Some;\n-use option::None;\n use std::map;\n use std::map::HashMap;\n use comm::Chan;"}, {"sha": "9106f4a5e750f736cd32e67cb99524885f92f009", "filename": "src/test/run-pass/import-from-foreign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from-foreign.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "390ccf35e376b793153af5c5a63342bba93c8a45", "filename": "src/test/run-pass/import-from.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-from.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "5297ee61d202014e4fb70603d28532140810918a", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "32770f39c0ec55bdc3b10b64362e831cd4fd52c7", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "0d3d08b3a39ac466a760cdd4b0674e79bf2c7de9", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "58b45f3d5f81d724f1a4a17bf5981e440560d87b", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n fn main() {\n     use vec::to_mut;\n     log(debug, vec::len(to_mut(~[1, 2])));"}, {"sha": "4a1ad3c5100578b5d502195ec7df06208715a8b4", "filename": "src/test/run-pass/import-trailing-comma.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-trailing-comma.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "a3fdefaeba60340051a852fa0f8521c620d3e1fb", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "34f67340a28f367648d0ddb8b3c70b5506bf5058", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "b3545d9ec8c87de12c26c0897118b07d0d01054e", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "9941648c4f03d63d235facc61d1f8125176758cf", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "554aa4154b30b64a20b95e8d6d571a152b4278ca", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -11,8 +13,9 @@\n use foo::bar;\n mod foo {\n     #[legacy_exports];\n-    use zed::bar;\n+    use foo::zed::bar;\n     export bar;\n+    export zed;\n     mod zed {\n         #[legacy_exports];\n         fn bar() { debug!(\"foo\"); }"}, {"sha": "5ffbc0895bd23906fed58d2945050e73118520b8", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "579a1e093ceea8f82b6c2150bbd4ed0ba61d9fbf", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "d05e88a2b8d6a2462afb13cda8d4df0d9c184e12", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "19ce8e8d224faf510f8438f98773fe7d5b51b87b", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "8eca57eacbf72ee01afea4d5a2720278f406391d", "filename": "src/test/run-pass/issue-1112.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1112.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,9 +11,6 @@\n // Issue #1112\n // Alignment of interior pointers to dynamic-size types\n \n-extern mod std;\n-use ptr::addr_of;\n-\n type x<T> = {\n     a: T,\n     b: u8,\n@@ -44,4 +41,4 @@ fn bar<T>(x: x<T>) {\n     assert x.e == 11u16;\n     assert x.f == 12u8;\n     assert x.g == 13u8;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "72ce678cd2384544c2477355a3f2728c79e2c307", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "05c2595931eb1d2ce08b263fc3327a89f6e0a53d", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -36,4 +38,4 @@ fn main() {\n   let mut y: int = 5;\n   let x: &mut int = &mut y;\n   assert (lgamma(1.0 as c_double, x) == 0.0 as c_double);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "eb7506aa3d28e36e07a0bc725037be980fa73250", "filename": "src/test/run-pass/issue-2383.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2383.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2383.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "7cf681c9f94efbab299aee2da506a19b9ce5670c", "filename": "src/test/run-pass/issue-2445.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2445.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2445.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dvec::DVec;\n-\n struct c1<T: Copy> {\n     x: T,\n }"}, {"sha": "a8412aacee9816529c2be7d5bc8e5200c2bf2083", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "c79b59f7cd99d36a09b505ef5e8bc4696c694438", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "cb81dad98faa5f079a2c6383cfc1a5a44c1a3d52", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "a21cad8fd3939b6cf8488d315a09d312873dec3c", "filename": "src/test/run-pass/issue-2895.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2895.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use sys::size_of;\n-extern mod std;\n-\n struct Cat {\n     x: int\n }\n@@ -25,12 +22,12 @@ impl Kitty : Drop {\n \n #[cfg(target_arch = \"x86_64\")]\n fn main() {\n-    assert (size_of::<Cat>() == 8 as uint);\n-    assert (size_of::<Kitty>() == 16 as uint);\n+    assert (sys::size_of::<Cat>() == 8 as uint);\n+    assert (sys::size_of::<Kitty>() == 16 as uint);\n }\n \n #[cfg(target_arch = \"x86\")]\n fn main() {\n-    assert (size_of::<Cat>() == 4 as uint);\n-    assert (size_of::<Kitty>() == 8 as uint);\n+    assert (sys::size_of::<Cat>() == 4 as uint);\n+    assert (sys::size_of::<Kitty>() == 8 as uint);\n }"}, {"sha": "506f9dfa64ee2f9d1da7e6687cccd7890d44af6e", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "04932676f3d63074f5e3db53a42473dbe4b204b1", "filename": "src/test/run-pass/issue-3026.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3026.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3026.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "74f67ff92809a81ea17c7f7d87a608ed75d1b053", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use option::*;\n-\n type Connection = fn@(~[u8]);\n \n fn f() -> Option<Connection> {"}, {"sha": "6064713b295272c73eb981abff8f10dc4677e600", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "ee68a546cafedd3353135002b5a4b3746e10c673", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "9045e3aecda3c0ccf36db6aa324caa0259bcd2c7", "filename": "src/test/run-pass/issue-3702.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-3702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3702.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,15 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use io::println;\n-\n fn main() {\n   trait Text {\n     fn to_str(&self) -> ~str;\n   }\n \n   fn to_string(t: Text) {\n-    println(t.to_str());\n+    io::println(t.to_str());\n   }\n \n }"}, {"sha": "5d267f9d91447bba2960c9be02a7a2177e0d3809", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -15,26 +15,19 @@\n    https://github.com/graydon/rust/issues/507\n */\n \n-extern mod std;\n+fn grandchild(c: core::comm::Chan<int>) { core::comm::send(c, 42); }\n \n-use comm::Chan;\n-use comm::send;\n-use comm::Port;\n-use comm::recv;\n-\n-fn grandchild(c: Chan<int>) { send(c, 42); }\n-\n-fn child(c: Chan<int>) {\n+fn child(c: core::comm::Chan<int>) {\n     task::spawn(|| grandchild(c) )\n }\n \n fn main() {\n-    let p = comm::Port();\n-    let ch = Chan(&p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n \n     task::spawn(|| child(ch) );\n \n-    let x: int = recv(p);\n+    let x: int = core::comm::recv(p);\n \n     log(debug, x);\n "}, {"sha": "bac6dc67ac2bf84b4af6dda6d653c091a8d9abca", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,53 +8,47 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use comm::Chan;\n-use comm::Port;\n-use comm::recv;\n-use comm::send;\n-\n enum msg { closed, received(~[u8]), }\n \n-fn producer(c: Chan<~[u8]>) {\n-    send(c, ~[1u8, 2u8, 3u8, 4u8]);\n+fn producer(c: core::comm::Chan<~[u8]>) {\n+    core::comm::send(c, ~[1u8, 2u8, 3u8, 4u8]);\n     let empty: ~[u8] = ~[];\n-    send(c, empty);\n+    core::comm::send(c, empty);\n }\n \n-fn packager(cb: Chan<Chan<~[u8]>>, msg: Chan<msg>) {\n-    let p: Port<~[u8]> = Port();\n-    send(cb, Chan(&p));\n+fn packager(cb: core::comm::Chan<core::comm::Chan<~[u8]>>, msg: core::comm::Chan<msg>) {\n+    let p: core::comm::Port<~[u8]> = core::comm::Port();\n+    core::comm::send(cb, core::comm::Chan(&p));\n     loop {\n         debug!(\"waiting for bytes\");\n-        let data = recv(p);\n+        let data = core::comm::recv(p);\n         debug!(\"got bytes\");\n         if vec::len(data) == 0u {\n             debug!(\"got empty bytes, quitting\");\n             break;\n         }\n         debug!(\"sending non-empty buffer of length\");\n         log(debug, vec::len(data));\n-        send(msg, received(data));\n+        core::comm::send(msg, received(data));\n         debug!(\"sent non-empty buffer\");\n     }\n     debug!(\"sending closed message\");\n-    send(msg, closed);\n+    core::comm::send(msg, closed);\n     debug!(\"sent closed message\");\n }\n \n fn main() {\n-    let p: Port<msg> = Port();\n-    let ch = Chan(&p);\n-    let recv_reader: Port<Chan<~[u8]>> = Port();\n-    let recv_reader_chan = Chan(&recv_reader);\n+    let p: core::comm::Port<msg> = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n+    let recv_reader: core::comm::Port<core::comm::Chan<~[u8]>> = core::comm::Port();\n+    let recv_reader_chan = core::comm::Chan(&recv_reader);\n     let pack = task::spawn(|| packager(recv_reader_chan, ch) );\n \n-    let source_chan: Chan<~[u8]> = recv(recv_reader);\n+    let source_chan: core::comm::Chan<~[u8]> = core::comm::recv(recv_reader);\n     let prod = task::spawn(|| producer(source_chan) );\n \n     loop {\n-        let msg = recv(p);\n+        let msg = core::comm::recv(p);\n         match msg {\n           closed => { debug!(\"Got close message\"); break; }\n           received(data) => {"}, {"sha": "2654a7385993f09637f3a1e37d943a772956e657", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,20 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use comm::*;\n-use task::spawn;\n-\n fn a() {\n     fn doit() {\n-        fn b(c: Chan<Chan<int>>) {\n-            let p = Port();\n-            send(c, Chan(&p));\n+        fn b(c: core::comm::Chan<core::comm::Chan<int>>) {\n+            let p = core::comm::Port();\n+            core::comm::send(c, core::comm::Chan(&p));\n         }\n-        let p = Port();\n-        let ch = Chan(&p);\n-        spawn(|| b(ch) );\n-        recv(p);\n+        let p = core::comm::Port();\n+        let ch = core::comm::Chan(&p);\n+        task::spawn(|| b(ch) );\n+        core::comm::recv(p);\n     }\n     let mut i = 0;\n     while i < 100 {\n@@ -32,6 +28,6 @@ fn a() {\n \n fn main() {\n     for iter::repeat(100u) {\n-        spawn(|| a() );\n+        task::spawn(|| a() );\n     }\n }"}, {"sha": "4a33d770872b03718263aa142e6f7baf2edc71b5", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,20 +1,13 @@\n-extern mod std;\n-\n-use comm::Chan;\n-use comm::Port;\n-use comm::send;\n-use comm::recv;\n-\n-fn producer(c: Chan<~[u8]>) {\n-    send(c,\n+fn producer(c: core::comm::Chan<~[u8]>) {\n+    core::comm::send(c,\n          ~[1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);\n }\n \n fn main() {\n-    let p: Port<~[u8]> = Port();\n-    let ch = Chan(&p);\n+    let p: core::comm::Port<~[u8]> = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n     let prod = task::spawn(|| producer(ch) );\n \n-    let data: ~[u8] = recv(p);\n+    let data: ~[u8] = core::comm::recv(p);\n }"}, {"sha": "a093b89b70f4b99d24a2302ee2c7a37028da0e3e", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,26 +9,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern mod std;\n-use comm::*;\n-\n fn main() {\n-    let p = Port();\n-    let ch = Chan(&p);\n+    let p = core::comm::Port();\n+    let ch = core::comm::Chan(&p);\n     let mut y: int;\n \n     task::spawn(|| child(ch) );\n-    y = recv(p);\n+    y = core::comm::recv(p);\n     debug!(\"received 1\");\n     log(debug, y);\n     assert (y == 10);\n \n     task::spawn(|| child(ch) );\n-    y = recv(p);\n+    y = core::comm::recv(p);\n     debug!(\"received 2\");\n     log(debug, y);\n     assert (y == 10);\n }\n \n-fn child(c: Chan<int>) { send(c, 10); }\n+fn child(c: core::comm::Chan<int>) { core::comm::send(c, 10); }"}, {"sha": "af2fe623c447d2998eb6a8cf58e6a204b953fc03", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "94edb596b5f73f3695324642af57cd8d4c06f1a4", "filename": "src/test/run-pass/mod-merge-hack-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-merge-hack-template.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-test not a test. used by mod-merge-hack.rs\n \n-use T = inst::T;\n+use T = self::inst::T;\n \n pub const bits: uint = inst::bits;\n pub pure fn min(x: T, y: T) -> T { if x < y { x } else { y } }"}, {"sha": "dd5f7484f10374917fdf6b36bb1329abe87bad96", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "450b697bfb1c3f594cc0d1724051ab9056c55705", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -11,9 +11,6 @@\n \n \n // a bug was causing this to complain about leaked memory on exit\n-extern mod std;\n-use option::Some;\n-use option::None;\n \n enum t { foo(int, uint), bar(int, Option<int>), }\n "}, {"sha": "620bd04905324ca52510df508a30416043cc9d1c", "filename": "src/test/run-pass/non-boolean-pure-fns.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon-boolean-pure-fns.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "2f863a4211b9e25f4b6f0778db8d2f724407e906", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "c2d4be04191bc00b14f11cc8158047a0b576a530", "filename": "src/test/run-pass/pipe-detect-term.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-detect-term.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "d7d0ccfc40440a39d323fc7decbd82d63a2a2bd4", "filename": "src/test/run-pass/pipe-peek.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-peek.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "8589bbb8e257f06c5a2b9388f0dd34f0072c3e9a", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "88db8953b8c333f3ec9567f47bb378eacca7965e", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "173325834c068d1f5ff72e228f156eda9f29ea1e", "filename": "src/test/run-pass/pipe-presentation-examples.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-presentation-examples.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "d14b89aff7750e977c604ca758ea134cdd55dfe1", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "4a6e7b4ce36a8faf7c49f0e4f6e577ed788f6f4e", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -29,4 +31,4 @@ fn main() {\n     sleep(iotask, 500);\n     \n     signal(move c);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "71023d6c7f48b5d90683e3b28fd952bb0d95e4c6", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "b59ce4d9020e77e0c1671dba1bc0bcac3518fcf8", "filename": "src/test/run-pass/reexport-star.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Freexport-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Freexport-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexport-star.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "0fd1b361b2973e6f27f21db7a7f0dfcf358e3e8e", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "054c29c2a05714170258ee603970b0b03fb58e35", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc, sys, cast;\n-\n enum arena = ();\n \n type bcx = {"}, {"sha": "6fde5bef741360cc57a227d9342c9013e6b8f8d6", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -12,13 +12,8 @@\n \n // Regression tests for circular_buffer when using a unit\n // that has a size that is not a power of two\n-extern mod std;\n-use comm::Port;\n-use comm::Chan;\n-use comm::send;\n-use comm::recv;\n \n-// A 12-byte unit to send over the channel\n+// A 12-byte unit to core::comm::send over the channel\n type record = {val1: u32, val2: u32, val3: u32};\n \n \n@@ -27,52 +22,52 @@ type record = {val1: u32, val2: u32, val3: u32};\n // power of two so needs to be rounded up. Don't trigger any\n // assertions.\n fn test_init() {\n-    let myport = Port();\n-    let mychan = Chan(&myport);\n+    let myport = core::comm::Port();\n+    let mychan = core::comm::Chan(&myport);\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-    send(mychan, val);\n+    core::comm::send(mychan, val);\n }\n \n \n // Dump lots of items into the channel so it has to grow.\n // Don't trigger any assertions.\n fn test_grow() {\n-    let myport = Port();\n-    let mychan = Chan(&myport);\n+    let myport = core::comm::Port();\n+    let mychan = core::comm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-        comm::send(mychan, val);\n+        core::comm::send(mychan, val);\n     }\n }\n \n \n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n-    let myport = Port();\n-    let mychan = Chan(&myport);\n-    send(mychan, 0i8);\n-    let x = recv(myport);\n+    let myport = core::comm::Port();\n+    let mychan = core::comm::Chan(&myport);\n+    core::comm::send(mychan, 0i8);\n+    let x = core::comm::recv(myport);\n }\n \n fn test_shrink2() {\n-    let myport = Port();\n-    let mychan = Chan(&myport);\n+    let myport = core::comm::Port();\n+    let mychan = core::comm::Chan(&myport);\n     for uint::range(0u, 100u) |_i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-        send(mychan, val);\n+        core::comm::send(mychan, val);\n     }\n-    for uint::range(0u, 100u) |_i| { let x = recv(myport); }\n+    for uint::range(0u, 100u) |_i| { let x = core::comm::recv(myport); }\n }\n \n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n-    let myport = Port();\n-    let mychan = Chan(&myport);\n+    let myport = core::comm::Port();\n+    let mychan = core::comm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n-        send(mychan, val);\n-        let x = recv(myport);\n+        core::comm::send(mychan, val);\n+        let x = core::comm::recv(myport);\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n@@ -83,16 +78,16 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = Port::<record>();\n-    let mychan = Chan(&myport);\n+    let myport = core::comm::Port::<record>();\n+    let mychan = core::comm::Chan(&myport);\n     for uint::range(0u, 10u) |j| {\n         for uint::range(0u, 10u) |i| {\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n-            send(mychan, val);\n+            core::comm::send(mychan, val);\n         }\n         for uint::range(0u, 10u) |i| {\n-            let x = recv(myport);\n+            let x = core::comm::recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);"}, {"sha": "ed45627a3798547d1adb0e30f9ea04d00cbdb2ba", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,8 +10,6 @@\n \n // Tests of the runtime's scheduler interface\n \n-use ptr::is_null;\n-\n type sched_id = int;\n type task_id = *libc::c_void;\n "}, {"sha": "86e6b7f0f50fe77c66ea6a878c14faa923beb96b", "filename": "src/test/run-pass/self-shadowing-import.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-shadowing-import.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "75d526aa2c787adb96f5028ae93cc5f1202b79d9", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use task::*;\n-use comm::*;\n-\n struct test {\n   f: int,\n }\n@@ -26,12 +23,12 @@ fn test(f: int) -> test {\n }\n \n fn main() {\n-    let p = Port();\n-    let c = Chan(&p);\n+    let p = core::comm::Port();\n+    let c = core::comm::Chan(&p);\n \n-    do spawn() {\n-        let p = Port();\n-        c.send(Chan(&p));\n+    do task::spawn() {\n+        let p = core::comm::Port();\n+        c.send(core::comm::Chan(&p));\n \n         let _r = p.recv();\n     }"}, {"sha": "664ba09ae4b10fb161e327786761027ce51237f6", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,16 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use comm::Chan;\n-use comm::send;\n-use comm::Port;\n-\n // tests that ctrl's type gets inferred properly\n type command<K: Send, V: Send> = {key: K, val: V};\n \n-fn cache_server<K: Send, V: Send>(c: Chan<Chan<command<K, V>>>) {\n-    let ctrl = Port();\n-    send(c, Chan(&ctrl));\n+fn cache_server<K: Send, V: Send>(c: core::comm::Chan<core::comm::Chan<command<K, V>>>) {\n+    let ctrl = core::comm::Port();\n+    core::comm::send(c, core::comm::Chan(&ctrl));\n }\n fn main() { }"}, {"sha": "01a480ff25d9affc9a862aabc959097113a8e23b", "filename": "src/test/run-pass/sendfn-deep-copy.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-deep-copy.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n-use comm::Chan;\n-use comm::send;\n-\n fn main() { test05(); }\n \n fn mk_counter<A:Copy>() -> fn~(A) -> (A,uint) {"}, {"sha": "504d7948ffc1592fd90be02c8c4cb9c2f590186b", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n-use comm::Chan;\n-use comm::send;\n-\n fn main() { test05(); }\n \n fn test05_start(&&f: fn~(int)) {"}, {"sha": "4139aedf88137e42cde5e72874e6e6215ad33610", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "5ae5bbaeec90964c20c307a40cb5b9dd5d531340", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,9 +10,6 @@\n // except according to those terms.\n \n \n-extern mod std;\n-use task::yield;\n-\n fn x(s: ~str, n: int) {\n     log(debug, s);\n     log(debug, n);\n@@ -23,5 +20,5 @@ fn main() {\n     task::spawn(|| x(~\"hello from second spawned fn\", 66) );\n     task::spawn(|| x(~\"hello from third spawned fn\", 67) );\n     let mut i: int = 30;\n-    while i > 0 { i = i - 1; debug!(\"parent sleeping\"); yield(); }\n+    while i > 0 { i = i - 1; debug!(\"parent sleeping\"); task::yield(); }\n }"}, {"sha": "fb3dc1ff74100c2bd444ddbe173d646f2fd47f81", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,11 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-extern mod std;\n-use task::spawn;\n-\n-fn main() { spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n+fn main() { task::spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n \n fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;"}, {"sha": "ff4f5bfe62fb344a6c66646b53b2c775562436c0", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "767887319470df517e14f983de0316b8489f4929", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,6 @@\n // except according to those terms.\n \n \n-extern mod std;\n use pipes::send;\n use pipes::Port;\n use pipes::recv;"}, {"sha": "dc82ae214dcd466e64159a08ab91e31718653848", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n use pipes::send;\n \n fn main() { test00(); }"}, {"sha": "cad0f4f1ddeec9645f804e0712df3882d27dd13c", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n use pipes::send;\n use pipes::Chan;\n use pipes::recv;"}, {"sha": "5147c2ba6e49179785a8f08ce4a32ac19e764b5b", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,14 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n-use task::task;\n-use comm::Chan;\n-use comm::Port;\n-use comm::send;\n-use comm::recv;\n-\n fn main() {\n     test00();\n     // test01();\n@@ -25,12 +17,12 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(ch: Chan<int>, message: int, count: int) {\n+fn test00_start(ch: core::comm::Chan<int>, message: int, count: int) {\n     debug!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n         debug!(\"Sending Message\");\n-        send(ch, message + 0);\n+        core::comm::send(ch, message + 0);\n         i = i + 1;\n     }\n     debug!(\"Ending test00_start\");\n@@ -41,8 +33,8 @@ fn test00() {\n     let number_of_messages: int = 4;\n     debug!(\"Creating tasks\");\n \n-    let po = Port();\n-    let ch = Chan(&po);\n+    let po = core::comm::Port();\n+    let ch = core::comm::Chan(&po);\n \n     let mut i: int = 0;\n \n@@ -58,7 +50,7 @@ fn test00() {\n     let mut sum: int = 0;\n     for results.each |r| {\n         i = 0;\n-        while i < number_of_messages { sum += recv(po); i = i + 1; }\n+        while i < number_of_messages { sum += core::comm::recv(po); i = i + 1; }\n     }\n \n     for results.each |r| { r.recv(); }\n@@ -71,19 +63,19 @@ fn test00() {\n }\n \n fn test01() {\n-    let p = Port();\n+    let p = core::comm::Port();\n     debug!(\"Reading from a port that is never written to.\");\n-    let value: int = recv(p);\n+    let value: int = core::comm::recv(p);\n     log(debug, value);\n }\n \n fn test02() {\n-    let p = Port();\n-    let c = Chan(&p);\n+    let p = core::comm::Port();\n+    let c = core::comm::Chan(&p);\n     debug!(\"Writing to a local task channel.\");\n-    send(c, 42);\n+    core::comm::send(c, 42);\n     debug!(\"Reading from a local task port.\");\n-    let value: int = recv(p);\n+    let value: int = core::comm::recv(p);\n     log(debug, value);\n }\n \n@@ -101,22 +93,22 @@ fn test04() {\n     debug!(\"Finishing up.\");\n }\n \n-fn test05_start(ch: Chan<int>) {\n-    send(ch, 10);\n-    send(ch, 20);\n-    send(ch, 30);\n-    send(ch, 30);\n-    send(ch, 30);\n+fn test05_start(ch: core::comm::Chan<int>) {\n+    core::comm::send(ch, 10);\n+    core::comm::send(ch, 20);\n+    core::comm::send(ch, 30);\n+    core::comm::send(ch, 30);\n+    core::comm::send(ch, 30);\n }\n \n fn test05() {\n-    let po = comm::Port();\n-    let ch = Chan(&po);\n+    let po = core::comm::Port();\n+    let ch = core::comm::Chan(&po);\n     task::spawn(|| test05_start(ch) );\n     let mut value: int;\n-    value = recv(po);\n-    value = recv(po);\n-    value = recv(po);\n+    value = core::comm::recv(po);\n+    value = core::comm::recv(po);\n+    value = core::comm::recv(po);\n     log(debug, value);\n }\n "}, {"sha": "2fe24a7b38e33c0bca7d46c0656c4a3cbf41899a", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -13,8 +13,6 @@\n // A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n-extern mod std;\n-\n struct notify {\n     ch: comm::Chan<bool>, v: @mut bool,\n }"}, {"sha": "7ef94afa54fdd9d735f9b53ec7af7d0082a73046", "filename": "src/test/run-pass/task-killjoin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -15,8 +15,6 @@\n // task will kill the supervising task, waking it up. The supervising task no\n // longer needs to be wakened when the supervised task exits.\n \n-extern mod std;\n-\n fn supervised() {\n     // Yield to make sure the supervisor joins before we fail. This is\n     // currently not needed because the supervisor runs first, but I can"}, {"sha": "52785ed12d40ad4f43f1d0617183e200577199b1", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "43077a7b2e60765e554b985c600087f451cbcace", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "ae72fce4f94d0efe98b84909ed258c56a13934b5", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -103,4 +105,4 @@ fn test_float_ext<T:FloatExt>(n: T) { io::println(fmt!(\"%?\", n < n)) }\n \n fn main() {\n     test_float_ext(1f32);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "2d3bb42ad4c7654964974454dabc439463d0c206", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -8,15 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use sys::refcount;\n-\n fn main() unsafe {\n     let i = ~@1;\n     let j = ~@2;\n-    let rc1 = refcount(*i);\n+    let rc1 = sys::refcount(*i);\n     let j = copy i;\n-    let rc2 = refcount(*i);\n+    let rc2 = sys::refcount(*i);\n     error!(\"rc1: %u rc2: %u\", rc1, rc2);\n     assert rc1 + 1u == rc2;\n }"}, {"sha": "dc09d6b44487f9abfcf550dffa471adea1bf8261", "filename": "src/test/run-pass/use-mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "d58c168e7cd3262cdf9a3391e683c052d316d9b6", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -22,4 +24,4 @@ mod baz {\n     use x = core::str;\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "2d73e67213185042522d8accfd6f131de96efdec", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,20 +9,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use task::*;\n-\n fn main() {\n     let mut result = None;\n     task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n-    yield();\n+    task::yield();\n     error!(\"2\");\n-    yield();\n+    task::yield();\n     error!(\"3\");\n     option::unwrap(move result).recv();\n }\n \n fn child() {\n-    error!(\"4\"); yield(); error!(\"5\"); yield(); error!(\"6\");\n+    error!(\"4\"); task::yield(); error!(\"5\"); task::yield(); error!(\"6\");\n }"}, {"sha": "34e2f7b3c5d736e1692f53cab745edf41ea3ead0", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,14 +9,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-use task::*;\n-\n fn main() {\n     let mut result = None;\n     task::task().future_result(|+r| { result = Some(move r); }).spawn(child);\n     error!(\"1\");\n-    yield();\n+    task::yield();\n     option::unwrap(move result).recv();\n }\n "}, {"sha": "85a8befd3baa0cb34e724a843b4ba9df7810832e", "filename": "src/test/run-pass/yield2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fyield2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield2.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -9,8 +9,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod std;\n-\n fn main() {\n     let mut i: int = 0;\n     while i < 100 { i = i + 1; log(error, i); task::yield(); }"}, {"sha": "c5a3c8baa3dabbdd7f3addf4b405f044db698e9c", "filename": "src/test/run-pass/zip-same-length.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2e4c37ce01a98c768a986b0b87a6e93ef72699/src%2Ftest%2Frun-pass%2Fzip-same-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fzip-same-length.rs?ref=4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "patch": "@@ -10,7 +10,6 @@\n \n // In this case, the code should compile and should\n // succeed at runtime\n-extern mod std;\n use vec::{head, is_not_empty, last, same_length, zip};\n \n fn enum_chars(start: u8, end: u8) -> ~[char] {"}]}