{"sha": "e234dfa63ea36ac2d9ecf245e681b1dbac644140", "node_id": "C_kwDOAAsO6NoAKGUyMzRkZmE2M2VhMzZhYzJkOWVjZjI0NWU2ODFiMWRiYWM2NDQxNDA", "commit": {"author": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-14T09:26:48Z"}, "committer": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-14T09:26:48Z"}, "message": "Ignoring `let_underscore_untyped` warnings in code from proc macros", "tree": {"sha": "5b72f6ae1c51cdafe3cfa540b77e05c21c36a7f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b72f6ae1c51cdafe3cfa540b77e05c21c36a7f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e234dfa63ea36ac2d9ecf245e681b1dbac644140", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSUUq9F5en84QJ6JSz95O9WxHnTCAUCZGCpWAAKCRD95O9WxHnT\nCC2eAP9h6Vl0aN9+TBlqyBfa8AwdnR8/irZA5HbL2XWCvm7P3QEAkO5AEWUHwMx6\nyjXg3iETrbG5Zc/tGm/LQEQahnPXtwQ=\n=8Kti\n-----END PGP SIGNATURE-----", "payload": "tree 5b72f6ae1c51cdafe3cfa540b77e05c21c36a7f9\nparent a167973e8171bce22ded246283faaf80b729382d\nauthor Renato Lochetti <renato.lochetti@gmail.com> 1684056408 +0100\ncommitter Renato Lochetti <renato.lochetti@gmail.com> 1684056408 +0100\n\nIgnoring `let_underscore_untyped` warnings in code from proc macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e234dfa63ea36ac2d9ecf245e681b1dbac644140", "html_url": "https://github.com/rust-lang/rust/commit/e234dfa63ea36ac2d9ecf245e681b1dbac644140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e234dfa63ea36ac2d9ecf245e681b1dbac644140/comments", "author": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a167973e8171bce22ded246283faaf80b729382d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a167973e8171bce22ded246283faaf80b729382d", "html_url": "https://github.com/rust-lang/rust/commit/a167973e8171bce22ded246283faaf80b729382d"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "20a675d053e87f640a7f38cddafce1be102a4d48", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e234dfa63ea36ac2d9ecf245e681b1dbac644140/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e234dfa63ea36ac2d9ecf245e681b1dbac644140/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=e234dfa63ea36ac2d9ecf245e681b1dbac644140", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_from_proc_macro;\n use clippy_utils::ty::{implements_trait, is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use rustc_hir::{ExprKind, Local, PatKind};\n@@ -138,7 +139,7 @@ const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &Local<'tcx>) {\n         if !in_external_macro(cx.tcx.sess, local.span)\n             && let PatKind::Wild = local.pat.kind\n             && let Some(init) = local.init\n@@ -191,15 +192,20 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if local.pat.default_binding_modes && local.ty.is_none() {\n                 // When `default_binding_modes` is true, the `let` keyword is present.\n \n-\t\t\t\t// Ignore function calls that return impl traits...\n-\t\t\t\tif let Some(init) = local.init &&\n-\t\t\t\tmatches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n-\t\t\t\t\tlet expr_ty = cx.typeck_results().expr_ty(init);\n-\t\t\t\t\tif expr_ty.is_impl_trait() {\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n+\t\t\t\tif let Some(init) = local.init {\n+                    // Ignore function calls that return impl traits...\n+                    if matches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n+                        let expr_ty = cx.typeck_results().expr_ty(init);\n+                        if expr_ty.is_impl_trait() {\n+                            return;\n+                        }\n+                    }\n+    \n+                    // Ignore if it is from a procedural macro...\n+                    if is_from_proc_macro(cx, init) {\n+                        return;\n+                    }\n+                }\n \n \t\t\t\tspan_lint_and_help(\n                     cx,"}, {"sha": "05ecd9b281ab286b6ce2dab16f0cf4e4e62e7b44", "filename": "tests/ui/let_underscore_untyped.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e234dfa63ea36ac2d9ecf245e681b1dbac644140/tests%2Fui%2Flet_underscore_untyped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e234dfa63ea36ac2d9ecf245e681b1dbac644140/tests%2Fui%2Flet_underscore_untyped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.rs?ref=e234dfa63ea36ac2d9ecf245e681b1dbac644140", "patch": "@@ -1,6 +1,12 @@\n+//@aux-build: proc_macros.rs\n+\n #![allow(unused)]\n #![warn(clippy::let_underscore_untyped)]\n \n+extern crate proc_macros;\n+use proc_macros::with_span;\n+\n+use clippy_utils::is_from_proc_macro;\n use std::future::Future;\n use std::{boxed::Box, fmt::Display};\n \n@@ -32,6 +38,14 @@ fn g() -> impl Fn() {\n     || {}\n }\n \n+with_span!(\n+    span\n+\n+    fn dont_lint_proc_macro() {\n+        let _ = a();\n+    }\n+);\n+\n fn main() {\n     let _ = a();\n     let _ = b(1);"}, {"sha": "bbf2508af10b7439bf6e8cd7cda3b5bc73511125", "filename": "tests/ui/let_underscore_untyped.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e234dfa63ea36ac2d9ecf245e681b1dbac644140/tests%2Fui%2Flet_underscore_untyped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e234dfa63ea36ac2d9ecf245e681b1dbac644140/tests%2Fui%2Flet_underscore_untyped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_untyped.stderr?ref=e234dfa63ea36ac2d9ecf245e681b1dbac644140", "patch": "@@ -1,60 +1,60 @@\n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:36:5\n+  --> $DIR/let_underscore_untyped.rs:50:5\n    |\n LL |     let _ = a();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:36:10\n+  --> $DIR/let_underscore_untyped.rs:50:10\n    |\n LL |     let _ = a();\n    |          ^\n    = note: `-D clippy::let-underscore-untyped` implied by `-D warnings`\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:37:5\n+  --> $DIR/let_underscore_untyped.rs:51:5\n    |\n LL |     let _ = b(1);\n    |     ^^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:37:10\n+  --> $DIR/let_underscore_untyped.rs:51:10\n    |\n LL |     let _ = b(1);\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:39:5\n+  --> $DIR/let_underscore_untyped.rs:53:5\n    |\n LL |     let _ = d(&1);\n    |     ^^^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:39:10\n+  --> $DIR/let_underscore_untyped.rs:53:10\n    |\n LL |     let _ = d(&1);\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:40:5\n+  --> $DIR/let_underscore_untyped.rs:54:5\n    |\n LL |     let _ = e();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:40:10\n+  --> $DIR/let_underscore_untyped.rs:54:10\n    |\n LL |     let _ = e();\n    |          ^\n \n error: non-binding `let` without a type annotation\n-  --> $DIR/let_underscore_untyped.rs:41:5\n+  --> $DIR/let_underscore_untyped.rs:55:5\n    |\n LL |     let _ = f();\n    |     ^^^^^^^^^^^^\n    |\n help: consider adding a type annotation\n-  --> $DIR/let_underscore_untyped.rs:41:10\n+  --> $DIR/let_underscore_untyped.rs:55:10\n    |\n LL |     let _ = f();\n    |          ^"}]}