{"sha": "e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWIwNTc4MWY3ZmIwZjBkZmRjZDRhY2I0MzNkYmNkZTljYmI3Yjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-18T10:35:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T09:15:23Z"}, "message": "add io::Task", "tree": {"sha": "3117cbb25cca518646f03e68bd91f7dc36aea571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3117cbb25cca518646f03e68bd91f7dc36aea571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "html_url": "https://github.com/rust-lang/rust/commit/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99561cf2f20ad572c7149644a70cd7740c0f8b86", "url": "https://api.github.com/repos/rust-lang/rust/commits/99561cf2f20ad572c7149644a70cd7740c0f8b86", "html_url": "https://github.com/rust-lang/rust/commit/99561cf2f20ad572c7149644a70cd7740c0f8b86"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "c467605835ba51fcff63845676db95340f2e4518", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "patch": "@@ -4,38 +4,47 @@ use std::{\n     thread::JoinHandle,\n };\n \n-use walkdir::WalkDir;\n+use walkdir::{DirEntry, WalkDir};\n use crossbeam_channel::{Sender, Receiver};\n-use thread_worker::{WorkerHandle, Worker};\n+use thread_worker::{WorkerHandle};\n+\n+use crate::VfsRoot;\n+\n+pub(crate) enum Task {\n+    ScanRoot {\n+        root: VfsRoot,\n+        path: PathBuf,\n+        filter: Box<FnMut(&DirEntry) -> bool + Send>,\n+    },\n+}\n \n #[derive(Debug)]\n-pub struct FileEvent {\n-    pub path: PathBuf,\n-    pub kind: FileEventKind,\n+pub(crate) struct FileEvent {\n+    pub(crate) path: PathBuf,\n+    pub(crate) kind: FileEventKind,\n }\n \n #[derive(Debug)]\n-pub enum FileEventKind {\n+pub(crate) enum FileEventKind {\n     Add(String),\n }\n \n-pub(crate) type FsWorker = Worker<PathBuf, (PathBuf, Vec<FileEvent>)>;\n+pub(crate) type Worker = thread_worker::Worker<Task, (PathBuf, Vec<FileEvent>)>;\n+\n+pub(crate) fn start() -> (Worker, WorkerHandle) {\n+    thread_worker::spawn(\"vfs\", 128, |input_receiver, output_sender| {\n+        input_receiver\n+            .map(handle_task)\n+            .for_each(|it| output_sender.send(it))\n+    })\n+}\n \n-pub(crate) fn start() -> (FsWorker, WorkerHandle) {\n-    thread_worker::spawn::<PathBuf, (PathBuf, Vec<FileEvent>), _>(\n-        \"vfs\",\n-        128,\n-        |input_receiver, output_sender| {\n-            input_receiver\n-                .map(|path| {\n-                    log::debug!(\"loading {} ...\", path.as_path().display());\n-                    let events = load_root(path.as_path());\n-                    log::debug!(\"... loaded {}\", path.as_path().display());\n-                    (path, events)\n-                })\n-                .for_each(|it| output_sender.send(it))\n-        },\n-    )\n+fn handle_task(task: Task) -> (PathBuf, Vec<FileEvent>) {\n+    let Task::ScanRoot { path, .. } = task;\n+    log::debug!(\"loading {} ...\", path.as_path().display());\n+    let events = load_root(path.as_path());\n+    log::debug!(\"... loaded {}\", path.as_path().display());\n+    (path, events)\n }\n \n fn load_root(path: &Path) -> Vec<FileEvent> {"}, {"sha": "8ce6b6ee0a73e28922089b6acce5cf0d591f145e", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=e69b05781f7fb0f0dfdcd4acb433dbcde9cbb7b7", "patch": "@@ -2,8 +2,8 @@\n //!\n //! When doing analysis, we don't want to do any IO, we want to keep all source\n //! code in memory. However, the actual source code is stored on disk, so you\n-//! need to get it into the memory in the first place somehow. VFS is the\n //! component which does this.\n+//! need to get it into the memory in the first place somehow. VFS is the\n //!\n //! It also is responsible for watching the disk for changes, and for merging\n //! editor state (modified, unsaved files) with disk state.\n@@ -23,11 +23,10 @@ use std::{\n };\n \n use relative_path::RelativePathBuf;\n-use thread_worker::{WorkerHandle, Worker};\n+use thread_worker::{WorkerHandle};\n \n use crate::{\n     arena::{ArenaId, Arena},\n-    io::{FileEvent, FsWorker},\n };\n \n /// `RootFilter` is a predicate that checks if a file can belong to a root. If\n@@ -87,7 +86,7 @@ struct Vfs {\n     roots: Arena<VfsRoot, RootFilter>,\n     files: Arena<VfsFile, VfsFileData>,\n     // pending_changes: Vec<PendingChange>,\n-    worker: FsWorker,\n+    worker: io::Worker,\n     worker_handle: WorkerHandle,\n }\n "}]}