{"sha": "4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYTcxYWQzZWJlM2U4Y2QwN2UyNTVjMWE5OTdkZGEzMTQ3ZGFlMmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-29T18:44:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-29T18:44:48Z"}, "message": "Merge pull request #230 from dwrensha/cargo-miri\n\nget cargo-miri to work", "tree": {"sha": "1cfd1d7c0648c3637acab0b329cd19458c666fd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cfd1d7c0648c3637acab0b329cd19458c666fd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "html_url": "https://github.com/rust-lang/rust/commit/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8722ce8d4b66c0d7939d54c2d59502116a662a60", "url": "https://api.github.com/repos/rust-lang/rust/commits/8722ce8d4b66c0d7939d54c2d59502116a662a60", "html_url": "https://github.com/rust-lang/rust/commit/8722ce8d4b66c0d7939d54c2d59502116a662a60"}, {"sha": "7a755ce8f948ebacb0157a1213d9dc4039f87807", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a755ce8f948ebacb0157a1213d9dc4039f87807", "html_url": "https://github.com/rust-lang/rust/commit/7a755ce8f948ebacb0157a1213d9dc4039f87807"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "8b2387fa64109aeb99cf2efe390e10c62f3a71fa", "filename": "cargo-miri-test/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2FCargo.lock?ref=4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "patch": "@@ -1,4 +1,14 @@\n [root]\n name = \"cargo-miri-test\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"byteorder 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n+[[package]]\n+name = \"byteorder\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n+[metadata]\n+\"checksum byteorder 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c40977b0ee6b9885c9013cd41d9feffdd22deb3bb4dc3a71d901cc7a77de18c8\""}, {"sha": "5fbe923f23d3ba0f407451a653c13897a27debb8", "filename": "cargo-miri-test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2FCargo.toml?ref=4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "patch": "@@ -4,3 +4,4 @@ version = \"0.1.0\"\n authors = [\"Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de>\"]\n \n [dependencies]\n+byteorder = \"1.0\"\n\\ No newline at end of file"}, {"sha": "07b0e4cee4e5c596e6f6bfb5067cc682cebf3cfe", "filename": "cargo-miri-test/src/main.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/cargo-miri-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fsrc%2Fmain.rs?ref=4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "patch": "@@ -1,3 +1,9 @@\n+extern crate byteorder;\n+\n+use byteorder::{BigEndian, ByteOrder};\n+\n fn main() {\n-    assert_eq!(5, 5);\n+    let buf = &[1,2,3,4];\n+    let n = <BigEndian as ByteOrder>::read_u32(buf);\n+    assert_eq!(n, 0x01020304);\n }"}, {"sha": "6eff6650fa9c41b2cab4bb0730a6462f8611a2b4", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=4fa71ad3ebe3e8cd07e255c1a997dda3147dae2e", "patch": "@@ -44,8 +44,6 @@ fn main() {\n         return;\n     }\n \n-    let dep_path = std::env::current_dir().expect(\"current dir is not readable\").join(\"target\").join(\"debug\").join(\"deps\");\n-\n     if let Some(\"miri\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is when `cargo miri` is called\n \n@@ -84,13 +82,11 @@ fn main() {\n             let args = std::env::args().skip(skip);\n             let kind = target.kind.get(0).expect(\"badly formatted cargo metadata: target::kind is an empty array\");\n             if test && kind == \"test\" {\n-                if let Err(code) = process(vec![\"--test\".to_string(), target.name].into_iter().chain(args),\n-                                           &dep_path) {\n+                if let Err(code) = process(vec![\"--test\".to_string(), target.name].into_iter().chain(args)) {\n                     std::process::exit(code);\n                 }\n             } else if !test && kind == \"bin\" {\n-                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args),\n-                                           &dep_path) {\n+                if let Err(code) = process(vec![\"--bin\".to_string(), target.name].into_iter().chain(args)) {\n                     std::process::exit(code);\n                 }\n             }\n@@ -117,7 +113,7 @@ fn main() {\n                 .expect(\"need to specify RUST_SYSROOT env var during miri compilation, or use rustup or multirust\")\n         };\n \n-        // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+        // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n         // without having to pass --sysroot or anything\n         let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n             std::env::args().skip(1).collect()\n@@ -129,25 +125,29 @@ fn main() {\n         // interpreted but not built\n         let miri_enabled = std::env::args().any(|s| s == \"-Zno-trans\");\n \n-        if miri_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n-        }\n+        let mut command = if miri_enabled {\n+            let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n+            path.set_file_name(\"miri\");\n+            Command::new(path)\n+        } else {\n+            Command::new(\"rustc\")\n+        };\n \n-        let mut path = std::env::current_exe().expect(\"current executable path invalid\");\n-        path.set_file_name(\"miri\");\n+        args.extend_from_slice(&[\"-Z\".to_owned(), \"always-encode-mir\".to_owned()]);\n+        args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-miri\"\"#.to_owned()]);\n \n-        match Command::new(path).args(&args).status() {\n+        match command.args(&args).status() {\n             Ok(exit) => if !exit.success() {\n                 std::process::exit(exit.code().unwrap_or(42));\n             },\n-            Err(e) => panic!(\"error during miri run: {:?}\", e),\n+            Err(ref e) if miri_enabled => panic!(\"error during miri run: {:?}\", e),\n+            Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n         }\n     }\n }\n \n-fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n-    where P: AsRef<Path>,\n-          I: Iterator<Item = String>\n+fn process<I>(old_args: I) -> Result<(), i32>\n+    where I: Iterator<Item = String>\n {\n     let mut args = vec![\"rustc\".to_owned()];\n \n@@ -159,8 +159,6 @@ fn process<P, I>(old_args: I, dep_path: P) -> Result<(), i32>\n     if !found_dashes {\n         args.push(\"--\".to_owned());\n     }\n-    args.push(\"-L\".to_owned());\n-    args.push(dep_path.as_ref().to_string_lossy().into_owned());\n     args.push(\"-Zno-trans\".to_owned());\n     args.push(\"--cfg\".to_owned());\n     args.push(r#\"feature=\"cargo-miri\"\"#.to_owned());"}]}