{"sha": "f9b703e7ab10383236ff687870c186220019f442", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YjcwM2U3YWIxMDM4MzIzNmZmNjg3ODcwYzE4NjIyMDAxOWY0NDI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-09-26T19:25:49Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-09-26T20:11:52Z"}, "message": "remove the destructors table", "tree": {"sha": "a65f322b429e7e1ce245e6ad5768a5ba3fb134d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a65f322b429e7e1ce245e6ad5768a5ba3fb134d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9b703e7ab10383236ff687870c186220019f442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9b703e7ab10383236ff687870c186220019f442", "html_url": "https://github.com/rust-lang/rust/commit/f9b703e7ab10383236ff687870c186220019f442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9b703e7ab10383236ff687870c186220019f442/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346088b555b5dd7ec2a156d82c5362632f9b8972", "url": "https://api.github.com/repos/rust-lang/rust/commits/346088b555b5dd7ec2a156d82c5362632f9b8972", "html_url": "https://github.com/rust-lang/rust/commit/346088b555b5dd7ec2a156d82c5362632f9b8972"}], "stats": {"total": 67, "additions": 27, "deletions": 40}, "files": [{"sha": "017c8f1e42bec94049b9460e66cc1ed92a9ce913", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -348,13 +348,17 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n     // this properly would result in the necessity of computing *type*\n     // reachability, which might result in a compile time loss.\n     fn mark_destructors_reachable(&mut self) {\n-        for adt in self.tcx.adt_defs() {\n-            if let Some(destructor_def_id) = adt.destructor() {\n-                if destructor_def_id.is_local() {\n-                    self.reachable_symbols.insert(destructor_def_id.node);\n+        let drop_trait = match self.tcx.lang_items.drop_trait() {\n+            Some(id) => self.tcx.lookup_trait_def(id), None => { return }\n+        };\n+        drop_trait.for_each_impl(self.tcx, |drop_impl| {\n+            for destructor in &self.tcx.impl_items.borrow()[&drop_impl] {\n+                let destructor_did = destructor.def_id();\n+                if destructor_did.is_local() {\n+                    self.reachable_symbols.insert(destructor_did.node);\n                 }\n             }\n-        }\n+        })\n     }\n }\n "}, {"sha": "f32e86e276c711380c07803e9b707bc75def7e87", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -245,9 +245,6 @@ pub struct ctxt<'tcx> {\n     /// True if the variance has been computed yet; false otherwise.\n     pub variance_computed: Cell<bool>,\n \n-    /// A method will be in this list if and only if it is a destructor.\n-    pub destructors: RefCell<DefIdSet>,\n-\n     /// Maps a DefId of a type to a list of its inherent impls.\n     /// Contains implementations of methods that are inherent to a type.\n     /// Methods in these implementations don't need to be exported.\n@@ -475,7 +472,6 @@ impl<'tcx> ctxt<'tcx> {\n             normalized_cache: RefCell::new(FnvHashMap()),\n             lang_items: lang_items,\n             provided_method_sources: RefCell::new(DefIdMap()),\n-            destructors: RefCell::new(DefIdSet()),\n             inherent_impls: RefCell::new(DefIdMap()),\n             impl_items: RefCell::new(DefIdMap()),\n             used_unsafe: RefCell::new(NodeSet()),"}, {"sha": "eb93c58f38c557ee2871792db39a2863838b7f81", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -2329,11 +2329,6 @@ impl<'tcx> ctxt<'tcx> {\n         self.lookup_adt_def_master(did)\n     }\n \n-    /// Return the list of all interned ADT definitions\n-    pub fn adt_defs(&self) -> Vec<AdtDef<'tcx>> {\n-        self.adt_defs.borrow().values().cloned().collect()\n-    }\n-\n     /// Given the did of an item, returns its full set of predicates.\n     pub fn lookup_predicates(&self, did: DefId) -> GenericPredicates<'tcx> {\n         lookup_locally_or_in_crate_store("}, {"sha": "dbd6286e426062fec497bee5b30a2b3a6c9f5008", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -1213,15 +1213,14 @@ impl LintPass for DropWithReprExtern {\n \n impl LateLintPass for DropWithReprExtern {\n     fn check_crate(&mut self, ctx: &LateContext, _: &hir::Crate) {\n-        for dtor_did in ctx.tcx.destructors.borrow().iter() {\n-            let (drop_impl_did, dtor_self_type) =\n-                if dtor_did.is_local() {\n-                    let impl_did = ctx.tcx.map.get_parent_did(dtor_did.node);\n-                    let ty = ctx.tcx.lookup_item_type(impl_did).ty;\n-                    (impl_did, ty)\n-                } else {\n-                    continue;\n-                };\n+        let drop_trait = match ctx.tcx.lang_items.drop_trait() {\n+            Some(id) => ctx.tcx.lookup_trait_def(id), None => { return }\n+        };\n+        drop_trait.for_each_impl(ctx.tcx, |drop_impl_did| {\n+            if !drop_impl_did.is_local() {\n+                return;\n+            }\n+            let dtor_self_type = ctx.tcx.lookup_item_type(drop_impl_did).ty;\n \n             match dtor_self_type.sty {\n                 ty::TyEnum(self_type_def, _) |\n@@ -1247,6 +1246,6 @@ impl LateLintPass for DropWithReprExtern {\n                 }\n                 _ => {}\n             }\n-        }\n+        })\n     }\n }"}, {"sha": "b0e81803ba72f5d1df5deea26fa42cb86d0c5ee2", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -620,13 +620,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n             ty::TraitContainer(trait_def_id) => {\n                 callee::check_legal_trait_for_method_call(self.fcx.ccx, self.span, trait_def_id)\n             }\n-            ty::ImplContainer(..) => {\n-                // Since `drop` is a trait method, we expect that any\n-                // potential calls to it will wind up in the other\n-                // arm. But just to be sure, check that the method id\n-                // does not appear in the list of destructors.\n-                assert!(!self.tcx().destructors.borrow().contains(&pick.item.def_id()));\n-            }\n+            ty::ImplContainer(..) => {}\n         }\n     }\n "}, {"sha": "66a3790e52d4484526d21b807c6e632795771842", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -431,17 +431,19 @@ pub fn check_item_bodies(ccx: &CrateCtxt) {\n }\n \n pub fn check_drop_impls(ccx: &CrateCtxt) {\n-    for drop_method_did in ccx.tcx.destructors.borrow().iter() {\n-        if drop_method_did.is_local() {\n-            let drop_impl_did = ccx.tcx.map.get_parent_did(drop_method_did.node);\n+    let drop_trait = match ccx.tcx.lang_items.drop_trait() {\n+        Some(id) => ccx.tcx.lookup_trait_def(id), None => { return }\n+    };\n+    drop_trait.for_each_impl(ccx.tcx, |drop_impl_did| {\n+        if drop_impl_did.is_local() {\n             match dropck::check_drop_impl(ccx.tcx, drop_impl_did) {\n                 Ok(()) => {}\n                 Err(()) => {\n                     assert!(ccx.tcx.sess.has_errors());\n                 }\n             }\n         }\n-    }\n+    });\n \n     ccx.tcx.sess.abort_if_errors();\n }"}, {"sha": "0c152a419d25f56ce19ec7f8a5913af2eef7b626", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9b703e7ab10383236ff687870c186220019f442/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=f9b703e7ab10383236ff687870c186220019f442", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n         // Populate the table of destructors. It might seem a bit strange to\n         // do this here, but it's actually the most convenient place, since\n         // the coherence tables contain the trait -> type mappings.\n-        self.populate_destructor_table();\n+        self.populate_destructors();\n \n         // Check to make sure implementations of `Copy` are legal.\n         self.check_implementations_of_copy();\n@@ -286,7 +286,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n     // Destructors\n     //\n \n-    fn populate_destructor_table(&self) {\n+    fn populate_destructors(&self) {\n         let tcx = self.crate_context.tcx;\n         let drop_trait = match tcx.lang_items.drop_trait() {\n             Some(id) => id, None => { return }\n@@ -309,9 +309,6 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 ty::TyEnum(type_def, _) |\n                 ty::TyStruct(type_def, _) => {\n                     type_def.set_destructor(method_def_id.def_id());\n-                    tcx.destructors\n-                       .borrow_mut()\n-                       .insert(method_def_id.def_id());\n                 }\n                 _ => {\n                     // Destructors only work on nominal types."}]}