{"sha": "05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZjY3Y2ExYTI3YTllNjljZDk5ZDU0MGEwMjQxNzU5YjgzY2MxYmQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-08T11:17:36Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T15:42:07Z"}, "message": "remove the sub/super terminology for universes\n\nInstead, we talk about:\n\n- creating the \"next\" universe\n- universes \"extending\" one another\n- and `u1.can_name(u2)`, meaning that `u1` contains all names from `u2`", "tree": {"sha": "22604c02aafae4ac00de9c8ba9c99e9370e8a308", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22604c02aafae4ac00de9c8ba9c99e9370e8a308"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "html_url": "https://github.com/rust-lang/rust/commit/05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4190778119383fa15758030cbf038e276a095f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4190778119383fa15758030cbf038e276a095f6", "html_url": "https://github.com/rust-lang/rust/commit/f4190778119383fa15758030cbf038e276a095f6"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "ae1892caa744e1b5f8e2453527132de45595587c", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -593,11 +593,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     where\n         T : TypeFoldable<'tcx>,\n     {\n-        let new_universe = self.create_superuniverse();\n+        let next_universe = self.create_next_universe();\n \n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n             self.tcx.mk_region(ty::RePlaceholder(ty::Placeholder {\n-                universe: new_universe,\n+                universe: next_universe,\n                 name: br,\n             }))\n         });"}, {"sha": "ef9886e06d4be51c616beead21cf9aa749c5d7b9", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -1489,13 +1489,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.universe.get()\n     }\n \n-    /// Create and return a new subunivese of the current universe;\n-    /// update `self.universe` to that new universe. At present,\n-    /// used only in the NLL subtyping code, which uses the new\n-    /// universe-based scheme instead of the more limited leak-check\n-    /// scheme.\n-    pub fn create_superuniverse(&self) -> ty::UniverseIndex {\n-        let u = self.universe.get().superuniverse();\n+    /// Create and return a fresh universe that extends all previous\n+    /// universes. Updates `self.universe` to that new universe.\n+    pub fn create_next_universe(&self) -> ty::UniverseIndex {\n+        let u = self.universe.get().next_universe();\n         self.universe.set(u);\n         u\n     }"}, {"sha": "4135d499c58532256fd045d3e97519d45fe52aac", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -1457,10 +1457,10 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// \"Universes\" are used during type- and trait-checking in the\n /// presence of `for<..>` binders to control what sets of names are\n /// visible. Universes are arranged into a tree: the root universe\n-/// contains names that are always visible. But when you enter into\n-/// some superuniverse, then it may add names that are only visible\n-/// within that subtree (but it can still name the names of its\n-/// ancestor universes).\n+/// contains names that are always visible. Each child then adds a new\n+/// set of names that are visible, in addition to those of its parent.\n+/// We say that the child universe \"extends\" the parent universe with\n+/// new names.\n ///\n /// To make this more concrete, consider this program:\n ///\n@@ -1472,11 +1472,11 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// ```\n ///\n /// The struct name `Foo` is in the root universe U0. But the type\n-/// parameter `T`, introduced on `bar`, is in a superuniverse U1 --\n-/// i.e., within `bar`, we can name both `T` and `Foo`, but outside of\n-/// `bar`, we cannot name `T`. Then, within the type of `y`, the\n-/// region `'a` is in a superuniverse U2 of U1, because we can name it\n-/// inside the fn type but not outside.\n+/// parameter `T`, introduced on `bar`, is in an extended universe U1\n+/// -- i.e., within `bar`, we can name both `T` and `Foo`, but outside\n+/// of `bar`, we cannot name `T`. Then, within the type of `y`, the\n+/// region `'a` is in a universe U2 that extends U1, because we can\n+/// name it inside the fn type but not outside.\n ///\n /// Universes are used to do type- and trait-checking around these\n /// \"forall\" binders (also called **universal quantification**). The\n@@ -1500,24 +1500,28 @@ impl_stable_hash_for!(struct UniverseIndex { private });\n impl UniverseIndex {\n     pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n \n-    /// A \"superuniverse\" corresponds to being inside a `forall` quantifier.\n-    /// So, for example, suppose we have this type in universe `U`:\n+    /// Returns the \"next\" universe index in order -- this new index\n+    /// is considered to extend all previous universes. This\n+    /// corresponds to entering a `forall` quantifier.  So, for\n+    /// example, suppose we have this type in universe `U`:\n     ///\n     /// ```\n     /// for<'a> fn(&'a u32)\n     /// ```\n     ///\n     /// Once we \"enter\" into this `for<'a>` quantifier, we are in a\n-    /// superuniverse of `U` -- in this new universe, we can name the\n-    /// region `'a`, but that region was not nameable from `U` because\n-    /// it was not in scope there.\n-    pub fn superuniverse(self) -> UniverseIndex {\n+    /// new universe that extends `U` -- in this new universe, we can\n+    /// name the region `'a`, but that region was not nameable from\n+    /// `U` because it was not in scope there.\n+    pub fn next_universe(self) -> UniverseIndex {\n         UniverseIndex::from_u32(self.private.checked_add(1).unwrap())\n     }\n \n-    /// True if the names in this universe are a subset of the names in `other`.\n-    pub fn is_subset_of(self, other: UniverseIndex) -> bool {\n-        self.private <= other.private\n+    /// True if `self` can name a name from `other` -- in other words,\n+    /// if the set of names in `self` is a superset of those in\n+    /// `other`.\n+    pub fn can_name(self, other: UniverseIndex) -> bool {\n+        self.private >= other.private\n     }\n }\n "}, {"sha": "dd8a7f19a63bd1aba572714cd01fc38ae9bb36be", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -112,7 +112,7 @@ struct RegionDefinition<'tcx> {\n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n     /// forall-quantifiers like `for<'a> { 'a = 'b }`, we would create\n-    /// the variable for `'a` in a superuniverse.\n+    /// the variable for `'a` in a fresh universe that extends ROOT.\n     universe: ty::UniverseIndex,\n \n     /// If this is 'static or an early-bound region, then this is\n@@ -339,11 +339,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n                 NLLRegionVariableOrigin::Placeholder(placeholder) => {\n                     // Each placeholder region is only visible from\n-                    // its universe `ui` and its superuniverses. So we\n+                    // its universe `ui` and its extensions. So we\n                     // can't just add it into `scc` unless the\n                     // universe of the scc can name this region.\n                     let scc_universe = self.scc_universes[scc];\n-                    if placeholder.universe.is_subset_of(scc_universe) {\n+                    if scc_universe.can_name(placeholder.universe) {\n                         self.scc_values.add_element(scc, placeholder);\n                     } else {\n                         self.add_incompatible_universe(scc);\n@@ -541,7 +541,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Quick check: if scc_b's declared universe is a subset of\n         // scc_a's declared univese (typically, both are ROOT), then\n         // it cannot contain any problematic universe elements.\n-        if self.scc_universes[scc_b].is_subset_of(universe_a) {\n+        if universe_a.can_name(self.scc_universes[scc_b]) {\n             return true;\n         }\n \n@@ -550,7 +550,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // from universe_a\n         self.scc_values\n             .placeholders_contained_in(scc_b)\n-            .all(|p| p.universe.is_subset_of(universe_a))\n+            .all(|p| universe_a.can_name(p.universe))\n     }\n \n     /// Extend `scc` so that it can outlive some placeholder region"}, {"sha": "3607ae4f5088d4b3bf97ad6b30ecf83f389660a3", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -148,8 +148,8 @@ crate enum RegionElement {\n     /// a lifetime parameter).\n     RootUniversalRegion(RegionVid),\n \n-    /// A superuniverse from a superuniverse (e.g., instantiated from a\n-    /// `for<'a> fn(&'a u32)` type).\n+    /// A placeholder (e.g., instantiated from a `for<'a> fn(&'a u32)`\n+    /// type).\n     PlaceholderRegion(ty::Placeholder),\n }\n "}, {"sha": "96cc1c0afecb41e4acbdd1bae9883cbb727a8ff2", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05f67ca1a27a9e69cd99d540a0241759b83cc1bd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=05f67ca1a27a9e69cd99d540a0241759b83cc1bd", "patch": "@@ -159,7 +159,7 @@ trait TypeRelatingDelegate<'tcx> {\n     fn push_outlives(&mut self, sup: ty::Region<'tcx>, sub: ty::Region<'tcx>);\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n-    fn next_superuniverse(&mut self) -> ty::UniverseIndex;\n+    fn create_next_universe(&mut self) -> ty::UniverseIndex;\n \n     /// Creates a new region variable representing a higher-ranked\n     /// region that is instantiated existentially. This creates an\n@@ -218,8 +218,8 @@ impl NllTypeRelatingDelegate<'me, 'bccx, 'gcx, 'tcx> {\n }\n \n impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n-    fn next_superuniverse(&mut self) -> ty::UniverseIndex {\n-        self.infcx.create_superuniverse()\n+    fn create_next_universe(&mut self) -> ty::UniverseIndex {\n+        self.infcx.create_next_universe()\n     }\n \n     fn next_existential_region_var(&mut self) -> ty::Region<'tcx> {\n@@ -324,7 +324,7 @@ where\n                     // new universe for the placeholders we will make\n                     // from here out.\n                     let universe = lazy_universe.unwrap_or_else(|| {\n-                        let universe = delegate.next_superuniverse();\n+                        let universe = delegate.create_next_universe();\n                         lazy_universe = Some(universe);\n                         universe\n                     });"}]}