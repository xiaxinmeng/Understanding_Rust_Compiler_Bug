{"sha": "29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZGQ1ZGY3OTFiYjcwZDZjNWQzZDExMThjMTI4OWQ0ZjNkNTE4OTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-12T19:36:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-12T19:36:55Z"}, "message": "Rollup merge of #69002 - RalfJung:miri-op-overflow, r=oli-obk,wesleywiser\n\nmiri: improve and simplify overflow detection\n\nThis simplifies the overflow detection for signed binary operators, and adds overflow detection to unary operators so that const-prop doesn't have to crudely hand-roll that.\n\nIt also fixes some bugs in the operator implementation that however, I think, were not observable.\n\nr? @oli-obk @wesleywiser", "tree": {"sha": "be69c58038568bd2ac24cc8e76858ab08d83f32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be69c58038568bd2ac24cc8e76858ab08d83f32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeRFPXCRBK7hj4Ov3rIwAAdHIIACRG3g6j6NZQ8MzCANUtT/6v\nrOGFCT/r1K52Kj+daMJ3Lwm9Xq7K9how9tbzicFczfD/ZuG6SFfDeLnbaMLtXFWO\nj2Qlzu4NXQHPiquukwVULPH0ndZJVKZ7hvzIruDSc9AumPvZ33H9qFvLwYVcozTL\nmiuqfzcEMRnTmUUUbLr0s7cC+t7ca+jNIUoxvPuUBz1cjQ2lVn2+gO4IiKVo0AjZ\nKUuDX9U+y6M/Bq72523V3yv2jG9UanFqv+aQv9hC5DAyJMQgY559PkkZ3XGkrx7z\nrzYEvM1m0zdMORK6IBuHnCjnjGU3SFAmSrj2KVN54gLHlYlzTd00PFH8Qf44uOs=\n=n4vh\n-----END PGP SIGNATURE-----\n", "payload": "tree be69c58038568bd2ac24cc8e76858ab08d83f32b\nparent 2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9\nparent c561d23a6105122a517c14394a46c3faab8e01b6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581536215 +0100\ncommitter GitHub <noreply@github.com> 1581536215 +0100\n\nRollup merge of #69002 - RalfJung:miri-op-overflow, r=oli-obk,wesleywiser\n\nmiri: improve and simplify overflow detection\n\nThis simplifies the overflow detection for signed binary operators, and adds overflow detection to unary operators so that const-prop doesn't have to crudely hand-roll that.\n\nIt also fixes some bugs in the operator implementation that however, I think, were not observable.\n\nr? @oli-obk @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "html_url": "https://github.com/rust-lang/rust/commit/29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9", "html_url": "https://github.com/rust-lang/rust/commit/2a3c1a30c84d66ad9bde8aef7727dfd6b60c40c9"}, {"sha": "c561d23a6105122a517c14394a46c3faab8e01b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c561d23a6105122a517c14394a46c3faab8e01b6", "html_url": "https://github.com/rust-lang/rust/commit/c561d23a6105122a517c14394a46c3faab8e01b6"}], "stats": {"total": 369, "additions": 272, "deletions": 97}, "files": [{"sha": "2e8c94903ca46e9df220a91008edb8f1c7e2d3e7", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -134,9 +134,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             let mut r = r as u32;\n             let size = left_layout.size;\n             oflo |= r >= size.bits() as u32;\n-            if oflo {\n-                r %= size.bits() as u32;\n-            }\n+            r %= size.bits() as u32;\n             let result = if signed {\n                 let l = self.sign_extend(l, left_layout) as i128;\n                 let result = match bin_op {\n@@ -168,6 +166,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             )\n         }\n \n+        let size = left_layout.size;\n+\n         // Operations that need special treatment for signed integers\n         if left_layout.abi.is_signed() {\n             let op: Option<fn(&i128, &i128) -> bool> = match bin_op {\n@@ -195,32 +195,31 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             if let Some(op) = op {\n                 let l128 = self.sign_extend(l, left_layout) as i128;\n                 let r = self.sign_extend(r, right_layout) as i128;\n-                let size = left_layout.size;\n+                // We need a special check for overflowing remainder:\n+                // \"int_min % -1\" overflows and returns 0, but after casting things to a larger int\n+                // type it does *not* overflow nor give an unrepresentable result!\n                 match bin_op {\n-                    Rem | Div => {\n-                        // int_min / -1\n+                    Rem => {\n                         if r == -1 && l == (1 << (size.bits() - 1)) {\n-                            return Ok((Scalar::from_uint(l, size), true, left_layout.ty));\n+                            return Ok((Scalar::from_int(0, size), true, left_layout.ty));\n                         }\n                     }\n                     _ => {}\n                 }\n-                trace!(\"{}, {}, {}\", l, l128, r);\n-                let (result, mut oflo) = op(l128, r);\n-                trace!(\"{}, {}\", result, oflo);\n-                if !oflo && size.bits() != 128 {\n-                    let max = 1 << (size.bits() - 1);\n-                    oflo = result >= max || result < -max;\n-                }\n-                // this may be out-of-bounds for the result type, so we have to truncate ourselves\n+\n+                let (result, oflo) = op(l128, r);\n+                // This may be out-of-bounds for the result type, so we have to truncate ourselves.\n+                // If that truncation loses any information, we have an overflow.\n                 let result = result as u128;\n                 let truncated = self.truncate(result, left_layout);\n-                return Ok((Scalar::from_uint(truncated, size), oflo, left_layout.ty));\n+                return Ok((\n+                    Scalar::from_uint(truncated, size),\n+                    oflo || self.sign_extend(truncated, left_layout) != result,\n+                    left_layout.ty,\n+                ));\n             }\n         }\n \n-        let size = left_layout.size;\n-\n         let (val, ty) = match bin_op {\n             Eq => (Scalar::from_bool(l == r), self.tcx.types.bool),\n             Ne => (Scalar::from_bool(l != r), self.tcx.types.bool),\n@@ -247,6 +246,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => bug!(),\n                 };\n                 let (result, oflo) = op(l, r);\n+                // Truncate to target type.\n+                // If that truncation loses any information, we have an overflow.\n                 let truncated = self.truncate(result, left_layout);\n                 return Ok((\n                     Scalar::from_uint(truncated, size),\n@@ -341,7 +342,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Typed version of `checked_binary_op`, returning an `ImmTy`. Also ignores overflows.\n+    /// Typed version of `overflowing_binary_op`, returning an `ImmTy`. Also ignores overflows.\n     #[inline]\n     pub fn binary_op(\n         &self,\n@@ -353,11 +354,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(ImmTy::from_scalar(val, self.layout_of(ty)?))\n     }\n \n-    pub fn unary_op(\n+    /// Returns the result of the specified operation, whether it overflowed, and\n+    /// the result type.\n+    pub fn overflowing_unary_op(\n         &self,\n         un_op: mir::UnOp,\n         val: ImmTy<'tcx, M::PointerTag>,\n-    ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {\n+    ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, bool, Ty<'tcx>)> {\n         use rustc::mir::UnOp::*;\n \n         let layout = val.layout;\n@@ -371,29 +374,44 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Not => !val,\n                     _ => bug!(\"Invalid bool op {:?}\", un_op),\n                 };\n-                Ok(ImmTy::from_scalar(Scalar::from_bool(res), self.layout_of(self.tcx.types.bool)?))\n+                Ok((Scalar::from_bool(res), false, self.tcx.types.bool))\n             }\n             ty::Float(fty) => {\n                 let res = match (un_op, fty) {\n                     (Neg, FloatTy::F32) => Scalar::from_f32(-val.to_f32()?),\n                     (Neg, FloatTy::F64) => Scalar::from_f64(-val.to_f64()?),\n                     _ => bug!(\"Invalid float op {:?}\", un_op),\n                 };\n-                Ok(ImmTy::from_scalar(res, layout))\n+                Ok((res, false, layout.ty))\n             }\n             _ => {\n                 assert!(layout.ty.is_integral());\n                 let val = self.force_bits(val, layout.size)?;\n-                let res = match un_op {\n-                    Not => !val,\n+                let (res, overflow) = match un_op {\n+                    Not => (self.truncate(!val, layout), false), // bitwise negation, then truncate\n                     Neg => {\n+                        // arithmetic negation\n                         assert!(layout.abi.is_signed());\n-                        (-(val as i128)) as u128\n+                        let val = self.sign_extend(val, layout) as i128;\n+                        let (res, overflow) = val.overflowing_neg();\n+                        let res = res as u128;\n+                        // Truncate to target type.\n+                        // If that truncation loses any information, we have an overflow.\n+                        let truncated = self.truncate(res, layout);\n+                        (truncated, overflow || self.sign_extend(truncated, layout) != res)\n                     }\n                 };\n-                // res needs tuncating\n-                Ok(ImmTy::from_uint(self.truncate(res, layout), layout))\n+                Ok((Scalar::from_uint(res, layout.size), overflow, layout.ty))\n             }\n         }\n     }\n+\n+    pub fn unary_op(\n+        &self,\n+        un_op: mir::UnOp,\n+        val: ImmTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {\n+        let (val, _overflow, ty) = self.overflowing_unary_op(un_op, val)?;\n+        Ok(ImmTy::from_scalar(val, self.layout_of(ty)?))\n+    }\n }"}, {"sha": "a7da4f7c164fecfdc4226bca48f565ce27d77579", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -518,18 +518,19 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n     }\n \n-    fn check_unary_op(&mut self, arg: &Operand<'tcx>, source_info: SourceInfo) -> Option<()> {\n+    fn check_unary_op(\n+        &mut self,\n+        op: UnOp,\n+        arg: &Operand<'tcx>,\n+        source_info: SourceInfo,\n+    ) -> Option<()> {\n         self.use_ecx(source_info, |this| {\n-            let ty = arg.ty(&this.local_decls, this.tcx);\n-\n-            if ty.is_integral() {\n-                let arg = this.ecx.eval_operand(arg, None)?;\n-                let prim = this.ecx.read_immediate(arg)?;\n-                // Need to do overflow check here: For actual CTFE, MIR\n-                // generation emits code that does this before calling the op.\n-                if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n-                    throw_panic!(OverflowNeg)\n-                }\n+            let val = this.ecx.read_immediate(this.ecx.eval_operand(arg, None)?)?;\n+            let (_res, overflow, _ty) = this.ecx.overflowing_unary_op(op, val)?;\n+\n+            if overflow {\n+                assert_eq!(op, UnOp::Neg, \"Neg is the only UnOp that can overflow\");\n+                throw_panic!(OverflowNeg);\n             }\n \n             Ok(())\n@@ -576,11 +577,10 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         if !overflow_check {\n             self.use_ecx(source_info, |this| {\n                 let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n-                let (_, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n+                let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n \n                 if overflow {\n-                    let err = err_panic!(Overflow(op)).into();\n-                    return Err(err);\n+                    throw_panic!(Overflow(op));\n                 }\n \n                 Ok(())\n@@ -620,9 +620,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // Additional checking: if overflow checks are disabled (which is usually the case in\n             // release mode), then we need to do additional checking here to give lints to the user\n             // if an overflow would occur.\n-            Rvalue::UnaryOp(UnOp::Neg, arg) if !overflow_check => {\n-                trace!(\"checking UnaryOp(op = Neg, arg = {:?})\", arg);\n-                self.check_unary_op(arg, source_info)?;\n+            Rvalue::UnaryOp(op, arg) if !overflow_check => {\n+                trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n+                self.check_unary_op(*op, arg, source_info)?;\n             }\n \n             // Additional checking: check for overflows on integer binary operations and report"}, {"sha": "7c5aaedda35fa484baf97b385a8e70f465037b60", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -17,16 +17,22 @@ fn black_box<T>(_: T) {\n fn main() {\n     let a = -std::i8::MIN;\n     //~^ ERROR const_err\n+    let a_i128 = -std::i128::MIN;\n+    //~^ ERROR const_err\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ ERROR const_err\n+    let b_i128 = std::i128::MIN - std::i128::MAX;\n+    //~^ ERROR const_err\n     let c = 200u8 * 4;\n     //~^ ERROR const_err\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n-    //~^ ERROR index out of bounds\n+    //~^ ERROR const_err\n     black_box(a);\n+    black_box(a_i128);\n     black_box(b);\n+    black_box(b_i128);\n     black_box(c);\n     black_box(d);\n }"}, {"sha": "f135bf0b06cadb3f061a45199bfe7143b2bf3885", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -11,28 +11,40 @@ LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:13\n+  --> $DIR/const-err2.rs:20:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^ attempt to negate with overflow\n+\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:22:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:22:13\n+  --> $DIR/const-err2.rs:24:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n+\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:26:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:24:13\n+  --> $DIR/const-err2.rs:28:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:26:14\n+  --> $DIR/const-err2.rs:30:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "43aba4a8b012b00a6022751d586c24a74c90bb4f", "filename": "src/test/ui/consts/const-err3.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -17,16 +17,22 @@ fn black_box<T>(_: T) {\n fn main() {\n     let a = -std::i8::MIN;\n     //~^ ERROR const_err\n+    let a_i128 = -std::i128::MIN;\n+    //~^ ERROR const_err\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ ERROR const_err\n+    let b_i128 = std::i128::MIN - std::i128::MAX;\n+    //~^ ERROR const_err\n     let c = 200u8 * 4;\n     //~^ ERROR const_err\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n     black_box(a);\n+    black_box(a_i128);\n     black_box(b);\n+    black_box(b_i128);\n     black_box(c);\n     black_box(d);\n }"}, {"sha": "05f64b87fcce6debabaeb621523f95f9cb275e8c", "filename": "src/test/ui/consts/const-err3.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -10,29 +10,41 @@ note: the lint level is defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n+error: attempt to negate with overflow\n+  --> $DIR/const-err3.rs:20:18\n+   |\n+LL |     let a_i128 = -std::i128::MIN;\n+   |                  ^^^^^^^^^^^^^^^\n+\n error: attempt to add with overflow\n-  --> $DIR/const-err3.rs:20:13\n+  --> $DIR/const-err3.rs:22:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^\n \n+error: attempt to subtract with overflow\n+  --> $DIR/const-err3.rs:24:18\n+   |\n+LL |     let b_i128 = std::i128::MIN - std::i128::MAX;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: attempt to multiply with overflow\n-  --> $DIR/const-err3.rs:22:13\n+  --> $DIR/const-err3.rs:26:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^\n \n error: attempt to subtract with overflow\n-  --> $DIR/const-err3.rs:24:13\n+  --> $DIR/const-err3.rs:28:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err3.rs:26:14\n+  --> $DIR/const-err3.rs:30:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "75dac812f1e3a749e1ecb7786965fc9be1633742", "filename": "src/test/ui/consts/const-int-arithmetic-overflow.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic-overflow.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+// compile-flags: -O\n+#![allow(const_err)]\n+\n+// Make sure arithmetic unary/binary ops actually return the right result, even when overflowing.\n+// We have to put them in `const fn` and turn on optimizations to avoid overflow checks.\n+\n+const fn add(x: i8, y: i8) -> i8 { x+y }\n+const fn sub(x: i8, y: i8) -> i8 { x-y }\n+const fn mul(x: i8, y: i8) -> i8 { x*y }\n+// div and rem are always checked, so we cannot test their result in case of oveflow.\n+const fn neg(x: i8) -> i8 { -x }\n+\n+fn main() {\n+    const ADD_OFLOW: i8 = add(100, 100);\n+    assert_eq!(ADD_OFLOW, -56);\n+\n+    const SUB_OFLOW: i8 = sub(100, -100);\n+    assert_eq!(SUB_OFLOW, -56);\n+\n+    const MUL_OFLOW: i8 = mul(-100, -2);\n+    assert_eq!(MUL_OFLOW, -56);\n+\n+    const NEG_OFLOW: i8 = neg(-128);\n+    assert_eq!(NEG_OFLOW, -128);\n+}"}, {"sha": "2c3421b7a8d0b4dd347bf6f86f6d1c3cbc96de3c", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -7,7 +7,7 @@\n #![feature(const_saturating_int_methods)]\n #![feature(const_wrapping_int_methods)]\n \n-use std::i8;\n+use std::{i8, i128};\n \n macro_rules! suite {\n     ($(\n@@ -65,6 +65,10 @@ suite!(\n         C26: 5i8.checked_rem_euclid(0), None;\n         C27: i8::MIN.checked_rem_euclid(-1), None;\n     }\n+    checked_i128 -> Option<i128> {\n+        CHK_ADD_I128: i128::MAX.checked_add(1), None;\n+        CHK_MUL_I128: i128::MIN.checked_mul(-1), None;\n+    }\n \n     saturating_and_wrapping -> i8 {\n         // `const_saturating_int_methods`\n@@ -104,6 +108,13 @@ suite!(\n         C47: 100i8.wrapping_rem_euclid(10), 0;\n         C48: (-128i8).wrapping_rem_euclid(-1), 0;\n     }\n+    saturating_and_wrapping_i128 -> i128 {\n+        SAT_ADD_I128: i128::MAX.saturating_add(1), i128::MAX;\n+        SAT_MUL_I128: i128::MAX.saturating_mul(2), i128::MAX;\n+\n+        WRP_ADD_I128: i128::MAX.wrapping_add(1), i128::MIN;\n+        WRP_MUL_I128: i128::MAX.wrapping_mul(3), i128::MAX-2;\n+    }\n \n     overflowing -> (i8, bool) {\n         // `const_overflowing_int_methods`\n@@ -119,12 +130,18 @@ suite!(\n \n         C55: 5i8.overflowing_rem_euclid(2), (1, false);\n         C56: i8::MIN.overflowing_rem_euclid(-1), (0, true);\n-\n+    }\n+    overflowing_i128 -> (i128, bool) {\n+        OFL_ADD_I128: i128::MAX.overflowing_add(1), (i128::MIN, true);\n+        OFL_MUL_I128: i128::MAX.overflowing_mul(3), (i128::MAX-2, true);\n     }\n );\n \n fn main() {\n    checked();\n+   checked_i128();\n    saturating_and_wrapping();\n+   saturating_and_wrapping_i128();\n    overflowing();\n+   overflowing_i128();\n }"}, {"sha": "5866cef2d2c70ceff2143217583a3a3232a08773", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(const_err)]\n \n-use std::{isize, i8, i16, i32, i64};\n+use std::{isize, i8, i16, i32, i64, i128};\n use std::thread;\n \n fn main() {\n@@ -22,6 +22,9 @@ fn main() {\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n     //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n@@ -32,6 +35,8 @@ fn main() {\n     //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n+    assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR this expression will panic at runtime\n@@ -47,6 +52,9 @@ fn main() {\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n@@ -57,4 +65,6 @@ fn main() {\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n }"}, {"sha": "d7373948cb9e0519b03ba75aee12fcf156ecc2ff", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 57, "deletions": 21, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -64,125 +64,161 @@ error: this expression will panic at runtime\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n-error: attempt to divide by zero\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n   --> $DIR/issue-8460-const.rs:25:36\n    |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to divide with overflow\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const.rs:28:36\n+   |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:27:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:29:36\n+  --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:33:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:35:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:35:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:38:36\n+  --> $DIR/issue-8460-const.rs:43:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:41:36\n+  --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:41:36\n+  --> $DIR/issue-8460-const.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:44:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:44:36\n+  --> $DIR/issue-8460-const.rs:49:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:47:36\n+  --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:47:36\n+  --> $DIR/issue-8460-const.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const.rs:55:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const.rs:55:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n+\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:50:36\n+  --> $DIR/issue-8460-const.rs:58:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:54:36\n+  --> $DIR/issue-8460-const.rs:62:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:56:36\n+  --> $DIR/issue-8460-const.rs:64:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: aborting due to 30 previous errors\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const.rs:68:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^\n+\n+error: aborting due to 36 previous errors\n "}, {"sha": "afea859bb65a905ea32ed8f151d90c4833fdc4b7", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -3,7 +3,7 @@\n \n #![deny(const_err)]\n \n-use std::{isize, i8, i16, i32, i64};\n+use std::{isize, i8, i16, i32, i64, i128};\n use std::thread;\n \n fn main() {\n@@ -17,6 +17,8 @@ fn main() {\n     //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n@@ -27,6 +29,8 @@ fn main() {\n     //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n+    assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n@@ -37,6 +41,8 @@ fn main() {\n     //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n@@ -47,4 +53,6 @@ fn main() {\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n }"}, {"sha": "e25d560fe0ce34e03b2cb53b030343fcb7e9b48c", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29dd5df791bb70d6c5d3d1118c1289d4f3d51899/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=29dd5df791bb70d6c5d3d1118c1289d4f3d51899", "patch": "@@ -34,95 +34,119 @@ error: attempt to divide with overflow\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: attempt to divide by zero\n+error: attempt to divide with overflow\n   --> $DIR/issue-8460-const2.rs:20:36\n    |\n+LL |     assert!(thread::spawn(move|| { i128::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:22:36\n+  --> $DIR/issue-8460-const2.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:24:36\n+  --> $DIR/issue-8460-const2.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:26:36\n+  --> $DIR/issue-8460-const2.rs:28:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const2.rs:28:36\n+  --> $DIR/issue-8460-const2.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:32:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^\n+\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:30:36\n+  --> $DIR/issue-8460-const2.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:32:36\n+  --> $DIR/issue-8460-const2.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:34:36\n+  --> $DIR/issue-8460-const2.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:36:36\n+  --> $DIR/issue-8460-const2.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const2.rs:38:36\n+  --> $DIR/issue-8460-const2.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i128::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^\n+\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:40:36\n+  --> $DIR/issue-8460-const2.rs:46:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:42:36\n+  --> $DIR/issue-8460-const2.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:44:36\n+  --> $DIR/issue-8460-const2.rs:50:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:46:36\n+  --> $DIR/issue-8460-const2.rs:52:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const2.rs:48:36\n+  --> $DIR/issue-8460-const2.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n-error: aborting due to 20 previous errors\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i128 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^\n+\n+error: aborting due to 24 previous errors\n "}]}