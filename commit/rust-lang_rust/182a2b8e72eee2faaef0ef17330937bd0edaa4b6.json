{"sha": "182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MmEyYjhlNzJlZWUyZmFhZWYwZWYxNzMzMDkzN2JkMGVkYWE0YjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-14T17:30:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-14T17:30:13Z"}, "message": "Merge #9901\n\n9901: internal: remove dead code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "eea668c3675817e249d9e17d787059414b559745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eea668c3675817e249d9e17d787059414b559745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhF/2lCRBK7hj4Ov3rIwAA5q8IAH3c+oEB/F7DXV4VagekOm2l\nWCOBUdsW+iltn+N1Gx97ShNugoEZQUt9nUJqSkAmm34TYbNv5/yLEJ2xP3zBmcXu\nMXHzP6fzBmnCta0huBFVkRPc8jgnSZglHZLIjUYSF4Ou6Uy8k8CdbrX+mFP3Ic2f\nDqllfCG+EDDpb+0y/MBYL/lwsFVM1D+KLFMYpBxj4TuOyWixM+buN3PECuJd0kGn\nMXnQht2yzfszfAQi0GKiL4gR7lhugznqvlZZMDcntF1tEd/9xorGn2psDvtLl5m8\nUFe+Rwh8baxtcoHxmE0F1Z562CfVkmbryg1LR2TbhIpsFB7HvMI97RpU6I5CQ/4=\n=VeCJ\n-----END PGP SIGNATURE-----\n", "payload": "tree eea668c3675817e249d9e17d787059414b559745\nparent 1e0d20366fb141b469e6383b6efe10c664ad45f3\nparent 78c7940f5c418225dfc419a45639be7a71756509\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628962213 +0000\ncommitter GitHub <noreply@github.com> 1628962213 +0000\n\nMerge #9901\n\n9901: internal: remove dead code r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "html_url": "https://github.com/rust-lang/rust/commit/182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e0d20366fb141b469e6383b6efe10c664ad45f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d20366fb141b469e6383b6efe10c664ad45f3", "html_url": "https://github.com/rust-lang/rust/commit/1e0d20366fb141b469e6383b6efe10c664ad45f3"}, {"sha": "78c7940f5c418225dfc419a45639be7a71756509", "url": "https://api.github.com/repos/rust-lang/rust/commits/78c7940f5c418225dfc419a45639be7a71756509", "html_url": "https://github.com/rust-lang/rust/commit/78c7940f5c418225dfc419a45639be7a71756509"}], "stats": {"total": 124, "additions": 9, "deletions": 115}, "files": [{"sha": "0421d4c9b03c087016f0467b2d02f022bee6afdb", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "patch": "@@ -705,8 +705,8 @@ mod tests {\n     use crate::tests::parse_macro;\n     use parser::TokenSource;\n     use syntax::{\n-        algo::{insert_children, InsertPosition},\n-        ast::AstNode,\n+        ast::{make, AstNode},\n+        ted,\n     };\n     use test_utils::assert_eq_text;\n \n@@ -772,42 +772,26 @@ mod tests {\n \n     #[test]\n     fn test_token_tree_last_child_is_white_space() {\n-        let source_file = ast::SourceFile::parse(\"f!({} );\").ok().unwrap();\n+        let source_file = ast::SourceFile::parse(\"f!{}\").ok().unwrap();\n         let macro_call = source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n         let token_tree = macro_call.token_tree().unwrap();\n \n         // Token Tree now is :\n         // TokenTree\n-        // - T!['(']\n         // - TokenTree\n         //   - T!['{']\n         //   - T!['}']\n-        // - WHITE_SPACE\n-        // - T![')']\n-\n-        let rbrace =\n-            token_tree.syntax().descendants_with_tokens().find(|it| it.kind() == T!['}']).unwrap();\n-        let space = token_tree\n-            .syntax()\n-            .descendants_with_tokens()\n-            .find(|it| it.kind() == SyntaxKind::WHITESPACE)\n-            .unwrap();\n-\n-        // reorder th white space, such that the white is inside the inner token-tree.\n-        let token_tree = insert_children(\n-            &rbrace.parent().unwrap(),\n-            InsertPosition::Last,\n-            std::iter::once(space),\n-        );\n \n+        let token_tree = token_tree.clone_for_update();\n+        ted::append_child(token_tree.syntax(), make::tokens::single_space());\n+        let token_tree = token_tree.clone_subtree();\n         // Token Tree now is :\n         // TokenTree\n         // - T!['{']\n         // - T!['}']\n         // - WHITE_SPACE\n-        let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n-        let tt = syntax_node_to_token_tree(token_tree.syntax()).0;\n \n+        let tt = syntax_node_to_token_tree(token_tree.syntax()).0;\n         assert_eq!(tt.delimiter_kind(), Some(tt::DelimiterKind::Brace));\n     }\n "}, {"sha": "88d24df8b82529d41002fd16ea8ec29414cb92cf", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 91, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "patch": "@@ -8,8 +8,8 @@ use rustc_hash::FxHashMap;\n use text_edit::TextEditBuilder;\n \n use crate::{\n-    AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxNodePtr,\n-    SyntaxToken, TextRange, TextSize,\n+    AstNode, Direction, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange,\n+    TextSize,\n };\n \n /// Returns ancestors of the node at the offset, sorted by length. This should\n@@ -92,14 +92,6 @@ pub fn has_errors(node: &SyntaxNode) -> bool {\n     node.children().any(|it| it.kind() == SyntaxKind::ERROR)\n }\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub enum InsertPosition<T> {\n-    First,\n-    Last,\n-    Before(T),\n-    After(T),\n-}\n-\n type FxIndexMap<K, V> = IndexMap<K, V, BuildHasherDefault<rustc_hash::FxHasher>>;\n \n #[derive(Debug, Hash, PartialEq, Eq)]\n@@ -250,87 +242,6 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n     }\n }\n \n-/// Adds specified children (tokens or nodes) to the current node at the\n-/// specific position.\n-///\n-/// This is a type-unsafe low-level editing API, if you need to use it,\n-/// prefer to create a type-safe abstraction on top of it instead.\n-pub fn insert_children(\n-    parent: &SyntaxNode,\n-    position: InsertPosition<SyntaxElement>,\n-    to_insert: impl IntoIterator<Item = SyntaxElement>,\n-) -> SyntaxNode {\n-    let mut to_insert = to_insert.into_iter();\n-    _insert_children(parent, position, &mut to_insert)\n-}\n-\n-fn _insert_children(\n-    parent: &SyntaxNode,\n-    position: InsertPosition<SyntaxElement>,\n-    to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n-) -> SyntaxNode {\n-    let mut delta = TextSize::default();\n-    let to_insert = to_insert.map(|element| {\n-        delta += element.text_range().len();\n-        to_green_element(element)\n-    });\n-\n-    let parent_green = parent.green();\n-    let mut old_children = parent_green.children().map(|it| match it {\n-        NodeOrToken::Token(it) => NodeOrToken::Token(it.to_owned()),\n-        NodeOrToken::Node(it) => NodeOrToken::Node(it.to_owned()),\n-    });\n-\n-    let new_children = match &position {\n-        InsertPosition::First => to_insert.chain(old_children).collect::<Vec<_>>(),\n-        InsertPosition::Last => old_children.chain(to_insert).collect::<Vec<_>>(),\n-        InsertPosition::Before(anchor) | InsertPosition::After(anchor) => {\n-            let take_anchor = if let InsertPosition::After(_) = position { 1 } else { 0 };\n-            let split_at = position_of_child(parent, anchor.clone()) + take_anchor;\n-            let before = old_children.by_ref().take(split_at).collect::<Vec<_>>();\n-            before.into_iter().chain(to_insert).chain(old_children).collect::<Vec<_>>()\n-        }\n-    };\n-\n-    with_children(parent, new_children)\n-}\n-\n-fn with_children(\n-    parent: &SyntaxNode,\n-    new_children: Vec<NodeOrToken<rowan::GreenNode, rowan::GreenToken>>,\n-) -> SyntaxNode {\n-    let _p = profile::span(\"with_children\");\n-\n-    let new_green = rowan::GreenNode::new(rowan::SyntaxKind(parent.kind() as u16), new_children);\n-    with_green(parent, new_green)\n-}\n-\n-fn with_green(syntax_node: &SyntaxNode, green: rowan::GreenNode) -> SyntaxNode {\n-    let len = green.children().map(|it| it.text_len()).sum::<TextSize>();\n-    let new_root_node = syntax_node.replace_with(green);\n-    let new_root_node = SyntaxNode::new_root(new_root_node);\n-\n-    // FIXME: use a more elegant way to re-fetch the node (#1185), make\n-    // `range` private afterwards\n-    let mut ptr = SyntaxNodePtr::new(syntax_node);\n-    ptr.range = TextRange::at(ptr.range.start(), len);\n-    ptr.to_node(&new_root_node)\n-}\n-\n-fn position_of_child(parent: &SyntaxNode, child: SyntaxElement) -> usize {\n-    parent\n-        .children_with_tokens()\n-        .position(|it| it == child)\n-        .expect(\"element is not a child of current element\")\n-}\n-\n-fn to_green_element(element: SyntaxElement) -> NodeOrToken<rowan::GreenNode, rowan::GreenToken> {\n-    match element {\n-        NodeOrToken::Node(it) => it.green().into(),\n-        NodeOrToken::Token(it) => it.green().to_owned().into(),\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};"}, {"sha": "ecf46d8969f61242e65e091f15670a6ab830b56d", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182a2b8e72eee2faaef0ef17330937bd0edaa4b6/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=182a2b8e72eee2faaef0ef17330937bd0edaa4b6", "patch": "@@ -47,7 +47,6 @@ use stdx::format_to;\n use text_edit::Indel;\n \n pub use crate::{\n-    algo::InsertPosition,\n     ast::{AstNode, AstToken},\n     parsing::lexer::{lex_single_syntax_kind, lex_single_valid_syntax_kind, tokenize, Token},\n     ptr::{AstPtr, SyntaxNodePtr},"}]}