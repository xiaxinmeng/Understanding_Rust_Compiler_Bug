{"sha": "7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNzMwN2U1Y2YwOGFkMjVkZTYyZDRmOWUxM2RkZDU4YzU5ODgxYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T23:04:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-18T23:04:55Z"}, "message": "Auto merge of #31006 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #30981, #30982, #30986, #30987, #30988, #30990, #30998\n- Failed merges:", "tree": {"sha": "820859c29acb4d70f0942d1076b3928467c9a4e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820859c29acb4d70f0942d1076b3928467c9a4e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "html_url": "https://github.com/rust-lang/rust/commit/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc699f2e9be1eaad79ff27f7b0d4ffcc3bbae08", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc699f2e9be1eaad79ff27f7b0d4ffcc3bbae08", "html_url": "https://github.com/rust-lang/rust/commit/acc699f2e9be1eaad79ff27f7b0d4ffcc3bbae08"}, {"sha": "652fa5c0e906eecf1f834db2b1f3373f6b783b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/652fa5c0e906eecf1f834db2b1f3373f6b783b72", "html_url": "https://github.com/rust-lang/rust/commit/652fa5c0e906eecf1f834db2b1f3373f6b783b72"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "287b7b352195cdb77ec62240296da45e8d193625", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/configure", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -1035,7 +1035,7 @@ then\n         if [ -n \"$CFG_OSX_CLANG_VERSION\" ]\n         then\n             case $CFG_OSX_CLANG_VERSION in\n-                (7.0*)\n+                (7.0* | 7.1* | 7.2*)\n                 step_msg \"found ok version of APPLE CLANG: $CFG_OSX_CLANG_VERSION\"\n                 ;;\n                 (*)"}, {"sha": "4193c93c894c4fec4a97b19aa3a5ce1ccf1b0509", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -353,8 +353,8 @@ fn frob<'a, 'b>(s: &'a str, t: &'b str) -> &str; // Expanded: Output lifetime is\n fn get_mut(&mut self) -> &mut T; // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T; // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n-fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n+fn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command; // elided\n+fn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command; // expanded\n \n fn new(buf: &mut [u8]) -> BufWriter; // elided\n fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>; // expanded"}, {"sha": "f5a0cd5e2c6a30b9793c39f817fa9e2220ed76a9", "filename": "src/doc/book/macros.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fbook%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fbook%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmacros.md?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -285,9 +285,11 @@ This expands to\n \n ```text\n const char *state = \"reticulating splines\";\n-int state = get_log_state();\n-if (state > 0) {\n-    printf(\"log(%d): %s\\n\", state, state);\n+{\n+    int state = get_log_state();\n+    if (state > 0) {\n+        printf(\"log(%d): %s\\n\", state, state);\n+    }\n }\n ```\n "}, {"sha": "bcd93a58d859a96d8807f7bd8b10baf6af1264a8", "filename": "src/doc/nomicon/lifetime-elision.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fnomicon%2Flifetime-elision.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Fdoc%2Fnomicon%2Flifetime-elision.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Flifetime-elision.md?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -55,8 +55,8 @@ fn frob(s: &str, t: &str) -> &str;                      // ILLEGAL\n fn get_mut(&mut self) -> &mut T;                        // elided\n fn get_mut<'a>(&'a mut self) -> &'a mut T;              // expanded\n \n-fn args<T:ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n-fn args<'a, 'b, T:ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n+fn args<T: ToCStr>(&mut self, args: &[T]) -> &mut Command                  // elided\n+fn args<'a, 'b, T: ToCStr>(&'a mut self, args: &'b [T]) -> &'a mut Command // expanded\n \n fn new(buf: &mut [u8]) -> BufWriter;                    // elided\n fn new<'a>(buf: &'a mut [u8]) -> BufWriter<'a>          // expanded"}, {"sha": "91fc8d8217f53b487921e33e45e56f6e39c61124", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -14,7 +14,7 @@\n use core::cmp::Ordering::{self, Less, Greater, Equal};\n use core::fmt::Debug;\n use core::fmt;\n-use core::iter::{Peekable, Map, FromIterator};\n+use core::iter::{Peekable, FromIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub};\n \n use borrow::Borrow;\n@@ -52,12 +52,12 @@ pub struct Iter<'a, T: 'a> {\n /// An owning iterator over a BTreeSet's items.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n-    iter: Map<::btree_map::IntoIter<T, ()>, fn((T, ())) -> T>,\n+    iter: ::btree_map::IntoIter<T, ()>,\n }\n \n /// An iterator over a sub-range of BTreeSet's items.\n pub struct Range<'a, T: 'a> {\n-    iter: Map<::btree_map::Range<'a, T, ()>, fn((&'a T, &'a ())) -> &'a T>,\n+    iter: ::btree_map::Range<'a, T, ()>,\n }\n \n /// A lazy iterator producing elements in the set difference (in-order).\n@@ -160,12 +160,7 @@ impl<T: Ord> BTreeSet<T> {\n                                                            -> Range<'a, T>\n         where T: Borrow<Min> + Borrow<Max>\n     {\n-        fn first<A, B>((a, _): (A, B)) -> A {\n-            a\n-        }\n-        let first: fn((&'a T, &'a ())) -> &'a T = first; // coerce to fn pointer\n-\n-        Range { iter: self.map.range(min, max).map(first) }\n+        Range { iter: self.map.range(min, max) }\n     }\n }\n \n@@ -548,12 +543,7 @@ impl<T> IntoIterator for BTreeSet<T> {\n     /// assert_eq!(v, [1, 2, 3, 4]);\n     /// ```\n     fn into_iter(self) -> IntoIter<T> {\n-        fn first<A, B>((a, _): (A, B)) -> A {\n-            a\n-        }\n-        let first: fn((T, ())) -> T = first; // coerce to fn pointer\n-\n-        IntoIter { iter: self.map.into_iter().map(first) }\n+        IntoIter { iter: self.map.into_iter() }\n     }\n }\n \n@@ -721,7 +711,7 @@ impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> {\n-        self.iter.next()\n+        self.iter.next().map(|(k, _)| k)\n     }\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         self.iter.size_hint()\n@@ -730,7 +720,7 @@ impl<T> Iterator for IntoIter<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     fn next_back(&mut self) -> Option<T> {\n-        self.iter.next_back()\n+        self.iter.next_back().map(|(k, _)| k)\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -746,12 +736,12 @@ impl<'a, T> Iterator for Range<'a, T> {\n     type Item = &'a T;\n \n     fn next(&mut self) -> Option<&'a T> {\n-        self.iter.next()\n+        self.iter.next().map(|(k, _)| k)\n     }\n }\n impl<'a, T> DoubleEndedIterator for Range<'a, T> {\n     fn next_back(&mut self) -> Option<&'a T> {\n-        self.iter.next_back()\n+        self.iter.next_back().map(|(k, _)| k)\n     }\n }\n "}, {"sha": "97b01a607f5e602a06ea3d30f9b373f3c9c8fec3", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -348,8 +348,8 @@\n //! The fill character is provided normally in conjunction with the `width`\n //! parameter. This indicates that if the value being formatted is smaller than\n //! `width` some extra characters will be printed around it. The extra\n-//! characters are specified by `fill`, and the alignment can be one of two\n-//! options:\n+//! characters are specified by `fill`, and the alignment can be one of the\n+//! following options:\n //!\n //! * `<` - the argument is left-aligned in `width` columns\n //! * `^` - the argument is center-aligned in `width` columns"}, {"sha": "9ce1a111cf83a18f36f31dd8543450abb5237101", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -302,7 +302,7 @@ impl str {\n     /// # Safety\n     ///\n     /// Callers of this function are responsible that three preconditions are\n-    /// satisifed:\n+    /// satisfied:\n     ///\n     /// * `begin` must come before `end`.\n     /// * `begin` and `end` must be byte positions within the string slice.\n@@ -345,7 +345,7 @@ impl str {\n     /// # Safety\n     ///\n     /// Callers of this function are responsible that three preconditions are\n-    /// satisifed:\n+    /// satisfied:\n     ///\n     /// * `begin` must come before `end`.\n     /// * `begin` and `end` must be byte positions within the string slice."}, {"sha": "fee183433285e305a0ae541ceeb60d6986d20164", "filename": "src/libcollectionstest/btree/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcollectionstest%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fset.rs?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -254,3 +254,13 @@ fn test_recovery() {\n \n     assert_eq!(s.iter().next(), None);\n }\n+\n+#[test]\n+fn test_variance() {\n+    use std::collections::btree_set::{IntoIter, Iter, Range};\n+\n+    fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> { v }\n+    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> { v }\n+    fn into_iter<'new>(v: IntoIter<&'static str>) -> IntoIter<&'new str> { v }\n+    fn range<'a, 'new>(v: Range<'a, &'static str>) -> Range<'a, &'new str> { v }\n+}"}, {"sha": "1ed2a219fac3a5f03499d2a1532b90b064bc516a", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7307e5cf08ad25de62d4f9e13ddd58c59881c8/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=7a7307e5cf08ad25de62d4f9e13ddd58c59881c8", "patch": "@@ -333,7 +333,7 @@ macro_rules! impls{\n /// use std::marker::PhantomData;\n ///\n /// # #[allow(dead_code)]\n-/// struct Slice<'a, T:'a> {\n+/// struct Slice<'a, T: 'a> {\n ///     start: *const T,\n ///     end: *const T,\n ///     phantom: PhantomData<&'a T>\n@@ -428,18 +428,18 @@ mod impls {\n /// use std::any::Any;\n ///\n /// # #[allow(dead_code)]\n-/// fn foo<T:Reflect+'static>(x: &T) {\n+/// fn foo<T: Reflect + 'static>(x: &T) {\n ///     let any: &Any = x;\n ///     if any.is::<u32>() { println!(\"u32\"); }\n /// }\n /// ```\n ///\n-/// Without the declaration `T:Reflect`, `foo` would not type check\n+/// Without the declaration `T: Reflect`, `foo` would not type check\n /// (note: as a matter of style, it would be preferable to write\n-/// `T:Any`, because `T:Any` implies `T:Reflect` and `T:'static`, but\n+/// `T: Any`, because `T: Any` implies `T: Reflect` and `T: 'static`, but\n /// we use `Reflect` here to show how it works). The `Reflect` bound\n /// thus serves to alert `foo`'s caller to the fact that `foo` may\n-/// behave differently depending on whether `T=u32` or not. In\n+/// behave differently depending on whether `T = u32` or not. In\n /// particular, thanks to the `Reflect` bound, callers know that a\n /// function declared like `fn bar<T>(...)` will always act in\n /// precisely the same way no matter what type `T` is supplied,"}]}