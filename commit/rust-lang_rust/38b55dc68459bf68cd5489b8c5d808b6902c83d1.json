{"sha": "38b55dc68459bf68cd5489b8c5d808b6902c83d1", "node_id": "C_kwDOAAsO6NoAKDM4YjU1ZGM2ODQ1OWJmNjhjZDU0ODliOGM1ZDgwOGI2OTAyYzgzZDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-15T15:30:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T18:22:45Z"}, "message": "Add tests.", "tree": {"sha": "0ce29f0d21c7deea2f66eca3e681f92f92552df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce29f0d21c7deea2f66eca3e681f92f92552df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38b55dc68459bf68cd5489b8c5d808b6902c83d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38b55dc68459bf68cd5489b8c5d808b6902c83d1", "html_url": "https://github.com/rust-lang/rust/commit/38b55dc68459bf68cd5489b8c5d808b6902c83d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38b55dc68459bf68cd5489b8c5d808b6902c83d1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed9f8f62ebe52f388f9098fb4c05791f588729b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed9f8f62ebe52f388f9098fb4c05791f588729b", "html_url": "https://github.com/rust-lang/rust/commit/6ed9f8f62ebe52f388f9098fb4c05791f588729b"}], "stats": {"total": 453, "additions": 453, "deletions": 0}, "files": [{"sha": "8b116532d9f5d46abb0b2547a541c1ac3959dd82", "filename": "tests/mir-opt/copy-prop/branch.foo.CopyProp.diff", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.foo.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,65 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo() -> i32 {\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/branch.rs:+0:13: +0:16\n+      let _1: i32;                         // in scope 0 at $DIR/branch.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/branch.rs:+3:16: +3:22\n+      let _4: i32;                         // in scope 0 at $DIR/branch.rs:+6:9: +6:14\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/branch.rs:+1:9: +1:10\n+          let _2: i32;                     // in scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/branch.rs:+3:9: +3:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/branch.rs:+1:9: +1:10\n+          _1 = val() -> bb1;               // scope 0 at $DIR/branch.rs:+1:13: +1:18\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:13:13: 13:16\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageLive(_2);                 // scope 1 at $DIR/branch.rs:+3:9: +3:10\n+          StorageLive(_3);                 // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+          _3 = cond() -> bb2;              // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:15:16: 15:20\n+                                           // + literal: Const { ty: fn() -> bool {cond}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at $DIR/branch.rs:+3:16: +3:22\n+      }\n+  \n+      bb3: {\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+4:9: +4:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_4);                 // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+          _4 = val() -> bb5;               // scope 1 at $DIR/branch.rs:+6:9: +6:14\n+                                           // mir::Constant\n+                                           // + span: $DIR/branch.rs:18:9: 18:12\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_4);                 // scope 1 at $DIR/branch.rs:+6:14: +6:15\n+          _2 = _1;                         // scope 1 at $DIR/branch.rs:+7:9: +7:10\n+          goto -> bb6;                     // scope 1 at $DIR/branch.rs:+3:13: +8:6\n+      }\n+  \n+      bb6: {\n+          StorageDead(_3);                 // scope 1 at $DIR/branch.rs:+8:5: +8:6\n+          _0 = _2;                         // scope 2 at $DIR/branch.rs:+10:5: +10:6\n+          StorageDead(_2);                 // scope 1 at $DIR/branch.rs:+11:1: +11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/branch.rs:+11:1: +11:2\n+          return;                          // scope 0 at $DIR/branch.rs:+11:2: +11:2\n+      }\n+  }\n+  "}, {"sha": "50b1e00fad4f7ad963b0b1d60a30f8ed25589400", "filename": "tests/mir-opt/copy-prop/branch.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fbranch.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,27 @@\n+//! Tests that we bail out when there are multiple assignments to the same local.\n+// unit-test: CopyProp\n+fn val() -> i32 {\n+    1\n+}\n+\n+fn cond() -> bool {\n+    true\n+}\n+\n+// EMIT_MIR branch.foo.CopyProp.diff\n+fn foo() -> i32 {\n+    let x = val();\n+\n+    let y = if cond() {\n+        x\n+    } else {\n+        val();\n+        x\n+    };\n+\n+    y\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "69acebf7642e950be8f94bfdabc37e7e8201e6d6", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.arg_src.CopyProp.diff", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.arg_src.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,21 @@\n+- // MIR for `arg_src` before CopyProp\n++ // MIR for `arg_src` after CopyProp\n+  \n+  fn arg_src(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:12: +0:17\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:27: +0:30\n+      let _2: i32;                         // in scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      scope 1 {\n+          debug y => _2;                   // in scope 1 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:9: +1:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 123_i32;              // scope 1 at $DIR/copy_propagation_arg.rs:+2:5: +2:12\n+          _0 = _2;                         // scope 1 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "ac4e9a2bfa735c610f43f6a573018a43fa60f5ad", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.bar.CopyProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.bar.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `bar` before CopyProp\n++ // MIR for `bar` after CopyProp\n+  \n+  fn bar(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let _2: u8;                          // in scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+1:11: +1:12\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+1:5: +1:13\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:16:5: 16:10\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:12: +1:13\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+1:13: +1:14\n+          _1 = const 5_u8;                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "7ab6ebb7d53e00d3f41a1eacc7d7e92e07a1736d", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.baz.CopyProp.diff", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.baz.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,18 @@\n+- // MIR for `baz` before CopyProp\n++ // MIR for `baz` after CopyProp\n+  \n+  fn baz(_1: i32) -> i32 {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: i32;                     // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:23: +0:26\n+      let mut _2: i32;                     // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:10\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:10\n+          _0 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+3:5: +3:6\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "0a3e985e7c260c8cbdbb636411e7c5c612c1e391", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.foo.CopyProp.diff", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.foo.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,28 @@\n+- // MIR for `foo` before CopyProp\n++ // MIR for `foo` after CopyProp\n+  \n+  fn foo(_1: u8) -> () {\n+      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:+0:8: +0:13\n+      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +0:19\n+      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:+2:15: +2:16\n+          _2 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:+2:9: +2:17\n+                                           // mir::Constant\n+                                           // + span: $DIR/copy_propagation_arg.rs:11:9: 11:14\n+                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _1 = move _2;                    // scope 0 at $DIR/copy_propagation_arg.rs:+2:5: +2:17\n+          StorageDead(_2);                 // scope 0 at $DIR/copy_propagation_arg.rs:+2:16: +2:17\n+          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "cc98985f1fda6131e78f34af8d86c76afae21c50", "filename": "tests/mir-opt/copy-prop/copy_propagation_arg.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcopy_propagation_arg.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,40 @@\n+// Check that CopyProp does not propagate an assignment to a function argument\n+// (doing so can break usages of the original argument value)\n+// unit-test: CopyProp\n+fn dummy(x: u8) -> u8 {\n+    x\n+}\n+\n+// EMIT_MIR copy_propagation_arg.foo.CopyProp.diff\n+fn foo(mut x: u8) {\n+    // calling `dummy` to make a use of `x` that copyprop cannot eliminate\n+    x = dummy(x); // this will assign a local to `x`\n+}\n+\n+// EMIT_MIR copy_propagation_arg.bar.CopyProp.diff\n+fn bar(mut x: u8) {\n+    dummy(x);\n+    x = 5;\n+}\n+\n+// EMIT_MIR copy_propagation_arg.baz.CopyProp.diff\n+fn baz(mut x: i32) -> i32 {\n+    // self-assignment to a function argument should be eliminated\n+    x = x;\n+    x\n+}\n+\n+// EMIT_MIR copy_propagation_arg.arg_src.CopyProp.diff\n+fn arg_src(mut x: i32) -> i32 {\n+    let y = x;\n+    x = 123; // Don't propagate this assignment to `y`\n+    y\n+}\n+\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    foo(0);\n+    bar(0);\n+    baz(0);\n+    arg_src(0);\n+}"}, {"sha": "3e61869e82f11f2085a133825c7ea62b86d52ed9", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+      let mut _4: i32;                     // in scope 0 at $DIR/cycle.rs:+4:9: +4:10\n+      let _5: ();                          // in scope 0 at $DIR/cycle.rs:+6:5: +6:12\n+      let mut _6: i32;                     // in scope 0 at $DIR/cycle.rs:+6:10: +6:11\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/cycle.rs:+1:9: +1:14\n+          let _2: i32;                     // in scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/cycle.rs:+2:9: +2:10\n+              let _3: i32;                 // in scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n++                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/cycle.rs:+1:9: +1:14\n+          _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:+1:17: +1:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:9:17: 9:20\n+                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+          _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n+-         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n+-         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14\n+-         StorageLive(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _4 = _3;                         // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n+-         _1 = move _4;                    // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+-         StorageDead(_4);                 // scope 3 at $DIR/cycle.rs:+4:9: +4:10\n++         _1 = _2;                         // scope 3 at $DIR/cycle.rs:+4:5: +4:10\n+          StorageLive(_5);                 // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+          StorageLive(_6);                 // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _6 = _1;                         // scope 3 at $DIR/cycle.rs:+6:10: +6:11\n+          _5 = std::mem::drop::<i32>(move _6) -> bb2; // scope 3 at $DIR/cycle.rs:+6:5: +6:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/cycle.rs:14:5: 14:9\n+                                           // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_6);                 // scope 3 at $DIR/cycle.rs:+6:11: +6:12\n+          StorageDead(_5);                 // scope 3 at $DIR/cycle.rs:+6:12: +6:13\n+          _0 = const ();                   // scope 0 at $DIR/cycle.rs:+0:11: +7:2\n+-         StorageDead(_3);                 // scope 2 at $DIR/cycle.rs:+7:1: +7:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/cycle.rs:+7:1: +7:2\n+          StorageDead(_1);                 // scope 0 at $DIR/cycle.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/cycle.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "b74c397269deed8312d4156e4f7a5ac4e0d974cc", "filename": "tests/mir-opt/copy-prop/cycle.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,15 @@\n+//! Tests that cyclic assignments don't hang CopyProp, and result in reasonable code.\n+// unit-test: CopyProp\n+fn val() -> i32 {\n+    1\n+}\n+\n+// EMIT_MIR cycle.main.CopyProp.diff\n+fn main() {\n+    let mut x = val();\n+    let y = x;\n+    let z = y;\n+    x = z;\n+\n+    drop(x);\n+}"}, {"sha": "d48b04e2de273887ca85aa141f8812c1a36be817", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,29 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_79191.rs:+0:6: +0:11\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_79191.rs:+0:23: +0:28\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_79191.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_79191.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_79191.rs:12:5: 12:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_79191.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_79191.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "e3493b8b7a1858b88cb9aaddd8ec863ce4c3d3dd", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,17 @@\n+// unit-test: CopyProp\n+\n+fn id<T>(x: T) -> T {\n+    x\n+}\n+\n+// EMIT_MIR dead_stores_79191.f.CopyProp.after.mir\n+fn f(mut a: usize) -> usize {\n+    let b = a;\n+    a = 5;\n+    a = b;\n+    id(a)\n+}\n+\n+fn main() {\n+    f(0);\n+}"}, {"sha": "727791f50a4ef67b0b15283df8ff7677ebbea1d5", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,29 @@\n+// MIR for `f` after CopyProp\n+\n+fn f(_1: usize) -> usize {\n+    debug a => _1;                       // in scope 0 at $DIR/dead_stores_better.rs:+0:10: +0:15\n+    let mut _0: usize;                   // return place in scope 0 at $DIR/dead_stores_better.rs:+0:27: +0:32\n+    let _2: usize;                       // in scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    let mut _3: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+3:9: +3:10\n+    let mut _4: usize;                   // in scope 0 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+    scope 1 {\n+        debug b => _2;                   // in scope 1 at $DIR/dead_stores_better.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n+        _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n+        _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10\n+        StorageLive(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _4 = _1;                         // scope 1 at $DIR/dead_stores_better.rs:+4:8: +4:9\n+        _0 = id::<usize>(move _4) -> bb1; // scope 1 at $DIR/dead_stores_better.rs:+4:5: +4:10\n+                                         // mir::Constant\n+                                         // + span: $DIR/dead_stores_better.rs:16:5: 16:7\n+                                         // + literal: Const { ty: fn(usize) -> usize {id::<usize>}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageDead(_4);                 // scope 1 at $DIR/dead_stores_better.rs:+4:9: +4:10\n+        return;                          // scope 0 at $DIR/dead_stores_better.rs:+5:2: +5:2\n+    }\n+}"}, {"sha": "8465b3c98536e64f172257dfaf15605d10030529", "filename": "tests/mir-opt/copy-prop/dead_stores_better.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,21 @@\n+// This is a copy of the `dead_stores_79191` test, except that we turn on DSE. This demonstrates\n+// that that pass enables this one to do more optimizations.\n+\n+// unit-test: CopyProp\n+// compile-flags: -Zmir-enable-passes=+DeadStoreElimination\n+\n+fn id<T>(x: T) -> T {\n+    x\n+}\n+\n+// EMIT_MIR dead_stores_better.f.CopyProp.after.mir\n+pub fn f(mut a: usize) -> usize {\n+    let b = a;\n+    a = 5;\n+    a = b;\n+    id(a)\n+}\n+\n+fn main() {\n+    f(0);\n+}"}, {"sha": "d76bf1cfe7e0e0f4112fdf8ce38b00397209d7be", "filename": "tests/mir-opt/copy-prop/move_arg.f.CopyProp.diff", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.f.CopyProp.diff?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,40 @@\n+- // MIR for `f` before CopyProp\n++ // MIR for `f` after CopyProp\n+  \n+  fn f(_1: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/move_arg.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/move_arg.rs:+0:25: +0:25\n+      let _2: T;                           // in scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+      let _3: ();                          // in scope 0 at $DIR/move_arg.rs:+2:5: +2:12\n+      let mut _4: T;                       // in scope 0 at $DIR/move_arg.rs:+2:7: +2:8\n+      let mut _5: T;                       // in scope 0 at $DIR/move_arg.rs:+2:10: +2:11\n+      scope 1 {\n+-         debug b => _2;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n++         debug b => _1;                   // in scope 1 at $DIR/move_arg.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/move_arg.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/move_arg.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+-         StorageLive(_4);                 // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         _4 = _1;                         // scope 1 at $DIR/move_arg.rs:+2:7: +2:8\n+-         StorageLive(_5);                 // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _5 = _2;                         // scope 1 at $DIR/move_arg.rs:+2:10: +2:11\n+-         _3 = g::<T>(move _4, move _5) -> bb1; // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n++         _3 = g::<T>(_1, _1) -> bb1;      // scope 1 at $DIR/move_arg.rs:+2:5: +2:12\n+                                           // mir::Constant\n+                                           // + span: $DIR/move_arg.rs:7:5: 7:6\n+                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_5);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+-         StorageDead(_4);                 // scope 1 at $DIR/move_arg.rs:+2:11: +2:12\n+          StorageDead(_3);                 // scope 1 at $DIR/move_arg.rs:+2:12: +2:13\n+          _0 = const ();                   // scope 0 at $DIR/move_arg.rs:+0:25: +3:2\n+-         StorageDead(_2);                 // scope 0 at $DIR/move_arg.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/move_arg.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "40ae1d8f466198c97d64dc21e452cd05060e6f92", "filename": "tests/mir-opt/copy-prop/move_arg.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38b55dc68459bf68cd5489b8c5d808b6902c83d1/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fmove_arg.rs?ref=38b55dc68459bf68cd5489b8c5d808b6902c83d1", "patch": "@@ -0,0 +1,15 @@\n+// Test that we do not move multiple times from the same local.\n+// unit-test: CopyProp\n+\n+// EMIT_MIR move_arg.f.CopyProp.diff\n+pub fn f<T: Copy>(a: T) {\n+    let b = a;\n+    g(a, b);\n+}\n+\n+#[inline(never)]\n+pub fn g<T: Copy>(_: T, _: T) {}\n+\n+fn main() {\n+    f(5)\n+}"}]}