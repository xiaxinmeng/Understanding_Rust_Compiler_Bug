{"sha": "cfc01150bf9793934f504c5cfdef680c3799ddea", "node_id": "C_kwDOAAsO6NoAKGNmYzAxMTUwYmY5NzkzOTM0ZjUwNGM1Y2ZkZWY2ODBjMzc5OWRkZWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T12:45:20Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T12:45:20Z"}, "message": "implement `AstNode` for `Either`", "tree": {"sha": "1f8d757c8ab50db8756b17e750fa3726e5590ff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f8d757c8ab50db8756b17e750fa3726e5590ff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfc01150bf9793934f504c5cfdef680c3799ddea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc01150bf9793934f504c5cfdef680c3799ddea", "html_url": "https://github.com/rust-lang/rust/commit/cfc01150bf9793934f504c5cfdef680c3799ddea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfc01150bf9793934f504c5cfdef680c3799ddea/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32be158630e0b011a24545b07282753e6de37dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/32be158630e0b011a24545b07282753e6de37dd3", "html_url": "https://github.com/rust-lang/rust/commit/32be158630e0b011a24545b07282753e6de37dd3"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "b801cd785e008e9825aa95395a4e0679d889e5db", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cfc01150bf9793934f504c5cfdef680c3799ddea/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc01150bf9793934f504c5cfdef680c3799ddea/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=cfc01150bf9793934f504c5cfdef680c3799ddea", "patch": "@@ -1472,14 +1472,7 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn is_inside_unsafe(&self, expr: &ast::Expr) -> bool {\n-        let item_or_variant = |ancestor: SyntaxNode| {\n-            if ast::Item::can_cast(ancestor.kind()) {\n-                ast::Item::cast(ancestor).map(Either::Left)\n-            } else {\n-                ast::Variant::cast(ancestor).map(Either::Right)\n-            }\n-        };\n-        let Some(enclosing_item) = expr.syntax().ancestors().find_map(item_or_variant) else { return false };\n+        let Some(enclosing_item) = expr.syntax().ancestors().find_map(Either::<ast::Item, ast::Variant>::cast) else { return false };\n \n         let def = match &enclosing_item {\n             Either::Left(ast::Item::Fn(it)) if it.unsafe_token().is_some() => return true,"}, {"sha": "385a4e0a3cee1e5c515c4bbd8996c08387470291", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cfc01150bf9793934f504c5cfdef680c3799ddea/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfc01150bf9793934f504c5cfdef680c3799ddea/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=cfc01150bf9793934f504c5cfdef680c3799ddea", "patch": "@@ -13,6 +13,8 @@ pub mod prec;\n \n use std::marker::PhantomData;\n \n+use itertools::Either;\n+\n use crate::{\n     syntax_node::{SyntaxNode, SyntaxNodeChildren, SyntaxToken},\n     SyntaxKind,\n@@ -98,6 +100,34 @@ impl<N: AstNode> Iterator for AstChildren<N> {\n     }\n }\n \n+impl<L, R> AstNode for Either<L, R>\n+where\n+    L: AstNode,\n+    R: AstNode,\n+{\n+    fn can_cast(kind: SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        L::can_cast(kind) || R::can_cast(kind)\n+    }\n+\n+    fn cast(syntax: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        if L::can_cast(syntax.kind()) {\n+            L::cast(syntax).map(Either::Left)\n+        } else {\n+            R::cast(syntax).map(Either::Right)\n+        }\n+    }\n+\n+    fn syntax(&self) -> &SyntaxNode {\n+        self.as_ref().either(L::syntax, R::syntax)\n+    }\n+}\n+\n mod support {\n     use super::{AstChildren, AstNode, SyntaxKind, SyntaxNode, SyntaxToken};\n "}]}