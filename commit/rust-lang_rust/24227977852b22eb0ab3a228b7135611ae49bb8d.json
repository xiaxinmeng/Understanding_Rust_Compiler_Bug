{"sha": "24227977852b22eb0ab3a228b7135611ae49bb8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjI3OTc3ODUyYjIyZWIwYWIzYTIyOGI3MTM1NjExYWU0OWJiOGQ=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T20:01:33Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-12-11T20:01:33Z"}, "message": "Small Cow improvements", "tree": {"sha": "78dec9ad5de3a7c8fb1aa5ad136229ce2e3b7c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78dec9ad5de3a7c8fb1aa5ad136229ce2e3b7c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24227977852b22eb0ab3a228b7135611ae49bb8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24227977852b22eb0ab3a228b7135611ae49bb8d", "html_url": "https://github.com/rust-lang/rust/commit/24227977852b22eb0ab3a228b7135611ae49bb8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24227977852b22eb0ab3a228b7135611ae49bb8d/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b957a17c1abba979aa41234ce0993a61030e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b957a17c1abba979aa41234ce0993a61030e67", "html_url": "https://github.com/rust-lang/rust/commit/90b957a17c1abba979aa41234ce0993a61030e67"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "fc9604519684682afd284ecb3d33fa595362c536", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/24227977852b22eb0ab3a228b7135611ae49bb8d/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24227977852b22eb0ab3a228b7135611ae49bb8d/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=24227977852b22eb0ab3a228b7135611ae49bb8d", "patch": "@@ -195,14 +195,10 @@ impl<B: ?Sized + ToOwned> Clone for Cow<'_, B> {\n     }\n \n     fn clone_from(&mut self, source: &Self) {\n-        if let Owned(ref mut dest) = *self {\n-            if let Owned(ref o) = *source {\n-                o.borrow().clone_into(dest);\n-                return;\n-            }\n+        match (self, source) {\n+            (&mut Owned(ref mut dest), &Owned(ref o)) => o.borrow().clone_into(dest),\n+            (t, s) => *t = s.clone(),\n         }\n-\n-        *self = source.clone();\n     }\n }\n \n@@ -449,9 +445,7 @@ impl<'a> AddAssign<&'a str> for Cow<'a, str> {\n     fn add_assign(&mut self, rhs: &'a str) {\n         if self.is_empty() {\n             *self = Cow::Borrowed(rhs)\n-        } else if rhs.is_empty() {\n-            return;\n-        } else {\n+        } else if !rhs.is_empty() {\n             if let Cow::Borrowed(lhs) = *self {\n                 let mut s = String::with_capacity(lhs.len() + rhs.len());\n                 s.push_str(lhs);\n@@ -467,9 +461,7 @@ impl<'a> AddAssign<Cow<'a, str>> for Cow<'a, str> {\n     fn add_assign(&mut self, rhs: Cow<'a, str>) {\n         if self.is_empty() {\n             *self = rhs\n-        } else if rhs.is_empty() {\n-            return;\n-        } else {\n+        } else if !rhs.is_empty() {\n             if let Cow::Borrowed(lhs) = *self {\n                 let mut s = String::with_capacity(lhs.len() + rhs.len());\n                 s.push_str(lhs);"}, {"sha": "62a5c245a54297d8bf784951ac7209d7f4253fb7", "filename": "src/liballoc/tests/cow_str.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24227977852b22eb0ab3a228b7135611ae49bb8d/src%2Fliballoc%2Ftests%2Fcow_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24227977852b22eb0ab3a228b7135611ae49bb8d/src%2Fliballoc%2Ftests%2Fcow_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fcow_str.rs?ref=24227977852b22eb0ab3a228b7135611ae49bb8d", "patch": "@@ -138,4 +138,7 @@ fn check_cow_clone_from() {\n     let c2: Cow<'_, str> = Cow::Owned(s);\n     c1.clone_from(&c2);\n     assert!(c1.into_owned().capacity() >= 25);\n+    let mut c3: Cow<'_, str> = Cow::Borrowed(\"bye\");\n+    c3.clone_from(&c2);\n+    assert_eq!(c2, c3);\n }"}]}