{"sha": "b8d6964bcef97da4641d19be59d30814e2a38b9c", "node_id": "C_kwDOAAsO6NoAKGI4ZDY5NjRiY2VmOTdkYTQ2NDFkMTliZTU5ZDMwODE0ZTJhMzhiOWM", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-04-21T08:56:17Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2023-04-21T08:56:17Z"}, "message": "make [`len_zero`] lint not spanning over parenthesis", "tree": {"sha": "53d37d8a807eaf3c861f348f5e8f40f0800f56e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53d37d8a807eaf3c861f348f5e8f40f0800f56e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d6964bcef97da4641d19be59d30814e2a38b9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgdNSG54a38zHE0ZBt6ietdbAsmO\npb49vNvnKR4Ht/ogYAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQGjgQTY8Qb6EeG7S49XImYU2RvQWJitaNn4E0RbAZIfvAkim1xEiehyJze3c85Wu/O\nfECF5ULc1Dm3ZwwEfXOA0=\n-----END SSH SIGNATURE-----", "payload": "tree 53d37d8a807eaf3c861f348f5e8f40f0800f56e7\nparent c976ad07ee5ce330b612caff8d49397e8ddcdc28\nauthor J-ZhengLi <lizheng135@huawei.com> 1682067377 +0800\ncommitter J-ZhengLi <lizheng135@huawei.com> 1682067377 +0800\n\nmake [`len_zero`] lint not spanning over parenthesis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d6964bcef97da4641d19be59d30814e2a38b9c", "html_url": "https://github.com/rust-lang/rust/commit/b8d6964bcef97da4641d19be59d30814e2a38b9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d6964bcef97da4641d19be59d30814e2a38b9c/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c976ad07ee5ce330b612caff8d49397e8ddcdc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c976ad07ee5ce330b612caff8d49397e8ddcdc28", "html_url": "https://github.com/rust-lang/rust/commit/c976ad07ee5ce330b612caff8d49397e8ddcdc28"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "fec9c6f626c60cf89568866b896dd4f823efddbb", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b8d6964bcef97da4641d19be59d30814e2a38b9c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d6964bcef97da4641d19be59d30814e2a38b9c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=b8d6964bcef97da4641d19be59d30814e2a38b9c", "patch": "@@ -168,25 +168,27 @@ impl<'tcx> LateLintPass<'tcx> for LenZero {\n         }\n \n         if let ExprKind::Binary(Spanned { node: cmp, .. }, left, right) = expr.kind {\n+            // expr.span might contains parenthesis, see issue #10529\n+            let actual_span = left.span.with_hi(right.span.hi());\n             match cmp {\n                 BinOpKind::Eq => {\n-                    check_cmp(cx, expr.span, left, right, \"\", 0); // len == 0\n-                    check_cmp(cx, expr.span, right, left, \"\", 0); // 0 == len\n+                    check_cmp(cx, actual_span, left, right, \"\", 0); // len == 0\n+                    check_cmp(cx, actual_span, right, left, \"\", 0); // 0 == len\n                 },\n                 BinOpKind::Ne => {\n-                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len != 0\n-                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 != len\n+                    check_cmp(cx, actual_span, left, right, \"!\", 0); // len != 0\n+                    check_cmp(cx, actual_span, right, left, \"!\", 0); // 0 != len\n                 },\n                 BinOpKind::Gt => {\n-                    check_cmp(cx, expr.span, left, right, \"!\", 0); // len > 0\n-                    check_cmp(cx, expr.span, right, left, \"\", 1); // 1 > len\n+                    check_cmp(cx, actual_span, left, right, \"!\", 0); // len > 0\n+                    check_cmp(cx, actual_span, right, left, \"\", 1); // 1 > len\n                 },\n                 BinOpKind::Lt => {\n-                    check_cmp(cx, expr.span, left, right, \"\", 1); // len < 1\n-                    check_cmp(cx, expr.span, right, left, \"!\", 0); // 0 < len\n+                    check_cmp(cx, actual_span, left, right, \"\", 1); // len < 1\n+                    check_cmp(cx, actual_span, right, left, \"!\", 0); // 0 < len\n                 },\n-                BinOpKind::Ge => check_cmp(cx, expr.span, left, right, \"!\", 1), // len >= 1\n-                BinOpKind::Le => check_cmp(cx, expr.span, right, left, \"!\", 1), // 1 <= len\n+                BinOpKind::Ge => check_cmp(cx, actual_span, left, right, \"!\", 1), // len >= 1\n+                BinOpKind::Le => check_cmp(cx, actual_span, right, left, \"!\", 1), // 1 <= len\n                 _ => (),\n             }\n         }"}, {"sha": "2c22abd7e4b144050a0dddb1e9dc603579c68734", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=b8d6964bcef97da4641d19be59d30814e2a38b9c", "patch": "@@ -176,6 +176,10 @@ fn main() {\n         // No error; `HasWrongIsEmpty` does not have `.is_empty()`.\n         println!(\"Or this!\");\n     }\n+\n+    // issue #10529\n+    (!has_is_empty.is_empty()).then(|| println!(\"This can happen.\"));\n+    (has_is_empty.is_empty()).then(|| println!(\"Or this!\"));\n }\n \n fn test_slice(b: &[u8]) {"}, {"sha": "a011ff976448b6f87286f645222f8504e54347e0", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=b8d6964bcef97da4641d19be59d30814e2a38b9c", "patch": "@@ -176,6 +176,10 @@ fn main() {\n         // No error; `HasWrongIsEmpty` does not have `.is_empty()`.\n         println!(\"Or this!\");\n     }\n+\n+    // issue #10529\n+    (has_is_empty.len() > 0).then(|| println!(\"This can happen.\"));\n+    (has_is_empty.len() == 0).then(|| println!(\"Or this!\"));\n }\n \n fn test_slice(b: &[u8]) {"}, {"sha": "396cfb75fb620a0fb3646d4c549dd55bcb50fc0a", "filename": "tests/ui/len_zero.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8d6964bcef97da4641d19be59d30814e2a38b9c/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=b8d6964bcef97da4641d19be59d30814e2a38b9c", "patch": "@@ -123,10 +123,22 @@ LL |     if with_is_empty.len() == 0 {\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `with_is_empty.is_empty()`\n \n error: length comparison to zero\n-  --> $DIR/len_zero.rs:182:8\n+  --> $DIR/len_zero.rs:181:6\n+   |\n+LL |     (has_is_empty.len() > 0).then(|| println!(\"This can happen.\"));\n+   |      ^^^^^^^^^^^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!has_is_empty.is_empty()`\n+\n+error: length comparison to zero\n+  --> $DIR/len_zero.rs:182:6\n+   |\n+LL |     (has_is_empty.len() == 0).then(|| println!(\"Or this!\"));\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `has_is_empty.is_empty()`\n+\n+error: length comparison to zero\n+  --> $DIR/len_zero.rs:186:8\n    |\n LL |     if b.len() != 0 {}\n    |        ^^^^^^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!b.is_empty()`\n \n-error: aborting due to 21 previous errors\n+error: aborting due to 23 previous errors\n "}]}