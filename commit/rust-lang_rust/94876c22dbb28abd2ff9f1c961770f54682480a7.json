{"sha": "94876c22dbb28abd2ff9f1c961770f54682480a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODc2YzIyZGJiMjhhYmQyZmY5ZjFjOTYxNzcwZjU0NjgyNDgwYTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T15:22:39Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:43Z"}, "message": "lowering: move expr builder methods -> expr.rs", "tree": {"sha": "f296b62411a9ee1e817102bcb8ee848248d1f196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f296b62411a9ee1e817102bcb8ee848248d1f196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94876c22dbb28abd2ff9f1c961770f54682480a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94876c22dbb28abd2ff9f1c961770f54682480a7", "html_url": "https://github.com/rust-lang/rust/commit/94876c22dbb28abd2ff9f1c961770f54682480a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94876c22dbb28abd2ff9f1c961770f54682480a7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cba0ac0bf60644130992bb2b0e730911782e85a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cba0ac0bf60644130992bb2b0e730911782e85a", "html_url": "https://github.com/rust-lang/rust/commit/5cba0ac0bf60644130992bb2b0e730911782e85a"}], "stats": {"total": 357, "additions": 182, "deletions": 175}, "files": [{"sha": "e93a81d74fdcd80e526218fb445599630c371260", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 9, "deletions": 174, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/94876c22dbb28abd2ff9f1c961770f54682480a7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94876c22dbb28abd2ff9f1c961770f54682480a7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=94876c22dbb28abd2ff9f1c961770f54682480a7", "patch": "@@ -1173,6 +1173,13 @@ impl<'a> LoweringContext<'a> {\n         ))\n     }\n \n+    fn lower_fn_body_block(&mut self, decl: &FnDecl, body: &Block) -> hir::BodyId {\n+        self.lower_fn_body(decl, |this| {\n+            let body = this.lower_block(body, false);\n+            this.expr_block(body, ThinVec::new())\n+        })\n+    }\n+\n     fn lower_const_body(&mut self, expr: &Expr) -> hir::BodyId {\n         self.lower_body(|this| (hir_vec![], this.lower_expr(expr)))\n     }\n@@ -3181,10 +3188,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> hir::BodyId {\n         let closure_id = match asyncness {\n             IsAsync::Async { closure_id, .. } => closure_id,\n-            IsAsync::NotAsync => return self.lower_fn_body(&decl, |this| {\n-                let body = this.lower_block(body, false);\n-                this.expr_block(body, ThinVec::new())\n-            }),\n+            IsAsync::NotAsync => return self.lower_fn_body_block(decl, body),\n         };\n \n         self.lower_body(|this| {\n@@ -3786,10 +3790,7 @@ impl<'a> LoweringContext<'a> {\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n             TraitItemKind::Method(ref sig, Some(ref body)) => {\n-                let body_id = self.lower_fn_body(&sig.decl, |this| {\n-                    let body = this.lower_block(body, false);\n-                    this.expr_block(body, ThinVec::new())\n-                });\n+                let body_id = self.lower_fn_body_block(&sig.decl, body);\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n@@ -4566,144 +4567,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn expr_break(&mut self, span: Span, attrs: ThinVec<Attribute>) -> P<hir::Expr> {\n-        let expr_break = hir::ExprKind::Break(self.lower_loop_destination(None), None);\n-        P(self.expr(span, expr_break, attrs))\n-    }\n-\n-    fn expr_call(\n-        &mut self,\n-        span: Span,\n-        e: P<hir::Expr>,\n-        args: hir::HirVec<hir::Expr>,\n-    ) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::Call(e, args), ThinVec::new())\n-    }\n-\n-    // Note: associated functions must use `expr_call_std_path`.\n-    fn expr_call_std_path(\n-        &mut self,\n-        span: Span,\n-        path_components: &[Symbol],\n-        args: hir::HirVec<hir::Expr>,\n-    ) -> hir::Expr {\n-        let path = P(self.expr_std_path(span, path_components, None, ThinVec::new()));\n-        self.expr_call(span, path, args)\n-    }\n-\n-    // Create an expression calling an associated function of an std type.\n-    //\n-    // Associated functions cannot be resolved through the normal `std_path` function,\n-    // as they are resolved differently and so cannot use `expr_call_std_path`.\n-    //\n-    // This function accepts the path component (`ty_path_components`) separately from\n-    // the name of the associated function (`assoc_fn_name`) in order to facilitate\n-    // separate resolution of the type and creation of a path referring to its associated\n-    // function.\n-    fn expr_call_std_assoc_fn(\n-        &mut self,\n-        ty_path_id: hir::HirId,\n-        span: Span,\n-        ty_path_components: &[Symbol],\n-        assoc_fn_name: &str,\n-        args: hir::HirVec<hir::Expr>,\n-    ) -> hir::ExprKind {\n-        let ty_path = P(self.std_path(span, ty_path_components, None, false));\n-        let ty = P(self.ty_path(ty_path_id, span, hir::QPath::Resolved(None, ty_path)));\n-        let fn_seg = P(hir::PathSegment::from_ident(Ident::from_str(assoc_fn_name)));\n-        let fn_path = hir::QPath::TypeRelative(ty, fn_seg);\n-        let fn_expr = P(self.expr(span, hir::ExprKind::Path(fn_path), ThinVec::new()));\n-        hir::ExprKind::Call(fn_expr, args)\n-    }\n-\n-    fn expr_ident(&mut self, span: Span, ident: Ident, binding: hir::HirId) -> hir::Expr {\n-        self.expr_ident_with_attrs(span, ident, binding, ThinVec::new())\n-    }\n-\n-    fn expr_ident_with_attrs(\n-        &mut self,\n-        span: Span,\n-        ident: Ident,\n-        binding: hir::HirId,\n-        attrs: ThinVec<Attribute>,\n-    ) -> hir::Expr {\n-        let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n-            None,\n-            P(hir::Path {\n-                span,\n-                res: Res::Local(binding),\n-                segments: hir_vec![hir::PathSegment::from_ident(ident)],\n-            }),\n-        ));\n-\n-        self.expr(span, expr_path, attrs)\n-    }\n-\n-    fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::AddrOf(hir::MutMutable, e), ThinVec::new())\n-    }\n-\n-    fn expr_std_path(\n-        &mut self,\n-        span: Span,\n-        components: &[Symbol],\n-        params: Option<P<hir::GenericArgs>>,\n-        attrs: ThinVec<Attribute>,\n-    ) -> hir::Expr {\n-        let path = self.std_path(span, components, params, true);\n-        self.expr(\n-            span,\n-            hir::ExprKind::Path(hir::QPath::Resolved(None, P(path))),\n-            attrs,\n-        )\n-    }\n-\n-    /// Wrap the given `expr` in a terminating scope using `hir::ExprKind::DropTemps`.\n-    ///\n-    /// In terms of drop order, it has the same effect as wrapping `expr` in\n-    /// `{ let _t = $expr; _t }` but should provide better compile-time performance.\n-    ///\n-    /// The drop order can be important in e.g. `if expr { .. }`.\n-    fn expr_drop_temps(\n-        &mut self,\n-        span: Span,\n-        expr: P<hir::Expr>,\n-        attrs: ThinVec<Attribute>\n-    ) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::DropTemps(expr), attrs)\n-    }\n-\n-    fn expr_match(\n-        &mut self,\n-        span: Span,\n-        arg: P<hir::Expr>,\n-        arms: hir::HirVec<hir::Arm>,\n-        source: hir::MatchSource,\n-    ) -> hir::Expr {\n-        self.expr(span, hir::ExprKind::Match(arg, arms, source), ThinVec::new())\n-    }\n-\n-    fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        self.expr(b.span, hir::ExprKind::Block(b, None), attrs)\n-    }\n-\n-    fn expr_unit(&mut self, sp: Span) -> hir::Expr {\n-        self.expr_tuple(sp, hir_vec![])\n-    }\n-\n-    fn expr_tuple(&mut self, sp: Span, exprs: hir::HirVec<hir::Expr>) -> hir::Expr {\n-        self.expr(sp, hir::ExprKind::Tup(exprs), ThinVec::new())\n-    }\n-\n-    fn expr(&mut self, span: Span, node: hir::ExprKind, attrs: ThinVec<Attribute>) -> hir::Expr {\n-        hir::Expr {\n-            hir_id: self.next_id(),\n-            node,\n-            span,\n-            attrs,\n-        }\n-    }\n-\n     fn stmt(&mut self, span: Span, node: hir::StmtKind) -> hir::Stmt {\n         hir::Stmt { span, node, hir_id: self.next_id() }\n     }\n@@ -4732,11 +4595,6 @@ impl<'a> LoweringContext<'a> {\n         self.stmt(span, hir::StmtKind::Local(P(local)))\n     }\n \n-    fn expr_block_empty(&mut self, span: Span) -> hir::Expr {\n-        let blk = self.block_all(span, hir_vec![], None);\n-        self.expr_block(P(blk), ThinVec::new())\n-    }\n-\n     fn block_expr(&mut self, expr: P<hir::Expr>) -> hir::Block {\n         self.block_all(expr.span, hir::HirVec::new(), Some(expr))\n     }\n@@ -4757,29 +4615,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn expr_unsafe(&mut self, expr: P<hir::Expr>) -> hir::Expr {\n-        let hir_id = self.next_id();\n-        let span = expr.span;\n-        self.expr(\n-            span,\n-            hir::ExprKind::Block(P(hir::Block {\n-                stmts: hir_vec![],\n-                expr: Some(expr),\n-                hir_id,\n-                rules: hir::UnsafeBlock(hir::CompilerGenerated),\n-                span,\n-                targeted_by_break: false,\n-            }), None),\n-            ThinVec::new(),\n-        )\n-    }\n-\n-    /// Constructs a `true` or `false` literal expression.\n-    fn expr_bool(&mut self, span: Span, val: bool) -> hir::Expr {\n-        let lit = Spanned { span, node: LitKind::Bool(val) };\n-        self.expr(span, hir::ExprKind::Lit(lit), ThinVec::new())\n-    }\n-\n     /// Constructs a `true` or `false` literal pattern.\n     fn pat_bool(&mut self, span: Span, val: bool) -> P<hir::Pat> {\n         let expr = self.expr_bool(span, val);"}, {"sha": "0092616cc397b53999c817bcd552edf34785ccd4", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 173, "deletions": 1, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/94876c22dbb28abd2ff9f1c961770f54682480a7/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94876c22dbb28abd2ff9f1c961770f54682480a7/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=94876c22dbb28abd2ff9f1c961770f54682480a7", "patch": "@@ -1,13 +1,14 @@\n use super::{LoweringContext, ParamMode, ParenthesizedGenericArgs, ImplTraitContext};\n use crate::hir::{self, HirVec};\n+use crate::hir::def::Res;\n use crate::hir::ptr::P;\n \n use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::attr;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n-use syntax::source_map::{respan, DesugaringKind, Span};\n+use syntax::source_map::{respan, DesugaringKind, Span, Spanned};\n use syntax::symbol::{sym, Symbol};\n \n impl LoweringContext<'_> {\n@@ -1108,4 +1109,175 @@ impl LoweringContext<'_> {\n             hir::MatchSource::TryDesugar,\n         )\n     }\n+\n+    /// Constructs a `true` or `false` literal expression.\n+    pub(super) fn expr_bool(&mut self, span: Span, val: bool) -> hir::Expr {\n+        let lit = Spanned { span, node: LitKind::Bool(val) };\n+        self.expr(span, hir::ExprKind::Lit(lit), ThinVec::new())\n+    }\n+\n+    /// Wrap the given `expr` in a terminating scope using `hir::ExprKind::DropTemps`.\n+    ///\n+    /// In terms of drop order, it has the same effect as wrapping `expr` in\n+    /// `{ let _t = $expr; _t }` but should provide better compile-time performance.\n+    ///\n+    /// The drop order can be important in e.g. `if expr { .. }`.\n+    fn expr_drop_temps(\n+        &mut self,\n+        span: Span,\n+        expr: P<hir::Expr>,\n+        attrs: ThinVec<Attribute>\n+    ) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::DropTemps(expr), attrs)\n+    }\n+\n+    fn expr_match(\n+        &mut self,\n+        span: Span,\n+        arg: P<hir::Expr>,\n+        arms: hir::HirVec<hir::Arm>,\n+        source: hir::MatchSource,\n+    ) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::Match(arg, arms, source), ThinVec::new())\n+    }\n+\n+    fn expr_break(&mut self, span: Span, attrs: ThinVec<Attribute>) -> P<hir::Expr> {\n+        let expr_break = hir::ExprKind::Break(self.lower_loop_destination(None), None);\n+        P(self.expr(span, expr_break, attrs))\n+    }\n+\n+    fn expr_mut_addr_of(&mut self, span: Span, e: P<hir::Expr>) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::AddrOf(hir::MutMutable, e), ThinVec::new())\n+    }\n+\n+    fn expr_unit(&mut self, sp: Span) -> hir::Expr {\n+        self.expr_tuple(sp, hir_vec![])\n+    }\n+\n+    fn expr_tuple(&mut self, sp: Span, exprs: hir::HirVec<hir::Expr>) -> hir::Expr {\n+        self.expr(sp, hir::ExprKind::Tup(exprs), ThinVec::new())\n+    }\n+\n+    fn expr_call(\n+        &mut self,\n+        span: Span,\n+        e: P<hir::Expr>,\n+        args: hir::HirVec<hir::Expr>,\n+    ) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::Call(e, args), ThinVec::new())\n+    }\n+\n+    // Note: associated functions must use `expr_call_std_path`.\n+    fn expr_call_std_path(\n+        &mut self,\n+        span: Span,\n+        path_components: &[Symbol],\n+        args: hir::HirVec<hir::Expr>,\n+    ) -> hir::Expr {\n+        let path = P(self.expr_std_path(span, path_components, None, ThinVec::new()));\n+        self.expr_call(span, path, args)\n+    }\n+\n+    // Create an expression calling an associated function of an std type.\n+    //\n+    // Associated functions cannot be resolved through the normal `std_path` function,\n+    // as they are resolved differently and so cannot use `expr_call_std_path`.\n+    //\n+    // This function accepts the path component (`ty_path_components`) separately from\n+    // the name of the associated function (`assoc_fn_name`) in order to facilitate\n+    // separate resolution of the type and creation of a path referring to its associated\n+    // function.\n+    fn expr_call_std_assoc_fn(\n+        &mut self,\n+        ty_path_id: hir::HirId,\n+        span: Span,\n+        ty_path_components: &[Symbol],\n+        assoc_fn_name: &str,\n+        args: hir::HirVec<hir::Expr>,\n+    ) -> hir::ExprKind {\n+        let ty_path = P(self.std_path(span, ty_path_components, None, false));\n+        let ty = P(self.ty_path(ty_path_id, span, hir::QPath::Resolved(None, ty_path)));\n+        let fn_seg = P(hir::PathSegment::from_ident(Ident::from_str(assoc_fn_name)));\n+        let fn_path = hir::QPath::TypeRelative(ty, fn_seg);\n+        let fn_expr = P(self.expr(span, hir::ExprKind::Path(fn_path), ThinVec::new()));\n+        hir::ExprKind::Call(fn_expr, args)\n+    }\n+\n+    fn expr_std_path(\n+        &mut self,\n+        span: Span,\n+        components: &[Symbol],\n+        params: Option<P<hir::GenericArgs>>,\n+        attrs: ThinVec<Attribute>,\n+    ) -> hir::Expr {\n+        let path = self.std_path(span, components, params, true);\n+        self.expr(\n+            span,\n+            hir::ExprKind::Path(hir::QPath::Resolved(None, P(path))),\n+            attrs,\n+        )\n+    }\n+\n+    pub(super) fn expr_ident(&mut self, sp: Span, ident: Ident, binding: hir::HirId) -> hir::Expr {\n+        self.expr_ident_with_attrs(sp, ident, binding, ThinVec::new())\n+    }\n+\n+    fn expr_ident_with_attrs(\n+        &mut self,\n+        span: Span,\n+        ident: Ident,\n+        binding: hir::HirId,\n+        attrs: ThinVec<Attribute>,\n+    ) -> hir::Expr {\n+        let expr_path = hir::ExprKind::Path(hir::QPath::Resolved(\n+            None,\n+            P(hir::Path {\n+                span,\n+                res: Res::Local(binding),\n+                segments: hir_vec![hir::PathSegment::from_ident(ident)],\n+            }),\n+        ));\n+\n+        self.expr(span, expr_path, attrs)\n+    }\n+\n+    fn expr_unsafe(&mut self, expr: P<hir::Expr>) -> hir::Expr {\n+        let hir_id = self.next_id();\n+        let span = expr.span;\n+        self.expr(\n+            span,\n+            hir::ExprKind::Block(P(hir::Block {\n+                stmts: hir_vec![],\n+                expr: Some(expr),\n+                hir_id,\n+                rules: hir::UnsafeBlock(hir::CompilerGenerated),\n+                span,\n+                targeted_by_break: false,\n+            }), None),\n+            ThinVec::new(),\n+        )\n+    }\n+\n+    fn expr_block_empty(&mut self, span: Span) -> hir::Expr {\n+        let blk = self.block_all(span, hir_vec![], None);\n+        self.expr_block(P(blk), ThinVec::new())\n+    }\n+\n+    pub(super) fn expr_block(&mut self, b: P<hir::Block>, attrs: ThinVec<Attribute>) -> hir::Expr {\n+        self.expr(b.span, hir::ExprKind::Block(b, None), attrs)\n+    }\n+\n+    pub(super) fn expr(\n+        &mut self,\n+        span: Span,\n+        node: hir::ExprKind,\n+        attrs: ThinVec<Attribute>\n+    ) -> hir::Expr {\n+        hir::Expr {\n+            hir_id: self.next_id(),\n+            node,\n+            span,\n+            attrs,\n+        }\n+    }\n }"}]}