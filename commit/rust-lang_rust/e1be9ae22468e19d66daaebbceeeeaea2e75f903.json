{"sha": "e1be9ae22468e19d66daaebbceeeeaea2e75f903", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYmU5YWUyMjQ2OGUxOWQ2NmRhYWViYmNlZWVlYWVhMmU3NWY5MDM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-23T20:30:58Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-25T15:32:25Z"}, "message": "Made fail! and assert! accept both &'static str and ~str, as well as a fmt! like format list.\n\nUnwinding through macros now happens as a call to the trait function `FailWithCause::fail_with()`, which consumes self, allowing to use a more generic failure object in the future.", "tree": {"sha": "dc442111f15ccd656e6ea9598307f57a3bd78b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc442111f15ccd656e6ea9598307f57a3bd78b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1be9ae22468e19d66daaebbceeeeaea2e75f903", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1be9ae22468e19d66daaebbceeeeaea2e75f903", "html_url": "https://github.com/rust-lang/rust/commit/e1be9ae22468e19d66daaebbceeeeaea2e75f903", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1be9ae22468e19d66daaebbceeeeaea2e75f903/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d53babd2f23439975518fda94d9122b15e779c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d53babd2f23439975518fda94d9122b15e779c9", "html_url": "https://github.com/rust-lang/rust/commit/1d53babd2f23439975518fda94d9122b15e779c9"}], "stats": {"total": 116, "additions": 90, "deletions": 26}, "files": [{"sha": "bdc3a17308da59fc2d9035a7c2c0f25b4404b385", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -165,7 +165,42 @@ pub fn log_str<T>(t: &T) -> ~str {\n     }\n }\n \n-/** Initiate task failure */\n+/// Trait for initiating task failure.\n+pub trait FailWithCause {\n+    /// Fail the current task, taking ownership of `cause`\n+    fn fail_with(cause: Self, file: &'static str, line: uint) -> !;\n+}\n+\n+impl FailWithCause for ~str {\n+    fn fail_with(cause: ~str, file: &'static str, line: uint) -> ! {\n+        do str::as_buf(cause) |msg_buf, _msg_len| {\n+            do str::as_buf(file) |file_buf, _file_len| {\n+                unsafe {\n+                    let msg_buf = cast::transmute(msg_buf);\n+                    let file_buf = cast::transmute(file_buf);\n+                    begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl FailWithCause for &'static str {\n+    fn fail_with(cause: &'static str, file: &'static str, line: uint) -> ! {\n+        do str::as_buf(cause) |msg_buf, _msg_len| {\n+            do str::as_buf(file) |file_buf, _file_len| {\n+                unsafe {\n+                    let msg_buf = cast::transmute(msg_buf);\n+                    let file_buf = cast::transmute(file_buf);\n+                    begin_unwind_(msg_buf, file_buf, line as libc::size_t)\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// NOTE: remove function after snapshot\n+#[cfg(stage0)]\n pub fn begin_unwind(msg: ~str, file: ~str, line: uint) -> ! {\n     do str::as_buf(msg) |msg_buf, _msg_len| {\n         do str::as_buf(file) |file_buf, _file_len| {\n@@ -187,6 +222,8 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n     }\n }\n \n+// NOTE: remove function after snapshot\n+#[cfg(stage0)]\n pub fn fail_assert(msg: &str, file: &str, line: uint) -> ! {\n     let (msg, file) = (msg.to_owned(), file.to_owned());\n     begin_unwind(~\"assertion failed: \" + msg, file, line)\n@@ -297,6 +334,14 @@ mod tests {\n             assert!(new_f(20) == 30);\n         }\n     }\n+\n+    #[test]\n+    #[should_fail]\n+    fn fail_static() { FailWithCause::fail_with(\"cause\", file!(), line!())  }\n+\n+    #[test]\n+    #[should_fail]\n+    fn fail_owned() { FailWithCause::fail_with(~\"cause\", file!(), line!())  }\n }\n \n // Local Variables:"}, {"sha": "8263fce23563a1e3bb847ebf7a0026d834f0c917", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -1101,7 +1101,7 @@ fn mk_enum_deser_body(\n     };\n \n     let quoted_expr = copy quote_expr!(\n-      ::core::sys::begin_unwind(~\"explicit failure\", ~\"empty\", 1);\n+      ::core::sys::FailWithCause::fail_with(\"explicit failure\", \"empty\", 1);\n     ).node;\n \n     let impossible_case = ast::arm {"}, {"sha": "db4929854b37035817b7be2eaf5bd8b32ab8a17a", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -474,11 +474,12 @@ pub fn mk_unreachable(cx: @ext_ctxt, span: span) -> @ast::expr {\n         ~[\n             cx.ident_of(~\"core\"),\n             cx.ident_of(~\"sys\"),\n-            cx.ident_of(~\"begin_unwind\"),\n+            cx.ident_of(~\"FailWithCause\"),\n+            cx.ident_of(~\"fail_with\"),\n         ],\n         ~[\n-            mk_uniq_str(cx, span, ~\"internal error: entered unreachable code\"),\n-            mk_uniq_str(cx, span, loc.file.name),\n+            mk_base_str(cx, span, ~\"internal error: entered unreachable code\"),\n+            mk_base_str(cx, span, loc.file.name),\n             mk_uint(cx, span, loc.line),\n         ]\n     )"}, {"sha": "53ebb946114d2d6730179302bf7ac13d24e2350b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -415,6 +415,7 @@ pub fn core_macros() -> ~str {\n             __log(1u32, fmt!( $($arg),+ ))\n         )\n     )\n+\n     macro_rules! warn (\n         ($arg:expr) => (\n             __log(2u32, fmt!( \\\"%?\\\", $arg ))\n@@ -423,6 +424,7 @@ pub fn core_macros() -> ~str {\n             __log(2u32, fmt!( $($arg),+ ))\n         )\n     )\n+\n     macro_rules! info (\n         ($arg:expr) => (\n             __log(3u32, fmt!( \\\"%?\\\", $arg ))\n@@ -431,6 +433,7 @@ pub fn core_macros() -> ~str {\n             __log(3u32, fmt!( $($arg),+ ))\n         )\n     )\n+\n     macro_rules! debug (\n         ($arg:expr) => (\n             __log(4u32, fmt!( \\\"%?\\\", $arg ))\n@@ -441,35 +444,48 @@ pub fn core_macros() -> ~str {\n     )\n \n     macro_rules! fail(\n-        ($msg: expr) => (\n-            ::core::sys::begin_unwind($msg, file!().to_owned(), line!())\n-        );\n         () => (\n-            fail!(~\\\"explicit failure\\\")\n+            fail!(\\\"explicit failure\\\")\n+        );\n+        ($msg:expr) => (\n+            ::core::sys::FailWithCause::fail_with($msg, file!(), line!())\n+        );\n+        ($( $arg:expr ),+) => (\n+            ::core::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n         )\n     )\n \n     macro_rules! assert(\n         ($cond:expr) => {\n             if !$cond {\n-                ::core::sys::fail_assert(stringify!($cond), file!(), line!())\n+                ::core::sys::FailWithCause::fail_with(\n+                    ~\\\"assertion failed: \\\" + stringify!($cond), file!(), line!())\n             }\n         };\n         ($cond:expr, $msg:expr) => {\n             if !$cond {\n-                ::core::sys::fail_assert($msg, file!(), line!())\n+                ::core::sys::FailWithCause::fail_with($msg, file!(), line!())\n+            }\n+        };\n+        ($cond:expr, $( $arg:expr ),+) => {\n+            if !$cond {\n+                ::core::sys::FailWithCause::fail_with(fmt!( $($arg),+ ), file!(), line!())\n             }\n         }\n     )\n \n     macro_rules! assert_eq (\n-        ($given:expr , $expected:expr) =>\n-        ({let given_val = $given;\n-          let expected_val = $expected;\n-          // check both directions of equality....\n-          if !((given_val == expected_val) && (expected_val == given_val)) {\n-            fail!(fmt!(\\\"expected: %?, given: %?\\\",expected_val,given_val));\n-        }}))\n+        ($given:expr , $expected:expr) => (\n+            {\n+                let given_val = $given;\n+                let expected_val = $expected;\n+                // check both directions of equality....\n+                if !((given_val == expected_val) && (expected_val == given_val)) {\n+                    fail!(fmt!(\\\"left: %? != right: %?\\\", given_val, expected_val));\n+                }\n+            }\n+        )\n+    )\n \n     macro_rules! condition (\n "}, {"sha": "b30e3942e6330755c2fcf5b54ebea325f8c0f18e", "filename": "src/test/compile-fail/die-not-static.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-static.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -0,0 +1,7 @@\n+// error-pattern:illegal borrow: borrowed value does not live long enough\n+\n+fn main() {\n+    let v = ~\"test\";\n+    let sslice = str::slice(v, 0, v.len());\n+    fail!(sslice);\n+}"}, {"sha": "29369f081d75da7d0a8542076fdb71917c8417fe", "filename": "src/test/compile-fail/die-not-unique.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d53babd2f23439975518fda94d9122b15e779c9/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d53babd2f23439975518fda94d9122b15e779c9/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdie-not-unique.rs?ref=1d53babd2f23439975518fda94d9122b15e779c9", "patch": "@@ -1,5 +0,0 @@\n-// error-pattern:mismatched types\n-\n-fn main() {\n-    fail!(\"test\");\n-}"}, {"sha": "e17c8d6a182c545182b227c960834fe49f92c120", "filename": "src/test/compile-fail/fail-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-expr.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:mismatched types\n+// error-pattern:failed to find an implementation of trait core::sys::FailWithCause for int\n \n fn main() { fail!(5); }"}, {"sha": "fbfa85ea6f87fdefa50a83bdb7fbdf1dd3b19e8f", "filename": "src/test/compile-fail/fail-type-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffail-type-err.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `~str` but found `~[int]`\n+// error-pattern:failed to find an implementation of trait core::sys::FailWithCause for ~[int]\n fn main() { fail!(~[0i]); }"}, {"sha": "7d98d0dccde63645c2129084240fd5a3d39c9b6c", "filename": "src/test/run-fail/assert-eq-macro-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1be9ae22468e19d66daaebbceeeeaea2e75f903/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs?ref=e1be9ae22468e19d66daaebbceeeeaea2e75f903", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:expected: 15, given: 14\n+// error-pattern:left: 14 != right: 15\n \n #[deriving(Eq)]\n struct Point { x : int }"}]}