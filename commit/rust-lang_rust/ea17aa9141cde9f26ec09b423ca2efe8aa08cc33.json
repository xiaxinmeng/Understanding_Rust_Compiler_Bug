{"sha": "ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "node_id": "C_kwDOAAsO6NoAKGVhMTdhYTkxNDFjZGU5ZjI2ZWMwOWI0MjNjYTJlZmU4YWEwOGNjMzM", "commit": {"author": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-04-27T01:11:14Z"}, "committer": {"name": "James Dietz", "email": "jamesthespeedy@gmail.com", "date": "2023-05-05T00:29:38Z"}, "message": "`--print target-cpus` shows default target cpu, updated docs", "tree": {"sha": "fe23ced53325da8542c689b238c254822508df22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe23ced53325da8542c689b238c254822508df22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "html_url": "https://github.com/rust-lang/rust/commit/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/comments", "author": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mj10021", "id": 5280405, "node_id": "MDQ6VXNlcjUyODA0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5280405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mj10021", "html_url": "https://github.com/mj10021", "followers_url": "https://api.github.com/users/mj10021/followers", "following_url": "https://api.github.com/users/mj10021/following{/other_user}", "gists_url": "https://api.github.com/users/mj10021/gists{/gist_id}", "starred_url": "https://api.github.com/users/mj10021/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mj10021/subscriptions", "organizations_url": "https://api.github.com/users/mj10021/orgs", "repos_url": "https://api.github.com/users/mj10021/repos", "events_url": "https://api.github.com/users/mj10021/events{/privacy}", "received_events_url": "https://api.github.com/users/mj10021/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7a7434215dd9d4b7cc18746ad1d0e531c25325", "html_url": "https://github.com/rust-lang/rust/commit/eb7a7434215dd9d4b7cc18746ad1d0e531c25325"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "71fe8d36132f4380c346166223c9a89349973468", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "patch": "@@ -329,7 +329,13 @@ pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n     let tm = create_informational_target_machine(sess);\n     match req {\n-        PrintRequest::TargetCPUs => unsafe { llvm::LLVMRustPrintTargetCPUs(tm) },\n+        PrintRequest::TargetCPUs => {\n+            println!(\n+                \"Default CPU for this target:\\n    {}\",\n+                handle_native(sess.target.cpu.as_ref())\n+            );\n+            unsafe { llvm::LLVMRustPrintTargetCPUs(tm, handle_native(sess.target.cpu.as_ref())) };\n+        }\n         PrintRequest::TargetFeatures => print_target_features(sess, tm),\n         _ => bug!(\"rustc_codegen_llvm can't handle print request: {:?}\", req),\n     }"}, {"sha": "b65780342755ce075acf00186cfd3415c06937ff", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "patch": "@@ -307,7 +307,7 @@ static size_t getLongestEntryLength(ArrayRef<KV> Table) {\n   return MaxLen;\n }\n \n-extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n+extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM, &Char[]) {\n   const TargetMachine *Target = unwrap(TM);\n   const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n   const Triple::ArchType HostArch = Triple(sys::getDefaultTargetTriple()).getArch();\n@@ -324,7 +324,14 @@ extern \"C\" void LLVMRustPrintTargetCPUs(LLVMTargetMachineRef TM) {\n       MaxCPULen, \"native\", (int)HostCPU.size(), HostCPU.data());\n   }\n   for (auto &CPU : CPUTable)\n-    printf(\"    %-*s\\n\", MaxCPULen, CPU.Key);\n+\n+    printf(\"    %-*s\", MaxCPULen, CPU.Key);\n+    if (CPU.Key == Target->getTargetTriple().getArch()) {\n+      printf(\"  default target\\n\");\n+    }\n+    else {\n+      printf(\"\\n\");\n+    }\n   printf(\"\\n\");\n }\n "}, {"sha": "e2b859e705df01e1fcbfa8b25f49717ff2ed9013", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ea17aa9141cde9f26ec09b423ca2efe8aa08cc33/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=ea17aa9141cde9f26ec09b423ca2efe8aa08cc33", "patch": "@@ -574,7 +574,8 @@ change in the future.\n This instructs `rustc` to generate code specifically for a particular processor.\n \n You can run `rustc --print target-cpus` to see the valid options to pass\n-here. Each target has a default base CPU. Special values include:\n+and the default target CPU for the current buid target.\n+Each target has a default base CPU. Special values include:\n \n * `native` can be passed to use the processor of the host machine.\n * `generic` refers to an LLVM target with minimal features but modern tuning."}]}