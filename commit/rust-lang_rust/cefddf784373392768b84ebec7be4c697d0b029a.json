{"sha": "cefddf784373392768b84ebec7be4c697d0b029a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZmRkZjc4NDM3MzM5Mjc2OGI4NGViZWM3YmU0YzY5N2QwYjAyOWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-12T11:56:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-12T11:56:24Z"}, "message": "Auto merge of #4191 - g-bartoszek:redundant-closure-deref, r=flip1995\n\nredundant_closure_for_method_calls fixes\n\nlint does not trigger when there is a difference in mutability\nlint does not trigger when the method belongs to a trait which is not implemebted directly (Deref)\n\n<!--\nThank you for making Clippy better!\n\nWe're collecting our changelog from pull request descriptions.\nIf your PR only updates to the latest nightly, you can leave the\n`changelog` entry as `none`. Otherwise, please write a short comment\nexplaining your change.\n\nIf your PR fixes an issue, you can add \"fixes #issue_number\" into this\nPR description. This way the issue will be automatically closed when\nyour PR is merged.\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- [ ] Followed [lint naming conventions][lint_naming]\n- [ ] Added passing UI tests (including committed `.stderr` file)\n- [ ] `cargo test` passes locally\n- [ ] Executed `util/dev update_lints`\n- [ ] Added lint documentation\n- [ ] Run `cargo fmt`\n\nNote that you can skip the above if you are just opening a WIP PR in\norder to get feedback.\n\nDelete this line and everything above before opening your PR -->\n\nchangelog: none", "tree": {"sha": "e03f0a84db88a477640062f321f17b7c6cae4708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e03f0a84db88a477640062f321f17b7c6cae4708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cefddf784373392768b84ebec7be4c697d0b029a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cefddf784373392768b84ebec7be4c697d0b029a", "html_url": "https://github.com/rust-lang/rust/commit/cefddf784373392768b84ebec7be4c697d0b029a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cefddf784373392768b84ebec7be4c697d0b029a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd33a97cc46c2bc8ba5e3b228288720d3bc3b3f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd33a97cc46c2bc8ba5e3b228288720d3bc3b3f3", "html_url": "https://github.com/rust-lang/rust/commit/bd33a97cc46c2bc8ba5e3b228288720d3bc3b3f3"}, {"sha": "d4ad23bb3fc175ef9a7a9953ebddce5823c2230b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ad23bb3fc175ef9a7a9953ebddce5823c2230b", "html_url": "https://github.com/rust-lang/rust/commit/d4ad23bb3fc175ef9a7a9953ebddce5823c2230b"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "e4fcd271bbcbc57f6704f2fd25730f17c2992dbb", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cefddf784373392768b84ebec7be4c697d0b029a/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefddf784373392768b84ebec7be4c697d0b029a/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=cefddf784373392768b84ebec7be4c697d0b029a", "patch": "@@ -6,7 +6,9 @@ use rustc::ty::{self, Ty};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n-use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then, type_is_unsafe_function};\n+use crate::utils::{\n+    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then, type_is_unsafe_function,\n+};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where\n@@ -152,7 +154,9 @@ fn get_ufcs_type_name(\n     let actual_type_of_self = &cx.tables.node_type(self_arg.hir_id);\n \n     if let Some(trait_id) = cx.tcx.trait_of_item(method_def_id) {\n-        if match_borrow_depth(expected_type_of_self, &actual_type_of_self) {\n+        if match_borrow_depth(expected_type_of_self, &actual_type_of_self)\n+            && implements_trait(cx, actual_type_of_self, trait_id, &[])\n+        {\n             return Some(cx.tcx.def_path_str(trait_id));\n         }\n     }\n@@ -168,7 +172,7 @@ fn get_ufcs_type_name(\n \n fn match_borrow_depth(lhs: Ty<'_>, rhs: Ty<'_>) -> bool {\n     match (&lhs.sty, &rhs.sty) {\n-        (ty::Ref(_, t1, _), ty::Ref(_, t2, _)) => match_borrow_depth(&t1, &t2),\n+        (ty::Ref(_, t1, mut1), ty::Ref(_, t2, mut2)) => mut1 == mut2 && match_borrow_depth(&t1, &t2),\n         (l, r) => match (l, r) {\n             (ty::Ref(_, _, _), _) | (_, ty::Ref(_, _, _)) => false,\n             (_, _) => true,\n@@ -183,9 +187,8 @@ fn match_types(lhs: Ty<'_>, rhs: Ty<'_>) -> bool {\n         | (ty::Int(_), ty::Int(_))\n         | (ty::Uint(_), ty::Uint(_))\n         | (ty::Str, ty::Str) => true,\n-        (ty::Ref(_, t1, _), ty::Ref(_, t2, _))\n-        | (ty::Array(t1, _), ty::Array(t2, _))\n-        | (ty::Slice(t1), ty::Slice(t2)) => match_types(t1, t2),\n+        (ty::Ref(_, t1, mut1), ty::Ref(_, t2, mut2)) => mut1 == mut2 && match_types(t1, t2),\n+        (ty::Array(t1, _), ty::Array(t2, _)) | (ty::Slice(t1), ty::Slice(t2)) => match_types(t1, t2),\n         (ty::Adt(def1, _), ty::Adt(def2, _)) => def1 == def2,\n         (_, _) => false,\n     }"}, {"sha": "5d62a6d9b01efe8926a4de38f7b683ab7cf27f28", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cefddf784373392768b84ebec7be4c697d0b029a/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cefddf784373392768b84ebec7be4c697d0b029a/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=cefddf784373392768b84ebec7be4c697d0b029a", "patch": "@@ -184,3 +184,22 @@ fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n     // called. This changes semantics, so the closure must stay.\n     Box::new(move |x| f()(x))\n }\n+\n+fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {\n+    f(&mut \"Hello\".to_owned())\n+}\n+fn test_difference_in_mutability() {\n+    call(|s| s.clone());\n+}\n+\n+struct Bar;\n+impl std::ops::Deref for Bar {\n+    type Target = str;\n+    fn deref(&self) -> &str {\n+        \"hi\"\n+    }\n+}\n+\n+fn test_deref_with_trait_method() {\n+    let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n+}"}, {"sha": "a9c4b209960c9838d7ff55aa12051eb56a73d5b3", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cefddf784373392768b84ebec7be4c697d0b029a/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cefddf784373392768b84ebec7be4c697d0b029a/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=cefddf784373392768b84ebec7be4c697d0b029a", "patch": "@@ -184,3 +184,22 @@ fn make_lazy(f: impl Fn() -> fn(u8) -> u8) -> impl Fn(u8) -> u8 {\n     // called. This changes semantics, so the closure must stay.\n     Box::new(move |x| f()(x))\n }\n+\n+fn call<F: FnOnce(&mut String) -> String>(f: F) -> String {\n+    f(&mut \"Hello\".to_owned())\n+}\n+fn test_difference_in_mutability() {\n+    call(|s| s.clone());\n+}\n+\n+struct Bar;\n+impl std::ops::Deref for Bar {\n+    type Target = str;\n+    fn deref(&self) -> &str {\n+        \"hi\"\n+    }\n+}\n+\n+fn test_deref_with_trait_method() {\n+    let _ = [Bar].iter().map(|s| s.to_string()).collect::<Vec<_>>();\n+}"}]}