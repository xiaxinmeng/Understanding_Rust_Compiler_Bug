{"sha": "e782d790f1b63d82af39248bebe027f92d891bcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ODJkNzkwZjFiNjNkODJhZjM5MjQ4YmViZTAyN2Y5MmQ4OTFiY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-29T18:09:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-29T18:09:51Z"}, "message": "Auto merge of #59522 - Centril:rollup, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #59366 (Update books)\n - #59436 (Update jemalloc-sys to version 0.3.0)\n - #59454 (Update rustfmt to 1.2.0)\n - #59462 (Fix error in Rust 2018 + no_core environment)\n - #59467 (Better diagnostic for binary operation on BoxedValues)\n - #59473 (Do not emit incorrect borrow suggestion involving macros and fix overlapping multiline spans)\n - #59480 (Update stdsimd)\n - #59486 (Visit `ImplItem` in `dead_code` lint)\n - #59510 (Rename `type_parameters` to `generics` and so on)\n\nFailed merges:\n\n - #59516 (Update cargo)\n\nr? @ghost", "tree": {"sha": "6181b0e19f921a160ef560a538dfd7fc275a8116", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6181b0e19f921a160ef560a538dfd7fc275a8116"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e782d790f1b63d82af39248bebe027f92d891bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e782d790f1b63d82af39248bebe027f92d891bcc", "html_url": "https://github.com/rust-lang/rust/commit/e782d790f1b63d82af39248bebe027f92d891bcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e782d790f1b63d82af39248bebe027f92d891bcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2002b4b39a16760f37107cf02d7a91ff316d3073", "url": "https://api.github.com/repos/rust-lang/rust/commits/2002b4b39a16760f37107cf02d7a91ff316d3073", "html_url": "https://github.com/rust-lang/rust/commit/2002b4b39a16760f37107cf02d7a91ff316d3073"}, {"sha": "99e886de4388fd89243850332a0002c0d257f304", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e886de4388fd89243850332a0002c0d257f304", "html_url": "https://github.com/rust-lang/rust/commit/99e886de4388fd89243850332a0002c0d257f304"}], "stats": {"total": 601, "additions": 435, "deletions": 166}, "files": [{"sha": "44756876c539156664c83877fdfc45610f718b98", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1203,7 +1203,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jemalloc-sys\"\n-version = \"0.1.8\"\n+version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2074,7 +2074,7 @@ name = \"rand_chacha\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2096,7 +2096,7 @@ name = \"rand_hc\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2121,7 +2121,7 @@ name = \"rand_xorshift\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2260,7 +2260,7 @@ dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0\",\n  \"rustc_tools_util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 1.1.0\",\n+ \"rustfmt-nightly 1.2.0\",\n  \"serde 1.0.82 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.81 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2500,7 +2500,7 @@ dependencies = [\n name = \"rustc-main\"\n version = \"0.0.0\"\n dependencies = [\n- \"jemalloc-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jemalloc-sys 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_codegen_ssa 0.0.0\",\n  \"rustc_driver 0.0.0\",\n  \"rustc_target 0.0.0\",\n@@ -3056,7 +3056,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.1.0\"\n+version = \"1.2.0\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -4096,7 +4096,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f58856976b776fedd95533137617a02fb25719f40e7d9b01c7043cd65474f450\"\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n \"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n-\"checksum jemalloc-sys 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bfc62c8e50e381768ce8ee0428ee53741929f7ebd73e4d83f669bcf7693e00ae\"\n+\"checksum jemalloc-sys 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7bef0d4ce37578dfd80b466e3d8324bd9de788e249f1accebb0c472ea4b52bdc\"\n \"checksum jobserver 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd80e58f77e0cdea53ba96acc5e04479e5ffc5d869626a6beafe50fed867eace\"\n \"checksum json 0.11.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad0485404155f45cce53a40d4b2d6ac356418300daed05273d9e26f91c390be\"\n \"checksum jsonrpc-core 10.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a5152c3fda235dfd68341b3edf4121bc4428642c93acbd6de88c26bf95fc5d7\""}, {"sha": "8d3c8fc435c8dd20c77cfd7e12169375ca2a0a29", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -402,6 +402,7 @@ impl<'a> Builder<'a> {\n                 test::UnstableBook,\n                 test::RustcBook,\n                 test::EmbeddedBook,\n+                test::EditionGuide,\n                 test::Rustfmt,\n                 test::Miri,\n                 test::Clippy,"}, {"sha": "881bea5d97ea42cc23c088028f89bee8264c28f5", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1425,6 +1425,7 @@ test_book!(\n     EmbeddedBook, \"src/doc/embedded-book\", \"embedded-book\", default=false;\n     TheBook, \"src/doc/book\", \"book\", default=false;\n     UnstableBook, \"src/doc/unstable-book\", \"unstable-book\", default=true;\n+    EditionGuide, \"src/doc/edition-guide\", \"edition-guide\", default=false;\n );\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]"}, {"sha": "af0198705a2fefda34bf4f1ea5efc881078d2081", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -24,6 +24,7 @@ python2.7 \"$X_PY\" test --no-fail-fast \\\n     src/doc/reference \\\n     src/doc/rust-by-example \\\n     src/doc/embedded-book \\\n+    src/doc/edition-guide \\\n     src/tools/clippy \\\n     src/tools/rls \\\n     src/tools/rustfmt \\\n@@ -73,6 +74,7 @@ status_check() {\n     check_dispatch $1 beta nomicon src/doc/nomicon\n     check_dispatch $1 beta reference src/doc/reference\n     check_dispatch $1 beta rust-by-example src/doc/rust-by-example\n+    check_dispatch $1 beta edition-guide src/doc/edition-guide\n     check_dispatch $1 beta rls src/tools/rls\n     check_dispatch $1 beta rustfmt src/tools/rustfmt\n     check_dispatch $1 beta clippy-driver src/tools/clippy"}, {"sha": "b93ec30bbc7b1b5c2f44223249ab359bed2ed5a6", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 9cffbeabec3bcec42d09432bfe7705125c848889\n+Subproject commit b93ec30bbc7b1b5c2f44223249ab359bed2ed5a6"}, {"sha": "b56ddb11548450a6df4edd1ed571b2bc304eb9e6", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit aa0022c875907886cae8f3ef8e9ebf6e2a5e728d\n+Subproject commit b56ddb11548450a6df4edd1ed571b2bc304eb9e6"}, {"sha": "07fd3880ea0874d82b1d9ed30ad3427ec98b4e8a", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 9e656ead82bfe869493dec82653a52e27fa6a05c\n+Subproject commit 07fd3880ea0874d82b1d9ed30ad3427ec98b4e8a"}, {"sha": "27ad493a10364e907ec476e2ad61e8a1614b57e1", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 41493ffce5d0e17d54eaf5ec9a995054e2b9aece\n+Subproject commit 27ad493a10364e907ec476e2ad61e8a1614b57e1"}, {"sha": "f68ef3d0f4959f6a7d92a08d9994b117f0f4d32d", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 2ce92beabb912d417a7314d6da83ac9b50dc2afb\n+Subproject commit f68ef3d0f4959f6a7d92a08d9994b117f0f4d32d"}, {"sha": "49fe7c9e994fe15b7f1df0ddebd4806f1af429d0", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -130,7 +130,7 @@ The advantages over a simple `fn(&str) -> u32` are:\n   a way to define new literal syntax for any data type.\n \n In addition to procedural macros, you can define new\n-[`derive`](../reference/attributes.html#derive)-like attributes and other kinds\n+[`derive`](../reference/attributes/derive.html)-like attributes and other kinds\n of extensions.  See `Registry::register_syntax_extension` and the\n `SyntaxExtension` enum.  For a more involved macro example, see\n [`regex_macros`](https://github.com/rust-lang/regex/blob/master/regex_macros/src/lib.rs).\n@@ -174,7 +174,7 @@ quasiquote as an ordinary plugin library.\n # Lint plugins\n \n Plugins can extend [Rust's lint\n-infrastructure](../reference/attributes.html#lint-check-attributes) with\n+infrastructure](../reference/attributes/diagnostics.html#lint-check-attributes) with\n additional checks for code style, safety, etc. Now let's write a plugin\n [`lint_plugin_test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint_plugin_test.rs)\n that warns about any item named `lintme`.\n@@ -253,7 +253,7 @@ mostly use the same infrastructure as lint plugins, and provide examples of how\n to access type information.\n \n Lints defined by plugins are controlled by the usual [attributes and compiler\n-flags](../reference/attributes.html#lint-check-attributes), e.g.\n+flags](../reference/attributes/diagnostics.html#lint-check-attributes), e.g.\n `#[allow(test_lint)]` or `-A test-lint`. These identifiers are derived from the\n first argument to `declare_lint!`, with appropriate case and punctuation\n conversion."}, {"sha": "6689b0c26fb89ee561428e3429c7d93cca294db3", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -485,30 +485,30 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemKind::GlobalAsm(_) => {\n             visitor.visit_id(item.hir_id);\n         }\n-        ItemKind::Ty(ref typ, ref type_parameters) => {\n+        ItemKind::Ty(ref ty, ref generics) => {\n             visitor.visit_id(item.hir_id);\n-            visitor.visit_ty(typ);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_ty(ty);\n+            visitor.visit_generics(generics)\n         }\n         ItemKind::Existential(ExistTy { ref generics, ref bounds, impl_trait_fn: _ }) => {\n             visitor.visit_id(item.hir_id);\n             walk_generics(visitor, generics);\n             walk_list!(visitor, visit_param_bound, bounds);\n         }\n-        ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n-            visitor.visit_generics(type_parameters);\n+        ItemKind::Enum(ref enum_definition, ref generics) => {\n+            visitor.visit_generics(generics);\n             // `visit_enum_def()` takes care of visiting the `Item`'s `HirId`.\n-            visitor.visit_enum_def(enum_definition, type_parameters, item.hir_id, item.span)\n+            visitor.visit_enum_def(enum_definition, generics, item.hir_id, item.span)\n         }\n         ItemKind::Impl(\n             ..,\n-            ref type_parameters,\n+            ref generics,\n             ref opt_trait_reference,\n             ref typ,\n             ref impl_item_refs\n         ) => {\n             visitor.visit_id(item.hir_id);\n-            visitor.visit_generics(type_parameters);\n+            visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item_ref, impl_item_refs);"}, {"sha": "28fc3047af61cc2b027c9b0ef99e07cc7c814162", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             Def::Const(_) | Def::AssociatedConst(..) | Def::TyAlias(_) => {\n                 self.check_def_id(def.def_id());\n             }\n-            _ if self.in_pat => (),\n+            _ if self.in_pat => {},\n             Def::PrimTy(..) | Def::SelfTy(..) | Def::SelfCtor(..) |\n             Def::Local(..) | Def::Upvar(..) => {}\n             Def::Ctor(ctor_def_id, CtorOf::Variant, ..) => {\n@@ -91,6 +91,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n+            Def::ToolMod | Def::NonMacroAttr(..) | Def::Err => {}\n             _ => {\n                 self.check_def_id(def.def_id());\n             }\n@@ -166,16 +167,13 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     }\n                     hir::ItemKind::Enum(..) => {\n                         self.inherited_pub_visibility = item.vis.node.is_pub();\n+\n                         intravisit::walk_item(self, &item);\n                     }\n-                    hir::ItemKind::Fn(..)\n-                    | hir::ItemKind::Ty(..)\n-                    | hir::ItemKind::Static(..)\n-                    | hir::ItemKind::Existential(..)\n-                    | hir::ItemKind::Const(..) => {\n+                    hir::ItemKind::ForeignMod(..) => {}\n+                    _ => {\n                         intravisit::walk_item(self, &item);\n                     }\n-                    _ => ()\n                 }\n             }\n             Node::TraitItem(trait_item) => {\n@@ -187,7 +185,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             Node::ForeignItem(foreign_item) => {\n                 intravisit::walk_foreign_item(self, &foreign_item);\n             }\n-            _ => ()\n+            _ => {}\n         }\n         self.repr_has_repr_c = had_repr_c;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;"}, {"sha": "98db0097c745734a50eaa82b28ec6a1abc97e94d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 45, "deletions": 13, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -243,6 +243,7 @@ impl EmitterWriter {\n                         end_col: hi.col_display,\n                         is_primary: span_label.is_primary,\n                         label: span_label.label.clone(),\n+                        overlaps_exactly: false,\n                     };\n                     multiline_annotations.push((lo.file.clone(), ml.clone()));\n                     AnnotationType::Multiline(ml)\n@@ -258,10 +259,7 @@ impl EmitterWriter {\n                 };\n \n                 if !ann.is_multiline() {\n-                    add_annotation_to_file(&mut output,\n-                                           lo.file,\n-                                           lo.line,\n-                                           ann);\n+                    add_annotation_to_file(&mut output, lo.file, lo.line, ann);\n                 }\n             }\n         }\n@@ -274,10 +272,12 @@ impl EmitterWriter {\n                 let ref mut a = item.1;\n                 // Move all other multiline annotations overlapping with this one\n                 // one level to the right.\n-                if &ann != a &&\n+                if !(ann.same_span(a)) &&\n                     num_overlap(ann.line_start, ann.line_end, a.line_start, a.line_end, true)\n                 {\n                     a.increase_depth();\n+                } else if ann.same_span(a) && &ann != a {\n+                    a.overlaps_exactly = true;\n                 } else {\n                     break;\n                 }\n@@ -289,17 +289,49 @@ impl EmitterWriter {\n             if ann.depth > max_depth {\n                 max_depth = ann.depth;\n             }\n-            add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n-            let middle = min(ann.line_start + 4, ann.line_end);\n-            for line in ann.line_start + 1..middle {\n-                add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n-            }\n-            if middle < ann.line_end - 1 {\n-                for line in ann.line_end - 1..ann.line_end {\n+            let mut end_ann = ann.as_end();\n+            if !ann.overlaps_exactly {\n+                // avoid output like\n+                //\n+                //  |        foo(\n+                //  |   _____^\n+                //  |  |_____|\n+                //  | ||         bar,\n+                //  | ||     );\n+                //  | ||      ^\n+                //  | ||______|\n+                //  |  |______foo\n+                //  |         baz\n+                //\n+                // and instead get\n+                //\n+                //  |       foo(\n+                //  |  _____^\n+                //  | |         bar,\n+                //  | |     );\n+                //  | |      ^\n+                //  | |      |\n+                //  | |______foo\n+                //  |        baz\n+                add_annotation_to_file(&mut output, file.clone(), ann.line_start, ann.as_start());\n+                // 4 is the minimum vertical length of a multiline span when presented: two lines\n+                // of code and two lines of underline. This is not true for the special case where\n+                // the beginning doesn't have an underline, but the current logic seems to be\n+                // working correctly.\n+                let middle = min(ann.line_start + 4, ann.line_end);\n+                for line in ann.line_start + 1..middle {\n+                    // Every `|` that joins the beginning of the span (`___^`) to the end (`|__^`).\n                     add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n                 }\n+                if middle < ann.line_end - 1 {\n+                    for line in ann.line_end - 1..ann.line_end {\n+                        add_annotation_to_file(&mut output, file.clone(), line, ann.as_line());\n+                    }\n+                }\n+            } else {\n+                end_ann.annotation_type = AnnotationType::Singleline;\n             }\n-            add_annotation_to_file(&mut output, file, ann.line_end, ann.as_end());\n+            add_annotation_to_file(&mut output, file, ann.line_end, end_ann);\n         }\n         for file_vec in output.iter_mut() {\n             file_vec.multiline_depth = max_depth;"}, {"sha": "a0af604026d4afa051aaba78b899662693e25894", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -18,13 +18,20 @@ pub struct MultilineAnnotation {\n     pub end_col: usize,\n     pub is_primary: bool,\n     pub label: Option<String>,\n+    pub overlaps_exactly: bool,\n }\n \n impl MultilineAnnotation {\n     pub fn increase_depth(&mut self) {\n         self.depth += 1;\n     }\n \n+    /// Compare two `MultilineAnnotation`s considering only the `Span` they cover.\n+    pub fn same_span(&self, other: &MultilineAnnotation) -> bool {\n+        self.line_start == other.line_start && self.line_end == other.line_end\n+            && self.start_col == other.start_col && self.end_col == other.end_col\n+    }\n+\n     pub fn as_start(&self) -> Annotation {\n         Annotation {\n             start_col: self.start_col,"}, {"sha": "0e8ab2ba2a5a2ad9d5fd9920ba97304f74ba49b2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1040,7 +1040,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n \n impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     fn is_root(&self, def_id: DefId) -> bool {\n-        !item_has_type_parameters(self.tcx, def_id) && match self.mode {\n+        !item_requires_monomorphization(self.tcx, def_id) && match self.mode {\n             MonoItemCollectionMode::Eager => {\n                 true\n             }\n@@ -1101,7 +1101,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     }\n }\n \n-fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n+fn item_requires_monomorphization<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.requires_monomorphization(tcx)\n }"}, {"sha": "ab3d87fafdac7c5c2d3f04174274e112e9caadb2", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1697,7 +1697,12 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         components: &[&str],\n         is_value: bool\n     ) -> hir::Path {\n-        let segments = iter::once(keywords::PathRoot.ident())\n+        let root = if crate_root.is_some() {\n+            keywords::PathRoot\n+        } else {\n+            keywords::Crate\n+        };\n+        let segments = iter::once(root.ident())\n             .chain(\n                 crate_root.into_iter()\n                     .chain(components.iter().cloned())"}, {"sha": "7d4002525942ba543ca84820e7d34b948c8759b7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -659,7 +659,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     fn process_impl(\n         &mut self,\n         item: &'l ast::Item,\n-        type_parameters: &'l ast::Generics,\n+        generics: &'l ast::Generics,\n         trait_ref: &'l Option<ast::TraitRef>,\n         typ: &'l ast::Ty,\n         impl_items: &'l [ast::ImplItem],\n@@ -678,7 +678,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         if let &Some(ref trait_ref) = trait_ref {\n             self.process_path(trait_ref.ref_id, &trait_ref.path);\n         }\n-        self.process_generic_params(type_parameters, \"\", item.id);\n+        self.process_generic_params(generics, \"\", item.id);\n         for impl_item in impl_items {\n             let map = &self.tcx.hir();\n             self.process_impl_item(impl_item, map.local_def_id(item.id));"}, {"sha": "1fc63a9302204b7ac8a9da448a6616ce87062a9d", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::Node;\n use rustc::hir::{Item, ItemKind, print};\n use rustc::ty::{self, Ty, AssociatedItem};\n use rustc::ty::adjustment::AllowTwoPhase;\n-use errors::{Applicability, DiagnosticBuilder, SourceMapper};\n+use errors::{Applicability, DiagnosticBuilder};\n \n use super::method::probe;\n \n@@ -292,9 +292,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                  expected: Ty<'tcx>)\n                  -> Option<(Span, &'static str, String)> {\n         let cm = self.sess().source_map();\n-        // Use the callsite's span if this is a macro call. #41858\n-        let sp = cm.call_span_if_macro(expr.span);\n+        let sp = expr.span;\n         if !cm.span_to_filename(sp).is_real() {\n+            // Ignore if span is from within a macro #41858, #58298. We previously used the macro\n+            // call span, but that breaks down when the type error comes from multiple calls down.\n             return None;\n         }\n "}, {"sha": "313ed19b945d1b93e5921a8b2200a78a702e0ca8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -2544,7 +2544,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Neither if self.type_var_diverges(ty) => self.tcx.mk_diverging_default(),\n             Neither => return false,\n         };\n-        debug!(\"default_type_parameters: defaulting `{:?}` to `{:?}`\", ty, fallback);\n+        debug!(\"fallback_if_possible: defaulting `{:?}` to `{:?}`\", ty, fallback);\n         self.demand_eqtype(syntax_pos::DUMMY_SP, ty, fallback);\n         true\n     }"}, {"sha": "d6932094dddb6000b4761dc8f5258030f3d1ec0a", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -306,7 +306,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, true) {\n+                                                            rhs_ty, &mut err, true, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -327,10 +327,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             err.emit();\n                         }\n                         IsAssign::No => {\n-                            let mut err = struct_span_err!(self.tcx.sess, expr.span, E0369,\n+                            let mut err = struct_span_err!(self.tcx.sess, op.span, E0369,\n                                 \"binary operation `{}` cannot be applied to type `{}`\",\n                                 op.node.as_str(),\n                                 lhs_ty);\n+\n+                            if !lhs_expr.span.eq(&rhs_expr.span) {\n+                                err.span_label(lhs_expr.span, lhs_ty.to_string());\n+                                err.span_label(rhs_expr.span, rhs_ty.to_string());\n+                            }\n+\n                             let mut suggested_deref = false;\n                             if let Ref(_, mut rty, _) = lhs_ty.sty {\n                                 if {\n@@ -380,7 +386,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err, false) {\n+                                                            rhs_ty, &mut err, false, op) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -418,6 +424,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         rhs_ty: Ty<'tcx>,\n         err: &mut errors::DiagnosticBuilder<'_>,\n         is_assign: bool,\n+        op: hir::BinOp,\n     ) -> bool {\n         let source_map = self.tcx.sess.source_map();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n@@ -431,7 +438,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             (&Ref(_, l_ty, _), &Ref(_, r_ty, _))\n             if l_ty.sty == Str && r_ty.sty == Str => {\n                 if !is_assign {\n-                    err.span_label(expr.span,\n+                    err.span_label(op.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n                         Ok(lstring) => err.span_suggestion("}, {"sha": "920270b5473cfd08d23e9ac9d3aa4a015c8d33fb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,5 +1,5 @@\n use crate::check::{Inherited, FnCtxt};\n-use crate::constrained_type_params::{identify_constrained_type_params, Parameter};\n+use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use crate::hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n@@ -941,7 +941,7 @@ fn check_variances_for_type_defn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         .map(|(index, _)| Parameter(index as u32))\n                         .collect();\n \n-    identify_constrained_type_params(tcx,\n+    identify_constrained_generic_params(tcx,\n                                      &ty_predicates,\n                                      None,\n                                      &mut constrained_parameters);"}, {"sha": "5edb8c92a3bbca268dafb268cde4851b6c634a29", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -15,7 +15,7 @@\n //! crate as a kind of pass. This should eventually be factored away.\n \n use crate::astconv::{AstConv, Bounds};\n-use crate::constrained_type_params as ctp;\n+use crate::constrained_generic_params as ctp;\n use crate::check::intrinsic::intrisic_operation_unsafety;\n use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;"}, {"sha": "18bf66ceb3501fc0d0ff14dbf49380f5a75d5535", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n     }\n }\n \n-pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+pub fn identify_constrained_generic_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n                                               predicates: &ty::GenericPredicates<'tcx>,\n                                               impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                               input_parameters: &mut FxHashSet<Parameter>)", "previous_filename": "src/librustc_typeck/constrained_type_params.rs"}, {"sha": "2b72f43d36f729d8774bc5f5b73a9133bb2cab9f", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -8,7 +8,7 @@\n //! specialization errors. These things can (and probably should) be\n //! fixed, but for the moment it's easier to do these checks early.\n \n-use crate::constrained_type_params as ctp;\n+use crate::constrained_generic_params as ctp;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -103,7 +103,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);\n \n     let mut input_parameters = ctp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n-    ctp::identify_constrained_type_params(\n+    ctp::identify_constrained_generic_params(\n         tcx, &impl_predicates, impl_trait_ref, &mut input_parameters);\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types."}, {"sha": "cc90044573ce5de457d869f5fa41df3413cecc52", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -88,7 +88,7 @@ mod check;\n mod check_unused;\n mod coherence;\n mod collect;\n-mod constrained_type_params;\n+mod constrained_generic_params;\n mod structured_errors;\n mod impl_wf_check;\n mod namespace;"}, {"sha": "86910ffd894c4ea9870e82ddb46ed67f85d2cbf8", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -374,6 +374,66 @@ error: foo\n \"#);\n }\n \n+#[test]\n+fn triple_exact_overlap() {\n+    test_harness(r#\"\n+fn foo() {\n+  X0 Y0 Z0\n+  X1 Y1 Z1\n+  X2 Y2 Z2\n+}\n+\"#,\n+    vec![\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`X` is a good letter\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Y` is a good letter too\",\n+        },\n+        SpanLabel {\n+            start: Position {\n+                string: \"X0\",\n+                count: 1,\n+            },\n+            end: Position {\n+                string: \"X2\",\n+                count: 1,\n+            },\n+            label: \"`Z` label\",\n+        },\n+    ],\n+    r#\"\n+error: foo\n+ --> test.rs:3:3\n+  |\n+3 | /   X0 Y0 Z0\n+4 | |   X1 Y1 Z1\n+5 | |   X2 Y2 Z2\n+  | |    ^\n+  | |    |\n+  | |    `X` is a good letter\n+  | |____`Y` is a good letter too\n+  |      `Z` label\n+\n+\"#);\n+}\n+\n #[test]\n fn minimum_depth() {\n     test_harness(r#\""}, {"sha": "8f42d47e69cd3b57c8637a29e44baa2318f2e323", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -244,24 +244,24 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemKind::GlobalAsm(ref ga) => visitor.visit_global_asm(ga),\n-        ItemKind::Ty(ref typ, ref type_parameters) => {\n+        ItemKind::Ty(ref typ, ref generics) => {\n             visitor.visit_ty(typ);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_generics(generics)\n         }\n-        ItemKind::Existential(ref bounds, ref type_parameters) => {\n+        ItemKind::Existential(ref bounds, ref generics) => {\n             walk_list!(visitor, visit_param_bound, bounds);\n-            visitor.visit_generics(type_parameters)\n+            visitor.visit_generics(generics)\n         }\n-        ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n-            visitor.visit_generics(type_parameters);\n-            visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n+        ItemKind::Enum(ref enum_definition, ref generics) => {\n+            visitor.visit_generics(generics);\n+            visitor.visit_enum_def(enum_definition, generics, item.id, item.span)\n         }\n         ItemKind::Impl(_, _, _,\n-                 ref type_parameters,\n+                 ref generics,\n                  ref opt_trait_reference,\n                  ref typ,\n                  ref impl_items) => {\n-            visitor.visit_generics(type_parameters);\n+            visitor.visit_generics(generics);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);"}, {"sha": "997d13938379839b82f663642d3542edb2c23eb6", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -17,7 +17,7 @@ rustc_driver = { path = \"../librustc_driver\" }\n rustc_codegen_ssa = { path = \"../librustc_codegen_ssa\" }\n \n [dependencies.jemalloc-sys]\n-version = '0.1.8'\n+version = '0.3.0'\n optional = true\n features = ['unprefixed_malloc_on_supported_platforms']\n "}, {"sha": "12bdc2ed6b32653866d02b42f0885d9cd8bd295e", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 359845eb7cae85799dc2ec81f2fb05da0aa6276d\n+Subproject commit 12bdc2ed6b32653866d02b42f0885d9cd8bd295e"}, {"sha": "e09f8f6b7a87c7d17eea1a59e96d1acb4831bdad", "filename": "src/test/run-pass/no-core-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Frun-pass%2Fno-core-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Frun-pass%2Fno-core-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-core-2.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -0,0 +1,18 @@\n+#![allow(dead_code, unused_imports)]\n+#![feature(no_core)]\n+#![no_core]\n+// edition:2018\n+\n+extern crate std;\n+extern crate core;\n+use core::{prelude::v1::*, *};\n+\n+fn foo() {\n+    for _ in &[()] {}\n+}\n+\n+fn bar() -> Option<()> {\n+    None?\n+}\n+\n+fn main() {}"}, {"sha": "c9f3e8b2e26c552efce32b943718f1c3b795b541", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,16 +1,20 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/autoderef-full-lval.rs:15:20\n+  --> $DIR/autoderef-full-lval.rs:15:24\n    |\n LL |     let z: isize = a.x + b.y;\n-   |                    ^^^^^^^^^\n+   |                    --- ^ --- std::boxed::Box<isize>\n+   |                    |\n+   |                    std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/autoderef-full-lval.rs:21:25\n+  --> $DIR/autoderef-full-lval.rs:21:33\n    |\n LL |     let answer: isize = forty.a + two.a;\n-   |                         ^^^^^^^^^^^^^^^\n+   |                         ------- ^ ----- std::boxed::Box<isize>\n+   |                         |\n+   |                         std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n "}, {"sha": "d036f06a8c7d0321bc1d0ffa496408d679976265", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n-  --> $DIR/binary-op-on-double-ref.rs:4:9\n+  --> $DIR/binary-op-on-double-ref.rs:4:11\n    |\n LL |         x % 2 == 0\n-   |         ^^^^^\n+   |         - ^ - {integer}\n+   |         |\n+   |         &&{integer}\n    |\n    = help: `%` can be used on '{integer}', you can dereference `x`: `*x`\n "}, {"sha": "9e8992235edd1d3e760bed8da3ccf2182ac71b5e", "filename": "src/test/ui/binop/binop-bitxor-str.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `^` cannot be applied to type `std::string::String`\n-  --> $DIR/binop-bitxor-str.rs:3:21\n+  --> $DIR/binop-bitxor-str.rs:3:37\n    |\n LL | fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     --------------- ^ --------------- std::string::String\n+   |                     |\n+   |                     std::string::String\n    |\n    = note: an implementation of `std::ops::BitXor` might be missing for `std::string::String`\n "}, {"sha": "92e14bccccd5818b5d23fe75d730537e34e49680", "filename": "src/test/ui/binop/binop-mul-bool.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `bool`\n-  --> $DIR/binop-mul-bool.rs:3:21\n+  --> $DIR/binop-mul-bool.rs:3:26\n    |\n LL | fn main() { let x = true * false; }\n-   |                     ^^^^^^^^^^^^\n+   |                     ---- ^ ----- bool\n+   |                     |\n+   |                     bool\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `bool`\n "}, {"sha": "d33cff313e7f9f34e890e48b1526fbb88eff5155", "filename": "src/test/ui/binop/binop-typeck.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `bool`\n-  --> $DIR/binop-typeck.rs:6:13\n+  --> $DIR/binop-typeck.rs:6:15\n    |\n LL |     let z = x + y;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             bool\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `bool`\n "}, {"sha": "84829c98e573908cdddc1a50890d25680ceca2b3", "filename": "src/test/ui/dead-code-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fdead-code-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fdead-code-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdead-code-impl.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![deny(dead_code)]\n+\n+pub struct GenericFoo<T>(T);\n+\n+type Foo = GenericFoo<u32>;\n+\n+impl Foo {\n+    fn bar(self) -> u8 {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    println!(\"{}\", GenericFoo(0).bar());\n+}"}, {"sha": "07b93d9aae7ed6302a16e1a000fc369a03ca8881", "filename": "src/test/ui/fn/fn-compare-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-compare-mismatch.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `==` cannot be applied to type `fn() {main::f}`\n-  --> $DIR/fn-compare-mismatch.rs:4:13\n+  --> $DIR/fn-compare-mismatch.rs:4:15\n    |\n LL |     let x = f == g;\n-   |             ^^^^^^\n+   |             - ^^ - fn() {main::g}\n+   |             |\n+   |             fn() {main::f}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn() {main::f}`\n "}, {"sha": "588e7a0ed339e8d234dc8b1c3cdd640bc2468d0e", "filename": "src/test/ui/for/for-loop-type-error.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/for-loop-type-error.rs:2:13\n+  --> $DIR/for-loop-type-error.rs:2:16\n    |\n LL |     let x = () + ();\n-   |             ^^^^^^^\n+   |             -- ^ -- ()\n+   |             |\n+   |             ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "e8de44320da9c85b7399ff2341eb38e90e2a2391", "filename": "src/test/ui/issues/issue-14915.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n-  --> $DIR/issue-14915.rs:6:20\n+  --> $DIR/issue-14915.rs:6:22\n    |\n LL |     println!(\"{}\", x + 1);\n-   |                    ^^^^^\n+   |                    - ^ - {integer}\n+   |                    |\n+   |                    std::boxed::Box<isize>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n "}, {"sha": "6f269ba764c5dc9defab6c359d3a770042037e9b", "filename": "src/test/ui/issues/issue-24363.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -5,10 +5,12 @@ LL |     1.create_a_type_error[\n    |       ^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/issue-24363.rs:3:9\n+  --> $DIR/issue-24363.rs:3:11\n    |\n LL |         ()+()\n-   |         ^^^^^\n+   |         --^-- ()\n+   |         |\n+   |         ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "ac2a9f2203d5af89ca2558b56cfeee8a011b2db9", "filename": "src/test/ui/issues/issue-28837.stderr", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,120 +1,150 @@\n error[E0369]: binary operation `+` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:6:5\n+  --> $DIR/issue-28837.rs:6:7\n    |\n LL |     a + a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `A`\n \n error[E0369]: binary operation `-` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:8:5\n+  --> $DIR/issue-28837.rs:8:7\n    |\n LL |     a - a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Sub` might be missing for `A`\n \n error[E0369]: binary operation `*` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:10:5\n+  --> $DIR/issue-28837.rs:10:7\n    |\n LL |     a * a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `A`\n \n error[E0369]: binary operation `/` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:12:5\n+  --> $DIR/issue-28837.rs:12:7\n    |\n LL |     a / a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Div` might be missing for `A`\n \n error[E0369]: binary operation `%` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:14:5\n+  --> $DIR/issue-28837.rs:14:7\n    |\n LL |     a % a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Rem` might be missing for `A`\n \n error[E0369]: binary operation `&` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:16:5\n+  --> $DIR/issue-28837.rs:16:7\n    |\n LL |     a & a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::BitAnd` might be missing for `A`\n \n error[E0369]: binary operation `|` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:18:5\n+  --> $DIR/issue-28837.rs:18:7\n    |\n LL |     a | a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `A`\n \n error[E0369]: binary operation `<<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:20:5\n+  --> $DIR/issue-28837.rs:20:7\n    |\n LL |     a << a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Shl` might be missing for `A`\n \n error[E0369]: binary operation `>>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:22:5\n+  --> $DIR/issue-28837.rs:22:7\n    |\n LL |     a >> a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::ops::Shr` might be missing for `A`\n \n error[E0369]: binary operation `==` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:24:5\n+  --> $DIR/issue-28837.rs:24:7\n    |\n LL |     a == a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `!=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:26:5\n+  --> $DIR/issue-28837.rs:26:7\n    |\n LL |     a != a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `A`\n \n error[E0369]: binary operation `<` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:28:5\n+  --> $DIR/issue-28837.rs:28:7\n    |\n LL |     a < a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:30:5\n+  --> $DIR/issue-28837.rs:30:7\n    |\n LL |     a <= a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:32:5\n+  --> $DIR/issue-28837.rs:32:7\n    |\n LL |     a > a;\n-   |     ^^^^^\n+   |     - ^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n-  --> $DIR/issue-28837.rs:34:5\n+  --> $DIR/issue-28837.rs:34:7\n    |\n LL |     a >= a;\n-   |     ^^^^^^\n+   |     - ^^ - A\n+   |     |\n+   |     A\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `A`\n "}, {"sha": "60a3be1c36b753585628a8260d625d8b6c88dc1b", "filename": "src/test/ui/issues/issue-31076.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,16 +1,20 @@\n error[E0369]: binary operation `+` cannot be applied to type `{integer}`\n-  --> $DIR/issue-31076.rs:13:13\n+  --> $DIR/issue-31076.rs:13:15\n    |\n LL |     let x = 5 + 6;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             {integer}\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `{integer}`\n \n error[E0369]: binary operation `+` cannot be applied to type `i32`\n-  --> $DIR/issue-31076.rs:15:13\n+  --> $DIR/issue-31076.rs:15:18\n    |\n LL |     let y = 5i32 + 6i32;\n-   |             ^^^^^^^^^^^\n+   |             ---- ^ ---- i32\n+   |             |\n+   |             i32\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `i32`\n "}, {"sha": "59ca874bd20189cbb71dc27a5e3725615a2239e1", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `&T`\n-  --> $DIR/issue-35668.rs:2:22\n+  --> $DIR/issue-35668.rs:2:23\n    |\n LL |     a.iter().map(|a| a*a)\n-   |                      ^^^\n+   |                      -^- &T\n+   |                      |\n+   |                      &T\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `&T`\n "}, {"sha": "35eceb3b3c63759ac8658d5dcaf7e26d11783e6b", "filename": "src/test/ui/issues/issue-3820.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `Thing`\n-  --> $DIR/issue-3820.rs:14:13\n+  --> $DIR/issue-3820.rs:14:15\n    |\n LL |     let w = u * 3;\n-   |             ^^^^^\n+   |             - ^ - {integer}\n+   |             |\n+   |             Thing\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `Thing`\n "}, {"sha": "9d5775919296d982ec4befa46c7c51b615f3baa9", "filename": "src/test/ui/issues/issue-40610.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `()`\n-  --> $DIR/issue-40610.rs:4:5\n+  --> $DIR/issue-40610.rs:4:8\n    |\n LL |     () + f(&[1.0]);\n-   |     ^^^^^^^^^^^^^^\n+   |     -- ^ --------- ()\n+   |     |\n+   |     ()\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `()`\n "}, {"sha": "5de5889d8172d1c064d378658675b49ee529e9f8", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-41394.rs:2:9\n+  --> $DIR/issue-41394.rs:2:12\n    |\n LL |     A = \"\" + 1\n-   |         ^^^^^^\n+   |         -- ^ - {integer}\n+   |         |\n+   |         &str\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&str`\n "}, {"sha": "88466131e3144db988a478ad59b6dafd21d7b8b9", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,11 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-47377.rs:4:12\n+  --> $DIR/issue-47377.rs:4:14\n    |\n LL |      let _a = b + \", World!\";\n-   |               ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |               - ^ ---------- &str\n+   |               | |\n+   |               | `+` can't be used to concatenate two `&str` strings\n+   |               &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |      let _a = b.to_owned() + \", World!\";"}, {"sha": "d69101eab4c46e2f5bd4e9e0aeb4b67eb55aa6c9", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,11 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-47380.rs:3:33\n+  --> $DIR/issue-47380.rs:3:35\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n-   |                                      ^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |                                      - ^ ---------- &str\n+   |                                      | |\n+   |                                      | `+` can't be used to concatenate two `&str` strings\n+   |                                      &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";"}, {"sha": "8899b0d43cd8bb31e3d646622556e783fb15461a", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -38,10 +38,12 @@ LL |     false == 0 < 2;\n               found type `{integer}`\n \n error[E0369]: binary operation `<` cannot be applied to type `fn() {f::<_>}`\n-  --> $DIR/require-parens-for-chained-comparison.rs:13:5\n+  --> $DIR/require-parens-for-chained-comparison.rs:13:6\n    |\n LL |     f<X>();\n-   |     ^^^\n+   |     -^- X\n+   |     |\n+   |     fn() {f::<_>}\n    |\n    = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() {f::<_>}`\n "}, {"sha": "7c6ae499cbb07206c317d0a68ed201af752346b5", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `std::vec::Vec<isize>`\n-  --> $DIR/pattern-tyvar-2.rs:3:69\n+  --> $DIR/pattern-tyvar-2.rs:3:71\n    |\n LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n-   |                                                                     ^^^^^\n+   |                                                                     - ^ - {integer}\n+   |                                                                     |\n+   |                                                                     std::vec::Vec<isize>\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `std::vec::Vec<isize>`\n "}, {"sha": "996d80a07e058ed2d471b7bf7309fe6acb61d9c2", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -50,10 +50,7 @@ error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:21:9\n    |\n LL |     s = format!(\"foo\");\n-   |         ^^^^^^^^^^^^^^\n-   |         |\n-   |         expected mutable reference, found struct `std::string::String`\n-   |         help: consider mutably borrowing here: `&mut format!(\"foo\")`\n+   |         ^^^^^^^^^^^^^^ expected mutable reference, found struct `std::string::String`\n    |\n    = note: expected type `&mut std::string::String`\n               found type `std::string::String`"}, {"sha": "a5b91f090d2c01a62d08fccad35f1a5c89a08935", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,26 +1,35 @@\n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-39018.rs:2:13\n+  --> $DIR/issue-39018.rs:2:22\n    |\n LL |     let x = \"Hello \" + \"World!\";\n-   |             ^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate two `&str` strings\n+   |             -------- ^ -------- &str\n+   |             |        |\n+   |             |        `+` can't be used to concatenate two `&str` strings\n+   |             &str\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^\n \n error[E0369]: binary operation `+` cannot be applied to type `World`\n-  --> $DIR/issue-39018.rs:8:13\n+  --> $DIR/issue-39018.rs:8:26\n    |\n LL |     let y = World::Hello + World::Goodbye;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             ------------ ^ -------------- World\n+   |             |\n+   |             World\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n \n error[E0369]: binary operation `+` cannot be applied to type `&str`\n-  --> $DIR/issue-39018.rs:11:13\n+  --> $DIR/issue-39018.rs:11:22\n    |\n LL |     let x = \"Hello \" + \"World!\".to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n+   |             ---------^--------------------\n+   |             |          |\n+   |             |          std::string::String\n+   |             &str\n+   |             `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();"}, {"sha": "61ebcfdefc31601c5776e8a30372ed8d645d891a", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n-  --> $DIR/str-concat-on-double-ref.rs:4:13\n+  --> $DIR/str-concat-on-double-ref.rs:4:15\n    |\n LL |     let c = a + b;\n-   |             ^^^^^\n+   |             - ^ - &str\n+   |             |\n+   |             &std::string::String\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&std::string::String`\n "}, {"sha": "ef1c09d218058050b2ca72ece7c8412907009a60", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.rs?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -0,0 +1,14 @@\n+fn warn(_: &str) {}\n+\n+macro_rules! intrinsic_match {\n+    ($intrinsic:expr) => {\n+        warn(format!(\"unsupported intrinsic {}\", $intrinsic));\n+        //~^ ERROR mismatched types\n+    };\n+}\n+\n+fn main() {\n+    intrinsic_match! {\n+        \"abc\"\n+    };\n+}"}, {"sha": "bc7a7247a12830e62a557676240d4813e0a3978f", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -0,0 +1,18 @@\n+error[E0308]: mismatched types\n+  --> $DIR/dont-suggest-deref-inside-macro-issue-58298.rs:11:5\n+   |\n+LL | /     intrinsic_match! {\n+LL | |         \"abc\"\n+LL | |     };\n+   | |      ^\n+   | |      |\n+   | |______expected &str, found struct `std::string::String`\n+   |        in this macro invocation\n+   |\n+   = note: expected type `&str`\n+              found type `std::string::String`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d11562e2a001b3694b82733a0eea012a3e037d80", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `*` cannot be applied to type `&T`\n-  --> $DIR/trait-resolution-in-overloaded-op.rs:8:5\n+  --> $DIR/trait-resolution-in-overloaded-op.rs:8:7\n    |\n LL |     a * b\n-   |     ^^^^^\n+   |     - ^ - f64\n+   |     |\n+   |     &T\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `&T`\n "}, {"sha": "b0e3c35c7056758bf6302eac05b0c78b49b80caa", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `T`\n-  --> $DIR/missing_trait_impl.rs:5:13\n+  --> $DIR/missing_trait_impl.rs:5:15\n    |\n LL |     let z = x + y;\n-   |             ^^^^^\n+   |             - ^ - T\n+   |             |\n+   |             T\n    |\n    = note: `T` might need a bound for `std::ops::Add`\n "}, {"sha": "78b70f09e900544b549be56605fb7ae3b8df5714", "filename": "src/test/ui/vec/vec-res-add.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1,8 +1,10 @@\n error[E0369]: binary operation `+` cannot be applied to type `std::vec::Vec<R>`\n-  --> $DIR/vec-res-add.rs:16:13\n+  --> $DIR/vec-res-add.rs:16:15\n    |\n LL |     let k = i + j;\n-   |             ^^^^^\n+   |             - ^ - std::vec::Vec<R>\n+   |             |\n+   |             std::vec::Vec<R>\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::vec::Vec<R>`\n "}, {"sha": "93d7aa5c1ecb40fde471aac42b7a23a3b43a2a5f", "filename": "src/tools/publish_toolstate.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/e782d790f1b63d82af39248bebe027f92d891bcc/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -20,12 +20,13 @@\n     'rustfmt': '@nrc @topecongiro',\n     'book': '@carols10cents @steveklabnik',\n     'nomicon': '@frewsxcv @Gankro',\n-    'reference': '@steveklabnik @Havvy @matthewjasper @alercah',\n+    'reference': '@steveklabnik @Havvy @matthewjasper @ehuss',\n     'rust-by-example': '@steveklabnik @marioidival @projektir',\n     'embedded-book': (\n         '@adamgreig @andre-richter @jamesmunns @korken89 '\n         '@ryankurte @thejpster @therealprof'\n     ),\n+    'edition-guide': '@ehuss @Centril @steveklabnik',\n }\n \n REPOS = {\n@@ -38,6 +39,7 @@\n     'reference': 'https://github.com/rust-lang-nursery/reference',\n     'rust-by-example': 'https://github.com/rust-lang/rust-by-example',\n     'embedded-book': 'https://github.com/rust-embedded/book',\n+    'edition-guide': 'https://github.com/rust-lang-nursery/edition-guide',\n }\n \n "}, {"sha": "09940a70d0a9fabfb4985426aa7d66ca1875c65e", "filename": "src/tools/rustfmt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt?ref=e782d790f1b63d82af39248bebe027f92d891bcc", "patch": "@@ -1 +1 @@\n-Subproject commit 1427e4c20ba5cdc80a338347585c9de71a0dea4d\n+Subproject commit 09940a70d0a9fabfb4985426aa7d66ca1875c65e"}]}