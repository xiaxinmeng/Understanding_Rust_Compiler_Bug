{"sha": "a246e8faf362a1615b5bb4938455dd70642e0f4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDZlOGZhZjM2MmExNjE1YjViYjQ5Mzg0NTVkZDcwNjQyZTBmNGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T02:11:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-20T22:21:29Z"}, "message": "core::rt: Convert unsafe_borrow_io to a Local impl", "tree": {"sha": "cb7bf40d3d6afcc992a32415160069b1916852e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7bf40d3d6afcc992a32415160069b1916852e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a246e8faf362a1615b5bb4938455dd70642e0f4b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a246e8faf362a1615b5bb4938455dd70642e0f4b", "html_url": "https://github.com/rust-lang/rust/commit/a246e8faf362a1615b5bb4938455dd70642e0f4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a246e8faf362a1615b5bb4938455dd70642e0f4b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2042696236a600b6fedec771e0aeec4b0552709d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2042696236a600b6fedec771e0aeec4b0552709d", "html_url": "https://github.com/rust-lang/rust/commit/2042696236a600b6fedec771e0aeec4b0552709d"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "f7c03c13a58126382738b50babb82f3cec0f63f9", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=a246e8faf362a1615b5bb4938455dd70642e0f4b", "patch": "@@ -10,13 +10,13 @@\n \n use option::{Option, Some, None};\n use result::{Ok, Err};\n-use rt::sched::unsafe_borrow_io;\n use rt::io::net::ip::IpAddr;\n use rt::io::{Reader, Writer, Listener};\n use rt::io::{io_error, read_error, EndOfFile};\n-use rt::rtio::{IoFactory,\n+use rt::rtio::{IoFactory, IoFactoryObject,\n                RtioTcpListener, RtioTcpListenerObject,\n                RtioTcpStream, RtioTcpStreamObject};\n+use rt::local::Local;\n \n pub struct TcpStream {\n     rtstream: ~RtioTcpStreamObject\n@@ -32,7 +32,7 @@ impl TcpStream {\n     pub fn connect(addr: IpAddr) -> Option<TcpStream> {\n         let stream = unsafe {\n             rtdebug!(\"borrowing io to connect\");\n-            let io = unsafe_borrow_io();\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n             rtdebug!(\"about to connect\");\n             (*io).tcp_connect(addr)\n         };\n@@ -88,7 +88,10 @@ pub struct TcpListener {\n \n impl TcpListener {\n     pub fn bind(addr: IpAddr) -> Option<TcpListener> {\n-        let listener = unsafe { (*unsafe_borrow_io()).tcp_bind(addr) };\n+        let listener = unsafe {\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n+            (*io).tcp_bind(addr)\n+        };\n         match listener {\n             Ok(l) => {\n                 Some(TcpListener {"}, {"sha": "64a384ddff0b90e01f40be6fda577a35dea13d3c", "filename": "src/libcore/rt/local.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Flocal.rs?ref=a246e8faf362a1615b5bb4938455dd70642e0f4b", "patch": "@@ -12,6 +12,7 @@ use option::{Option, Some, None};\n use rt::sched::Scheduler;\n use rt::task::Task;\n use rt::local_ptr;\n+use rt::rtio::{EventLoop, IoFactoryObject};\n \n pub trait Local {\n     fn put(value: ~Self);\n@@ -68,6 +69,20 @@ impl Local for Task {\n     }\n }\n \n+// XXX: This formulation won't work once ~IoFactoryObject is a real trait pointer\n+impl Local for IoFactoryObject {\n+    fn put(value: ~IoFactoryObject) { abort!(\"unimpl\") }\n+    fn take() -> ~IoFactoryObject { abort!(\"unimpl\") }\n+    fn exists() -> bool { abort!(\"unimpl\") }\n+    fn borrow(f: &fn(&mut IoFactoryObject)) { abort!(\"unimpl\") }\n+    unsafe fn unsafe_borrow() -> *mut IoFactoryObject {\n+        let sched = Local::unsafe_borrow::<Scheduler>();\n+        let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n+        return io;\n+    }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut IoFactoryObject> { abort!(\"unimpl\") }\n+}\n+\n #[cfg(test)]\n mod test {\n     use rt::sched::Scheduler;"}, {"sha": "50c6a894093f3b1d6b05501fce48fe302e9c1794", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=a246e8faf362a1615b5bb4938455dd70642e0f4b", "patch": "@@ -401,12 +401,6 @@ pub impl Coroutine {\n     }\n }\n \n-pub unsafe fn unsafe_borrow_io() -> *mut IoFactoryObject {\n-    let sched = Local::unsafe_borrow::<Scheduler>();\n-    let io: *mut IoFactoryObject = (*sched).event_loop.io().unwrap();\n-    return io;\n-}\n-\n #[cfg(test)]\n mod test {\n     use int;"}, {"sha": "cacd67314ebac9a0dde6ac6ca540120cc79b6cd5", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a246e8faf362a1615b5bb4938455dd70642e0f4b/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=a246e8faf362a1615b5bb4938455dd70642e0f4b", "patch": "@@ -19,7 +19,6 @@ use rt::io::net::ip::IpAddr;\n use rt::uv::*;\n use rt::uv::idle::IdleWatcher;\n use rt::rtio::*;\n-use rt::sched::unsafe_borrow_io;\n use rt::sched::Scheduler;\n use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n@@ -359,7 +358,7 @@ impl RtioTcpStream for UvTcpStream {\n fn test_simple_io_no_connect() {\n     do run_in_newsched_task {\n         unsafe {\n-            let io = unsafe_borrow_io();\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n             let addr = next_test_ip4();\n             let maybe_chan = (*io).tcp_connect(addr);\n             assert!(maybe_chan.is_err());\n@@ -375,7 +374,7 @@ fn test_simple_tcp_server_and_client() {\n         // Start the server first so it's listening when we connect\n         do spawntask_immediately {\n             unsafe {\n-                let io = unsafe_borrow_io();\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n                 let mut listener = (*io).tcp_bind(addr).unwrap();\n                 let mut stream = listener.accept().unwrap();\n                 let mut buf = [0, .. 2048];\n@@ -390,7 +389,7 @@ fn test_simple_tcp_server_and_client() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = unsafe_borrow_io();\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n             }\n@@ -404,7 +403,7 @@ fn test_read_and_block() {\n         let addr = next_test_ip4();\n \n         do spawntask_immediately {\n-            let io = unsafe { unsafe_borrow_io() };\n+            let io = unsafe { Local::unsafe_borrow::<IoFactoryObject>() };\n             let mut listener = unsafe { (*io).tcp_bind(addr).unwrap() };\n             let mut stream = listener.accept().unwrap();\n             let mut buf = [0, .. 2048];\n@@ -440,7 +439,7 @@ fn test_read_and_block() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = unsafe_borrow_io();\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -460,7 +459,7 @@ fn test_read_read_read() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = unsafe_borrow_io();\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n                 let mut listener = (*io).tcp_bind(addr).unwrap();\n                 let mut stream = listener.accept().unwrap();\n                 let buf = [1, .. 2048];\n@@ -474,7 +473,7 @@ fn test_read_read_read() {\n \n         do spawntask_immediately {\n             unsafe {\n-                let io = unsafe_borrow_io();\n+                let io = Local::unsafe_borrow::<IoFactoryObject>();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 let mut buf = [0, .. 2048];\n                 let mut total_bytes_read = 0;"}]}