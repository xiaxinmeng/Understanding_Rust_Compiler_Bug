{"sha": "9a2e2450f968f60877f595d0609c15ad5ee821fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMmUyNDUwZjk2OGY2MDg3N2Y1OTVkMDYwOWMxNWFkNWVlODIxZmE=", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-05-17T13:40:46Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-05-24T20:40:03Z"}, "message": "add thiscall calling convention support\n\nThis support is needed for bindgen to work well on 32-bit Windows, and\nalso enables people to begin experimenting with C++ FFI support on that\nplatform.\n\nFixes #42044.", "tree": {"sha": "e816b47281fb7f6bde01847b0c1beb814dc59355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e816b47281fb7f6bde01847b0c1beb814dc59355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a2e2450f968f60877f595d0609c15ad5ee821fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2e2450f968f60877f595d0609c15ad5ee821fa", "html_url": "https://github.com/rust-lang/rust/commit/9a2e2450f968f60877f595d0609c15ad5ee821fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a2e2450f968f60877f595d0609c15ad5ee821fa/comments", "author": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b13bff5203c1bdc6ac6dc87f69b5359a9503078", "html_url": "https://github.com/rust-lang/rust/commit/5b13bff5203c1bdc6ac6dc87f69b5359a9503078"}], "stats": {"total": 72, "additions": 70, "deletions": 2}, "files": [{"sha": "754ceadbccd56eaadf6326c24ef5183067dcca5e", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -7,6 +7,7 @@\n     - [abi_msp430_interrupt](language-features/abi-msp430-interrupt.md)\n     - [abi_ptx](language-features/abi-ptx.md)\n     - [abi_sysv64](language-features/abi-sysv64.md)\n+    - [abi_thiscall](language-features/abi-thiscall.md)\n     - [abi_unadjusted](language-features/abi-unadjusted.md)\n     - [abi_vectorcall](language-features/abi-vectorcall.md)\n     - [abi_x86_interrupt](language-features/abi-x86-interrupt.md)"}, {"sha": "73bc6eacf42cee126c3c39f7cd38daf2476ec4b0", "filename": "src/doc/unstable-book/src/language-features/abi-thiscall.md", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-thiscall.md?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -0,0 +1,12 @@\n+# `abi_thiscall`\n+\n+The tracking issue for this feature is: [#42202]\n+\n+[#42202]: https://github.com/rust-lang/rust/issues/42202\n+\n+------------------------\n+\n+The MSVC ABI on x86 Windows uses the `thiscall` calling convention for C++\n+instance methods by default; it is identical to the usual (C) calling\n+convention on x86 Windows except that the first parameter of the method,\n+the `this` pointer, is passed in the ECX register."}, {"sha": "d0bdf266332de0ee4a973574f9cb48b4f383283d", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -63,6 +63,7 @@ impl_stable_hash_for!(enum ::syntax::abi::Abi {\n     Stdcall,\n     Fastcall,\n     Vectorcall,\n+    Thiscall,\n     Aapcs,\n     Win64,\n     SysV64,"}, {"sha": "416e5a0e13a887d49384fa8b20dc3774cbb5d7fc", "filename": "src/librustc_back/target/arm_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_back%2Ftarget%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_back%2Ftarget%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_base.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -12,5 +12,5 @@ use syntax::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n pub fn abi_blacklist() -> Vec<Abi> {\n-    vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Win64, Abi::SysV64]\n+    vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Thiscall, Abi::Win64, Abi::SysV64]\n }"}, {"sha": "d7b575d90a68b3807c40501723ecb8cc2b679c25", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -49,6 +49,7 @@ pub enum CallConv {\n     X86FastcallCallConv = 65,\n     ArmAapcsCallConv = 67,\n     Msp430Intr = 69,\n+    X86_ThisCall = 70,\n     PtxKernel = 71,\n     X86_64_SysV = 78,\n     X86_64_Win64 = 79,"}, {"sha": "9b94a3b2f234b39106a8ea5e1e5bedbd7b967785", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -642,6 +642,7 @@ impl<'a, 'tcx> FnType<'tcx> {\n             Stdcall => llvm::X86StdcallCallConv,\n             Fastcall => llvm::X86FastcallCallConv,\n             Vectorcall => llvm::X86_VectorCall,\n+            Thiscall => llvm::X86_ThisCall,\n             C => llvm::CCallConv,\n             Unadjusted => llvm::CCallConv,\n             Win64 => llvm::X86_64_Win64,"}, {"sha": "ed2eb209906958a079fef8d48f6b85965a8f7a32", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -20,6 +20,7 @@ pub enum Abi {\n     Stdcall,\n     Fastcall,\n     Vectorcall,\n+    Thiscall,\n     Aapcs,\n     Win64,\n     SysV64,\n@@ -55,6 +56,7 @@ const AbiDatas: &'static [AbiData] = &[\n     AbiData {abi: Abi::Stdcall, name: \"stdcall\", generic: false },\n     AbiData {abi: Abi::Fastcall, name: \"fastcall\", generic: false },\n     AbiData {abi: Abi::Vectorcall, name: \"vectorcall\", generic: false},\n+    AbiData {abi: Abi::Thiscall, name: \"thiscall\", generic: false},\n     AbiData {abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n     AbiData {abi: Abi::Win64, name: \"win64\", generic: false },\n     AbiData {abi: Abi::SysV64, name: \"sysv64\", generic: false },"}, {"sha": "f9fe072ef878a4b20401c9b213aab8dd9d893afa", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -352,6 +352,9 @@ declare_features! (\n \n     // Allows use of the :vis macro fragment specifier\n     (active, macro_vis_matcher, \"1.18.0\", Some(41022)),\n+\n+    // rustc internal\n+    (active, abi_thiscall, \"1.19.0\", None),\n );\n \n declare_features! (\n@@ -1051,6 +1054,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_vectorcall, span,\n                                    \"vectorcall is experimental and subject to change\");\n             },\n+            Abi::Thiscall => {\n+                gate_feature_post!(&self, abi_thiscall, span,\n+                                   \"thiscall is experimental and subject to change\");\n+            },\n             Abi::RustCall => {\n                 gate_feature_post!(&self, unboxed_closures, span,\n                                    \"rust-call ABI is subject to change\");"}, {"sha": "45c715f51fe4810f8ca8868d5e8842519a185def", "filename": "src/test/compile-fail/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-abi.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -11,6 +11,7 @@\n // gate-test-intrinsics\n // gate-test-platform_intrinsics\n // gate-test-abi_vectorcall\n+// gate-test-abi_thiscall\n // gate-test-abi_ptx\n // gate-test-abi_x86_interrupt\n \n@@ -22,6 +23,7 @@ extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n+extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -32,6 +34,7 @@ trait Tr {\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n+    extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n \n     extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n     extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n@@ -40,6 +43,7 @@ trait Tr {\n     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n+    extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n }\n \n struct S;\n@@ -53,6 +57,7 @@ impl Tr for S {\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n+    extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -64,6 +69,7 @@ impl S {\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n+    extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n }\n \n // Function pointer types\n@@ -74,6 +80,7 @@ type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n+type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -83,5 +90,6 @@ extern \"rust-call\" {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" {} //~ ERROR msp430-interrupt ABI is experimental\n extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n+extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n \n fn main() {}"}, {"sha": "a669f29d098a02acd355eaa1c68ccf4892e2a47c", "filename": "src/test/run-pass/extern-thiscall.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Frun-pass%2Fextern-thiscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Frun-pass%2Fextern-thiscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-thiscall.rs?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-arm\n+// ignore-aarch64\n+\n+#![feature(abi_thiscall)]\n+\n+trait A {\n+    extern \"thiscall\" fn test1(i: i32);\n+}\n+\n+struct S;\n+\n+impl A for S {\n+    extern \"thiscall\" fn test1(i: i32) {\n+        assert_eq!(i, 1);\n+    }\n+}\n+\n+extern \"thiscall\" fn test2(i: i32) {\n+    assert_eq!(i, 2);\n+}\n+\n+fn main() {\n+    <S as A>::test1(1);\n+    test2(2);\n+}"}, {"sha": "0828fd28b5878642ec5c640d90fcb0aad1ed8ba3", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2e2450f968f60877f595d0609c15ad5ee821fa/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=9a2e2450f968f60877f595d0609c15ad5ee821fa", "patch": "@@ -1,4 +1,4 @@\n-error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n+error: invalid ABI: expected one of [cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted], found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:11:8\n    |\n 11 | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}"}]}