{"sha": "17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YjI4NWQyMDM2ZjEzZjRhYTA2ODcxZWJmYTdlYjkyZDFiZDFkYjM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-02-23T20:52:05Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T21:10:59Z"}, "message": "Added UserAssertTy statement.", "tree": {"sha": "45146d15c2eb50863c03515f15f03e2eaf68c38d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45146d15c2eb50863c03515f15f03e2eaf68c38d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlq0G+QACgkQAXYLT59T\n8VTvVQ//Zb6LB2ZV163jhCUomIkkZ9jtd4IbMEAwhewZPLPPrIUOs8a9A5/MNKrc\n9AB1fZRsRxd+ss36tlC7RPTBJmNKoCdT2PjZ6EeKfc2mqKpxIsbpbgeJ6gsPBKOL\nbKLei1zyJzO9fwjE1YfrbcRHY6i10VHjJSJq2wCFQENcOAHucSjVtjgIGfdllfPg\nc1PshYFd7l9CjjFJbaPZAcaXfw4ORy99m/vkppsWjZJkLD7Am29bpxwbxCfBQUqp\nYi418yjMWPHK9vPKWrh1zpgrZg7zxADa4WGpYIwT149Gk6vPG8dIzf4D9En3akyo\n8mfycMVQs34GNYyTRFcHcWggFlMA3RK0h+kSai+Z4Or4+MPm+DQG2oUMF+qe96mF\nmpY0WZgAQKoWLGpAf9n+1/uvzvo7gewzYUaC9M8SQNMaAcB6RhwFEd7UThbV7KzZ\n3KpJWMYz8r0NuwWw7R61K7p8wdJOJyTyMedXZD1Cz49pHXCHZCFAQfhBjbpSCPoy\nFG4O7KLV3ytk3xS3X8KplWwUg8zs/HWwxoQ8QGiXUcmnrS1VwmKUUiDiZsJbz+iD\njCp+glmBJl6BL6PNpoXPNU/SxxiqgmZ5v0ZfdzXQH61bkxiSWL6yGSwW/ZHU34s4\nVlwcpm2Bldwlhcdt30JxEZ8GfLQ5QADkogeLImt5q+sJZwpyIx0=\n=sml7\n-----END PGP SIGNATURE-----", "payload": "tree 45146d15c2eb50863c03515f15f03e2eaf68c38d\nparent c0fdb293620c86088b6e6d655721c45595b29fbd\nauthor David Wood <david@davidtw.co> 1519419125 +0000\ncommitter David Wood <david@davidtw.co> 1521753059 +0000\n\nAdded UserAssertTy statement.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "html_url": "https://github.com/rust-lang/rust/commit/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0fdb293620c86088b6e6d655721c45595b29fbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0fdb293620c86088b6e6d655721c45595b29fbd", "html_url": "https://github.com/rust-lang/rust/commit/c0fdb293620c86088b6e6d655721c45595b29fbd"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "ff73f135ce6436a3b0b1afef26cfc21f4bc6258d", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -277,6 +277,10 @@ for mir::StatementKind<'gcx> {\n                 op.hash_stable(hcx, hasher);\n                 places.hash_stable(hcx, hasher);\n             }\n+            mir::StatementKind::UserAssertTy(ref ty, ref local) => {\n+                ty.hash_stable(hcx, hasher);\n+                local.hash_stable(hcx, hasher);\n+            }\n             mir::StatementKind::Nop => {}\n             mir::StatementKind::InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 asm.hash_stable(hcx, hasher);"}, {"sha": "c36e401e8d69b07cd0f24d71bf8b639b6b6ae3dd", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -1253,6 +1253,15 @@ pub enum StatementKind<'tcx> {\n     /// (The starting point(s) arise implicitly from borrows.)\n     EndRegion(region::Scope),\n \n+    /// Encodes a user's type assertion. These need to be preserved intact so that NLL can respect\n+    /// them. For example:\n+    ///\n+    ///     let (a, b): (T, U) = y;\n+    ///\n+    /// Here we would insert a `UserAssertTy<(T, U)>(y)` instruction to check that the type of `y`\n+    /// is the right thing.\n+    UserAssertTy(Ty<'tcx>, Local),\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }\n@@ -1324,6 +1333,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n             InlineAsm { ref asm, ref outputs, ref inputs } => {\n                 write!(fmt, \"asm!({:?} : {:?} : {:?})\", asm, outputs, inputs)\n             },\n+            UserAssertTy(ref ty, ref local) => write!(fmt, \"UserAssertTy({:?}, {:?})\", ty, local),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }\n@@ -2184,6 +2194,7 @@ EnumTypeFoldableImpl! {\n         (StatementKind::InlineAsm) { asm, outputs, inputs },\n         (StatementKind::Validate)(a, b),\n         (StatementKind::EndRegion)(a),\n+        (StatementKind::UserAssertTy)(a, b),\n         (StatementKind::Nop),\n     }\n }"}, {"sha": "cc5d9692e7a607a08210aa6915887066941b09ca", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -144,6 +144,13 @@ macro_rules! make_mir_visitor {\n                 self.super_operand(operand, location);\n             }\n \n+            fn visit_user_assert_ty(&mut self,\n+                                    ty: & $($mutability)* Ty<'tcx>,\n+                                    local: & $($mutability)* Local,\n+                                    location: Location) {\n+                self.super_user_assert_ty(ty, local, location);\n+            }\n+\n             fn visit_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,\n@@ -376,6 +383,10 @@ macro_rules! make_mir_visitor {\n                             self.visit_operand(input, location);\n                         }\n                     }\n+                    StatementKind::UserAssertTy(ref $($mutability)* ty,\n+                                                ref $($mutability)* local) => {\n+                        self.visit_user_assert_ty(ty, local, location);\n+                    }\n                     StatementKind::Nop => {}\n                 }\n             }\n@@ -619,6 +630,14 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n+            fn super_user_assert_ty(&mut self,\n+                                    ty: & $($mutability)* Ty<'tcx>,\n+                                    local: & $($mutability)* Local,\n+                                    location: Location) {\n+                self.visit_ty(ty, TyContext::Location(location));\n+                self.visit_local(local, PlaceContext::Validate, location);\n+            }\n+\n             fn super_place(&mut self,\n                             place: & $($mutability)* Place<'tcx>,\n                             context: PlaceContext<'tcx>,"}, {"sha": "305df37466d02a9aa724f8c722012e199dabb231", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -392,11 +392,13 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // ignored when consuming results (update to\n                 // flow_state already handled).\n             }\n-            StatementKind::Nop | StatementKind::Validate(..) | StatementKind::StorageLive(..) => {\n-                // `Nop`, `Validate`, and `StorageLive` are irrelevant\n+            StatementKind::Nop |\n+            StatementKind::UserAssertTy(..) |\n+            StatementKind::Validate(..) |\n+            StatementKind::StorageLive(..) => {\n+                // `Nop`, `UserAssertTy`, `Validate`, and `StorageLive` are irrelevant\n                 // to borrow check.\n             }\n-\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     ContextKind::StorageDead.new(location),"}, {"sha": "f070691a5cf8c7b82c4644decd36c00321209205", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -766,6 +766,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             | StatementKind::InlineAsm { .. }\n             | StatementKind::EndRegion(_)\n             | StatementKind::Validate(..)\n+            | StatementKind::UserAssertTy(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "02d2522b6ba91fee483ac073c261f6842a90c94c", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -102,6 +102,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     remainder_scope,\n                     init_scope,\n                     pattern,\n+                    ty,\n                     initializer,\n                     lint_level\n                 } => {\n@@ -120,12 +121,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n                                 let scope = (init_scope, source_info);\n                                 this.in_scope(scope, lint_level, block, |this| {\n-                                    this.expr_into_pattern(block, pattern, init)\n+                                    this.expr_into_pattern(block, ty, pattern, init)\n                                 })\n                             }));\n                     } else {\n                         this.visit_bindings(&pattern, &mut |this, _, _, node, span, _| {\n                             this.storage_live_binding(block, node, span);\n+                            if let Some(ty) = ty {\n+                                this.user_assert_ty(block, ty, node, span);\n+                            }\n                             this.schedule_drop_for_binding(node, span);\n                         })\n                     }"}, {"sha": "4353eb5e4bd38449f6697c5a76271b21566fe100", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -145,8 +145,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         end_block.unit()\n     }\n \n+    pub fn user_assert_ty(&mut self, block: BasicBlock, ty: Ty<'tcx>, var: NodeId, span: Span) {\n+        let local_id = self.var_indices[&var];\n+        let source_info = self.source_info(span);\n+        self.cfg.push(block, Statement {\n+            source_info,\n+            kind: StatementKind::UserAssertTy(ty, local_id),\n+        });\n+    }\n+\n     pub fn expr_into_pattern(&mut self,\n                              mut block: BasicBlock,\n+                             ty: Option<Ty<'tcx>>,\n                              irrefutable_pat: Pattern<'tcx>,\n                              initializer: ExprRef<'tcx>)\n                              -> BlockAnd<()> {\n@@ -156,6 +166,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                    var,\n                                    subpattern: None, .. } => {\n                 let place = self.storage_live_binding(block, var, irrefutable_pat.span);\n+\n+                if let Some(ty) = ty {\n+                    self.user_assert_ty(block, ty, var, irrefutable_pat.span);\n+                }\n+\n                 unpack!(block = self.into(&place, block, initializer));\n                 self.schedule_drop_for_binding(var, irrefutable_pat.span);\n                 block.unit()"}, {"sha": "fb3042014df6af8e6098a4683a31d14f4fb9dc0d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -678,6 +678,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n             mir::StatementKind::SetDiscriminant { .. } |\n             mir::StatementKind::StorageLive(..) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => {}\n \n         }"}, {"sha": "cbf4c822769c616f38f87784ec7566fe3688299c", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -298,6 +298,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n             }\n             StatementKind::EndRegion(_) |\n             StatementKind::Validate(..) |\n+            StatementKind::UserAssertTy(..) |\n             StatementKind::Nop => {}\n         }\n     }"}, {"sha": "f04973383037806535c9eb0a875654c3443796d3", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -76,12 +76,14 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: region::FirstStatementIndex::new(index),\n                         });\n \n+                        let ty = local.ty.clone().map(|ty| cx.tables().node_id_to_type(ty.hir_id));\n                         let pattern = cx.pattern_from_hir(&local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             kind: StmtKind::Let {\n                                 remainder_scope: remainder_scope,\n                                 init_scope: region::Scope::Node(hir_id.local_id),\n                                 pattern,\n+                                ty,\n                                 initializer: local.init.to_ref(),\n                                 lint_level: cx.lint_level_of(local.id),\n                             },"}, {"sha": "138944189ff5aad19884c2ef4412a46980eae64d", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -93,10 +93,13 @@ pub enum StmtKind<'tcx> {\n         /// lifetime of temporaries\n         init_scope: region::Scope,\n \n-        /// let <PAT> = ...\n+        /// let <PAT>: ty = ...\n         pattern: Pattern<'tcx>,\n \n-        /// let pat = <INIT> ...\n+        /// let pat: <TY> = init ...\n+        ty: Option<Ty<'tcx>>,\n+\n+        /// let pat: ty = <INIT> ...\n         initializer: Option<ExprRef<'tcx>>,\n \n         /// the lint level for this let-statement"}, {"sha": "f1d58ff5e884e5b7d00e8141264764a86d54bacb", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -89,6 +89,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 M::end_region(self, Some(ce))?;\n             }\n \n+            UserAssertTy(..) => {}\n+\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}"}, {"sha": "02c703996643ab4ff8dfff22ccc8b2455e2b16cc", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -105,6 +105,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             StatementKind::StorageDead(..) |\n             StatementKind::EndRegion(..) |\n             StatementKind::Validate(..) |\n+            StatementKind::UserAssertTy(..) |\n             StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "a06571d0abddf492cd40b694cacd31977d98e37a", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -234,6 +234,8 @@ fn optimized_mir<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx\n         simplify_branches::SimplifyBranches::new(\"initial\"),\n         remove_noop_landing_pads::RemoveNoopLandingPads,\n         simplify::SimplifyCfg::new(\"early-opt\"),\n+        // Remove all `UserAssertTy` statements.\n+        cleanup_post_borrowck::CleanUserAssertTy,\n \n         // These next passes must be executed together\n         add_call_guards::CriticalCallEdges,"}, {"sha": "8e2f98d276966c0ec6b08f20ee0002acf5dee604", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -1099,6 +1099,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 StatementKind::InlineAsm {..} |\n                 StatementKind::EndRegion(_) |\n                 StatementKind::Validate(..) |\n+                StatementKind::UserAssertTy(..) |\n                 StatementKind::Nop => {}\n             }\n         });"}, {"sha": "6d365012525f612833d4c47454071059d9fc1bfb", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -50,6 +50,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::StorageLive(_) |\n                 StatementKind::StorageDead(_) |\n                 StatementKind::EndRegion(_) |\n+                StatementKind::UserAssertTy(..) |\n                 StatementKind::Nop => {\n                     // These are all nops in a landing pad (there's some\n                     // borrowck interaction between EndRegion and storage"}, {"sha": "45e7a0d3f4c5ab9bd152d54498cda2075eaeebd2", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -163,6 +163,7 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             mir::StatementKind::InlineAsm { .. } |\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => continue,\n             mir::StatementKind::SetDiscriminant{ .. } =>\n                 span_bug!(stmt.source_info.span,"}, {"sha": "a4e056c6b589ee3841d7779acb05186745337a44", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -90,6 +90,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n             StatementKind::StorageLive(..) => \"StatementKind::StorageLive\",\n             StatementKind::StorageDead(..) => \"StatementKind::StorageDead\",\n             StatementKind::InlineAsm { .. } => \"StatementKind::InlineAsm\",\n+            StatementKind::UserAssertTy(..) => \"StatementKind::UserAssertTy\",\n             StatementKind::Nop => \"StatementKind::Nop\",\n         }, &statement.kind);\n         self.super_statement(block, statement, location);"}, {"sha": "579b07929a2f2343792d565117bf823609de178e", "filename": "src/librustc_trans/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17b285d2036f13f4aa06871ebfa7eb92d1bd1db3/src%2Flibrustc_trans%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fstatement.rs?ref=17b285d2036f13f4aa06871ebfa7eb92d1bd1db3", "patch": "@@ -84,6 +84,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n             }\n             mir::StatementKind::EndRegion(_) |\n             mir::StatementKind::Validate(..) |\n+            mir::StatementKind::UserAssertTy(..) |\n             mir::StatementKind::Nop => bx,\n         }\n     }"}]}