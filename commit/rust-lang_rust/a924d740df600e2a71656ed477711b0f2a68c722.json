{"sha": "a924d740df600e2a71656ed477711b0f2a68c722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MjRkNzQwZGY2MDBlMmE3MTY1NmVkNDc3NzExYjBmMmE2OGM3MjI=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-16T22:40:21Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-16T22:40:21Z"}, "message": "Switch to each_in_scope_loan_affecting_path\n\nThe last remaining use of each_in_scope_restriction in\ncheck_for_assignment_to_restricted_or_frozen_location is using the\npattern captured by each_in_scope_loan_affecting_path, so it can be\nremoved.", "tree": {"sha": "9410fb7204cd19f668cf46847092d54360f800c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9410fb7204cd19f668cf46847092d54360f800c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a924d740df600e2a71656ed477711b0f2a68c722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a924d740df600e2a71656ed477711b0f2a68c722", "html_url": "https://github.com/rust-lang/rust/commit/a924d740df600e2a71656ed477711b0f2a68c722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a924d740df600e2a71656ed477711b0f2a68c722/comments", "author": null, "committer": null, "parents": [{"sha": "69f4839b926d6435df83cd80945d9f843cf60e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/69f4839b926d6435df83cd80945d9f843cf60e27", "html_url": "https://github.com/rust-lang/rust/commit/69f4839b926d6435df83cd80945d9f843cf60e27"}], "stats": {"total": 83, "additions": 1, "deletions": 82}, "files": [{"sha": "5c18001930e2878b73437bb6a820f76c359236e8", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/a924d740df600e2a71656ed477711b0f2a68c722/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a924d740df600e2a71656ed477711b0f2a68c722/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=a924d740df600e2a71656ed477711b0f2a68c722", "patch": "@@ -195,31 +195,6 @@ impl<'a> CheckLoanCtxt<'a> {\n         })\n     }\n \n-    pub fn each_in_scope_restriction(&self,\n-                                     scope_id: ast::NodeId,\n-                                     loan_path: &LoanPath,\n-                                     op: |&Loan| -> bool)\n-                                     -> bool {\n-        //! Iterates through all the in-scope restrictions for the\n-        //! given `loan_path`\n-\n-        self.each_in_scope_loan(scope_id, |loan| {\n-            debug!(\"each_in_scope_restriction found loan: {:?}\",\n-                   loan.repr(self.tcx()));\n-\n-            let mut ret = true;\n-            for restr_path in loan.restricted_paths.iter() {\n-                if **restr_path == *loan_path {\n-                    if !op(loan) {\n-                        ret = false;\n-                        break;\n-                    }\n-                }\n-            }\n-            ret\n-        })\n-    }\n-\n     fn each_in_scope_loan_affecting_path(&self,\n                                          scope_id: ast::NodeId,\n                                          loan_path: &LoanPath,\n@@ -835,66 +810,10 @@ impl<'a> CheckLoanCtxt<'a> {\n                 None => { return; /* no loan path, can't be any loans */ }\n             };\n \n-            // Start by searching for an assignment to a *restricted*\n-            // location. Here is one example of the kind of error caught\n-            // by this check:\n-            //\n-            //    let mut v = ~[1, 2, 3];\n-            //    let p = &v;\n-            //    v = ~[4];\n-            //\n-            // In this case, creating `p` restricts the mutation of `v`.\n-\n-            let cont = this.each_in_scope_restriction(assignment_id,\n-                                                      &*loan_path,\n-                                                      |loan| {\n+            this.each_in_scope_loan_affecting_path(assignment_id, &*loan_path, |loan| {\n                 this.report_illegal_mutation(assignment_span, &*loan_path, loan);\n                 false\n             });\n-\n-            if !cont { return; }\n-\n-            // The previous code handled assignments to paths that\n-            // have been restricted. This covers paths that have been\n-            // directly lent out and their base paths, but does not\n-            // cover random extensions of those paths. For example,\n-            // the following program is not declared illegal by the\n-            // previous check:\n-            //\n-            //    let mut v = ~[1, 2, 3];\n-            //    let p = &v;\n-            //    v[0] = 4; // declared error by loop below, not code above\n-            //\n-            // The reason that this passes the previous check whereas\n-            // an assignment like `v = ~[4]` fails is because the assignment\n-            // here is to `v[*]`, and the existing restrictions were issued\n-            // for `v`, not `v[*]`.\n-            //\n-            // So in this loop, we walk back up the path and look for\n-            // loans, not restrictions.\n-\n-            let full_loan_path = loan_path.clone();\n-            let mut loan_path = loan_path;\n-            loop {\n-                loan_path = match *loan_path {\n-                    LpExtend(ref lp_base, _, _) => {\n-                        lp_base.clone()\n-                    }\n-                    LpVar(_) => {\n-                        return;\n-                    }\n-                };\n-\n-                // Check for a non-const loan of `loan_path`\n-                this.each_in_scope_loan(assignment_id, |loan| {\n-                    if loan.loan_path == loan_path {\n-                        this.report_illegal_mutation(assignment_span, &*full_loan_path, loan);\n-                        false\n-                    } else {\n-                        true\n-                    }\n-                });\n-            }\n         }\n     }\n "}]}