{"sha": "9569a0129c5e484a12696e938d2c228152f54d50", "node_id": "C_kwDOAAsO6NoAKDk1NjlhMDEyOWM1ZTQ4NGExMjY5NmU5MzhkMmMyMjgxNTJmNTRkNTA", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-03-14T15:24:47Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2023-05-01T08:15:16Z"}, "message": "Remove more diagnostics for ascription in resolve", "tree": {"sha": "4b2867502931526038df3f5eaf8d75c2520fea62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2867502931526038df3f5eaf8d75c2520fea62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9569a0129c5e484a12696e938d2c228152f54d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9569a0129c5e484a12696e938d2c228152f54d50", "html_url": "https://github.com/rust-lang/rust/commit/9569a0129c5e484a12696e938d2c228152f54d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9569a0129c5e484a12696e938d2c228152f54d50/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c63b6a437eb16d13fbc0e72e091813579895bc9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c63b6a437eb16d13fbc0e72e091813579895bc9f", "html_url": "https://github.com/rust-lang/rust/commit/c63b6a437eb16d13fbc0e72e091813579895bc9f"}], "stats": {"total": 88, "additions": 8, "deletions": 80}, "files": [{"sha": "dbb0c558dce75ccd2bba3c91008ce0401d23726c", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 80, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/9569a0129c5e484a12696e938d2c228152f54d50/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9569a0129c5e484a12696e938d2c228152f54d50/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=9569a0129c5e484a12696e938d2c228152f54d50", "patch": "@@ -28,7 +28,7 @@ use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::Span;\n \n use std::iter;\n use std::ops::Deref;\n@@ -351,18 +351,15 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             return (err, candidates);\n         }\n \n-        if !self.suggest_missing_let(&mut err, base_error.span) {\n-            let mut fallback =\n-                self.suggest_trait_and_bounds(&mut err, source, res, span, &base_error);\n+        let mut fallback = self.suggest_trait_and_bounds(&mut err, source, res, span, &base_error);\n \n-            // if we have suggested using pattern matching, then don't add needless suggestions\n-            // for typos.\n-            fallback |= self.suggest_typo(&mut err, source, path, span, &base_error);\n+        // if we have suggested using pattern matching, then don't add needless suggestions\n+        // for typos.\n+        fallback |= self.suggest_typo(&mut err, source, path, span, &base_error);\n \n-            if fallback {\n-                // Fallback label.\n-                err.span_label(base_error.span, &base_error.fallback_label);\n-            }\n+        if fallback {\n+            // Fallback label.\n+            err.span_label(base_error.span, &base_error.fallback_label);\n         }\n         self.err_code_special_cases(&mut err, source, path, span);\n \n@@ -1818,75 +1815,6 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         })\n     }\n \n-    /// Only used in a specific case of type ascription suggestions\n-    fn get_colon_suggestion_span(&self, start: Span) -> Span {\n-        let sm = self.r.tcx.sess.source_map();\n-        start.to(sm.next_point(start))\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self, err))]\n-    fn suggest_missing_let(&self, err: &mut Diagnostic, base_span: Span) -> bool {\n-        let sm = self.r.tcx.sess.source_map();\n-        let base_snippet = sm.span_to_snippet(base_span);\n-        if let Some(&sp) = self.diagnostic_metadata.current_type_ascription.last() {\n-            if let Ok(snippet) = sm.span_to_snippet(sp) {\n-                let len = snippet.trim_end().len() as u32;\n-                if snippet.trim() == \":\" {\n-                    let colon_sp =\n-                        sp.with_lo(sp.lo() + BytePos(len - 1)).with_hi(sp.lo() + BytePos(len));\n-                    let mut show_label = true;\n-                    if sm.is_multiline(sp) {\n-                        err.span_suggestion_short(\n-                            colon_sp,\n-                            \"maybe you meant to write `;` here\",\n-                            \";\",\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    } else {\n-                        let after_colon_sp =\n-                            self.get_colon_suggestion_span(colon_sp.shrink_to_hi());\n-                        if snippet.len() == 1 {\n-                            // `foo:bar`\n-                            err.span_suggestion(\n-                                colon_sp,\n-                                \"maybe you meant to write a path separator here\",\n-                                \"::\",\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            show_label = false;\n-                            if !self\n-                                .r\n-                                .tcx\n-                                .sess\n-                                .parse_sess\n-                                .type_ascription_path_suggestions\n-                                .borrow_mut()\n-                                .insert(colon_sp)\n-                            {\n-                                err.downgrade_to_delayed_bug();\n-                            }\n-                        }\n-                        if let Ok(base_snippet) = base_snippet {\n-                            // Try to find an assignment\n-                            let eq_span = sm.span_look_ahead(after_colon_sp, Some(\"=\"), Some(50));\n-                            if let Ok(ref snippet) = sm.span_to_snippet(eq_span) && snippet == \"=\" {\n-                                err.span_suggestion(\n-                                    base_span,\n-                                    \"maybe you meant to write an assignment here\",\n-                                    format!(\"let {}\", base_snippet),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n-                                show_label = false;\n-                            }\n-                        }\n-                    }\n-                    return show_label;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     // try to give a suggestion for this pattern: `name = blah`, which is common in other languages\n     // suggest `let name = blah` to introduce a new binding\n     fn let_binding_suggestion(&mut self, err: &mut Diagnostic, ident_span: Span) -> bool {"}]}