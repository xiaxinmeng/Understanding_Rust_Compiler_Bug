{"sha": "fe25282aaa656dda273d5913430a20a450cf11a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjUyODJhYWE2NTZkZGEyNzNkNTkxMzQzMGEyMGE0NTBjZjExYTM=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-28T12:15:34Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-07-28T12:18:40Z"}, "message": "Remove old python lint doc generation scripts", "tree": {"sha": "cd9ee3b884c219b3bce9e12b89f4e85729deafad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd9ee3b884c219b3bce9e12b89f4e85729deafad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe25282aaa656dda273d5913430a20a450cf11a3", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmEBSyAACgkQHKDfKvWd\naKXFyA//fcPb86Ph6vkjiWizcERs3E3WstvACd94xszskg0xaPFZRRnbQr0/i8fr\nD+5c4whPNVHUjCtgVgvJBVuy6MmNL9d1uBXcxt2FqfQSFPDdiNv9o2POFHCU8hQ+\n3k+paMzBjf/okD7fauCl07zn2JOuP0RzoaJJ+eAOJzsYm/R4C63GQj1ex3vngEiX\n2R3OvC+WCE8eVgnkM/hvhF5idtxw1p+Iq2rSFY3ELXP4iNGWcx4+BhiaYfxCHkf1\nMRfgTWAbog+HsFVDXYV06LFn1Nc8WKyyNEj3M/Tpp7cg4GFXM9xNv8Hk+3GvHUms\nrwuMClTpvd/aMGSEMOABrH1siCIgB1FwvwL5LYAraCq7aLzYIFbx14SDTvG/iqbn\njMdWTrRakWvP8JQ4Gide0Mp0bqRnXZFoua+PuK/m8BdLlbMjKms4o5E39wvvEJ/j\nTHoBxtzBPz69bk4Xedvq7MekAzNupUH+sLjIEVJh8oO5XM5XErDagiy7T2HONlX1\n5B/aQR8Xfd3uT8B8avxR1oEp+fWWWLSvCMNDQYdbKsEuhfPcWK56oFlwix+bNiMg\n6Bc1GfvViX40hGaikOLcWzBl2Wm6kcI8wAXvxoS+/oJy9/PA96d60GiMHmGrx3Nl\n9D7aMOYd2KS1xQe40j+6EfiTHBIKRyin+QgIlCaF4dAZc1GmHWM=\n=+jcR\n-----END PGP SIGNATURE-----", "payload": "tree cd9ee3b884c219b3bce9e12b89f4e85729deafad\nparent 6c5d199d57ee937dc8f4f036c38aa594751250ce\nauthor flip1995 <philipp.krones@embecosm.com> 1627474534 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1627474720 +0200\n\nRemove old python lint doc generation scripts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe25282aaa656dda273d5913430a20a450cf11a3", "html_url": "https://github.com/rust-lang/rust/commit/fe25282aaa656dda273d5913430a20a450cf11a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe25282aaa656dda273d5913430a20a450cf11a3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c5d199d57ee937dc8f4f036c38aa594751250ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5d199d57ee937dc8f4f036c38aa594751250ce", "html_url": "https://github.com/rust-lang/rust/commit/6c5d199d57ee937dc8f4f036c38aa594751250ce"}], "stats": {"total": 205, "additions": 3, "deletions": 202}, "files": [{"sha": "1248e6b6a26a75777ef97786ce41537200a2fb90", "filename": "util/export.py", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/6c5d199d57ee937dc8f4f036c38aa594751250ce/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/6c5d199d57ee937dc8f4f036c38aa594751250ce/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=6c5d199d57ee937dc8f4f036c38aa594751250ce", "patch": "@@ -1,84 +0,0 @@\n-#!/usr/bin/env python\n-\n-# Build the gh-pages\n-\n-from collections import OrderedDict\n-import re\n-import sys\n-import json\n-\n-from lintlib import parse_all, log\n-\n-lint_subheadline = re.compile(r'''^\\*\\*([\\w\\s]+?)[:?.!]?\\*\\*(.*)''')\n-rust_code_block = re.compile(r'''```rust.+?```''', flags=re.DOTALL)\n-\n-CONF_TEMPLATE = \"\"\"\\\n-This lint has the following configuration variables:\n-\n-* `%s: %s`: %s (defaults to `%s`).\"\"\"\n-\n-\n-def parse_code_block(match):\n-    lines = []\n-\n-    for line in match.group(0).split('\\n'):\n-        # fix syntax highlighting for headers like ```rust,ignore\n-        if line.startswith('```rust'):\n-            lines.append('```rust')\n-        elif not line.startswith('# '):\n-            lines.append(line)\n-\n-    return '\\n'.join(lines)\n-\n-\n-def parse_lint_def(lint):\n-    lint_dict = {}\n-    lint_dict['id'] = lint.name\n-    lint_dict['group'] = lint.group\n-    lint_dict['level'] = lint.level\n-    lint_dict['docs'] = OrderedDict()\n-\n-    last_section = None\n-\n-    for line in lint.doc:\n-        match = re.match(lint_subheadline, line)\n-        if match:\n-            last_section = match.groups()[0]\n-            text = match.groups()[1]\n-        else:\n-            text = line\n-\n-        if not last_section:\n-            log.warning(\"Skipping comment line as it was not preceded by a heading\")\n-            log.debug(\"in lint `%s`, line `%s`\", lint.name, line)\n-\n-        if last_section not in lint_dict['docs']:\n-            lint_dict['docs'][last_section] = \"\"\n-\n-        lint_dict['docs'][last_section] += text + \"\\n\"\n-\n-    for section in lint_dict['docs']:\n-        lint_dict['docs'][section] = re.sub(rust_code_block, parse_code_block, lint_dict['docs'][section].strip())\n-\n-    return lint_dict\n-\n-\n-def main():\n-    lintlist, configs = parse_all()\n-    lints = {}\n-    for lint in lintlist:\n-        lints[lint.name] = parse_lint_def(lint)\n-        if lint.name in configs:\n-            lints[lint.name]['docs']['Configuration'] = \\\n-                CONF_TEMPLATE % configs[lint.name]\n-\n-    outfile = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n-    with open(outfile, \"w\") as fp:\n-        lints = list(lints.values())\n-        lints.sort(key=lambda x: x['id'])\n-        json.dump(lints, fp, indent=2)\n-        log.info(\"wrote JSON for great justice\")\n-\n-\n-if __name__ == \"__main__\":\n-    main()"}, {"sha": "9cefb2dbb197caffafcc0ae1cd7c6f40f1fa450c", "filename": "util/lintlib.py", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/6c5d199d57ee937dc8f4f036c38aa594751250ce/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/6c5d199d57ee937dc8f4f036c38aa594751250ce/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=6c5d199d57ee937dc8f4f036c38aa594751250ce", "patch": "@@ -1,115 +0,0 @@\n-# Common utils for the several housekeeping scripts.\n-\n-import os\n-import re\n-import collections\n-\n-import logging as log\n-log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n-\n-Lint = collections.namedtuple('Lint', 'name level doc sourcefile group')\n-Config = collections.namedtuple('Config', 'name ty doc default')\n-\n-lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n-group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n-conf_re = re.compile(r'''define_Conf! {\\n((?!\\n})[\\s\\S])*\\n}''', re.MULTILINE)\n-confvar_re = re.compile(\n-    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\(([^:]+):\\s*([^\\s=]+)\\s*=\\s*([^\\.\\)]+).*\\),''', re.MULTILINE)\n-comment_re = re.compile(r'''\\s*/// ?(.*)''')\n-\n-lint_levels = {\n-    \"correctness\": 'Deny',\n-    \"suspicious\": 'Warn',\n-    \"style\": 'Warn',\n-    \"complexity\": 'Warn',\n-    \"perf\": 'Warn',\n-    \"restriction\": 'Allow',\n-    \"pedantic\": 'Allow',\n-    \"nursery\": 'Allow',\n-    \"cargo\": 'Allow',\n-}\n-\n-\n-def parse_lints(lints, filepath):\n-    comment = []\n-    clippy = False\n-    deprecated = False\n-    name = \"\"\n-\n-    with open(filepath) as fp:\n-        for line in fp:\n-            if clippy or deprecated:\n-                m = lintname_re.search(line)\n-                if m:\n-                    name = m.group(1).lower()\n-                    line = next(fp)\n-\n-                    if deprecated:\n-                        level = \"Deprecated\"\n-                        group = \"deprecated\"\n-                    else:\n-                        while True:\n-                            g = group_re.search(line)\n-                            if g:\n-                                group = g.group(1).lower()\n-                                level = lint_levels.get(group, None)\n-                                break\n-                            line = next(fp)\n-\n-                    if level is None:\n-                        continue\n-\n-                    log.info(\"found %s with level %s in %s\",\n-                             name, level, filepath)\n-                    lints.append(Lint(name, level, comment, filepath, group))\n-                    comment = []\n-\n-                    clippy = False\n-                    deprecated = False\n-                    name = \"\"\n-                else:\n-                    m = comment_re.search(line)\n-                    if m:\n-                        comment.append(m.group(1))\n-            elif line.startswith(\"declare_clippy_lint!\"):\n-                clippy = True\n-                deprecated = False\n-            elif line.startswith(\"declare_deprecated_lint!\"):\n-                clippy = False\n-                deprecated = True\n-            elif line.startswith(\"declare_lint!\"):\n-                import sys\n-                print(\n-                    \"don't use `declare_lint!` in Clippy, \"\n-                    \"use `declare_clippy_lint!` instead\"\n-                )\n-                sys.exit(42)\n-\n-\n-def parse_configs(path):\n-    configs = {}\n-    with open(os.path.join(path, 'utils/conf.rs')) as fp:\n-        contents = fp.read()\n-\n-    match = re.search(conf_re, contents)\n-    confvars = re.findall(confvar_re, match.group(0))\n-\n-    for (lints, doc, name, ty, default) in confvars:\n-        for lint in lints.split(','):\n-            configs[lint.strip().lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n-    return configs\n-\n-\n-def parse_all(path=\"clippy_lints/src\"):\n-    lints = []\n-    for root, dirs, files in os.walk(path):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                parse_lints(lints, os.path.join(root, fn))\n-\n-    log.info(\"got %s lints\", len(lints))\n-\n-    configs = parse_configs(path)\n-    log.info(\"got %d configs\", len(configs))\n-\n-    return lints, configs"}, {"sha": "0cfa007d1b2711754167909ffee7004632cdd13c", "filename": "util/versions.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe25282aaa656dda273d5913430a20a450cf11a3/util%2Fversions.py", "raw_url": "https://github.com/rust-lang/rust/raw/fe25282aaa656dda273d5913430a20a450cf11a3/util%2Fversions.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fversions.py?ref=fe25282aaa656dda273d5913430a20a450cf11a3", "patch": "@@ -3,8 +3,8 @@\n import json\n import os\n import sys\n-\n-from lintlib import log\n+import logging as log\n+log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n \n \n def key(v):\n@@ -26,7 +26,7 @@ def key(v):\n \n def main():\n     if len(sys.argv) < 2:\n-        print(\"Error: specify output directory\")\n+        log.error(\"specify output directory\")\n         return\n \n     outdir = sys.argv[1]"}]}