{"sha": "4d0fb089217067b1c7ec21205303e8fd95f60fbc", "node_id": "C_kwDOAAsO6NoAKDRkMGZiMDg5MjE3MDY3YjFjN2VjMjEyMDUzMDNlOGZkOTVmNjBmYmM", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-11-24T21:33:25Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-11-24T21:56:54Z"}, "message": "Fix remark for `rfcs/0001-syntax-tree-patterns.md`", "tree": {"sha": "8b80d2ee7f3d8c826f3c6543f791a12d007109d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b80d2ee7f3d8c826f3c6543f791a12d007109d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d0fb089217067b1c7ec21205303e8fd95f60fbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0fb089217067b1c7ec21205303e8fd95f60fbc", "html_url": "https://github.com/rust-lang/rust/commit/4d0fb089217067b1c7ec21205303e8fd95f60fbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d0fb089217067b1c7ec21205303e8fd95f60fbc/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be172c52f7a8878861af501d6582cc6d16ad36fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/be172c52f7a8878861af501d6582cc6d16ad36fe", "html_url": "https://github.com/rust-lang/rust/commit/be172c52f7a8878861af501d6582cc6d16ad36fe"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "9161986a7b7745b37e5a561cc9c3fd531942f2bc", "filename": "rfcs/0001-syntax-tree-patterns.md", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d0fb089217067b1c7ec21205303e8fd95f60fbc/rfcs%2F0001-syntax-tree-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d0fb089217067b1c7ec21205303e8fd95f60fbc/rfcs%2F0001-syntax-tree-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rfcs%2F0001-syntax-tree-patterns.md?ref=4d0fb089217067b1c7ec21205303e8fd95f60fbc", "patch": "@@ -1,3 +1,5 @@\n+<!--lint disable maximum-line-length-->\n+\n - Feature Name: syntax-tree-patterns\n - Start Date: 2019-03-12\n - RFC PR: (leave this empty)\n@@ -6,13 +8,11 @@\n > Note: This project is part of my Master's Thesis (supervised by [@oli-obk](https://github.com/oli-obk))\n \n # Summary\n-[summary]: #summary\n \n Introduce a domain-specific language (similar to regular expressions) that allows to describe lints using *syntax tree patterns*.\n \n \n # Motivation\n-[motivation]: #motivation\n \n \n Finding parts of a syntax tree (AST, HIR, ...) that have certain properties (e.g. \"*an if that has a block as its condition*\") is a major task when writing lints. For non-trivial lints, it often requires nested pattern matching of AST / HIR nodes. For example, testing that an expression is a boolean literal requires the following checks:\n@@ -68,7 +68,6 @@ A lot of complexity in writing lints currently seems to come from having to manu\n While regular expressions are very useful when searching for patterns in flat character sequences, they cannot easily be applied to hierarchical data structures like syntax trees. This RFC therefore proposes a pattern matching system that is inspired by regular expressions and designed for hierarchical syntax trees.\n \n # Guide-level explanation\n-[guide-level-explanation]: #guide-level-explanation\n \n This proposal adds a `pattern!` macro that can be used to specify a syntax tree pattern to search for. A simple pattern is shown below:\n \n@@ -281,7 +280,6 @@ The following table gives an summary of the pattern syntax:\n \n \n ## The result type\n-[the-result-type]: #the-result-type\n \n A lot of lints require checks that go beyond what the pattern syntax described above can express. For example, a lint might want to check whether a node was created as part of a macro expansion or whether there's no comment above a node. Another example would be a lint that wants to match two nodes that have the same value (as needed by lints like `almost_swapped`). Instead of allowing users to write these checks into the pattern directly (which might make patterns hard to read), the proposed solution allows users to assign names to parts of a pattern expression. When matching a pattern against a syntax tree node, the return value will contain references to all nodes that were matched by these named subpatterns. This is similar to capture groups in regular expressions.\n \n@@ -372,7 +370,6 @@ As a \"real-world\" example, I re-implemented the `collapsible_if` lint using patt\n \n \n # Reference-level explanation\n-[reference-level-explanation]: #reference-level-explanation\n \n ## Overview\n \n@@ -517,7 +514,6 @@ All `IsMatch` implementations for matching the current *PatternTree* against `sy\n \n \n # Drawbacks\n-[drawbacks]: #drawbacks\n \n #### Performance\n \n@@ -571,7 +567,6 @@ Even though I'd expect that a lot of lints can be written using the proposed pat\n \n \n # Rationale and alternatives\n-[rationale-and-alternatives]: #rationale-and-alternatives\n \n Specifying lints using syntax tree patterns has a couple of advantages compared to the current approach of manually writing matching code. First, syntax tree patterns allow users to describe patterns in a simple and expressive way. This makes it easier to write new lints for both novices and experts and also makes reading / modifying existing lints simpler. \n \n@@ -632,14 +627,12 @@ The issue of users not knowing about the *PatternTree* structure could be solved\n For some simple cases (like the first example above), it might be possible to successfully mix Rust and pattern syntax. This space could be further explored in a future extension.\n \n # Prior art\n-[prior-art]: #prior-art\n \n The pattern syntax is heavily inspired by regular expressions (repetitions, alternatives, sequences, ...).\n \n From what I've seen until now, other linters also implement lints that directly work on syntax tree data structures, just like clippy does currently. I would therefore consider the pattern syntax to be *new*, but please correct me if I'm wrong.\n \n # Unresolved questions\n-[unresolved-questions]: #unresolved-questions\n \n #### How to handle multiple matches?\n \n@@ -657,7 +650,6 @@ This pattern matches arrays that end with at least one literal. Now given the ar\n I haven't looked much into this yet because I don't know how relevant it is for most lints. The current implementation simply returns the first match it finds.\n \n # Future possibilities\n-[future-possibilities]: #future-possibilities\n \n #### Implement rest of Rust Syntax\n "}]}