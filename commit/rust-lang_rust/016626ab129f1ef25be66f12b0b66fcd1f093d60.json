{"sha": "016626ab129f1ef25be66f12b0b66fcd1f093d60", "node_id": "C_kwDOAAsO6NoAKDAxNjYyNmFiMTI5ZjFlZjI1YmU2NmYxMmIwYjY2ZmNkMWYwOTNkNjA", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-05T10:45:53Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-09-05T10:45:53Z"}, "message": "suggest introducing an explicit lifetime if it does not exist", "tree": {"sha": "86c80a8dc523b2e133cd497aeb6d6367abc9016c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c80a8dc523b2e133cd497aeb6d6367abc9016c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016626ab129f1ef25be66f12b0b66fcd1f093d60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016626ab129f1ef25be66f12b0b66fcd1f093d60", "html_url": "https://github.com/rust-lang/rust/commit/016626ab129f1ef25be66f12b0b66fcd1f093d60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016626ab129f1ef25be66f12b0b66fcd1f093d60/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d140bd36e7fcdc894b7c342fd81a63fdd66373", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d140bd36e7fcdc894b7c342fd81a63fdd66373", "html_url": "https://github.com/rust-lang/rust/commit/c2d140bd36e7fcdc894b7c342fd81a63fdd66373"}], "stats": {"total": 82, "additions": 63, "deletions": 19}, "files": [{"sha": "d9252d426d82b8ed0aebc06353f08c6eb60f3c04", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/016626ab129f1ef25be66f12b0b66fcd1f093d60/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016626ab129f1ef25be66f12b0b66fcd1f093d60/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=016626ab129f1ef25be66f12b0b66fcd1f093d60", "patch": "@@ -2395,19 +2395,23 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             type_param_span: Option<(Span, bool)>,\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n+            add_lt_sugg: Option<(Span, String)>,\n         ) {\n             let msg = \"consider adding an explicit lifetime bound\";\n             if let Some((sp, has_lifetimes)) = type_param_span {\n                 let suggestion =\n                     if has_lifetimes { format!(\" + {}\", sub) } else { format!(\": {}\", sub) };\n-                err.span_suggestion_verbose(\n-                    sp,\n-                    &format!(\"{}...\", msg),\n-                    suggestion,\n+                let mut suggestions = vec![(sp, suggestion)];\n+                if let Some(add_lt_sugg) = add_lt_sugg {\n+                    suggestions.push(add_lt_sugg);\n+                }\n+                err.multipart_suggestion_verbose(\n+                    format!(\"{msg}...\"),\n+                    suggestions,\n                     Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n-                let consider = format!(\"{} `{}: {}`...\", msg, bound_kind, sub,);\n+                let consider = format!(\"{} `{}: {}`...\", msg, bound_kind, sub);\n                 err.help(&consider);\n             }\n         }\n@@ -2423,7 +2427,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     };\n                     let mut sugg =\n                         vec![(sp, suggestion), (span.shrink_to_hi(), format!(\" + {}\", new_lt))];\n-                    if let Some(lt) = add_lt_sugg {\n+                    if let Some(lt) = add_lt_sugg.clone() {\n                         sugg.push(lt);\n                         sugg.rotate_right(1);\n                     }\n@@ -2529,7 +2533,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 // for the bound is not suitable for suggestions when `-Zverbose` is set because it\n                 // uses `Debug` output, so we handle it specially here so that suggestions are\n                 // always correct.\n-                binding_suggestion(&mut err, type_param_span, bound_kind, name);\n+                binding_suggestion(&mut err, type_param_span, bound_kind, name, None);\n                 err\n             }\n \n@@ -2542,7 +2546,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"{} may not live long enough\",\n                     labeled_user_string\n                 );\n-                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\");\n+                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\", None);\n                 err\n             }\n \n@@ -2576,7 +2580,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             new_binding_suggestion(&mut err, type_param_span);\n                         }\n                         _ => {\n-                            binding_suggestion(&mut err, type_param_span, bound_kind, new_lt);\n+                            binding_suggestion(\n+                                &mut err,\n+                                type_param_span,\n+                                bound_kind,\n+                                new_lt,\n+                                add_lt_sugg,\n+                            );\n                         }\n                     }\n                 }"}, {"sha": "645bc7db0ddac4644442f98b9d82e18e707a75e5", "filename": "src/test/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs?ref=016626ab129f1ef25be66f12b0b66fcd1f093d60", "patch": "@@ -0,0 +1,9 @@\n+fn no_restriction<T>(x: &()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn with_restriction<'b, T: 'b>(x: &'b ()) -> &'b () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "a8b0996d8b0c71ad404e19ca4b5ff8dc64cd6e69", "filename": "src/test/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr?ref=016626ab129f1ef25be66f12b0b66fcd1f093d60", "patch": "@@ -0,0 +1,23 @@\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+   |\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:1:25\n+   |\n+LL | fn no_restriction<T>(x: &()) -> &() {\n+   |                         ^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+   |\n+LL |     with_restriction::<T>(x)\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n+   |                   +++  ++++\n+\n+error: aborting due to previous error\n+"}, {"sha": "e5d2ead6ad67cd61d3d8614b923f9dfe8929409d", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=016626ab129f1ef25be66f12b0b66fcd1f093d60", "patch": "@@ -22,8 +22,8 @@ LL | |     });\n    | |______^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn func<T: Test + 'a>(foo: &Foo, t: T) {\n-   |                 ++++\n+LL | fn func<'a, T: Test + 'a>(foo: &Foo, t: T) {\n+   |         +++         ++++\n \n error: aborting due to previous error\n "}, {"sha": "ed1b91676a2145ab7923a72c6e25a9956e0cf12b", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/016626ab129f1ef25be66f12b0b66fcd1f093d60/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=016626ab129f1ef25be66f12b0b66fcd1f093d60", "patch": "@@ -47,8 +47,10 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL |     G: Get<T> + 'a,\n-   |               ++++\n+LL ~ fn bar<'a, G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+LL | where\n+LL ~     G: Get<T> + 'a,\n+   |\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:52:5\n@@ -74,8 +76,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn qux<'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |                  ++++\n+LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+   |        +++           ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:61:9\n@@ -101,8 +103,8 @@ LL | |         }\n    | |_________^\n help: consider adding an explicit lifetime bound...\n    |\n-LL |     fn qux<'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |                               ++++\n+LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |            +++                    ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5\n@@ -130,8 +132,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn bat<'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |                  ++++\n+LL | fn bat<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+   |        +++           ++++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}]}