{"sha": "900e4460155c0022c8bbe8d53506d0262929f581", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMGU0NDYwMTU1YzAwMjJjOGJiZThkNTM1MDZkMDI2MjkyOWY1ODE=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-05-27T16:49:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:54Z"}, "message": "std: import/export cleanup in net_tcp", "tree": {"sha": "f8458d6f19d7a7f9f02d0fc6bed5f5f4db1391d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8458d6f19d7a7f9f02d0fc6bed5f5f4db1391d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900e4460155c0022c8bbe8d53506d0262929f581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900e4460155c0022c8bbe8d53506d0262929f581", "html_url": "https://github.com/rust-lang/rust/commit/900e4460155c0022c8bbe8d53506d0262929f581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900e4460155c0022c8bbe8d53506d0262929f581/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e279ee12a4ed80ab815b6a22a9fe5f893c7eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e279ee12a4ed80ab815b6a22a9fe5f893c7eab", "html_url": "https://github.com/rust-lang/rust/commit/79e279ee12a4ed80ab815b6a22a9fe5f893c7eab"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "81171dc51ae4d69bec8fd2c36ff294bfdd8ab7ef", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 45, "deletions": 41, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/900e4460155c0022c8bbe8d53506d0262929f581/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900e4460155c0022c8bbe8d53506d0262929f581/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=900e4460155c0022c8bbe8d53506d0262929f581", "patch": "@@ -7,8 +7,10 @@ import uv::iotask;\n import uv::iotask::iotask;\n import comm::methods;\n import future_spawn = future::spawn;\n-import future::future;\n-import result::{result,err,ok,extensions};\n+// FIXME: should be able to replace w/ result::{result, extensions};\n+import result::*;\n+import libc::size_t;\n+import str::extensions;\n \n // data\n export tcp_socket, tcp_conn_port, tcp_err_data;\n@@ -20,7 +22,7 @@ export new_listener, conn_recv, conn_recv_spawn, conn_peek;\n // tcp client stuff\n export connect;\n // helper methods\n-export conn_port_methods, sock_methods;\n+export methods;\n \n #[nolink]\n native mod rustrt {\n@@ -775,44 +777,46 @@ fn listen_for_conn(host_ip: ip::ip_addr, port: uint, backlog: uint,\n       }\n     }\n }\n-\n-#[doc=\"\n-Convenience methods extending `net::tcp::tcp_conn_port`\n-\"]\n-impl conn_port_methods for tcp_conn_port {\n-    fn recv() -> result::result<tcp_socket, tcp_err_data> { conn_recv(self) }\n-    fn recv_spawn(+cb: fn~(result::result<tcp_socket,tcp_err_data>))\n-                  { conn_recv_spawn(self, cb); }\n-    fn peek() -> bool { conn_peek(self) }\n-}\n-\n-#[doc=\"\n-Convenience methods extending `net::tcp::tcp_socket`\n-\"]\n-impl sock_methods for tcp_socket {\n-    fn read_start() -> result::result<comm::port<\n-        result::result<[u8]/~, tcp_err_data>>, tcp_err_data> {\n-        read_start(self)\n-    }\n-    fn read_stop() ->\n-        result::result<(), tcp_err_data> {\n-        read_stop(self)\n-    }\n-    fn read(timeout_msecs: uint) ->\n-        result::result<[u8]/~, tcp_err_data> {\n-        read(self, timeout_msecs)\n+mod methods {\n+    #[doc=\"\n+    Convenience methods extending `net::tcp::tcp_conn_port`\n+    \"]\n+    impl methods_tcp_conn_port for tcp_conn_port {\n+        fn recv() -> result::result<tcp_socket, tcp_err_data> {\n+            conn_recv(self) }\n+        fn recv_spawn(cb: fn~(result::result<tcp_socket,tcp_err_data>))\n+                      { conn_recv_spawn(self, cb); }\n+        fn peek() -> bool { conn_peek(self) }\n     }\n-    fn read_future(timeout_msecs: uint) ->\n-        future<result::result<[u8]/~, tcp_err_data>> {\n-        read_future(self, timeout_msecs)\n-    }\n-    fn write(raw_write_data: [u8]/~)\n-        -> result::result<(), tcp_err_data> {\n-        write(self, raw_write_data)\n-    }\n-    fn write_future(raw_write_data: [u8]/~)\n-        -> future<result::result<(), tcp_err_data>> {\n-        write_future(self, raw_write_data)\n+\n+    #[doc=\"\n+    Convenience methods extending `net::tcp::tcp_socket`\n+    \"]\n+    impl methods_tcp_socket for tcp_socket {\n+        fn read_start() -> result::result<comm::port<\n+            result::result<[u8]/~, tcp_err_data>>, tcp_err_data> {\n+            read_start(self)\n+        }\n+        fn read_stop() ->\n+            result::result<(), tcp_err_data> {\n+            read_stop(self)\n+        }\n+        fn read(timeout_msecs: uint) ->\n+            result::result<[u8]/~, tcp_err_data> {\n+            read(self, timeout_msecs)\n+        }\n+        fn read_future(timeout_msecs: uint) ->\n+            future::future<result::result<[u8]/~, tcp_err_data>> {\n+            read_future(self, timeout_msecs)\n+        }\n+        fn write(raw_write_data: [u8]/~)\n+            -> result::result<(), tcp_err_data> {\n+            write(self, raw_write_data)\n+        }\n+        fn write_future(raw_write_data: [u8]/~)\n+            -> future::future<result::result<(), tcp_err_data>> {\n+            write_future(self, raw_write_data)\n+        }\n     }\n }\n // INTERNAL API\n@@ -1171,7 +1175,7 @@ crust fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n }\n \n crust fn on_alloc_cb(handle: *libc::c_void,\n-                     ++suggested_size: libc::size_t)\n+                     ++suggested_size: size_t)\n     -> uv::ll::uv_buf_t unsafe {\n     log(debug, \"tcp read on_alloc_cb!\");\n     let char_ptr = uv::ll::malloc_buf_base_of(suggested_size);"}]}