{"sha": "e1d1cd191f6601b0ed2219beb7a4fb00f25b6667", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDFjZDE5MWY2NjAxYjBlZDIyMTliZWI3YTRmYjAwZjI1YjY2Njc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-08T20:22:34Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-08-08T20:45:58Z"}, "message": "Use ldexp from cmath instead", "tree": {"sha": "530d0cc92d3455b0e0adc1fdd30edec1a8a13093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/530d0cc92d3455b0e0adc1fdd30edec1a8a13093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667", "html_url": "https://github.com/rust-lang/rust/commit/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7143ccc8fa302f6390d25d56a2b129be54c30ee5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7143ccc8fa302f6390d25d56a2b129be54c30ee5", "html_url": "https://github.com/rust-lang/rust/commit/7143ccc8fa302f6390d25d56a2b129be54c30ee5"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "ba9b7ca27eb0514795cfd179bb8159fcd41e995b", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d1cd191f6601b0ed2219beb7a4fb00f25b6667/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e1d1cd191f6601b0ed2219beb7a4fb00f25b6667", "patch": "@@ -594,8 +594,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: Using host floats.\n                 let x = f64::from_bits(this.read_scalar(args[0])?.to_u64()?);\n                 let exp = this.read_scalar(args[1])?.to_i32()?;\n-                // FIXME: We should use cmath if there are any imprecisions.\n-                let n = x * 2.0f64.powi(exp);\n+                extern {\n+                    fn ldexp(x: f64, n: i32) -> f64;\n+                }\n+                let n = unsafe { ldexp(x, exp) };\n                 this.write_scalar(Scalar::from_u64(n.to_bits()), dest)?;\n             }\n "}]}