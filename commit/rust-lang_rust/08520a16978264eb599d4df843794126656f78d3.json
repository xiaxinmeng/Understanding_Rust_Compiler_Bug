{"sha": "08520a16978264eb599d4df843794126656f78d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NTIwYTE2OTc4MjY0ZWI1OTlkNGRmODQzNzk0MTI2NjU2Zjc4ZDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-04T15:03:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:37:35Z"}, "message": "move borrowck to dvec, insert a few minor copies", "tree": {"sha": "1f94338ac4e8b5834a55f1e50d98788c31b96fec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f94338ac4e8b5834a55f1e50d98788c31b96fec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08520a16978264eb599d4df843794126656f78d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08520a16978264eb599d4df843794126656f78d3", "html_url": "https://github.com/rust-lang/rust/commit/08520a16978264eb599d4df843794126656f78d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08520a16978264eb599d4df843794126656f78d3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9db4f02a4092009a29fa4b2f0be0438856aeb36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9db4f02a4092009a29fa4b2f0be0438856aeb36", "html_url": "https://github.com/rust-lang/rust/commit/d9db4f02a4092009a29fa4b2f0be0438856aeb36"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "d106c2b23d86edf36767ecf40923f5a68a5c4068", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=08520a16978264eb599d4df843794126656f78d3", "patch": "@@ -164,6 +164,7 @@ import util::common::indenter;\n import ast_util::op_expr_callee_id;\n import ty::to_str;\n import driver::session::session;\n+import dvec::{dvec, extensions};\n \n export check_crate, root_map, mutbl_map;\n \n@@ -298,7 +299,7 @@ type loan = {lp: @loan_path, cmt: cmt, mutbl: ast::mutability};\n \n // maps computed by `gather_loans` that are then used by `check_loans`\n type req_maps = {\n-    req_loan_map: hashmap<ast::node_id, @mut [@const [loan]]>,\n+    req_loan_map: hashmap<ast::node_id, @dvec<@dvec<loan>>>,\n     pure_map: hashmap<ast::node_id, bckerr>\n };\n "}, {"sha": "04a37d327cda8fe8e17a03a51fcc2ca5f766c7f5", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=08520a16978264eb599d4df843794126656f78d3", "patch": "@@ -7,6 +7,7 @@\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves to dnot affect things loaned out in any way\n \n+import dvec::{dvec, extensions};\n import categorization::public_methods;\n \n export check_loans;\n@@ -22,7 +23,7 @@ enum check_loan_ctxt = @{\n     // we are in a ctor, we track the self id\n     mut in_ctor: bool,\n     mut declared_purity: ast::purity,\n-    mut fn_args: [ast::node_id]\n+    mut fn_args: @[ast::node_id]\n };\n \n // if we are enforcing purity, why are we doing so?\n@@ -44,7 +45,7 @@ fn check_loans(bccx: borrowck_ctxt,\n                                  reported: int_hash(),\n                                  mut in_ctor: false,\n                                  mut declared_purity: ast::impure_fn,\n-                                 mut fn_args: []});\n+                                 mut fn_args: @[]});\n     let vt = visit::mk_vt(@{visit_expr: check_loans_in_expr,\n                             visit_block: check_loans_in_block,\n                             visit_fn: check_loans_in_fn\n@@ -179,7 +180,7 @@ impl methods for check_loan_ctxt {\n                 let did = ast_util::def_id_of_def(def);\n                 let is_fn_arg =\n                     did.crate == ast::local_crate &&\n-                    self.fn_args.contains(did.node);\n+                    (*self.fn_args).contains(did.node);\n                 if is_fn_arg { ret; } // case (a) above\n               }\n               ast::expr_fn_block(*) | ast::expr_fn(*) |\n@@ -225,7 +226,8 @@ impl methods for check_loan_ctxt {\n           ast::expr_path(_) {\n             let def = self.tcx().def_map.get(expr.id);\n             let did = ast_util::def_id_of_def(def);\n-            did.crate == ast::local_crate && self.fn_args.contains(did.node)\n+            did.crate == ast::local_crate &&\n+                (*self.fn_args).contains(did.node)\n           }\n           ast::expr_fn_block(*) | ast::expr_fn(*) {\n             self.is_stack_closure(expr.id)\n@@ -484,7 +486,7 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                      sp: span, id: ast::node_id, &&self: check_loan_ctxt,\n                      visitor: visit::vt<check_loan_ctxt>) {\n \n-    #debug[\"purity on entry=%?\", self.declared_purity];\n+    #debug[\"purity on entry=%?\", copy self.declared_purity];\n     save_and_restore(self.in_ctor) {||\n         save_and_restore(self.declared_purity) {||\n             save_and_restore(self.fn_args) {||\n@@ -500,7 +502,7 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                   visit::fk_ctor(*) {\n                     self.in_ctor = true;\n                     self.declared_purity = decl.purity;\n-                    self.fn_args = decl.inputs.map({|i| i.id});\n+                    self.fn_args = @decl.inputs.map({|i| i.id});\n                   }\n                   visit::fk_anon(*) |\n                   visit::fk_fn_block(*) if is_stack_closure {\n@@ -512,15 +514,15 @@ fn check_loans_in_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n                   visit::fk_res(*) | visit::fk_dtor(*) {\n                     self.in_ctor = false;\n                     self.declared_purity = decl.purity;\n-                    self.fn_args = decl.inputs.map({|i| i.id});\n+                    self.fn_args = @decl.inputs.map({|i| i.id});\n                   }\n                 }\n \n                 visit::visit_fn(fk, decl, body, sp, id, self, visitor);\n             }\n         }\n     }\n-    #debug[\"purity on exit=%?\", self.declared_purity];\n+    #debug[\"purity on exit=%?\", copy self.declared_purity];\n }\n \n fn check_loans_in_expr(expr: @ast::expr,"}, {"sha": "fe59d771042feb33a0e0f24cdefdd5f7fc2701ba", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=08520a16978264eb599d4df843794126656f78d3", "patch": "@@ -273,13 +273,14 @@ impl methods for gather_loan_ctxt {\n         }\n     }\n \n-    fn add_loans(scope_id: ast::node_id, loans: @const [loan]) {\n+    fn add_loans(scope_id: ast::node_id, loans: @dvec<loan>) {\n         alt self.req_maps.req_loan_map.find(scope_id) {\n           some(l) {\n-            *l += [loans];\n+            (*l).push(loans);\n           }\n           none {\n-            self.req_maps.req_loan_map.insert(scope_id, @mut [loans]);\n+            self.req_maps.req_loan_map.insert(\n+                scope_id, @dvec::from_vec([mut loans]));\n           }\n         }\n     }"}, {"sha": "c0e6f4accf707330ae10dda009654db438ba4a2e", "filename": "src/rustc/middle/borrowck/loan.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08520a16978264eb599d4df843794126656f78d3/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Floan.rs?ref=08520a16978264eb599d4df843794126656f78d3", "patch": "@@ -5,16 +5,16 @@\n export public_methods;\n \n impl public_methods for borrowck_ctxt {\n-    fn loan(cmt: cmt, mutbl: ast::mutability) -> @const [loan] {\n-        let lc = @{bccx: self, loans: @mut []};\n+    fn loan(cmt: cmt, mutbl: ast::mutability) -> @dvec<loan> {\n+        let lc = @{bccx: self, loans: @dvec()};\n         lc.loan(cmt, mutbl);\n         ret lc.loans;\n     }\n }\n \n type loan_ctxt = @{\n     bccx: borrowck_ctxt,\n-    loans: @mut [loan]\n+    loans: @dvec<loan>\n };\n \n impl loan_methods for loan_ctxt {\n@@ -23,9 +23,9 @@ impl loan_methods for loan_ctxt {\n         // Note: all cmt's that we deal with will have a non-none lp, because\n         // the entry point into this routine, `borrowck_ctxt::loan()`, rejects\n         // any cmt with a none-lp.\n-        *self.loans += [{lp:option::get(cmt.lp),\n-                         cmt:cmt,\n-                         mutbl:mutbl}];\n+        (*self.loans).push({lp:option::get(cmt.lp),\n+                            cmt:cmt,\n+                            mutbl:mutbl});\n     }\n \n     fn loan(cmt: cmt, req_mutbl: ast::mutability) {"}]}