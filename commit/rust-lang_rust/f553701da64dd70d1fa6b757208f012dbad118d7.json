{"sha": "f553701da64dd70d1fa6b757208f012dbad118d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NTM3MDFkYTY0ZGQ3MGQxZmE2Yjc1NzIwOGYwMTJkYmFkMTE4ZDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-27T19:51:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:01:56Z"}, "message": "libsyntax: De-`@mut` `ParseSess::included_mod_stack`", "tree": {"sha": "d0740b11dff63e3a883bbd4ac7273b74966044d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0740b11dff63e3a883bbd4ac7273b74966044d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f553701da64dd70d1fa6b757208f012dbad118d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f553701da64dd70d1fa6b757208f012dbad118d7", "html_url": "https://github.com/rust-lang/rust/commit/f553701da64dd70d1fa6b757208f012dbad118d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f553701da64dd70d1fa6b757208f012dbad118d7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08321f1c49d75e60a2c56320a3f1483e7bf79a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/08321f1c49d75e60a2c56320a3f1483e7bf79a91", "html_url": "https://github.com/rust-lang/rust/commit/08321f1c49d75e60a2c56320a3f1483e7bf79a91"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "b6139f0ae9924349e35ab8296f228ac2b6c89983", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f553701da64dd70d1fa6b757208f012dbad118d7/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553701da64dd70d1fa6b757208f012dbad118d7/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f553701da64dd70d1fa6b757208f012dbad118d7", "patch": "@@ -19,6 +19,7 @@ use parse::attr::parser_attr;\n use parse::lexer::reader;\n use parse::parser::Parser;\n \n+use std::cell::RefCell;\n use std::io;\n use std::io::File;\n use std::str;\n@@ -43,15 +44,15 @@ pub struct ParseSess {\n     cm: @codemap::CodeMap, // better be the same as the one in the reader!\n     span_diagnostic: @mut SpanHandler, // better be the same as the one in the reader!\n     /// Used to determine and report recursive mod inclusions\n-    included_mod_stack: ~[Path],\n+    included_mod_stack: RefCell<~[Path]>,\n }\n \n pub fn new_parse_sess(demitter: Option<@Emitter>) -> @mut ParseSess {\n     let cm = @CodeMap::new();\n     @mut ParseSess {\n         cm: cm,\n         span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n-        included_mod_stack: ~[],\n+        included_mod_stack: RefCell::new(~[]),\n     }\n }\n \n@@ -61,7 +62,7 @@ pub fn new_parse_sess_special_handler(sh: @mut SpanHandler,\n     @mut ParseSess {\n         cm: cm,\n         span_diagnostic: sh,\n-        included_mod_stack: ~[],\n+        included_mod_stack: RefCell::new(~[]),\n     }\n }\n "}, {"sha": "ed149c1a73e10876c0bcd8a81b34db007d39c3e2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f553701da64dd70d1fa6b757208f012dbad118d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f553701da64dd70d1fa6b757208f012dbad118d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f553701da64dd70d1fa6b757208f012dbad118d7", "patch": "@@ -4264,21 +4264,28 @@ impl Parser {\n                               path: Path,\n                               outer_attrs: ~[ast::Attribute],\n                               id_sp: Span) -> (ast::item_, ~[ast::Attribute]) {\n-        let maybe_i = self.sess.included_mod_stack.iter().position(|p| *p == path);\n-        match maybe_i {\n-            Some(i) => {\n-                let stack = &self.sess.included_mod_stack;\n-                let mut err = ~\"circular modules: \";\n-                for p in stack.slice(i, stack.len()).iter() {\n-                    p.display().with_str(|s| err.push_str(s));\n-                    err.push_str(\" -> \");\n+        {\n+            let mut included_mod_stack = self.sess\n+                                             .included_mod_stack\n+                                             .borrow_mut();\n+            let maybe_i = included_mod_stack.get()\n+                                            .iter()\n+                                            .position(|p| *p == path);\n+            match maybe_i {\n+                Some(i) => {\n+                    let mut err = ~\"circular modules: \";\n+                    let len = included_mod_stack.get().len();\n+                    for p in included_mod_stack.get().slice(i, len).iter() {\n+                        p.display().with_str(|s| err.push_str(s));\n+                        err.push_str(\" -> \");\n+                    }\n+                    path.display().with_str(|s| err.push_str(s));\n+                    self.span_fatal(id_sp, err);\n                 }\n-                path.display().with_str(|s| err.push_str(s));\n-                self.span_fatal(id_sp, err);\n+                None => ()\n             }\n-            None => ()\n+            included_mod_stack.get().push(path.clone());\n         }\n-        self.sess.included_mod_stack.push(path.clone());\n \n         let mut p0 =\n             new_sub_parser_from_file(self.sess,\n@@ -4289,7 +4296,12 @@ impl Parser {\n         let mod_attrs = vec::append(outer_attrs, inner);\n         let first_item_outer_attrs = next;\n         let m0 = p0.parse_mod_items(token::EOF, first_item_outer_attrs);\n-        self.sess.included_mod_stack.pop();\n+        {\n+            let mut included_mod_stack = self.sess\n+                                             .included_mod_stack\n+                                             .borrow_mut();\n+            included_mod_stack.get().pop();\n+        }\n         return (ast::item_mod(m0), mod_attrs);\n     }\n "}]}