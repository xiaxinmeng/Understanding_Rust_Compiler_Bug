{"sha": "4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MDdlOTM5Y2RlYmEwMmIwNzUyYmE1NzQ4ZWVjOWVmNGU5ZjFhZjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T19:52:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T21:41:49Z"}, "message": "test that we validate boxes", "tree": {"sha": "790d49a17362369056003c772217e92704aad9d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/790d49a17362369056003c772217e92704aad9d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "html_url": "https://github.com/rust-lang/rust/commit/4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1435b0aef77e0eeb8604fd0eed578772ff7e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1435b0aef77e0eeb8604fd0eed578772ff7e27", "html_url": "https://github.com/rust-lang/rust/commit/aa1435b0aef77e0eeb8604fd0eed578772ff7e27"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "ee4d05c5911de900e416fe3fb2024f76e2496b67", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "patch": "@@ -453,7 +453,6 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                 Ok(true)\n             }\n             ty::Adt(def, ..) if def.is_box() => {\n-                // FIXME make sure we have a test for `Box`!\n                 self.check_safe_pointer(value)?;\n                 Ok(true)\n             }"}, {"sha": "14ededafaff04914dcce22039afd490833c2928d", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "patch": "@@ -8,9 +8,16 @@ const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n //~^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n \n+const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n+//~^ ERROR it is undefined behavior to use this value\n+//~^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n+\n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n // It is very important that we reject this: We do promote `&(4 * REF_AS_USIZE)`,\n // but that would fail to compile; so we ended up breaking user code that would\n // have worked fine had we not promoted.\n@@ -20,7 +27,13 @@ const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n //~^ ERROR it is undefined behavior to use this value\n \n+const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n //~^ ERROR it is undefined behavior to use this value\n \n+const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n+//~^ ERROR it is undefined behavior to use this value\n+\n fn main() {}"}, {"sha": "3cb91ef275236cec3794ce07976582706b41c56b", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4807e939cdeba02b0752ba5748eec9ef4e9f1af8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=4807e939cdeba02b0752ba5748eec9ef4e9f1af8", "patch": "@@ -9,35 +9,67 @@ LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:11:1\n    |\n+LL | const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref.rs:15:1\n+   |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref.rs:18:1\n+   |\n+LL | const NULL_BOX: Box<u16> = unsafe { mem::transmute(0usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a NULL reference\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref.rs:24:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:20:1\n+  --> $DIR/ub-ref.rs:27:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:23:1\n+  --> $DIR/ub-ref.rs:30:1\n+   |\n+LL | const REF_AS_USIZE_BOX_SLICE: Box<[usize]> = unsafe { mem::transmute::<&[usize], _>(&[mem::transmute(&0)]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref.rs:33:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: aborting due to 5 previous errors\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref.rs:36:1\n+   |\n+LL | const USIZE_AS_BOX: Box<u8> = unsafe { mem::transmute(1337usize) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (created from integer)\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}