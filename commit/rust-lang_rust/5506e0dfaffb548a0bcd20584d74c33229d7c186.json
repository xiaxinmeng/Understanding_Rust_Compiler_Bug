{"sha": "5506e0dfaffb548a0bcd20584d74c33229d7c186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MDZlMGRmYWZmYjU0OGEwYmNkMjA1ODRkNzRjMzMyMjlkN2MxODY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-03T18:03:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-03T18:03:52Z"}, "message": "Merge #10139\n\n10139: Fix replacing for loops over ranges with for_each. r=yotamofek a=yotamofek\n\nPreviously, the assist would turn this:\r\n```rust\r\nfor x in 0..92 {\r\n    ...\r\n}\r\n```\r\ninto the syntactically incorrect code below:\r\n```rust\r\n0..92.for_each(|x| ...)\r\n```\r\n\r\nThis fixes the assist by parenthesizing range expressions.\n\nCo-authored-by: Yotam Ofek <yotam.ofek@gmail.com>", "tree": {"sha": "e43cbe8da555414c44df6797ce7439f50b9c7b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43cbe8da555414c44df6797ce7439f50b9c7b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5506e0dfaffb548a0bcd20584d74c33229d7c186", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMmOICRBK7hj4Ov3rIwAAn4AIADw1PAXHB1i18DmG5Tfh8lWh\n2k3ffl8chsBipnvt4V3I8VnQpSfEbV+/6uyd2er+9zdu2Typ8CGF5cuJgtCg5Ywe\nhfeft+TNlSsxNNzF6NaiyGkxthrNmUHyFJfSPCnwnVYbfTHdm+BmelfaStuhUV1B\ncPJI+XLNMbSq3FvgiAfd0iRdcMVi3Py+FCD0NwEL1hXmWBUr6HUtKpRKBjtxWBj1\nzVyVZ+TN5eJrtV4aifXmKCzx1kUJuF1J3S6uCBoE+oPW25oWA1t3LW5DrTMy4RRB\nPav67d3ihco6VknIiYyOgYZMrGpQf5hcq5ub0FtEUknDWq90RO5K1uVO8fCS3a8=\n=0MQW\n-----END PGP SIGNATURE-----\n", "payload": "tree e43cbe8da555414c44df6797ce7439f50b9c7b28\nparent 7234f943aaca16b33e5ad6365c2ed4ded5f569af\nparent dd9433cc6326b868a07bf7aa9ecb09db244162ad\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1630692232 +0000\ncommitter GitHub <noreply@github.com> 1630692232 +0000\n\nMerge #10139\n\n10139: Fix replacing for loops over ranges with for_each. r=yotamofek a=yotamofek\n\nPreviously, the assist would turn this:\r\n```rust\r\nfor x in 0..92 {\r\n    ...\r\n}\r\n```\r\ninto the syntactically incorrect code below:\r\n```rust\r\n0..92.for_each(|x| ...)\r\n```\r\n\r\nThis fixes the assist by parenthesizing range expressions.\n\nCo-authored-by: Yotam Ofek <yotam.ofek@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5506e0dfaffb548a0bcd20584d74c33229d7c186", "html_url": "https://github.com/rust-lang/rust/commit/5506e0dfaffb548a0bcd20584d74c33229d7c186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5506e0dfaffb548a0bcd20584d74c33229d7c186/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7234f943aaca16b33e5ad6365c2ed4ded5f569af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7234f943aaca16b33e5ad6365c2ed4ded5f569af", "html_url": "https://github.com/rust-lang/rust/commit/7234f943aaca16b33e5ad6365c2ed4ded5f569af"}, {"sha": "dd9433cc6326b868a07bf7aa9ecb09db244162ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9433cc6326b868a07bf7aa9ecb09db244162ad", "html_url": "https://github.com/rust-lang/rust/commit/dd9433cc6326b868a07bf7aa9ecb09db244162ad"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "fcf7973bd0ba8ecc1bd8dea8b688a23eeae9022a", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/5506e0dfaffb548a0bcd20584d74c33229d7c186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5506e0dfaffb548a0bcd20584d74c33229d7c186/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=5506e0dfaffb548a0bcd20584d74c33229d7c186", "patch": "@@ -50,14 +50,15 @@ pub(crate) fn replace_for_loop_with_for_each(acc: &mut Assists, ctx: &AssistCont\n                 // We have either \"for x in &col\" and col implements a method called iter\n                 //             or \"for x in &mut col\" and col implements a method called iter_mut\n                 format_to!(buf, \"{}.{}()\", expr_behind_ref, method);\n+            } else if let ast::Expr::RangeExpr(..) = iterable {\n+                // range expressions need to be parenthesized for the syntax to be correct\n+                format_to!(buf, \"({})\", iterable);\n             } else if impls_core_iter(&ctx.sema, &iterable) {\n                 format_to!(buf, \"{}\", iterable);\n+            } else if let ast::Expr::RefExpr(_) = iterable {\n+                format_to!(buf, \"({}).into_iter()\", iterable);\n             } else {\n-                if let ast::Expr::RefExpr(_) = iterable {\n-                    format_to!(buf, \"({}).into_iter()\", iterable);\n-                } else {\n-                    format_to!(buf, \"{}.into_iter()\", iterable);\n-                }\n+                format_to!(buf, \"{}.into_iter()\", iterable);\n             }\n \n             format_to!(buf, \".for_each(|{}| {});\", pat, body);\n@@ -167,6 +168,42 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn test_for_in_range() {\n+        check_assist(\n+            replace_for_loop_with_for_each,\n+            r#\"\n+//- minicore: range, iterators\n+impl<T> core::iter::Iterator for core::ops::Range<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    for $0x in 0..92 {\n+        print!(\"{}\", x);\n+    }\n+}\"#,\n+            r#\"\n+impl<T> core::iter::Iterator for core::ops::Range<T> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        None\n+    }\n+}\n+\n+fn main() {\n+    (0..92).for_each(|x| {\n+        print!(\"{}\", x);\n+    });\n+}\"#,\n+        )\n+    }\n+\n     #[test]\n     fn not_available_in_body() {\n         cov_mark::check!(not_available_in_body);"}]}