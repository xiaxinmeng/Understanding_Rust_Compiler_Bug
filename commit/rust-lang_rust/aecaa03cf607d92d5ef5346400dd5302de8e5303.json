{"sha": "aecaa03cf607d92d5ef5346400dd5302de8e5303", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2FhMDNjZjYwN2Q5MmQ1ZWY1MzQ2NDAwZGQ1MzAyZGU4ZTUzMDM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-26T00:01:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-27T18:26:41Z"}, "message": "tidy: Add a check for inline unit tests and benchmarks", "tree": {"sha": "ed0fbc88e2893cf2f914d2e6515e99e171ad0ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0fbc88e2893cf2f914d2e6515e99e171ad0ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aecaa03cf607d92d5ef5346400dd5302de8e5303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aecaa03cf607d92d5ef5346400dd5302de8e5303", "html_url": "https://github.com/rust-lang/rust/commit/aecaa03cf607d92d5ef5346400dd5302de8e5303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aecaa03cf607d92d5ef5346400dd5302de8e5303/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a4def0c9df85649336a52607347f613efcca918", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4def0c9df85649336a52607347f613efcca918", "html_url": "https://github.com/rust-lang/rust/commit/6a4def0c9df85649336a52607347f613efcca918"}], "stats": {"total": 103, "additions": 84, "deletions": 19}, "files": [{"sha": "b789e5cfd48d5c1e5c4d0255028db6cc96740707", "filename": "src/tools/tidy/src/unit_tests.rs", "status": "modified", "additions": 84, "deletions": 19, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/aecaa03cf607d92d5ef5346400dd5302de8e5303/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aecaa03cf607d92d5ef5346400dd5302de8e5303/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Funit_tests.rs?ref=aecaa03cf607d92d5ef5346400dd5302de8e5303", "patch": "@@ -1,28 +1,93 @@\n-//! Tidy check to ensure `#[test]` is not used directly inside `libcore`.\n+//! Tidy check to ensure `#[test]` and `#[bench]` are not used directly inside\n+//! `libcore` or `liballoc`.\n //!\n-//! `#![no_core]` libraries cannot be tested directly due to duplicating lang\n-//! item. All tests must be written externally in `libcore/tests`.\n+//! `#![no_std]` libraries cannot be tested directly due to duplicating lang\n+//! items. All tests and benchmarks must be written externally in `libcore/{tests,benches}`\n+//! or `liballoc/{tests,benches}`.\n+//!\n+//! Outside of libcore and liballoc tests and benchmarks should be outlined into separate files\n+//! named `tests.rs` or `benches.rs`, or directories named `tests` or `benches` unconfigured\n+//! during normal build.\n \n use std::path::Path;\n \n-pub fn check(path: &Path, bad: &mut bool) {\n-    let libcore_path = path.join(\"libcore\");\n+pub fn check(root_path: &Path, bad: &mut bool) {\n+    let libcore = &root_path.join(\"libcore\");\n+    let liballoc = &root_path.join(\"liballoc\");\n+    let libcore_tests = &root_path.join(\"libcore/tests\");\n+    let liballoc_tests = &root_path.join(\"liballoc/tests\");\n+    let libcore_benches = &root_path.join(\"libcore/benches\");\n+    let liballoc_benches = &root_path.join(\"liballoc/benches\");\n+    let is_core_or_alloc = |path: &Path| {\n+        let is_core = path.starts_with(libcore) &&\n+                      !(path.starts_with(libcore_tests) || path.starts_with(libcore_benches));\n+        let is_alloc = path.starts_with(liballoc) &&\n+                       !(path.starts_with(liballoc_tests) || path.starts_with(liballoc_benches));\n+        is_core || is_alloc\n+    };\n+    let fixme = [\n+        \"liballoc\",\n+        \"libpanic_unwind/dwarf\",\n+        \"librustc\",\n+        \"librustc_data_structures\",\n+        \"librustc_incremental/persist\",\n+        \"librustc_lexer/src\",\n+        \"librustc_target/spec\",\n+        \"librustdoc\",\n+        \"libserialize\",\n+        \"libstd\",\n+        \"libsyntax\",\n+        \"libsyntax_pos\",\n+        \"libterm/terminfo\",\n+        \"libtest\",\n+        \"tools/compiletest/src\",\n+        \"tools/tidy/src\",\n+    ];\n+\n+    let mut skip = |path: &Path| {\n+        let file_name = path.file_name().unwrap_or_default();\n+        if path.is_dir() {\n+            super::filter_dirs(path) ||\n+            path.ends_with(\"src/test\") ||\n+            path.ends_with(\"src/doc\") ||\n+            (file_name == \"tests\" || file_name == \"benches\") && !is_core_or_alloc(path) ||\n+            fixme.iter().any(|p| path.ends_with(p))\n+        } else {\n+            let extension = path.extension().unwrap_or_default();\n+            extension != \"rs\" ||\n+            (file_name == \"tests.rs\" || file_name == \"benches.rs\") && !is_core_or_alloc(path)\n+        }\n+    };\n+\n     super::walk(\n-        &libcore_path,\n-        &mut |subpath| t!(subpath.strip_prefix(&libcore_path)).starts_with(\"tests\"),\n+        root_path,\n+        &mut skip,\n         &mut |entry, contents| {\n-            let subpath = entry.path();\n-            if let Some(\"rs\") = subpath.extension().and_then(|e| e.to_str()) {\n-                for line in contents.lines() {\n-                    let line = line.trim();\n-                    if !line.starts_with(\"//\") && line.contains(\"#[test]\") {\n-                        tidy_error!(\n-                            bad,\n-                            \"`{}` contains `#[test]`; libcore tests must be placed inside \\\n-                            `src/libcore/tests/`\",\n-                            subpath.display()\n-                        );\n-                    }\n+            let path = entry.path();\n+            let is_libcore = path.starts_with(libcore);\n+            let is_liballoc = path.starts_with(liballoc);\n+            for (i, line) in contents.lines().enumerate() {\n+                let line = line.trim();\n+                let is_test = || line.contains(\"#[test]\") && !line.contains(\"`#[test]\");\n+                let is_bench = || line.contains(\"#[bench]\") && !line.contains(\"`#[bench]\");\n+                if !line.starts_with(\"//\") && (is_test() || is_bench()) {\n+                    let explanation = if is_libcore {\n+                        \"libcore unit tests and benchmarks must be placed into \\\n+                         `libcore/tests` or `libcore/benches`\"\n+                    } else if is_liballoc {\n+                        \"liballoc unit tests and benchmarks must be placed into \\\n+                         `liballoc/tests` or `liballoc/benches`\"\n+                    } else {\n+                        \"unit tests and benchmarks must be placed into \\\n+                         separate files or directories named \\\n+                         `tests.rs`, `benches.rs`, `tests` or `benches`\"\n+                    };\n+                    let name = if is_test() { \"test\" } else { \"bench\" };\n+                    tidy_error!(\n+                        bad, \"`{}:{}` contains `#[{}]`; {}\",\n+                        path.display(), i + 1, name, explanation,\n+                    );\n+                    return;\n                 }\n             }\n         },"}]}