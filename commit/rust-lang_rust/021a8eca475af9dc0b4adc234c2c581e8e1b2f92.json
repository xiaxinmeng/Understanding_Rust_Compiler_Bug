{"sha": "021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMWE4ZWNhNDc1YWY5ZGMwYjRhZGMyMzRjMmM1ODFlOGUxYjJmOTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-13T22:39:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-13T22:39:46Z"}, "message": "Rollup merge of #59874 - michaelwoerister:pgo-updates-1, r=cramertj\n\nClean up handling of `-Z pgo-gen` commandline option.\n\nThis PR adapts the `-Z pgo-gen` flag to how Clang and GCC handle the corresponding `-fprofile-generate` flag. In particular, the flag now optionally takes a directory to place the profiling data in and allows to omit the argument (instead of having to pass an empty string).", "tree": {"sha": "f169fa16ad1a78ebe1699dd1a070daae21e5b00d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f169fa16ad1a78ebe1699dd1a070daae21e5b00d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsmUyCRBK7hj4Ov3rIwAAdHIIAJjpd8rAYu5nYPGVaNJdOBRq\nqbiA0qTkZOkDs3ncvaVpgIne3HfPDcSIf8RbWsQ1WGbOWxtfjQDnLqEUE5fjfghM\n1HkDyubTT4OuQa6kh+WIyUaBziHYlPPWuAoYVqxmLKOJDrU6sTImTeAC65lTdxBh\n+fZ4hKQ9fq3D9Rz+C5gtNyRBw/ho/tXZvx9lYMpdTpt/q1LQBCdH5IIN92Bu2b99\nRorhG0Mvxky0O5RR6ldeDtyst/4IPRI/aDt0M5Ed6lQt/L8wY/J4FaqBWtirGPGv\nVYAmIWvm99v+IGhDpw0go4mpjnj1sMTRuOH9JgmiGJAmcxq8zYPKFs8bexL4xgs=\n=aCEX\n-----END PGP SIGNATURE-----\n", "payload": "tree f169fa16ad1a78ebe1699dd1a070daae21e5b00d\nparent 7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d\nparent 7b1df42accbfdf54148072c7a3d1e80177c388b0\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555195186 +0200\ncommitter GitHub <noreply@github.com> 1555195186 +0200\n\nRollup merge of #59874 - michaelwoerister:pgo-updates-1, r=cramertj\n\nClean up handling of `-Z pgo-gen` commandline option.\n\nThis PR adapts the `-Z pgo-gen` flag to how Clang and GCC handle the corresponding `-fprofile-generate` flag. In particular, the flag now optionally takes a directory to place the profiling data in and allows to omit the argument (instead of having to pass an empty string).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "html_url": "https://github.com/rust-lang/rust/commit/021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d", "html_url": "https://github.com/rust-lang/rust/commit/7ff376b3b27d2e5c5c01b336924bcc3e507e5c4d"}, {"sha": "7b1df42accbfdf54148072c7a3d1e80177c388b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1df42accbfdf54148072c7a3d1e80177c388b0", "html_url": "https://github.com/rust-lang/rust/commit/7b1df42accbfdf54148072c7a3d1e80177c388b0"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "7c0eab26b09b633b420fdd1a62144d0b4cc57347", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -113,6 +113,21 @@ impl LinkerPluginLto {\n     }\n }\n \n+#[derive(Clone, PartialEq, Hash)]\n+pub enum PgoGenerate {\n+    Enabled(Option<PathBuf>),\n+    Disabled,\n+}\n+\n+impl PgoGenerate {\n+    pub fn enabled(&self) -> bool {\n+        match *self {\n+            PgoGenerate::Enabled(_) => true,\n+            PgoGenerate::Disabled => false,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash)]\n pub enum DebugInfo {\n     None,\n@@ -826,13 +841,15 @@ macro_rules! options {\n         pub const parse_linker_plugin_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n+        pub const parse_pgo_generate: Option<&str> =\n+            Some(\"an optional path to the profiling data output directory\");\n         pub const parse_merge_functions: Option<&str> =\n             Some(\"one of: `disabled`, `trampolines`, or `aliases`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto};\n+        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, PgoGenerate};\n         use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n         use std::str::FromStr;\n@@ -1087,6 +1104,14 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_pgo_generate(slot: &mut PgoGenerate, v: Option<&str>) -> bool {\n+            *slot = match v {\n+                None => PgoGenerate::Enabled(None),\n+                Some(path) => PgoGenerate::Enabled(Some(PathBuf::from(path))),\n+            };\n+            true\n+        }\n+\n         fn parse_merge_functions(slot: &mut Option<MergeFunctions>, v: Option<&str>) -> bool {\n             match v.and_then(|s| MergeFunctions::from_str(s).ok()) {\n                 Some(mergefunc) => *slot = Some(mergefunc),\n@@ -1363,7 +1388,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n                      \"insert profiling code\"),\n-    pgo_gen: Option<String> = (None, parse_opt_string, [TRACKED],\n+    pgo_gen: PgoGenerate = (PgoGenerate::Disabled, parse_pgo_generate, [TRACKED],\n         \"Generate PGO profile data, to a given file, or to the default location if it's empty.\"),\n     pgo_use: String = (String::new(), parse_string, [TRACKED],\n         \"Use PGO profile data from the given profile file.\"),\n@@ -1980,7 +2005,7 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n-    if debugging_opts.pgo_gen.is_some() && !debugging_opts.pgo_use.is_empty() {\n+    if debugging_opts.pgo_gen.enabled() && !debugging_opts.pgo_use.is_empty() {\n         early_error(\n             error_format,\n             \"options `-Z pgo-gen` and `-Z pgo-use` are exclusive\",\n@@ -2490,7 +2515,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n-                Passes, Sanitizer, LtoCli, LinkerPluginLto};\n+                Passes, Sanitizer, LtoCli, LinkerPluginLto, PgoGenerate};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n@@ -2558,6 +2583,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n     impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n+    impl_dep_tracking_hash_via_hash!(PgoGenerate);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2625,7 +2651,7 @@ mod tests {\n         build_session_options_and_crate_config,\n         to_crate_config\n     };\n-    use crate::session::config::{LtoCli, LinkerPluginLto};\n+    use crate::session::config::{LtoCli, LinkerPluginLto, PgoGenerate};\n     use crate::session::build_session;\n     use crate::session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n@@ -3124,7 +3150,7 @@ mod tests {\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n         opts = reference.clone();\n-        opts.debugging_opts.pgo_gen = Some(String::from(\"abc\"));\n+        opts.debugging_opts.pgo_gen = PgoGenerate::Enabled(None);\n         assert_ne!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n         opts = reference.clone();"}, {"sha": "b15a64c966b1b34376ea4c98ca06f92605922b43", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -104,7 +104,7 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     }\n \n     // probestack doesn't play nice either with pgo-gen.\n-    if cx.sess().opts.debugging_opts.pgo_gen.is_some() {\n+    if cx.sess().opts.debugging_opts.pgo_gen.enabled() {\n         return;\n     }\n "}, {"sha": "6a3c2adc856188527db92e97cee6230b69eb560e", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -1014,7 +1014,7 @@ fn link_args(cmd: &mut dyn Linker,\n         cmd.build_static_executable();\n     }\n \n-    if sess.opts.debugging_opts.pgo_gen.is_some() {\n+    if sess.opts.debugging_opts.pgo_gen.enabled() {\n         cmd.pgo_gen();\n     }\n "}, {"sha": "d803f10746e3f7c9db6c25b7c88ad60b010bff41", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -13,7 +13,7 @@ use crate::LlvmCodegenBackend;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n-use rustc::session::config::{self, OutputType, Passes, Lto};\n+use rustc::session::config::{self, OutputType, Passes, Lto, PgoGenerate};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::{ModuleCodegen, CompiledModule};\n@@ -25,7 +25,7 @@ use errors::{Handler, FatalError};\n use std::ffi::{CString, CStr};\n use std::fs;\n use std::io::{self, Write};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::str;\n use std::sync::Arc;\n use std::slice;\n@@ -706,10 +706,20 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n         .unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    let pgo_gen_path = config.pgo_gen.as_ref().map(|s| {\n-        let s = if s.is_empty() { \"default_%m.profraw\" } else { s };\n-        CString::new(s.as_bytes()).unwrap()\n-    });\n+    let pgo_gen_path = match config.pgo_gen {\n+        PgoGenerate::Enabled(ref opt_dir_path) => {\n+            let path = if let Some(dir_path) = opt_dir_path {\n+                dir_path.join(\"default_%m.profraw\")\n+            } else {\n+                PathBuf::from(\"default_%m.profraw\")\n+            };\n+\n+            Some(CString::new(format!(\"{}\", path.display())).unwrap())\n+        }\n+        PgoGenerate::Disabled => {\n+            None\n+        }\n+    };\n \n     let pgo_use_path = if config.pgo_use.is_empty() {\n         None"}, {"sha": "a55f783df43a372b43294353c813199b5e1f1dcb", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -209,7 +209,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    if tcx.sess.opts.debugging_opts.pgo_gen.is_some() {\n+    if tcx.sess.opts.debugging_opts.pgo_gen.enabled() {\n         // These are weak symbols that point to the profile version and the\n         // profile name, which need to be treated as exported so LTO doesn't nix\n         // them."}, {"sha": "4b02425d40d6550f040c403ab797047e0845cec1", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -12,7 +12,8 @@ use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir,\n use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::dep_graph::cgu_reuse_tracker::CguReuseTracker;\n use rustc::middle::cstore::EncodedMetadata;\n-use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Sanitizer, Lto};\n+use rustc::session::config::{self, OutputFilenames, OutputType, Passes, Lto,\n+                             Sanitizer, PgoGenerate};\n use rustc::session::Session;\n use rustc::util::nodemap::FxHashMap;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n@@ -55,7 +56,7 @@ pub struct ModuleConfig {\n     /// Some(level) to optimize binary size, or None to not affect program size.\n     pub opt_size: Option<config::OptLevel>,\n \n-    pub pgo_gen: Option<String>,\n+    pub pgo_gen: PgoGenerate,\n     pub pgo_use: String,\n \n     // Flags indicating which outputs to produce.\n@@ -93,7 +94,7 @@ impl ModuleConfig {\n             opt_level: None,\n             opt_size: None,\n \n-            pgo_gen: None,\n+            pgo_gen: PgoGenerate::Disabled,\n             pgo_use: String::new(),\n \n             emit_no_opt_bc: false,"}, {"sha": "66daa4518bef6becdc8f5ffba921ec7ee2d88c63", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -862,7 +862,7 @@ impl<'a> CrateLoader<'a> {\n \n     fn inject_profiler_runtime(&mut self) {\n         if self.sess.opts.debugging_opts.profile ||\n-            self.sess.opts.debugging_opts.pgo_gen.is_some()\n+            self.sess.opts.debugging_opts.pgo_gen.enabled()\n         {\n             info!(\"loading profiler\");\n "}, {"sha": "7c19961b1e420b3b1f2cb29f619e1c09e5c8a2af", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -1,10 +1,8 @@\n -include ../tools.mk\n \n-# ignore-windows\n-\n all:\n ifeq ($(PROFILER_SUPPORT),1)\n-\t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n+\t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n-\t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n+\t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n endif"}, {"sha": "0469c4443d85aa0ccadb57cf0f8c671386db9801", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/021a8eca475af9dc0b4adc234c2c581e8e1b2f92/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=021a8eca475af9dc0b4adc234c2c581e8e1b2f92", "patch": "@@ -1,10 +1,8 @@\n -include ../tools.mk\n \n-# ignore-windows\n-\n all:\n ifeq ($(PROFILER_SUPPORT),1)\n-\t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n+\t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)\" test.rs\n \t$(call RUN,test) || exit 1\n-\t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n+\t[ -e \"$(TMPDIR)\"/default_*.profraw ] || (echo \"No .profraw file\"; exit 1)\n endif"}]}