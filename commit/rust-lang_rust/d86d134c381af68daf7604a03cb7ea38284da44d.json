{"sha": "d86d134c381af68daf7604a03cb7ea38284da44d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NmQxMzRjMzgxYWY2OGRhZjc2MDRhMDNjYjdlYTM4Mjg0ZGE0NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-25T10:35:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-25T10:35:04Z"}, "message": "Auto merge of #41932 - wesleywiser:py-to-rust, r=alexcrichton\n\nRewrite make-win-dist.py in Rust\n\nFixes #41568", "tree": {"sha": "954f517f02dcba69a4990c519117c910e538baea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/954f517f02dcba69a4990c519117c910e538baea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d86d134c381af68daf7604a03cb7ea38284da44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d86d134c381af68daf7604a03cb7ea38284da44d", "html_url": "https://github.com/rust-lang/rust/commit/d86d134c381af68daf7604a03cb7ea38284da44d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d86d134c381af68daf7604a03cb7ea38284da44d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d", "html_url": "https://github.com/rust-lang/rust/commit/d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d"}, {"sha": "7eebabeb92c09baf444e8bb5e46fc262a22fe853", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eebabeb92c09baf444e8bb5e46fc262a22fe853", "html_url": "https://github.com/rust-lang/rust/commit/7eebabeb92c09baf444e8bb5e46fc262a22fe853"}], "stats": {"total": 280, "additions": 137, "deletions": 143}, "files": [{"sha": "14ddcc7cb323250963c4ff8daca123511ed762a7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 137, "deletions": 17, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/d86d134c381af68daf7604a03cb7ea38284da44d/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d86d134c381af68daf7604a03cb7ea38284da44d/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d86d134c381af68daf7604a03cb7ea38284da44d", "patch": "@@ -96,6 +96,140 @@ pub fn docs(build: &Build, stage: u32, host: &str) {\n     }\n }\n \n+fn find_files(files: &[&str], path: &[PathBuf]) -> Vec<PathBuf> {\n+    let mut found = Vec::new();\n+\n+    for file in files {\n+        let file_path =\n+            path.iter()\n+                .map(|dir| dir.join(file))\n+                .find(|p| p.exists());\n+\n+        if let Some(file_path) = file_path {\n+            found.push(file_path);\n+        } else {\n+            panic!(\"Could not find '{}' in {:?}\", file, path);\n+        }\n+    }\n+\n+    found\n+}\n+\n+fn make_win_dist(rust_root: &Path, plat_root: &Path, target_triple: &str, build: &Build) {\n+    //Ask gcc where it keeps its stuff\n+    let mut cmd = Command::new(build.cc(target_triple));\n+    cmd.arg(\"-print-search-dirs\");\n+    build.run_quiet(&mut cmd);\n+    let gcc_out =\n+        String::from_utf8(\n+                cmd\n+                .output()\n+                .expect(\"failed to execute gcc\")\n+                .stdout).expect(\"gcc.exe output was not utf8\");\n+\n+    let mut bin_path: Vec<_> =\n+        env::split_paths(&env::var_os(\"PATH\").unwrap_or_default())\n+        .collect();\n+    let mut lib_path = Vec::new();\n+\n+    for line in gcc_out.lines() {\n+        let idx = line.find(':').unwrap();\n+        let key = &line[..idx];\n+        let trim_chars: &[_] = &[' ', '='];\n+        let value =\n+            line[(idx + 1)..]\n+                .trim_left_matches(trim_chars)\n+                .split(';')\n+                .map(|s| PathBuf::from(s));\n+\n+        if key == \"programs\" {\n+            bin_path.extend(value);\n+        } else if key == \"libraries\" {\n+            lib_path.extend(value);\n+        }\n+    }\n+\n+    let target_tools = vec![\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\", \"libwinpthread-1.dll\"];\n+    let mut rustc_dlls = vec![\"libstdc++-6.dll\", \"libwinpthread-1.dll\"];\n+    if target_triple.starts_with(\"i686-\") {\n+        rustc_dlls.push(\"libgcc_s_dw2-1.dll\");\n+    } else {\n+        rustc_dlls.push(\"libgcc_s_seh-1.dll\");\n+    }\n+\n+    let target_libs = vec![ //MinGW libs\n+        \"libgcc.a\",\n+        \"libgcc_eh.a\",\n+        \"libgcc_s.a\",\n+        \"libm.a\",\n+        \"libmingw32.a\",\n+        \"libmingwex.a\",\n+        \"libstdc++.a\",\n+        \"libiconv.a\",\n+        \"libmoldname.a\",\n+        \"libpthread.a\",\n+        //Windows import libs\n+        \"libadvapi32.a\",\n+        \"libbcrypt.a\",\n+        \"libcomctl32.a\",\n+        \"libcomdlg32.a\",\n+        \"libcrypt32.a\",\n+        \"libgdi32.a\",\n+        \"libimagehlp.a\",\n+        \"libiphlpapi.a\",\n+        \"libkernel32.a\",\n+        \"libmsvcrt.a\",\n+        \"libodbc32.a\",\n+        \"libole32.a\",\n+        \"liboleaut32.a\",\n+        \"libopengl32.a\",\n+        \"libpsapi.a\",\n+        \"librpcrt4.a\",\n+        \"libsetupapi.a\",\n+        \"libshell32.a\",\n+        \"libuser32.a\",\n+        \"libuserenv.a\",\n+        \"libuuid.a\",\n+        \"libwinhttp.a\",\n+        \"libwinmm.a\",\n+        \"libwinspool.a\",\n+        \"libws2_32.a\",\n+        \"libwsock32.a\",\n+    ];\n+\n+    //Find mingw artifacts we want to bundle\n+    let target_tools = find_files(&target_tools, &bin_path);\n+    let rustc_dlls = find_files(&rustc_dlls, &bin_path);\n+    let target_libs = find_files(&target_libs, &lib_path);\n+\n+    fn copy_to_folder(src: &Path, dest_folder: &Path) {\n+        let file_name = src.file_name().unwrap().to_os_string();\n+        let dest = dest_folder.join(file_name);\n+        copy(src, &dest);\n+    }\n+\n+    //Copy runtime dlls next to rustc.exe\n+    let dist_bin_dir = rust_root.join(\"bin/\");\n+    fs::create_dir_all(&dist_bin_dir).expect(\"creating dist_bin_dir failed\");\n+    for src in rustc_dlls {\n+        copy_to_folder(&src, &dist_bin_dir);\n+    }\n+\n+    //Copy platform tools to platform-specific bin directory\n+    let target_bin_dir = plat_root.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"bin\");\n+    fs::create_dir_all(&target_bin_dir).expect(\"creating target_bin_dir failed\");\n+    for src in target_tools {\n+        copy_to_folder(&src, &target_bin_dir);\n+    }\n+\n+    //Copy platform libs to platform-specific lib directory\n+    let target_lib_dir = plat_root.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\");\n+    fs::create_dir_all(&target_lib_dir).expect(\"creating target_lib_dir failed\");\n+    for src in target_libs {\n+        copy_to_folder(&src, &target_lib_dir);\n+    }\n+}\n+\n /// Build the `rust-mingw` installer component.\n ///\n /// This contains all the bits and pieces to run the MinGW Windows targets\n@@ -109,18 +243,11 @@ pub fn mingw(build: &Build, host: &str) {\n     let _ = fs::remove_dir_all(&image);\n     t!(fs::create_dir_all(&image));\n \n-    // The first argument to the script is a \"temporary directory\" which is just\n+    // The first argument is a \"temporary directory\" which is just\n     // thrown away (this contains the runtime DLLs included in the rustc package\n     // above) and the second argument is where to place all the MinGW components\n     // (which is what we want).\n-    //\n-    // FIXME: this script should be rewritten into Rust\n-    let mut cmd = Command::new(build.python());\n-    cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n-       .arg(tmpdir(build))\n-       .arg(&image)\n-       .arg(host);\n-    build.run(&mut cmd);\n+    make_win_dist(&tmpdir(build), &image, host, &build);\n \n     let mut cmd = rust_installer(build);\n     cmd.arg(\"generate\")\n@@ -172,15 +299,8 @@ pub fn rustc(build: &Build, stage: u32, host: &str) {\n     // anything requiring us to distribute a license, but it's likely the\n     // install will *also* include the rust-mingw package, which also needs\n     // licenses, so to be safe we just include it here in all MinGW packages.\n-    //\n-    // FIXME: this script should be rewritten into Rust\n     if host.contains(\"pc-windows-gnu\") {\n-        let mut cmd = Command::new(build.python());\n-        cmd.arg(build.src.join(\"src/etc/make-win-dist.py\"))\n-           .arg(&image)\n-           .arg(tmpdir(build))\n-           .arg(host);\n-        build.run(&mut cmd);\n+        make_win_dist(&image, &tmpdir(build), host, build);\n \n         let dst = image.join(\"share/doc\");\n         t!(fs::create_dir_all(&dst));"}, {"sha": "4699fefbb20e3b1ba63eee977ec575b341fc920a", "filename": "src/etc/make-win-dist.py", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d/src%2Fetc%2Fmake-win-dist.py", "raw_url": "https://github.com/rust-lang/rust/raw/d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d/src%2Fetc%2Fmake-win-dist.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmake-win-dist.py?ref=d0811c9148ff4fa15aba69e7fb11d7ec5dabbe8d", "patch": "@@ -1,126 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Script parameters:\n-#     argv[1] = rust component root,\n-#     argv[2] = gcc component root,\n-#     argv[3] = target triple\n-# The first two correspond to the two installable components defined in the setup script.\n-\n-import sys\n-import os\n-import shutil\n-import subprocess\n-\n-\n-def find_files(files, path):\n-    found = []\n-    for fname in files:\n-        for dir in path:\n-            filepath = os.path.normpath(os.path.join(dir, fname))\n-            if os.path.isfile(filepath):\n-                found.append(filepath)\n-                break\n-        else:\n-            raise Exception(\"Could not find '%s' in %s\" % (fname, path))\n-    return found\n-\n-\n-# rust_root - root directory of the host binaries image\n-# plat_root - root directory of the target platform tools and libs image\n-#             (the two get overlayed on top of each other during installation)\n-# target_triple - triple of the target image being layed out\n-def make_win_dist(rust_root, plat_root, target_triple):\n-    # Ask gcc where it keeps its stuff\n-    gcc_out = subprocess.check_output([\"gcc.exe\", \"-print-search-dirs\"])\n-    bin_path = os.environ[\"PATH\"].split(os.pathsep)\n-    lib_path = []\n-    for line in gcc_out.splitlines():\n-        key, val = line.split(':', 1)\n-        if key == \"programs\":\n-            bin_path.extend(val.lstrip(' =').split(';'))\n-        elif key == \"libraries\":\n-            lib_path.extend(val.lstrip(' =').split(';'))\n-\n-    target_tools = [\"gcc.exe\", \"ld.exe\", \"ar.exe\", \"dlltool.exe\",\n-                    \"libwinpthread-1.dll\"]\n-\n-    rustc_dlls = [\"libstdc++-6.dll\", \"libwinpthread-1.dll\"]\n-    if target_triple.startswith(\"i686-\"):\n-        rustc_dlls.append(\"libgcc_s_dw2-1.dll\")\n-    else:\n-        rustc_dlls.append(\"libgcc_s_seh-1.dll\")\n-\n-    target_libs = [ # MinGW libs\n-                    \"libgcc.a\",\n-                    \"libgcc_eh.a\",\n-                    \"libgcc_s.a\",\n-                    \"libm.a\",\n-                    \"libmingw32.a\",\n-                    \"libmingwex.a\",\n-                    \"libstdc++.a\",\n-                    \"libiconv.a\",\n-                    \"libmoldname.a\",\n-                    \"libpthread.a\",\n-                    # Windows import libs\n-                    \"libadvapi32.a\",\n-                    \"libbcrypt.a\",\n-                    \"libcomctl32.a\",\n-                    \"libcomdlg32.a\",\n-                    \"libcrypt32.a\",\n-                    \"libgdi32.a\",\n-                    \"libimagehlp.a\",\n-                    \"libiphlpapi.a\",\n-                    \"libkernel32.a\",\n-                    \"libmsvcrt.a\",\n-                    \"libodbc32.a\",\n-                    \"libole32.a\",\n-                    \"liboleaut32.a\",\n-                    \"libopengl32.a\",\n-                    \"libpsapi.a\",\n-                    \"librpcrt4.a\",\n-                    \"libsetupapi.a\",\n-                    \"libshell32.a\",\n-                    \"libuser32.a\",\n-                    \"libuserenv.a\",\n-                    \"libuuid.a\",\n-                    \"libwinhttp.a\",\n-                    \"libwinmm.a\",\n-                    \"libwinspool.a\",\n-                    \"libws2_32.a\",\n-                    \"libwsock32.a\",\n-                    ]\n-\n-    # Find mingw artifacts we want to bundle\n-    target_tools = find_files(target_tools, bin_path)\n-    rustc_dlls = find_files(rustc_dlls, bin_path)\n-    target_libs = find_files(target_libs, lib_path)\n-\n-    # Copy runtime dlls next to rustc.exe\n-    dist_bin_dir = os.path.join(rust_root, \"bin\")\n-    for src in rustc_dlls:\n-        shutil.copy(src, dist_bin_dir)\n-\n-    # Copy platform tools to platform-specific bin directory\n-    target_bin_dir = os.path.join(plat_root, \"lib\", \"rustlib\", target_triple, \"bin\")\n-    if not os.path.exists(target_bin_dir):\n-        os.makedirs(target_bin_dir)\n-    for src in target_tools:\n-        shutil.copy(src, target_bin_dir)\n-\n-    # Copy platform libs to platform-specific lib directory\n-    target_lib_dir = os.path.join(plat_root, \"lib\", \"rustlib\", target_triple, \"lib\")\n-    if not os.path.exists(target_lib_dir):\n-        os.makedirs(target_lib_dir)\n-    for src in target_libs:\n-        shutil.copy(src, target_lib_dir)\n-\n-if __name__ == \"__main__\":\n-    make_win_dist(sys.argv[1], sys.argv[2], sys.argv[3])"}]}