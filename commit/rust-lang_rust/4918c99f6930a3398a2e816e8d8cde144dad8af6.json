{"sha": "4918c99f6930a3398a2e816e8d8cde144dad8af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MThjOTlmNjkzMGEzMzk4YTJlODE2ZThkOGNkZTE0NGRhZDhhZjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T19:03:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-06-17T19:22:53Z"}, "message": "rustc: Copy the contents of generic interior vectors", "tree": {"sha": "614f3257e5d662440dcb0006018712eac237ed25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614f3257e5d662440dcb0006018712eac237ed25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4918c99f6930a3398a2e816e8d8cde144dad8af6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4918c99f6930a3398a2e816e8d8cde144dad8af6", "html_url": "https://github.com/rust-lang/rust/commit/4918c99f6930a3398a2e816e8d8cde144dad8af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4918c99f6930a3398a2e816e8d8cde144dad8af6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb75975427865dcd94b21247779a720e5fb3df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb75975427865dcd94b21247779a720e5fb3df1", "html_url": "https://github.com/rust-lang/rust/commit/4bb75975427865dcd94b21247779a720e5fb3df1"}], "stats": {"total": 156, "additions": 73, "deletions": 83}, "files": [{"sha": "6c824d9626f64cb488c89ebb9d61869e249fb494", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 74, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/4918c99f6930a3398a2e816e8d8cde144dad8af6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4918c99f6930a3398a2e816e8d8cde144dad8af6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4918c99f6930a3398a2e816e8d8cde144dad8af6", "patch": "@@ -1321,6 +1321,15 @@ fn dynamic_size_of(&@block_ctxt cx, ty::t t) -> result {\n             auto total_size = bcx.build.Add(max_size_val, llsize_of(T_int()));\n             ret res(bcx, total_size);\n         }\n+        case (ty::ty_ivec(?mt)) {\n+            auto rslt = field_of_tydesc(cx, mt.ty, false,\n+                                        abi::tydesc_field_size);\n+            auto bcx = rslt.bcx;\n+            auto llunitszptr = rslt.val;\n+            auto llunitsz = bcx.build.Load(llunitszptr);\n+            auto llsz = bcx.build.Add(llsize_of(T_opaque_ivec()), llunitsz);\n+            ret res(bcx, llsz);\n+        }\n     }\n }\n \n@@ -1353,7 +1362,13 @@ fn dynamic_align_of(&@block_ctxt cx, &ty::t t) -> result {\n         }\n         case (ty::ty_tag(_, _)) {\n             ret res(cx, C_int(1)); // FIXME: stub\n-\n+        }\n+        case (ty::ty_ivec(?tm)) {\n+            auto rslt = align_of(cx, tm.ty);\n+            auto bcx = rslt.bcx;\n+            auto llunitalign = rslt.val;\n+            auto llalign = umax(bcx, llalign_of(T_int()), llunitalign);\n+            ret res(bcx, llalign);\n         }\n     }\n }\n@@ -2044,8 +2059,15 @@ fn make_drop_glue(&@block_ctxt cx, ValueRef v0, &ty::t t) {\n         case (ty::ty_str) { rslt = decr_refcnt_maybe_free(cx, v0, v0, t); }\n         case (ty::ty_vec(_)) { rslt = decr_refcnt_maybe_free(cx, v0, v0, t); }\n         case (ty::ty_ivec(?tm)) {\n-            rslt = iter_structural_ty(cx, v0, t, drop_ty);\n-            rslt = maybe_free_ivec_heap_part(rslt.bcx, v0, tm.ty);\n+            auto v1;\n+            if (ty::type_has_dynamic_size(cx.fcx.lcx.ccx.tcx, tm.ty)) {\n+                v1 = cx.build.PointerCast(v0, T_ptr(T_opaque_ivec()));\n+            } else {\n+                v1 = v0;\n+            }\n+\n+            rslt = iter_structural_ty(cx, v1, t, drop_ty);\n+            rslt = maybe_free_ivec_heap_part(rslt.bcx, v1, tm.ty);\n         }\n         case (ty::ty_box(_)) { rslt = decr_refcnt_maybe_free(cx, v0, v0, t); }\n         case (ty::ty_port(_)) {\n@@ -2396,74 +2418,6 @@ fn make_numerical_cmp_glue(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n }\n \n \n-// Returns the length of an interior vector and a pointer to its first\n-// element, in that order.\n-fn get_len_and_data(&@block_ctxt bcx, ValueRef v, ty::t unit_ty) ->\n-   tup(ValueRef, ValueRef, @block_ctxt) {\n-    auto llunitty = type_of_or_i8(bcx, unit_ty);\n-    auto stack_len =\n-        bcx.build.Load(bcx.build.InBoundsGEP(v,\n-                                             [C_int(0),\n-                                              C_uint(abi::ivec_elt_len)]));\n-    auto stack_elem =\n-        bcx.build.InBoundsGEP(v,\n-                              [C_int(0), C_uint(abi::ivec_elt_elems),\n-                               C_int(0)]);\n-    auto on_heap = bcx.build.ICmp(lib::llvm::LLVMIntEQ, stack_len, C_int(0));\n-    auto on_heap_cx = new_sub_block_ctxt(bcx, \"on_heap\");\n-    auto next_cx = new_sub_block_ctxt(bcx, \"next\");\n-    bcx.build.CondBr(on_heap, on_heap_cx.llbb, next_cx.llbb);\n-    auto heap_stub =\n-        on_heap_cx.build.PointerCast(v, T_ptr(T_ivec_heap(llunitty)));\n-    auto heap_ptr =\n-        {\n-            auto v = [C_int(0), C_uint(abi::ivec_heap_stub_elt_ptr)];\n-            on_heap_cx.build.Load(on_heap_cx.build.InBoundsGEP(heap_stub, v))\n-        };\n-    // Check whether the heap pointer is null. If it is, the vector length is\n-    // truly zero.\n-\n-    auto llstubty = T_ivec_heap(llunitty);\n-    auto llheapptrty = struct_elt(llstubty, abi::ivec_heap_stub_elt_ptr);\n-    auto heap_ptr_is_null =\n-        on_heap_cx.build.ICmp(lib::llvm::LLVMIntEQ, heap_ptr,\n-                              C_null(T_ptr(llheapptrty)));\n-    auto zero_len_cx = new_sub_block_ctxt(bcx, \"zero_len\");\n-    auto nonzero_len_cx = new_sub_block_ctxt(bcx, \"nonzero_len\");\n-    on_heap_cx.build.CondBr(heap_ptr_is_null, zero_len_cx.llbb,\n-                            nonzero_len_cx.llbb);\n-    // Technically this context is unnecessary, but it makes this function\n-    // clearer.\n-\n-    auto zero_len = C_int(0);\n-    auto zero_elem = C_null(T_ptr(llunitty));\n-    zero_len_cx.build.Br(next_cx.llbb);\n-    // If we're here, then we actually have a heapified vector.\n-\n-    auto heap_len =\n-        {\n-            auto v = [C_int(0), C_uint(abi::ivec_heap_elt_len)];\n-            auto m = nonzero_len_cx.build.InBoundsGEP(heap_ptr, v);\n-            nonzero_len_cx.build.Load(m)\n-        };\n-    auto heap_elem =\n-        nonzero_len_cx.build.InBoundsGEP(heap_ptr,\n-                                         [C_int(0),\n-                                          C_uint(abi::ivec_heap_elt_elems),\n-                                          C_int(0)]);\n-    nonzero_len_cx.build.Br(next_cx.llbb);\n-    // Now we can figure out the length of `v` and get a pointer to its first\n-    // element.\n-\n-    auto len =\n-        next_cx.build.Phi(T_int(), [stack_len, zero_len, heap_len],\n-                          [bcx.llbb, zero_len_cx.llbb, nonzero_len_cx.llbb]);\n-    auto elem =\n-        next_cx.build.Phi(T_ptr(llunitty), [stack_elem, zero_elem, heap_elem],\n-                          [bcx.llbb, zero_len_cx.llbb, nonzero_len_cx.llbb]);\n-    ret tup(len, elem, next_cx);\n-}\n-\n type val_pair_fn = fn(&@block_ctxt, ValueRef, ValueRef) -> result ;\n \n type val_and_ty_fn = fn(&@block_ctxt, ValueRef, ty::t) -> result ;\n@@ -3017,8 +2971,10 @@ fn memmove_ty(&@block_ctxt cx, ValueRef dst, ValueRef src, &ty::t t) ->\n \n tag copy_action { INIT; DROP_EXISTING; }\n \n+// FIXME: This should copy the contents of the heap part for ivecs.\n fn copy_val(&@block_ctxt cx, copy_action action, ValueRef dst, ValueRef src,\n             &ty::t t) -> result {\n+\n     if (ty::type_is_scalar(cx.fcx.lcx.ccx.tcx, t) ||\n             ty::type_is_native(cx.fcx.lcx.ccx.tcx, t)) {\n         ret res(cx, cx.build.Store(src, dst));\n@@ -3245,8 +3201,18 @@ mod ivec {\n \n     // Returns the length of an interior vector and a pointer to its first\n     // element, in that order.\n-    fn get_len_and_data(&@block_ctxt bcx, ValueRef v, ty::t unit_ty) ->\n-       tup(ValueRef, ValueRef, @block_ctxt) {\n+    fn get_len_and_data(&@block_ctxt bcx, ValueRef orig_v, ty::t unit_ty)\n+            -> tup(ValueRef, ValueRef, @block_ctxt) {\n+        // If this interior vector has dynamic size, we can't assume anything\n+        // about the LLVM type of the value passed in, so we cast it to an\n+        // opaque vector type.\n+        auto v;\n+        if (ty::type_has_dynamic_size(bcx.fcx.lcx.ccx.tcx, unit_ty)) {\n+            v = bcx.build.PointerCast(orig_v, T_ptr(T_opaque_ivec()));\n+        } else {\n+            v = orig_v;\n+        }\n+\n         auto llunitty = type_of_or_i8(bcx, unit_ty);\n         auto stack_len =\n             {\n@@ -4715,7 +4681,7 @@ fn trans_index(&@block_ctxt cx, &span sp, &@ast::expr base, &@ast::expr idx,\n     maybe_name_value(cx.fcx.lcx.ccx, scaled_ix, \"scaled_ix\");\n     auto interior_len_and_data;\n     if (is_interior) {\n-        auto rslt = get_len_and_data(bcx, v, unit_ty);\n+        auto rslt = ivec::get_len_and_data(bcx, v, unit_ty);\n         interior_len_and_data = some(tup(rslt._0, rslt._1));\n         bcx = rslt._2;\n     } else { interior_len_and_data = none; }"}, {"sha": "c2c46cb7e07ebfa0353280d3de1cab4472e46e40", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 33, "deletions": 9, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4918c99f6930a3398a2e816e8d8cde144dad8af6/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4918c99f6930a3398a2e816e8d8cde144dad8af6/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4918c99f6930a3398a2e816e8d8cde144dad8af6", "patch": "@@ -883,31 +883,55 @@ fn type_is_native(&ctxt cx, &t ty) -> bool {\n \n fn type_has_dynamic_size(&ctxt cx, &t ty) -> bool {\n     alt (struct(cx, ty)) {\n+        case (ty_nil) { ret false; }\n+        case (ty_bot) { ret false; }\n+        case (ty_bool) { ret false; }\n+        case (ty_int) { ret false; }\n+        case (ty_float) { ret false; }\n+        case (ty_uint) { ret false; }\n+        case (ty_machine(_)) { ret false; }\n+        case (ty_char) { ret false; }\n+        case (ty_str) { ret false; }\n+        case (ty_istr) { ret false; }\n+        case (ty_tag(_, ?subtys)) {\n+            auto i = 0u;\n+            while (i < vec::len[t](subtys)) {\n+                if (type_has_dynamic_size(cx, subtys.(i))) { ret true; }\n+                i += 1u;\n+            }\n+            ret false;\n+        }\n+        case (ty_box(_)) { ret false; }\n+        case (ty_vec(_)) { ret false; }\n+        case (ty_ivec(?mt)) { ret type_has_dynamic_size(cx, mt.ty); }\n+        case (ty_ptr(_)) { ret false; }\n+        case (ty_port(_)) { ret false; }\n+        case (ty_chan(_)) { ret false; }\n+        case (ty_task) { ret false; }\n         case (ty_tup(?mts)) {\n             auto i = 0u;\n             while (i < vec::len[mt](mts)) {\n                 if (type_has_dynamic_size(cx, mts.(i).ty)) { ret true; }\n                 i += 1u;\n             }\n+            ret false;\n         }\n         case (ty_rec(?fields)) {\n             auto i = 0u;\n             while (i < vec::len[field](fields)) {\n                 if (type_has_dynamic_size(cx, fields.(i).mt.ty)) { ret true; }\n                 i += 1u;\n             }\n+            ret false;\n         }\n-        case (ty_tag(_, ?subtys)) {\n-            auto i = 0u;\n-            while (i < vec::len[t](subtys)) {\n-                if (type_has_dynamic_size(cx, subtys.(i))) { ret true; }\n-                i += 1u;\n-            }\n-        }\n+        case (ty_fn(_,_,_,_,_)) { ret false; }\n+        case (ty_native_fn(_,_,_)) { ret false; }\n+        case (ty_obj(_)) { ret false; }\n+        case (ty_var(_)) { fail \"ty_var in type_has_dynamic_size()\"; }\n         case (ty_param(_)) { ret true; }\n-        case (_) {/* fall through */ }\n+        case (ty_type) { ret false; }\n+        case (ty_native) { ret false; }\n     }\n-    ret false;\n }\n \n fn type_is_integral(&ctxt cx, &t ty) -> bool {"}]}