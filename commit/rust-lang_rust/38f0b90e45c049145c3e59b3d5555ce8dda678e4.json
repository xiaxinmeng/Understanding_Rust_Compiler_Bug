{"sha": "38f0b90e45c049145c3e59b3d5555ce8dda678e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZjBiOTBlNDVjMDQ5MTQ1YzNlNTliM2Q1NTU1Y2U4ZGRhNjc4ZTQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-06-21T16:47:15Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-06-23T13:10:26Z"}, "message": "Move file-reading into walker loop", "tree": {"sha": "0c574fd0e812ede492afd469e8f0d522ad6ca2a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c574fd0e812ede492afd469e8f0d522ad6ca2a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38f0b90e45c049145c3e59b3d5555ce8dda678e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38f0b90e45c049145c3e59b3d5555ce8dda678e4", "html_url": "https://github.com/rust-lang/rust/commit/38f0b90e45c049145c3e59b3d5555ce8dda678e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38f0b90e45c049145c3e59b3d5555ce8dda678e4/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c113a3769de9d2a0fd09c6aa8ccd9aa3d516e915", "url": "https://api.github.com/repos/rust-lang/rust/commits/c113a3769de9d2a0fd09c6aa8ccd9aa3d516e915", "html_url": "https://github.com/rust-lang/rust/commit/c113a3769de9d2a0fd09c6aa8ccd9aa3d516e915"}], "stats": {"total": 103, "additions": 36, "deletions": 67}, "files": [{"sha": "d2f4f07c4853771ee4b917b695fcea9ab413a35f", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -25,9 +25,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n         }\n     }\n \n-    super::walk(path,\n+    super::walk_no_read(path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/etc\"),\n-                &mut |entry, _contents| {\n+                &mut |entry| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions = [\".py\", \".sh\"];"}, {"sha": "1bc27745376cc0e0c65d1f4e984aa6c6276215a2", "filename": "src/tools/tidy/src/errors.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferrors.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -4,25 +4,19 @@\n //! statistics about the error codes.\n \n use std::collections::HashMap;\n-use std::fs::File;\n-use std::io::prelude::*;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let mut contents = String::new();\n     let mut map: HashMap<_, Vec<_>> = HashMap::new();\n     super::walk(path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n-                &mut |entry, _contents| {\n+                &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         if filename != \"error_codes.rs\" {\n             return\n         }\n \n-        contents.truncate(0);\n-        t!(t!(File::open(file)).read_to_string(&mut contents));\n-\n         // In the `register_long_diagnostics!` macro, entries look like this:\n         //\n         // ```"}, {"sha": "ba3132845be3930ecbd5d15bbcef8175a45ff327", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -11,8 +11,7 @@\n \n use std::collections::HashMap;\n use std::fmt;\n-use std::fs::{self, File};\n-use std::io::prelude::*;\n+use std::fs;\n use std::path::Path;\n \n use regex::Regex;\n@@ -58,13 +57,11 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) {\n     let lib_features = get_and_check_lib_features(path, bad, &features);\n     assert!(!lib_features.is_empty());\n \n-    let mut contents = String::new();\n-\n     super::walk_many(&[&path.join(\"test/ui\"),\n                        &path.join(\"test/ui-fulldeps\"),\n                        &path.join(\"test/compile-fail\")],\n                      &mut |path| super::filter_dirs(path),\n-                     &mut |entry, _contents| {\n+                     &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n@@ -75,9 +72,6 @@ pub fn check(path: &Path, bad: &mut bool, verbose: bool) {\n         let filen_underscore = filename.replace('-',\"_\").replace(\".rs\",\"\");\n         let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n \n-        contents.truncate(0);\n-        t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n-\n         for (i, line) in contents.lines().enumerate() {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n@@ -369,20 +363,16 @@ fn get_and_check_lib_features(base_src_path: &Path,\n \n fn map_lib_features(base_src_path: &Path,\n                     mf: &mut dyn FnMut(Result<(&str, Feature), &str>, &Path, usize)) {\n-    let mut contents = String::new();\n     super::walk(base_src_path,\n                 &mut |path| super::filter_dirs(path) || path.ends_with(\"src/test\"),\n-                &mut |entry, _contents| {\n+                &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         if !filename.ends_with(\".rs\") || filename == \"features.rs\" ||\n            filename == \"diagnostic_list.rs\" {\n             return;\n         }\n \n-        contents.truncate(0);\n-        t!(t!(File::open(&file), &file).read_to_string(&mut contents));\n-\n         let mut becoming_feature: Option<(String, Feature)> = None;\n         for (i, line) in contents.lines().enumerate() {\n             macro_rules! err {"}, {"sha": "a0bf0b073541807caecd000775fe90733d079d67", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -67,6 +67,7 @@ fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n+\n fn walk_many(\n     paths: &[&Path], skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)\n ) {\n@@ -76,19 +77,25 @@ fn walk_many(\n }\n \n fn walk(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry, &str)) {\n+    let mut contents = String::new();\n+    walk_no_read(path, skip, &mut |entry| {\n+        contents.clear();\n+        if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n+            contents.clear();\n+        }\n+        f(&entry, &contents);\n+    });\n+}\n+\n+fn walk_no_read(path: &Path, skip: &mut dyn FnMut(&Path) -> bool, f: &mut dyn FnMut(&DirEntry)) {\n     let walker = WalkDir::new(path).into_iter()\n         .filter_entry(|e| !skip(e.path()));\n-    let mut contents = String::new();\n     for entry in walker {\n         if let Ok(entry) = entry {\n             if entry.file_type().is_dir() {\n                 continue;\n             }\n-            contents.clear();\n-            if t!(File::open(entry.path()), entry.path()).read_to_string(&mut contents).is_err() {\n-                contents.clear();\n-            }\n-            f(&entry, &contents);\n+            f(&entry);\n         }\n     }\n }"}, {"sha": "ea92f989ada7d8c4c7d07993ca3520b307969c5e", "filename": "src/tools/tidy/src/libcoretest.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -4,30 +4,22 @@\n //! item. All tests must be written externally in `libcore/tests`.\n \n use std::path::Path;\n-use std::fs::read_to_string;\n \n pub fn check(path: &Path, bad: &mut bool) {\n     let libcore_path = path.join(\"libcore\");\n     super::walk(\n         &libcore_path,\n         &mut |subpath| t!(subpath.strip_prefix(&libcore_path)).starts_with(\"tests\"),\n-        &mut |entry, _contents| {\n+        &mut |entry, contents| {\n             let subpath = entry.path();\n             if let Some(\"rs\") = subpath.extension().and_then(|e| e.to_str()) {\n-                match read_to_string(subpath) {\n-                    Ok(contents) => {\n-                        if contents.contains(\"#[test]\") {\n-                            tidy_error!(\n-                                bad,\n-                                \"{} contains #[test]; libcore tests must be placed inside \\\n-                                `src/libcore/tests/`\",\n-                                subpath.display()\n-                            );\n-                        }\n-                    }\n-                    Err(err) => {\n-                        panic!(\"failed to read file {:?}: {}\", subpath, err);\n-                    }\n+                if contents.contains(\"#[test]\") {\n+                    tidy_error!(\n+                        bad,\n+                        \"{} contains #[test]; libcore tests must be placed inside \\\n+                        `src/libcore/tests/`\",\n+                        subpath.display()\n+                    );\n                 }\n             }\n         },"}, {"sha": "c6bb16318b6ee124b5207056b8277de456446eeb", "filename": "src/tools/tidy/src/pal.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fpal.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -31,8 +31,6 @@\n //! platform-specific cfgs are allowed. Not sure yet how to deal with\n //! this in the long term.\n \n-use std::fs::File;\n-use std::io::Read;\n use std::path::Path;\n use std::iter::Iterator;\n \n@@ -87,30 +85,26 @@ const EXCEPTION_PATHS: &[&str] = &[\n ];\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let mut contents = String::new();\n     // Sanity check that the complex parsing here works.\n     let mut saw_target_arch = false;\n     let mut saw_cfg_bang = false;\n-    super::walk(path, &mut super::filter_dirs, &mut |entry, _contents| {\n+    super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filestr = file.to_string_lossy().replace(\"\\\\\", \"/\");\n         if !filestr.ends_with(\".rs\") { return }\n \n         let is_exception_path = EXCEPTION_PATHS.iter().any(|s| filestr.contains(&**s));\n         if is_exception_path { return }\n \n-        check_cfgs(&mut contents, &file, bad, &mut saw_target_arch, &mut saw_cfg_bang);\n+        check_cfgs(contents, &file, bad, &mut saw_target_arch, &mut saw_cfg_bang);\n     });\n \n     assert!(saw_target_arch);\n     assert!(saw_cfg_bang);\n }\n \n-fn check_cfgs(contents: &mut String, file: &Path,\n+fn check_cfgs(contents: &str, file: &Path,\n               bad: &mut bool, saw_target_arch: &mut bool, saw_cfg_bang: &mut bool) {\n-    contents.truncate(0);\n-    t!(t!(File::open(file), file).read_to_string(contents));\n-\n     // For now it's ok to have platform-specific code after 'mod tests'.\n     let mod_tests_idx = find_test_mod(contents);\n     let contents = &contents[..mod_tests_idx];"}, {"sha": "d994f60b2bb47a22aebb3230fca75ab0c824f83f", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -13,8 +13,6 @@\n //! A number of these checks can be opted-out of with various directives of the form:\n //! `// ignore-tidy-CHECK-NAME`.\n \n-use std::fs::File;\n-use std::io::prelude::*;\n use std::path::Path;\n \n const COLS: usize = 100;\n@@ -109,7 +107,7 @@ enum Directive {\n     Ignore(bool),\n }\n \n-fn contains_ignore_directive(contents: &String, check: &str) -> Directive {\n+fn contains_ignore_directive(contents: &str, check: &str) -> Directive {\n     if contents.contains(&format!(\"// ignore-tidy-{}\", check)) ||\n         contents.contains(&format!(\"# ignore-tidy-{}\", check)) {\n         Directive::Ignore(false)\n@@ -129,8 +127,7 @@ macro_rules! suppressible_tidy_err {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    let mut contents = String::new();\n-    super::walk(path, &mut super::filter_dirs, &mut |entry, _contents| {\n+    super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\"];\n@@ -139,9 +136,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n             return\n         }\n \n-        contents.truncate(0);\n-        t!(t!(File::open(file), file).read_to_string(&mut contents));\n-\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }"}, {"sha": "2c52cecccb5dfc563daa57049a5d1e82067b617f", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38f0b90e45c049145c3e59b3d5555ce8dda678e4/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=38f0b90e45c049145c3e59b3d5555ce8dda678e4", "patch": "@@ -4,10 +4,8 @@ use std::fs;\n use std::path::Path;\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk_many(\n-        &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n-        &mut |_| false,\n-        &mut |entry, _contents| {\n+    for path in &[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")] {\n+        super::walk_no_read(path, &mut |_| false, &mut |entry| {\n             let file_path = entry.path();\n             if let Some(ext) = file_path.extension() {\n                 if ext == \"stderr\" || ext == \"stdout\" {\n@@ -46,6 +44,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     }\n                 }\n             }\n-        },\n-    );\n+        });\n+    }\n }"}]}