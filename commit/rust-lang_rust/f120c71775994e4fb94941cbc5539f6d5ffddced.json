{"sha": "f120c71775994e4fb94941cbc5539f6d5ffddced", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMjBjNzE3NzU5OTRlNGZiOTQ5NDFjYmM1NTM5ZjZkNWZmZGRjZWQ=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-19T06:12:37Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "Tidy. Rename variables.", "tree": {"sha": "28bb67b7ff32a82d94b4012c1fb35635b38d3ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28bb67b7ff32a82d94b4012c1fb35635b38d3ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f120c71775994e4fb94941cbc5539f6d5ffddced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f120c71775994e4fb94941cbc5539f6d5ffddced", "html_url": "https://github.com/rust-lang/rust/commit/f120c71775994e4fb94941cbc5539f6d5ffddced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f120c71775994e4fb94941cbc5539f6d5ffddced/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c3e8b0a1c15d4cb7315a7067c19901c2cf66e0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c3e8b0a1c15d4cb7315a7067c19901c2cf66e0c", "html_url": "https://github.com/rust-lang/rust/commit/1c3e8b0a1c15d4cb7315a7067c19901c2cf66e0c"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "763e92b69baf03ceb86b7cd38ccf452985cdca2c", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=f120c71775994e4fb94941cbc5539f6d5ffddced", "patch": "@@ -37,11 +37,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.write_ty(pat.id, expected);\n             }\n             PatKind::Lit(ref lt) => {\n-                let expr_t = self.check_expr(&lt);\n+                let ty = self.check_expr(&lt);\n \n                 // Byte string patterns behave the same way as array patterns\n                 // They can denote both statically and dynamically sized byte arrays\n-                let mut pat_ty = expr_t;\n+                let mut pat_ty = ty;\n                 if let hir::ExprLit(ref lt) = lt.node {\n                     if let ast::LitKind::ByteStr(_) = lt.node {\n                         let expected_ty = self.structurally_resolved_type(pat.span, expected);\n@@ -62,7 +62,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 // relation at all but rather that there exists a LUB (so\n                 // that they can be compared). However, in practice,\n                 // constants are always scalars or strings.  For scalars\n-                // subtyping is irrelevant, and for strings `expr_t` is\n+                // subtyping is irrelevant, and for strings `ty` is\n                 // type is `&'static str`, so if we say that\n                 //\n                 //     &'static str <: expected"}, {"sha": "a8c8a10dc568e140cf2f1d99ce1fac58e642ae3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f120c71775994e4fb94941cbc5539f6d5ffddced", "patch": "@@ -3241,19 +3241,19 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                          base_expr: &'gcx Option<P<hir::Expr>>) -> Ty<'tcx>\n     {\n         // Find the relevant variant\n-        let (variant, expr_t) = if let Some(variant_ty) = self.check_struct_path(path, expr.id,\n-                                                                                  expr.span) {\n+        let (variant, struct_ty) = if let Some(variant_ty) = self.check_struct_path(path, expr.id,\n+                                                                                    expr.span) {\n             variant_ty\n         } else {\n             self.check_struct_fields_on_error(fields, base_expr);\n             return self.tcx().types.err;\n         };\n \n-        self.check_expr_struct_fields(expr_t, path.span, variant, fields,\n+        self.check_expr_struct_fields(struct_ty, path.span, variant, fields,\n                                       base_expr.is_none());\n         if let &Some(ref base_expr) = base_expr {\n-            self.check_expr_has_type(base_expr, expr_t);\n-            match expr_t.sty {\n+            self.check_expr_has_type(base_expr, struct_ty);\n+            match struct_ty.sty {\n                 ty::TyStruct(adt, substs) => {\n                     self.tables.borrow_mut().fru_field_types.insert(\n                         expr.id,\n@@ -3270,8 +3270,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n         }\n-        self.require_type_is_sized(expr_t, expr.span, traits::StructInitializerSized);\n-        expr_t\n+        self.require_type_is_sized(struct_ty, expr.span, traits::StructInitializerSized);\n+        struct_ty\n     }\n \n \n@@ -3881,15 +3881,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n           hir::StmtExpr(ref expr, id) => {\n             node_id = id;\n             // Check with expected type of ()\n-            let expr_t = self.check_expr_has_type(&expr, self.tcx.mk_nil());\n-            saw_bot = saw_bot || self.type_var_diverges(expr_t);\n-            saw_err = saw_err || expr_t.references_error();\n+            let ty = self.check_expr_has_type(&expr, self.tcx.mk_nil());\n+            saw_bot = saw_bot || self.type_var_diverges(ty);\n+            saw_err = saw_err || ty.references_error();\n           }\n           hir::StmtSemi(ref expr, id) => {\n             node_id = id;\n-            let expr_t = self.check_expr(&expr);\n-            saw_bot |= self.type_var_diverges(expr_t);\n-            saw_err |= expr_t.references_error();\n+            let ty = self.check_expr(&expr);\n+            saw_bot |= self.type_var_diverges(ty);\n+            saw_err |= ty.references_error();\n           }\n         }\n         if saw_bot {"}, {"sha": "411bd7e7b5ca121a60f47ce1b2ff602cb83ce8e8", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f120c71775994e4fb94941cbc5539f6d5ffddced/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=f120c71775994e4fb94941cbc5539f6d5ffddced", "patch": "@@ -32,7 +32,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.check_overloaded_binop(expr, lhs_expr, lhs_ty, rhs_expr, op, IsAssign::Yes);\n         let rhs_ty = self.resolve_type_vars_with_obligations(rhs_ty);\n \n-        let ty = if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var() && is_builtin_binop(lhs_ty, rhs_ty, op) {\n+        let ty = if !lhs_ty.is_ty_var() && !rhs_ty.is_ty_var()\n+                    && is_builtin_binop(lhs_ty, rhs_ty, op) {\n             self.enforce_builtin_binop_types(lhs_expr, lhs_ty, rhs_expr, rhs_ty, op);\n             self.tcx.mk_nil()\n         } else {"}]}