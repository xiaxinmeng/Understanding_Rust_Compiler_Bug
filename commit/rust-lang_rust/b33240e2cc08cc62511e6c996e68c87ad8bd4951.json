{"sha": "b33240e2cc08cc62511e6c996e68c87ad8bd4951", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMzI0MGUyY2MwOGNjNjI1MTFlNmM5OTZlNjhjODdhZDhiZDQ5NTE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-06-02T21:25:03Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-08T14:42:48Z"}, "message": "trans::collector: Also consider initializers of const items.", "tree": {"sha": "37085742c8962b351a784f374356664e21915f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37085742c8962b351a784f374356664e21915f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33240e2cc08cc62511e6c996e68c87ad8bd4951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33240e2cc08cc62511e6c996e68c87ad8bd4951", "html_url": "https://github.com/rust-lang/rust/commit/b33240e2cc08cc62511e6c996e68c87ad8bd4951", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33240e2cc08cc62511e6c996e68c87ad8bd4951/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab80f7467087289931bf5eda07cadc70922ccc94", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab80f7467087289931bf5eda07cadc70922ccc94", "html_url": "https://github.com/rust-lang/rust/commit/ab80f7467087289931bf5eda07cadc70922ccc94"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "f37c117cb0f5b3fc57e42b6bb5de999035f354a4", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b33240e2cc08cc62511e6c996e68c87ad8bd4951/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33240e2cc08cc62511e6c996e68c87ad8bd4951/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=b33240e2cc08cc62511e6c996e68c87ad8bd4951", "patch": "@@ -205,6 +205,7 @@ use rustc::mir::visit::Visitor as MirVisitor;\n use syntax::abi::Abi;\n use errors;\n use syntax_pos::DUMMY_SP;\n+use syntax::ast::NodeId;\n use base::custom_coerce_unsize_info;\n use context::SharedCrateContext;\n use common::{fulfill_obligation, normalize_and_test_predicates, type_is_sized};\n@@ -349,17 +350,14 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n                 || format!(\"Could not find MIR for static: {:?}\", def_id));\n \n             let empty_substs = scx.empty_substs_for_def_id(def_id);\n-            let mut visitor = MirNeighborCollector {\n+            let visitor = MirNeighborCollector {\n                 scx: scx,\n                 mir: &mir,\n                 output: &mut neighbors,\n                 param_substs: empty_substs\n             };\n \n-            visitor.visit_mir(&mir);\n-            for promoted in &mir.promoted {\n-                visitor.visit_mir(promoted);\n-            }\n+            visit_mir_and_promoted(visitor, &mir);\n         }\n         TransItem::Fn(instance) => {\n             // Keep track of the monomorphization recursion depth\n@@ -372,17 +370,14 @@ fn collect_items_rec<'a, 'tcx: 'a>(scx: &SharedCrateContext<'a, 'tcx>,\n             let mir = errors::expect(scx.sess().diagnostic(), scx.get_mir(instance.def),\n                 || format!(\"Could not find MIR for function: {}\", instance));\n \n-            let mut visitor = MirNeighborCollector {\n+            let visitor = MirNeighborCollector {\n                 scx: scx,\n                 mir: &mir,\n                 output: &mut neighbors,\n                 param_substs: instance.substs\n             };\n \n-            visitor.visit_mir(&mir);\n-            for promoted in &mir.promoted {\n-                visitor.visit_mir(promoted);\n-            }\n+            visit_mir_and_promoted(visitor, &mir);\n         }\n     }\n \n@@ -467,17 +462,14 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                                        &substs.func_substs);\n                 let concrete_substs = self.scx.tcx().erase_regions(&concrete_substs);\n \n-                let mut visitor = MirNeighborCollector {\n+                let visitor = MirNeighborCollector {\n                     scx: self.scx,\n                     mir: &mir,\n                     output: self.output,\n                     param_substs: concrete_substs\n                 };\n \n-                visitor.visit_mir(&mir);\n-                for promoted in &mir.promoted {\n-                    visitor.visit_mir(promoted);\n-                }\n+                visit_mir_and_promoted(visitor, &mir);\n             }\n             // When doing an cast from a regular pointer to a fat pointer, we\n             // have to instantiate all methods of the trait being cast to, so we\n@@ -1087,7 +1079,6 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemTy(..)          |\n             hir::ItemDefaultImpl(..) |\n             hir::ItemTrait(..)       |\n-            hir::ItemConst(..)       |\n             hir::ItemMod(..)         => {\n                 // Nothing to do, just keep recursing...\n             }\n@@ -1124,6 +1115,12 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                                         self.scx.tcx().map.local_def_id(item.id)));\n                 self.output.push(TransItem::Static(item.id));\n             }\n+            hir::ItemConst(..) => {\n+                debug!(\"RootCollector: ItemConst({})\",\n+                       def_id_to_string(self.scx.tcx(),\n+                                        self.scx.tcx().map.local_def_id(item.id)));\n+                add_roots_for_const_item(self.scx, item.id, self.output);\n+            }\n             hir::ItemFn(_, _, _, _, ref generics, _) => {\n                 if !generics.is_type_parameterized() {\n                     let def_id = self.scx.tcx().map.local_def_id(item.id);\n@@ -1243,6 +1240,38 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+// There are no translation items for constants themselves but their\n+// initializers might still contain something that produces translation items,\n+// such as cast that introduce a new vtable.\n+fn add_roots_for_const_item<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n+                                      const_item_node_id: NodeId,\n+                                      output: &mut Vec<TransItem<'tcx>>)\n+{\n+    let def_id = scx.tcx().map.local_def_id(const_item_node_id);\n+\n+    // Scan the MIR in order to find function calls, closures, and\n+    // drop-glue\n+    let mir = errors::expect(scx.sess().diagnostic(), scx.get_mir(def_id),\n+        || format!(\"Could not find MIR for const: {:?}\", def_id));\n+\n+    let empty_substs = scx.empty_substs_for_def_id(def_id);\n+    let visitor = MirNeighborCollector {\n+        scx: scx,\n+        mir: &mir,\n+        output: output,\n+        param_substs: empty_substs\n+    };\n+\n+    visit_mir_and_promoted(visitor, &mir);\n+}\n+\n+fn visit_mir_and_promoted<'tcx, V: MirVisitor<'tcx>>(mut visitor: V, mir: &mir::Mir<'tcx>) {\n+    visitor.visit_mir(&mir);\n+    for promoted in &mir.promoted {\n+        visitor.visit_mir(promoted);\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum TransItemState {\n     PredictedAndGenerated,"}]}