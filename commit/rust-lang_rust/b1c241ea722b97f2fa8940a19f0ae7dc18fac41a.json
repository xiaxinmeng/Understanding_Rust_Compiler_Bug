{"sha": "b1c241ea722b97f2fa8940a19f0ae7dc18fac41a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYzI0MWVhNzIyYjk3ZjJmYTg5NDBhMTlmMGFlN2RjMThmYWM0MWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T23:10:19Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-08-05T23:10:19Z"}, "message": "Combine list-like attributes", "tree": {"sha": "2c46f849d6e50002684ace729bd7f999333ded3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c46f849d6e50002684ace729bd7f999333ded3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a", "html_url": "https://github.com/rust-lang/rust/commit/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ebfd122cffcc3c8d0bccd4a9c4b7a039e27a93", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ebfd122cffcc3c8d0bccd4a9c4b7a039e27a93", "html_url": "https://github.com/rust-lang/rust/commit/19ebfd122cffcc3c8d0bccd4a9c4b7a039e27a93"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "9433cfcadb924cc27d1b06dd56b2a1737064f2d5", "filename": "src/attr.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1c241ea722b97f2fa8940a19f0ae7dc18fac41a/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=b1c241ea722b97f2fa8940a19f0ae7dc18fac41a", "patch": "@@ -61,15 +61,22 @@ fn get_derive_spans<'a>(attr: &ast::Attribute) -> Option<Vec<Span>> {\n fn argument_shape(\n     left: usize,\n     right: usize,\n+    combine: bool,\n     shape: Shape,\n     context: &RewriteContext,\n ) -> Option<Shape> {\n     match context.config.indent_style() {\n-        IndentStyle::Block => Some(\n-            shape\n-                .block_indent(context.config.tab_spaces())\n-                .with_max_width(context.config),\n-        ),\n+        IndentStyle::Block => {\n+            if combine {\n+                shape.offset_left(left)\n+            } else {\n+                Some(\n+                    shape\n+                        .block_indent(context.config.tab_spaces())\n+                        .with_max_width(context.config),\n+                )\n+            }\n+        }\n         IndentStyle::Visual => shape\n             .visual_indent(0)\n             .shrink_left(left)\n@@ -87,7 +94,7 @@ fn format_derive(\n     result.push_str(prefix);\n     result.push_str(\"[derive(\");\n \n-    let argument_shape = argument_shape(10 + prefix.len(), 2, shape, context)?;\n+    let argument_shape = argument_shape(10 + prefix.len(), 2, false, shape, context)?;\n     let item_str = format_arg_list(\n         derive_args.iter(),\n         |_| DUMMY_SP.lo(),\n@@ -99,6 +106,7 @@ fn format_derive(\n         // 10 = \"[derive()]\", 3 = \"()\" and \"]\"\n         shape.offset_left(10 + prefix.len())?.sub_width(3)?,\n         None,\n+        false,\n     )?;\n \n     result.push_str(&item_str);\n@@ -214,9 +222,29 @@ impl Rewrite for ast::MetaItem {\n                 // it's close enough).\n                 let snippet = snippet[..snippet.len() - 2].trim();\n                 let trailing_comma = if snippet.ends_with(',') { \",\" } else { \"\" };\n+                let combine = list.len() == 1 && match list[0].node {\n+                    ast::NestedMetaItemKind::Literal(..) => false,\n+                    ast::NestedMetaItemKind::MetaItem(ref inner_meta_item) => {\n+                        match inner_meta_item.node {\n+                            ast::MetaItemKind::List(..) => rewrite_path(\n+                                context,\n+                                PathContext::Type,\n+                                None,\n+                                &inner_meta_item.ident,\n+                                shape,\n+                            ).map_or(false, |s| s.len() + path.len() + 2 <= shape.width),\n+                            _ => false,\n+                        }\n+                    }\n+                };\n \n-                let argument_shape =\n-                    argument_shape(path.len() + 1, 2 + trailing_comma.len(), shape, context)?;\n+                let argument_shape = argument_shape(\n+                    path.len() + 1,\n+                    2 + trailing_comma.len(),\n+                    combine,\n+                    shape,\n+                    context,\n+                )?;\n                 let item_str = format_arg_list(\n                     list.iter(),\n                     |nested_meta_item| nested_meta_item.span.lo(),\n@@ -230,6 +258,7 @@ impl Rewrite for ast::MetaItem {\n                         .offset_left(path.len())?\n                         .sub_width(3 + trailing_comma.len())?,\n                     Some(context.config.width_heuristics().fn_call_width),\n+                    combine,\n                 )?;\n \n                 let indent = if item_str.starts_with('\\n') {\n@@ -268,6 +297,7 @@ fn format_arg_list<I, T, F1, F2, F3>(\n     shape: Shape,\n     one_line_shape: Shape,\n     one_line_limit: Option<usize>,\n+    combine: bool,\n ) -> Option<String>\n where\n     I: Iterator<Item = T>,\n@@ -311,6 +341,7 @@ where\n \n     let one_line_budget = one_line_shape.width;\n     if context.config.indent_style() == IndentStyle::Visual\n+        || combine\n         || (!item_str.contains('\\n') && item_str.len() <= one_line_budget)\n     {\n         Some(item_str)"}]}