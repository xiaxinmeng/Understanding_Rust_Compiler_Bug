{"sha": "9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZjdhYjY4MGMzMzhlNjI2NzlhZDc1ZWVlMGUxYTM1N2NlMDdmYTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T15:54:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-02T15:55:08Z"}, "message": "Carry over attributes in extract_struct_from_enum_variant", "tree": {"sha": "7f204234ba4775ab8c0f07a8480a4cc48e9a2709", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f204234ba4775ab8c0f07a8480a4cc48e9a2709"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "html_url": "https://github.com/rust-lang/rust/commit/9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ff7ab680c338e62679ad75eee0e1a357ce07fa8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc4321c8febf5cf3a4204e2cb444fd453350e4", "html_url": "https://github.com/rust-lang/rust/commit/f3dc4321c8febf5cf3a4204e2cb444fd453350e4"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "6ce417086d9ebb33e355afa2dba8eedd542da6ae", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ff7ab680c338e62679ad75eee0e1a357ce07fa8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ff7ab680c338e62679ad75eee0e1a357ce07fa8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=9ff7ab680c338e62679ad75eee0e1a357ce07fa8", "patch": "@@ -15,8 +15,12 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     algo::find_node_at_offset,\n-    ast::{self, make, AstNode, GenericParamsOwner, NameOwner, TypeBoundsOwner, VisibilityOwner},\n-    ted, SyntaxNode, T,\n+    ast::{\n+        self, make, AstNode, AttrsOwner, GenericParamsOwner, NameOwner, TypeBoundsOwner,\n+        VisibilityOwner,\n+    },\n+    ted::{self, Position},\n+    SyntaxNode, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -186,8 +190,16 @@ fn create_struct_def(\n     };\n \n     // FIXME: This uses all the generic params of the enum, but the variant might not use all of them.\n-    make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n-        .clone_for_update()\n+    let strukt =\n+        make::struct_(enum_.visibility(), variant_name, enum_.generic_param_list(), field_list)\n+            .clone_for_update();\n+\n+    // copy attributes\n+    ted::insert_all(\n+        Position::first_child_of(strukt.syntax()),\n+        enum_.attrs().map(|it| it.syntax().clone_for_update().into()).collect(),\n+    );\n+    strukt\n }\n \n fn update_variant(variant: &ast::Variant, generic: Option<ast::GenericParamList>) -> Option<()> {\n@@ -336,7 +348,7 @@ enum A { One(One) }\"#,\n     }\n \n     #[test]\n-    fn test_extract_struct_keeps_generics() {\n+    fn test_extract_struct_carries_over_generics() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r\"enum En<T> { Var { a: T$0 } }\",\n@@ -346,6 +358,21 @@ enum En<T> { Var(Var<T>) }\"#,\n         );\n     }\n \n+    #[test]\n+    fn test_extract_struct_carries_over_attributes() {\n+        check_assist(\n+            extract_struct_from_enum_variant,\n+            r#\"#[derive(Debug)]\n+#[derive(Clone)]\n+enum Enum { Variant{ field: u32$0 } }\"#,\n+            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ pub field: u32 }\n+\n+#[derive(Debug)]\n+#[derive(Clone)]\n+enum Enum { Variant(Variant) }\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_extract_struct_keep_comments_and_attrs_one_field_named() {\n         check_assist("}]}