{"sha": "4e27ed3af19e604d7b65e130145fcecdc69fba7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjdlZDNhZjE5ZTYwNGQ3YjY1ZTEzMDE0NWZjZWNkYzY5ZmJhN2E=", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2020-12-19T20:02:01Z"}, "committer": {"name": "KodrAus", "email": "kodraus@hey.com", "date": "2021-01-17T02:10:39Z"}, "message": "Add benchmark and fast path for BufReader::read_exact", "tree": {"sha": "43137963aafb15fe3f7579ac8b4dda6c3433ef2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43137963aafb15fe3f7579ac8b4dda6c3433ef2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e27ed3af19e604d7b65e130145fcecdc69fba7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e27ed3af19e604d7b65e130145fcecdc69fba7a", "html_url": "https://github.com/rust-lang/rust/commit/4e27ed3af19e604d7b65e130145fcecdc69fba7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e27ed3af19e604d7b65e130145fcecdc69fba7a/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6518427e11e6dd13d6f39663b82eb4f810ca05", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6518427e11e6dd13d6f39663b82eb4f810ca05", "html_url": "https://github.com/rust-lang/rust/commit/8a6518427e11e6dd13d6f39663b82eb4f810ca05"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "8bae3da1273eb62b71719d1f5d67189846d9a225", "filename": "library/std/src/io/buffered/bufreader.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufreader.rs?ref=4e27ed3af19e604d7b65e130145fcecdc69fba7a", "patch": "@@ -271,6 +271,20 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n+    // Small read_exacts from a BufReader are extremely common when used with a deserializer.\n+    // The default implementation calls read in a loop, which results in surprisingly poor code\n+    // generation for the common path where the buffer has enough bytes to fill the passed-in\n+    // buffer.\n+    fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n+        if self.buffer().len() >= buf.len() {\n+            buf.copy_from_slice(&self.buffer()[..buf.len()]);\n+            self.consume(buf.len());\n+            return Ok(());\n+        }\n+\n+        crate::io::default_read_exact(self, buf)\n+    }\n+\n     fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.pos == self.cap && total_len >= self.buf.len() {"}, {"sha": "f6c2b499567abf9b245c42903ec5c98bd10cf780", "filename": "library/std/src/io/buffered/tests.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Ftests.rs?ref=4e27ed3af19e604d7b65e130145fcecdc69fba7a", "patch": "@@ -443,6 +443,18 @@ fn bench_buffered_reader(b: &mut test::Bencher) {\n     b.iter(|| BufReader::new(io::empty()));\n }\n \n+#[bench]\n+fn bench_buffered_reader_small_reads(b: &mut test::Bencher) {\n+    let data = (0..u8::MAX).cycle().take(1024 * 4).collect::<Vec<_>>();\n+    b.iter(|| {\n+        let mut reader = BufReader::new(&data[..]);\n+        let mut buf = [0u8; 4];\n+        for _ in 0..1024 {\n+            reader.read_exact(&mut buf).unwrap();\n+        }\n+    });\n+}\n+\n #[bench]\n fn bench_buffered_writer(b: &mut test::Bencher) {\n     b.iter(|| BufWriter::new(io::sink()));"}, {"sha": "c87a56586c65e61aaf2a6a999b28bf513f2f7713", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e27ed3af19e604d7b65e130145fcecdc69fba7a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=4e27ed3af19e604d7b65e130145fcecdc69fba7a", "patch": "@@ -416,6 +416,25 @@ where\n     write(buf)\n }\n \n+pub(crate) fn default_read_exact<R: Read + ?Sized>(this: &mut R, mut buf: &mut [u8]) -> Result<()> {\n+    while !buf.is_empty() {\n+        match this.read(buf) {\n+            Ok(0) => break,\n+            Ok(n) => {\n+                let tmp = buf;\n+                buf = &mut tmp[n..];\n+            }\n+            Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n+            Err(e) => return Err(e),\n+        }\n+    }\n+    if !buf.is_empty() {\n+        Err(Error::new(ErrorKind::UnexpectedEof, \"failed to fill whole buffer\"))\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n /// The `Read` trait allows for reading bytes from a source.\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n@@ -766,23 +785,8 @@ pub trait Read {\n     /// }\n     /// ```\n     #[stable(feature = \"read_exact\", since = \"1.6.0\")]\n-    fn read_exact(&mut self, mut buf: &mut [u8]) -> Result<()> {\n-        while !buf.is_empty() {\n-            match self.read(buf) {\n-                Ok(0) => break,\n-                Ok(n) => {\n-                    let tmp = buf;\n-                    buf = &mut tmp[n..];\n-                }\n-                Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n-                Err(e) => return Err(e),\n-            }\n-        }\n-        if !buf.is_empty() {\n-            Err(Error::new(ErrorKind::UnexpectedEof, \"failed to fill whole buffer\"))\n-        } else {\n-            Ok(())\n-        }\n+    fn read_exact(&mut self, buf: &mut [u8]) -> Result<()> {\n+        default_read_exact(self, buf)\n     }\n \n     /// Creates a \"by reference\" adaptor for this instance of `Read`."}]}