{"sha": "4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNzRmYjFkODk2Y2U1YTFjOGM0YzRiZjczYWQyOTQwZmI4NmFiYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T13:03:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T13:03:02Z"}, "message": "Nicer API for attrs", "tree": {"sha": "1d4d51e200305e5adee78b28a0f86343d3bab0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d4d51e200305e5adee78b28a0f86343d3bab0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "html_url": "https://github.com/rust-lang/rust/commit/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1956d57ed4896bb29dfcfaed2a5291ec69251f52", "url": "https://api.github.com/repos/rust-lang/rust/commits/1956d57ed4896bb29dfcfaed2a5291ec69251f52", "html_url": "https://github.com/rust-lang/rust/commit/1956d57ed4896bb29dfcfaed2a5291ec69251f52"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "53456fc08508a57a27a65589adce88dc02a5f3eb", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "patch": "@@ -4,7 +4,6 @@ use std::{ops, sync::Arc};\n \n use hir_expand::{either::Either, hygiene::Hygiene, AstId, Source};\n use mbe::ast_to_token_tree;\n-use ra_cfg::CfgOptions;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n     SmolStr,\n@@ -85,17 +84,8 @@ impl Attrs {\n         Attrs { entries }\n     }\n \n-    pub fn has_atom(&self, atom: &str) -> bool {\n-        self.iter().any(|it| it.is_simple_atom(atom))\n-    }\n-\n-    pub fn find_string_value(&self, key: &str) -> Option<SmolStr> {\n-        self.iter().filter(|attr| attr.is_simple_atom(key)).find_map(|attr| {\n-            match attr.input.as_ref()? {\n-                AttrInput::Literal(it) => Some(it.clone()),\n-                _ => None,\n-            }\n-        })\n+    pub fn by_key(&self, key: &'static str) -> AttrQuery<'_> {\n+        AttrQuery { attrs: self, key }\n     }\n }\n \n@@ -128,25 +118,37 @@ impl Attr {\n \n         Some(Attr { path, input })\n     }\n+}\n+\n+pub struct AttrQuery<'a> {\n+    attrs: &'a Attrs,\n+    key: &'static str,\n+}\n \n-    pub fn is_simple_atom(&self, name: &str) -> bool {\n-        // FIXME: Avoid cloning\n-        self.path.as_ident().map_or(false, |s| s.to_string() == name)\n+impl<'a> AttrQuery<'a> {\n+    pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n+        self.attrs().filter_map(|attr| match attr.input.as_ref()? {\n+            AttrInput::TokenTree(it) => Some(it),\n+            _ => None,\n+        })\n     }\n \n-    // FIXME: handle cfg_attr :-)\n-    pub fn as_cfg(&self) -> Option<&Subtree> {\n-        if !self.is_simple_atom(\"cfg\") {\n-            return None;\n-        }\n-        match &self.input {\n-            Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n+    pub fn string_value(self) -> Option<&'a SmolStr> {\n+        self.attrs().find_map(|attr| match attr.input.as_ref()? {\n+            AttrInput::Literal(it) => Some(it),\n             _ => None,\n-        }\n+        })\n+    }\n+\n+    pub fn exists(self) -> bool {\n+        self.attrs().next().is_some()\n     }\n \n-    pub(crate) fn is_cfg_enabled(&self, cfg_options: &CfgOptions) -> Option<bool> {\n-        cfg_options.is_cfg_enabled(self.as_cfg()?)\n+    fn attrs(self) -> impl Iterator<Item = &'a Attr> {\n+        let key = self.key;\n+        self.attrs\n+            .iter()\n+            .filter(move |attr| attr.path.as_ident().map_or(false, |s| s.to_string() == key))\n     }\n }\n "}, {"sha": "3b9fb0328563225e1a72e1310872c78b9dd1ab99", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "patch": "@@ -113,7 +113,7 @@ impl LangItems {\n         T: Into<AttrDefId> + Copy,\n     {\n         let attrs = db.attrs(item.into());\n-        if let Some(lang_item_name) = attrs.find_string_value(\"lang\") {\n+        if let Some(lang_item_name) = attrs.by_key(\"lang\").string_value() {\n             self.items.entry(lang_item_name.clone()).or_insert_with(|| constructor(item));\n         }\n     }"}, {"sha": "7a5f90327900fe59d27f586e82771566ddbf9b6b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "patch": "@@ -599,8 +599,8 @@ where\n     }\n \n     fn collect_module(&mut self, module: &raw::ModuleData, attrs: &Attrs) {\n-        let path_attr = attrs.find_string_value(\"path\");\n-        let is_macro_use = attrs.has_atom(\"macro_use\");\n+        let path_attr = attrs.by_key(\"path\").string_value();\n+        let is_macro_use = attrs.by_key(\"macro_use\").exists();\n         match module {\n             // inline module, just recurse\n             raw::ModuleData::Definition { name, items, ast_id } => {\n@@ -612,7 +612,7 @@ where\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n-                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr.as_ref()),\n+                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n                 }\n                 .collect(&*items);\n                 if is_macro_use {\n@@ -626,7 +626,7 @@ where\n                     self.def_collector.db,\n                     self.file_id,\n                     name,\n-                    path_attr.as_ref(),\n+                    path_attr,\n                 ) {\n                     Ok((file_id, mod_dir)) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -796,7 +796,11 @@ where\n     }\n \n     fn is_cfg_enabled(&self, attrs: &Attrs) -> bool {\n-        attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n+        // FIXME: handle cfg_attr :-)\n+        attrs\n+            .by_key(\"cfg\")\n+            .tt_values()\n+            .all(|tt| self.def_collector.cfg_options.is_cfg_enabled(tt) != Some(false))\n     }\n }\n "}, {"sha": "bac3f7582fdb94195466256e52867d939dc90e17", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=4b74fb1d896ce5a1c8c4c4bf73ad2940fb86abc5", "patch": "@@ -288,7 +288,7 @@ impl Completions {\n }\n \n fn is_deprecated(node: impl HasAttrs, db: &impl HirDatabase) -> bool {\n-    node.attrs(db).has_atom(\"deprecated\")\n+    node.attrs(db).by_key(\"deprecated\").exists()\n }\n \n fn has_non_default_type_params(def: hir::GenericDef, db: &db::RootDatabase) -> bool {"}]}