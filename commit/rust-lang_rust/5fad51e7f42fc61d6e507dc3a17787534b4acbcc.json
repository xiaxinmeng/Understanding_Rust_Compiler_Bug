{"sha": "5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYWQ1MWU3ZjQyZmM2MWQ2ZTUwN2RjM2ExNzc4NzUzNGI0YWNiY2M=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-04T09:54:57Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-01-04T09:54:57Z"}, "message": "typeck::coherence::builtin - sort impls in the DefId order\n\nthis makes error messages consistent across architectures", "tree": {"sha": "62e584a2d6186ad873f0c6c7a2495c3474498a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e584a2d6186ad873f0c6c7a2495c3474498a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "html_url": "https://github.com/rust-lang/rust/commit/5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fad51e7f42fc61d6e507dc3a17787534b4acbcc/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cab2931c89fe09dfa295445ad491c2ece7e7df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cab2931c89fe09dfa295445ad491c2ece7e7df1", "html_url": "https://github.com/rust-lang/rust/commit/4cab2931c89fe09dfa295445ad491c2ece7e7df1"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "ba95a17989165685724fa5e4a384a9dde48c125a", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5fad51e7f42fc61d6e507dc3a17787534b4acbcc/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fad51e7f42fc61d6e507dc3a17787534b4acbcc/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "patch": "@@ -27,34 +27,34 @@ use rustc::hir::map as hir_map;\n use rustc::hir::{self, ItemImpl};\n \n pub fn check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    if let Some(drop_trait) = tcx.lang_items.drop_trait() {\n-        tcx.lookup_trait_def(drop_trait)\n-            .for_each_impl(tcx, |impl_did| visit_implementation_of_drop(tcx, impl_did));\n-    }\n-\n-    if let Some(copy_trait) = tcx.lang_items.copy_trait() {\n-        tcx.lookup_trait_def(copy_trait)\n-            .for_each_impl(tcx, |impl_did| visit_implementation_of_copy(tcx, impl_did));\n-    }\n-\n-    if let Some(coerce_unsized_trait) = tcx.lang_items.coerce_unsized_trait() {\n-        let unsize_trait = match tcx.lang_items.require(UnsizeTraitLangItem) {\n-            Ok(id) => id,\n-            Err(err) => {\n-                tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n-            }\n-        };\n+    check_trait(tcx, tcx.lang_items.drop_trait(), visit_implementation_of_drop);\n+    check_trait(tcx, tcx.lang_items.copy_trait(), visit_implementation_of_copy);\n+    check_trait(\n+        tcx,\n+        tcx.lang_items.coerce_unsized_trait(),\n+        visit_implementation_of_coerce_unsized);\n+}\n \n-        tcx.lookup_trait_def(coerce_unsized_trait).for_each_impl(tcx, |impl_did| {\n-            visit_implementation_of_coerce_unsized(tcx,\n-                                                   impl_did,\n-                                                   unsize_trait,\n-                                                   coerce_unsized_trait)\n+fn check_trait<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                            trait_def_id: Option<DefId>,\n+                            mut f: F)\n+    where F: FnMut(TyCtxt<'a, 'tcx, 'tcx>, DefId, DefId)\n+{\n+    if let Some(trait_def_id) = trait_def_id {\n+        let mut impls = vec![];\n+        tcx.lookup_trait_def(trait_def_id).for_each_impl(tcx, |did| {\n+            impls.push(did);\n         });\n+        impls.sort();\n+        for impl_def_id in impls {\n+            f(tcx, trait_def_id, impl_def_id);\n+        }\n     }\n }\n \n-fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                          _drop_did: DefId,\n+                                          impl_did: DefId) {\n     let items = tcx.associated_item_def_ids(impl_did);\n     if items.is_empty() {\n         // We'll error out later. For now, just don't ICE.\n@@ -96,7 +96,9 @@ fn visit_implementation_of_drop<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n     }\n }\n \n-fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did: DefId) {\n+fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                          _copy_did: DefId,\n+                                          impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: impl_did={:?}\", impl_did);\n \n     let impl_node_id = if let Some(n) = tcx.map.as_local_node_id(impl_did) {\n@@ -166,12 +168,18 @@ fn visit_implementation_of_copy<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, impl_did:\n }\n \n fn visit_implementation_of_coerce_unsized<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                    impl_did: DefId,\n-                                                    unsize_trait: DefId,\n-                                                    coerce_unsized_trait: DefId) {\n+                                                    coerce_unsized_trait: DefId,\n+                                                    impl_did: DefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\",\n            impl_did);\n \n+    let unsize_trait = match tcx.lang_items.require(UnsizeTraitLangItem) {\n+        Ok(id) => id,\n+        Err(err) => {\n+            tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n+        }\n+    };\n+\n     let impl_node_id = if let Some(n) = tcx.map.as_local_node_id(impl_did) {\n         n\n     } else {"}, {"sha": "81a60a9dd3099ad0aedfb3d4014788f8f77fc49f", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5fad51e7f42fc61d6e507dc3a17787534b4acbcc/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fad51e7f42fc61d6e507dc3a17787534b4acbcc/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=5fad51e7f42fc61d6e507dc3a17787534b4acbcc", "patch": "@@ -1,20 +1,11 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:29:10\n-   |\n-29 | #[derive(Copy)]\n-   |          ^^^^\n-30 | enum EFoo2<'a> {\n-31 |     Bar(&'a mut bool),\n-   |         ------------- this field does not implement `Copy`\n-\n-error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:17:10\n+  --> $DIR/E0204.rs:15:6\n    |\n-17 | #[derive(Copy)]\n-   |          ^^^^\n-18 | struct Foo2<'a> {\n-19 |     ty: &'a mut bool,\n-   |     ---------------- this field does not implement `Copy`\n+12 |     foo: Vec<u32>,\n+   |     ------------- this field does not implement `Copy`\n+...\n+15 | impl Copy for Foo { }\n+   |      ^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:27:6\n@@ -26,13 +17,22 @@ error[E0204]: the trait `Copy` may not be implemented for this type\n    |      ^^^^\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0204.rs:15:6\n+  --> $DIR/E0204.rs:17:10\n    |\n-12 |     foo: Vec<u32>,\n-   |     ------------- this field does not implement `Copy`\n-...\n-15 | impl Copy for Foo { }\n-   |      ^^^^\n+17 | #[derive(Copy)]\n+   |          ^^^^\n+18 | struct Foo2<'a> {\n+19 |     ty: &'a mut bool,\n+   |     ---------------- this field does not implement `Copy`\n+\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/E0204.rs:29:10\n+   |\n+29 | #[derive(Copy)]\n+   |          ^^^^\n+30 | enum EFoo2<'a> {\n+31 |     Bar(&'a mut bool),\n+   |         ------------- this field does not implement `Copy`\n \n error: aborting due to 4 previous errors\n "}]}