{"sha": "20528baac4f676c8cbc969ab390e12d8039711aa", "node_id": "C_kwDOAAsO6NoAKDIwNTI4YmFhYzRmNjc2YzhjYmM5NjlhYjM5MGUxMmQ4MDM5NzExYWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-01T08:42:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-01T08:42:26Z"}, "message": "Rollup merge of #103729 - RalfJung:align-of-val-packed, r=oli-obk\n\ninterpret: fix align_of_val on packed types\n\nFixes https://github.com/rust-lang/miri/issues/2632\n\nr? `@oli-obk`", "tree": {"sha": "f3fcc2eb79873cbb73e3cc8018e3b73f256d4326", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3fcc2eb79873cbb73e3cc8018e3b73f256d4326"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20528baac4f676c8cbc969ab390e12d8039711aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYNvyCRBK7hj4Ov3rIwAAgd4IAGsFJYXoVhdoeZDgMyGUq/8h\n6qE8cy2ltWFMu+AG1QCNHAvOrmyTmFfa6sNOeNVQRsksCBhcIfROFB6XhltHq2TS\nt5BURAXdU28HBMLBfAHDkrdU+fP2Y5msgXT/EEo6igF7pB4N7blwHHNlhxoFo8yQ\n7ODx6L4JtFdnn+akrRLsW2EviOdv3AAqoLvE8bqgZI3/i0/Xcq6XGtQkqP049T79\n7DRT+nstl1kmDrlHva+WozgeV/usZZymgaJUvwwlQBvFyG0V6pMr67ZOp3GNQ/Sc\nX8beNvpDSmugEFLTEAkQ5qWX5aZXhmXx2ErTQCi0XH/p9+18FZaoqoVKAFCvmMs=\n=hzxK\n-----END PGP SIGNATURE-----\n", "payload": "tree f3fcc2eb79873cbb73e3cc8018e3b73f256d4326\nparent 7dc3ace6a962d4c83a1dbd19b3ec9f033356875d\nparent d366471e58b4387aa1d644c33c469e268abf7160\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667292146 +0530\ncommitter GitHub <noreply@github.com> 1667292146 +0530\n\nRollup merge of #103729 - RalfJung:align-of-val-packed, r=oli-obk\n\ninterpret: fix align_of_val on packed types\n\nFixes https://github.com/rust-lang/miri/issues/2632\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20528baac4f676c8cbc969ab390e12d8039711aa", "html_url": "https://github.com/rust-lang/rust/commit/20528baac4f676c8cbc969ab390e12d8039711aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20528baac4f676c8cbc969ab390e12d8039711aa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "html_url": "https://github.com/rust-lang/rust/commit/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d"}, {"sha": "d366471e58b4387aa1d644c33c469e268abf7160", "url": "https://api.github.com/repos/rust-lang/rust/commits/d366471e58b4387aa1d644c33c469e268abf7160", "html_url": "https://github.com/rust-lang/rust/commit/d366471e58b4387aa1d644c33c469e268abf7160"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "f7d64f6d4f48ae2be6f6d29a69b1fa73222f1fe6", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20528baac4f676c8cbc969ab390e12d8039711aa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20528baac4f676c8cbc969ab390e12d8039711aa/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=20528baac4f676c8cbc969ab390e12d8039711aa", "patch": "@@ -598,7 +598,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1);\n-                let Some((unsized_size, unsized_align)) = self.size_and_align_of(metadata, &field)? else {\n+                let Some((unsized_size, mut unsized_align)) = self.size_and_align_of(metadata, &field)? else {\n                     // A field with an extern type. We don't know the actual dynamic size\n                     // or the alignment.\n                     return Ok(None);\n@@ -614,6 +614,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Return the sum of sizes and max of aligns.\n                 let size = sized_size + unsized_size; // `Size` addition\n \n+                // Packed types ignore the alignment of their fields.\n+                if let ty::Adt(def, _) = layout.ty.kind() {\n+                    if def.repr().packed() {\n+                        unsized_align = sized_align;\n+                    }\n+                }\n+\n                 // Choose max of two known alignments (combined value must\n                 // be aligned according to more restrictive of the two).\n                 let align = sized_align.max(unsized_align);"}, {"sha": "eda176d9fcbe61c307de586eb8ca416b39af0d3d", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20528baac4f676c8cbc969ab390e12d8039711aa/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20528baac4f676c8cbc969ab390e12d8039711aa/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=20528baac4f676c8cbc969ab390e12d8039711aa", "patch": "@@ -5,6 +5,7 @@\n #![feature(bigint_helper_methods)]\n #![feature(cell_update)]\n #![feature(const_assume)]\n+#![feature(const_align_of_val_raw)]\n #![feature(const_black_box)]\n #![feature(const_bool_to_option)]\n #![feature(const_caller_location)]\n@@ -42,6 +43,7 @@\n #![feature(try_find)]\n #![feature(inline_const)]\n #![feature(is_sorted)]\n+#![feature(layout_for_ptr)]\n #![feature(pattern)]\n #![feature(pin_macro)]\n #![feature(sort_internals)]"}, {"sha": "1cfb4fd9fd186e55cc84c3b641bdf37e10858d6e", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/20528baac4f676c8cbc969ab390e12d8039711aa/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20528baac4f676c8cbc969ab390e12d8039711aa/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=20528baac4f676c8cbc969ab390e12d8039711aa", "patch": "@@ -1,4 +1,5 @@\n use core::mem::*;\n+use core::ptr;\n \n #[cfg(panic = \"unwind\")]\n use std::rc::Rc;\n@@ -75,6 +76,25 @@ fn align_of_val_basic() {\n     assert_eq!(align_of_val(&1u32), 4);\n }\n \n+#[test]\n+#[cfg(not(bootstrap))] // stage 0 doesn't have the fix yet, so the test fails\n+fn align_of_val_raw_packed() {\n+    #[repr(C, packed)]\n+    struct B {\n+        f: [u32],\n+    }\n+    let storage = [0u8; 4];\n+    let b: *const B = ptr::from_raw_parts(storage.as_ptr().cast(), 1);\n+    assert_eq!(unsafe { align_of_val_raw(b) }, 1);\n+\n+    const ALIGN_OF_VAL_RAW: usize = {\n+        let storage = [0u8; 4];\n+        let b: *const B = ptr::from_raw_parts(storage.as_ptr().cast(), 1);\n+        unsafe { align_of_val_raw(b) }\n+    };\n+    assert_eq!(ALIGN_OF_VAL_RAW, 1);\n+}\n+\n #[test]\n fn test_swap() {\n     let mut x = 31337;"}]}