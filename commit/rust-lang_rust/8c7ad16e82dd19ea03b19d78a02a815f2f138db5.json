{"sha": "8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "node_id": "C_kwDOAAsO6NoAKDhjN2FkMTZlODJkZDE5ZWEwM2IxOWQ3OGEwMmE4MTVmMmYxMzhkYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T23:10:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-05T23:10:09Z"}, "message": "Auto merge of #109986 - JohnTitor:rollup-3aax38t, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109909 (Deny `use`ing tool paths)\n - #109921 (Don't ICE when encountering `dyn*` in statics or consts)\n - #109922 (Disable `has_thread_local` on OpenHarmony)\n - #109926 (write threads info into log only when debugging)\n - #109968 (Add regression test for #80409)\n - #109969 (Add regression test for #86351)\n - #109973 (rustdoc: Improve logo display very small screen)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "aac4f51adbfa0bf927885b323365abf1e253d628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac4f51adbfa0bf927885b323365abf1e253d628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "html_url": "https://github.com/rust-lang/rust/commit/8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eaeb1eee1b21772de8b935236d16ff8e03fdcf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eaeb1eee1b21772de8b935236d16ff8e03fdcf5", "html_url": "https://github.com/rust-lang/rust/commit/2eaeb1eee1b21772de8b935236d16ff8e03fdcf5"}, {"sha": "9960e9f851a314dc3b241c26b09f4e1c4d7717b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9960e9f851a314dc3b241c26b09f4e1c4d7717b9", "html_url": "https://github.com/rust-lang/rust/commit/9960e9f851a314dc3b241c26b09f4e1c4d7717b9"}], "stats": {"total": 151, "additions": 135, "deletions": 16}, "files": [{"sha": "20c0852fe33a9bbfe6c3674c1f14e5d85c7d0089", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -553,7 +553,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             }\n \n             Rvalue::Cast(CastKind::DynStar, _, _) => {\n-                unimplemented!()\n+                // `dyn*` coercion is implemented for CTFE.\n             }\n \n             Rvalue::Cast(_, _, _) => {}"}, {"sha": "21f6a404a01534da91f3c31761b6156e197f37c6", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -83,7 +83,7 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n         .with_verbose_exit(verbose_entry_exit)\n         .with_verbose_entry(verbose_entry_exit)\n         .with_indent_amount(2);\n-    #[cfg(parallel_compiler)]\n+    #[cfg(all(parallel_compiler, debug_assertions))]\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n     let subscriber = tracing_subscriber::Registry::default().with(filter).with(layer);"}, {"sha": "2199ceee532614cedfcddb1da8fb7e596f2fdeec", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -207,5 +207,9 @@ resolve_expected_found =\n resolve_indeterminate =\n     cannot determine resolution for the visibility\n \n+resolve_tool_module_imported =\n+    cannot use a tool module through an import\n+    .note = the tool module imported here\n+\n resolve_module_only =\n     visibility must resolve to a module"}, {"sha": "07aaaa1eb7f600c0d48e1b0a8346e1397b8f8713", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -469,6 +469,15 @@ pub(crate) struct ExpectedFound {\n #[diag(resolve_indeterminate, code = \"E0578\")]\n pub(crate) struct Indeterminate(#[primary_span] pub(crate) Span);\n \n+#[derive(Diagnostic)]\n+#[diag(resolve_tool_module_imported)]\n+pub(crate) struct ToolModuleImported {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[note]\n+    pub(crate) import: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(resolve_module_only)]\n pub(crate) struct ModuleOnly(#[primary_span] pub(crate) Span);"}, {"sha": "5a56d7b99a978da3c62b9329efd0fb593b5c40d4", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -17,7 +17,7 @@ use crate::late::{\n     ConstantHasGenerics, ConstantItemKind, HasGenericParams, PathSource, Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n-use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n+use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n use crate::{Import, ImportKind, LexicalScopeBinding, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{NameBinding, NameBindingKind, ParentScope, PathResult, PrivacyError, Res};\n use crate::{ResolutionError, Resolver, Scope, ScopeSet, Segment, ToNameBinding, Weak};\n@@ -1364,7 +1364,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             };\n \n-            let is_last = i == path.len() - 1;\n+            let is_last = i + 1 == path.len();\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n             let name = ident.name;\n \n@@ -1501,16 +1501,12 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     if let Some(next_module) = binding.module() {\n                         module = Some(ModuleOrUniformRoot::Module(next_module));\n                         record_segment_res(self, res);\n-                    } else if res == Res::ToolMod && i + 1 != path.len() {\n+                    } else if res == Res::ToolMod && !is_last && opt_ns.is_some() {\n                         if binding.is_import() {\n-                            self.tcx\n-                                .sess\n-                                .struct_span_err(\n-                                    ident.span,\n-                                    \"cannot use a tool module through an import\",\n-                                )\n-                                .span_note(binding.span, \"the tool module imported here\")\n-                                .emit();\n+                            self.tcx.sess.emit_err(errors::ToolModuleImported {\n+                                span: ident.span,\n+                                import: binding.span,\n+                            });\n                         }\n                         let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);\n                         return PathResult::NonModule(PartialRes::new(res));"}, {"sha": "bf1b089f657b49d8ab79e3d462d65540ec0fce44", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_ohos.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -18,6 +18,7 @@ pub fn target() -> Target {\n             features: \"+reserve-x18\".into(),\n             mcount: \"\\u{1}_mcount\".into(),\n             force_emulated_tls: true,\n+            has_thread_local: false,\n             supported_sanitizers: SanitizerSet::ADDRESS\n                 | SanitizerSet::CFI\n                 | SanitizerSet::LEAK"}, {"sha": "16da2453367735fdb91fd3fd8e85d55643422fdb", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_ohos.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -21,6 +21,7 @@ pub fn target() -> Target {\n             crt_static_default: false,\n             mcount: \"\\u{1}mcount\".into(),\n             force_emulated_tls: true,\n+            has_thread_local: false,\n             ..super::linux_musl_base::opts()\n         },\n     }"}, {"sha": "e86eaa65b75b8f961602c1e467da121eb728b031", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -6,6 +6,10 @@\n \t3. Copy the filenames with updated suffixes from the directory.\n */\n \n+:root {\n+\t--nav-sub-mobile-padding: 8px;\n+}\n+\n /* See FiraSans-LICENSE.txt for the Fira Sans license. */\n @font-face {\n \tfont-family: 'Fira Sans';\n@@ -1726,7 +1730,7 @@ in main.js\n \n \t.source nav.sub {\n \t\tmargin: 0;\n-\t\tpadding: 8px;\n+\t\tpadding: var(--nav-sub-mobile-padding);\n \t}\n }\n \n@@ -1783,6 +1787,7 @@ in main.js\n \t.sub-logo-container > img {\n \t\theight: 35px;\n \t\twidth: 35px;\n+\t\tmargin-bottom: var(--nav-sub-mobile-padding);\n \t}\n }\n "}, {"sha": "79f53ee57cc9d536c60019c4d427033c2266514a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -203,7 +203,7 @@ fn init_logging() {\n         .with_verbose_exit(true)\n         .with_verbose_entry(true)\n         .with_indent_amount(2);\n-    #[cfg(parallel_compiler)]\n+    #[cfg(all(parallel_compiler, debug_assertions))]\n     let layer = layer.with_thread_ids(true).with_thread_names(true);\n \n     use tracing_subscriber::layer::SubscriberExt;"}, {"sha": "69459bd3e23b5cafdca8093105be90996e967f31", "filename": "tests/rustdoc-gui/huge-logo.goml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Frustdoc-gui%2Fhuge-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Frustdoc-gui%2Fhuge-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fhuge-logo.goml?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -18,4 +18,6 @@ size: (1280, 1024)\n assert-property: (\".sub-logo-container\", {\"offsetWidth\": \"60\", \"offsetHeight\": 60})\n \n size: (400, 600)\n-assert-property: (\".sub-logo-container\", {\"offsetWidth\": \"35\", \"offsetHeight\": 35})\n+// 43 because 35px + 8px of margin\n+assert-css: (\".sub-logo-container > img\", {\"margin-bottom\": \"8px\"})\n+assert-property: (\".sub-logo-container\", {\"offsetWidth\": \"35\", \"offsetHeight\": 43})"}, {"sha": "ea6ff12328ca774310bd3b50498a1b5dd9ee6738", "filename": "tests/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fsource-code-page.goml?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -216,3 +216,8 @@ call-function: (\"check-sidebar-dir-entry\", {\n     \"x\": 0,\n     \"y\": |source_sidebar_title_y| + |source_sidebar_title_height| + 6,\n })\n+\n+// Now we check that the logo has a bottom margin so it's not stuck to the search input.\n+assert-css: (\".sub-logo-container > img\", {\"margin-bottom\": \"8px\"})\n+store-property: (logo_height, \".sub-logo-container\", \"clientHeight\")\n+assert-position: (\".search-form\", {\"y\": |logo_height| + 8})"}, {"sha": "b5f1e7f7449a22eeb73d479c4b708d166acd4add", "filename": "tests/ui/const_prop/issue-86351.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fconst_prop%2Fissue-86351.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fconst_prop%2Fissue-86351.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst_prop%2Fissue-86351.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: --crate-type=lib -Zmir-opt-level=2\n+// build-pass\n+// ^-- Must be build-pass, because check-pass will not run const prop.\n+\n+pub trait TestTrait {\n+    type MyType;\n+    fn func() -> Option<Self>\n+    where\n+        Self: Sized;\n+}\n+\n+impl<T> dyn TestTrait<MyType = T>\n+where\n+    Self: Sized,\n+{\n+    pub fn other_func() -> Option<Self> {\n+        match Self::func() {\n+            Some(me) => Some(me),\n+            None => None,\n+        }\n+    }\n+}"}, {"sha": "551b072abfab87721c2f12704a140e35245fa9d0", "filename": "tests/ui/dyn-star/const-and-static.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fdyn-star%2Fconst-and-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fdyn-star%2Fconst-and-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fconst-and-static.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete\n+\n+const C: dyn* Send + Sync = &();\n+\n+static S: dyn* Send + Sync = &();\n+\n+fn main() {}"}, {"sha": "df8f42fb0f573eb34f4e1161cf561e49ab3e0ba4", "filename": "tests/ui/dyn-star/const-and-static.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fdyn-star%2Fconst-and-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fdyn-star%2Fconst-and-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fconst-and-static.stderr?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-and-static.rs:3:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "80cad6dfc46e4d0d23c30696e9d2309ff9f6f22c", "filename": "tests/ui/inference/issue-80409.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Finference%2Fissue-80409.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Finference%2Fissue-80409.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-80409.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,36 @@\n+// check-pass\n+\n+#![allow(unreachable_code, unused)]\n+\n+use std::marker::PhantomData;\n+\n+struct FsmBuilder<TFsm> {\n+    _fsm: PhantomData<TFsm>,\n+}\n+\n+impl<TFsm> FsmBuilder<TFsm> {\n+    fn state(&mut self) -> FsmStateBuilder<TFsm> {\n+        todo!()\n+    }\n+}\n+\n+struct FsmStateBuilder<TFsm> {\n+    _state: PhantomData<TFsm>,\n+}\n+\n+impl<TFsm> FsmStateBuilder<TFsm> {\n+    fn on_entry<TAction: Fn(&mut StateContext<'_, TFsm>)>(&self, _action: TAction) {}\n+}\n+\n+trait Fsm {\n+    type Context;\n+}\n+\n+struct StateContext<'a, TFsm: Fsm> {\n+    context: &'a mut TFsm::Context,\n+}\n+\n+fn main() {\n+    let mut builder: FsmBuilder<usize> = todo!();\n+    builder.state().on_entry(|_| {});\n+}"}, {"sha": "971993332f540b2a6aa1e9c3b835b5be1409e39c", "filename": "tests/ui/resolve/tool-import.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fresolve%2Ftool-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fresolve%2Ftool-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ftool-import.rs?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,8 @@\n+// edition: 2018\n+\n+use clippy::time::Instant;\n+//~^ `clippy` is a tool module\n+\n+fn main() {\n+    Instant::now();\n+}"}, {"sha": "d3bdfc93d49234a13d575bfdfb26c3313760fe7d", "filename": "tests/ui/resolve/tool-import.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fresolve%2Ftool-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c7ad16e82dd19ea03b19d78a02a815f2f138db5/tests%2Fui%2Fresolve%2Ftool-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ftool-import.stderr?ref=8c7ad16e82dd19ea03b19d78a02a815f2f138db5", "patch": "@@ -0,0 +1,9 @@\n+error[E0433]: failed to resolve: `clippy` is a tool module, not a module\n+  --> $DIR/tool-import.rs:3:5\n+   |\n+LL | use clippy::time::Instant;\n+   |     ^^^^^^ `clippy` is a tool module, not a module\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}]}