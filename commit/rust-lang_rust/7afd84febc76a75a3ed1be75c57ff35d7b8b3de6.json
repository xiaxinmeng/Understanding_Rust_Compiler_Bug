{"sha": "7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmQ4NGZlYmM3NmE3NWEzZWQxYmU3NWM1N2ZmMzVkN2I4YjNkZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-11T09:28:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-11T09:28:59Z"}, "message": "visitor", "tree": {"sha": "76eb2de7efc569c39cc721b7be298490b9647e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76eb2de7efc569c39cc721b7be298490b9647e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "html_url": "https://github.com/rust-lang/rust/commit/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5119133fc03694c6644cac9e307d1d496fc9bf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5119133fc03694c6644cac9e307d1d496fc9bf2", "html_url": "https://github.com/rust-lang/rust/commit/d5119133fc03694c6644cac9e307d1d496fc9bf2"}], "stats": {"total": 297, "additions": 211, "deletions": 86}, "files": [{"sha": "ed7d9b3f77d8ec874d103e44f6832907977a74d7", "filename": "crates/libeditor/src/extend_selection.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fextend_selection.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -1,11 +1,16 @@\n use libsyntax2::{\n+    ast, AstNode,\n     TextRange, SyntaxNodeRef,\n     SyntaxKind::WHITESPACE,\n     algo::{find_leaf_at_offset, find_covering_node, ancestors},\n };\n \n+pub fn extend_selection(file: &ast::File, range: TextRange) -> Option<TextRange> {\n+    let syntax = file.syntax();\n+    extend(syntax.as_ref(), range)\n+}\n \n-pub(crate) fn extend_selection(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n+pub(crate) fn extend(root: SyntaxNodeRef, range: TextRange) -> Option<TextRange> {\n     if range.is_empty() {\n         let offset = range.start();\n         let mut leaves = find_leaf_at_offset(root, offset);"}, {"sha": "4ea344b1788d6cbd5a7abd97a74af315a65ce70a", "filename": "crates/libeditor/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Flib.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -2,16 +2,21 @@ extern crate libsyntax2;\n extern crate superslice;\n \n mod extend_selection;\n+mod symbols;\n mod line_index;\n \n use libsyntax2::{\n-    ast,\n+    ast::{self, NameOwner},\n     SyntaxNodeRef, AstNode,\n     algo::walk,\n     SyntaxKind::*,\n };\n pub use libsyntax2::{File, TextRange, TextUnit};\n-pub use self::line_index::{LineIndex, LineCol};\n+pub use self::{\n+    line_index::{LineIndex, LineCol},\n+    extend_selection::extend_selection,\n+    symbols::{FileSymbol, file_symbols}\n+};\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -108,11 +113,6 @@ pub fn symbols(file: &ast::File) -> Vec<Symbol> {\n     res // NLL :-(\n }\n \n-pub fn extend_selection(file: &ast::File, range: TextRange) -> Option<TextRange> {\n-    let syntax = file.syntax();\n-    extend_selection::extend_selection(syntax.as_ref(), range)\n-}\n-\n pub fn runnables(file: &ast::File) -> Vec<Runnable> {\n     file\n         .functions()"}, {"sha": "3faf96868fc6aefdfb3f6e6c64d9a2d06239e80e", "filename": "crates/libeditor/src/symbols.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fsymbols.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -0,0 +1,67 @@\n+use libsyntax2::{\n+    SyntaxKind, SyntaxNodeRef, SyntaxRoot, AstNode,\n+    ast::{self, NameOwner},\n+    algo::{\n+        visit::{visitor, Visitor},\n+        walk::{walk, WalkEvent},\n+    },\n+};\n+use TextRange;\n+\n+#[derive(Debug)]\n+pub struct FileSymbol {\n+    pub parent: Option<usize>,\n+    pub name: String,\n+    pub name_range: TextRange,\n+    pub node_range: TextRange,\n+    pub kind: SyntaxKind,\n+}\n+\n+\n+pub fn file_symbols(file: &ast::File) -> Vec<FileSymbol> {\n+    let mut res = Vec::new();\n+    let mut stack = Vec::new();\n+    let syntax = file.syntax();\n+\n+    for event in walk(syntax.as_ref()) {\n+        match event {\n+            WalkEvent::Enter(node) => {\n+                match to_symbol(node) {\n+                    Some(mut symbol) => {\n+                        symbol.parent = stack.last().map(|&n| n);\n+                        stack.push(res.len());\n+                        res.push(symbol);\n+                    }\n+                    None => (),\n+                }\n+            }\n+            WalkEvent::Exit(node) => {\n+                if to_symbol(node).is_some() {\n+                    stack.pop().unwrap();\n+                }\n+            }\n+        }\n+    }\n+    res\n+}\n+\n+fn to_symbol(node: SyntaxNodeRef) -> Option<FileSymbol> {\n+    fn decl<'a, N: NameOwner<&'a SyntaxRoot>>(node: N) -> Option<FileSymbol> {\n+        let name = node.name()?;\n+        Some(FileSymbol {\n+            parent: None,\n+            name: name.text(),\n+            name_range: name.syntax().range(),\n+            node_range: node.syntax().range(),\n+            kind: node.syntax().kind(),\n+        })\n+    }\n+\n+    visitor()\n+        .visit(decl::<ast::Function<_>>)\n+        .visit(decl::<ast::Struct<_>>)\n+        .visit(decl::<ast::Enum<_>>)\n+        .visit(decl::<ast::Trait<_>>)\n+        .visit(decl::<ast::Module<_>>)\n+        .accept(node)?\n+}"}, {"sha": "ba7181ab88c355632bd0c3e8b199c982ab8429ce", "filename": "crates/libeditor/tests/test.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibeditor%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Ftests%2Ftest.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -3,7 +3,7 @@ extern crate itertools;\n \n use std::fmt;\n use itertools::Itertools;\n-use libeditor::{File, highlight, runnables, extend_selection, TextRange};\n+use libeditor::{File, highlight, runnables, extend_selection, TextRange, file_symbols};\n \n #[test]\n fn test_extend_selection() {\n@@ -58,6 +58,29 @@ fn test_foo() {}\n     )\n }\n \n+#[test]\n+fn symbols() {\n+    let file = file(r#\"\n+struct Foo {\n+    x: i32\n+}\n+\n+mod m {\n+    fn bar() {}\n+}\n+\n+enum E { X, Y(i32) }\n+\"#);\n+    let symbols = file_symbols(&file);\n+    dbg_eq(\n+        &symbols,\n+        r#\"[FileSymbol { parent: None, name: \"Foo\", name_range: [8; 11), node_range: [1; 26), kind: STRUCT },\n+            FileSymbol { parent: None, name: \"m\", name_range: [32; 33), node_range: [28; 53), kind: MODULE },\n+            FileSymbol { parent: Some(1), name: \"bar\", name_range: [43; 46), node_range: [40; 51), kind: FUNCTION },\n+            FileSymbol { parent: None, name: \"E\", name_range: [60; 61), node_range: [55; 75), kind: ENUM }]\"#,\n+    )\n+}\n+\n fn file(text: &str) -> File {\n     File::parse(text)\n }"}, {"sha": "263b58d9791101702a63e12cd88d1aebd0ccd22c", "filename": "crates/libsyntax2/src/algo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fmod.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -1,4 +1,5 @@\n pub mod walk;\n+pub mod visit;\n \n use {SyntaxNodeRef, TextUnit, TextRange};\n "}, {"sha": "dc5afa5a91f0e9c5555c7fe748f65ee3aaa2a39e", "filename": "crates/libsyntax2/src/algo/visit.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Falgo%2Fvisit.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -0,0 +1,52 @@\n+use std::marker::PhantomData;\n+use {SyntaxNodeRef, AstNode, SyntaxRoot};\n+\n+\n+pub fn visitor<'a, T>() -> impl Visitor<'a, Output=T> {\n+    EmptyVisitor { ph: PhantomData }\n+}\n+\n+pub trait Visitor<'a>: Sized {\n+    type Output;\n+    fn accept(self, node: SyntaxNodeRef<'a>) -> Option<Self::Output>;\n+    fn visit<N, F>(self, f: F) -> Vis<Self, N, F>\n+        where N: AstNode<&'a SyntaxRoot>,\n+              F: FnOnce(N) -> Self::Output,\n+    {\n+        Vis { inner: self, f, ph: PhantomData }\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct EmptyVisitor<T> {\n+    ph: PhantomData<fn() -> T>\n+}\n+\n+impl<'a, T> Visitor<'a> for EmptyVisitor<T> {\n+    type Output = T;\n+\n+    fn accept(self, _node: SyntaxNodeRef<'a>) -> Option<T> {\n+        None\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct Vis<V, N, F> {\n+    inner: V,\n+    f: F,\n+    ph: PhantomData<fn(N)>,\n+}\n+\n+impl<'a, V, N, F> Visitor<'a> for Vis<V, N, F>\n+    where\n+        V: Visitor<'a>,\n+        N: AstNode<&'a SyntaxRoot>,\n+        F: FnOnce(N) -> <V as Visitor<'a>>::Output,\n+{\n+    type Output = <V as Visitor<'a>>::Output;\n+\n+    fn accept(self, node: SyntaxNodeRef<'a>) -> Option<Self::Output> {\n+        let Vis { inner, f, .. } = self;\n+        inner.accept(node).or_else(|| N::cast(node).map(f))\n+    }\n+}"}, {"sha": "a4b1169414a1bb90b6aa37ae4559c06f9cdd6552", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 24, "deletions": 56, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -1,9 +1,11 @@\n use std::sync::Arc;\n use {\n+    ast,\n     SyntaxNode, SyntaxRoot, TreeRoot, AstNode,\n     SyntaxKind::*,\n };\n \n+// ConstItem\n #[derive(Debug, Clone, Copy)]\n pub struct ConstItem<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -19,15 +21,10 @@ impl<R: TreeRoot> AstNode<R> for ConstItem<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> ConstItem<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for ConstItem<R> {}\n+impl<R: TreeRoot> ConstItem<R> {}\n \n+// Enum\n #[derive(Debug, Clone, Copy)]\n pub struct Enum<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -43,15 +40,10 @@ impl<R: TreeRoot> AstNode<R> for Enum<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> Enum<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for Enum<R> {}\n+impl<R: TreeRoot> Enum<R> {}\n \n+// File\n #[derive(Debug, Clone, Copy)]\n pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -75,6 +67,7 @@ impl<R: TreeRoot> File<R> {\n     }\n }\n \n+// Function\n #[derive(Debug, Clone, Copy)]\n pub struct Function<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -90,15 +83,10 @@ impl<R: TreeRoot> AstNode<R> for Function<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> Function<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for Function<R> {}\n+impl<R: TreeRoot> Function<R> {}\n \n+// Module\n #[derive(Debug, Clone, Copy)]\n pub struct Module<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -114,15 +102,10 @@ impl<R: TreeRoot> AstNode<R> for Module<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> Module<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for Module<R> {}\n+impl<R: TreeRoot> Module<R> {}\n \n+// Name\n #[derive(Debug, Clone, Copy)]\n pub struct Name<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -140,6 +123,7 @@ impl<R: TreeRoot> AstNode<R> for Name<R> {\n \n impl<R: TreeRoot> Name<R> {}\n \n+// StaticItem\n #[derive(Debug, Clone, Copy)]\n pub struct StaticItem<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -155,15 +139,10 @@ impl<R: TreeRoot> AstNode<R> for StaticItem<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> StaticItem<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for StaticItem<R> {}\n+impl<R: TreeRoot> StaticItem<R> {}\n \n+// Struct\n #[derive(Debug, Clone, Copy)]\n pub struct Struct<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -179,15 +158,10 @@ impl<R: TreeRoot> AstNode<R> for Struct<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> Struct<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for Struct<R> {}\n+impl<R: TreeRoot> Struct<R> {}\n \n+// Trait\n #[derive(Debug, Clone, Copy)]\n pub struct Trait<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -203,12 +177,6 @@ impl<R: TreeRoot> AstNode<R> for Trait<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n-impl<R: TreeRoot> Trait<R> {\n-    pub fn name(&self) -> Option<Name<R>> {\n-        self.syntax()\n-            .children()\n-            .filter_map(Name::cast)\n-            .next()\n-    }\n-}\n+impl<R: TreeRoot> ast::NameOwner<R> for Trait<R> {}\n+impl<R: TreeRoot> Trait<R> {}\n "}, {"sha": "3d79b5543b4fe21562af7cba742dc773f924ba89", "filename": "crates/libsyntax2/src/ast/generated.rs.tera", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs.tera?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -1,9 +1,11 @@\n use std::sync::Arc;\n use {\n+    ast,\n     SyntaxNode, SyntaxRoot, TreeRoot, AstNode,\n     SyntaxKind::*,\n };\n {% for node, methods in ast %}\n+// {{ node }}\n #[derive(Debug, Clone, Copy)]\n pub struct {{ node }}<R: TreeRoot = Arc<SyntaxRoot>> {\n     syntax: SyntaxNode<R>,\n@@ -19,6 +21,12 @@ impl<R: TreeRoot> AstNode<R> for {{ node }}<R> {\n     fn syntax(&self) -> &SyntaxNode<R> { &self.syntax }\n }\n \n+{% if methods.traits -%}\n+{%- for t in methods.traits -%}\n+impl<R: TreeRoot> ast::{{ t }}<R> for {{ node }}<R> {}\n+{% endfor -%}\n+{%- endif -%}\n+\n impl<R: TreeRoot> {{ node }}<R> {\n {%- if methods.collections -%}\n {%- for m in methods.collections -%}"}, {"sha": "56bc099fea7592910b6698b455a0f7c0b22a29f2", "filename": "crates/libsyntax2/src/ast/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fmod.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -12,6 +12,15 @@ pub trait AstNode<R: TreeRoot>: Sized {\n     fn syntax(&self) -> &SyntaxNode<R>;\n }\n \n+pub trait NameOwner<R: TreeRoot>: AstNode<R> {\n+    fn name(&self) -> Option<Name<R>> {\n+        self.syntax()\n+            .children()\n+            .filter_map(Name::cast)\n+            .next()\n+    }\n+}\n+\n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n         File::cast(::parse(text)).unwrap()"}, {"sha": "3fe8fdf0bf97f5548837b263a88725c1e2f7227f", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -220,39 +220,25 @@ Grammar(\n             ]\n         ),\n         \"Function\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"Struct\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"Enum\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"Trait\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"Module\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"ConstItem\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"StaticItem\": (\n-            options: [\n-                [\"name\", \"Name\"]\n-            ]\n+            traits: [\"NameOwner\"]\n         ),\n         \"Name\": (),\n     },"}, {"sha": "a22275ed956e2a1c644897962185abb460dd93f1", "filename": "crates/libsyntax2/src/yellow/syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afd84febc76a75a3ed1be75c57ff35d7b8b3de6/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fyellow%2Fsyntax.rs?ref=7afd84febc76a75a3ed1be75c57ff35d7b8b3de6", "patch": "@@ -28,6 +28,12 @@ impl<R: TreeRoot> Eq for SyntaxNode<R> {}\n \n pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n \n+#[test]\n+fn syntax_node_ref_is_copy() {\n+    fn assert_copy<T: Copy>(){}\n+    assert_copy::<SyntaxNodeRef>()\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash, Ord, PartialOrd)]\n pub struct SyntaxError {\n     pub msg: String,"}]}