{"sha": "feb219d23fd4236fc69ec86e34c088e232289534", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYjIxOWQyM2ZkNDIzNmZjNjllYzg2ZTM0YzA4OGUyMzIyODk1MzQ=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-08-07T08:05:00Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-08-07T08:05:00Z"}, "message": "windows: Fix several tests on 64-bit.\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "460d17654ca883be34400eef5f1a17e0d8d54073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460d17654ca883be34400eef5f1a17e0d8d54073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feb219d23fd4236fc69ec86e34c088e232289534", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feb219d23fd4236fc69ec86e34c088e232289534", "html_url": "https://github.com/rust-lang/rust/commit/feb219d23fd4236fc69ec86e34c088e232289534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feb219d23fd4236fc69ec86e34c088e232289534/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e19e750185f60e404412f702f8f2edc7bc1245", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e19e750185f60e404412f702f8f2edc7bc1245", "html_url": "https://github.com/rust-lang/rust/commit/51e19e750185f60e404412f702f8f2edc7bc1245"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "fa29ab508ff24f817c961a6cb33780ff3ae5a120", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/feb219d23fd4236fc69ec86e34c088e232289534/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb219d23fd4236fc69ec86e34c088e232289534/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=feb219d23fd4236fc69ec86e34c088e232289534", "patch": "@@ -1142,18 +1142,17 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use types::os::arch::c95::{c_short, time_t, suseconds_t,\n+                use types::os::arch::c95::{c_short, time_t,\n                                                  c_long};\n                 use types::os::arch::extra::{int64, time64_t};\n                 use types::os::arch::posix88::{dev_t, ino_t};\n-                use types::os::arch::posix88::mode_t;\n \n                 // pub Note: this is the struct called stat64 in win32. Not stat,\n                 // nor stati64.\n                 pub struct stat {\n                     pub st_dev: dev_t,\n                     pub st_ino: ino_t,\n-                    pub st_mode: mode_t,\n+                    pub st_mode: u16,\n                     pub st_nlink: c_short,\n                     pub st_uid: c_short,\n                     pub st_gid: c_short,\n@@ -1171,8 +1170,8 @@ pub mod types {\n                 }\n \n                 pub struct timeval {\n-                    pub tv_sec: time_t,\n-                    pub tv_usec: suseconds_t,\n+                    pub tv_sec: c_long,\n+                    pub tv_usec: c_long,\n                 }\n \n                 pub struct timespec {\n@@ -1186,7 +1185,7 @@ pub mod types {\n             pub mod bsd44 {\n                 use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n \n-                pub type SOCKET = c_uint;\n+                pub type SOCKET = uint;\n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u16;\n                 pub type in_port_t = u16;\n@@ -1197,6 +1196,7 @@ pub mod types {\n                 }\n                 pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n+                    pub __ss_pad1: [u8, ..6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8, ..112],\n                 }\n@@ -1293,12 +1293,9 @@ pub mod types {\n             pub mod posix88 {\n                 pub type off_t = i32;\n                 pub type dev_t = u32;\n-                pub type ino_t = i16;\n+                pub type ino_t = u16;\n \n-                #[cfg(target_arch = \"x86\")]\n-                pub type pid_t = i32;\n-                #[cfg(target_arch = \"x86_64\")]\n-                pub type pid_t = i64;\n+                pub type pid_t = u32;\n \n                 pub type useconds_t = u32;\n                 pub type mode_t = u16;\n@@ -1415,7 +1412,7 @@ pub mod types {\n                     pub dwPageSize: DWORD,\n                     pub lpMinimumApplicationAddress: LPVOID,\n                     pub lpMaximumApplicationAddress: LPVOID,\n-                    pub dwActiveProcessorMask: DWORD,\n+                    pub dwActiveProcessorMask: uint,\n                     pub dwNumberOfProcessors: DWORD,\n                     pub dwProcessorType: DWORD,\n                     pub dwAllocationGranularity: DWORD,"}, {"sha": "80c9e91b48f7a5e24e3ba6db156d142c94090133", "filename": "src/libnative/io/c_win32.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibnative%2Fio%2Fc_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibnative%2Fio%2Fc_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_win32.rs?ref=feb219d23fd4236fc69ec86e34c088e232289534", "patch": "@@ -28,6 +28,7 @@ pub static ENABLE_PROCESSED_INPUT: libc::DWORD = 0x1;\n pub static ENABLE_QUICK_EDIT_MODE: libc::DWORD = 0x40;\n \n #[repr(C)]\n+#[cfg(target_arch = \"x86\")]\n pub struct WSADATA {\n     pub wVersion: libc::WORD,\n     pub wHighVersion: libc::WORD,\n@@ -37,6 +38,17 @@ pub struct WSADATA {\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n }\n+#[repr(C)]\n+#[cfg(target_arch = \"x86_64\")]\n+pub struct WSADATA {\n+    pub wVersion: libc::WORD,\n+    pub wHighVersion: libc::WORD,\n+    pub iMaxSockets: u16,\n+    pub iMaxUdpDg: u16,\n+    pub lpVendorInfo: *mut u8,\n+    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+}\n \n pub type LPWSADATA = *mut WSADATA;\n "}, {"sha": "97518bbf1999587fa027df320b3f454b30e34a12", "filename": "src/libnative/io/util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibnative%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibnative%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Futil.rs?ref=feb219d23fd4236fc69ec86e34c088e232289534", "patch": "@@ -52,6 +52,14 @@ pub fn eof() -> IoError {\n     }\n }\n \n+#[cfg(windows)]\n+pub fn ms_to_timeval(ms: u64) -> libc::timeval {\n+    libc::timeval {\n+        tv_sec: (ms / 1000) as libc::c_long,\n+        tv_usec: ((ms % 1000) * 1000) as libc::c_long,\n+    }\n+}\n+#[cfg(not(windows))]\n pub fn ms_to_timeval(ms: u64) -> libc::timeval {\n     libc::timeval {\n         tv_sec: (ms / 1000) as libc::time_t,"}, {"sha": "e0a6c70262725b3351c846ae193f8e93e098e379", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feb219d23fd4236fc69ec86e34c088e232289534/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=feb219d23fd4236fc69ec86e34c088e232289534", "patch": "@@ -1592,10 +1592,11 @@ mod test {\n         let tmpdir = tmpdir();\n         let path = tmpdir.join(\"a\");\n         check!(File::create(&path));\n-\n-        check!(change_file_times(&path, 1000, 2000));\n-        assert_eq!(check!(path.stat()).accessed, 1000);\n-        assert_eq!(check!(path.stat()).modified, 2000);\n+        // These numbers have to be bigger than the time in the day to account for timezones\n+        // Windows in particular will fail in certain timezones with small enough values\n+        check!(change_file_times(&path, 100000, 200000));\n+        assert_eq!(check!(path.stat()).accessed, 100000);\n+        assert_eq!(check!(path.stat()).modified, 200000);\n     })\n \n     iotest!(fn utime_noexist() {"}]}