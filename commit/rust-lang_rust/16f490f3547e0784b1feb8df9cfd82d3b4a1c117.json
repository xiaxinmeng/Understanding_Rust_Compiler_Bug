{"sha": "16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "node_id": "C_kwDOAAsO6NoAKDE2ZjQ5MGYzNTQ3ZTA3ODRiMWZlYjhkZjljZmQ4MmQzYjRhMWMxMTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-12T08:26:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-12T08:26:25Z"}, "message": "Rollup merge of #93898 - GuillaumeGomez:error-code-check, r=Mark-Simulacrum\n\ntidy: Extend error code check\n\nWe discovered in https://github.com/rust-lang/rust/pull/93845 that the error code tidy check didn't check everything: if you remove an error code from the listing even if it has an explanation, then it should error.\n\nIt also allowed me to put back `E0192` in that listing as well.\n\nr? ```@Mark-Simulacrum```", "tree": {"sha": "e3a4217bb1745b4f8b10bb260b6bd9af2f573857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3a4217bb1745b4f8b10bb260b6bd9af2f573857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiB28xCRBK7hj4Ov3rIwAAgksIAJUti/tEGscoNcrJPWea5ljh\np8UkzKiV7qbiCwe3NCwDLXESZ8HoILeWJRl3O+A8o4PgdDsVmUKONfnQ5eGHfyfo\n3NDXXhfuuSELgefm1aHHYd1PmJN1k3EKXrSbBXsas9hAbXrKms9a8Sj14rRQ77VA\n2l+uQp5jpRz1+wlpwz7bmhU9nbjzebhE1dUNfeX0vMGqs9Vnil+5HnLBfZn0lsWd\n1oENSH1LUJtT04e7pzujBW+GnHFifMzk0I0DlqxGg/zFOeW/6YT0iEywJvSVBxbl\nRCiF0FulxB5xgrqphJY64SGVYLLQVZAr1zAaXmU7mqZiX4O+CWuoeG3UvJ0T4Qw=\n=EpN8\n-----END PGP SIGNATURE-----\n", "payload": "tree e3a4217bb1745b4f8b10bb260b6bd9af2f573857\nparent 475b45f9f161dd6ba15aa86a00fa12d6824c38b7\nparent 087fb23dc9c8ac03e4567ae905795eaa71ddb8c3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644654385 +0100\ncommitter GitHub <noreply@github.com> 1644654385 +0100\n\nRollup merge of #93898 - GuillaumeGomez:error-code-check, r=Mark-Simulacrum\n\ntidy: Extend error code check\n\nWe discovered in https://github.com/rust-lang/rust/pull/93845 that the error code tidy check didn't check everything: if you remove an error code from the listing even if it has an explanation, then it should error.\n\nIt also allowed me to put back `E0192` in that listing as well.\n\nr? ```@Mark-Simulacrum```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "html_url": "https://github.com/rust-lang/rust/commit/16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475b45f9f161dd6ba15aa86a00fa12d6824c38b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/475b45f9f161dd6ba15aa86a00fa12d6824c38b7", "html_url": "https://github.com/rust-lang/rust/commit/475b45f9f161dd6ba15aa86a00fa12d6824c38b7"}, {"sha": "087fb23dc9c8ac03e4567ae905795eaa71ddb8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/087fb23dc9c8ac03e4567ae905795eaa71ddb8c3", "html_url": "https://github.com/rust-lang/rust/commit/087fb23dc9c8ac03e4567ae905795eaa71ddb8c3"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "a72681dbf4e7ede9866d2b620ec9e071cdf3627a", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "patch": "@@ -97,6 +97,7 @@ E0184: include_str!(\"./error_codes/E0184.md\"),\n E0185: include_str!(\"./error_codes/E0185.md\"),\n E0186: include_str!(\"./error_codes/E0186.md\"),\n E0191: include_str!(\"./error_codes/E0191.md\"),\n+E0192: include_str!(\"./error_codes/E0192.md\"),\n E0193: include_str!(\"./error_codes/E0193.md\"),\n E0195: include_str!(\"./error_codes/E0195.md\"),\n E0197: include_str!(\"./error_codes/E0197.md\"),\n@@ -522,7 +523,6 @@ E0787: include_str!(\"./error_codes/E0787.md\"),\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n-//  E0192, // negative impl only applicable to auto traits\n //  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0208,"}, {"sha": "deca042a91a5054b30c4a7e29cac91c5f8e31a11", "filename": "compiler/rustc_error_codes/src/error_codes/E0192.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md", "raw_url": "https://github.com/rust-lang/rust/raw/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0192.md?ref=16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "patch": "@@ -1,15 +1,17 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n A negative impl was added on a trait implementation.\n \n Erroneous code example:\n \n-```compile_fail,E0192\n+```compile_fail\n trait Trait {\n     type Bar;\n }\n \n struct Foo;\n \n-impl !Trait for Foo { } //~ ERROR E0192\n+impl !Trait for Foo { } //~ ERROR\n \n fn main() {}\n ```"}, {"sha": "2a23d72edc06409029ebc5f1d631c662f56b833b", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16f490f3547e0784b1feb8df9cfd82d3b4a1c117/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=16f490f3547e0784b1feb8df9cfd82d3b4a1c117", "patch": "@@ -1,7 +1,7 @@\n //! Checks that all error codes have at least one test to prevent having error\n //! codes that are silently not thrown by the compiler anymore.\n \n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::ffi::OsStr;\n use std::fs::read_to_string;\n use std::path::Path;\n@@ -205,6 +205,7 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     let mut found_explanations = 0;\n     let mut found_tests = 0;\n     let mut error_codes: HashMap<String, ErrorCodeStatus> = HashMap::new();\n+    let mut explanations: HashSet<String> = HashSet::new();\n     // We want error codes which match the following cases:\n     //\n     // * foo(a, E0111, a)\n@@ -218,17 +219,27 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n     for path in paths {\n         super::walk(path, &mut |path| super::filter_dirs(path), &mut |entry, contents| {\n             let file_name = entry.file_name();\n+            let entry_path = entry.path();\n+\n             if file_name == \"error_codes.rs\" {\n                 extract_error_codes(contents, &mut error_codes, entry.path(), &mut errors);\n                 found_explanations += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"stderr\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"stderr\")) {\n                 extract_error_codes_from_tests(contents, &mut error_codes);\n                 found_tests += 1;\n-            } else if entry.path().extension() == Some(OsStr::new(\"rs\")) {\n+            } else if entry_path.extension() == Some(OsStr::new(\"rs\")) {\n                 let path = entry.path().to_string_lossy();\n                 if PATHS_TO_IGNORE_FOR_EXTRACTION.iter().all(|c| !path.contains(c)) {\n                     extract_error_codes_from_source(contents, &mut error_codes, &regex);\n                 }\n+            } else if entry_path\n+                .parent()\n+                .and_then(|p| p.file_name())\n+                .map(|p| p == \"error_codes\")\n+                .unwrap_or(false)\n+                && entry_path.extension() == Some(OsStr::new(\"md\"))\n+            {\n+                explanations.insert(file_name.to_str().unwrap().replace(\".md\", \"\"));\n             }\n         });\n     }\n@@ -240,6 +251,10 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n         eprintln!(\"No error code was found in compilation errors!\");\n         *bad = true;\n     }\n+    if explanations.is_empty() {\n+        eprintln!(\"No error code explanation was found!\");\n+        *bad = true;\n+    }\n     if errors.is_empty() {\n         println!(\"Found {} error codes\", error_codes.len());\n \n@@ -282,11 +297,21 @@ pub fn check(paths: &[&Path], bad: &mut bool) {\n             }\n         }\n     }\n+    if errors.is_empty() {\n+        for explanation in explanations {\n+            if !error_codes.contains_key(&explanation) {\n+                errors.push(format!(\n+                    \"{} error code explanation should be listed in `error_codes.rs`\",\n+                    explanation\n+                ));\n+            }\n+        }\n+    }\n     errors.sort();\n     for err in &errors {\n         eprintln!(\"{}\", err);\n     }\n-    println!(\"Found {} error codes with no tests\", errors.len());\n+    println!(\"Found {} error(s) in error codes\", errors.len());\n     if !errors.is_empty() {\n         *bad = true;\n     }"}]}