{"sha": "5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZjRkNmZiYzBjYTQ2N2YxNjUzN2E1ZTQ0MGZkYTM1ZDBlMjc4MGI=", "commit": {"author": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2016-12-05T21:12:00Z"}, "committer": {"name": "Jeremy Fitzhardinge", "email": "jsgf@fb.com", "date": "2016-12-05T22:36:58Z"}, "message": "libtest: add --exact to make filter matching exact\n\nFilter matching is by substring by default. This makes it impossible\nto run a single test if its name is a substring of some other test.\nFor example, its not possible to run just \"mymod::test\" with these\ntests:\n\n  mymod::test\n  mymod::test1\n  mymod::test_module::moretests\n\nYou could declare by convention that no test has a name that's a\nsubstring of another test, but that's not really practical.\n\nThis PR adds the \"--exact\" flag, to make filter matching exactly\nmatch the complete name.", "tree": {"sha": "c0e9cfbac0e9fccd987b51be08f1da4af3c6a215", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e9cfbac0e9fccd987b51be08f1da4af3c6a215"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "html_url": "https://github.com/rust-lang/rust/commit/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/comments", "author": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsgf", "id": 147966, "node_id": "MDQ6VXNlcjE0Nzk2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/147966?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsgf", "html_url": "https://github.com/jsgf", "followers_url": "https://api.github.com/users/jsgf/followers", "following_url": "https://api.github.com/users/jsgf/following{/other_user}", "gists_url": "https://api.github.com/users/jsgf/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsgf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsgf/subscriptions", "organizations_url": "https://api.github.com/users/jsgf/orgs", "repos_url": "https://api.github.com/users/jsgf/repos", "events_url": "https://api.github.com/users/jsgf/events{/privacy}", "received_events_url": "https://api.github.com/users/jsgf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d346dbc938da2f8d1bd13492331d9ec1b15bdac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d346dbc938da2f8d1bd13492331d9ec1b15bdac7", "html_url": "https://github.com/rust-lang/rust/commit/d346dbc938da2f8d1bd13492331d9ec1b15bdac7"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "5749459a0541ed158518f993cfbaaee2f8b7d0b6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 90, "deletions": 2, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "patch": "@@ -301,6 +301,7 @@ pub enum ColorConfig {\n \n pub struct TestOpts {\n     pub filter: Option<String>,\n+    pub filter_exact: bool,\n     pub run_ignored: bool,\n     pub run_tests: bool,\n     pub bench_benchmarks: bool,\n@@ -317,6 +318,7 @@ impl TestOpts {\n     fn new() -> TestOpts {\n         TestOpts {\n             filter: None,\n+            filter_exact: false,\n             run_ignored: false,\n             run_tests: false,\n             bench_benchmarks: false,\n@@ -348,6 +350,7 @@ fn optgroups() -> Vec<getopts::OptGroup> {\n       getopts::optmulti(\"\", \"skip\", \"Skip tests whose names contain FILTER (this flag can \\\n                                      be used multiple times)\",\"FILTER\"),\n       getopts::optflag(\"q\", \"quiet\", \"Display one character per test instead of one line\"),\n+      getopts::optflag(\"\", \"exact\", \"Exactly match filters rather than by substring\"),\n       getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize if stdout is a tty and tests are run on serially (default);\n             always = always colorize output;\n@@ -407,6 +410,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let run_ignored = matches.opt_present(\"ignored\");\n     let quiet = matches.opt_present(\"quiet\");\n+    let exact = matches.opt_present(\"exact\");\n \n     let logfile = matches.opt_str(\"logfile\");\n     let logfile = logfile.map(|s| PathBuf::from(&s));\n@@ -448,6 +452,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n \n     let test_opts = TestOpts {\n         filter: filter,\n+        filter_exact: exact,\n         run_ignored: run_ignored,\n         run_tests: run_tests,\n         bench_benchmarks: bench_benchmarks,\n@@ -1118,14 +1123,26 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n         None => filtered,\n         Some(ref filter) => {\n             filtered.into_iter()\n-                    .filter(|test| test.desc.name.as_slice().contains(&filter[..]))\n+                    .filter(|test| {\n+                        if opts.filter_exact {\n+                            test.desc.name.as_slice() == &filter[..]\n+                        } else {\n+                            test.desc.name.as_slice().contains(&filter[..])\n+                        }\n+                    })\n                     .collect()\n         }\n     };\n \n     // Skip tests that match any of the skip filters\n     filtered = filtered.into_iter()\n-        .filter(|t| !opts.skip.iter().any(|sf| t.desc.name.as_slice().contains(&sf[..])))\n+        .filter(|t| !opts.skip.iter().any(|sf| {\n+                if opts.filter_exact {\n+                    t.desc.name.as_slice() == &sf[..]\n+                } else {\n+                    t.desc.name.as_slice().contains(&sf[..])\n+                }\n+            }))\n         .collect();\n \n     // Maybe pull out the ignored test and unignore them\n@@ -1654,6 +1671,77 @@ mod tests {\n         assert!(!filtered[0].desc.ignore);\n     }\n \n+    #[test]\n+    pub fn exact_filter_match() {\n+        fn tests() -> Vec<TestDescAndFn> {\n+            vec![\"base\",\n+                 \"base::test\",\n+                 \"base::test1\",\n+                 \"base::test2\",\n+            ].into_iter()\n+            .map(|name| TestDescAndFn {\n+                desc: TestDesc {\n+                    name: StaticTestName(name),\n+                    ignore: false,\n+                    should_panic: ShouldPanic::No,\n+                },\n+                testfn: DynTestFn(Box::new(move |()| {}))\n+            })\n+            .collect()\n+        }\n+\n+        let substr = filter_tests(&TestOpts {\n+                filter: Some(\"base\".into()),\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(substr.len(), 4);\n+\n+        let substr = filter_tests(&TestOpts {\n+                filter: Some(\"bas\".into()),\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(substr.len(), 4);\n+\n+        let substr = filter_tests(&TestOpts {\n+                filter: Some(\"::test\".into()),\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(substr.len(), 3);\n+\n+        let substr = filter_tests(&TestOpts {\n+                filter: Some(\"base::test\".into()),\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(substr.len(), 3);\n+\n+        let exact = filter_tests(&TestOpts {\n+                filter: Some(\"base\".into()),\n+                filter_exact: true, ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(exact.len(), 1);\n+\n+        let exact = filter_tests(&TestOpts {\n+                filter: Some(\"bas\".into()),\n+                filter_exact: true,\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(exact.len(), 0);\n+\n+        let exact = filter_tests(&TestOpts {\n+                filter: Some(\"::test\".into()),\n+                filter_exact: true,\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(exact.len(), 0);\n+\n+        let exact = filter_tests(&TestOpts {\n+                filter: Some(\"base::test\".into()),\n+                filter_exact: true,\n+                ..TestOpts::new()\n+            }, tests());\n+        assert_eq!(exact.len(), 1);\n+    }\n+\n     #[test]\n     pub fn sort_tests() {\n         let mut opts = TestOpts::new();"}, {"sha": "1aeb76c0a0ecedebe8a3d50ba6317fa2bab68868", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "patch": "@@ -127,6 +127,9 @@ pub struct Config {\n     // Only run tests that match this filter\n     pub filter: Option<String>,\n \n+    // Exactly match the filter, rather than a substring\n+    pub filter_exact: bool,\n+\n     // Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n "}, {"sha": "cbdf75eda26d2dc073395371aa9cbed0908cfba4", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bf4d6fbc0ca467f16537a5e440fda35d0e2780b/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5bf4d6fbc0ca467f16537a5e440fda35d0e2780b", "patch": "@@ -89,6 +89,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n                  \"(compile-fail|parse-fail|run-fail|run-pass|\\\n                   run-pass-valgrind|pretty|debug-info|incremental|mir-opt)\"),\n           optflag(\"\", \"ignored\", \"run tests marked as ignored\"),\n+          optflag(\"\", \"exact\", \"filters match exactly\"),\n           optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n                                  (eg. emulator, valgrind)\", \"PROGRAM\"),\n           optopt(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\"),\n@@ -167,6 +168,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         mode: matches.opt_str(\"mode\").unwrap().parse().ok().expect(\"invalid mode\"),\n         run_ignored: matches.opt_present(\"ignored\"),\n         filter: matches.free.first().cloned(),\n+        filter_exact: matches.opt_present(\"exact\"),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),\n@@ -216,6 +218,7 @@ pub fn log_config(config: &Config) {\n                     opt_str(&config.filter\n                                    .as_ref()\n                                    .map(|re| re.to_owned()))));\n+    logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(c, format!(\"runtool: {}\", opt_str(&config.runtool)));\n     logv(c, format!(\"host-rustcflags: {}\",\n                     opt_str(&config.host_rustcflags)));\n@@ -309,6 +312,7 @@ pub fn run_tests(config: &Config) {\n pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         filter: config.filter.clone(),\n+        filter_exact: config.filter_exact,\n         run_ignored: config.run_ignored,\n         quiet: config.quiet,\n         logfile: config.logfile.clone(),"}]}