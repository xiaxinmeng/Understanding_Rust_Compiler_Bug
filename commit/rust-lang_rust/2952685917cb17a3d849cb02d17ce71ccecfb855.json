{"sha": "2952685917cb17a3d849cb02d17ce71ccecfb855", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NTI2ODU5MTdjYjE3YTNkODQ5Y2IwMmQxN2NlNzFjY2VjZmI4NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T13:36:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-18T13:36:47Z"}, "message": "auto merge of #11622 : bjz/rust/simplify-primitive-trait, r=brson\n\nAs part of #10387, this removes the `Primitive::{bits, bytes, is_signed}` methods and removes the trait's operator trait constraints for the reasons outlined below:\r\n\r\n- The `Primitive::{bits, bytes}` associated functions were originally added to reflect the existing `BITS` and `BYTES`statics included in the numeric modules. These statics are only exist as a workaround for Rust's lack of CTFE, and should be deprecated in the future in favor of using the `std::mem::size_of` function (see #11621).\r\n\r\n- `Primitive::is_signed` seems to be of little utility and does not seem to be used anywhere in the Rust compiler or libraries. It is also rather ugly to call due to the `Option<Self>` workaround for #8888.\r\n\r\n- The operator trait constraints are already covered by the `Num` trait.", "tree": {"sha": "cbd9d41eab2707b91ad0f24765d4a2a6e6935370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd9d41eab2707b91ad0f24765d4a2a6e6935370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2952685917cb17a3d849cb02d17ce71ccecfb855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2952685917cb17a3d849cb02d17ce71ccecfb855", "html_url": "https://github.com/rust-lang/rust/commit/2952685917cb17a3d849cb02d17ce71ccecfb855", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2952685917cb17a3d849cb02d17ce71ccecfb855/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb40bdbb6295a989806e7c3dcc23631becdb702f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb40bdbb6295a989806e7c3dcc23631becdb702f", "html_url": "https://github.com/rust-lang/rust/commit/fb40bdbb6295a989806e7c3dcc23631becdb702f"}, {"sha": "f125b71c0081acebbfcdd60bfe517d7e4dd388d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f125b71c0081acebbfcdd60bfe517d7e4dd388d4", "html_url": "https://github.com/rust-lang/rust/commit/f125b71c0081acebbfcdd60bfe517d7e4dd388d4"}], "stats": {"total": 115, "additions": 31, "deletions": 84}, "files": [{"sha": "5b0c75ef174932d8afddfa46ec0b40f8051b4af5", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=2952685917cb17a3d849cb02d17ce71ccecfb855", "patch": "@@ -96,6 +96,9 @@ delegate!(\n     fn tanh(n: c_float) -> c_float = cmath::c_float::tanh\n )\n \n+// FIXME(#11621): These constants should be deprecated once CTFE is implemented\n+// in favour of calling their respective functions in `Bounded` and `Float`.\n+\n pub static RADIX: uint = 2u;\n \n pub static MANTISSA_DIGITS: uint = 53u;\n@@ -122,6 +125,10 @@ pub static NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // staticants from cmath.\n+\n+    // FIXME(#11621): These constants should be deprecated once CTFE is\n+    // implemented in favour of calling their respective functions in `Real`.\n+\n     /// Archimedes' constant\n     pub static PI: f32 = 3.14159265358979323846264338327950288_f32;\n \n@@ -554,16 +561,7 @@ impl Bounded for f32 {\n     fn max_value() -> f32 { 3.40282347e+38 }\n }\n \n-impl Primitive for f32 {\n-    #[inline]\n-    fn bits(_: Option<f32>) -> uint { 32 }\n-\n-    #[inline]\n-    fn bytes(_: Option<f32>) -> uint { Primitive::bits(Some(0f32)) / 8 }\n-\n-    #[inline]\n-    fn is_signed(_: Option<f32>) -> bool { true }\n-}\n+impl Primitive for f32 {}\n \n impl Float for f32 {\n     #[inline]\n@@ -1173,13 +1171,6 @@ mod tests {\n         assert!(!NAN.is_negative());\n     }\n \n-    #[test]\n-    fn test_primitive() {\n-        let none: Option<f32> = None;\n-        assert_eq!(Primitive::bits(none), mem::size_of::<f32>() * 8);\n-        assert_eq!(Primitive::bytes(none), mem::size_of::<f32>());\n-    }\n-\n     #[test]\n     fn test_is_normal() {\n         let nan: f32 = Float::nan();"}, {"sha": "95e5797ae9356e5a6985ca916d38e3ff4894736e", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=2952685917cb17a3d849cb02d17ce71ccecfb855", "patch": "@@ -101,6 +101,9 @@ delegate!(\n \n // FIXME (#1433): obtain these in a different way\n \n+// FIXME(#11621): These constants should be deprecated once CTFE is implemented\n+// in favour of calling their respective functions in `Bounded` and `Float`.\n+\n pub static RADIX: uint = 2u;\n \n pub static MANTISSA_DIGITS: uint = 53u;\n@@ -129,6 +132,10 @@ pub static NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n pub mod consts {\n     // FIXME (requires Issue #1433 to fix): replace with mathematical\n     // constants from cmath.\n+\n+    // FIXME(#11621): These constants should be deprecated once CTFE is\n+    // implemented in favour of calling their respective functions in `Real`.\n+\n     /// Archimedes' constant\n     pub static PI: f64 = 3.14159265358979323846264338327950288_f64;\n \n@@ -556,16 +563,7 @@ impl Bounded for f64 {\n     fn max_value() -> f64 { 1.7976931348623157e+308 }\n }\n \n-impl Primitive for f64 {\n-    #[inline]\n-    fn bits(_: Option<f64>) -> uint { 64 }\n-\n-    #[inline]\n-    fn bytes(_: Option<f64>) -> uint { Primitive::bits(Some(0f64)) / 8 }\n-\n-    #[inline]\n-    fn is_signed(_: Option<f64>) -> bool { true }\n-}\n+impl Primitive for f64 {}\n \n impl Float for f64 {\n     #[inline]\n@@ -1178,13 +1176,6 @@ mod tests {\n         assert!(!NAN.is_negative());\n     }\n \n-    #[test]\n-    fn test_primitive() {\n-        let none: Option<f64> = None;\n-        assert_eq!(Primitive::bits(none), mem::size_of::<f64>() * 8);\n-        assert_eq!(Primitive::bytes(none), mem::size_of::<f64>());\n-    }\n-\n     #[test]\n     fn test_is_normal() {\n         let nan: f64 = Float::nan();"}, {"sha": "7102a8997584e0991198436498648a09a33acbde", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=2952685917cb17a3d849cb02d17ce71ccecfb855", "patch": "@@ -13,11 +13,19 @@\n \n macro_rules! int_module (($T:ty, $bits:expr) => (\n \n+// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n+// calling the `mem::size_of` function.\n pub static bits : uint = $bits;\n+// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n+// calling the `mem::size_of` function.\n pub static bytes : uint = ($bits / 8);\n \n+// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n+// calling the `Bounded::min_value` function.\n pub static min_value: $T = (-1 as $T) << (bits - 1);\n // FIXME(#9837): Compute min_value like this so the high bits that shouldn't exist are 0.\n+// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n+// calling the `Bounded::max_value` function.\n pub static max_value: $T = !min_value;\n \n impl CheckedDiv for $T {\n@@ -361,16 +369,7 @@ impl Bounded for $T {\n \n impl Int for $T {}\n \n-impl Primitive for $T {\n-    #[inline]\n-    fn bits(_: Option<$T>) -> uint { bits }\n-\n-    #[inline]\n-    fn bytes(_: Option<$T>) -> uint { bits / 8 }\n-\n-    #[inline]\n-    fn is_signed(_: Option<$T>) -> bool { true }\n-}\n+impl Primitive for $T {}\n \n // String conversion functions and impl str -> num\n \n@@ -639,13 +638,6 @@ mod tests {\n         assert_eq!((0b010101 as $T).population_count(), 3);\n     }\n \n-    #[test]\n-    fn test_primitive() {\n-        let none: Option<$T> = None;\n-        assert_eq!(Primitive::bits(none), mem::size_of::<$T>() * 8);\n-        assert_eq!(Primitive::bytes(none), mem::size_of::<$T>());\n-    }\n-\n     #[test]\n     fn test_from_str() {\n         assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));"}, {"sha": "bdbf0344b47eb50516ff573f3a6b19f036dea447", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=2952685917cb17a3d849cb02d17ce71ccecfb855", "patch": "@@ -17,6 +17,7 @@\n \n use clone::{Clone, DeepClone};\n use cmp::{Eq, Ord};\n+use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use ops::{Not, BitAnd, BitOr, BitXor, Shl, Shr};\n use option::{Option, Some, None};\n@@ -425,19 +426,7 @@ pub trait Primitive: Clone\n                    + Num\n                    + NumCast\n                    + Orderable\n-                   + Bounded\n-                   + Neg<Self>\n-                   + Add<Self,Self>\n-                   + Sub<Self,Self>\n-                   + Mul<Self,Self>\n-                   + Div<Self,Self>\n-                   + Rem<Self,Self> {\n-    // FIXME (#5527): These should be associated constants\n-    // FIXME (#8888): Removing `unused_self` requires #8888 to be fixed.\n-    fn bits(unused_self: Option<Self>) -> uint;\n-    fn bytes(unused_self: Option<Self>) -> uint;\n-    fn is_signed(unused_self: Option<Self>) -> bool;\n-}\n+                   + Bounded {}\n \n /// A collection of traits relevant to primitive signed and unsigned integers\n pub trait Int: Integer\n@@ -580,7 +569,7 @@ pub trait ToPrimitive {\n macro_rules! impl_to_primitive_int_to_int(\n     ($SrcT:ty, $DstT:ty) => (\n         {\n-            if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+            if size_of::<$SrcT>() <= size_of::<$DstT>() {\n                 Some(*self as $DstT)\n             } else {\n                 let n = *self as i64;\n@@ -665,7 +654,7 @@ macro_rules! impl_to_primitive_uint_to_int(\n macro_rules! impl_to_primitive_uint_to_uint(\n     ($SrcT:ty, $DstT:ty) => (\n         {\n-            if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+            if size_of::<$SrcT>() <= size_of::<$DstT>() {\n                 Some(*self as $DstT)\n             } else {\n                 let zero: $SrcT = Zero::zero();\n@@ -721,7 +710,7 @@ impl_to_primitive_uint!(u64)\n \n macro_rules! impl_to_primitive_float_to_float(\n     ($SrcT:ty, $DstT:ty) => (\n-        if Primitive::bits(None::<$SrcT>) <= Primitive::bits(None::<$DstT>) {\n+        if size_of::<$SrcT>() <= size_of::<$DstT>() {\n             Some(*self as $DstT)\n         } else {\n             let n = *self as f64;"}, {"sha": "1b822a491c6f38c7da87984be3646c752727bdc8", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2952685917cb17a3d849cb02d17ce71ccecfb855/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=2952685917cb17a3d849cb02d17ce71ccecfb855", "patch": "@@ -285,16 +285,7 @@ impl ToStrRadix for $T {\n     }\n }\n \n-impl Primitive for $T {\n-    #[inline]\n-    fn bits(_: Option<$T>) -> uint { bits }\n-\n-    #[inline]\n-    fn bytes(_: Option<$T>) -> uint { bits / 8 }\n-\n-    #[inline]\n-    fn is_signed(_: Option<$T>) -> bool { false }\n-}\n+impl Primitive for $T {}\n \n impl Bitwise for $T {\n     /// Counts the number of bits set. Wraps LLVM's `ctpop` intrinsic.\n@@ -415,13 +406,6 @@ mod tests {\n         assert_eq!((0b010101 as $T).population_count(), 3);\n     }\n \n-    #[test]\n-    fn test_primitive() {\n-        let none: Option<$T> = None;\n-        assert_eq!(Primitive::bits(none), mem::size_of::<$T>() * 8);\n-        assert_eq!(Primitive::bytes(none), mem::size_of::<$T>());\n-    }\n-\n     #[test]\n     pub fn test_to_str() {\n         assert_eq!((0 as $T).to_str_radix(10u), ~\"0\");"}]}