{"sha": "a049550c457dc78e81ffa69d03e1619f4ff689a2", "node_id": "C_kwDOAAsO6NoAKGEwNDk1NTBjNDU3ZGM3OGU4MWZmYTY5ZDAzZTE2MTlmNGZmNjg5YTI", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-16T18:34:31Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-25T05:11:01Z"}, "message": "Move `ensure_sufficient_stack` to `try_execute_query` callers", "tree": {"sha": "66e0dd92ffaccf05b74d527d0d90b4f84bf65182", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e0dd92ffaccf05b74d527d0d90b4f84bf65182"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a049550c457dc78e81ffa69d03e1619f4ff689a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a049550c457dc78e81ffa69d03e1619f4ff689a2", "html_url": "https://github.com/rust-lang/rust/commit/a049550c457dc78e81ffa69d03e1619f4ff689a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a049550c457dc78e81ffa69d03e1619f4ff689a2/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fa60a5d25739142cd45aed22df3b10739066854", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa60a5d25739142cd45aed22df3b10739066854", "html_url": "https://github.com/rust-lang/rust/commit/5fa60a5d25739142cd45aed22df3b10739066854"}], "stats": {"total": 27, "additions": 9, "deletions": 18}, "files": [{"sha": "a8592bd70862cf8660911068d054910d5b76d924", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a049550c457dc78e81ffa69d03e1619f4ff689a2/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a049550c457dc78e81ffa69d03e1619f4ff689a2/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=a049550c457dc78e81ffa69d03e1619f4ff689a2", "patch": "@@ -124,9 +124,7 @@ impl QueryContext for QueryCtxt<'_> {\n             };\n \n             // Use the `ImplicitCtxt` while we execute the query.\n-            tls::enter_context(&new_icx, || {\n-                rustc_data_structures::stack::ensure_sufficient_stack(compute)\n-            })\n+            tls::enter_context(&new_icx, compute)\n         })\n     }\n "}, {"sha": "148d7f09f51114b9c09e585b8859b6f0de4ee61d", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a049550c457dc78e81ffa69d03e1619f4ff689a2/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a049550c457dc78e81ffa69d03e1619f4ff689a2/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=a049550c457dc78e81ffa69d03e1619f4ff689a2", "patch": "@@ -15,6 +15,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::TimingGuard;\n #[cfg(parallel_compiler)]\n use rustc_data_structures::sharded::Sharded;\n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, FatalError};\n use rustc_session::Session;\n@@ -348,8 +349,6 @@ where\n \n fn try_execute_query<Q, Qcx>(\n     qcx: Qcx,\n-    state: &QueryState<Q::Key, Qcx::DepKind>,\n-    cache: &Q::Cache,\n     span: Span,\n     key: Q::Key,\n     dep_node: Option<DepNode<Qcx::DepKind>>,\n@@ -358,9 +357,11 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n+    let state = Q::query_state(qcx);\n     match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key) {\n         TryGetJob::NotYetStarted(job) => {\n             let (result, dep_node_index) = execute_job::<Q, Qcx>(qcx, key, dep_node, job.id);\n+            let cache = Q::query_cache(qcx);\n             if Q::FEEDABLE {\n                 // We should not compute queries that also got a value via feeding.\n                 // This can't happen, as query feeding adds the very dependencies to the fed query\n@@ -381,7 +382,7 @@ where\n         }\n         #[cfg(parallel_compiler)]\n         TryGetJob::JobCompleted(query_blocked_prof_timer) => {\n-            let Some((v, index)) = cache.lookup(&key) else {\n+            let Some((v, index)) = Q::query_cache(qcx).lookup(&key) else {\n                 panic!(\"value must be in cache after waiting\")\n             };\n \n@@ -739,14 +740,8 @@ where\n         None\n     };\n \n-    let (result, dep_node_index) = try_execute_query::<Q, Qcx>(\n-        qcx,\n-        Q::query_state(qcx),\n-        Q::query_cache(qcx),\n-        span,\n-        key,\n-        dep_node,\n-    );\n+    let (result, dep_node_index) =\n+        ensure_sufficient_stack(|| try_execute_query::<Q, Qcx>(qcx, span, key, dep_node));\n     if let Some(dep_node_index) = dep_node_index {\n         qcx.dep_context().dep_graph().read_index(dep_node_index)\n     }\n@@ -762,14 +757,12 @@ where\n {\n     // We may be concurrently trying both execute and force a query.\n     // Ensure that only one of them runs the query.\n-    let cache = Q::query_cache(qcx);\n-    if let Some((_, index)) = cache.lookup(&key) {\n+    if let Some((_, index)) = Q::query_cache(qcx).lookup(&key) {\n         qcx.dep_context().profiler().query_cache_hit(index.into());\n         return;\n     }\n \n-    let state = Q::query_state(qcx);\n     debug_assert!(!Q::ANON);\n \n-    try_execute_query::<Q, _>(qcx, state, cache, DUMMY_SP, key, Some(dep_node));\n+    ensure_sufficient_stack(|| try_execute_query::<Q, _>(qcx, DUMMY_SP, key, Some(dep_node)));\n }"}]}