{"sha": "3d738b05941c2cae9a89ae7220faa6018d623b1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzM4YjA1OTQxYzJjYWU5YTg5YWU3MjIwZmFhNjAxOGQ2MjNiMWI=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-02T22:20:15Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-02T22:20:15Z"}, "message": "Inline is_machine into check_simd", "tree": {"sha": "2ba3418782f70267a22a1a09490de225683472fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ba3418782f70267a22a1a09490de225683472fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d738b05941c2cae9a89ae7220faa6018d623b1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d738b05941c2cae9a89ae7220faa6018d623b1b", "html_url": "https://github.com/rust-lang/rust/commit/3d738b05941c2cae9a89ae7220faa6018d623b1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d738b05941c2cae9a89ae7220faa6018d623b1b/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d03683caf66082e0430db5d07e67e82c5b7d676f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03683caf66082e0430db5d07e67e82c5b7d676f", "html_url": "https://github.com/rust-lang/rust/commit/d03683caf66082e0430db5d07e67e82c5b7d676f"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "edd1cd04d47e2dc13f2948c7b65dcb4f1c23aa09", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d738b05941c2cae9a89ae7220faa6018d623b1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d738b05941c2cae9a89ae7220faa6018d623b1b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=3d738b05941c2cae9a89ae7220faa6018d623b1b", "patch": "@@ -1888,14 +1888,6 @@ impl<'tcx> TyS<'tcx> {\n         matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))\n     }\n \n-    #[inline]\n-    pub fn is_machine(&self) -> bool {\n-        // Yes, RawPtr is a \"machine\" type for these purposes.\n-        // LLVM uses a vector-of-pointers model for scatter/gather ops,\n-        // which typically use a base pointer and vector of signed integers.\n-        matches!(self.kind(), Int(..) | Uint(..) | Float(..) | RawPtr(..))\n-    }\n-\n     #[inline]\n     pub fn has_concrete_skeleton(&self) -> bool {\n         !matches!(self.kind(), Param(_) | Infer(_) | Error(_))"}, {"sha": "166410731d29161ad6071bd090466c7adaeba31f", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3d738b05941c2cae9a89ae7220faa6018d623b1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d738b05941c2cae9a89ae7220faa6018d623b1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=3d738b05941c2cae9a89ae7220faa6018d623b1b", "patch": "@@ -1214,10 +1214,19 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n                 }\n             }\n \n+            // Check that we use types valid for use in the lanes of a SIMD \"vector register\"\n+            // These are scalar types which directly match a \"machine\" type\n+            // Yes: Integers, floats, \"thin\" pointers\n+            // No: char, \"fat\" pointers, compound types\n             match e.kind() {\n-                ty::Param(_) => { /* struct<T>(T, T, T, T) is ok */ }\n-                _ if e.is_machine() => { /* struct(u8, u8, u8, u8) is ok */ }\n-                ty::Array(ty, _c) if ty.is_machine() => { /* struct([f32; 4]) */ }\n+                ty::Param(_) => (), // pass struct<T>(T, T, T, T) through, let monomorphization catch errors\n+                ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_) => (), // struct(u8, u8, u8, u8) is ok\n+                ty::Array(t, _clen)\n+                    if matches!(\n+                        t.kind(),\n+                        ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::RawPtr(_)\n+                    ) =>\n+                { /* struct([f32; 4]) is ok */ }\n                 _ => {\n                     struct_span_err!(\n                         tcx.sess,"}]}