{"sha": "c06e4aca19046b07d952b16e9f002bfab38fde6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNmU0YWNhMTkwNDZiMDdkOTUyYjE2ZTlmMDAyYmZhYjM4ZmRlNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-14T07:13:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-14T07:13:31Z"}, "message": "Auto merge of #68201 - JohnTitor:rollup-26e39gu, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #67854 (Use `report_in_external_macro` for internal lints)\n - #67989 (rustdoc: Don't allow `#![feature(...)]` on stable or beta)\n - #68036 (libterm: parse extended terminfo format)\n - #68127 (Clarify the relationship between `extended` and `tools` in `config.toml`)\n - #68143 (Forbid elided lifetimes within const generic parameter types)\n - #68150 (Document behavior of set_nonblocking on UnixListener)\n - #68166 (rustdoc: HTML escape arrows on help popup)\n - #68176 (Clean up err codes)\n - #68179 (Remove unneeded scope)\n - #68188 (Tweak assertion note in format check)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "8fe9c20096ddf75571b4e9ff94a929858a4da40e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe9c20096ddf75571b4e9ff94a929858a4da40e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06e4aca19046b07d952b16e9f002bfab38fde6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06e4aca19046b07d952b16e9f002bfab38fde6b", "html_url": "https://github.com/rust-lang/rust/commit/c06e4aca19046b07d952b16e9f002bfab38fde6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06e4aca19046b07d952b16e9f002bfab38fde6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30ca215b4e38b32aa7abdd635c5e2d56f5724494", "url": "https://api.github.com/repos/rust-lang/rust/commits/30ca215b4e38b32aa7abdd635c5e2d56f5724494", "html_url": "https://github.com/rust-lang/rust/commit/30ca215b4e38b32aa7abdd635c5e2d56f5724494"}, {"sha": "b8c0e3129c0db858226f48406f6f8cb6f2a2b066", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c0e3129c0db858226f48406f6f8cb6f2a2b066", "html_url": "https://github.com/rust-lang/rust/commit/b8c0e3129c0db858226f48406f6f8cb6f2a2b066"}], "stats": {"total": 259, "additions": 183, "deletions": 76}, "files": [{"sha": "c9e17337ee23f801857093ec1237bbb833ae17b3", "filename": "config.toml.example", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -181,21 +181,23 @@\n # Indicate whether the vendored sources are used for Rust dependencies or not\n #vendor = false\n \n-# Typically the build system will build the rust compiler twice. The second\n+# Typically the build system will build the Rust compiler twice. The second\n # compiler, however, will simply use its own libraries to link against. If you\n # would rather to perform a full bootstrap, compiling the compiler three times,\n # then you can set this option to true. You shouldn't ever need to set this\n # option to true.\n #full-bootstrap = false\n \n-# Enable a build of the extended rust tool set which is not only the compiler\n+# Enable a build of the extended Rust tool set which is not only the compiler\n # but also tools such as Cargo. This will also produce \"combined installers\"\n # which are used to install Rust and Cargo together. This is disabled by\n-# default.\n+# default. The `tools` option (immediately below) specifies which tools should\n+# be built if `extended = true`.\n #extended = false\n \n-# Installs chosen set of extended tools if enabled. By default builds all.\n-# If chosen tool failed to build the installation fails.\n+# Installs chosen set of extended tools if `extended = true`. By default builds all.\n+# If chosen tool failed to build the installation fails. If `extended = false`, this\n+# option is ignored.\n #tools = [\"cargo\", \"rls\", \"clippy\", \"rustfmt\", \"analysis\", \"src\"]\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose"}, {"sha": "6e5e3fe07e7467065abd36bbef79a49863ce1c33", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -20,7 +20,15 @@ fn rustfmt(src: &Path, rustfmt: &Path, path: &Path, check: bool) {\n     cmd.arg(&path);\n     let cmd_debug = format!(\"{:?}\", cmd);\n     let status = cmd.status().expect(\"executing rustfmt\");\n-    assert!(status.success(), \"running {} successful\", cmd_debug);\n+    if !status.success() {\n+        eprintln!(\n+            \"Running `{}` failed.\\nIf you're running `tidy`, \\\n+            try again with `--bless` flag. Or, you just want to format \\\n+            code, run `./x.py fmt` instead.\",\n+            cmd_debug,\n+        );\n+        std::process::exit(1);\n+    }\n }\n \n #[derive(serde::Deserialize)]"}, {"sha": "76a0889c376a22b1367ebf67fcec7cb21dbf249a", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -2120,12 +2120,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                 (hir::ParamName::Plain(param.ident), kind)\n             }\n-            GenericParamKind::Const { ref ty } => (\n-                hir::ParamName::Plain(param.ident),\n-                hir::GenericParamKind::Const {\n-                    ty: self.lower_ty(&ty, ImplTraitContext::disallowed()),\n-                },\n-            ),\n+            GenericParamKind::Const { ref ty } => {\n+                let ty = self\n+                    .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n+                        this.lower_ty(&ty, ImplTraitContext::disallowed())\n+                    });\n+\n+                (hir::ParamName::Plain(param.ident), hir::GenericParamKind::Const { ty })\n+            }\n         };\n \n         hir::GenericParam {"}, {"sha": "46b773bdc50d6e56cba5b05214b4bad1ad79646c", "filename": "src/librustc_error_codes/error_codes/E0191.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0191.md", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0191.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0191.md?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -1,5 +1,6 @@\n-Trait objects need to have all associated types specified. Erroneous code\n-example:\n+An associated type wasn't specified for a trait object.\n+\n+Erroneous code example:\n \n ```compile_fail,E0191\n trait Trait {\n@@ -10,8 +11,9 @@ type Foo = Trait; // error: the value of the associated type `Bar` (from\n                   //        the trait `Trait`) must be specified\n ```\n \n-Please verify you specified all associated types of the trait and that you\n-used the right trait. Example:\n+Trait objects need to have all associated types specified. Please verify that\n+all associated types of the trait were specified and the correct trait was used.\n+Example:\n \n ```\n trait Trait {"}, {"sha": "5fd951b2e86cb906c8f92ec8ec74b9b53b1ca157", "filename": "src/librustc_error_codes/error_codes/E0192.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0192.md", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_error_codes%2Ferror_codes%2FE0192.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0192.md?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -1,3 +1,19 @@\n+A negative impl was added on a trait implementation.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0192\n+trait Trait {\n+    type Bar;\n+}\n+\n+struct Foo;\n+\n+impl !Trait for Foo { } //~ ERROR E0192\n+\n+fn main() {}\n+```\n+\n Negative impls are only allowed for auto traits. For more\n information see the [opt-in builtin traits RFC][RFC 19].\n "}, {"sha": "5a5aedc2e9715b33bff96069e1868ab2b43fa0d7", "filename": "src/librustc_lint/internal.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_lint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_lint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Finternal.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -12,7 +12,8 @@ use syntax::ast::{Ident, Item, ItemKind};\n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,\n     Allow,\n-    \"forbid HashMap and HashSet and suggest the FxHash* variants\"\n+    \"forbid HashMap and HashSet and suggest the FxHash* variants\",\n+    report_in_external_macro: true\n }\n \n pub struct DefaultHashTypes {\n@@ -52,19 +53,22 @@ impl EarlyLintPass for DefaultHashTypes {\n declare_tool_lint! {\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,\n-    \"usage of `ty::TyKind` outside of the `ty::sty` module\"\n+    \"usage of `ty::TyKind` outside of the `ty::sty` module\",\n+    report_in_external_macro: true\n }\n \n declare_tool_lint! {\n     pub rustc::TY_PASS_BY_REFERENCE,\n     Allow,\n-    \"passing `Ty` or `TyCtxt` by reference\"\n+    \"passing `Ty` or `TyCtxt` by reference\",\n+    report_in_external_macro: true\n }\n \n declare_tool_lint! {\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n-    \"using `ty::{Ty,TyCtxt}` instead of importing it\"\n+    \"using `ty::{Ty,TyCtxt}` instead of importing it\",\n+    report_in_external_macro: true\n }\n \n declare_lint_pass!(TyTyKind => ["}, {"sha": "889f6099070aebc863863ff68c56d28157ca4a2f", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -1049,6 +1049,7 @@ pub mod kw {\n }\n \n // This module has a very short name because it's used a lot.\n+#[allow(rustc::default_hash_types)]\n pub mod sym {\n     use super::Symbol;\n     use std::convert::TryInto;"}, {"sha": "56013ee3a816ffb42106d29d2bd2b9bd1e3fd6c6", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 26, "deletions": 32, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -560,8 +560,8 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     lifetime_to_bounds.entry(lifetime).or_default().extend(bounds);\n                 }\n                 WherePredicate::EqPredicate { lhs, rhs } => {\n-                    match &lhs {\n-                        &Type::QPath { name: ref left_name, ref self_type, ref trait_ } => {\n+                    match lhs {\n+                        Type::QPath { name: ref left_name, ref self_type, ref trait_ } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n                                 Type::ResolvedPath {\n@@ -580,36 +580,30 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         continue;\n                                     }\n \n-                                    // FIXME: Remove this scope when NLL lands\n-                                    {\n-                                        let args = &mut new_trait_path\n-                                            .segments\n-                                            .last_mut()\n-                                            .expect(\"segments were empty\")\n-                                            .args;\n-\n-                                        match args {\n-                                            // Convert somethiung like '<T as Iterator::Item> = u8'\n-                                            // to 'T: Iterator<Item=u8>'\n-                                            &mut GenericArgs::AngleBracketed {\n-                                                ref mut bindings,\n-                                                ..\n-                                            } => {\n-                                                bindings.push(TypeBinding {\n-                                                    name: left_name.clone(),\n-                                                    kind: TypeBindingKind::Equality { ty: rhs },\n-                                                });\n-                                            }\n-                                            &mut GenericArgs::Parenthesized { .. } => {\n-                                                existing_predicates.push(\n-                                                    WherePredicate::EqPredicate {\n-                                                        lhs: lhs.clone(),\n-                                                        rhs,\n-                                                    },\n-                                                );\n-                                                continue; // If something other than a Fn ends up\n-                                                // with parenthesis, leave it alone\n-                                            }\n+                                    let args = &mut new_trait_path\n+                                        .segments\n+                                        .last_mut()\n+                                        .expect(\"segments were empty\")\n+                                        .args;\n+\n+                                    match args {\n+                                        // Convert somethiung like '<T as Iterator::Item> = u8'\n+                                        // to 'T: Iterator<Item=u8>'\n+                                        GenericArgs::AngleBracketed {\n+                                            ref mut bindings, ..\n+                                        } => {\n+                                            bindings.push(TypeBinding {\n+                                                name: left_name.clone(),\n+                                                kind: TypeBindingKind::Equality { ty: rhs },\n+                                            });\n+                                        }\n+                                        GenericArgs::Parenthesized { .. } => {\n+                                            existing_predicates.push(WherePredicate::EqPredicate {\n+                                                lhs: lhs.clone(),\n+                                                rhs,\n+                                            });\n+                                            continue; // If something other than a Fn ends up\n+                                            // with parenthesis, leave it alone\n                                         }\n                                     }\n "}, {"sha": "4c8b8112fa85a1c49aa319248394029385ce4ced", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -307,8 +307,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         cg: codegen_options,\n         externs,\n         target_triple: target,\n-        // Ensure that rustdoc works even if rustc is feature-staged\n-        unstable_features: UnstableFeatures::Allow,\n+        unstable_features: UnstableFeatures::from_environment(),\n         actually_rustdoc: true,\n         debugging_opts: debugging_options,\n         error_format,"}, {"sha": "809d38a7ead8fa9749c953b5706db8f249bc2d99", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -2663,8 +2663,8 @@ function getSearchElement() {\n             \"Accepted types are: <code>fn</code>, <code>mod</code>, <code>struct</code>, \\\n              <code>enum</code>, <code>trait</code>, <code>type</code>, <code>macro</code>, \\\n              and <code>const</code>.\",\n-            \"Search functions by type signature (e.g., <code>vec -> usize</code> or \\\n-             <code>* -> vec</code>)\",\n+            \"Search functions by type signature (e.g., <code>vec -&gt; usize</code> or \\\n+             <code>* -&gt; vec</code>)\",\n             \"Search multiple things at once by splitting your query with comma (e.g., \\\n              <code>str,u8</code> or <code>String,struct:Vec,test</code>)\",\n             \"You can look for items with an exact name by putting double quotes around \\"}, {"sha": "4c3cb67c9ee0f795eff34a31f57acc960966cf72", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -902,6 +902,12 @@ impl UnixListener {\n \n     /// Moves the socket into or out of nonblocking mode.\n     ///\n+    /// This will result in the `accept` operation becoming nonblocking,\n+    /// i.e., immediately returning from their calls. If the IO operation is\n+    /// successful, `Ok` is returned and no further action is required. If the\n+    /// IO operation could not be completed and needs to be retried, an error\n+    /// with kind [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -913,6 +919,8 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../../../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}, {"sha": "2116b433fce3f8c50d44897bf74b2b9e7c675276", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -91,7 +91,7 @@ pub fn stderr() -> Option<Box<StderrTerminal>> {\n #[allow(missing_docs)]\n pub mod color {\n     /// Number for a terminal color\n-    pub type Color = u16;\n+    pub type Color = u32;\n \n     pub const BLACK: Color = 0;\n     pub const RED: Color = 1;"}, {"sha": "918875e792a662aa46c0330a02f5d08a20d30590", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -24,7 +24,7 @@ pub struct TermInfo {\n     /// Map of capability name to boolean value\n     pub bools: HashMap<String, bool>,\n     /// Map of capability name to numeric value\n-    pub numbers: HashMap<String, u16>,\n+    pub numbers: HashMap<String, u32>,\n     /// Map of capability name to raw (unexpanded) string\n     pub strings: HashMap<String, Vec<u8>>,\n }\n@@ -129,7 +129,7 @@ fn cap_for_attr(attr: Attr) -> &'static str {\n /// A Terminal that knows how many colors it supports, with a reference to its\n /// parsed Terminfo database record.\n pub struct TerminfoTerminal<T> {\n-    num_colors: u16,\n+    num_colors: u32,\n     out: T,\n     ti: TermInfo,\n }"}, {"sha": "fbc5aebdb2c6ca4c5b8d1585b2417e0e01b2909e", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -159,16 +159,16 @@ pub static stringnames: &[&str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n \n fn read_le_u16(r: &mut dyn io::Read) -> io::Result<u16> {\n     let mut b = [0; 2];\n-    let mut amt = 0;\n-    while amt < b.len() {\n-        match r.read(&mut b[amt..])? {\n-            0 => return Err(io::Error::new(io::ErrorKind::Other, \"end of file\")),\n-            n => amt += n,\n-        }\n-    }\n+    r.read_exact(&mut b)?;\n     Ok((b[0] as u16) | ((b[1] as u16) << 8))\n }\n \n+fn read_le_u32(r: &mut dyn io::Read) -> io::Result<u32> {\n+    let mut b = [0; 4];\n+    r.read_exact(&mut b)?;\n+    Ok((b[0] as u32) | ((b[1] as u32) << 8) | ((b[2] as u32) << 16) | ((b[3] as u32) << 24))\n+}\n+\n fn read_byte(r: &mut dyn io::Read) -> io::Result<u8> {\n     match r.bytes().next() {\n         Some(s) => s,\n@@ -194,9 +194,12 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n \n     // Check magic number\n     let magic = t!(read_le_u16(file));\n-    if magic != 0x011A {\n-        return Err(format!(\"invalid magic number: expected {:x}, found {:x}\", 0x011A, magic));\n-    }\n+\n+    let extended = match magic {\n+        0o0432 => false,\n+        0o01036 => true,\n+        _ => return Err(format!(\"invalid magic number, found {:o}\", magic)),\n+    };\n \n     // According to the spec, these fields must be >= -1 where -1 means that the feature is not\n     // supported. Using 0 instead of -1 works because we skip sections with length 0.\n@@ -258,11 +261,15 @@ pub fn parse(file: &mut dyn io::Read, longnames: bool) -> Result<TermInfo, Strin\n         t!(read_byte(file)); // compensate for padding\n     }\n \n-    let numbers_map: HashMap<String, u16> = t! {\n-        (0..numbers_count).filter_map(|i| match read_le_u16(file) {\n-            Ok(0xFFFF) => None,\n-            Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n-            Err(e) => Some(Err(e))\n+    let numbers_map: HashMap<String, u32> = t! {\n+        (0..numbers_count).filter_map(|i| {\n+            let number = if extended { read_le_u32(file) } else { read_le_u16(file).map(Into::into) };\n+\n+            match number {\n+                Ok(0xFFFF) => None,\n+                Ok(n) => Some(Ok((nnames[i].to_string(), n))),\n+                Err(e) => Some(Err(e))\n+            }\n         }).collect()\n     };\n \n@@ -318,7 +325,7 @@ pub fn msys_terminfo() -> TermInfo {\n     strings.insert(\"setab\".to_string(), b\"\\x1B[4%p1%dm\".to_vec());\n \n     let mut numbers = HashMap::new();\n-    numbers.insert(\"colors\".to_string(), 8u16);\n+    numbers.insert(\"colors\".to_string(), 8);\n \n     TermInfo {\n         names: vec![\"cygwin\".to_string()], // msys is a fork of an older cygwin version"}, {"sha": "c24cf9518aa2539e9e829d9c6e6e081f5942634e", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -89,7 +89,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n         _ => unreachable!(),\n     };\n \n-    color | (bits & 0x8) // copy the hi-intensity bit\n+    color | (u32::from(bits) & 0x8) // copy the hi-intensity bit\n }\n \n impl<T: Write + Send + 'static> WinConsole<T> {"}, {"sha": "5679dd35c307aace6e575f23c281bcc20b1fa99e", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.rs?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -0,0 +1,24 @@\n+// Elided lifetimes within the type of a const generic parameters is disallowed. This matches the\n+// behaviour of trait bounds where `fn foo<T: Ord<&u8>>() {}` is illegal. Though we could change\n+// elided lifetimes within the type of a const generic parameters to be 'static, like elided\n+// lifetimes within const/static items.\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct A<const N: &u8>;\n+//~^ ERROR `&` without an explicit lifetime name cannot be used here\n+trait B {}\n+\n+impl<const N: &u8> A<N> { //~ ERROR `&` without an explicit lifetime name cannot be used here\n+    fn foo<const M: &u8>(&self) {}\n+    //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+}\n+\n+impl<const N: &u8> B for A<N> {}\n+//~^ ERROR `&` without an explicit lifetime name cannot be used here\n+\n+fn bar<const N: &u8>() {}\n+//~^ ERROR `&` without an explicit lifetime name cannot be used here\n+\n+fn main() {}"}, {"sha": "93133c507fe40a844d9cd58d04fa566b22b6522c", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c06e4aca19046b07d952b16e9f002bfab38fde6b/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.stderr?ref=c06e4aca19046b07d952b16e9f002bfab38fde6b", "patch": "@@ -0,0 +1,40 @@\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:9:19\n+   |\n+LL | struct A<const N: &u8>;\n+   |                   ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:13:15\n+   |\n+LL | impl<const N: &u8> A<N> {\n+   |               ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:14:21\n+   |\n+LL |     fn foo<const M: &u8>(&self) {}\n+   |                     ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:18:15\n+   |\n+LL | impl<const N: &u8> B for A<N> {}\n+   |               ^ explicit lifetime name needed here\n+\n+error[E0637]: `&` without an explicit lifetime name cannot be used here\n+  --> $DIR/const-param-elided-lifetime.rs:21:17\n+   |\n+LL | fn bar<const N: &u8>() {}\n+   |                 ^ explicit lifetime name needed here\n+\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-elided-lifetime.rs:6:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to 5 previous errors\n+"}]}