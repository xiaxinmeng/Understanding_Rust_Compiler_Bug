{"sha": "c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjBmZDgyM2JhMWNiZDc4MTY3ZjBmM2RjYTMyYjY4ZDlmMjMwOGE=", "commit": {"author": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-05-01T21:52:44Z"}, "committer": {"name": "Alexey Shmalko", "email": "rasen.dubi@gmail.com", "date": "2019-05-02T13:38:29Z"}, "message": "Rework Version::parse to avoid extra allocations", "tree": {"sha": "133d03b38578d35a3fec6f2490cdeaac10622000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133d03b38578d35a3fec6f2490cdeaac10622000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "html_url": "https://github.com/rust-lang/rust/commit/c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c120fd823ba1cbd78167f0f3dca32b68d9f2308a/comments", "author": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasendubi", "id": 1366419, "node_id": "MDQ6VXNlcjEzNjY0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1366419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasendubi", "html_url": "https://github.com/rasendubi", "followers_url": "https://api.github.com/users/rasendubi/followers", "following_url": "https://api.github.com/users/rasendubi/following{/other_user}", "gists_url": "https://api.github.com/users/rasendubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasendubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasendubi/subscriptions", "organizations_url": "https://api.github.com/users/rasendubi/orgs", "repos_url": "https://api.github.com/users/rasendubi/repos", "events_url": "https://api.github.com/users/rasendubi/events{/privacy}", "received_events_url": "https://api.github.com/users/rasendubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4fe7ef37c3ff2afcfda8577f010d3fe926bde5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4fe7ef37c3ff2afcfda8577f010d3fe926bde5", "html_url": "https://github.com/rust-lang/rust/commit/3b4fe7ef37c3ff2afcfda8577f010d3fe926bde5"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "48ecbe3380745cdaf924712f3d096006c41683e5", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c120fd823ba1cbd78167f0f3dca32b68d9f2308a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c120fd823ba1cbd78167f0f3dca32b68d9f2308a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "patch": "@@ -147,7 +147,7 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n     }\n }\n \n-fn format_features<'a>(features: &'a Features, family: &'a str) -> impl Iterator<Item=String> + 'a {\n+fn format_features<'a>(features: &'a Features, family: &'a str) -> impl Iterator<Item = String> + 'a {\n     features.iter().map(move |(name, feature)| {\n         format!(\"{:<32} {:<8} {:<12} {:<8}\",\n                 name,"}, {"sha": "8d1ebccbff670b465440ef148db32c8f9cb9d5b5", "filename": "src/tools/tidy/src/features/version.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c120fd823ba1cbd78167f0f3dca32b68d9f2308a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c120fd823ba1cbd78167f0f3dca32b68d9f2308a/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures%2Fversion.rs?ref=c120fd823ba1cbd78167f0f3dca32b68d9f2308a", "patch": "@@ -1,7 +1,6 @@\n use std::str::FromStr;\n use std::num::ParseIntError;\n use std::fmt;\n-use std::convert::TryInto;\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Version {\n@@ -10,16 +9,14 @@ pub struct Version {\n \n impl fmt::Display for Version {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let x = self.parts.iter().map(|x| x.to_string()).collect::<Vec<_>>().join(\".\");\n-        f.pad(&x)\n+        f.pad(&format!(\"{}.{}.{}\", self.parts[0], self.parts[1], self.parts[2]))\n     }\n }\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum ParseVersionError {\n     ParseIntError(ParseIntError),\n-    // core::array::TryFromSlice is not exported from std, so we invent our own variant\n-    WrongNumberOfParts\n+    WrongNumberOfParts,\n }\n \n impl From<ParseIntError> for ParseVersionError {\n@@ -32,10 +29,23 @@ impl FromStr for Version {\n     type Err = ParseVersionError;\n \n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        let parts: Vec<_> = s.split('.').map(|part| part.parse()).collect::<Result<_, _>>()?;\n-        Ok(Self {\n-            parts: parts.as_slice().try_into() .or(Err(ParseVersionError::WrongNumberOfParts))?,\n-        })\n+        let mut iter = s.split('.').map(|part| Ok(part.parse()?));\n+\n+        let parts = {\n+            let mut part = || {\n+                iter.next()\n+                    .unwrap_or(Err(ParseVersionError::WrongNumberOfParts))\n+            };\n+\n+            [part()?, part()?, part()?]\n+        };\n+\n+        if let Some(_) = iter.next() {\n+            // Ensure we don't have more than 3 parts.\n+            return Err(ParseVersionError::WrongNumberOfParts);\n+        }\n+\n+        Ok(Self { parts })\n     }\n }\n "}]}