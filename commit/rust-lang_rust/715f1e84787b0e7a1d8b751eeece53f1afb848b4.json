{"sha": "715f1e84787b0e7a1d8b751eeece53f1afb848b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNWYxZTg0Nzg3YjBlN2ExZDhiNzUxZWVlY2U1M2YxYWZiODQ4YjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-22T06:54:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T06:54:49Z"}, "message": "Rollup merge of #72133 - bdbai:master, r=joshtriplett\n\nAdd target thumbv7a-uwp-windows-msvc\n\nAdd target spec for thumbv7a-uwp-windows-msvc, so that libraries written in Rust will have a chance to run on ARM-based devices with Windows 10.\n\nSo far I managed to create a proof-of-concept library for Universal Windows Platform apps to consume and it worked on a Windows Phone. However, building a standalone executable seemed troublesome due to `LLVM ERROR: target does not implement codeview register mapping` stuff (see also https://github.com/rust-lang/rust/issues/52659#issuecomment-408233322 ).\n\nSteps to test:\n1. Clone and build this version\n```sh\ngit clone https://github.com/bdbai/rust.git\ncd rust\npython x.py build -i --target thumbv7a-uwp-windows-msvc --stage 1 src/libstd\nrustup toolchain link arm-uwp-stage1 .\\build\\x86_64-pc-windows-msvc\\stage1\\\n```\n2. Create a new library crate\n```sh\ncargo new --lib arm-uwp-test\ncd arm-uwp-test\n```\n3. Change `crate-type` in `Cargo.toml` to `staticlib`\n```toml\n[lib]\ncrate-type=[\"staticlib\"]\n```\n4. Replace the following code in `src/lib.rs`\n```rust\n#[no_mangle]\npub extern \"system\" fn call_rust() -> i32 {\n    2333\n}\n```\n5. Build the crate\n```sh\ncargo +arm-uwp-stage1 build -v --target thumbv7a-uwp-windows-msvc\n```\n6. `arm-uwp-test.lib` should appear in `target\\thumbv7a-uwp-windows-msvc\\debug`\n\nTo consume this library:\n1. Make sure Visual Studio 2017 and Windows 10 SDK (10.0.17134 or above) are installed\n2. Create a new Blank App (C++/WinRT) in Visual Studio 2017 (Visual Studio 2019 cannot deploy UWP apps to Windows Phone)\n3. Go to Property Pages, and then Linker->Input->Additional Dependencies, add `arm-uwp-test.lib` produced just now\n4. Manually declare function prototypes in `MainPage.h`\n```c++\nextern \"C\" {\n    int call_rust();\n}\n```\n5. Replace the `ClickHandler` part in `MainPage.cpp`\n```c++\nmyButton().Content(box_value(std::to_wstring(call_rust())));\n```\n6. Build and deploy this app to an ARM device running Windows 10. The app should run and show `2333` when the button is clicked.", "tree": {"sha": "6140016095bac9f8a6083a0540b2d283930eea51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6140016095bac9f8a6083a0540b2d283930eea51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/715f1e84787b0e7a1d8b751eeece53f1afb848b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex3c6CRBK7hj4Ov3rIwAAdHIIAHVq5pXjHuTz3+H7qNRE2GzP\nKOd+Y6jeZ0cYHzjqMoBVSgs9TjEIu35D6ftZmxo7EC+k6CwPvgIEiEC5hCIw9NBp\nQ1lE/gRAxqrb8gWhmg4ASbzZQTfJeRzyNk2HDxMztUraJaXbyL6dC/nj9eqCVsF6\n9wu307YmsvKmFBVMBR6scnIOM4IH7Cb987jlT67rlnT57X6p3PXe/OmbreUKLrsB\nOifZiulpaKqxjH2VdQ4FN4DMJqcQzl/lbXv1ibifA4VlBu/SPGehtGeio93NkcMy\njiHtX1ZZ80mP/SW5hZQ+lzf+FW7lhgeQ1HOPrNM0zkl+N1+M2qdHb+D3uMXC9Dk=\n=eRKO\n-----END PGP SIGNATURE-----\n", "payload": "tree 6140016095bac9f8a6083a0540b2d283930eea51\nparent ee0c7d486f1d97814b12c1dc9476234a1d35fe40\nparent 5bfb7e7437dac924825be123f7c9645b4e4367e5\nauthor Ralf Jung <post@ralfj.de> 1590130489 +0200\ncommitter GitHub <noreply@github.com> 1590130489 +0200\n\nRollup merge of #72133 - bdbai:master, r=joshtriplett\n\nAdd target thumbv7a-uwp-windows-msvc\n\nAdd target spec for thumbv7a-uwp-windows-msvc, so that libraries written in Rust will have a chance to run on ARM-based devices with Windows 10.\n\nSo far I managed to create a proof-of-concept library for Universal Windows Platform apps to consume and it worked on a Windows Phone. However, building a standalone executable seemed troublesome due to `LLVM ERROR: target does not implement codeview register mapping` stuff (see also https://github.com/rust-lang/rust/issues/52659#issuecomment-408233322 ).\n\nSteps to test:\n1. Clone and build this version\n```sh\ngit clone https://github.com/bdbai/rust.git\ncd rust\npython x.py build -i --target thumbv7a-uwp-windows-msvc --stage 1 src/libstd\nrustup toolchain link arm-uwp-stage1 .\\build\\x86_64-pc-windows-msvc\\stage1\\\n```\n2. Create a new library crate\n```sh\ncargo new --lib arm-uwp-test\ncd arm-uwp-test\n```\n3. Change `crate-type` in `Cargo.toml` to `staticlib`\n```toml\n[lib]\ncrate-type=[\"staticlib\"]\n```\n4. Replace the following code in `src/lib.rs`\n```rust\n#[no_mangle]\npub extern \"system\" fn call_rust() -> i32 {\n    2333\n}\n```\n5. Build the crate\n```sh\ncargo +arm-uwp-stage1 build -v --target thumbv7a-uwp-windows-msvc\n```\n6. `arm-uwp-test.lib` should appear in `target\\thumbv7a-uwp-windows-msvc\\debug`\n\nTo consume this library:\n1. Make sure Visual Studio 2017 and Windows 10 SDK (10.0.17134 or above) are installed\n2. Create a new Blank App (C++/WinRT) in Visual Studio 2017 (Visual Studio 2019 cannot deploy UWP apps to Windows Phone)\n3. Go to Property Pages, and then Linker->Input->Additional Dependencies, add `arm-uwp-test.lib` produced just now\n4. Manually declare function prototypes in `MainPage.h`\n```c++\nextern \"C\" {\n    int call_rust();\n}\n```\n5. Replace the `ClickHandler` part in `MainPage.cpp`\n```c++\nmyButton().Content(box_value(std::to_wstring(call_rust())));\n```\n6. Build and deploy this app to an ARM device running Windows 10. The app should run and show `2333` when the button is clicked.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/715f1e84787b0e7a1d8b751eeece53f1afb848b4", "html_url": "https://github.com/rust-lang/rust/commit/715f1e84787b0e7a1d8b751eeece53f1afb848b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/715f1e84787b0e7a1d8b751eeece53f1afb848b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0c7d486f1d97814b12c1dc9476234a1d35fe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0c7d486f1d97814b12c1dc9476234a1d35fe40", "html_url": "https://github.com/rust-lang/rust/commit/ee0c7d486f1d97814b12c1dc9476234a1d35fe40"}, {"sha": "5bfb7e7437dac924825be123f7c9645b4e4367e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfb7e7437dac924825be123f7c9645b4e4367e5", "html_url": "https://github.com/rust-lang/rust/commit/5bfb7e7437dac924825be123f7c9645b4e4367e5"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "83faffb09ab18a6b18feae0c7b32a52eeed6f136", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=715f1e84787b0e7a1d8b751eeece53f1afb848b4", "patch": "@@ -183,6 +183,7 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n                     \"x86_64\" => Some(\"x64\".to_string()),\n                     \"x86\" => Some(\"x86\".to_string()),\n                     \"aarch64\" => Some(\"arm64\".to_string()),\n+                    \"arm\" => Some(\"arm\".to_string()),\n                     _ => None,\n                 };\n                 if let Some(ref a) = arch {"}, {"sha": "df17231633ebefa2812414e8b49351dcdc8fa381", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=715f1e84787b0e7a1d8b751eeece53f1afb848b4", "patch": "@@ -618,6 +618,7 @@ supported_targets! {\n     (\"i686-uwp-windows-msvc\", i686_uwp_windows_msvc),\n     (\"i586-pc-windows-msvc\", i586_pc_windows_msvc),\n     (\"thumbv7a-pc-windows-msvc\", thumbv7a_pc_windows_msvc),\n+    (\"thumbv7a-uwp-windows-msvc\", thumbv7a_uwp_windows_msvc),\n \n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),"}, {"sha": "ff2e89210060768b555c0cc85618388f950064f5", "filename": "src/librustc_target/spec/thumbv7a_uwp_windows_msvc.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715f1e84787b0e7a1d8b751eeece53f1afb848b4/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_uwp_windows_msvc.rs?ref=715f1e84787b0e7a1d8b751eeece53f1afb848b4", "patch": "@@ -0,0 +1,30 @@\n+use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::windows_uwp_msvc_base::opts();\n+    base.max_atomic_width = Some(64);\n+    base.has_elf_tls = true;\n+\n+    // FIXME(jordanrh): use PanicStrategy::Unwind when SEH is\n+    // implemented for windows/arm in LLVM\n+    base.panic_strategy = PanicStrategy::Abort;\n+\n+    Ok(Target {\n+        llvm_target: \"thumbv7a-pc-windows-msvc\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        arch: \"arm\".to_string(),\n+        target_os: \"windows\".to_string(),\n+        target_env: \"msvc\".to_string(),\n+        target_vendor: \"uwp\".to_string(),\n+        linker_flavor: LinkerFlavor::Msvc,\n+        options: TargetOptions {\n+            features: \"+vfp3,+neon\".to_string(),\n+            cpu: \"generic\".to_string(),\n+            abi_blacklist: super::arm_base::abi_blacklist(),\n+            ..base\n+        },\n+    })\n+}"}]}