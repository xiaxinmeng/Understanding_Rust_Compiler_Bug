{"sha": "71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjcwZTk1ZWQxYzRiMzhiM2U1OTk0YTY2NzJlYjdiNDJmMzZmMmY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T23:24:43Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-12T23:24:43Z"}, "message": "Implement unary operators for integers.", "tree": {"sha": "b9b199c597094d374117723efc7ca3a0a85b8472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b199c597094d374117723efc7ca3a0a85b8472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "html_url": "https://github.com/rust-lang/rust/commit/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b099391aaf65b83385a92cced4eed8d7f02d94c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b099391aaf65b83385a92cced4eed8d7f02d94c2", "html_url": "https://github.com/rust-lang/rust/commit/b099391aaf65b83385a92cced4eed8d7f02d94c2"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "b42e4235cb8ce63172055b2265ed504f5a843a02", "filename": "src/interpreter.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "patch": "@@ -8,7 +8,7 @@ use syntax::attr::AttrMetaMethods;\n enum Value {\n     Uninit,\n     Bool(bool),\n-    Int(i64),\n+    Int(i64), // FIXME: Should be bit-width aware.\n }\n \n struct Interpreter<'tcx> {\n@@ -58,32 +58,45 @@ impl<'tcx> Interpreter<'tcx> {\n     fn eval_rvalue(&mut self, rvalue: &mir::Rvalue) -> Value {\n         use rustc_mir::repr::Rvalue::*;\n         use rustc_mir::repr::BinOp::*;\n+        use rustc_mir::repr::UnOp::*;\n \n         match *rvalue {\n             Use(ref operand) => self.eval_operand(operand),\n+\n             BinaryOp(bin_op, ref left, ref right) => {\n                 match (self.eval_operand(left), self.eval_operand(right)) {\n-                    (Value::Int(l), Value::Int(r)) => match bin_op {\n-                        Add => Value::Int(l + r),\n-                        Sub => Value::Int(l - r),\n-                        Mul => Value::Int(l * r),\n-                        Div => Value::Int(l / r),\n-                        Rem => Value::Int(l % r),\n-                        BitXor => Value::Int(l ^ r),\n-                        BitAnd => Value::Int(l & r),\n-                        BitOr => Value::Int(l | r),\n-                        Shl => Value::Int(l << r),\n-                        Shr => Value::Int(l >> r),\n-                        Eq => Value::Bool(l == r),\n-                        Lt => Value::Bool(l < r),\n-                        Le => Value::Bool(l <= r),\n-                        Ne => Value::Bool(l != r),\n-                        Ge => Value::Bool(l >= r),\n-                        Gt => Value::Bool(l > r),\n-                    },\n+                    (Value::Int(l), Value::Int(r)) => {\n+                        match bin_op {\n+                            Add => Value::Int(l + r),\n+                            Sub => Value::Int(l - r),\n+                            Mul => Value::Int(l * r),\n+                            Div => Value::Int(l / r),\n+                            Rem => Value::Int(l % r),\n+                            BitXor => Value::Int(l ^ r),\n+                            BitAnd => Value::Int(l & r),\n+                            BitOr => Value::Int(l | r),\n+                            Shl => Value::Int(l << r),\n+                            Shr => Value::Int(l >> r),\n+                            Eq => Value::Bool(l == r),\n+                            Lt => Value::Bool(l < r),\n+                            Le => Value::Bool(l <= r),\n+                            Ne => Value::Bool(l != r),\n+                            Ge => Value::Bool(l >= r),\n+                            Gt => Value::Bool(l > r),\n+                        }\n+                    }\n+                    _ => unimplemented!(),\n+                }\n+            }\n+\n+            UnaryOp(un_op, ref operand) => {\n+                match (un_op, self.eval_operand(operand)) {\n+                    (Not, Value::Int(n)) => Value::Int(!n),\n+                    (Neg, Value::Int(n)) => Value::Int(-n),\n                     _ => unimplemented!(),\n                 }\n             }\n+\n             _ => unimplemented!(),\n         }\n     }"}, {"sha": "9eb5851a14e52a0807ffa99689b66161a33ff8ee", "filename": "test/basic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f/test%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f/test%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fbasic.rs?ref=71f70e95ed1c4b38b3e5994a6672eb7b42f36f2f", "patch": "@@ -6,6 +6,11 @@ fn ret() -> i32 {\n     1\n }\n \n+#[miri_run(expected = \"Int(-1)\")]\n+fn neg() -> i32 {\n+    -1\n+}\n+\n #[miri_run(expected = \"Int(3)\")]\n fn add() -> i32 {\n     1 + 2"}]}