{"sha": "f42dac0ce04e372d413dcc374f2e0cf1e40dff6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MmRhYzBjZTA0ZTM3MmQ0MTNkY2MzNzRmMmUwY2YxZTQwZGZmNmE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-23T18:15:47Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-09-09T22:25:59Z"}, "message": "Document btree's unwrap_unchecked", "tree": {"sha": "d1cd144e8478bf07f36f5a2e56026619e077d4f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1cd144e8478bf07f36f5a2e56026619e077d4f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a", "html_url": "https://github.com/rust-lang/rust/commit/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "url": "https://api.github.com/repos/rust-lang/rust/commits/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471", "html_url": "https://github.com/rust-lang/rust/commit/d92155bf6ae0b7d79fc83cbeeb0cc0c765353471"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "1a836f11499ec8189f4734e75053990cb3bad5ff", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42dac0ce04e372d413dcc374f2e0cf1e40dff6a/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=f42dac0ce04e372d413dcc374f2e0cf1e40dff6a", "patch": "@@ -13,6 +13,9 @@ trait Recover<Q: ?Sized> {\n     fn replace(&mut self, key: Self::Key) -> Option<Self::Key>;\n }\n \n+/// Same purpose as `Option::unwrap` but doesn't always guarantee a panic\n+/// if the option contains no value.\n+/// SAFETY: the caller must ensure that the option contains a value.\n #[inline(always)]\n pub unsafe fn unwrap_unchecked<T>(val: Option<T>) -> T {\n     val.unwrap_or_else(|| {"}]}