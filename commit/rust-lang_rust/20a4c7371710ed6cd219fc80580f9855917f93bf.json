{"sha": "20a4c7371710ed6cd219fc80580f9855917f93bf", "node_id": "C_kwDOAAsO6NoAKDIwYTRjNzM3MTcxMGVkNmNkMjE5ZmM4MDU4MGY5ODU1OTE3ZjkzYmY", "commit": {"author": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-12-08T19:56:23Z"}, "committer": {"name": "Pointerbender", "email": "pointerbender@gmail.com", "date": "2022-12-08T19:56:23Z"}, "message": "add graceful shim for the custom `O_TMPFILE` linux file opening flag plus test case", "tree": {"sha": "1d17e04addc1bcb9310ef1173871ecb59ba3b2f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d17e04addc1bcb9310ef1173871ecb59ba3b2f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a4c7371710ed6cd219fc80580f9855917f93bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a4c7371710ed6cd219fc80580f9855917f93bf", "html_url": "https://github.com/rust-lang/rust/commit/20a4c7371710ed6cd219fc80580f9855917f93bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a4c7371710ed6cd219fc80580f9855917f93bf/comments", "author": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pointerbender", "id": 81013316, "node_id": "MDQ6VXNlcjgxMDEzMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/81013316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pointerbender", "html_url": "https://github.com/Pointerbender", "followers_url": "https://api.github.com/users/Pointerbender/followers", "following_url": "https://api.github.com/users/Pointerbender/following{/other_user}", "gists_url": "https://api.github.com/users/Pointerbender/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pointerbender/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pointerbender/subscriptions", "organizations_url": "https://api.github.com/users/Pointerbender/orgs", "repos_url": "https://api.github.com/users/Pointerbender/repos", "events_url": "https://api.github.com/users/Pointerbender/events{/privacy}", "received_events_url": "https://api.github.com/users/Pointerbender/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552b63c1619498f1a17fd482f4bb87815d8fdc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/552b63c1619498f1a17fd482f4bb87815d8fdc48", "html_url": "https://github.com/rust-lang/rust/commit/552b63c1619498f1a17fd482f4bb87815d8fdc48"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "bf99412af65f386f9dff227269e02d76c9e1beda", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20a4c7371710ed6cd219fc80580f9855917f93bf/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a4c7371710ed6cd219fc80580f9855917f93bf/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=20a4c7371710ed6cd219fc80580f9855917f93bf", "patch": "@@ -605,6 +605,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             // (Technically we do not support *not* setting this flag, but we ignore that.)\n             mirror |= o_cloexec;\n         }\n+        if this.tcx.sess.target.os == \"linux\" {\n+            let o_tmpfile = this.eval_libc_i32(\"O_TMPFILE\")?;\n+            if flag & o_tmpfile != 0 {\n+                // if the flag contains `O_TMPFILE` then we return a graceful error\n+                let eopnotsupp = this.eval_libc(\"EOPNOTSUPP\")?;\n+                this.set_last_error(eopnotsupp)?;\n+                return Ok(-1);\n+            }\n+        }\n         // If `flag` is not equal to `mirror`, there is an unsupported option enabled in `flag`,\n         // then we throw an error.\n         if flag != mirror {"}, {"sha": "93c0fad9c1043754d5a685331e0c790495bd0e82", "filename": "src/tools/miri/tests/pass-dep/shims/libc-fs.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20a4c7371710ed6cd219fc80580f9855917f93bf/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a4c7371710ed6cd219fc80580f9855917f93bf/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-fs.rs?ref=20a4c7371710ed6cd219fc80580f9855917f93bf", "patch": "@@ -6,7 +6,7 @@\n \n use std::convert::TryInto;\n use std::ffi::CString;\n-use std::fs::{canonicalize, remove_file, File};\n+use std::fs::{canonicalize, remove_dir_all, remove_file, File};\n use std::io::{Error, ErrorKind, Write};\n use std::os::unix::ffi::OsStrExt;\n use std::path::PathBuf;\n@@ -18,6 +18,8 @@ fn main() {\n     test_file_open_unix_allow_two_args();\n     test_file_open_unix_needs_three_args();\n     test_file_open_unix_extra_third_arg();\n+    #[cfg(target_os = \"linux\")]\n+    test_o_tmpfile_flag();\n }\n \n fn tmp() -> PathBuf {\n@@ -45,6 +47,15 @@ fn prepare(filename: &str) -> PathBuf {\n     path\n }\n \n+/// Prepare directory: compute directory name and make sure it does not exist.\n+#[allow(unused)]\n+fn prepare_dir(dirname: &str) -> PathBuf {\n+    let path = tmp().join(&dirname);\n+    // Clean the directory for robustness.\n+    remove_dir_all(&path).ok();\n+    path\n+}\n+\n /// Prepare like above, and also write some initial content to the file.\n fn prepare_with_content(filename: &str, content: &[u8]) -> PathBuf {\n     let path = prepare(filename);\n@@ -135,3 +146,22 @@ fn test_readlink() {\n     assert_eq!(res, -1);\n     assert_eq!(Error::last_os_error().kind(), ErrorKind::NotFound);\n }\n+\n+#[cfg(target_os = \"linux\")]\n+fn test_o_tmpfile_flag() {\n+    use std::fs::{create_dir, OpenOptions};\n+    use std::os::unix::fs::OpenOptionsExt;\n+    let dir_path = prepare_dir(\"miri_test_fs_dir\");\n+    create_dir(&dir_path).unwrap();\n+    // test that the `O_TMPFILE` custom flag gracefully errors instead of stopping execution\n+    assert_eq!(\n+        Some(libc::EOPNOTSUPP),\n+        OpenOptions::new()\n+            .read(true)\n+            .write(true)\n+            .custom_flags(libc::O_TMPFILE)\n+            .open(dir_path)\n+            .unwrap_err()\n+            .raw_os_error(),\n+    );\n+}"}]}