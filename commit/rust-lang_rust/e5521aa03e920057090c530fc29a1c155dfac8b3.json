{"sha": "e5521aa03e920057090c530fc29a1c155dfac8b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTIxYWEwM2U5MjAwNTcwOTBjNTMwZmMyOWExYzE1NWRmYWM4YjM=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-02-25T03:52:56Z"}, "committer": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2012-02-25T03:52:56Z"}, "message": "AST fuzzer: remove ignores for fixed issues; update issue URLs", "tree": {"sha": "a0e80c6ba1b28287679d1f30d62e76fdec32fedd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e80c6ba1b28287679d1f30d62e76fdec32fedd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5521aa03e920057090c530fc29a1c155dfac8b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5521aa03e920057090c530fc29a1c155dfac8b3", "html_url": "https://github.com/rust-lang/rust/commit/e5521aa03e920057090c530fc29a1c155dfac8b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5521aa03e920057090c530fc29a1c155dfac8b3/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "url": "https://api.github.com/repos/rust-lang/rust/commits/f455dc1976c2eeea3c840cfbcf7be8d9490e4113", "html_url": "https://github.com/rust-lang/rust/commit/f455dc1976c2eeea3c840cfbcf7be8d9490e4113"}], "stats": {"total": 63, "additions": 20, "deletions": 43}, "files": [{"sha": "e914569b826ea81ef1565813006654d5121c3f72", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 20, "deletions": 43, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e5521aa03e920057090c530fc29a1c155dfac8b3/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5521aa03e920057090c530fc29a1c155dfac8b3/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=e5521aa03e920057090c530fc29a1c155dfac8b3", "patch": "@@ -21,7 +21,7 @@ fn contains(haystack: str, needle: str) -> bool {\n \n fn find_rust_files(&files: [str], path: str) {\n     if str::ends_with(path, \".rs\") && !contains(path, \"utf8\") {\n-        // ignoring \"utf8\" tests: https://github.com/graydon/rust/pull/1470 ?\n+        // ignoring \"utf8\" tests because something is broken\n         files += [path];\n     } else if fs::path_is_dir(path)\n         && !contains(path, \"compile-fail\")\n@@ -75,10 +75,10 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_for(_, _, _) { false }\n           ast::expr_while(_, _) { false }\n \n-          // https://github.com/graydon/rust/issues/955\n+          // https://github.com/mozilla/rust/issues/955\n           ast::expr_do_while(_, _) { false }\n \n-          // https://github.com/graydon/rust/issues/929\n+          // https://github.com/mozilla/rust/issues/929\n           ast::expr_cast(_, _) { false }\n           ast::expr_assert(_) { false }\n           ast::expr_binary(_, _, _) { false }\n@@ -88,17 +88,17 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           ast::expr_fail(option::none) { false }\n           ast::expr_ret(option::none) { false }\n \n-          // https://github.com/graydon/rust/issues/953\n+          // https://github.com/mozilla/rust/issues/953\n           ast::expr_fail(option::some(_)) { false }\n \n-          // https://github.com/graydon/rust/issues/927\n+          // https://github.com/mozilla/rust/issues/927\n           //ast::expr_assert(_) { false }\n           ast::expr_check(_, _) { false }\n \n-          // https://github.com/graydon/rust/issues/928\n+          // https://github.com/mozilla/rust/issues/928\n           //ast::expr_cast(_, _) { false }\n \n-          // https://github.com/graydon/rust/issues/1458\n+          // https://github.com/mozilla/rust/issues/1458\n           ast::expr_call(_, _, _) { false }\n \n           _ { true }\n@@ -110,15 +110,15 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n \n fn safe_to_steal_ty(t: @ast::ty, tm: test_mode) -> bool {\n     alt t.node {\n-        // https://github.com/graydon/rust/issues/971\n+        // https://github.com/mozilla/rust/issues/971\n         ast::ty_constr(_, _) { false }\n \n         // Other restrictions happen to be the same.\n         _ { safe_to_replace_ty(t.node, tm) }\n     }\n }\n \n-// Not type-parameterized: https://github.com/graydon/rust/issues/898\n+// Not type-parameterized: https://github.com/mozilla/rust/issues/898 (FIXED)\n fn stash_expr_if(c: fn@(@ast::expr, test_mode)->bool,\n                  es: @mutable [ast::expr],\n                  e: @ast::expr,\n@@ -154,7 +154,7 @@ fn steal(crate: ast::crate, tm: test_mode) -> stolen_stuff {\n \n fn safe_to_replace_expr(e: ast::expr_, _tm: test_mode) -> bool {\n     alt e {\n-      // https://github.com/graydon/rust/issues/652\n+      // https://github.com/mozilla/rust/issues/652\n       ast::expr_if(_, _, _) { false }\n       ast::expr_block(_) { false }\n \n@@ -344,19 +344,18 @@ fn check_running(exe_filename: str) -> happiness {\n     } else if contains(comb, \"leaked memory in rust main loop\") {\n         // might also use exit code 134\n         //failed(\"Leaked\")\n-        known_bug(\"https://github.com/graydon/rust/issues/910\")\n+        known_bug(\"https://github.com/mozilla/rust/issues/910\")\n     } else if contains(comb, \"src/rt/\") {\n         failed(\"Mentioned src/rt/\")\n     } else if contains(comb, \"malloc\") {\n-        //failed(\"Mentioned malloc\")\n-        known_bug(\"https://github.com/graydon/rust/issues/1461\")\n+        failed(\"Mentioned malloc\")\n     } else {\n         alt p.status {\n             0         { passed }\n             100       { cleanly_rejected(\"running: explicit fail\") }\n             101 | 247 { cleanly_rejected(\"running: timed out\") }\n-            245 | 246 | 138 | 252 { known_bug(\"https://github.com/graydon/rust/issues/1466\") }\n-            136 | 248 { known_bug(\"SIGFPE - https://github.com/graydon/rust/issues/944\") }\n+            245 | 246 | 138 | 252 { known_bug(\"https://github.com/mozilla/rust/issues/1466\") }\n+            136 | 248 { known_bug(\"SIGFPE - https://github.com/mozilla/rust/issues/944\") }\n             rc        { failed(\"Rust program ran but exited with status \" + int::str(rc)) }\n         }\n     }\n@@ -369,36 +368,20 @@ fn check_compiling(filename: str) -> happiness {\n \n     //#error(\"Status: %d\", p.status);\n     if p.err != \"\" {\n-        if contains(p.err, \"Ptr must be a pointer to Val type\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/897\")\n-        } else if contains(p.err, \"Assertion failed: ((i >= FTy->getNumParams() || FTy->getParamType(i) == Args[i]->getType()) && \\\"Calling a function with a bad signature!\\\"), function init\") {\n-            known_bug(\"https://github.com/graydon/rust/issues/1459\")\n+        if false {\n+            known_bug(\"...\")\n         } else {\n             log(error, \"Stderr: \" + p.err);\n             failed(\"Unfamiliar error message\")\n         }\n     } else if p.status == 0 {\n         passed\n-    } else if contains(p.out, \"Out of stack space, sorry\") {\n-        known_bug(\"Recursive types - https://github.com/graydon/rust/issues/742\")\n     } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n         log(error, \"Stdout: \" + p.out);\n         failed(\"Looks like an llvm assertion failure\")\n \n-    } else if contains(p.out, \"upcall fail 'option none'\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/1463\")\n-    } else if contains(p.out, \"upcall fail 'non-exhaustive match failure', ../src/comp/middle/typeck.rs:1554\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/1462\")\n-    } else if contains(p.out, \"upcall fail 'Assertion cx.fcx.llupvars.contains_key(did.node) failed'\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/1467\")\n     } else if contains(p.out, \"Taking the value of a method does not work yet (issue #435)\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/435\")\n-    } else if contains(p.out, \"internal compiler error bit_num: asked for pred constraint, found an init constraint\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/933\")\n-    } else if contains(p.out, \"internal compiler error\") && contains(p.out, \"called on non-fn type\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/1460\")\n-    } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n-        known_bug(\"https://github.com/graydon/rust/issues/1465\")\n+        known_bug(\"https://github.com/mozilla/rust/issues/435\")\n     } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(\"Something unimplemented\")\n     } else if contains(p.out, \"internal compiler error\") {\n@@ -455,7 +438,6 @@ fn has_raw_pointers(c: ast::crate) -> bool {\n fn content_is_dangerous_to_run(code: str) -> bool {\n     let dangerous_patterns =\n         [\"xfail-test\",\n-         \"-> !\",    // https://github.com/graydon/rust/issues/897\n          \"import\",  // espeically fs, run\n          \"native\",\n          \"unsafe\",\n@@ -467,12 +449,7 @@ fn content_is_dangerous_to_run(code: str) -> bool {\n \n fn content_is_dangerous_to_compile(code: str) -> bool {\n     let dangerous_patterns =\n-        [\"xfail-test\",\n-         \"-> !\",    // https://github.com/graydon/rust/issues/897\n-         \"enum\",     // typeck hang with ty variants:   https://github.com/graydon/rust/issues/742 (from dup #900)\n-         \"with\",    // tstate hang with expr variants: https://github.com/graydon/rust/issues/948\n-         \"import comm\" // mysterious hang: https://github.com/graydon/rust/issues/1464\n-         ];\n+        [\"xfail-test\"];\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n     ret false;\n@@ -486,7 +463,7 @@ fn content_might_not_converge(code: str) -> bool {\n          \"spawn\",      // precedence issues?\n          \"bind\",       // precedence issues?\n          \" be \",       // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n-         \"\\n\\n\\n\\n\\n\"  // https://github.com/graydon/rust/issues/850\n+         \"\\n\\n\\n\\n\\n\"  // https://github.com/mozilla/rust/issues/850\n         ];\n \n     for p: str in confusing_patterns { if contains(code, p) { ret true; } }\n@@ -541,7 +518,7 @@ fn check_convergence(files: [str]) {\n             let s = @result::get(io::read_whole_file_str(file));\n             if !content_might_not_converge(*s) {\n                 #error(\"pp converge: %s\", file);\n-                // Change from 7u to 2u once https://github.com/graydon/rust/issues/850 is fixed\n+                // Change from 7u to 2u once https://github.com/mozilla/rust/issues/850 is fixed\n                 check_roundtrip_convergence(s, 7u);\n             }\n         }"}]}