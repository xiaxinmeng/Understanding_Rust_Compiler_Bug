{"sha": "bb9c3ed8764077455b6e726ba49c9845e03f4f0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWMzZWQ4NzY0MDc3NDU1YjZlNzI2YmE0OWM5ODQ1ZTAzZjRmMGM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-01-20T23:40:02Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:24Z"}, "message": "Added some generic number functions to core::num\n\nAlso fixes previous commit not compiling due to not finding Option.", "tree": {"sha": "49b63de8e1668f3b37719c694971b3879ec82e01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49b63de8e1668f3b37719c694971b3879ec82e01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9c3ed8764077455b6e726ba49c9845e03f4f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9c3ed8764077455b6e726ba49c9845e03f4f0c", "html_url": "https://github.com/rust-lang/rust/commit/bb9c3ed8764077455b6e726ba49c9845e03f4f0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9c3ed8764077455b6e726ba49c9845e03f4f0c/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d83017ec249d5a338001acba30f7b717c7507e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d83017ec249d5a338001acba30f7b717c7507e", "html_url": "https://github.com/rust-lang/rust/commit/05d83017ec249d5a338001acba30f7b717c7507e"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "15f9754873f3e41821acf7b10221db0a1b4280f3", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/bb9c3ed8764077455b6e726ba49c9845e03f4f0c/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9c3ed8764077455b6e726ba49c9845e03f4f0c/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=bb9c3ed8764077455b6e726ba49c9845e03f4f0c", "patch": "@@ -59,4 +59,93 @@ pub trait ToStrRadix {\n \n pub trait FromStrRadix {\n     static pub pure fn from_str_radix(str: &str, radix: uint) -> Option<self>;\n+}\n+\n+// Generic math functions:\n+\n+/// Dynamically calculates the value `inf` (`1/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn infinity<T: Num One Zero>() -> T {\n+    let _0: T = Zero::zero();\n+    let _1: T = One::one();\n+    _1 / _0\n+}\n+\n+/// Dynamically calculates the value `-inf` (`-1/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn neg_infinity<T: Num One Zero>() -> T {\n+    let _0: T = Zero::zero();\n+    let _1: T = One::one();\n+    - _1 / _0\n+}\n+\n+/// Dynamically calculates the value `NaN` (`0/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn NaN<T: Num Zero>() -> T {\n+    let _0: T = Zero::zero();\n+    _0 / _0\n+}\n+\n+/// Returns `true` if `num` has the value `inf` (`1/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn is_infinity<T: Num One Zero Eq>(num: &T) -> bool {\n+    (*num) == (infinity::<T>())\n+}\n+\n+/// Returns `true` if `num` has the value `-inf` (`-1/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn is_neg_infinity<T: Num One Zero Eq>(num: &T) -> bool {\n+    (*num) == (neg_infinity::<T>())\n+}\n+\n+/// Returns `true` if `num` has the value `NaN` (is not equal to itself).\n+#[inline(always)]\n+pub pure fn is_NaN<T: Num Eq>(num: &T) -> bool {\n+    (*num) != (*num)\n+}\n+\n+/// Returns `true` if `num` has the value `-0` (`1/num == -1/0`).\n+/// Can fail on integer types.\n+#[inline(always)]\n+pub pure fn is_neg_zero<T: Num One Zero Eq>(num: &T) -> bool {\n+    let _1: T = One::one();\n+    let _0: T = Zero::zero();\n+    *num == _0 && is_neg_infinity(&(_1 / *num))\n+}\n+\n+/**\n+ * Calculates a power to a given radix, optimized for uint `pow` and `radix`.\n+ *\n+ * Returns `radix^pow` as `T`.\n+ *\n+ * Note:\n+ * Also returns `1` for `0^0`, despite that technically being an\n+ * undefined number. The Reason for this is twofold:\n+ * - If code written to use this function cares about that special case, it's\n+ *   probably going to catch it before making the call.\n+ * - If code written to use this function doesn't care about it, it's\n+ *   probably assuming that `x^0` always equals `1`.\n+ */ \n+pub pure fn pow_with_uint<T: Num One Zero>(radix: uint, pow: uint) -> T {\n+    let _0: T = Zero::zero();\n+    let _1: T = One::one();\n+\n+    if pow   == 0u { return _1; }\n+    if radix == 0u { return _0; }\n+    let mut my_pow     = pow;\n+    let mut total      = _1;\n+    let mut multiplier = Num::from_int(radix as int);\n+    while (my_pow > 0u) {\n+        if my_pow % 2u == 1u {\n+            total *= multiplier;\n+        }\n+        my_pow     /= 2u;\n+        multiplier *= multiplier;\n+    }\n+    total\n }\n\\ No newline at end of file"}]}