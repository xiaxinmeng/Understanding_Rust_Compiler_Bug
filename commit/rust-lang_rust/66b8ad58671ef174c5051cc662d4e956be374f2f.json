{"sha": "66b8ad58671ef174c5051cc662d4e956be374f2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjhhZDU4NjcxZWYxNzRjNTA1MWNjNjYyZDRlOTU2YmUzNzRmMmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T17:56:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-11T18:01:23Z"}, "message": "borrowck: Integrate AutoBorrowObj into borrowck / mem_categorization\n\nAlso cleanup the treatment of mutability in mem_categorization, which still\nincluded the concept of interior mutability. At some point, we should\nrefactor the types to exclude the possibility of interior mutability rather\nthan just ignoring the mutability value in those cases.", "tree": {"sha": "90936500acbf3572eafe976d2443b52231bb2516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90936500acbf3572eafe976d2443b52231bb2516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b8ad58671ef174c5051cc662d4e956be374f2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b8ad58671ef174c5051cc662d4e956be374f2f", "html_url": "https://github.com/rust-lang/rust/commit/66b8ad58671ef174c5051cc662d4e956be374f2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b8ad58671ef174c5051cc662d4e956be374f2f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bceb98084b0e1010d123f48785a89bc7ad7e40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bceb98084b0e1010d123f48785a89bc7ad7e40f", "html_url": "https://github.com/rust-lang/rust/commit/1bceb98084b0e1010d123f48785a89bc7ad7e40f"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "620a1e9efe33f8095f1f795ed6e4c67a41c92d34", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -362,7 +362,7 @@ impl<'self> CheckLoanCtxt<'self> {\n                     }\n \n                     mc::cat_discr(b, _) |\n-                    mc::cat_deref(b, _, mc::uniq_ptr(*)) => {\n+                    mc::cat_deref(b, _, mc::uniq_ptr) => {\n                         assert_eq!(cmt.mutbl, mc::McInherited);\n                         cmt = b;\n                     }"}, {"sha": "24a6e5b6e0b2b230cf4c5348c24466fa3e2606a7", "filename": "src/librustc/middle/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -173,7 +173,7 @@ fn check_is_legal_to_move_from(bccx: @BorrowckCtxt,\n             }\n         }\n \n-        mc::cat_deref(b, _, mc::uniq_ptr(*)) |\n+        mc::cat_deref(b, _, mc::uniq_ptr) |\n         mc::cat_discr(b, _) => {\n             check_is_legal_to_move_from(bccx, cmt0, b)\n         }"}, {"sha": "b315a7a2e72908a677671cd90f6492f79cc1f295", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -74,7 +74,7 @@ impl GuaranteeLifetimeContext {\n             mc::cat_arg(*) |                           // L-Local\n             mc::cat_self(*) |                          // L-Local\n             mc::cat_deref(_, _, mc::region_ptr(*)) |   // L-Deref-Borrowed\n-            mc::cat_deref(_, _, mc::unsafe_ptr) => {\n+            mc::cat_deref(_, _, mc::unsafe_ptr(*)) => {\n                 let scope = self.scope(cmt);\n                 self.check_scope(scope)\n             }\n@@ -108,7 +108,7 @@ impl GuaranteeLifetimeContext {\n             }\n \n             mc::cat_downcast(base) |\n-            mc::cat_deref(base, _, mc::uniq_ptr(*)) |  // L-Deref-Send\n+            mc::cat_deref(base, _, mc::uniq_ptr) |     // L-Deref-Send\n             mc::cat_interior(base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n             }\n@@ -347,7 +347,7 @@ impl GuaranteeLifetimeContext {\n                 r\n             }\n             mc::cat_downcast(cmt) |\n-            mc::cat_deref(cmt, _, mc::uniq_ptr(*)) |\n+            mc::cat_deref(cmt, _, mc::uniq_ptr) |\n             mc::cat_deref(cmt, _, mc::gc_ptr(*)) |\n             mc::cat_interior(cmt, _) |\n             mc::cat_stack_upvar(cmt) |"}, {"sha": "6ebc4b49b3779558199d300fe47e302d4534d273", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -352,13 +352,21 @@ impl GatherLoanCtxt {\n                                              r)\n                     }\n                     ty::AutoBorrowFn(r) => {\n-                        let cmt_deref = mcx.cat_deref_fn(expr, cmt, 0);\n+                        let cmt_deref = mcx.cat_deref_fn_or_obj(expr, cmt, 0);\n                         self.guarantee_valid(expr.id,\n                                              expr.span,\n                                              cmt_deref,\n                                              m_imm,\n                                              r)\n                     }\n+                    ty::AutoBorrowObj(r, m) => {\n+                        let cmt_deref = mcx.cat_deref_fn_or_obj(expr, cmt, 0);\n+                        self.guarantee_valid(expr.id,\n+                                             expr.span,\n+                                             cmt_deref,\n+                                             m,\n+                                             r)\n+                    }\n                     ty::AutoUnsafe(_) => {}\n                 }\n             }"}, {"sha": "46bb23e400ee59df4759812ca9fa233d29c40cba", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -101,7 +101,7 @@ impl RestrictionsContext {\n                 self.extend(result, cmt.mutbl, LpInterior(i), restrictions)\n             }\n \n-            mc::cat_deref(cmt_base, _, mc::uniq_ptr(*)) => {\n+            mc::cat_deref(cmt_base, _, mc::uniq_ptr) => {\n                 // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n@@ -194,7 +194,7 @@ impl RestrictionsContext {\n                 }\n             }\n \n-            mc::cat_deref(_, _, mc::unsafe_ptr) => {\n+            mc::cat_deref(_, _, mc::unsafe_ptr(*)) => {\n                 // We are very trusting when working with unsafe pointers.\n                 Safe\n             }"}, {"sha": "283724447f831fab8fadc2b5adfca1fb0ae96cbf", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 49, "deletions": 44, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b8ad58671ef174c5051cc662d4e956be374f2f/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=66b8ad58671ef174c5051cc662d4e956be374f2f", "patch": "@@ -84,10 +84,10 @@ pub struct CopiedUpvar {\n // different kinds of pointers:\n #[deriving(Eq)]\n pub enum ptr_kind {\n-    uniq_ptr(ast::mutability),\n+    uniq_ptr,\n     gc_ptr(ast::mutability),\n     region_ptr(ast::mutability, ty::Region),\n-    unsafe_ptr\n+    unsafe_ptr(ast::mutability)\n }\n \n // We use the term \"interior\" to mean \"something reachable from the\n@@ -156,39 +156,45 @@ pub enum deref_kind {\n // pointer adjustment).\n pub fn opt_deref_kind(t: ty::t) -> Option<deref_kind> {\n     match ty::get(t).sty {\n-        ty::ty_uniq(mt) => {\n-            Some(deref_ptr(uniq_ptr(mt.mutbl)))\n-        }\n-\n+        ty::ty_uniq(_) |\n+        ty::ty_trait(_, _, ty::UniqTraitStore, _, _) |\n         ty::ty_evec(_, ty::vstore_uniq) |\n         ty::ty_estr(ty::vstore_uniq) |\n         ty::ty_closure(ty::ClosureTy {sigil: ast::OwnedSigil, _}) => {\n-            Some(deref_ptr(uniq_ptr(m_imm)))\n+            Some(deref_ptr(uniq_ptr))\n         }\n \n         ty::ty_rptr(r, mt) |\n         ty::ty_evec(mt, ty::vstore_slice(r)) => {\n             Some(deref_ptr(region_ptr(mt.mutbl, r)))\n         }\n \n+        ty::ty_trait(_, _, ty::RegionTraitStore(r), m, _) => {\n+            Some(deref_ptr(region_ptr(m, r)))\n+        }\n+\n         ty::ty_estr(ty::vstore_slice(r)) |\n         ty::ty_closure(ty::ClosureTy {sigil: ast::BorrowedSigil,\n                                       region: r, _}) => {\n             Some(deref_ptr(region_ptr(ast::m_imm, r)))\n         }\n \n-        ty::ty_box(mt) |\n-        ty::ty_evec(mt, ty::vstore_box) => {\n+        ty::ty_box(ref mt) |\n+        ty::ty_evec(ref mt, ty::vstore_box) => {\n             Some(deref_ptr(gc_ptr(mt.mutbl)))\n         }\n \n+        ty::ty_trait(_, _, ty::BoxTraitStore, m, _) => {\n+            Some(deref_ptr(gc_ptr(m)))\n+        }\n+\n         ty::ty_estr(ty::vstore_box) |\n         ty::ty_closure(ty::ClosureTy {sigil: ast::ManagedSigil, _}) => {\n             Some(deref_ptr(gc_ptr(ast::m_imm)))\n         }\n \n-        ty::ty_ptr(*) => {\n-            Some(deref_ptr(unsafe_ptr))\n+        ty::ty_ptr(ref mt) => {\n+            Some(deref_ptr(unsafe_ptr(mt.mutbl)))\n         }\n \n         ty::ty_enum(*) |\n@@ -631,20 +637,19 @@ impl mem_categorization_ctxt {\n         }\n     }\n \n-    pub fn cat_deref_fn<N:ast_node>(&self,\n-                                    node: N,\n-                                    base_cmt: cmt,\n-                                    deref_cnt: uint)\n-                                    -> cmt {\n+    pub fn cat_deref_fn_or_obj<N:ast_node>(&self,\n+                                           node: N,\n+                                           base_cmt: cmt,\n+                                           deref_cnt: uint)\n+                                           -> cmt {\n         // Bit of a hack: the \"dereference\" of a function pointer like\n         // `@fn()` is a mere logical concept. We interpret it as\n         // dereferencing the environment pointer; of course, we don't\n         // know what type lies at the other end, so we just call it\n         // `()` (the empty tuple).\n \n-        let mt = ty::mt {ty: ty::mk_tup(self.tcx, ~[]),\n-                         mutbl: m_imm};\n-        return self.cat_deref_common(node, base_cmt, deref_cnt, mt);\n+        let opaque_ty = ty::mk_tup(self.tcx, ~[]);\n+        return self.cat_deref_common(node, base_cmt, deref_cnt, opaque_ty);\n     }\n \n     pub fn cat_deref<N:ast_node>(&self,\n@@ -662,25 +667,25 @@ impl mem_categorization_ctxt {\n             }\n         };\n \n-        return self.cat_deref_common(node, base_cmt, deref_cnt, mt);\n+        return self.cat_deref_common(node, base_cmt, deref_cnt, mt.ty);\n     }\n \n     pub fn cat_deref_common<N:ast_node>(&self,\n                                         node: N,\n                                         base_cmt: cmt,\n                                         deref_cnt: uint,\n-                                        mt: ty::mt)\n+                                        deref_ty: ty::t)\n                                         -> cmt {\n         match deref_kind(self.tcx, base_cmt.ty) {\n             deref_ptr(ptr) => {\n                 // for unique ptrs, we inherit mutability from the\n                 // owning reference.\n                 let m = match ptr {\n-                    uniq_ptr(*) => {\n-                        self.inherited_mutability(base_cmt.mutbl, mt.mutbl)\n+                    uniq_ptr => {\n+                        base_cmt.mutbl.inherit()\n                     }\n-                    gc_ptr(*) | region_ptr(_, _) | unsafe_ptr => {\n-                        MutabilityCategory::from_mutbl(mt.mutbl)\n+                    gc_ptr(m) | region_ptr(m, _) | unsafe_ptr(m) => {\n+                        MutabilityCategory::from_mutbl(m)\n                     }\n                 };\n \n@@ -689,18 +694,18 @@ impl mem_categorization_ctxt {\n                     span:node.span(),\n                     cat:cat_deref(base_cmt, deref_cnt, ptr),\n                     mutbl:m,\n-                    ty:mt.ty\n+                    ty:deref_ty\n                 }\n             }\n \n             deref_interior(interior) => {\n-                let m = self.inherited_mutability(base_cmt.mutbl, mt.mutbl);\n+                let m = base_cmt.mutbl.inherit();\n                 @cmt_ {\n                     id:node.id(),\n                     span:node.span(),\n                     cat:cat_interior(base_cmt, interior),\n                     mutbl:m,\n-                    ty:mt.ty\n+                    ty:deref_ty\n                 }\n             }\n         }\n@@ -742,8 +747,8 @@ impl mem_categorization_ctxt {\n         //! - `derefs`: the deref number to be used for\n         //!   the implicit index deref, if any (see above)\n \n-        let mt = match ty::index(base_cmt.ty) {\n-          Some(mt) => mt,\n+        let element_ty = match ty::index(base_cmt.ty) {\n+          Some(ref mt) => mt.ty,\n           None => {\n             self.tcx.sess.span_bug(\n                 elt.span(),\n@@ -757,11 +762,11 @@ impl mem_categorization_ctxt {\n             // for unique ptrs, we inherit mutability from the\n             // owning reference.\n             let m = match ptr {\n-              uniq_ptr(*) => {\n-                self.inherited_mutability(base_cmt.mutbl, mt.mutbl)\n+              uniq_ptr => {\n+                base_cmt.mutbl.inherit()\n               }\n-              gc_ptr(_) | region_ptr(_, _) | unsafe_ptr => {\n-                MutabilityCategory::from_mutbl(mt.mutbl)\n+              gc_ptr(m) | region_ptr(m, _) | unsafe_ptr(m) => {\n+                MutabilityCategory::from_mutbl(m)\n               }\n             };\n \n@@ -771,31 +776,31 @@ impl mem_categorization_ctxt {\n                 span:elt.span(),\n                 cat:cat_deref(base_cmt, derefs, ptr),\n                 mutbl:m,\n-                ty:mt.ty\n+                ty:element_ty\n             };\n \n-            interior(elt, deref_cmt, base_cmt.ty, m, mt)\n+            interior(elt, deref_cmt, base_cmt.ty, m, element_ty)\n           }\n \n           deref_interior(_) => {\n             // fixed-length vectors have no deref\n-            let m = self.inherited_mutability(base_cmt.mutbl, mt.mutbl);\n-            interior(elt, base_cmt, base_cmt.ty, m, mt)\n+            let m = base_cmt.mutbl.inherit();\n+            interior(elt, base_cmt, base_cmt.ty, m, element_ty)\n           }\n         };\n \n         fn interior<N: ast_node>(elt: N,\n                                  of_cmt: cmt,\n                                  vec_ty: ty::t,\n                                  mutbl: MutabilityCategory,\n-                                 mt: ty::mt) -> cmt\n+                                 element_ty: ty::t) -> cmt\n         {\n             @cmt_ {\n                 id:elt.id(),\n                 span:elt.span(),\n                 cat:cat_interior(of_cmt, InteriorElement(element_kind(vec_ty))),\n                 mutbl:mutbl,\n-                ty:mt.ty\n+                ty:element_ty\n             }\n         }\n     }\n@@ -1130,7 +1135,7 @@ impl cmt_ {\n             cat_stack_upvar(b) |\n             cat_discr(b, _) |\n             cat_interior(b, _) |\n-            cat_deref(b, _, uniq_ptr(*)) => {\n+            cat_deref(b, _, uniq_ptr) => {\n                 b.guarantor()\n             }\n         }\n@@ -1177,7 +1182,7 @@ impl cmt_ {\n \n             cat_downcast(b) |\n             cat_stack_upvar(b) |\n-            cat_deref(b, _, uniq_ptr(*)) |\n+            cat_deref(b, _, uniq_ptr) |\n             cat_interior(b, _) |\n             cat_discr(b, _) => {\n                 b.freely_aliasable()\n@@ -1230,10 +1235,10 @@ impl Repr for categorization {\n \n pub fn ptr_sigil(ptr: ptr_kind) -> ~str {\n     match ptr {\n-        uniq_ptr(_) => ~\"~\",\n+        uniq_ptr => ~\"~\",\n         gc_ptr(_) => ~\"@\",\n         region_ptr(_, _) => ~\"&\",\n-        unsafe_ptr => ~\"*\"\n+        unsafe_ptr(_) => ~\"*\"\n     }\n }\n "}]}