{"sha": "362f598a753ac99d59ac33f6fad7052c0459a3d0", "node_id": "C_kwDOAAsO6NoAKDM2MmY1OThhNzUzYWM5OWQ1OWFjMzNmNmZhZDcwNTJjMDQ1OWEzZDA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-19T15:22:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-19T15:22:48Z"}, "message": "Rollup merge of #97142 - SparrowLii:inline, r=tmiasko\n\nmove processing of `source_scope_data` into `MutVisitor`'s impl of `Integrator` when inline\n\nThis PR fixes the FIXME in the inline mir-opt which moves processing of `source_scope_data` into `MutVisitor`'s impl of `Integrator` when inline", "tree": {"sha": "6085c38dbc5e7015308af14801e52ba4db2959f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6085c38dbc5e7015308af14801e52ba4db2959f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362f598a753ac99d59ac33f6fad7052c0459a3d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihmDICRBK7hj4Ov3rIwAA+yAIAEuayGL3ZAnfTqNGMOlOSwdp\nv4/0EhEm62HK2uVuaP6yXgNAwR5hQXJy7RpaKh3LaamM9Q04CHZf2wmyYJnO014O\ndn+KPkA7jPJILTJ21YZFjbIsUY3Fi6Q1uWD1Qrw23ZQjxtdu1eMN0XmFrck+kTFV\nqTAFfTdeO2nxUdk4LPwcRKev+MX6OKf/9EicZprp5r6Zti8+Z4DN3egePG74sKEP\neKn/YwGppRVa4yBIdyi084y0kwNS9plu2bIrWPBLQrESRWOHLyXj5H06Bc8Kt3ey\n6Iqd29kksExBkc8jWBTxUUaleLx7MdCV3/fSUcC8qC4Wif5+zGYejewzspYDfGU=\n=LR/3\n-----END PGP SIGNATURE-----\n", "payload": "tree 6085c38dbc5e7015308af14801e52ba4db2959f7\nparent 0ee37d5836608381ca34c889bc1be8aeb2d40cdf\nparent 420f9a34897d0696687891b7970b3c7680bd2783\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652973768 +0200\ncommitter GitHub <noreply@github.com> 1652973768 +0200\n\nRollup merge of #97142 - SparrowLii:inline, r=tmiasko\n\nmove processing of `source_scope_data` into `MutVisitor`'s impl of `Integrator` when inline\n\nThis PR fixes the FIXME in the inline mir-opt which moves processing of `source_scope_data` into `MutVisitor`'s impl of `Integrator` when inline\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362f598a753ac99d59ac33f6fad7052c0459a3d0", "html_url": "https://github.com/rust-lang/rust/commit/362f598a753ac99d59ac33f6fad7052c0459a3d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362f598a753ac99d59ac33f6fad7052c0459a3d0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee37d5836608381ca34c889bc1be8aeb2d40cdf", "html_url": "https://github.com/rust-lang/rust/commit/0ee37d5836608381ca34c889bc1be8aeb2d40cdf"}, {"sha": "420f9a34897d0696687891b7970b3c7680bd2783", "url": "https://api.github.com/repos/rust-lang/rust/commits/420f9a34897d0696687891b7970b3c7680bd2783", "html_url": "https://github.com/rust-lang/rust/commit/420f9a34897d0696687891b7970b3c7680bd2783"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "85b7fb5eb25fc1a6a58c4796d73255c9eac540b6", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/362f598a753ac99d59ac33f6fad7052c0459a3d0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f598a753ac99d59ac33f6fad7052c0459a3d0/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=362f598a753ac99d59ac33f6fad7052c0459a3d0", "patch": "@@ -554,7 +554,8 @@ impl<'tcx> Inliner<'tcx> {\n                     new_scopes: SourceScope::new(caller_body.source_scopes.len())..,\n                     new_blocks: BasicBlock::new(caller_body.basic_blocks().len())..,\n                     destination: dest,\n-                    return_block: callsite.target,\n+                    callsite_scope: caller_body.source_scopes[callsite.source_info.scope].clone(),\n+                    callsite,\n                     cleanup_block: cleanup,\n                     in_cleanup_block: false,\n                     tcx: self.tcx,\n@@ -566,31 +567,6 @@ impl<'tcx> Inliner<'tcx> {\n                 // (or existing ones, in a few special cases) in the caller.\n                 integrator.visit_body(&mut callee_body);\n \n-                for scope in &mut callee_body.source_scopes {\n-                    // FIXME(eddyb) move this into a `fn visit_scope_data` in `Integrator`.\n-                    if scope.parent_scope.is_none() {\n-                        let callsite_scope = &caller_body.source_scopes[callsite.source_info.scope];\n-\n-                        // Attach the outermost callee scope as a child of the callsite\n-                        // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n-                        scope.parent_scope = Some(callsite.source_info.scope);\n-                        assert_eq!(scope.inlined_parent_scope, None);\n-                        scope.inlined_parent_scope = if callsite_scope.inlined.is_some() {\n-                            Some(callsite.source_info.scope)\n-                        } else {\n-                            callsite_scope.inlined_parent_scope\n-                        };\n-\n-                        // Mark the outermost callee scope as an inlined one.\n-                        assert_eq!(scope.inlined, None);\n-                        scope.inlined = Some((callsite.callee, callsite.source_info.span));\n-                    } else if scope.inlined_parent_scope.is_none() {\n-                        // Make it easy to find the scope with `inlined` set above.\n-                        scope.inlined_parent_scope =\n-                            Some(integrator.map_scope(OUTERMOST_SOURCE_SCOPE));\n-                    }\n-                }\n-\n                 // If there are any locals without storage markers, give them storage only for the\n                 // duration of the call.\n                 for local in callee_body.vars_and_temps_iter() {\n@@ -786,7 +762,8 @@ struct Integrator<'a, 'tcx> {\n     new_scopes: RangeFrom<SourceScope>,\n     new_blocks: RangeFrom<BasicBlock>,\n     destination: Place<'tcx>,\n-    return_block: Option<BasicBlock>,\n+    callsite_scope: SourceScopeData<'tcx>,\n+    callsite: &'a CallSite<'tcx>,\n     cleanup_block: Option<BasicBlock>,\n     in_cleanup_block: bool,\n     tcx: TyCtxt<'tcx>,\n@@ -832,6 +809,28 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n         *local = self.map_local(*local);\n     }\n \n+    fn visit_source_scope_data(&mut self, scope_data: &mut SourceScopeData<'tcx>) {\n+        self.super_source_scope_data(scope_data);\n+        if scope_data.parent_scope.is_none() {\n+            // Attach the outermost callee scope as a child of the callsite\n+            // scope, via the `parent_scope` and `inlined_parent_scope` chains.\n+            scope_data.parent_scope = Some(self.callsite.source_info.scope);\n+            assert_eq!(scope_data.inlined_parent_scope, None);\n+            scope_data.inlined_parent_scope = if self.callsite_scope.inlined.is_some() {\n+                Some(self.callsite.source_info.scope)\n+            } else {\n+                self.callsite_scope.inlined_parent_scope\n+            };\n+\n+            // Mark the outermost callee scope as an inlined one.\n+            assert_eq!(scope_data.inlined, None);\n+            scope_data.inlined = Some((self.callsite.callee, self.callsite.source_info.span));\n+        } else if scope_data.inlined_parent_scope.is_none() {\n+            // Make it easy to find the scope with `inlined` set above.\n+            scope_data.inlined_parent_scope = Some(self.map_scope(OUTERMOST_SOURCE_SCOPE));\n+        }\n+    }\n+\n     fn visit_source_scope(&mut self, scope: &mut SourceScope) {\n         *scope = self.map_scope(*scope);\n     }\n@@ -938,7 +937,7 @@ impl<'tcx> MutVisitor<'tcx> for Integrator<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Return => {\n-                terminator.kind = if let Some(tgt) = self.return_block {\n+                terminator.kind = if let Some(tgt) = self.callsite.target {\n                     TerminatorKind::Goto { target: tgt }\n                 } else {\n                     TerminatorKind::Unreachable"}]}