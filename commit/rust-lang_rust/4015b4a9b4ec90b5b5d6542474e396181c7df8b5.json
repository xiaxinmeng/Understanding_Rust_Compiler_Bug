{"sha": "4015b4a9b4ec90b5b5d6542474e396181c7df8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTViNGE5YjRlYzkwYjViNWQ2NTQyNDc0ZTM5NjE4MWM3ZGY4YjU=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-20T07:34:50Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-08-22T23:31:57Z"}, "message": "std: add FileStream::unlink + more tests", "tree": {"sha": "84925191a79a639e422e2f7d78c9825bb9178bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84925191a79a639e422e2f7d78c9825bb9178bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4015b4a9b4ec90b5b5d6542474e396181c7df8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4015b4a9b4ec90b5b5d6542474e396181c7df8b5", "html_url": "https://github.com/rust-lang/rust/commit/4015b4a9b4ec90b5b5d6542474e396181c7df8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4015b4a9b4ec90b5b5d6542474e396181c7df8b5/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d897d7d97c6f75126d487da196084aaafde659", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d897d7d97c6f75126d487da196084aaafde659", "html_url": "https://github.com/rust-lang/rust/commit/f6d897d7d97c6f75126d487da196084aaafde659"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "6973e117131cbb21c1d3fcbfd78ee12fddce9c7b", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4015b4a9b4ec90b5b5d6542474e396181c7df8b5/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4015b4a9b4ec90b5b5d6542474e396181c7df8b5/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=4015b4a9b4ec90b5b5d6542474e396181c7df8b5", "patch": "@@ -15,6 +15,7 @@ use super::SeekStyle;\n use rt::rtio::{RtioFileDescriptor, IoFactory, IoFactoryObject};\n use rt::io::{io_error, read_error, EndOfFile};\n use rt::local::Local;\n+use rt::test::*;\n use libc::{O_RDWR, O_RDONLY, O_WRONLY, S_IWUSR, S_IRUSR,\n            O_CREAT, O_TRUNC, O_APPEND};\n \n@@ -84,6 +85,18 @@ impl FileStream {\n             }\n         }\n     }\n+    fn unlink<P: PathLike>(path: &P) {\n+        let unlink_result = unsafe {\n+            let io = Local::unsafe_borrow::<IoFactoryObject>();\n+            (*io).fs_unlink(path)\n+        };\n+        match unlink_result {\n+            Ok(_) => (),\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+            }\n+        }\n+    }\n }\n \n impl Reader for FileStream {\n@@ -131,10 +144,9 @@ impl Seek for FileStream {\n }\n \n fn file_test_smoke_test_impl() {\n-    use rt::test::*;\n     do run_in_newsched_task {\n         let message = \"it's alright. have a good time\";\n-        let filename = &Path(\"rt_io_file_test.txt\");\n+        let filename = &Path(\"./rt_io_file_test.txt\");\n         {\n             let mut write_stream = FileStream::open(filename, Create, ReadWrite).unwrap();\n             write_stream.write(message.as_bytes());\n@@ -149,10 +161,48 @@ fn file_test_smoke_test_impl() {\n             };\n             assert!(read_str == message.to_owned());\n         }\n+        FileStream::unlink(filename);\n     }\n }\n \n #[test]\n fn file_test_smoke_test() {\n     file_test_smoke_test_impl();\n }\n+\n+fn file_test_invalid_path_opened_without_create_should_raise_condition_impl() {\n+    do run_in_newsched_task {\n+        let filename = &Path(\"./file_that_does_not_exist.txt\");\n+        let mut called = false;\n+        do io_error::cond.trap(|_| {\n+            called = true;\n+        }).inside {\n+            let result = FileStream::open(filename, Open, Read);\n+            assert!(result.is_none());\n+        }\n+        assert!(called);\n+    }\n+}\n+#[test]\n+fn file_test_invalid_path_opened_without_create_should_raise_condition() {\n+    file_test_invalid_path_opened_without_create_should_raise_condition_impl();\n+}\n+\n+fn file_test_unlinking_invalid_path_should_raise_condition_impl() {\n+    use io;\n+    do run_in_newsched_task {\n+        let filename = &Path(\"./another_file_that_does_not_exist.txt\");\n+        let mut called = false;\n+        do io_error::cond.trap(|e| {\n+            io::println(fmt!(\"condition kind: %?\", e.kind));\n+            called = true;\n+        }).inside {\n+            FileStream::unlink(filename);\n+        }\n+        assert!(called);\n+    }\n+}\n+#[test]\n+fn file_test_unlinking_invalid_path_should_raise_condition() {\n+    file_test_unlinking_invalid_path_should_raise_condition_impl();\n+}"}]}