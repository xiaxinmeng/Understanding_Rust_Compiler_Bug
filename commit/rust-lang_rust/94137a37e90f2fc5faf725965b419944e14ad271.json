{"sha": "94137a37e90f2fc5faf725965b419944e14ad271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MTM3YTM3ZTkwZjJmYzVmYWY3MjU5NjViNDE5OTQ0ZTE0YWQyNzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T17:26:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-31T22:53:25Z"}, "message": "Test fixes and rebase conflicts, round 1", "tree": {"sha": "f8423c7d6d8af63c531dcaf923fbf69795337610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8423c7d6d8af63c531dcaf923fbf69795337610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94137a37e90f2fc5faf725965b419944e14ad271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94137a37e90f2fc5faf725965b419944e14ad271", "html_url": "https://github.com/rust-lang/rust/commit/94137a37e90f2fc5faf725965b419944e14ad271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94137a37e90f2fc5faf725965b419944e14ad271/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f2d45cb38a89172c423aba07ce270b1a04984f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f2d45cb38a89172c423aba07ce270b1a04984f", "html_url": "https://github.com/rust-lang/rust/commit/e3f2d45cb38a89172c423aba07ce270b1a04984f"}], "stats": {"total": 76, "additions": 34, "deletions": 42}, "files": [{"sha": "84613c28d723ca48246055e72563dcc0c6b46651", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -89,8 +89,6 @@ use core::iter::MultiplicativeIterator;\n use core::marker::Sized;\n use core::mem::size_of;\n use core::mem;\n-#[cfg(stage0)]\n-use core::num::wrapping::WrappingOps;\n use core::ops::FnMut;\n use core::option::Option::{self, Some, None};\n use core::ptr;"}, {"sha": "09735e585ddc33784d7822475f99b7bb57680d9a", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -25,8 +25,6 @@ use core::default::Default;\n use core::fmt;\n use core::iter::{self, repeat, FromIterator, IntoIterator, RandomAccessIterator};\n use core::mem;\n-#[cfg(stage0)]\n-use core::num::wrapping::WrappingOps;\n use core::ops::{Index, IndexMut};\n use core::ptr::{self, Unique};\n use core::slice;"}, {"sha": "a6340a3d7f958b6054e174babdc091dfacafe931", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -21,6 +21,7 @@\n #![feature(unicode)]\n #![feature(unsafe_destructor)]\n #![feature(into_cow)]\n+#![feature(convert)]\n #![cfg_attr(test, feature(str_char))]\n \n #[macro_use] extern crate log;"}, {"sha": "0e91eafce187f7b0ed2dd8160c7c4fe365669043", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -197,7 +197,6 @@ extern \"rust-intrinsic\" {\n     /// Rust moves to non-zeroing dynamic drop (and thus removes the\n     /// embedded drop flags that are being established by this\n     /// intrinsic).\n-    #[cfg(not(stage0))]\n     pub fn init_dropped<T>() -> T;\n \n     /// Create a value initialized to zero."}, {"sha": "277b98f052380c66951d2ca255b6d9f8a9161785", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -487,9 +487,5 @@ pub struct InvariantType<T>;\n pub trait Reflect : MarkerTrait {\n }\n \n-#[cfg(stage0)]\n-impl<T> Reflect for T { }\n-\n-#[cfg(not(stage0))]\n impl Reflect for .. { }\n "}, {"sha": "249beb6295c0733be70e4f74806ee1fbe3c2ea90", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -173,11 +173,6 @@ pub unsafe fn zeroed<T>() -> T {\n #[inline]\n #[unstable(feature = \"filling_drop\")]\n pub unsafe fn dropped<T>() -> T {\n-    #[cfg(stage0)]\n-    #[inline(always)]\n-    unsafe fn dropped_impl<T>() -> T { zeroed() }\n-\n-    #[cfg(not(stage0))]\n     #[inline(always)]\n     unsafe fn dropped_impl<T>() -> T { intrinsics::init_dropped() }\n \n@@ -337,38 +332,32 @@ macro_rules! repeat_u8_as_u64 {\n // But having the sign bit set is a pain, so 0x1d is probably better.\n //\n // And of course, 0x00 brings back the old world of zero'ing on drop.\n-#[cfg(not(stage0))] #[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\")]\n pub const POST_DROP_U8: u8 = 0x1d;\n-#[cfg(not(stage0))] #[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\")]\n pub const POST_DROP_U32: u32 = repeat_u8_as_u32!(POST_DROP_U8);\n-#[cfg(not(stage0))]  #[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\")]\n pub const POST_DROP_U64: u64 = repeat_u8_as_u64!(POST_DROP_U8);\n \n #[cfg(target_pointer_width = \"32\")]\n-#[cfg(not(stage0))]  #[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\")]\n pub const POST_DROP_USIZE: usize = POST_DROP_U32 as usize;\n #[cfg(target_pointer_width = \"64\")]\n-#[cfg(not(stage0))]  #[unstable(feature = \"filling_drop\")]\n+#[unstable(feature = \"filling_drop\")]\n pub const POST_DROP_USIZE: usize = POST_DROP_U64 as usize;\n \n-#[cfg(stage0)]  #[unstable(feature = \"filling_drop\")]\n-pub const POST_DROP_U8: u8 = 0;\n-#[cfg(stage0)]  #[unstable(feature = \"filling_drop\")]\n-pub const POST_DROP_U32: u32 = 0;\n-#[cfg(stage0)]  #[unstable(feature = \"filling_drop\")]\n-pub const POST_DROP_U64: u64 = 0;\n-#[cfg(stage0)]  #[unstable(feature = \"filling_drop\")]\n-pub const POST_DROP_USIZE: usize = 0;\n-\n-/// Interprets `src` as `&U`, and then reads `src` without moving the contained value.\n-///\n-/// This function will unsafely assume the pointer `src` is valid for `sizeof(U)` bytes by\n-/// transmuting `&T` to `&U` and then reading the `&U`. It will also unsafely create a copy of the\n-/// contained value instead of moving out of `src`.\n-///\n-/// It is not a compile-time error if `T` and `U` have different sizes, but it is highly encouraged\n-/// to only invoke this function where `T` and `U` have the same size. This function triggers\n-/// undefined behavior if `U` is larger than `T`.\n+/// Interprets `src` as `&U`, and then reads `src` without moving the contained\n+/// value.\n+///\n+/// This function will unsafely assume the pointer `src` is valid for\n+/// `sizeof(U)` bytes by transmuting `&T` to `&U` and then reading the `&U`. It\n+/// will also unsafely create a copy of the contained value instead of moving\n+/// out of `src`.\n+///\n+/// It is not a compile-time error if `T` and `U` have different sizes, but it\n+/// is highly encouraged to only invoke this function where `T` and `U` have the\n+/// same size. This function triggers undefined behavior if `U` is larger than\n+/// `T`.\n ///\n /// # Examples\n ///"}, {"sha": "15d3d981eb5c0c79fd565e7e33ecbcc3aea19c8c", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -154,7 +154,7 @@ pub trait Rng : Sized {\n     ///\n     /// let mut v = [0; 13579];\n     /// thread_rng().fill_bytes(&mut v);\n-    /// println!(\"{:?}\", v);\n+    /// println!(\"{:?}\", &v[..]);\n     /// ```\n     fn fill_bytes(&mut self, dest: &mut [u8]) {\n         // this could, in theory, be done by transmuting dest to a"}, {"sha": "1090ba984ee6d1de7404708939f4255e02ac4a32", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -73,6 +73,7 @@ use std::cmp;\n use std::fmt;\n use std::hash::{Hash, SipHasher, Hasher};\n use std::mem;\n+use std::num::ToPrimitive;\n use std::ops;\n use std::rc::Rc;\n use std::vec::IntoIter;"}, {"sha": "c28ad651f8020759266b85aad7b4bc8cb24f9160", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -744,7 +744,7 @@ mod test {\n                     wr.write(&[5; 10]).unwrap();\n                 }\n             }\n-            assert_eq!(buf.as_ref(), [5; 100].as_ref());\n+            assert_eq!(&buf[..], &[5; 100][..]);\n         });\n     }\n "}, {"sha": "099fe657f2602b761d74e3cffb955240b54a4434", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -414,7 +414,7 @@ pub struct ParseError;\n /// Some examples:\n ///\n /// ```rust,no_run\n-/// # #![feature(old_io, core)]\n+/// # #![feature(old_io, core, convert)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::{TcpStream, TcpListener};"}, {"sha": "84d8fa31ba8a4fbfce0fb1dacd81f803febe2e0c", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -367,7 +367,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n-    /// # #![feature(old_io, core)]\n+    /// # #![feature(old_io, core, convert)]\n     /// use std::old_io::Command;\n     ///\n     /// let output = match Command::new(\"cat\").arg(\"foot.txt\").output() {"}, {"sha": "98ffc0543942a14e45482aa93741a230653f30d6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -92,7 +92,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Status)] = &[\n     (\"main\", \"1.0.0\", Active),\n \n     // Deprecate after snapshot\n-    // SNAP a923278\n+    // SNAP 5520801\n     (\"unsafe_destructor\", \"1.0.0\", Active),\n \n     // A temporary feature gate used to enable parser extensions needed"}, {"sha": "74d8b222c541f72e323869415049d304486b2f3d", "filename": "src/snapshots.txt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94137a37e90f2fc5faf725965b419944e14ad271/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/94137a37e90f2fc5faf725965b419944e14ad271/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=94137a37e90f2fc5faf725965b419944e14ad271", "patch": "@@ -1,3 +1,13 @@\n+S 2015-03-27 5520801\n+  bitrig-x86_64 41de2c7a69a1ac648d3fa3b65e96a29bdc122163\n+  freebsd-x86_64 0910bbad35e213f679d0433884fd51398eb3bc8d\n+  linux-i386 1ef82402ed16f5a6d2f87a9a62eaa83170e249ec\n+  linux-x86_64 ef2154372e97a3cb687897d027fd51c8f2c5f349\n+  macos-i386 0310b1a970f2da7e61770fd14dbbbdca3b518234\n+  macos-x86_64 5f35d9c920b8083a7420ef8cf5b00d5ef3085dfa\n+  winnt-i386 808b7961f85872f04ec15ad0d3e9e23ae9bc0c3b\n+  winnt-x86_64 903a99a58f57a9bd9848cc68a2445dda881f1ee8\n+\n S 2015-03-25 a923278\n   bitrig-x86_64 41de2c7a69a1ac648d3fa3b65e96a29bdc122163\n   freebsd-x86_64 cd02c86a9218da73b2a45aff293787010d33bf3e"}]}