{"sha": "acc1dc29064efd1ed712ec48a90ed669b64f7eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzFkYzI5MDY0ZWZkMWVkNzEyZWM0OGE5MGVkNjY5YjY0ZjdlZWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-29T00:32:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-29T00:32:22Z"}, "message": "Rollup merge of #70508 - RalfJung:scalar-from, r=eddyb\n\nMiri: use more specialized Scalar::from_ constructors where appropriate", "tree": {"sha": "81d713ffb4d141342cb2e3a7166216b581504ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81d713ffb4d141342cb2e3a7166216b581504ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc1dc29064efd1ed712ec48a90ed669b64f7eee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJef+yWCRBK7hj4Ov3rIwAAdHIIAJvuNWxbjqCcnFsHQrN0J8kx\ndP7zWfaJD9Fy3f8wTjSySMtS8IZVnVCDmQJaCzEIBc+lXZ+HfEbQzye8MwT4uUCs\n44lv1DzKMRh2T7b2cLyMXEsJCbOmXJOv72j6+FORhPSEc8gBcAYvKNu5KS1gPJ2Y\nJSjZ4lsapyAtY6tfzvPOYFqY1KMiXKlrRXvujp00SVQ9C62Dhq6u2WEGwn0zc2os\nLEj7QF/nRxH9NkSsnScsLVagrtzBRx6vYKldeyeX4CwOIiEaHq4469Q5llG+OVVp\nMn4bOLXd6dmx9J7Ai7vkbi4rWuRF7yHNPB1XFCruA5Pi60Pnv+HdubSJJDQJ5j8=\n=kGNn\n-----END PGP SIGNATURE-----\n", "payload": "tree 81d713ffb4d141342cb2e3a7166216b581504ff4\nparent 96e29348860c524d6b76435241402164064dcb9a\nparent bd9e04649669cf9d2736fc531727bfe733953cea\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585441942 +0100\ncommitter GitHub <noreply@github.com> 1585441942 +0100\n\nRollup merge of #70508 - RalfJung:scalar-from, r=eddyb\n\nMiri: use more specialized Scalar::from_ constructors where appropriate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc1dc29064efd1ed712ec48a90ed669b64f7eee", "html_url": "https://github.com/rust-lang/rust/commit/acc1dc29064efd1ed712ec48a90ed669b64f7eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc1dc29064efd1ed712ec48a90ed669b64f7eee/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96e29348860c524d6b76435241402164064dcb9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e29348860c524d6b76435241402164064dcb9a", "html_url": "https://github.com/rust-lang/rust/commit/96e29348860c524d6b76435241402164064dcb9a"}, {"sha": "bd9e04649669cf9d2736fc531727bfe733953cea", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9e04649669cf9d2736fc531727bfe733953cea", "html_url": "https://github.com/rust-lang/rust/commit/bd9e04649669cf9d2736fc531727bfe733953cea"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "6fe97bcb1183b5b839ccbdd282eab252e2b1fd41", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=acc1dc29064efd1ed712ec48a90ed669b64f7eee", "patch": "@@ -208,7 +208,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Char => {\n                 // `u8` to `char` cast\n-                Ok(Scalar::from_uint(u8::try_from(v).unwrap(), Size::from_bytes(4)))\n+                Ok(Scalar::from_u32(u8::try_from(v).unwrap().into()))\n             }\n \n             // Casts to bool are not permitted by rustc, no need to handle them here."}, {"sha": "46f8e98ef34a34c21cb5dfaef26493a37b385482", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=acc1dc29064efd1ed712ec48a90ed669b64f7eee", "patch": "@@ -2,6 +2,8 @@\n //! looking at their MIR. Intrinsics/functions supported here are shared by CTFE\n //! and miri.\n \n+use std::convert::TryFrom;\n+\n use rustc::mir::{\n     self,\n     interpret::{ConstValue, GlobalId, InterpResult, Scalar},\n@@ -220,7 +222,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             sym::discriminant_value => {\n                 let place = self.deref_operand(args[0])?;\n                 let discr_val = self.read_discriminant(place.into())?.0;\n-                self.write_scalar(Scalar::from_uint(discr_val, dest.layout.size), dest)?;\n+                self.write_scalar(Scalar::from_u64(u64::try_from(discr_val).unwrap()), dest)?;\n             }\n             sym::unchecked_shl\n             | sym::unchecked_shr\n@@ -275,7 +277,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             sym::ptr_offset_from => {\n-                let isize_layout = self.layout_of(self.tcx.types.isize)?;\n                 let a = self.read_immediate(args[0])?.to_scalar()?;\n                 let b = self.read_immediate(args[1])?.to_scalar()?;\n \n@@ -292,7 +293,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let a = a.to_machine_usize(self)?;\n                     let b = b.to_machine_usize(self)?;\n                     if a == b && a != 0 {\n-                        self.write_scalar(Scalar::from_int(0, isize_layout.size), dest)?;\n+                        self.write_scalar(Scalar::from_machine_isize(0, self), dest)?;\n                         true\n                     } else {\n                         false\n@@ -312,6 +313,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         );\n                     }\n                     let usize_layout = self.layout_of(self.tcx.types.usize)?;\n+                    let isize_layout = self.layout_of(self.tcx.types.isize)?;\n                     let a_offset = ImmTy::from_uint(a.offset.bytes(), usize_layout);\n                     let b_offset = ImmTy::from_uint(b.offset.bytes(), usize_layout);\n                     let (val, _overflowed, _ty) ="}, {"sha": "1ffe6a873023c3079eb2adcc8333eb72215bc729", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=acc1dc29064efd1ed712ec48a90ed669b64f7eee", "patch": "@@ -54,10 +54,7 @@ impl<Tag> From<Pointer<Tag>> for Immediate<Tag> {\n \n impl<'tcx, Tag> Immediate<Tag> {\n     pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {\n-        Immediate::ScalarPair(\n-            val.into(),\n-            Scalar::from_uint(len, cx.data_layout().pointer_size).into(),\n-        )\n+        Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())\n     }\n \n     pub fn new_dyn_trait(val: Scalar<Tag>, vtable: Pointer<Tag>) -> Self {\n@@ -621,7 +618,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let real_discr = if discr_val.layout.abi.is_signed() {\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the discriminant layout\n-                    let sexted = sign_extend(bits_discr, discr_val.layout.size) as i128;\n+                    let sexted = sign_extend(bits_discr, discr_val.layout.size);\n                     // and then zeroing with the typeck discriminant type\n                     let discr_ty = rval\n                         .layout\n@@ -631,8 +628,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         .repr\n                         .discr_type();\n                     let size = layout::Integer::from_attr(self, discr_ty).size();\n-                    let truncatee = sexted as u128;\n-                    truncate(truncatee, size)\n+                    truncate(sexted, size)\n                 } else {\n                     bits_discr\n                 };"}, {"sha": "915cffa3321456e9fd400338b0791db8a18f6559", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=acc1dc29064efd1ed712ec48a90ed669b64f7eee", "patch": "@@ -180,7 +180,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n     #[inline]\n     pub fn dangling(layout: TyLayout<'tcx>, cx: &impl HasDataLayout) -> Self {\n         let align = layout.align.abi;\n-        let ptr = Scalar::from_uint(align.bytes(), cx.pointer_size());\n+        let ptr = Scalar::from_machine_usize(align.bytes(), cx);\n         // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.\n         MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }\n     }\n@@ -504,7 +504,7 @@ where\n             // implement this.\n             ty::Array(inner, _) => (MemPlaceMeta::None, self.tcx.mk_array(inner, inner_len)),\n             ty::Slice(..) => {\n-                let len = Scalar::from_uint(inner_len, self.pointer_size());\n+                let len = Scalar::from_machine_usize(inner_len, self);\n                 (MemPlaceMeta::Meta(len), base.layout.ty)\n             }\n             _ => bug!(\"cannot subslice non-array type: `{:?}`\", base.layout.ty),\n@@ -1044,7 +1044,7 @@ where\n         kind: MemoryKind<M::MemoryKind>,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n         let ptr = self.memory.allocate_bytes(str.as_bytes(), kind);\n-        let meta = Scalar::from_uint(u128::try_from(str.len()).unwrap(), self.pointer_size());\n+        let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);\n         let mplace = MemPlace {\n             ptr: ptr.into(),\n             align: Align::from_bytes(1).unwrap(),"}, {"sha": "764edea2fc5c6c14aaf3472436e25aa3457dbb72", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc1dc29064efd1ed712ec48a90ed669b64f7eee/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=acc1dc29064efd1ed712ec48a90ed669b64f7eee", "patch": "@@ -3,7 +3,7 @@\n //! The main entry point is the `step` method.\n \n use rustc::mir;\n-use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n+use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::ty::layout::LayoutOf;\n \n use super::{InterpCx, Machine};\n@@ -229,8 +229,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let src = self.eval_place(place)?;\n                 let mplace = self.force_allocation(src)?;\n                 let len = mplace.len(self)?;\n-                let size = self.pointer_size();\n-                self.write_scalar(Scalar::from_uint(len, size), dest)?;\n+                self.write_scalar(Scalar::from_machine_usize(len, self), dest)?;\n             }\n \n             AddressOf(_, ref place) | Ref(_, _, ref place) => {\n@@ -254,8 +253,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     !layout.is_unsized(),\n                     \"SizeOf nullary MIR operator called for unsized type\"\n                 );\n-                let size = self.pointer_size();\n-                self.write_scalar(Scalar::from_uint(layout.size.bytes(), size), dest)?;\n+                self.write_scalar(Scalar::from_machine_usize(layout.size.bytes(), self), dest)?;\n             }\n \n             Cast(kind, ref operand, _) => {"}]}