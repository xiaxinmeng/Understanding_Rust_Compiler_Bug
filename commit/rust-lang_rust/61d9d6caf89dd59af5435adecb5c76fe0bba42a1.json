{"sha": "61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZDlkNmNhZjg5ZGQ1OWFmNTQzNWFkZWNiNWM3NmZlMGJiYTQyYTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T15:11:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T15:11:20Z"}, "message": "Merge #5598\n\n5598: Simplify codegen r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2d9a5573f667fd15d27cffc471d98612a7343d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d9a5573f667fd15d27cffc471d98612a7343d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIuMYCRBK7hj4Ov3rIwAAdHIIAGxcCTYxxkUkS4BBAtLnRXzF\nvjqurabPRPIJDP1W/tb9riZ6LZchuW5Pd1XbagEH6WYtwUHtFedGCYrr5jvMCsO+\nhy7I7buNn+km3P0tk3tLsnZC8j4KfZNo70NBy3d2XzU3uAPV58U5d4G+/PXqL7ko\nINZ+GEi1nwNEWDSBzx65TUN4WGo2CIp8RtM3YyxUyQLmcR7JDZCMWS2Wj6XG4bF5\nCewYe2rnKizceSiqSfrXoZFxVXcUl6YrWOfo3MB0vPYdEU3kR5nOi8OabHWmZfc+\nAjml/jzBM5CM+Y7nqOWmydHzXRrz+cxMTGK1hiYPkwXeWrh8pkAUSMPl7mU0msE=\n=ho+8\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d9a5573f667fd15d27cffc471d98612a7343d1e\nparent a257fd06b36d2e7310e5e38823f6636343a37331\nparent d549f6164c89bed66432ab5e5ea6e38cc8b4da6b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596121880 +0000\ncommitter GitHub <noreply@github.com> 1596121880 +0000\n\nMerge #5598\n\n5598: Simplify codegen r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "html_url": "https://github.com/rust-lang/rust/commit/61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61d9d6caf89dd59af5435adecb5c76fe0bba42a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a257fd06b36d2e7310e5e38823f6636343a37331", "url": "https://api.github.com/repos/rust-lang/rust/commits/a257fd06b36d2e7310e5e38823f6636343a37331", "html_url": "https://github.com/rust-lang/rust/commit/a257fd06b36d2e7310e5e38823f6636343a37331"}, {"sha": "d549f6164c89bed66432ab5e5ea6e38cc8b4da6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d549f6164c89bed66432ab5e5ea6e38cc8b4da6b", "html_url": "https://github.com/rust-lang/rust/commit/d549f6164c89bed66432ab5e5ea6e38cc8b4da6b"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "0e3d89a07d8758d042d40ddecf915f0347b97678", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/61d9d6caf89dd59af5435adecb5c76fe0bba42a1/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61d9d6caf89dd59af5435adecb5c76fe0bba42a1/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "patch": "@@ -242,14 +242,13 @@ pub(crate) struct AstNodeSrc {\n #[derive(Debug, Eq, PartialEq)]\n pub(crate) enum Field {\n     Token(String),\n-    Node { name: String, src: FieldSrc },\n+    Node { name: String, ty: String, valence: Valence },\n }\n \n #[derive(Debug, Eq, PartialEq)]\n-pub(crate) enum FieldSrc {\n-    Shorthand,\n-    Optional(String),\n-    Many(String),\n+pub(crate) enum Valence {\n+    Optional,\n+    Many,\n }\n \n #[derive(Debug)]"}, {"sha": "b435d8a9c0ede011643959dad7ca28befbe291cd", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/61d9d6caf89dd59af5435adecb5c76fe0bba42a1/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61d9d6caf89dd59af5435adecb5c76fe0bba42a1/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=61d9d6caf89dd59af5435adecb5c76fe0bba42a1", "patch": "@@ -13,7 +13,7 @@ use quote::{format_ident, quote};\n use ungrammar::{Grammar, Rule};\n \n use crate::{\n-    ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Field, FieldSrc, KindsSrc, KINDS_SRC},\n+    ast_src::{AstEnumSrc, AstNodeSrc, AstSrc, Field, KindsSrc, Valence, KINDS_SRC},\n     codegen::{self, update, Mode},\n     project_root, Result,\n };\n@@ -431,7 +431,7 @@ fn pluralize(s: &str) -> String {\n \n impl Field {\n     fn is_many(&self) -> bool {\n-        matches!(self, Field::Node { src: FieldSrc::Many(_), .. })\n+        matches!(self, Field::Node { valence: Valence::Many, .. })\n     }\n     fn token_kind(&self) -> Option<proc_macro2::TokenStream> {\n         match self {\n@@ -476,19 +476,13 @@ impl Field {\n                 };\n                 format_ident!(\"{}_token\", name)\n             }\n-            Field::Node { name, src } => match src {\n-                FieldSrc::Shorthand => format_ident!(\"{}\", to_lower_snake_case(name)),\n-                _ => format_ident!(\"{}\", name),\n-            },\n+            Field::Node { name, .. } => format_ident!(\"{}\", name),\n         }\n     }\n     fn ty(&self) -> proc_macro2::Ident {\n         match self {\n             Field::Token(_) => format_ident!(\"SyntaxToken\"),\n-            Field::Node { name, src } => match src {\n-                FieldSrc::Optional(ty) | FieldSrc::Many(ty) => format_ident!(\"{}\", ty),\n-                FieldSrc::Shorthand => format_ident!(\"{}\", name),\n-            },\n+            Field::Node { ty, .. } => format_ident!(\"{}\", ty),\n         }\n     }\n }\n@@ -550,7 +544,9 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n \n     match rule {\n         Rule::Node(node) => {\n-            let field = Field::Node { name: grammar[*node].name.clone(), src: FieldSrc::Shorthand };\n+            let ty = grammar[*node].name.clone();\n+            let name = to_lower_snake_case(&ty);\n+            let field = Field::Node { name, ty, valence: Valence::Optional };\n             acc.push(field);\n         }\n         Rule::Token(token) => {\n@@ -565,9 +561,9 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n         }\n         Rule::Rep(inner) => {\n             if let Rule::Node(node) = &**inner {\n-                let name = grammar[*node].name.clone();\n-                let label = pluralize(&to_lower_snake_case(&name));\n-                let field = Field::Node { name: label.clone(), src: FieldSrc::Many(name) };\n+                let ty = grammar[*node].name.clone();\n+                let name = pluralize(&to_lower_snake_case(&ty));\n+                let field = Field::Node { name, ty, valence: Valence::Many };\n                 acc.push(field);\n                 return;\n             }\n@@ -582,11 +578,13 @@ fn lower_rule(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) {\n                 Rule::Node(node) => node,\n                 _ => todo!(\"{:?}\", rule),\n             };\n+            let ty = grammar[*node].name.clone();\n             let field = Field::Node {\n                 name: label.clone(),\n-                src: match &**rule {\n-                    Rule::Rep(_) => FieldSrc::Many(grammar[*node].name.clone()),\n-                    _ => FieldSrc::Optional(grammar[*node].name.clone()),\n+                ty,\n+                valence: match &**rule {\n+                    Rule::Rep(_) => Valence::Many,\n+                    _ => Valence::Optional,\n                 },\n             };\n             acc.push(field);\n@@ -620,9 +618,9 @@ fn lower_comma_list(acc: &mut Vec<Field>, grammar: &Grammar, rule: &Rule) -> boo\n         [comma, Rule::Node(n)] if comma == &**trailing_comma && n == node => (),\n         _ => return false,\n     }\n-    let name = grammar[*node].name.clone();\n-    let label = pluralize(&to_lower_snake_case(&name));\n-    let field = Field::Node { name: label.clone(), src: FieldSrc::Many(name) };\n+    let ty = grammar[*node].name.clone();\n+    let name = pluralize(&to_lower_snake_case(&ty));\n+    let field = Field::Node { name, ty, valence: Valence::Many };\n     acc.push(field);\n     true\n }\n@@ -656,7 +654,9 @@ fn extract_enums(ast: &mut AstSrc) {\n             }\n             if to_remove.len() == enm.variants.len() {\n                 node.remove_field(to_remove);\n-                node.fields.push(Field::Node { name: enm.name.clone(), src: FieldSrc::Shorthand });\n+                let ty = enm.name.clone();\n+                let name = to_lower_snake_case(&ty);\n+                node.fields.push(Field::Node { name, ty, valence: Valence::Optional });\n             }\n         }\n     }"}]}