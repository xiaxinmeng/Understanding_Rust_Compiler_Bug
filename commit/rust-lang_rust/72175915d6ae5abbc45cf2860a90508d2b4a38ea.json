{"sha": "72175915d6ae5abbc45cf2860a90508d2b4a38ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMTc1OTE1ZDZhZTVhYmJjNDVjZjI4NjBhOTA1MDhkMmI0YTM4ZWE=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-09-14T19:24:50Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2019-09-14T19:52:08Z"}, "message": "Simplify Iterator::{min_by, max_by} using cmp::{min_by, max_by}", "tree": {"sha": "b411ca7c07f87b52c4679409e24e18f2554e087c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b411ca7c07f87b52c4679409e24e18f2554e087c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72175915d6ae5abbc45cf2860a90508d2b4a38ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72175915d6ae5abbc45cf2860a90508d2b4a38ea", "html_url": "https://github.com/rust-lang/rust/commit/72175915d6ae5abbc45cf2860a90508d2b4a38ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72175915d6ae5abbc45cf2860a90508d2b4a38ea/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe", "html_url": "https://github.com/rust-lang/rust/commit/6e5ada43bf84b15a8dd4d55f5bee3ba1a9939bfe"}], "stats": {"total": 48, "additions": 17, "deletions": 31}, "files": [{"sha": "da49223dfb28510cf950f644540b0ecc56625322", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 17, "deletions": 31, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/72175915d6ae5abbc45cf2860a90508d2b4a38ea/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72175915d6ae5abbc45cf2860a90508d2b4a38ea/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=72175915d6ae5abbc45cf2860a90508d2b4a38ea", "patch": "@@ -1,4 +1,4 @@\n-use crate::cmp::Ordering;\n+use crate::cmp::{self, Ordering};\n use crate::ops::{Add, Try};\n \n use super::super::LoopState;\n@@ -2223,13 +2223,12 @@ pub trait Iterator {\n             move |x| (f(&x), x)\n         }\n \n-        // switch to y even if it is only equal, to preserve stability.\n         #[inline]\n-        fn select<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> bool {\n-            x_p <= y_p\n+        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n+            x_p.cmp(y_p)\n         }\n \n-        let (_, x) = select_fold1(self.map(key(f)), select)?;\n+        let (_, x) = self.map(key(f)).max_by(compare)?;\n         Some(x)\n     }\n \n@@ -2252,13 +2251,12 @@ pub trait Iterator {\n     fn max_by<F>(self, compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {\n-        // switch to y even if it is only equal, to preserve stability.\n         #[inline]\n-        fn select<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(&T, &T) -> bool {\n-            move |x, y| compare(x, y) != Ordering::Greater\n+        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n+            move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        select_fold1(self, select(compare))\n+        fold1(self, fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2285,13 +2283,12 @@ pub trait Iterator {\n             move |x| (f(&x), x)\n         }\n \n-        // only switch to y if it is strictly smaller, to preserve stability.\n         #[inline]\n-        fn select<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> bool {\n-            x_p > y_p\n+        fn compare<T, B: Ord>((x_p, _): &(B, T), (y_p, _): &(B, T)) -> Ordering {\n+            x_p.cmp(y_p)\n         }\n \n-        let (_, x) = select_fold1(self.map(key(f)), select)?;\n+        let (_, x) = self.map(key(f)).min_by(compare)?;\n         Some(x)\n     }\n \n@@ -2314,13 +2311,12 @@ pub trait Iterator {\n     fn min_by<F>(self, compare: F) -> Option<Self::Item>\n         where Self: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering,\n     {\n-        // only switch to y if it is strictly smaller, to preserve stability.\n         #[inline]\n-        fn select<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(&T, &T) -> bool {\n-            move |x, y| compare(x, y) == Ordering::Greater\n+        fn fold<T>(mut compare: impl FnMut(&T, &T) -> Ordering) -> impl FnMut(T, T) -> T {\n+            move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        select_fold1(self, select(compare))\n+        fold1(self, fold(compare))\n     }\n \n \n@@ -2958,28 +2954,18 @@ pub trait Iterator {\n     }\n }\n \n-/// Select an element from an iterator based on the given \"comparison\"\n-/// function.\n-///\n-/// This is an idiosyncratic helper to try to factor out the\n-/// commonalities of {max,min}{,_by}. In particular, this avoids\n-/// having to implement optimizations several times.\n+/// Fold an iterator without having to provide an initial value.\n #[inline]\n-fn select_fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n+fn fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n     where\n         I: Iterator,\n-        F: FnMut(&I::Item, &I::Item) -> bool,\n+        F: FnMut(I::Item, I::Item) -> I::Item,\n {\n-    #[inline]\n-    fn select<T>(mut f: impl FnMut(&T, &T) -> bool) -> impl FnMut(T, T) -> T {\n-        move |sel, x| if f(&sel, &x) { x } else { sel }\n-    }\n-\n     // start with the first element as our selection. This avoids\n     // having to use `Option`s inside the loop, translating to a\n     // sizeable performance gain (6x in one case).\n     let first = it.next()?;\n-    Some(it.fold(first, select(f)))\n+    Some(it.fold(first, f))\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}