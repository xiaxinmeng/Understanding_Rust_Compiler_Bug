{"sha": "2fb1564457b47bd31087e2aba1b8eb6f15c000ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjE1NjQ0NTdiNDdiZDMxMDg3ZTJhYmExYjhlYjZmMTVjMDAwZWY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-26T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-26T13:38:30Z"}, "message": "liveness: Remove redundant fields for a number of live nodes and variables", "tree": {"sha": "7d972f45910ff4f05d7c22156dd57e9c16fcca53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d972f45910ff4f05d7c22156dd57e9c16fcca53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb1564457b47bd31087e2aba1b8eb6f15c000ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb1564457b47bd31087e2aba1b8eb6f15c000ef", "html_url": "https://github.com/rust-lang/rust/commit/2fb1564457b47bd31087e2aba1b8eb6f15c000ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb1564457b47bd31087e2aba1b8eb6f15c000ef/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5835ec7973a52f2e9d6f4ed9a2181bebfdc399", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5835ec7973a52f2e9d6f4ed9a2181bebfdc399", "html_url": "https://github.com/rust-lang/rust/commit/9b5835ec7973a52f2e9d6f4ed9a2181bebfdc399"}], "stats": {"total": 22, "additions": 8, "deletions": 14}, "files": [{"sha": "346980b4199ab08f7ab27040e2e44d6eada00c60", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2fb1564457b47bd31087e2aba1b8eb6f15c000ef/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb1564457b47bd31087e2aba1b8eb6f15c000ef/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=2fb1564457b47bd31087e2aba1b8eb6f15c000ef", "patch": "@@ -249,8 +249,6 @@ enum VarKind {\n struct IrMaps<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body_owner: LocalDefId,\n-    num_live_nodes: usize,\n-    num_vars: usize,\n     live_node_map: HirIdMap<LiveNode>,\n     variable_map: HirIdMap<Variable>,\n     capture_info_map: HirIdMap<Rc<Vec<CaptureInfo>>>,\n@@ -263,8 +261,6 @@ impl IrMaps<'tcx> {\n         IrMaps {\n             tcx,\n             body_owner,\n-            num_live_nodes: 0,\n-            num_vars: 0,\n             live_node_map: HirIdMap::default(),\n             variable_map: HirIdMap::default(),\n             capture_info_map: Default::default(),\n@@ -274,9 +270,8 @@ impl IrMaps<'tcx> {\n     }\n \n     fn add_live_node(&mut self, lnk: LiveNodeKind) -> LiveNode {\n-        let ln = LiveNode(self.num_live_nodes as u32);\n+        let ln = LiveNode(self.lnks.len() as u32);\n         self.lnks.push(lnk);\n-        self.num_live_nodes += 1;\n \n         debug!(\"{:?} is of kind {}\", ln, live_node_kind_to_string(lnk, self.tcx));\n \n@@ -291,9 +286,8 @@ impl IrMaps<'tcx> {\n     }\n \n     fn add_variable(&mut self, vk: VarKind) -> Variable {\n-        let v = Variable(self.num_vars as u32);\n+        let v = Variable(self.var_kinds.len() as u32);\n         self.var_kinds.push(vk);\n-        self.num_vars += 1;\n \n         match vk {\n             Local(LocalInfo { id: node_id, .. }) | Param(node_id, _) | Upvar(node_id, _) => {\n@@ -672,8 +666,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         let typeck_results = ir.tcx.typeck(def_id);\n         let param_env = ir.tcx.param_env(def_id);\n \n-        let num_live_nodes = ir.num_live_nodes;\n-        let num_vars = ir.num_vars;\n+        let num_live_nodes = ir.lnks.len();\n+        let num_vars = ir.var_kinds.len();\n \n         Liveness {\n             ir,\n@@ -719,7 +713,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn idx(&self, ln: LiveNode, var: Variable) -> usize {\n-        ln.get() * self.ir.num_vars + var.get()\n+        ln.get() * self.ir.var_kinds.len() + var.get()\n     }\n \n     fn live_on_entry(&self, ln: LiveNode, var: Variable) -> Option<LiveNodeKind> {\n@@ -756,7 +750,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n         let succ_base_idx = self.idx(succ_ln, Variable(0));\n-        for var_idx in 0..self.ir.num_vars {\n+        for var_idx in 0..self.ir.var_kinds.len() {\n             op(self, node_base_idx + var_idx, succ_base_idx + var_idx);\n         }\n     }\n@@ -766,7 +760,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         F: FnMut(usize) -> bool,\n     {\n         let node_base_idx = self.idx(ln, Variable(0));\n-        for var_idx in 0..self.ir.num_vars {\n+        for var_idx in 0..self.ir.var_kinds.len() {\n             let idx = node_base_idx + var_idx;\n             if test(idx) {\n                 write!(wr, \" {:?}\", Variable(var_idx as u32))?;\n@@ -797,7 +791,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         debug!(\n             \"^^ liveness computation results for body {} (entry={:?})\",\n             {\n-                for ln_idx in 0..self.ir.num_live_nodes {\n+                for ln_idx in 0..self.ir.lnks.len() {\n                     debug!(\"{:?}\", self.ln_str(LiveNode(ln_idx as u32)));\n                 }\n                 hir_id"}]}