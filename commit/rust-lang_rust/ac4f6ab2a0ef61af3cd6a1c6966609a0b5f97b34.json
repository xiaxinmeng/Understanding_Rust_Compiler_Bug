{"sha": "ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNGY2YWIyYTBlZjYxYWYzY2Q2YTFjNjk2NjYwOWEwYjVmOTdiMzQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T12:19:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-06T12:19:04Z"}, "message": "forcing instead of normalization\n\nNormalziation does not work well for dyamically sized types", "tree": {"sha": "9ce606e4fab66f2039fb92acb1b9d88778dbd985", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce606e4fab66f2039fb92acb1b9d88778dbd985"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "html_url": "https://github.com/rust-lang/rust/commit/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b71a8f8ba4e47c19336ceb504eb724056f96f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b71a8f8ba4e47c19336ceb504eb724056f96f95", "html_url": "https://github.com/rust-lang/rust/commit/9b71a8f8ba4e47c19336ceb504eb724056f96f95"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "3d97132e53969472ea39c580fe253867067c3bc0", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "patch": "@@ -217,13 +217,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Normalice `place.ptr` to a `Pointer` if this is a place and not a ZST.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot.\n     #[inline]\n-    pub fn normalize_op_ptr(\n+    pub fn force_op_ptr(\n         &self,\n         op: OpTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         match op.try_as_mplace() {\n-            Ok(mplace) => Ok(self.normalize_mplace_ptr(mplace)?.into()),\n-            Err(imm) => Ok(imm.into()), // Nothing to normalize\n+            Ok(mplace) => Ok(self.force_mplace_ptr(mplace)?.into()),\n+            Err(imm) => Ok(imm.into()), // Nothing to cast/force\n         }\n     }\n "}, {"sha": "50e3789ed80701678f1b092d445714151cdb41c0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "patch": "@@ -327,15 +327,13 @@ where\n         self.memory.check_ptr_access(place.ptr, size, place.align)\n     }\n \n-    /// Normalice `place.ptr` to a `Pointer` if this is not a ZST.\n+    /// Force `place.ptr` to a `Pointer`.\n     /// Can be helpful to avoid lots of `force_ptr` calls later, if this place is used a lot.\n-    pub fn normalize_mplace_ptr(\n+    pub fn force_mplace_ptr(\n         &self,\n         mut place: MPlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n-        if !place.layout.is_zst() {\n-            place.mplace.ptr = self.force_ptr(place.mplace.ptr)?.into();\n-        }\n+        place.mplace.ptr = self.force_ptr(place.mplace.ptr)?.into();\n         Ok(place)\n     }\n "}, {"sha": "00107a536ba26522d1e317b215342d9d069799d3", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=ac4f6ab2a0ef61af3cd6a1c6966609a0b5f97b34", "patch": "@@ -444,7 +444,12 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // `!` is a ZST and we want to validate it.\n                     // Normalize before handing `place` to tracking because that will\n                     // check for duplicates.\n-                    let place = self.ecx.normalize_mplace_ptr(place)?;\n+                    let place = if size.bytes() > 0 {\n+                        self.ecx.force_mplace_ptr(place)\n+                            .expect(\"we already bounds-checked\")\n+                    } else {\n+                        place\n+                    };\n                     let path = &self.path;\n                     ref_tracking.track(place, || {\n                         // We need to clone the path anyway, make sure it gets created\n@@ -578,8 +583,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 let ty_size = self.ecx.layout_of(tys)?.size;\n                 // This is the size in bytes of the whole array.\n                 let size = ty_size * len;\n-                // Size is not 0, get a pointer (no cast because we normalized in validate_operand).\n-                let ptr = mplace.ptr.assert_ptr();\n+                // Size is not 0, get a pointer.\n+                let ptr = self.ecx.force_ptr(mplace.ptr)?;\n \n                 // NOTE: Keep this in sync with the handling of integer and float\n                 // types above, in `visit_primitive`.\n@@ -654,8 +659,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ecx: self,\n         };\n \n+        // Try to cast to ptr *once* instead of all the time.\n+        let op = self.force_op_ptr(op).unwrap_or(op);\n+\n         // Run it\n-        let op = self.normalize_op_ptr(op)?; // avoid doing ptr-to-int all the time\n         visitor.visit_value(op)\n     }\n }"}]}