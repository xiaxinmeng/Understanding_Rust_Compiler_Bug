{"sha": "8351667091af662fe5cb22341e6c631a136a000b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzNTE2NjcwOTFhZjY2MmZlNWNiMjIzNDFlNmM2MzFhMTM2YTAwMGI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-07T16:25:33Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T21:01:07Z"}, "message": "intravisit: abstract over HIR Map", "tree": {"sha": "7739bf74185f40157acb11c8a08f2d03b3c17900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7739bf74185f40157acb11c8a08f2d03b3c17900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8351667091af662fe5cb22341e6c631a136a000b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8351667091af662fe5cb22341e6c631a136a000b", "html_url": "https://github.com/rust-lang/rust/commit/8351667091af662fe5cb22341e6c631a136a000b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8351667091af662fe5cb22341e6c631a136a000b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e9ccbe28f0d10d838de5b302a8afa06d571a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62e9ccbe28f0d10d838de5b302a8afa06d571a2e", "html_url": "https://github.com/rust-lang/rust/commit/62e9ccbe28f0d10d838de5b302a8afa06d571a2e"}], "stats": {"total": 347, "additions": 258, "deletions": 89}, "files": [{"sha": "75f78104b488e9775d87e2616639a506e872790c", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@\n //! item.\n \n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n@@ -519,7 +520,9 @@ impl CheckAttrVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "13b5be08d8a5566c04b2803707198ec3902a665c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -31,8 +31,6 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use crate::hir::map::Map;\n-\n use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_hir::*;\n use rustc_span::Span;\n@@ -42,10 +40,7 @@ pub struct DeepVisitor<'v, V> {\n     visitor: &'v mut V,\n }\n \n-impl<'v, 'hir, V> DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir> + 'v,\n-{\n+impl<'v, V> DeepVisitor<'v, V> {\n     pub fn new(base: &'v mut V) -> Self {\n         DeepVisitor { visitor: base }\n     }\n@@ -122,14 +117,22 @@ impl<'a> FnKind<'a> {\n     }\n }\n \n+/// An abstract representation of the HIR `rustc::hir::map::Map`.\n+pub trait Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir>;\n+    fn item(&self, id: HirId) -> &'hir Item<'hir>;\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir>;\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested\n /// item-like things.\n ///\n /// See the comments on `ItemLikeVisitor` for more details on the overall\n /// visit strategy.\n-pub enum NestedVisitorMap<'this, 'tcx> {\n+pub enum NestedVisitorMap<'this, M> {\n     /// Do not visit any nested things. When you add a new\n     /// \"non-nested\" thing, you will want to audit such uses to see if\n     /// they remain valid.\n@@ -146,20 +149,20 @@ pub enum NestedVisitorMap<'this, 'tcx> {\n     /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n-    OnlyBodies(&'this Map<'tcx>),\n+    OnlyBodies(&'this M),\n \n     /// Visits all nested things, including item-likes.\n     ///\n     /// **This is an unusual choice.** It is used when you want to\n     /// process everything within their lexical context. Typically you\n     /// kick off the visit by doing `walk_krate()`.\n-    All(&'this Map<'tcx>),\n+    All(&'this M),\n }\n \n-impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n+impl<'this, M> NestedVisitorMap<'this, M> {\n     /// Returns the map to use for an \"intra item-like\" thing (if any).\n     /// E.g., function body.\n-    fn intra(self) -> Option<&'this Map<'tcx>> {\n+    fn intra(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(map) => Some(map),\n@@ -169,7 +172,7 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n \n     /// Returns the map to use for an \"item-like\" thing (if any).\n     /// E.g., item, impl-item.\n-    fn inter(self) -> Option<&'this Map<'tcx>> {\n+    fn inter(self) -> Option<&'this M> {\n         match self {\n             NestedVisitorMap::None => None,\n             NestedVisitorMap::OnlyBodies(_) => None,\n@@ -195,6 +198,8 @@ impl<'this, 'tcx> NestedVisitorMap<'this, 'tcx> {\n /// to monitor future changes to `Visitor` in case a new method with a\n /// new default implementation gets introduced.)\n pub trait Visitor<'v>: Sized {\n+    type Map: Map<'v>;\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Nested items.\n \n@@ -214,7 +219,7 @@ pub trait Visitor<'v>: Sized {\n     /// `panic!()`. This way, if a new `visit_nested_XXX` variant is\n     /// added in the future, we will see the panic in your code and\n     /// fix it appropriately.\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, 'v>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map>;\n \n     /// Invoked when a nested item is encountered. By default does\n     /// nothing unless you override `nested_visit_map` to return other than\n@@ -496,21 +501,16 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n     }\n }\n \n-pub fn walk_poly_trait_ref<'v, V>(\n+pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(\n     visitor: &mut V,\n     trait_ref: &'v PolyTraitRef<'v>,\n     _modifier: TraitBoundModifier,\n-) where\n-    V: Visitor<'v>,\n-{\n+) {\n     walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);\n     visitor.visit_trait_ref(&trait_ref.trait_ref);\n }\n \n-pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef<'v>)\n-where\n-    V: Visitor<'v>,\n-{\n+pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef<'v>) {\n     visitor.visit_id(trait_ref.hir_ref_id);\n     visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)\n }"}, {"sha": "6aa1b6da368303269191b5493a7b52bd1e965b5a", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,7 +1,7 @@\n use crate::dep_graph::{DepGraph, DepKind, DepNode, DepNodeIndex};\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::map::definitions::{self, DefPathHash};\n-use crate::hir::map::{Entry, HirEntryMap};\n+use crate::hir::map::{Entry, HirEntryMap, Map};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -336,11 +336,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n+    type Map = Map<'hir>;\n+\n     /// Because we want to track parent items and so forth, enable\n     /// deep walking so that we walk nested items in the context of\n     /// their outer items.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         panic!(\"`visit_nested_xxx` must be manually implemented in this visitor\");\n     }\n "}, {"sha": "2499acae5e656cc312a2d6d62aebb881dfcadae5", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -133,7 +133,9 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::OnlyBodies(self.hir_map)\n     }\n "}, {"sha": "f7b654eae1ead19cf5a129c673d1124a080c23f2", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1093,6 +1093,24 @@ impl<'hir> Map<'hir> {\n     }\n }\n \n+impl<'hir> intravisit::Map<'hir> for Map<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.body(id)\n+    }\n+\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.item(id)\n+    }\n+\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.trait_item(id)\n+    }\n+\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.impl_item(id)\n+    }\n+}\n+\n pub struct NodesMatchingSuffix<'a> {\n     map: &'a Map<'a>,\n     item_name: &'a String,"}, {"sha": "b61a54a643f7019c08fdab2cf15418035dc33981", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,6 +1,7 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n@@ -43,7 +44,9 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -70,7 +73,9 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "9c7bf261d9bd4e5709cf07ca80492ccabcf04d9e", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -66,7 +66,9 @@ impl<'a, 'tcx> FindLocalByTypeVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for FindLocalByTypeVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "6ec956f15dd340034c59b2b749cb12f36d99638c", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,4 +1,5 @@\n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::middle::resolve_lifetime as rl;\n use crate::ty::{self, Region, TyCtxt};\n@@ -90,7 +91,9 @@ struct FindNestedTypeVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -207,7 +210,9 @@ struct TyPathVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for TyPathVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'tcx>> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "71abbd8bcb131a147071c272cb2da8ff16a6cc8f", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@ use crate::session::config;\n \n use crate::hir::intravisit;\n use crate::hir::intravisit::{NestedVisitorMap, Visitor};\n+use crate::hir::map::Map;\n use crate::ty::TyCtxt;\n use errors::struct_span_err;\n use rustc_data_structures::fx::FxHashSet;\n@@ -136,7 +137,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Map<'v>> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "6c4d7ec3a8a9ff99f7d873b39dd2d9c000923028", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -37,7 +37,8 @@\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::intravisit;\n-use rustc::hir::map::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::builtin::{self, ELIDED_LIFETIMES_IN_PATHS};\n use rustc::middle::cstore::CrateStore;\n@@ -1484,7 +1485,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "e59a52923d9fb878a72d8dd5755b45908fee2c1b", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -37,6 +37,7 @@ use graphviz as dot;\n use rustc::dep_graph::debug::{DepNodeFilter, EdgeFilter};\n use rustc::dep_graph::{DepGraphQuery, DepKind, DepNode};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{Direction, NodeIndex, INCOMING, OUTGOING};\n@@ -159,7 +160,9 @@ impl IfThisChanged<'tcx> {\n }\n \n impl Visitor<'tcx> for IfThisChanged<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "a7f915b833d929cbad7145e550128f80979791d2", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -15,6 +15,7 @@\n \n use rustc::dep_graph::{label_strs, DepNode};\n use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashSet;\n@@ -547,7 +548,9 @@ impl FindAllAttrs<'tcx> {\n }\n \n impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "213ca308d5636d4feadeef226a45185b76834a91", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -25,6 +25,7 @@ use std::fmt::Write;\n \n use lint::{EarlyContext, EarlyLintPass, LateLintPass, LintPass};\n use lint::{LateContext, LintArray, LintContext};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::lint::FutureIncompatibleInfo;\n use rustc::traits::misc::can_type_implement_copy;\n@@ -1093,7 +1094,9 @@ impl TypeAliasBounds {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n                 intravisit::NestedVisitorMap::None\n             }\n "}, {"sha": "da27e9225d78702dad93d484992cf3d46b29c281", "filename": "src/librustc_lint/late.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flate.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -16,6 +16,7 @@\n \n use rustc::hir::intravisit as hir_visit;\n use rustc::hir::intravisit::Visitor;\n+use rustc::hir::map::Map;\n use rustc::lint::LateContext;\n use rustc::lint::LintPass;\n use rustc::lint::{LateLintPass, LateLintPassObject};\n@@ -86,10 +87,12 @@ impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> LateContextAndPass<'a, 'tcx, T> {\n impl<'a, 'tcx, T: LateLintPass<'a, 'tcx>> hir_visit::Visitor<'tcx>\n     for LateContextAndPass<'a, 'tcx, T>\n {\n+    type Map = Map<'tcx>;\n+\n     /// Because lints are scoped lexically, we want to walk nested\n     /// items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, Self::Map> {\n         hir_visit::NestedVisitorMap::All(&self.context.tcx.hir())\n     }\n "}, {"sha": "f6f1ae2a08a6fd980eb92398f13ba5c55ba41764", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::{LintLevelMap, LintLevelSets, LintLevelsBuilder, LintStore};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -50,7 +51,9 @@ impl LintLevelMapBuilder<'_, '_> {\n }\n \n impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "390472940c764b46234b30017e9f802f8097a931", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -2,6 +2,7 @@ use crate::rmeta::table::FixedSizeEncoding;\n use crate::rmeta::*;\n \n use rustc::hir::map::definitions::DefPathTable;\n+use rustc::hir::map::Map;\n use rustc::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary};\n use rustc::middle::dependency_format::Linkage;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n@@ -1520,7 +1521,9 @@ impl EncodeContext<'tcx> {\n \n // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.\n impl Visitor<'tcx> for EncodeContext<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {"}, {"sha": "ab76f010a0f0a30a504058b73bde2820a44c7a85", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n use super::{PatCtxt, PatKind, PatternError};\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::session::Session;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -49,7 +50,9 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -730,7 +733,9 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "830609f7911aca5a9c9fbdc5bd74cb505bf87618", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n@@ -475,7 +476,9 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n "}, {"sha": "50abf919f9daa76cde10e43df36afed1ebfb3c23", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,5 +1,6 @@\n use crate::{build, shim};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -85,7 +86,8 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, 'tcx> {\n+        type Map = Map<'tcx>;\n+        fn nested_visit_map<'b>(&'b mut self) -> NestedVisitorMap<'b, Self::Map> {\n             NestedVisitorMap::None\n         }\n     }"}, {"sha": "072a51391c877301b63a177aa1f462422dec9de6", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -200,7 +200,9 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "5441a8bf717a022438c5cee0f27746cd7e3c7cf5", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -3,6 +3,7 @@\n // from live codes are live, and everything else is dead.\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::privacy;\n@@ -210,7 +211,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -563,11 +566,13 @@ impl DeadVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for DeadVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Walk nested items in place so that we don't report dead-code\n     /// on inner functions when the outer function is already getting\n     /// an error. We could do this also by checking the parents, but\n     /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "2c36181ce4b407c96ba7bb6fe7a3dd62bf9609a8", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -3,6 +3,7 @@\n // completely accurate (some things might be counted twice, others missed).\n \n use rustc::hir::intravisit as hir_visit;\n+use rustc::hir::map::Map;\n use rustc::util::common::to_readable_str;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n@@ -92,7 +93,9 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_param(self, param)\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> hir_visit::NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<'_, Self::Map> {\n         panic!(\"visit_nested_xxx must be manually implemented in this visitor\")\n     }\n "}, {"sha": "68d9ba7f90e9a8f75c81948f41843460e8f4ed0d", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,12 +1,12 @@\n use errors::struct_span_err;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n+use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n-\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n@@ -124,7 +124,9 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -139,7 +141,9 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "9d5e8080055a85f180f82cb924cd003713028c06", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -6,6 +6,7 @@\n \n use errors::struct_span_err;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::lib_features::LibFeatures;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -113,7 +114,9 @@ impl LibFeatureCollector<'tcx> {\n }\n \n impl Visitor<'tcx> for LibFeatureCollector<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n "}, {"sha": "4b5b2148cd984ead3b4695541d97b6b7c7ef7d3e", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -98,6 +98,7 @@ use self::VarKind::*;\n \n use errors::Applicability;\n use rustc::hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n@@ -153,7 +154,9 @@ fn live_node_kind_to_string(lnk: LiveNodeKind, tcx: TyCtxt<'_>) -> String {\n }\n \n impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -1348,7 +1351,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "54ea73f1d3d215eb616b080848479b33f26fb270", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -44,7 +44,9 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n }\n \n impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.hir_map)\n     }\n "}, {"sha": "016cab9d11446953088e8e5f8ac2f34be9e88e77", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -7,6 +7,7 @@\n \n use rustc::hir::intravisit;\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n@@ -82,7 +83,9 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "a8a56ee7f09382521576aa3fc410c732e5569be3", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -7,6 +7,7 @@\n //! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -695,7 +696,9 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "7891fab0aa6c6130dec3cebbb0aadb22505e8355", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -3,6 +3,7 @@\n \n use errors::struct_span_err;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n@@ -204,7 +205,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -293,7 +296,9 @@ impl<'a, 'tcx> MissingStabilityAnnotations<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -429,10 +434,12 @@ struct Checker<'tcx> {\n }\n \n impl Visitor<'tcx> for Checker<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// Because stability levels are scoped lexically, we want to walk\n     /// nested items in the context of the outer item, so enable\n     /// deep-walking.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "3d0d4070a251a9f141befdb0e6d08d72225594ac", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@\n \n use rustc::bug;\n use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n@@ -372,7 +373,9 @@ struct PubRestrictedVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for PubRestrictedVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n     fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {\n@@ -670,9 +673,11 @@ impl EmbargoVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1039,9 +1044,11 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1179,9 +1186,11 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1437,7 +1446,9 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n \n@@ -1463,9 +1474,11 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1906,7 +1919,9 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "215ab0fde026e2061dd8fc89ab3dbc1456c005a9", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -361,7 +361,9 @@ fn sub_items_have_self_param(node: &hir::ItemKind<'_>) -> bool {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::All(&self.tcx.hir())\n     }\n \n@@ -1086,7 +1088,9 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2129,7 +2133,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+                type Map = Map<'a>;\n+\n+                fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                     NestedVisitorMap::None\n                 }\n \n@@ -2217,7 +2223,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+            type Map = Map<'v>;\n+\n+            fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n                 NestedVisitorMap::None\n             }\n \n@@ -2802,7 +2810,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -2843,7 +2853,9 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+        type Map = Map<'v>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n "}, {"sha": "647d32d45f6befb33bad1c47e5ccfe2380aac2e4", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -2,6 +2,7 @@ mod environment;\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::map::Map;\n use rustc::traits::{\n     Clause, Clauses, DomainGoal, FromEnv, GoalKind, PolyDomainGoal, ProgramClause,\n     ProgramClauseCategory, WellFormed, WhereClause,\n@@ -600,7 +601,9 @@ impl ClauseDumper<'tcx> {\n }\n \n impl Visitor<'tcx> for ClauseDumper<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n "}, {"sha": "031f6e15d0dc9af5e670b2fc0fcec9bd511ed7a2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -1,5 +1,6 @@\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticId};\n use rustc::hir::intravisit;\n+use rustc::hir::map::Map;\n use rustc::infer::{self, InferOk};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n@@ -890,9 +891,10 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            fn nested_visit_map<'this>(\n-                                &'this mut self,\n-                            ) -> intravisit::NestedVisitorMap<'this, 'v>\n+                            type Map = Map<'v>;\n+                            fn nested_visit_map(\n+                                &mut self,\n+                            ) -> intravisit::NestedVisitorMap<'_, Self::Map>\n                             {\n                                 intravisit::NestedVisitorMap::None\n                             }"}, {"sha": "5936fe9b2a486e92b8e88002494b53e5a20147aa", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@\n \n use super::FnCtxt;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::FxHashMap;\n@@ -193,7 +194,9 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "35e5588273b26fd7ca5e4f324895b12e7fc7ffcb", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -7,6 +7,7 @@ use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc::hir::intravisit;\n use rustc::hir::map as hir_map;\n+use rustc::hir::map::Map;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::print::with_crate_prefix;\n@@ -1124,7 +1125,9 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::None\n     }\n }"}, {"sha": "a977ecd8dafca95aa849a1d8480bfb240522f136", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -92,6 +92,7 @@ use crate::middle::lang_items;\n use crate::namespace::Namespace;\n use errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::opaque_types::OpaqueTypeDecl;\n@@ -1170,7 +1171,9 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "b4fed3fe4e245e5640530d5dab658006930f3859", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -77,6 +77,7 @@ use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};\n use rustc::ty::adjustment;\n@@ -414,7 +415,9 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "8c107db21502b94ebf25b821ee4c2c3a9b70f68c", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -36,6 +36,7 @@ use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::UpvarRegion;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_data_structures::fx::FxIndexMap;\n@@ -59,7 +60,9 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "f03bc21aef79d4a3de6a272537b62f4c3ded93f9", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -5,6 +5,7 @@\n use crate::check::FnCtxt;\n \n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc::infer::InferCtxt;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n@@ -242,7 +243,9 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "50cd059fe8ddb404303a822544c11eb201e7204f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -22,6 +22,7 @@ use crate::middle::resolve_lifetime as rl;\n use crate::middle::weak_lang_items;\n use errors::{struct_span_err, Applicability, StashKey};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n use rustc::traits;\n@@ -104,7 +105,9 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n+    type Map = Map<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::None\n     }\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n@@ -185,7 +188,9 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n@@ -885,7 +890,9 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> NestedVisitorMap<'_, Self::Map> {\n             NestedVisitorMap::None\n         }\n \n@@ -1715,7 +1722,9 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     }\n \n     impl<'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'tcx> {\n-        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+        type Map = Map<'tcx>;\n+\n+        fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n             intravisit::NestedVisitorMap::All(&self.tcx.hir())\n         }\n         fn visit_item(&mut self, it: &'tcx Item<'tcx>) {"}, {"sha": "cbef4f8ae692a95f805548fa607ef66623c9b06e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8351667091af662fe5cb22341e6c631a136a000b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=8351667091af662fe5cb22341e6c631a136a000b", "patch": "@@ -899,7 +899,9 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n }\n \n impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n-    fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'hir> {\n+    type Map = Map<'hir>;\n+\n+    fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<'_, Self::Map> {\n         intravisit::NestedVisitorMap::All(&self.map)\n     }\n "}]}