{"sha": "145e02347e88176e342631033abb748c51db45e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NWUwMjM0N2U4ODE3NmUzNDI2MzEwMzNhYmI3NDhjNTFkYjQ1ZTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-20T02:00:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-21T05:04:37Z"}, "message": "rustdoc: Remove legacy exports", "tree": {"sha": "2eeff082cb4ad26375fc8a3dbf35f4ed5b7581d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2eeff082cb4ad26375fc8a3dbf35f4ed5b7581d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/145e02347e88176e342631033abb748c51db45e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/145e02347e88176e342631033abb748c51db45e8", "html_url": "https://github.com/rust-lang/rust/commit/145e02347e88176e342631033abb748c51db45e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/145e02347e88176e342631033abb748c51db45e8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "html_url": "https://github.com/rust-lang/rust/commit/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac"}], "stats": {"total": 315, "additions": 102, "deletions": 213}, "files": [{"sha": "2f78351e545c8ad7841fc369828ef5cc222292c6", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -21,36 +21,29 @@ use rustc::back::link;\n use rustc::metadata::filesearch;\n use rustc::front;\n \n-export Ctxt;\n-export CtxtHandler;\n-export Srv;\n-export from_str;\n-export from_file;\n-export exec;\n-\n-type Ctxt = {\n+pub type Ctxt = {\n     ast: @ast::crate,\n     ast_map: ast_map::map\n };\n \n type SrvOwner<T> = fn(srv: Srv) -> T;\n-type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n+pub type CtxtHandler<T> = fn~(ctxt: Ctxt) -> T;\n type Parser = fn~(Session, ~str) -> @ast::crate;\n \n enum Msg {\n     HandleRequest(fn~(Ctxt)),\n     Exit\n }\n \n-enum Srv = {\n+pub enum Srv = {\n     ch: comm::Chan<Msg>\n };\n \n-fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, source, parse::from_str_sess)\n }\n \n-fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, file, |sess, f| parse::from_file_sess(sess, &Path(f)))\n }\n \n@@ -88,7 +81,7 @@ fn act(po: comm::Port<Msg>, source: ~str, parse: Parser) {\n     }\n }\n \n-fn exec<T:Send>(\n+pub fn exec<T:Send>(\n     srv: Srv,\n     +f: fn~(ctxt: Ctxt) -> T\n ) -> T {"}, {"sha": "5dbf18e873815216832d17ddd2c8e0941150c2d7", "filename": "src/librustdoc/attr_parser.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_parser.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -9,11 +9,7 @@ use syntax::ast;\n use syntax::attr;\n use core::tuple;\n \n-export CrateAttrs;\n-export parse_crate, parse_desc;\n-export parse_hidden;\n-\n-type CrateAttrs = {\n+pub type CrateAttrs = {\n     name: Option<~str>\n };\n \n@@ -48,7 +44,7 @@ fn doc_metas(\n     return doc_metas;\n }\n \n-fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n+pub fn parse_crate(attrs: ~[ast::attribute]) -> CrateAttrs {\n     let link_metas = attr::find_linkage_metas(attrs);\n \n     {\n@@ -80,7 +76,7 @@ fn should_not_extract_crate_name_if_no_name_value_in_link_attribute() {\n     assert attrs.name == None;\n }\n \n-fn parse_desc(attrs: ~[ast::attribute]) -> Option<~str> {\n+pub fn parse_desc(attrs: ~[ast::attribute]) -> Option<~str> {\n     let doc_strs = do doc_metas(attrs).filter_map |meta| {\n         attr::get_meta_item_value_str(*meta)\n     };\n@@ -107,7 +103,7 @@ fn parse_desc_should_parse_simple_doc_attributes() {\n     assert attrs == Some(~\"basic\");\n }\n \n-fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n+pub fn parse_hidden(attrs: ~[ast::attribute]) -> bool {\n     do doc_metas(attrs).find |meta| {\n         match attr::get_meta_item_list(meta) {\n           Some(metas) => {"}, {"sha": "160836db6387e0243aee6f9c0b03368522080c73", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -12,9 +12,7 @@ use syntax::ast;\n use syntax::ast_map;\n use std::map::HashMap;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"attr\",\n         f: run"}, {"sha": "19f0bf2a9eff8d8c3f92c8b7bae7c60db6065e04", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -1,21 +1,12 @@\n use result::Result;\n use std::getopts;\n \n-export OutputFormat;\n-export OutputStyle;\n-export Config;\n-export default_config;\n-export parse_config;\n-export usage;\n-export Markdown, PandocHtml;\n-export DocPerCrate, DocPerMod;\n-\n /// The type of document to output\n-enum OutputFormat {\n+pub enum OutputFormat {\n     /// Markdown\n-    Markdown,\n+    pub Markdown,\n     /// HTML, via markdown and pandoc\n-    PandocHtml\n+    pub PandocHtml\n }\n \n impl OutputFormat : cmp::Eq {\n@@ -36,11 +27,11 @@ impl OutputFormat : cmp::Eq {\n }\n \n /// How to organize the output\n-enum OutputStyle {\n+pub enum OutputStyle {\n     /// All in a single document\n-    DocPerCrate,\n+    pub DocPerCrate,\n     /// Each module in its own document\n-    DocPerMod\n+    pub DocPerMod\n }\n \n impl OutputStyle : cmp::Eq {\n@@ -61,7 +52,7 @@ impl OutputStyle : cmp::Eq {\n }\n \n /// The configuration for a rustdoc session\n-type Config = {\n+pub type Config = {\n     input_crate: Path,\n     output_dir: Path,\n     output_format: OutputFormat,\n@@ -90,7 +81,7 @@ fn opts() -> ~[(getopts::Opt, ~str)] {\n     ]\n }\n \n-fn usage() {\n+pub fn usage() {\n     use io::println;\n \n     println(~\"Usage: rustdoc [options] <cratefile>\\n\");\n@@ -101,7 +92,7 @@ fn usage() {\n     println(~\"\");\n }\n \n-fn default_config(input_crate: &Path) -> Config {\n+pub fn default_config(input_crate: &Path) -> Config {\n     {\n         input_crate: *input_crate,\n         output_dir: Path(\".\"),"}, {"sha": "bdcb3f026ec15d21ddae175ba80bf39412f0785f", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -7,9 +7,7 @@ is interpreted as the brief description.\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"desc_to_brief\",\n         f: run"}, {"sha": "5332dd780314a52132768f71013a7b9585e1e586", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -1,8 +1,8 @@\n //! The document model\n \n-type AstId = int;\n+pub type AstId = int;\n \n-type Doc_ = {\n+pub type Doc_ = {\n     pages: ~[Page]\n };\n \n@@ -23,7 +23,7 @@ impl Doc_ : cmp::Eq {\n     pure fn ne(&self, other: &Doc_) -> bool { !(*self).eq(other) }\n }\n \n-enum Doc {\n+pub enum Doc {\n     Doc_(Doc_)\n }\n \n@@ -40,7 +40,7 @@ impl Doc : cmp::Eq {\n     pure fn ne(&self, other: &Doc) -> bool { *(*self) != *(*other) }\n }\n \n-enum Page {\n+pub enum Page {\n     CratePage(CrateDoc),\n     ItemPage(ItemTag)\n }\n@@ -88,7 +88,7 @@ impl Page : cmp::Eq {\n     pure fn ne(&self, other: &Page) -> bool { !(*self).eq(other) }\n }\n \n-enum Implementation {\n+pub enum Implementation {\n     Required,\n     Provided,\n }\n@@ -115,7 +115,7 @@ impl Implementation : cmp::Eq {\n  * Most rustdocs can be parsed into 'sections' according to their markdown\n  * headers\n  */\n-type Section = {\n+pub type Section = {\n     header: ~str,\n     body: ~str\n };\n@@ -140,7 +140,7 @@ impl Section : cmp::Eq {\n // FIXME (#2596): We currently give topmod the name of the crate.  There\n // would probably be fewer special cases if the crate had its own name\n // and topmod's name was the empty string.\n-type CrateDoc = {\n+pub type CrateDoc = {\n     topmod: ModDoc,\n };\n \n@@ -161,7 +161,7 @@ impl CrateDoc : cmp::Eq {\n     pure fn ne(&self, other: &CrateDoc) -> bool { !(*self).eq(other) }\n }\n \n-enum ItemTag {\n+pub enum ItemTag {\n     ModTag(ModDoc),\n     NmodTag(NmodDoc),\n     ConstTag(ConstDoc),\n@@ -300,7 +300,7 @@ impl ItemTag : cmp::Eq {\n     pure fn ne(&self, other: &ItemTag) -> bool { !(*self).eq(other) }\n }\n \n-type ItemDoc = {\n+pub type ItemDoc = {\n     id: AstId,\n     name: ~str,\n     path: ~[~str],\n@@ -340,7 +340,7 @@ impl ItemDoc : cmp::Eq {\n     pure fn ne(&self, other: &ItemDoc) -> bool { !(*self).eq(other) }\n }\n \n-type SimpleItemDoc = {\n+pub type SimpleItemDoc = {\n     item: ItemDoc,\n     sig: Option<~str>\n };\n@@ -362,7 +362,7 @@ impl SimpleItemDoc : cmp::Eq {\n     pure fn ne(&self, other: &SimpleItemDoc) -> bool { !(*self).eq(other) }\n }\n \n-type ModDoc_ = {\n+pub type ModDoc_ = {\n     item: ItemDoc,\n     items: ~[ItemTag],\n     index: Option<Index>\n@@ -389,7 +389,7 @@ impl ModDoc_ : cmp::Eq {\n     pure fn ne(&self, other: &ModDoc_) -> bool { !(*self).eq(other) }\n }\n \n-enum ModDoc {\n+pub enum ModDoc {\n     ModDoc_(ModDoc_)\n }\n \n@@ -406,7 +406,7 @@ impl ModDoc : cmp::Eq {\n     pure fn ne(&self, other: &ModDoc) -> bool { *(*self) != *(*other) }\n }\n \n-type NmodDoc = {\n+pub type NmodDoc = {\n     item: ItemDoc,\n     fns: ~[FnDoc],\n     index: Option<Index>\n@@ -433,11 +433,11 @@ impl NmodDoc : cmp::Eq {\n     pure fn ne(&self, other: &NmodDoc) -> bool { !(*self).eq(other) }\n }\n \n-type ConstDoc = SimpleItemDoc;\n+pub type ConstDoc = SimpleItemDoc;\n \n-type FnDoc = SimpleItemDoc;\n+pub type FnDoc = SimpleItemDoc;\n \n-type EnumDoc = {\n+pub type EnumDoc = {\n     item: ItemDoc,\n     variants: ~[VariantDoc]\n };\n@@ -459,7 +459,7 @@ impl EnumDoc : cmp::Eq {\n     pure fn ne(&self, other: &EnumDoc) -> bool { !(*self).eq(other) }\n }\n \n-type VariantDoc = {\n+pub type VariantDoc = {\n     name: ~str,\n     desc: Option<~str>,\n     sig: Option<~str>\n@@ -486,7 +486,7 @@ impl VariantDoc : cmp::Eq {\n     pure fn ne(&self, other: &VariantDoc) -> bool { !(*self).eq(other) }\n }\n \n-type TraitDoc = {\n+pub type TraitDoc = {\n     item: ItemDoc,\n     methods: ~[MethodDoc]\n };\n@@ -508,7 +508,7 @@ impl TraitDoc : cmp::Eq {\n     pure fn ne(&self, other: &TraitDoc) -> bool { !(*self).eq(other) }\n }\n \n-type MethodDoc = {\n+pub type MethodDoc = {\n     name: ~str,\n     brief: Option<~str>,\n     desc: Option<~str>,\n@@ -544,7 +544,7 @@ impl MethodDoc : cmp::Eq {\n     pure fn ne(&self, other: &MethodDoc) -> bool { !(*self).eq(other) }\n }\n \n-type ImplDoc = {\n+pub type ImplDoc = {\n     item: ItemDoc,\n     trait_types: ~[~str],\n     self_ty: Option<~str>,\n@@ -574,9 +574,9 @@ impl ImplDoc : cmp::Eq {\n     pure fn ne(&self, other: &ImplDoc) -> bool { !(*self).eq(other) }\n }\n \n-type TyDoc = SimpleItemDoc;\n+pub type TyDoc = SimpleItemDoc;\n \n-type StructDoc = {\n+pub type StructDoc = {\n     item: ItemDoc,\n     fields: ~[~str],\n     sig: Option<~str>\n@@ -603,7 +603,7 @@ impl StructDoc : cmp::Eq {\n     pure fn ne(&self, other: &StructDoc) -> bool { !(*self).eq(other) }\n }\n \n-type Index = {\n+pub type Index = {\n     entries: ~[IndexEntry]\n };\n \n@@ -634,7 +634,7 @@ impl Index : cmp::Eq {\n  * * brief - The brief description\n  * * link - A format-specific string representing the link target\n  */\n-type IndexEntry = {\n+pub type IndexEntry = {\n     kind: ~str,\n     name: ~str,\n     brief: Option<~str>,\n@@ -764,7 +764,7 @@ impl ModDoc {\n     }\n }\n \n-trait PageUtils {\n+pub trait PageUtils {\n     fn mods() -> ~[ModDoc];\n     fn nmods() -> ~[NmodDoc];\n     fn fns() -> ~[FnDoc];\n@@ -850,7 +850,7 @@ impl ~[Page]: PageUtils {\n     }\n }\n \n-trait Item {\n+pub trait Item {\n     pure fn item() -> ItemDoc;\n }\n \n@@ -898,7 +898,7 @@ impl StructDoc: Item {\n     pure fn item() -> ItemDoc { self.item }\n }\n \n-trait ItemUtils {\n+pub trait ItemUtils {\n     pure fn id() -> AstId;\n     pure fn name() -> ~str;\n     pure fn path() -> ~[~str];"}, {"sha": "ea2ed83963272db9a51b0565f9b7ead7e1419239", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -1,8 +1,6 @@\n //! Escapes text sequences\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"escape\", escape)\n }\n "}, {"sha": "323c321d0e19549f6df17d3da1bb0598941506ec", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -4,8 +4,6 @@ use syntax::ast;\n use doc::ItemUtils;\n use task::local_data::local_data_get;\n \n-export from_srv, extract, to_str, interner;\n-\n /* can't import macros yet, so this is copied from token.rs. See its comment\n  * there. */\n macro_rules! interner_key (\n@@ -15,17 +13,17 @@ macro_rules! interner_key (\n \n // Hack; rather than thread an interner through everywhere, rely on\n // thread-local data\n-fn to_str(id: ast::ident) -> ~str {\n+pub fn to_str(id: ast::ident) -> ~str {\n     let intr = unsafe{ local_data_get(interner_key!()) };\n \n     return *(*intr.get()).get(id);\n }\n \n-fn interner() -> @syntax::parse::token::ident_interner {\n+pub fn interner() -> @syntax::parse::token::ident_interner {\n     return *(unsafe{ local_data_get(interner_key!()) }).get();\n }\n \n-fn from_srv(\n+pub fn from_srv(\n     srv: astsrv::Srv,\n     default_name: ~str\n ) -> doc::Doc {\n@@ -37,7 +35,7 @@ fn from_srv(\n     }\n }\n \n-fn extract(\n+pub fn extract(\n     crate: @ast::crate,\n     default_name: ~str\n ) -> doc::Doc {"}, {"sha": "f30baacb1f447d6fc88d66cc094716ba57b3a206", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 21, "deletions": 42, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -1,25 +1,4 @@\n-export Fold;\n-export default_seq_fold;\n-export default_seq_fold_doc;\n-export default_seq_fold_crate;\n-export default_seq_fold_item;\n-export default_seq_fold_mod;\n-export default_seq_fold_nmod;\n-export default_seq_fold_fn;\n-export default_seq_fold_const;\n-export default_seq_fold_enum;\n-export default_seq_fold_trait;\n-export default_seq_fold_impl;\n-export default_seq_fold_type;\n-export default_seq_fold_struct;\n-export default_par_fold;\n-export default_par_fold_mod;\n-export default_par_fold_nmod;\n-export default_any_fold;\n-export default_any_fold_mod;\n-export default_any_fold_nmod;\n-\n-enum Fold<T> = Fold_<T>;\n+pub enum Fold<T> = Fold_<T>;\n \n type FoldDoc<T> = fn~(fold: Fold<T>, doc: doc::Doc) -> doc::Doc;\n type FoldCrate<T> = fn~(fold: Fold<T>, doc: doc::CrateDoc) -> doc::CrateDoc;\n@@ -86,7 +65,7 @@ fn mk_fold<T:Copy>(\n     })\n }\n \n-fn default_any_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n+pub fn default_any_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -104,7 +83,7 @@ fn default_any_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n     )\n }\n \n-fn default_seq_fold<T:Copy>(ctxt: T) -> Fold<T> {\n+pub fn default_seq_fold<T:Copy>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -122,7 +101,7 @@ fn default_seq_fold<T:Copy>(ctxt: T) -> Fold<T> {\n     )\n }\n \n-fn default_par_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n+pub fn default_par_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n     mk_fold(\n         ctxt,\n         |f, d| default_seq_fold_doc(f, d),\n@@ -140,7 +119,7 @@ fn default_par_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n     )\n }\n \n-fn default_seq_fold_doc<T>(fold: Fold<T>, doc: doc::Doc) -> doc::Doc {\n+pub fn default_seq_fold_doc<T>(fold: Fold<T>, doc: doc::Doc) -> doc::Doc {\n     doc::Doc_({\n         pages: do vec::map(doc.pages) |page| {\n             match *page {\n@@ -156,7 +135,7 @@ fn default_seq_fold_doc<T>(fold: Fold<T>, doc: doc::Doc) -> doc::Doc {\n     })\n }\n \n-fn default_seq_fold_crate<T>(\n+pub fn default_seq_fold_crate<T>(\n     fold: Fold<T>,\n     doc: doc::CrateDoc\n ) -> doc::CrateDoc {\n@@ -165,14 +144,14 @@ fn default_seq_fold_crate<T>(\n     }\n }\n \n-fn default_seq_fold_item<T>(\n+pub fn default_seq_fold_item<T>(\n     _fold: Fold<T>,\n     doc: doc::ItemDoc\n ) -> doc::ItemDoc {\n     doc\n }\n \n-fn default_any_fold_mod<T:Send Copy>(\n+pub fn default_any_fold_mod<T:Send Copy>(\n     fold: Fold<T>,\n     doc: doc::ModDoc\n ) -> doc::ModDoc {\n@@ -185,7 +164,7 @@ fn default_any_fold_mod<T:Send Copy>(\n     })\n }\n \n-fn default_seq_fold_mod<T>(\n+pub fn default_seq_fold_mod<T>(\n     fold: Fold<T>,\n     doc: doc::ModDoc\n ) -> doc::ModDoc {\n@@ -198,7 +177,7 @@ fn default_seq_fold_mod<T>(\n     })\n }\n \n-fn default_par_fold_mod<T:Send Copy>(\n+pub fn default_par_fold_mod<T:Send Copy>(\n     fold: Fold<T>,\n     doc: doc::ModDoc\n ) -> doc::ModDoc {\n@@ -211,7 +190,7 @@ fn default_par_fold_mod<T:Send Copy>(\n     })\n }\n \n-fn default_any_fold_nmod<T:Send Copy>(\n+pub fn default_any_fold_nmod<T:Send Copy>(\n     fold: Fold<T>,\n     doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n@@ -224,7 +203,7 @@ fn default_any_fold_nmod<T:Send Copy>(\n     }\n }\n \n-fn default_seq_fold_nmod<T>(\n+pub fn default_seq_fold_nmod<T>(\n     fold: Fold<T>,\n     doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n@@ -237,7 +216,7 @@ fn default_seq_fold_nmod<T>(\n     }\n }\n \n-fn default_par_fold_nmod<T:Send Copy>(\n+pub fn default_par_fold_nmod<T:Send Copy>(\n     fold: Fold<T>,\n     doc: doc::NmodDoc\n ) -> doc::NmodDoc {\n@@ -250,7 +229,7 @@ fn default_par_fold_nmod<T:Send Copy>(\n     }\n }\n \n-fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n+pub fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n     match doc {\n       doc::ModTag(ModDoc) => {\n         doc::ModTag(fold.fold_mod(fold, ModDoc))\n@@ -282,7 +261,7 @@ fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n     }\n }\n \n-fn default_seq_fold_fn<T>(\n+pub fn default_seq_fold_fn<T>(\n     fold: Fold<T>,\n     doc: doc::FnDoc\n ) -> doc::FnDoc {\n@@ -292,7 +271,7 @@ fn default_seq_fold_fn<T>(\n     }\n }\n \n-fn default_seq_fold_const<T>(\n+pub fn default_seq_fold_const<T>(\n     fold: Fold<T>,\n     doc: doc::ConstDoc\n ) -> doc::ConstDoc {\n@@ -302,7 +281,7 @@ fn default_seq_fold_const<T>(\n     }\n }\n \n-fn default_seq_fold_enum<T>(\n+pub fn default_seq_fold_enum<T>(\n     fold: Fold<T>,\n     doc: doc::EnumDoc\n ) -> doc::EnumDoc {\n@@ -312,7 +291,7 @@ fn default_seq_fold_enum<T>(\n     }\n }\n \n-fn default_seq_fold_trait<T>(\n+pub fn default_seq_fold_trait<T>(\n     fold: Fold<T>,\n     doc: doc::TraitDoc\n ) -> doc::TraitDoc {\n@@ -322,7 +301,7 @@ fn default_seq_fold_trait<T>(\n     }\n }\n \n-fn default_seq_fold_impl<T>(\n+pub fn default_seq_fold_impl<T>(\n     fold: Fold<T>,\n     doc: doc::ImplDoc\n ) -> doc::ImplDoc {\n@@ -332,7 +311,7 @@ fn default_seq_fold_impl<T>(\n     }\n }\n \n-fn default_seq_fold_type<T>(\n+pub fn default_seq_fold_type<T>(\n     fold: Fold<T>,\n     doc: doc::TyDoc\n ) -> doc::TyDoc {\n@@ -342,7 +321,7 @@ fn default_seq_fold_type<T>(\n     }\n }\n \n-fn default_seq_fold_struct<T>(\n+pub fn default_seq_fold_struct<T>(\n     fold: Fold<T>,\n     doc: doc::StructDoc\n ) -> doc::StructDoc {"}, {"sha": "d04986ea4de8704c4c7eda65ace5e37735af54ac", "filename": "src/librustdoc/markdown_index_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_index_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,9 +2,7 @@\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass(config: config::Config) -> Pass {\n+pub fn mk_pass(config: config::Config) -> Pass {\n     {\n         name: ~\"markdown_index\",\n         f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {"}, {"sha": "71a38b532584626f86fa76a21b5d29862ee83893", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -5,10 +5,7 @@ use markdown_writer::Writer;\n use markdown_writer::WriterUtils;\n use markdown_writer::WriterFactory;\n \n-export mk_pass;\n-export header_kind, header_name, header_text;\n-\n-fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n+pub fn mk_pass(+writer_factory: WriterFactory) -> Pass {\n     let f = fn~(move writer_factory,\n                 srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n         run(srv, doc, copy writer_factory)\n@@ -183,7 +180,7 @@ fn write_header_(ctxt: Ctxt, lvl: Hlvl, title: ~str) {\n     ctxt.w.write_line(~\"\");\n }\n \n-fn header_kind(doc: doc::ItemTag) -> ~str {\n+pub fn header_kind(doc: doc::ItemTag) -> ~str {\n     match doc {\n       doc::ModTag(_) => {\n         if doc.id() == syntax::ast::crate_node_id {\n@@ -219,7 +216,7 @@ fn header_kind(doc: doc::ItemTag) -> ~str {\n     }\n }\n \n-fn header_name(doc: doc::ItemTag) -> ~str {\n+pub fn header_name(doc: doc::ItemTag) -> ~str {\n     let fullpath = str::connect(doc.path() + ~[doc.name()], ~\"::\");\n     match doc {\n       doc::ModTag(_) if doc.id() != syntax::ast::crate_node_id => {\n@@ -248,7 +245,7 @@ fn header_name(doc: doc::ItemTag) -> ~str {\n     }\n }\n \n-fn header_text(doc: doc::ItemTag) -> ~str {\n+pub fn header_text(doc: doc::ItemTag) -> ~str {\n     match doc {\n       doc::ImplTag(ImplDoc) => {\n         let header_kind = header_kind(doc);"}, {"sha": "9b7a33960e0a53c8225c863031e93420d1d4f491", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,23 +2,15 @@ use doc::ItemUtils;\n use io::ReaderUtil;\n use std::future;\n \n-export WriteInstr;\n-export Writer;\n-export WriterFactory;\n-export WriterUtils;\n-export make_writer_factory;\n-export future_writer_factory;\n-export make_filename;\n-\n-enum WriteInstr {\n+pub enum WriteInstr {\n     Write(~str),\n     Done\n }\n \n-type Writer = fn~(+v: WriteInstr);\n-type WriterFactory = fn~(page: doc::Page) -> Writer;\n+pub type Writer = fn~(+v: WriteInstr);\n+pub type WriterFactory = fn~(page: doc::Page) -> Writer;\n \n-trait WriterUtils {\n+pub trait WriterUtils {\n     fn write_str(str: ~str);\n     fn write_line(str: ~str);\n     fn write_done();\n@@ -38,7 +30,7 @@ impl Writer: WriterUtils {\n     }\n }\n \n-fn make_writer_factory(config: config::Config) -> WriterFactory {\n+pub fn make_writer_factory(config: config::Config) -> WriterFactory {\n     match config.output_format {\n       config::Markdown => {\n         markdown_writer_factory(config)\n@@ -175,7 +167,7 @@ fn make_local_filename(\n     config.output_dir.push_rel(&filename)\n }\n \n-fn make_filename(\n+pub fn make_filename(\n     config: config::Config,\n     page: doc::Page\n ) -> Path {\n@@ -269,7 +261,7 @@ fn write_file(path: &Path, s: ~str) {\n     }\n }\n \n-fn future_writer_factory(\n+pub fn future_writer_factory(\n ) -> (WriterFactory, comm::Port<(doc::Page, ~str)>) {\n     let markdown_po = comm::Port();\n     let markdown_ch = comm::Chan(&markdown_po);"}, {"sha": "3e690c83463719cef65c5a3ae07917a2e0949396", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -8,9 +8,7 @@ individual modules, pages for the crate, indexes, etc.\n use doc::{ItemUtils, PageUtils};\n use syntax::ast;\n \n-export mk_pass;\n-\n-fn mk_pass(output_style: config::OutputStyle) -> Pass {\n+pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n     {\n         name: ~\"page\",\n         f: fn~(srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {"}, {"sha": "0f1d82b3737e97c1c040f38fa7ea7da0b5a4981e", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -8,24 +8,22 @@ use syntax::ast;\n use syntax::codemap;\n use syntax::parse;\n \n-export from_file, from_str, from_file_sess, from_str_sess;\n-\n-fn from_file(file: &Path) -> @ast::crate {\n+pub fn from_file(file: &Path) -> @ast::crate {\n     parse::parse_crate_from_file(\n         file, ~[], parse::new_parse_sess(None))\n }\n \n-fn from_str(source: ~str) -> @ast::crate {\n+pub fn from_str(source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @source, ~[], parse::new_parse_sess(None))\n }\n \n-fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n+pub fn from_file_sess(sess: session::Session, file: &Path) -> @ast::crate {\n     parse::parse_crate_from_file(\n         file, cfg(sess, file_input(*file)), sess.parse_sess)\n }\n \n-fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n+pub fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n     parse::parse_crate_from_source_str(\n         ~\"-\", @source, cfg(sess, str_input(source)), sess.parse_sess)\n }"}, {"sha": "11fba49026ee0643c3993fc192c358a7f388739b", "filename": "src/librustdoc/path_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpath_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -3,9 +3,7 @@\n use doc::ItemUtils;\n use syntax::ast;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"path\",\n         f: run"}, {"sha": "5a62efa6720520ba708971aac49fc7d983e0a9f1", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,9 +2,8 @@\n \n use doc::ItemUtils;\n use std::map::HashMap;\n-export mk_pass;\n \n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"prune_hidden\",\n         f: run"}, {"sha": "5ab5d8f70559c7878548510567111ed38b9a6f00", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -11,7 +11,6 @@\n \n #[no_core];\n #[legacy_modes];\n-#[legacy_exports];\n \n #[allow(vecs_implicitly_copyable)];\n #[allow(non_implicitly_copyable_typarams)];\n@@ -26,56 +25,30 @@ extern mod syntax(vers = \"0.5\");\n use core::*;\n use std::par;\n \n-#[legacy_exports]\n mod pass;\n-#[legacy_exports]\n mod config;\n-#[legacy_exports]\n mod parse;\n-#[legacy_exports]\n mod extract;\n-#[legacy_exports]\n mod attr_parser;\n-#[legacy_exports]\n mod doc;\n-#[legacy_exports]\n mod markdown_index_pass;\n-#[legacy_exports]\n mod markdown_pass;\n-#[legacy_exports]\n mod markdown_writer;\n-#[legacy_exports]\n mod fold;\n-#[legacy_exports]\n mod path_pass;\n-#[legacy_exports]\n mod attr_pass;\n-#[legacy_exports]\n mod tystr_pass;\n-#[legacy_exports]\n mod prune_hidden_pass;\n-#[legacy_exports]\n mod desc_to_brief_pass;\n-#[legacy_exports]\n mod text_pass;\n-#[legacy_exports]\n mod unindent_pass;\n-#[legacy_exports]\n mod trim_pass;\n-#[legacy_exports]\n mod astsrv;\n-#[legacy_exports]\n mod demo;\n-#[legacy_exports]\n mod sort_pass;\n-#[legacy_exports]\n mod sort_item_name_pass;\n-#[legacy_exports]\n mod sort_item_type_pass;\n-#[legacy_exports]\n mod page_pass;\n-#[legacy_exports]\n mod sectionalize_pass;\n-#[legacy_exports]\n mod escape_pass;\n mod prune_private_pass;"}, {"sha": "a530b4b5c8f104ac39596f432d8d59be39c70176", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,9 +2,7 @@\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"sectionalize\",\n         f: run"}, {"sha": "7947eef9c34ca70440fe22e126c2f6ee3a06f30e", "filename": "src/librustdoc/sort_item_name_pass.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_item_name_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_name_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -1,9 +1,8 @@\n //! Sorts items by name\n \n use doc::ItemUtils;\n-export mk_pass;\n \n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     pure fn by_item_name(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n         (*item1).name() <= (*item2).name()\n     }"}, {"sha": "836485de0832a724d9b6d55687428646e2a23236", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,9 +2,7 @@\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     pure fn by_score(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n         pure fn score(item: &doc::ItemTag) -> int {\n             match *item {"}, {"sha": "ea86f4e10c821a40b42955390650aaf105243b4e", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -3,11 +3,9 @@\n use doc::ItemUtils;\n use std::sort;\n \n-export item_lteq, mk_pass;\n+pub type ItemLtEq = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n-type ItemLtEq = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n-\n-fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n+pub fn mk_pass(name: ~str, +lteq: ItemLtEq) -> Pass {\n     {\n         name: name,\n         f: fn~(move lteq, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {"}, {"sha": "9b2eb924ae405555b3b488648e85e3fa66fc89b3", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -2,9 +2,7 @@\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n+pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n     {\n         name: name,\n         f: fn~(move op, srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {"}, {"sha": "82276bcdb75f5b07a7624f4c9a44993759f53684", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -7,9 +7,7 @@ is interpreted as the brief description.\n \n use doc::ItemUtils;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"trim\", |s| str::trim(s) )\n }\n "}, {"sha": "c00486cda213454257439963f3ce2ed199cd4bdd", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -7,9 +7,7 @@ use syntax::ast_map;\n use std::map::HashMap;\n use extract::to_str;\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     {\n         name: ~\"tystr\",\n         f: run"}, {"sha": "8659b1a836b7537a78e2c489709874311e662b00", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/145e02347e88176e342631033abb748c51db45e8/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=145e02347e88176e342631033abb748c51db45e8", "patch": "@@ -9,9 +9,7 @@ instances where the string containing the doc comment is opened in the\n middle of a line, and each of the following lines is indented.\n */\n \n-export mk_pass;\n-\n-fn mk_pass() -> Pass {\n+pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"unindent\", unindent)\n }\n "}]}