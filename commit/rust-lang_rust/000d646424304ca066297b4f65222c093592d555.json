{"sha": "000d646424304ca066297b4f65222c093592d555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGQ2NDY0MjQzMDRjYTA2NjI5N2I0ZjY1MjIyYzA5MzU5MmQ1NTU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-06T06:17:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-06T06:17:47Z"}, "message": "Rollup merge of #63293 - shepmaster:align-to-doc, r=RalfJung\n\nClarify align_to's requirements and obligations\n\nBased on discussions with @RalfJung around my misunderstandings when using this.\n\nr? @RalfJung", "tree": {"sha": "aa79280245663e29091c7f7c33449a1b0f7759be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa79280245663e29091c7f7c33449a1b0f7759be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000d646424304ca066297b4f65222c093592d555", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdSRuLCRBK7hj4Ov3rIwAAdHIIAC7LKEBPmkESs275mmnych6H\nYIc7ycEO+VFwe/J+TRtPLJEofBRSR+5vIrV6pKuTXhtnnLRrKSHTyqLsBTE5uFD1\nSn9Fm9eBLfftUo8k2LHuQT7yeqKFq0pQI/qU9EIKIJpfR5hz/0WAf04Xdyo7CWuC\nKoRDcOwLphEi/XRusVG5kIjgp65okR+C2GJDvxzjDFf+qd3HgXHvDrWvOLaz3dt2\nKW1sGYnCw2+uhpP3KhY1B7YbeYO/x7aI4xevAv/NNMVr5AOggBTFuTpWLRFwhMrg\nnmUIUxAToyctkydF+M9ktCMctYwYOPb5AmVs3Kt6n+oEZ4dsjqGFWxpKzeSRy5c=\n=M9oK\n-----END PGP SIGNATURE-----\n", "payload": "tree aa79280245663e29091c7f7c33449a1b0f7759be\nparent 505d68e7399aad5079f3acf969db9d372da9de41\nparent 571e22d7e82d471a38ebba1e6fdeed635b2a9953\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565072267 +0200\ncommitter GitHub <noreply@github.com> 1565072267 +0200\n\nRollup merge of #63293 - shepmaster:align-to-doc, r=RalfJung\n\nClarify align_to's requirements and obligations\n\nBased on discussions with @RalfJung around my misunderstandings when using this.\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000d646424304ca066297b4f65222c093592d555", "html_url": "https://github.com/rust-lang/rust/commit/000d646424304ca066297b4f65222c093592d555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000d646424304ca066297b4f65222c093592d555/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "505d68e7399aad5079f3acf969db9d372da9de41", "url": "https://api.github.com/repos/rust-lang/rust/commits/505d68e7399aad5079f3acf969db9d372da9de41", "html_url": "https://github.com/rust-lang/rust/commit/505d68e7399aad5079f3acf969db9d372da9de41"}, {"sha": "571e22d7e82d471a38ebba1e6fdeed635b2a9953", "url": "https://api.github.com/repos/rust-lang/rust/commits/571e22d7e82d471a38ebba1e6fdeed635b2a9953", "html_url": "https://github.com/rust-lang/rust/commit/571e22d7e82d471a38ebba1e6fdeed635b2a9953"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "d5a34ea2bd5a17edda41537a4194c82aa96cbadd", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/000d646424304ca066297b4f65222c093592d555/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000d646424304ca066297b4f65222c093592d555/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=000d646424304ca066297b4f65222c093592d555", "patch": "@@ -2308,9 +2308,10 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n-    /// middle slice the greatest length possible for a given type and input slice, but only\n-    /// your algorithm's performance should depend on that, not its correctness.\n+    /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest\n+    /// length possible for a given type and input slice, but only your algorithm's performance\n+    /// should depend on that, not its correctness. It is permissible for all of the input data to\n+    /// be returned as the prefix or suffix slice.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything.\n@@ -2361,9 +2362,10 @@ impl<T> [T] {\n     /// maintained.\n     ///\n     /// This method splits the slice into three distinct slices: prefix, correctly aligned middle\n-    /// slice of a new type, and the suffix slice. The method does a best effort to make the\n-    /// middle slice the greatest length possible for a given type and input slice, but only\n-    /// your algorithm's performance should depend on that, not its correctness.\n+    /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest\n+    /// length possible for a given type and input slice, but only your algorithm's performance\n+    /// should depend on that, not its correctness. It is permissible for all of the input data to\n+    /// be returned as the prefix or suffix slice.\n     ///\n     /// This method has no purpose when either input element `T` or output element `U` are\n     /// zero-sized and will return the original slice without splitting anything."}]}