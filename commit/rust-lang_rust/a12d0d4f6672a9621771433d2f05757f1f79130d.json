{"sha": "a12d0d4f6672a9621771433d2f05757f1f79130d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMmQwZDRmNjY3MmE5NjIxNzcxNDMzZDJmMDU3NTdmMWY3OTEzMGQ=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-09-08T18:11:30Z"}, "committer": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-09-13T15:07:17Z"}, "message": "honor #[rustc_const_unstable] attributes", "tree": {"sha": "311a6bcf852139223a8444c1442d3248fd9e6e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/311a6bcf852139223a8444c1442d3248fd9e6e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a12d0d4f6672a9621771433d2f05757f1f79130d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a12d0d4f6672a9621771433d2f05757f1f79130d", "html_url": "https://github.com/rust-lang/rust/commit/a12d0d4f6672a9621771433d2f05757f1f79130d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a12d0d4f6672a9621771433d2f05757f1f79130d/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824952f48b85806c498d700f183dfc42b516cc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/824952f48b85806c498d700f183dfc42b516cc7d", "html_url": "https://github.com/rust-lang/rust/commit/824952f48b85806c498d700f183dfc42b516cc7d"}], "stats": {"total": 236, "additions": 197, "deletions": 39}, "files": [{"sha": "e52be70190c81b043ab02334efd8eed0aaee8edf", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -81,7 +81,12 @@ impl_stable_hash_for!(enum ::syntax::abi::Abi {\n });\n \n impl_stable_hash_for!(struct ::syntax::attr::Deprecation { since, note });\n-impl_stable_hash_for!(struct ::syntax::attr::Stability { level, feature, rustc_depr });\n+impl_stable_hash_for!(struct ::syntax::attr::Stability {\n+    level,\n+    feature,\n+    rustc_depr,\n+    rustc_const_unstable\n+});\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n for ::syntax::attr::StabilityLevel {\n@@ -102,6 +107,7 @@ for ::syntax::attr::StabilityLevel {\n }\n \n impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason });\n+impl_stable_hash_for!(struct ::syntax::attr::RustcConstUnstable { feature });\n \n \n impl_stable_hash_for!(enum ::syntax::attr::IntType {"}, {"sha": "977102ec1adcaffd99dd37ae87b3fe1ed5bb7806", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -427,6 +427,7 @@ impl<'a, 'tcx> Index<'tcx> {\n                     },\n                     feature: Symbol::intern(\"rustc_private\"),\n                     rustc_depr: None,\n+                    rustc_const_unstable: None,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }"}, {"sha": "fa6a98224ee814d4f53f2667cea7460c7ca4a82e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -30,6 +30,7 @@ use rustc::mir::transform::{MirPass, MirSource};\n use rustc::mir::visit::{LvalueContext, Visitor};\n use rustc::middle::lang_items;\n use syntax::abi::Abi;\n+use syntax::attr;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -713,14 +714,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             self.visit_operand(func, location);\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n-            let (mut is_shuffle, mut is_const_fn) = (false, false);\n+            let (mut is_shuffle, mut is_const_fn) = (false, None);\n             if let ty::TyFnDef(def_id, _) = fn_ty.sty {\n                 match self.tcx.fn_sig(def_id).abi() {\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n                         match &self.tcx.item_name(def_id)[..] {\n-                            \"size_of\" | \"min_align_of\" => is_const_fn = true,\n+                            \"size_of\" | \"min_align_of\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;\n@@ -730,7 +731,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         }\n                     }\n                     _ => {\n-                        is_const_fn = self.tcx.is_const_fn(def_id);\n+                        if self.tcx.is_const_fn(def_id) {\n+                            is_const_fn = Some(def_id);\n+                        }\n                     }\n                 }\n             }\n@@ -751,25 +754,38 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             // Const fn calls.\n-            if is_const_fn {\n-                // We are in a const or static initializer,\n-                if self.mode != Mode::Fn &&\n-\n-                    // feature-gate is not enabled,\n-                    !self.tcx.sess.features.borrow().const_fn &&\n-\n-                    // this doesn't come from a crate with the feature-gate enabled,\n-                    self.def_id.is_local() &&\n-\n-                    // this doesn't come from a macro that has #[allow_internal_unstable]\n-                    !self.span.allows_unstable()\n-                {\n-                    let mut err = self.tcx.sess.struct_span_err(self.span,\n-                        \"const fns are an unstable feature\");\n-                    help!(&mut err,\n-                          \"in Nightly builds, add `#![feature(const_fn)]` \\\n-                           to the crate attributes to enable\");\n-                    err.emit();\n+            if let Some(def_id) = is_const_fn {\n+                // find corresponding rustc_const_unstable feature\n+                if let Some(&attr::Stability {\n+                    rustc_const_unstable: Some(attr::RustcConstUnstable {\n+                        feature: ref feature_name\n+                    }),\n+                .. }) = self.tcx.lookup_stability(def_id) {\n+\n+                    // We are in a const or static initializer,\n+                    if self.mode != Mode::Fn &&\n+\n+                        // feature-gate is not enabled,\n+                        !self.tcx.sess.features.borrow()\n+                            .declared_lib_features\n+                            .iter()\n+                            .any(|&(ref sym, _)| sym == feature_name) &&\n+\n+                        // this doesn't come from a crate with the feature-gate enabled,\n+                        self.def_id.is_local() &&\n+\n+                        // this doesn't come from a macro that has #[allow_internal_unstable]\n+                        !self.span.allows_unstable()\n+                    {\n+                        let mut err = self.tcx.sess.struct_span_err(self.span,\n+                            &format!(\"`{}` is not yet stable as a const fn\",\n+                                     self.tcx.item_path_str(def_id)));\n+                        help!(&mut err,\n+                              \"in Nightly builds, add `#![feature({})]` \\\n+                               to the crate attributes to enable\",\n+                              feature_name);\n+                        err.emit();\n+                    }\n                 }\n             } else {\n                 self.qualif = Qualif::NOT_CONST;"}, {"sha": "03907eed9006faded2c730b1b93654d7fc150d49", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 65, "deletions": 14, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -637,12 +637,13 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n     }\n }\n \n-/// Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.\n+/// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n #[derive(RustcEncodable, RustcDecodable, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n+    pub rustc_const_unstable: Option<RustcConstUnstable>,\n }\n \n /// The available stability levels.\n@@ -659,6 +660,11 @@ pub struct RustcDeprecation {\n     pub reason: Symbol,\n }\n \n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n+pub struct RustcConstUnstable {\n+    pub feature: Symbol,\n+}\n+\n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Debug, Eq, Hash)]\n pub struct Deprecation {\n     pub since: Option<Symbol>,\n@@ -678,9 +684,15 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n {\n     let mut stab: Option<Stability> = None;\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n+    let mut rustc_const_unstable: Option<RustcConstUnstable> = None;\n \n     'outer: for attr in attrs_iter {\n-        if attr.path != \"rustc_deprecated\" && attr.path != \"unstable\" && attr.path != \"stable\" {\n+        if ![\n+            \"rustc_deprecated\",\n+            \"rustc_const_unstable\",\n+            \"unstable\",\n+            \"stable\",\n+        ].iter().any(|&s| attr.path == s) {\n             continue // not a stability level\n         }\n \n@@ -703,21 +715,18 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                 }\n             };\n \n-            match &*meta.name.as_str() {\n-                \"rustc_deprecated\" => {\n-                    if rustc_depr.is_some() {\n-                        span_err!(diagnostic, item_sp, E0540,\n-                                  \"multiple rustc_deprecated attributes\");\n-                        break\n-                    }\n-\n-                    let mut since = None;\n-                    let mut reason = None;\n+            macro_rules! get_meta {\n+                ($($name:ident),+) => {\n+                    $(\n+                        let mut $name = None;\n+                    )+\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n                             match &*mi.name().as_str() {\n-                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                                \"reason\" => if !get(mi, &mut reason) { continue 'outer },\n+                                $(\n+                                    stringify!($name)\n+                                        => if !get(mi, &mut $name) { continue 'outer },\n+                                )+\n                                 _ => {\n                                     handle_errors(diagnostic, mi.span,\n                                                   AttrError::UnknownMetaItem(mi.name()));\n@@ -729,6 +738,18 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             continue 'outer\n                         }\n                     }\n+                }\n+            }\n+\n+            match &*meta.name.as_str() {\n+                \"rustc_deprecated\" => {\n+                    if rustc_depr.is_some() {\n+                        span_err!(diagnostic, item_sp, E0540,\n+                                  \"multiple rustc_deprecated attributes\");\n+                        continue 'outer\n+                    }\n+\n+                    get_meta!(since, reason);\n \n                     match (since, reason) {\n                         (Some(since), Some(reason)) => {\n@@ -747,6 +768,23 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                         }\n                     }\n                 }\n+                \"rustc_const_unstable\" => {\n+                    if rustc_const_unstable.is_some() {\n+                        span_err!(diagnostic, item_sp, E0553,\n+                                  \"multiple rustc_const_unstable attributes\");\n+                        continue 'outer\n+                    }\n+\n+                    get_meta!(feature);\n+                    if let Some(feature) = feature {\n+                        rustc_const_unstable = Some(RustcConstUnstable {\n+                            feature\n+                        });\n+                    } else {\n+                        span_err!(diagnostic, attr.span(), E0629, \"missing 'feature'\");\n+                        continue\n+                    }\n+                }\n                 \"unstable\" => {\n                     if stab.is_some() {\n                         handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels);\n@@ -791,6 +829,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 },\n                                 feature,\n                                 rustc_depr: None,\n+                                rustc_const_unstable: None,\n                             })\n                         }\n                         (None, _, _) => {\n@@ -836,6 +875,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                 },\n                                 feature,\n                                 rustc_depr: None,\n+                                rustc_const_unstable: None,\n                             })\n                         }\n                         (None, _) => {\n@@ -867,6 +907,17 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n         }\n     }\n \n+    // Merge the const-unstable info into the stability info\n+    if let Some(rustc_const_unstable) = rustc_const_unstable {\n+        if let Some(ref mut stab) = stab {\n+            stab.rustc_const_unstable = Some(rustc_const_unstable);\n+        } else {\n+            span_err!(diagnostic, item_sp, E0630,\n+                      \"rustc_const_unstable attribute must be paired with \\\n+                       either stable or unstable attribute\");\n+        }\n+    }\n+\n     stab\n }\n "}, {"sha": "46dec73c9627d03e00303bc2cbc073fb2c2d652c", "filename": "src/libsyntax/diagnostic_list.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Fdiagnostic_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Fdiagnostic_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic_list.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -357,8 +357,11 @@ register_diagnostics! {\n     E0549, // rustc_deprecated attribute must be paired with either stable or unstable attribute\n     E0550, // multiple deprecated attributes\n     E0551, // incorrect meta item\n+    E0553, // multiple rustc_const_unstable attributes\n     E0555, // malformed feature attribute, expected #![feature(...)]\n     E0556, // malformed feature, expected just one word\n     E0584, // file for module `..` found at both .. and ..\n     E0589, // invalid `repr(align)` attribute\n+    E0629, // missing 'feature' (rustc_const_unstable)\n+    E0630, // rustc_const_unstable attribute must be paired with stable/unstable attribute\n }"}, {"sha": "38e20b9fe4065c6b2703fe07e861159949421883", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -137,6 +137,7 @@ declare_features! (\n \n     // rustc internal\n     (active, rustc_diagnostic_macros, \"1.0.0\", None),\n+    (active, rustc_const_unstable, \"1.0.0\", None),\n     (active, advanced_slice_patterns, \"1.0.0\", Some(23121)),\n     (active, box_syntax, \"1.0.0\", Some(27779)),\n     (active, placement_in_syntax, \"1.0.0\", Some(27779)),\n@@ -622,6 +623,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                              \"the `#[rustc_on_unimplemented]` attribute \\\n                                               is an experimental feature\",\n                                              cfg_fn!(on_unimplemented))),\n+    (\"rustc_const_unstable\", Normal, Gated(Stability::Unstable,\n+                                             \"rustc_const_unstable\",\n+                                             \"the `#[rustc_const_unstable]` attribute \\\n+                                              is an internal feature\",\n+                                             cfg_fn!(rustc_const_unstable))),\n     (\"global_allocator\", Normal, Gated(Stability::Unstable,\n                                        \"global_allocator\",\n                                        \"the `#[global_allocator]` attribute is \\"}, {"sha": "823cb89b365ca6d580f5aa21a04d4411522f0aec", "filename": "src/test/compile-fail/const-fn-feature-flags.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-feature-flags.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fns in std using individual feature gates.\n+\n+use std::cell::Cell;\n+\n+const CELL: Cell<i32> = Cell::new(42); //~ERROR not yet stable as a const fn\n+    //~^HELP #![feature(const_cell_new)]\n+\n+fn main() {\n+    let v = CELL.get();\n+    CELL.set(v+1);\n+\n+    assert_eq!(CELL.get(), v);\n+}\n+"}, {"sha": "38a3e15fd7eb36317e232116ebacfcfa49468964", "filename": "src/test/compile-fail/feature-gate-rustc_const_unstable.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc_const_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc_const_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc_const_unstable.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test internal const fn feature gate.\n+\n+#![feature(staged_api)]\n+#![feature(const_fn)]\n+//#![feature(rustc_const_unstable)]\n+\n+#[stable(feature=\"zing\", since=\"1.0.0\")]\n+#[rustc_const_unstable(feature=\"fzzzzzt\")] //~ERROR internal feature\n+pub const fn bazinga() {}\n+\n+fn main() {\n+}\n+"}, {"sha": "263ac427b7676a25a11f5979c9061584bb677f72", "filename": "src/test/compile-fail/stability-attribute-sanity.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstability-attribute-sanity.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -10,7 +10,7 @@\n \n // Various checks that stability attributes are used correctly, per RFC 507\n \n-#![feature(staged_api)]\n+#![feature(const_fn, staged_api, rustc_const_unstable)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -88,8 +88,11 @@ fn multiple3() { }\n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n+#[rustc_const_unstable(feature = \"a\")]\n+#[rustc_const_unstable(feature = \"b\")]\n+pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n //~^ ERROR Invalid stability or deprecation version found\n+//~| ERROR multiple rustc_const_unstable attributes\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }"}, {"sha": "1e27a3edac808b1eca8714487faaca446c641edf", "filename": "src/test/run-pass/const-fn-feature-flags.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a12d0d4f6672a9621771433d2f05757f1f79130d/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-feature-flags.rs?ref=a12d0d4f6672a9621771433d2f05757f1f79130d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test use of const fns in std using individual feature gates.\n+\n+#![feature(const_cell_new)]\n+\n+use std::cell::Cell;\n+\n+const CELL: Cell<i32> = Cell::new(42);\n+\n+fn main() {\n+    let v = CELL.get();\n+    CELL.set(v+1);\n+\n+    assert_eq!(CELL.get(), v);\n+}\n+"}]}