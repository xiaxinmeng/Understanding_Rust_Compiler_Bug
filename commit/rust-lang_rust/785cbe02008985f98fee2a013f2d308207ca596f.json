{"sha": "785cbe02008985f98fee2a013f2d308207ca596f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NWNiZTAyMDA4OTg1Zjk4ZmVlMmEwMTNmMmQzMDgyMDdjYTU5NmY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T17:57:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T17:57:36Z"}, "message": "Do not substitute type aliases during error reporting\nType aliases are still substituted when determining impl publicity", "tree": {"sha": "d882129e566baa533034bc435cca7d40f46567f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d882129e566baa533034bc435cca7d40f46567f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/785cbe02008985f98fee2a013f2d308207ca596f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/785cbe02008985f98fee2a013f2d308207ca596f", "html_url": "https://github.com/rust-lang/rust/commit/785cbe02008985f98fee2a013f2d308207ca596f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/785cbe02008985f98fee2a013f2d308207ca596f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4", "html_url": "https://github.com/rust-lang/rust/commit/cda7244a2a8f16549a0ed8db49ff721b5f7d78e4"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "9a869b24b8f6dac18aeaa83a91e1287131af79c6", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/785cbe02008985f98fee2a013f2d308207ca596f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785cbe02008985f98fee2a013f2d308207ca596f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=785cbe02008985f98fee2a013f2d308207ca596f", "patch": "@@ -1463,6 +1463,12 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     // Check if the type alias contain private types when substituted\n     fn is_public_type_alias(&self, item: &hir::Item, path: &hir::Path) -> bool {\n+        // We substitute type aliases only when determining impl publicity\n+        // FIXME: This will probably change and all type aliases will be substituted,\n+        // requires an amendment to RFC 136.\n+        if !self.is_quiet {\n+            return false\n+        }\n         // Type alias is considered public if the aliased type is\n         // public, even if the type alias itself is private. So, something\n         // like `type A = u8; pub fn f() -> A {...}` doesn't cause an error."}, {"sha": "44b161a7575cc545ad5a5ab53c23af73ec7c9675", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/785cbe02008985f98fee2a013f2d308207ca596f/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785cbe02008985f98fee2a013f2d308207ca596f/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=785cbe02008985f98fee2a013f2d308207ca596f", "patch": "@@ -14,7 +14,7 @@ use std::os::windows::prelude::*;\n use std::ptr;\n use libc::{c_void, c_long};\n \n-type DWORD = u32;\n+pub type DWORD = u32;\n type LPCWSTR = *const u16;\n type LONG = c_long;\n type LPDWORD = *mut DWORD;"}, {"sha": "2d1de3ca2823e80f7a50569b3d8fc5220b33f120", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/785cbe02008985f98fee2a013f2d308207ca596f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785cbe02008985f98fee2a013f2d308207ca596f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=785cbe02008985f98fee2a013f2d308207ca596f", "patch": "@@ -175,10 +175,10 @@ mod aliases_pub {\n     impl PrivTr for Priv {}\n \n     pub fn f1(arg: PrivUseAlias) {} // OK\n-    pub fn f2(arg: PrivAlias) {} // OK\n \n     pub trait Tr1: PrivUseAliasTr {} // OK\n-    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} // OK\n+    // This should be OK, if type aliases are substituted\n+    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private type in public interface\n \n     impl PrivAlias {\n         pub fn f(arg: Priv) {} //~ WARN private type in public interface\n@@ -211,7 +211,6 @@ mod aliases_priv {\n     use self::Priv1 as PrivUseAlias;\n     use self::PrivTr1 as PrivUseAliasTr;\n     type PrivAlias = Priv2;\n-    //~^ WARN private type in public interface\n     trait PrivTr {\n         type AssocAlias = Priv3;\n     }\n@@ -246,8 +245,6 @@ mod aliases_params {\n     struct Priv;\n     type PrivAliasGeneric<T = Priv> = T;\n     type Result<T> = ::std::result::Result<T, Priv>;\n-\n-    pub fn f1(arg: PrivAliasGeneric<u8>) {} // OK, not an error\n }\n \n #[rustc_error]"}, {"sha": "be22a2ef6a77f1bcb4ae118fa059b5a3dad4c6c3", "filename": "src/test/compile-fail/private-in-public.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/785cbe02008985f98fee2a013f2d308207ca596f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/785cbe02008985f98fee2a013f2d308207ca596f/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public.rs?ref=785cbe02008985f98fee2a013f2d308207ca596f", "patch": "@@ -105,6 +105,8 @@ mod aliases_pub {\n     }\n     impl PrivTr for Priv {}\n \n+    // This should be OK, if type aliases are substituted\n+    pub fn f2(arg: PrivAlias) {} //~ ERROR private type in public interface\n     // This should be OK, but associated type aliases are not substituted yet\n     pub fn f3(arg: <Priv as PrivTr>::AssocAlias) {} //~ ERROR private type in public interface\n \n@@ -141,6 +143,8 @@ mod aliases_params {\n     type PrivAliasGeneric<T = Priv> = T;\n     type Result<T> = ::std::result::Result<T, Priv>;\n \n+    // This should be OK, if type aliases are substituted\n+    pub fn f1(arg: PrivAliasGeneric<u8>) {} //~ ERROR private type in public interface\n     pub fn f2(arg: PrivAliasGeneric) {} //~ ERROR private type in public interface\n     pub fn f3(arg: Result<u8>) {} //~ ERROR private type in public interface\n }"}]}