{"sha": "b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2Y2I2ZDVhYmVjYTUxYWJjN2U4MDVkODQ3ZjNiZjNiNGJhNzExNTE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T15:46:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T15:58:26Z"}, "message": "simplify", "tree": {"sha": "aa511e74de1328176d5da79c0310dc603fcf85ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa511e74de1328176d5da79c0310dc603fcf85ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "html_url": "https://github.com/rust-lang/rust/commit/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c8c65139c10e4de44367fead8dff88511e6d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c8c65139c10e4de44367fead8dff88511e6d46", "html_url": "https://github.com/rust-lang/rust/commit/95c8c65139c10e4de44367fead8dff88511e6d46"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "945d286503320ef416b346e0982eba7b14952438", "filename": "crates/ide_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "patch": "@@ -65,10 +65,9 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                         Some(u) => u,\n                         None => return Some(false),\n                     };\n-\n-                    Some(!matches!(\n-                        (&initializer_expr, usage_parent),\n-                        (\n+                    Some(\n+                        !(matches!(\n+                            initializer_expr,\n                             ast::Expr::CallExpr(_)\n                                 | ast::Expr::IndexExpr(_)\n                                 | ast::Expr::MethodCallExpr(_)\n@@ -82,9 +81,8 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                                 | ast::Expr::PathExpr(_)\n                                 | ast::Expr::BlockExpr(_)\n                                 | ast::Expr::EffectExpr(_),\n-                            _\n-                        ) | (\n-                            _,\n+                        ) || matches!(\n+                            usage_parent,\n                             ast::Expr::CallExpr(_)\n                                 | ast::Expr::TupleExpr(_)\n                                 | ast::Expr::ArrayExpr(_)\n@@ -94,8 +92,8 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n                                 | ast::Expr::BreakExpr(_)\n                                 | ast::Expr::ReturnExpr(_)\n                                 | ast::Expr::MatchExpr(_)\n-                        )\n-                    ))\n+                        )),\n+                    )\n                 })\n                 .collect::<Option<_>>()\n                 .map(|b| (file_id, b))"}, {"sha": "a7f936a703e33f871da26f79c3da6dd038f750de", "filename": "crates/rust-analyzer/src/diagnostics/test_data/handles_macro_location.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fhandles_macro_location.txt?ref=b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "patch": "@@ -54,7 +54,7 @@\n             source: Some(\n                 \"rustc\",\n             ),\n-            message: \"can\\'t compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n+            message: \"can't compare `{integer}` with `&str`\\nthe trait `std::cmp::PartialEq<&str>` is not implemented for `{integer}`\",\n             related_information: None,\n             tags: None,\n             data: None,"}, {"sha": "afc562a0e2bee18f012f5f390075af1b1cc710d6", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_incompatible_type_for_trait.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/b6cb6d5abeca51abc7e805d847f3bf3b4ba71151/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_incompatible_type_for_trait.txt?ref=b6cb6d5abeca51abc7e805d847f3bf3b4ba71151", "patch": "@@ -54,7 +54,7 @@\n             source: Some(\n                 \"rustc\",\n             ),\n-            message: \"method `next` has an incompatible type for trait\\nexpected type `fn(&mut ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<\\'list, M>) -> std::option::Option<&\\'list ty::Ref<M>>`\",\n+            message: \"method `next` has an incompatible type for trait\\nexpected type `fn(&mut ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&ty::Ref<M>>`\\n   found type `fn(&ty::list_iter::ListIterator<'list, M>) -> std::option::Option<&'list ty::Ref<M>>`\",\n             related_information: None,\n             tags: None,\n             data: None,"}]}