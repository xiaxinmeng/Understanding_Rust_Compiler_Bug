{"sha": "6a547b4f61f7acec8bf526e93cc244a82cb8925e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTQ3YjRmNjFmN2FjZWM4YmY1MjZlOTNjYzI0NGE4MmNiODkyNWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-27T19:26:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-27T21:56:48Z"}, "message": "rustdoc: Handle explicit ?Sized on foreign impl Trait", "tree": {"sha": "90993148abf4de5a09481230e108176817b9615c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90993148abf4de5a09481230e108176817b9615c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a547b4f61f7acec8bf526e93cc244a82cb8925e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a547b4f61f7acec8bf526e93cc244a82cb8925e", "html_url": "https://github.com/rust-lang/rust/commit/6a547b4f61f7acec8bf526e93cc244a82cb8925e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a547b4f61f7acec8bf526e93cc244a82cb8925e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32446f8db3586ff8c56b745bc2fbaf4c88bcab71", "url": "https://api.github.com/repos/rust-lang/rust/commits/32446f8db3586ff8c56b745bc2fbaf4c88bcab71", "html_url": "https://github.com/rust-lang/rust/commit/32446f8db3586ff8c56b745bc2fbaf4c88bcab71"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "a7d34d5252434fb141f8e24b04bcd9d7816882ac", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a547b4f61f7acec8bf526e93cc244a82cb8925e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a547b4f61f7acec8bf526e93cc244a82cb8925e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6a547b4f61f7acec8bf526e93cc244a82cb8925e", "patch": "@@ -2763,20 +2763,26 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let predicates_of = cx.tcx.predicates_of(def_id);\n                 let substs = cx.tcx.lift(&substs).unwrap();\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n-                ImplTrait(bounds.predicates.iter().filter_map(|predicate| {\n+                let mut regions = vec![];\n+                let mut has_sized = false;\n+                let mut bounds = bounds.predicates.iter().filter_map(|predicate| {\n                     let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n                         tr\n+                    } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n+                        // these should turn up at the end\n+                        pred.skip_binder().1.clean(cx).map(|r| regions.push(RegionBound(r)));\n+                        return None;\n                     } else {\n                         return None;\n                     };\n \n                     if let Some(sized) = cx.tcx.lang_items().sized_trait() {\n                         if trait_ref.def_id() == sized {\n+                            has_sized = true;\n                             return None;\n                         }\n                     }\n \n-                    // FIXME(Manishearth) handle cases which aren't Sized\n \n                     let bounds = bounds.predicates.iter().filter_map(|pred|\n                         if let ty::Predicate::Projection(proj) = *pred {\n@@ -2796,7 +2802,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     ).collect();\n \n                     Some((trait_ref.skip_binder(), bounds).clean(cx))\n-                }).collect())\n+                }).collect::<Vec<_>>();\n+                bounds.extend(regions);\n+                if !has_sized && !bounds.is_empty() {\n+                    bounds.insert(0, TyParamBound::maybe_sized(cx));\n+                }\n+                ImplTrait(bounds)\n             }\n \n             ty::TyClosure(..) | ty::TyGenerator(..) => Tuple(vec![]), // FIXME(pcwalton)"}]}