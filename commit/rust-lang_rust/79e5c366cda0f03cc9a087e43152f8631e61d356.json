{"sha": "79e5c366cda0f03cc9a087e43152f8631e61d356", "node_id": "C_kwDOAAsO6NoAKDc5ZTVjMzY2Y2RhMGYwM2NjOWEwODdlNDMxNTJmODYzMWU2MWQzNTY", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2022-08-24T04:50:12Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2022-09-02T21:18:36Z"}, "message": "Extract shared logic", "tree": {"sha": "2f37bfd98c107bfcce6630391b3f207e3427d278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f37bfd98c107bfcce6630391b3f207e3427d278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e5c366cda0f03cc9a087e43152f8631e61d356", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e5c366cda0f03cc9a087e43152f8631e61d356", "html_url": "https://github.com/rust-lang/rust/commit/79e5c366cda0f03cc9a087e43152f8631e61d356", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e5c366cda0f03cc9a087e43152f8631e61d356/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc61337a8e784d56b96d5dc2512464560b0ae58", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc61337a8e784d56b96d5dc2512464560b0ae58", "html_url": "https://github.com/rust-lang/rust/commit/fcc61337a8e784d56b96d5dc2512464560b0ae58"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "9f51cdaf8b1eb0d7eccc6ae154ec038f5118504c", "filename": "crates/ide-assists/src/handlers/inline_call.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/79e5c366cda0f03cc9a087e43152f8631e61d356/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e5c366cda0f03cc9a087e43152f8631e61d356/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=79e5c366cda0f03cc9a087e43152f8631e61d356", "patch": "@@ -7,6 +7,7 @@ use ide_db::{\n     imports::insert_use::remove_path_if_in_use_stmt,\n     path_transform::PathTransform,\n     search::{FileReference, SearchScope},\n+    source_change::SourceChangeBuilder,\n     syntax_helpers::{insert_whitespace_into_node::insert_ws_into, node_ext::expr_as_name_ref},\n     RootDatabase,\n };\n@@ -100,18 +101,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                 builder.edit_file(file_id);\n                 let count = refs.len();\n                 // The collects are required as we are otherwise iterating while mutating \ud83d\ude45\u200d\u2640\ufe0f\ud83d\ude45\u200d\u2642\ufe0f\n-                let (name_refs, name_refs_use): (Vec<_>, Vec<_>) = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(name_ref) => Some(name_ref),\n-                        _ => None,\n-                    })\n-                    .partition_map(|name_ref| {\n-                        match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n-                            Some(use_tree) => Either::Right(builder.make_mut(use_tree)),\n-                            None => Either::Left(name_ref),\n-                        }\n-                    });\n+                let (name_refs, name_refs_use) = split_refs_and_uses(builder, refs, Some);\n                 let call_infos: Vec<_> = name_refs\n                     .into_iter()\n                     .filter_map(CallInfo::from_name_ref)\n@@ -130,11 +120,7 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n                     .count();\n                 if replaced + name_refs_use.len() == count {\n                     // we replaced all usages in this file, so we can remove the imports\n-                    name_refs_use.into_iter().for_each(|use_tree| {\n-                        if let Some(path) = use_tree.path() {\n-                            remove_path_if_in_use_stmt(&path);\n-                        }\n-                    })\n+                    name_refs_use.iter().for_each(remove_path_if_in_use_stmt);\n                 } else {\n                     remove_def = false;\n                 }\n@@ -153,6 +139,23 @@ pub(crate) fn inline_into_callers(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     )\n }\n \n+pub(super) fn split_refs_and_uses<T: ast::AstNode>(\n+    builder: &mut SourceChangeBuilder,\n+    iter: impl IntoIterator<Item = FileReference>,\n+    mut map_ref: impl FnMut(ast::NameRef) -> Option<T>,\n+) -> (Vec<T>, Vec<ast::Path>) {\n+    iter.into_iter()\n+        .filter_map(|file_ref| match file_ref.name {\n+            ast::NameLike::NameRef(name_ref) => Some(name_ref),\n+            _ => None,\n+        })\n+        .filter_map(|name_ref| match name_ref.syntax().ancestors().find_map(ast::UseTree::cast) {\n+            Some(use_tree) => builder.make_mut(use_tree).path().map(Either::Right),\n+            None => map_ref(name_ref).map(Either::Left),\n+        })\n+        .partition_map(|either| either)\n+}\n+\n // Assist: inline_call\n //\n // Inlines a function or method body creating a `let` statement per parameter unless the parameter"}, {"sha": "4afe890c783e1e2664adb0e072dcb6e8234fcb64", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/79e5c366cda0f03cc9a087e43152f8631e61d356/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e5c366cda0f03cc9a087e43152f8631e61d356/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=79e5c366cda0f03cc9a087e43152f8631e61d356", "patch": "@@ -3,7 +3,9 @@\n // - Remove unused aliases if there are no longer any users, see inline_call.rs.\n \n use hir::{HasSource, PathResolution};\n-use ide_db::{defs::Definition, search::FileReference};\n+use ide_db::{\n+    defs::Definition, imports::insert_use::remove_path_if_in_use_stmt, search::FileReference,\n+};\n use itertools::Itertools;\n use std::collections::HashMap;\n use syntax::{\n@@ -16,6 +18,8 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n+use super::inline_call::split_refs_and_uses;\n+\n // Assist: inline_type_alias_uses\n //\n // Inline a type alias into all of its uses where possible.\n@@ -31,7 +35,7 @@ use crate::{\n // ```\n // ->\n // ```\n-// \n+//\n // fn id(x: i32) -> i32 {\n //     x\n // };\n@@ -62,15 +66,10 @@ pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>)\n             let mut inline_refs_for_file = |file_id, refs: Vec<FileReference>| {\n                 builder.edit_file(file_id);\n \n-                let path_types: Vec<ast::PathType> = refs\n-                    .into_iter()\n-                    .filter_map(|file_ref| match file_ref.name {\n-                        ast::NameLike::NameRef(path_type) => {\n-                            path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n-                        }\n-                        _ => None,\n-                    })\n-                    .collect();\n+                let (path_types, path_type_uses) =\n+                    split_refs_and_uses(builder, refs, |path_type| {\n+                        path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n+                    });\n \n                 for (target, replacement) in path_types.into_iter().filter_map(|path_type| {\n                     let replacement = inline(&ast_alias, &path_type)?.to_text(&concrete_type);\n@@ -79,6 +78,10 @@ pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>)\n                 }) {\n                     builder.replace(target, replacement);\n                 }\n+                if !path_type_uses.is_empty() {\n+                    builder.edit_file(file_id);\n+                    path_type_uses.iter().for_each(remove_path_if_in_use_stmt);\n+                }\n             };\n \n             for (file_id, refs) in usages.into_iter() {\n@@ -993,7 +996,12 @@ fn foo() {\n }\n \"#,\n                 r#\"\n-use super::I;\n+//- /lib.rs\n+mod foo;\n+\n+\n+//- /foo.rs\n+\n fn foo() {\n     let _: i32 = 0;\n }"}]}