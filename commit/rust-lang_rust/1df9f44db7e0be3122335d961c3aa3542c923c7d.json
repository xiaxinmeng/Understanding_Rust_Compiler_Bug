{"sha": "1df9f44db7e0be3122335d961c3aa3542c923c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZjlmNDRkYjdlMGJlMzEyMjMzNWQ5NjFjM2FhMzU0MmM5MjNjN2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T13:45:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-26T13:45:09Z"}, "message": "typos + fmt", "tree": {"sha": "248310a326bdd59efd785e7ab7868ce495af2bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248310a326bdd59efd785e7ab7868ce495af2bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1df9f44db7e0be3122335d961c3aa3542c923c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1df9f44db7e0be3122335d961c3aa3542c923c7d", "html_url": "https://github.com/rust-lang/rust/commit/1df9f44db7e0be3122335d961c3aa3542c923c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1df9f44db7e0be3122335d961c3aa3542c923c7d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069e84a1181d81665f355f15e9bd417a78e6e377", "url": "https://api.github.com/repos/rust-lang/rust/commits/069e84a1181d81665f355f15e9bd417a78e6e377", "html_url": "https://github.com/rust-lang/rust/commit/069e84a1181d81665f355f15e9bd417a78e6e377"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "1d76bb525ebf4f3a453362f493f5fbaa17032f76", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=1df9f44db7e0be3122335d961c3aa3542c923c7d", "patch": "@@ -522,9 +522,7 @@ impl fmt::Display for UnsupportedOpInfo {\n         use UnsupportedOpInfo::*;\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n-            ReadExternStatic(did) => {\n-                write!(f, \"cannot read from extern static ({:?})\", did)\n-            }\n+            ReadExternStatic(did) => write!(f, \"cannot read from extern static ({:?})\", did),\n             NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),"}, {"sha": "6867a299d81bf295935d1bf2cfe8d57d8292648a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1df9f44db7e0be3122335d961c3aa3542c923c7d", "patch": "@@ -13,8 +13,8 @@ use std::fmt;\n use std::ptr;\n \n use rustc_ast::ast::Mutability;\n-use rustc_hir::def_id::DefId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n@@ -119,12 +119,8 @@ pub struct Memory<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-\n /// Return the `tcx` allocation containing the initial value of the given static\n-pub fn get_static(\n-    tcx: TyCtxt<'tcx>,\n-    def_id: DefId,\n-) -> InterpResult<'tcx, &'tcx Allocation> {\n+pub fn get_static(tcx: TyCtxt<'tcx>, def_id: DefId) -> InterpResult<'tcx, &'tcx Allocation> {\n     trace!(\"get_static: Need to compute {:?}\", def_id);\n     let instance = Instance::mono(tcx, def_id);\n     let gid = GlobalId { instance, promoted: None };\n@@ -162,7 +158,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ///\n     /// This function can fail only if `ptr` points to an `extern static`.\n     #[inline]\n-    pub fn global_base_pointer(&self, mut ptr: Pointer) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+    pub fn global_base_pointer(\n+        &self,\n+        mut ptr: Pointer,\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         // We need to handle `extern static`.\n         let ptr = match self.tcx.get_global_alloc(ptr.alloc_id) {\n             Some(GlobalAlloc::Static(def_id)) if self.tcx.is_thread_local_static(def_id) => {\n@@ -197,7 +196,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         };\n         // Functions are global allocations, so make sure we get the right base pointer.\n-        // We know this is not an `extern static` so this cannmot fail.\n+        // We know this is not an `extern static` so this cannot fail.\n         self.global_base_pointer(Pointer::from(id)).unwrap()\n     }\n \n@@ -659,7 +658,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if ptr.offset.bytes() != 0 {\n             throw_ub!(InvalidFunctionPointer(ptr.erase_tag()))\n         }\n-        self.get_fn_alloc(ptr.alloc_id).ok_or_else(|| err_ub!(InvalidFunctionPointer(ptr.erase_tag())).into())\n+        self.get_fn_alloc(ptr.alloc_id)\n+            .ok_or_else(|| err_ub!(InvalidFunctionPointer(ptr.erase_tag())).into())\n     }\n \n     pub fn mark_immutable(&mut self, id: AllocId) -> InterpResult<'tcx> {"}, {"sha": "5de9b502a37c4b6568bbd3e0df5e486090b29163", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1df9f44db7e0be3122335d961c3aa3542c923c7d/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=1df9f44db7e0be3122335d961c3aa3542c923c7d", "patch": "@@ -20,7 +20,7 @@ pub use rustc_middle::mir::interpret::*; // have all the `interpret` symbols in\n pub use self::eval_context::{Frame, InterpCx, LocalState, LocalValue, StackPopCleanup};\n pub use self::intern::{intern_const_alloc_recursive, InternKind};\n pub use self::machine::{compile_time_machine, AllocMap, Machine, MayLeak, StackPopJump};\n-pub use self::memory::{AllocCheck, FnVal, Memory, MemoryKind, get_static};\n+pub use self::memory::{get_static, AllocCheck, FnVal, Memory, MemoryKind};\n pub use self::operand::{ImmTy, Immediate, OpTy, Operand};\n pub use self::place::{MPlaceTy, MemPlace, MemPlaceMeta, Place, PlaceTy};\n pub use self::validity::RefTracking;"}]}