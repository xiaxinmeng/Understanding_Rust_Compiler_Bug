{"sha": "54de911f357608c61acee35d3448b77c8fcb7833", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZGU5MTFmMzU3NjA4YzYxYWNlZTM1ZDM0NDhiNzdjOGZjYjc4MzM=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-22T04:53:07Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@gmail.com", "date": "2015-04-29T00:51:43Z"}, "message": "#10381: Warnings", "tree": {"sha": "bccf6cb3154909033801e7442e9c6743de1c9134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bccf6cb3154909033801e7442e9c6743de1c9134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54de911f357608c61acee35d3448b77c8fcb7833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54de911f357608c61acee35d3448b77c8fcb7833", "html_url": "https://github.com/rust-lang/rust/commit/54de911f357608c61acee35d3448b77c8fcb7833", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54de911f357608c61acee35d3448b77c8fcb7833/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9768447b643d41c941043c878fe99955e8857b9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9768447b643d41c941043c878fe99955e8857b9a", "html_url": "https://github.com/rust-lang/rust/commit/9768447b643d41c941043c878fe99955e8857b9a"}], "stats": {"total": 112, "additions": 60, "deletions": 52}, "files": [{"sha": "d9be03c094c49da670e9070168a411d17c825b82", "filename": "src/test/auxiliary/cross_crate_spans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fauxiliary%2Fcross_crate_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fauxiliary%2Fcross_crate_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcross_crate_spans.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n #![crate_type = \"rlib\"]\n+\n+#![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n \n // no-prefer-dynamic"}, {"sha": "3d0af686586bd4fa6f0c4951027a32cded1c2eb4", "filename": "src/test/debuginfo/constant-debug-locs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-debug-locs.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -13,8 +13,7 @@\n \n // compile-flags:-g\n \n-#![allow(unused_variables)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n #![feature(std_misc, core)]\n "}, {"sha": "58a1ba06b5452dfb4cc8c00f67486e86dbfaa269", "filename": "src/test/debuginfo/constant-in-match-pattern.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fconstant-in-match-pattern.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -13,8 +13,7 @@\n \n // compile-flags:-g\n \n-#![allow(unused_variables)]\n-#![allow(dead_code)]\n+#![allow(dead_code, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n \n // This test makes sure that the compiler doesn't crash when trying to assign"}, {"sha": "09ab30cbec1a2f8ab62e5582d38e02381f90bd2e", "filename": "src/test/debuginfo/cross-crate-spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fcross-crate-spans.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -21,7 +21,7 @@ extern crate cross_crate_spans;\n \n // === GDB TESTS ===================================================================================\n \n-// gdb-command:break cross_crate_spans.rs:21\n+// gdb-command:break cross_crate_spans.rs:23\n // gdb-command:run\n \n // gdb-command:print result\n@@ -44,7 +44,7 @@ extern crate cross_crate_spans;\n \n // === LLDB TESTS ==================================================================================\n \n-// lldb-command:b cross_crate_spans.rs:21\n+// lldb-command:b cross_crate_spans.rs:23\n // lldb-command:run\n \n // lldb-command:print result"}, {"sha": "d9cca5eb315177cdae7bfde277d015a4c92fdda1", "filename": "src/test/debuginfo/function-prologue-stepping-no-stack-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-prologue-stepping-no-stack-check.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -246,7 +246,7 @@\n // lldb-check:[...]$31 = 45\n // lldb-command:continue\n \n-#![allow(unused_variables)]\n+#![allow(dead_code, unused_assignments, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n \n #[no_stack_check]"}, {"sha": "c42f7f19839fdce2c316b4fd3b2f7df8aeed5dfb", "filename": "src/test/debuginfo/gdb-pretty-std.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-std.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -35,6 +35,8 @@\n // gdb-command: print none\n // gdb-check:$6 = None\n \n+#![allow(unused_variables)]\n+\n fn main() {\n \n     // &[]"}, {"sha": "fa15e31450f8b114fe264e2f4b355f7395f66e35", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums-pre-gdb-7-7.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -37,6 +37,8 @@\n // gdb-command: print c_style_enum3\n // gdb-check:$5 = CStyleEnumVar3\n \n+#![allow(dead_code, unused_variables)]\n+\n struct RegularStruct {\n     the_first_field: isize,\n     the_second_field: f64,"}, {"sha": "56a973fa59f668398eff78903937e9d810046630", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -76,6 +76,8 @@\n // gdb-command: print none_check2\n // gdb-check:$18 = None\n \n+#![allow(dead_code, unused_variables)]\n+\n use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n use self::NestedEnum::{NestedVariant1, NestedVariant2};"}, {"sha": "97b6bfacf80eec149088f6f616ab0e2bde4ce9af", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 46, "deletions": 44, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -21,7 +21,7 @@\n // gdb-check:type = struct Struct1\n \n // gdb-command:whatis generic_struct1\n-// gdb-check:type = struct GenericStruct<type_names::Mod1::Struct2, type_names::Mod1::Mod2::Struct3>\n+// gdb-check:type = struct GenericStruct<type_names::mod1::Struct2, type_names::mod1::mod2::Struct3>\n \n // gdb-command:whatis generic_struct2\n // gdb-check:type = struct GenericStruct<type_names::Struct1, extern \"fastcall\" fn(isize) -> usize>\n@@ -41,26 +41,26 @@\n // gdb-check:type = union Enum2\n \n // gdb-command:whatis generic_enum_1\n-// gdb-check:type = union Enum3<type_names::Mod1::Struct2>\n+// gdb-check:type = union Enum3<type_names::mod1::Struct2>\n \n // gdb-command:whatis generic_enum_2\n // gdb-check:type = union Enum3<type_names::Struct1>\n \n \n // TUPLES\n // gdb-command:whatis tuple1\n-// gdb-check:type = struct (u32, type_names::Struct1, type_names::Mod1::Mod2::Enum3<type_names::Mod1::Struct2>)\n+// gdb-check:type = struct (u32, type_names::Struct1, type_names::mod1::mod2::Enum3<type_names::mod1::Struct2>)\n \n // gdb-command:whatis tuple2\n-// gdb-check:type = struct ((type_names::Struct1, type_names::Mod1::Mod2::Struct3), type_names::Mod1::Enum2, char)\n+// gdb-check:type = struct ((type_names::Struct1, type_names::mod1::mod2::Struct3), type_names::mod1::Enum2, char)\n \n \n // BOX\n // gdb-command:whatis box1\n // gdb-check:type = struct (Box<f32>, i32)\n \n // gdb-command:whatis box2\n-// gdb-check:type = struct (Box<type_names::Mod1::Mod2::Enum3<f32>>, i32)\n+// gdb-check:type = struct (Box<type_names::mod1::mod2::Enum3<f32>>, i32)\n \n \n // REFERENCES\n@@ -74,7 +74,7 @@\n // gdb-check:type = struct (&mut type_names::Struct1, i32)\n \n // gdb-command:whatis mut_ref2\n-// gdb-check:type = struct (&mut type_names::GenericStruct<type_names::Mod1::Enum2, f64>, i32)\n+// gdb-check:type = struct (&mut type_names::GenericStruct<type_names::mod1::Enum2, f64>, i32)\n \n \n // RAW POINTERS\n@@ -85,7 +85,7 @@\n // gdb-check:type = struct (*mut isize, isize)\n \n // gdb-command:whatis mut_ptr3\n-// gdb-check:type = struct (*mut type_names::Mod1::Mod2::Enum3<type_names::Struct1>, isize)\n+// gdb-check:type = struct (*mut type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n \n // gdb-command:whatis const_ptr1\n // gdb-check:type = struct (*const type_names::Struct1, isize)\n@@ -94,7 +94,7 @@\n // gdb-check:type = struct (*const isize, isize)\n \n // gdb-command:whatis const_ptr3\n-// gdb-check:type = struct (*const type_names::Mod1::Mod2::Enum3<type_names::Struct1>, isize)\n+// gdb-check:type = struct (*const type_names::mod1::mod2::Enum3<type_names::Struct1>, isize)\n \n \n // VECTORS\n@@ -108,7 +108,7 @@\n // gdb-check:type = struct &[usize]\n \n // gdb-command:whatis slice2\n-// gdb-check:type = struct &[type_names::Mod1::Enum2]\n+// gdb-check:type = struct &[type_names::mod1::Enum2]\n \n \n // TRAITS\n@@ -122,18 +122,18 @@\n // gdb-check:type = struct &mut Trait1\n \n // gdb-command:whatis generic_box_trait\n-// gdb-check:type = struct Box<Trait2<i32, type_names::Mod1::Struct2>>\n+// gdb-check:type = struct Box<Trait2<i32, type_names::mod1::Struct2>>\n \n // gdb-command:whatis generic_ref_trait\n // gdb-check:type = struct &Trait2<type_names::Struct1, type_names::Struct1>\n \n // gdb-command:whatis generic_mut_ref_trait\n-// gdb-check:type = struct &mut Trait2<type_names::Mod1::Mod2::Struct3, type_names::GenericStruct<usize, isize>>\n+// gdb-check:type = struct &mut Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n \n \n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n-// gdb-check:type = struct (fn(core::option::Option<isize>, core::option::Option<&type_names::Mod1::Struct2>), usize)\n+// gdb-check:type = struct (fn(core::option::Option<isize>, core::option::Option<&type_names::mod1::Struct2>), usize)\n \n // gdb-command:whatis extern_c_fn\n // gdb-check:type = struct (extern \"C\" fn(isize), usize)\n@@ -151,7 +151,7 @@\n // gdb-check:type = struct (extern \"C\" fn() -> type_names::Struct1, usize)\n \n // gdb-command:whatis unsafe_fn_with_return_value\n-// gdb-check:type = struct (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::Mod1::Struct2, usize)\n+// gdb-check:type = struct (unsafe fn(type_names::GenericStruct<u16, u8>) -> type_names::mod1::Struct2, usize)\n \n // gdb-command:whatis extern_stdcall_fn_with_return_value\n // gdb-check:type = struct (extern \"stdcall\" fn(Box<isize>) -> usize, usize)\n@@ -160,7 +160,7 @@\n // gdb-check:type = struct (fn(isize) -> isize, usize)\n \n // gdb-command:whatis generic_function_struct3\n-// gdb-check:type = struct (fn(type_names::Mod1::Mod2::Struct3) -> type_names::Mod1::Mod2::Struct3, usize)\n+// gdb-check:type = struct (fn(type_names::mod1::mod2::Struct3) -> type_names::mod1::mod2::Struct3, usize)\n \n // gdb-command:whatis variadic_function\n // gdb-check:type = struct (unsafe extern \"C\" fn(*const u8, ...) -> isize, usize)\n@@ -174,36 +174,37 @@\n // gdb-check:type = struct (closure, usize)\n \n #![feature(box_syntax)]\n+#![allow(unused_variables)]\n #![omit_gdb_pretty_printer_section]\n \n-use self::Enum1::{Variant1_1, Variant1_2};\n+use self::Enum1::{Variant1, Variant2};\n use std::marker::PhantomData;\n use std::ptr;\n \n struct Struct1;\n struct GenericStruct<T1, T2>(PhantomData<(T1,T2)>);\n \n enum Enum1 {\n-    Variant1_1,\n-    Variant1_2(isize)\n+    Variant1,\n+    Variant2(isize),\n }\n \n-mod Mod1 {\n-    pub use self::Enum2::{Variant2_1, Variant2_2};\n+mod mod1 {\n+    pub use self::Enum2::{Variant1, Variant2};\n     pub struct Struct2;\n \n     pub enum Enum2 {\n-        Variant2_1,\n-        Variant2_2(super::Struct1)\n+        Variant1,\n+        Variant2(super::Struct1),\n     }\n \n-    pub mod Mod2 {\n-        pub use self::Enum3::{Variant3_1, Variant3_2};\n+    pub mod mod2 {\n+        pub use self::Enum3::{Variant1, Variant2};\n         pub struct Struct3;\n \n         pub enum Enum3<T> {\n-            Variant3_1,\n-            Variant3_2(T),\n+            Variant1,\n+            Variant2(T),\n         }\n     }\n }\n@@ -214,18 +215,19 @@ trait Trait2<T1, T2> { fn dummy(&self, _: T1, _:T2) { } }\n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n \n-fn rust_fn(_: Option<isize>, _: Option<&Mod1::Struct2>) {}\n+fn rust_fn(_: Option<isize>, _: Option<&mod1::Struct2>) {}\n extern \"C\" fn extern_c_fn(_: isize) {}\n unsafe fn unsafe_fn(_: Result<char, f64>) {}\n extern \"stdcall\" fn extern_stdcall_fn() {}\n \n fn rust_fn_with_return_value(_: f64) -> usize { 4 }\n extern \"C\" fn extern_c_fn_with_return_value() -> Struct1 { Struct1 }\n-unsafe fn unsafe_fn_with_return_value(_: GenericStruct<u16, u8>) -> Mod1::Struct2 { Mod1::Struct2 }\n+unsafe fn unsafe_fn_with_return_value(_: GenericStruct<u16, u8>) -> mod1::Struct2 { mod1::Struct2 }\n extern \"stdcall\" fn extern_stdcall_fn_with_return_value(_: Box<isize>) -> usize { 0 }\n \n fn generic_function<T>(x: T) -> T { x }\n \n+#[allow(improper_ctypes)]\n extern {\n     fn printf(_:*const u8, ...) -> isize;\n }\n@@ -241,53 +243,53 @@ fn main() {\n \n     // Structs\n     let simple_struct = Struct1;\n-    let generic_struct1: GenericStruct<Mod1::Struct2, Mod1::Mod2::Struct3> =\n+    let generic_struct1: GenericStruct<mod1::Struct2, mod1::mod2::Struct3> =\n         GenericStruct(PhantomData);\n     let generic_struct2: GenericStruct<Struct1, extern \"fastcall\" fn(isize) -> usize> =\n         GenericStruct(PhantomData);\n-    let mod_struct = Mod1::Struct2;\n+    let mod_struct = mod1::Struct2;\n \n     // Enums\n-    let simple_enum_1 = Variant1_1;\n-    let simple_enum_2 = Variant1_2(0);\n-    let simple_enum_3 = Mod1::Variant2_2(Struct1);\n+    let simple_enum_1 = Variant1;\n+    let simple_enum_2 = Variant2(0);\n+    let simple_enum_3 = mod1::Variant2(Struct1);\n \n-    let generic_enum_1: Mod1::Mod2::Enum3<Mod1::Struct2> = Mod1::Mod2::Variant3_1;\n-    let generic_enum_2 = Mod1::Mod2::Variant3_2(Struct1);\n+    let generic_enum_1: mod1::mod2::Enum3<mod1::Struct2> = mod1::mod2::Variant1;\n+    let generic_enum_2 = mod1::mod2::Variant2(Struct1);\n \n     // Tuples\n-    let tuple1 = (8u32, Struct1, Mod1::Mod2::Variant3_2(Mod1::Struct2));\n-    let tuple2 = ((Struct1, Mod1::Mod2::Struct3), Mod1::Variant2_1, 'x');\n+    let tuple1 = (8u32, Struct1, mod1::mod2::Variant2(mod1::Struct2));\n+    let tuple2 = ((Struct1, mod1::mod2::Struct3), mod1::Variant1, 'x');\n \n     // Box\n     let box1 = (box 1f32, 0i32);\n-    let box2 = (box Mod1::Mod2::Variant3_2(1f32), 0i32);\n+    let box2 = (box mod1::mod2::Variant2(1f32), 0i32);\n \n     // References\n     let ref1 = (&Struct1, 0i32);\n     let ref2 = (&GenericStruct::<char, Struct1>(PhantomData), 0i32);\n \n     let mut mut_struct1 = Struct1;\n-    let mut mut_generic_struct = GenericStruct::<Mod1::Enum2, f64>(PhantomData);\n+    let mut mut_generic_struct = GenericStruct::<mod1::Enum2, f64>(PhantomData);\n     let mut_ref1 = (&mut mut_struct1, 0i32);\n     let mut_ref2 = (&mut mut_generic_struct, 0i32);\n \n     // Raw Pointers\n     let mut_ptr1: (*mut Struct1, isize) = (ptr::null_mut(), 0);\n     let mut_ptr2: (*mut isize, isize) = (ptr::null_mut(), 0);\n-    let mut_ptr3: (*mut Mod1::Mod2::Enum3<Struct1>, isize) = (ptr::null_mut(), 0);\n+    let mut_ptr3: (*mut mod1::mod2::Enum3<Struct1>, isize) = (ptr::null_mut(), 0);\n \n     let const_ptr1: (*const Struct1, isize) = (ptr::null(), 0);\n     let const_ptr2: (*const isize, isize) = (ptr::null(), 0);\n-    let const_ptr3: (*const Mod1::Mod2::Enum3<Struct1>, isize) = (ptr::null(), 0);\n+    let const_ptr3: (*const mod1::mod2::Enum3<Struct1>, isize) = (ptr::null(), 0);\n \n     // Vectors\n     let fixed_size_vec1 = ([Struct1, Struct1, Struct1], 0i16);\n     let fixed_size_vec2 = ([0_usize, 1, 2], 0i16);\n \n     let vec1 = vec![0_usize, 2, 3];\n     let slice1 = &*vec1;\n-    let vec2 = vec![Mod1::Variant2_2(Struct1)];\n+    let vec2 = vec![mod1::Variant2(Struct1)];\n     let slice2 = &*vec2;\n \n     // Trait Objects\n@@ -296,12 +298,12 @@ fn main() {\n     let mut mut_int1 = 0_isize;\n     let mut_ref_trait = (&mut mut_int1) as &mut Trait1;\n \n-    let generic_box_trait = (box 0_isize) as Box<Trait2<i32, Mod1::Struct2>>;\n+    let generic_box_trait = (box 0_isize) as Box<Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait  = (&0_isize) as &Trait2<Struct1, Struct1>;\n \n     let mut generic_mut_ref_trait_impl = 0_isize;\n     let generic_mut_ref_trait = (&mut generic_mut_ref_trait_impl) as\n-        &mut Trait2<Mod1::Mod2::Struct3, GenericStruct<usize, isize>>;\n+        &mut Trait2<mod1::mod2::Struct3, GenericStruct<usize, isize>>;\n \n     // Bare Functions\n     let rust_fn = (rust_fn, 0_usize);\n@@ -315,7 +317,7 @@ fn main() {\n     let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0_usize);\n \n     let generic_function_int = (generic_function::<isize>, 0_usize);\n-    let generic_function_struct3 = (generic_function::<Mod1::Mod2::Struct3>, 0_usize);\n+    let generic_function_struct3 = (generic_function::<mod1::mod2::Struct3>, 0_usize);\n \n     let variadic_function = (printf, 0_usize);\n "}, {"sha": "c806286deadafcaafce9e6df0b2b1d4e4e902ada", "filename": "src/test/debuginfo/vec-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54de911f357608c61acee35d3448b77c8fcb7833/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvec-slices.rs?ref=54de911f357608c61acee35d3448b77c8fcb7833", "patch": "@@ -77,7 +77,7 @@\n // lldb-command:print padded_struct\n // lldb-check:[...]$5 = &[AStruct { x: 10, y: 11, z: 12 }, AStruct { x: 13, y: 14, z: 15 }]\n \n-#![allow(unused_variables)]\n+#![allow(dead_code, unused_variables)]\n #![omit_gdb_pretty_printer_section]\n \n struct AStruct {"}]}