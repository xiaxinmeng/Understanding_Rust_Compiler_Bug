{"sha": "5574029b68e4a66864c4eaff8553cc8086117d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzQwMjliNjhlNGE2Njg2NGM0ZWFmZjg1NTNjYzgwODYxMTdkNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-02T17:44:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-02T17:44:11Z"}, "message": "Auto merge of #25038 - bluss:fat-pointer-cast, r=luqmana\n\ntypeck: Make sure casts from other types to fat pointers are illegal\r\n\r\nFixes ICEs where non-fat pointers and scalars are cast to fat pointers,\r\n\r\nFixes #21397\r\nFixes #22955\r\nFixes #23237\r\nFixes #24100", "tree": {"sha": "7af134a039a4e445f0cd304d68b09710e7529265", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7af134a039a4e445f0cd304d68b09710e7529265"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5574029b68e4a66864c4eaff8553cc8086117d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5574029b68e4a66864c4eaff8553cc8086117d56", "html_url": "https://github.com/rust-lang/rust/commit/5574029b68e4a66864c4eaff8553cc8086117d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5574029b68e4a66864c4eaff8553cc8086117d56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f8c257b44964d289d3b22f78babf72f67724dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f8c257b44964d289d3b22f78babf72f67724dc", "html_url": "https://github.com/rust-lang/rust/commit/84f8c257b44964d289d3b22f78babf72f67724dc"}, {"sha": "4806fb29a00425cc73cbb1f0321ad36f8b0bc221", "url": "https://api.github.com/repos/rust-lang/rust/commits/4806fb29a00425cc73cbb1f0321ad36f8b0bc221", "html_url": "https://github.com/rust-lang/rust/commit/4806fb29a00425cc73cbb1f0321ad36f8b0bc221"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "f0495436bc1b2ace335bc82f9d7406f5d0617ae7", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=5574029b68e4a66864c4eaff8553cc8086117d56", "patch": "@@ -170,9 +170,10 @@ pub fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n                 demand::coerce(fcx, e.span, t_1, &e);\n             }\n         }\n-    } else if fcx.type_is_fat_ptr(t_e, span) && !fcx.type_is_fat_ptr(t_1, span) {\n+    } else if fcx.type_is_fat_ptr(t_e, span) != fcx.type_is_fat_ptr(t_1, span) {\n         fcx.type_error_message(span, |actual| {\n-            format!(\"illegal cast; cast from fat pointer: `{}` as `{}`\",\n+            format!(\"illegal cast; cast to or from fat pointer: `{}` as `{}` \\\n+                     involving incompatible type.\",\n                     actual, fcx.infcx().ty_to_string(t_1))\n         }, t_e, None);\n     } else if !(t_e_is_scalar && t_1_is_trivial) {"}, {"sha": "381dff36b7d408890060a44c6d3ff5373eedf083", "filename": "src/test/compile-fail/fat-ptr-cast.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffat-ptr-cast.rs?ref=5574029b68e4a66864c4eaff8553cc8086117d56", "patch": "@@ -8,12 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// Make sure casts between thin pointer <-> fat pointer are illegal.\n+\n+pub trait Trait {}\n+\n fn main() {\n     let a: &[i32] = &[1, 2, 3];\n     let b: Box<[i32]> = Box::new([1, 2, 3]);\n     let p = a as *const [i32];\n+    let q = a.as_ptr();\n+\n+    a as usize; //~ ERROR illegal cast\n+    b as usize; //~ ERROR illegal cast\n+    p as usize; //~ ERROR illegal cast\n+\n+    // #22955\n+    q as *const [i32]; //~ ERROR illegal cast\n \n-    a as usize; //~ ERROR cast from fat pointer\n-    b as usize; //~ ERROR cast from fat pointer\n-    p as usize; //~ ERROR cast from fat pointer\n+    // #21397\n+    let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR illegal cast\n+    let mut fail: *const str = 0 as *const str; //~ ERROR illegal cast\n }"}, {"sha": "c084a94d55e3c34bb51b7ffe896d3875e7d0d797", "filename": "src/test/compile-fail/issue-22034.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22034.rs?ref=5574029b68e4a66864c4eaff8553cc8086117d56", "patch": "@@ -11,9 +11,9 @@\n extern crate libc;\n \n fn main() {\n-    let foo: *mut libc::c_void;\n-    let cb: &mut Fn() = unsafe {\n-        &mut *(foo as *mut Fn())\n-        //~^ ERROR use of possibly uninitialized variable: `foo`\n+    let ptr: *mut () = 0 as *mut _;\n+    let _: &mut Fn() = unsafe {\n+        &mut *(ptr as *mut Fn())\n+        //~^ ERROR illegal cast\n     };\n }"}, {"sha": "5adea183bc98694a58ef8ff3a99a629f640bb1b4", "filename": "src/test/compile-fail/issue-22289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5574029b68e4a66864c4eaff8553cc8086117d56/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22289.rs?ref=5574029b68e4a66864c4eaff8553cc8086117d56", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    0 as &std::any::Any; //~ ERROR non-scalar cast: `i32` as `&core::any::Any`\n+    0 as &std::any::Any; //~ ERROR illegal cast\n }"}]}