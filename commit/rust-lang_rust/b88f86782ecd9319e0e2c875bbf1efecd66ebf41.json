{"sha": "b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OGY4Njc4MmVjZDkzMTllMGUyYzg3NWJiZjFlZmVjZDY2ZWJmNDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-12T14:45:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-15T18:58:49Z"}, "message": "Update error messages in compile-fail tests", "tree": {"sha": "2dab9ba700a8a309e59b2835cabd6a80390618ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dab9ba700a8a309e59b2835cabd6a80390618ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "html_url": "https://github.com/rust-lang/rust/commit/b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8d478db512803d25785a11c5b21634f8703b17f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d478db512803d25785a11c5b21634f8703b17f", "html_url": "https://github.com/rust-lang/rust/commit/a8d478db512803d25785a11c5b21634f8703b17f"}], "stats": {"total": 637, "additions": 381, "deletions": 256}, "files": [{"sha": "cf07dc02b9609cf509788b23042e05d077fd70e8", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1u.bar::<T>(); //~ ERROR: does not fulfill `Send`\n+    1u.bar::<T>(); //~ ERROR `core::kinds::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "4e0ad8088bee47c6d3fda00c68b4cbbbb29551db", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,10 +16,8 @@ trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n-    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n-    //~^^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n+    //~^^ ERROR the trait `core::kinds::Sized` is not implemented\n     let x: Vec<Box<RefCell<Trait + Sized>>> = Vec::new();\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n-    //~^^ ERROR instantiating a type parameter with an incompatible type `Trait+Sized`, which does not fulfill `Sized`\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }"}, {"sha": "f3b9c395e45145206dea3aecc332e1da1f4b9d3f", "filename": "src/test/compile-fail/builtin-superkinds-double-superkind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-double-superkind.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -13,9 +13,9 @@\n \n trait Foo : Send+Sync { }\n \n-impl <T: Sync> Foo for (T,) { } //~ ERROR cannot implement this trait\n+impl <T: Sync+'static> Foo for (T,) { } //~ ERROR the trait `core::kinds::Send` is not implemented\n \n-impl <T: Send> Foo for (T,T) { } //~ ERROR cannot implement this trait\n+impl <T: Send> Foo for (T,T) { } //~ ERROR the trait `core::kinds::Sync` is not implemented\n \n impl <T: Send+Sync> Foo for (T,T,T) { } // (ok)\n "}, {"sha": "76835c9955f6ea6af3ae2cf6d035414daee7e4da", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -21,6 +21,7 @@ struct X<T>(T);\n \n impl <T:Sync> RequiresShare for X<T> { }\n \n-impl <T:Sync> RequiresRequiresShareAndSend for X<T> { } //~ ERROR cannot implement this trait\n+impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n+//~^ ERROR the trait `core::kinds::Send` is not implemented\n \n fn main() { }"}, {"sha": "86d3d7e9cbc6cca5e105bf28d5ba805a1ac0e9ea", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -12,12 +12,12 @@\n // to use capabilities granted by builtin kinds as supertraits.\n \n trait Foo : Sync+'static {\n-    fn foo(self, mut chan: Sender<Self>) {\n-        chan.send(self); //~ ERROR does not fulfill `Send`\n-    }\n+    fn foo(self, mut chan: Sender<Self>) { }\n }\n \n impl <T: Sync> Foo for T { }\n+//~^ ERROR the parameter type `T` may not live long enough\n+//~^^ ERROR the parameter type `T` may not live long enough\n \n fn main() {\n     let (tx, rx) = channel();"}, {"sha": "fda83c03a7dce9c8252817d500c035fe709b29d1", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,6 +14,6 @@\n trait Foo : Send { }\n \n impl <'a> Foo for &'a mut () { }\n-//~^ ERROR which does not fulfill `Send`, cannot implement this trait\n+//~^ ERROR does not fulfill the required lifetime\n \n fn main() { }"}, {"sha": "e77177f7f6d296ad68929b9498913dedcef45bb2", "filename": "src/test/compile-fail/builtin-superkinds-typaram-not-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-typaram-not-send.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -12,6 +12,6 @@\n \n trait Foo : Send { }\n \n-impl <T: Sync> Foo for T { } //~ ERROR cannot implement this trait\n+impl <T: Sync+'static> Foo for T { } //~ ERROR the trait `core::kinds::Send` is not implemented\n \n fn main() { }"}, {"sha": "b6277a3e2bd9863fbc9b07063826ef9809174145", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -11,7 +11,7 @@\n fn test<T: Sync>() {}\n \n fn main() {\n-    test::<Sender<int>>();        //~ ERROR: does not fulfill `Sync`\n-    test::<Receiver<int>>();        //~ ERROR: does not fulfill `Sync`\n-    test::<Sender<int>>();  //~ ERROR: does not fulfill `Sync`\n+    test::<Sender<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n+    test::<Receiver<int>>();        //~ ERROR: `core::kinds::Sync` is not implemented\n+    test::<Sender<int>>();  //~ ERROR: `core::kinds::Sync` is not implemented\n }"}, {"sha": "c1aa6ccd9bde6ff20ab6b687a91a7ed81b21af29", "filename": "src/test/compile-fail/conflicting-implementations-aux.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,10 +15,7 @@\n extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n-impl<A> Foo for A {\n-//~^ ERROR conflicting implementations for trait `trait_impl_conflict::Foo`\n-//~^^ ERROR cannot provide an extension implementation where both trait and type\n-//          are not defined in this crate\n+impl<A> Foo for A { //~ ERROR E0117\n }\n \n fn main() {"}, {"sha": "b5a04491111bf7bb00370ed5efd32326787774df", "filename": "src/test/compile-fail/conflicting-implementations.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: conflicting implementations for trait `Foo`\n trait Foo {\n }\n \n-impl Foo for int {\n+impl Foo for int { //~ ERROR conflicting implementations\n \n }\n \n-impl<A> Foo for A {\n+impl<A> Foo for A { //~ NOTE conflicting implementation here\n \n }\n "}, {"sha": "1da88f2e2577eadae5c035f1accf85cdc18b1486", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -18,7 +18,7 @@ struct Error;\n \n #[deriving(Default)]\n struct Struct {\n-    x: Error //~ ERROR\n+    x: Error //~ ERROR `core::default::Default` is not implemented\n }\n \n fn main() {}"}, {"sha": "fb7759c6032e86687dfd11bfd145e05ca81c25d6", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,11 +16,9 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Zero)]   //~ ERROR failed to find an implementation\n+#[deriving(Zero)]   //~ ERROR not implemented\n struct Struct {\n-    x: Error //~ ERROR failed to find an implementation\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR type `Error` does not implement any method in scope\n+    x: Error\n }\n \n fn main() {}"}, {"sha": "193e4b5c6b2d51a665d9ac18a3a80c35909d2daf", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,11 +16,9 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Zero)]   //~ ERROR failed to find an implementation\n+#[deriving(Zero)]   //~ ERROR not implemented\n struct Struct(\n-    Error //~ ERROR\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR type `Error` does not implement any method in scope\n+    Error\n );\n \n fn main() {}"}, {"sha": "8304afa1141ee7b9701f9fbcf92c2d9eeb6debb2", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-type Foo = Vec<u8>;\n-\n-impl Drop for Foo {\n-//~^ ERROR cannot provide an extension implementation\n+impl Drop for int {\n+    //~^ ERROR the Drop trait may only be implemented on structures\n+    //~^^ ERROR cannot provide an extension implementation\n     fn drop(&mut self) {\n         println!(\"kaboom\");\n     }"}, {"sha": "112a424427a864298ee5ff7d1a41e1aa4f6425ff", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -42,6 +42,6 @@ pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n-    f5.ptr = *z;  //~ ERROR dynamically sized type on lhs of assignment\n-    //~^ ERROR E0161\n+    f5.ptr = *z;\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }"}, {"sha": "f18f4a36640c9d0ebd9ba614834da28e46f771c3", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -43,4 +43,5 @@ pub fn main() {\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n     let z: Box<ToBar> = box Bar1 {f: 36};\n     f5.ptr = Bar1 {f: 36}; //~ ERROR mismatched types: expected `ToBar`, found `Bar1`\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `ToBar`\n }"}, {"sha": "4247f91a4fc53e6f3fbe74f15c93dc6385b92826", "filename": "src/test/compile-fail/dst-bad-coerce1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce1.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -28,5 +28,5 @@ pub fn main() {\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n     let f3: &Fat<Bar> = f2;\n-    //~^ ERROR failed to find an implementation of trait Bar for Foo\n+    //~^ ERROR the trait `Bar` is not implemented for the type `Foo`\n }"}, {"sha": "e1a754b633208bbdf8abc0db523e74b3397d851a", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -22,10 +22,10 @@ pub fn main() {\n     // With a vec of ints.\n     let f1 = Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[int, ..3]> = &f1;\n-    let f3: &mut Fat<[int]> = f2; //~ ERROR cannot borrow immutable dereference\n+    let f3: &mut Fat<[int]> = f2; //~ ERROR mismatched types\n \n     // With a trait.\n     let f1 = Fat { ptr: Foo };\n     let f2: &Fat<Foo> = &f1;\n-    let f3: &mut Fat<Bar> = f2; //~ ERROR cannot borrow immutable dereference\n+    let f3: &mut Fat<Bar> = f2; //~ ERROR mismatched types\n }"}, {"sha": "c3a814e3f44ff12b7f5b093461fee4f70b00c9a4", "filename": "src/test/compile-fail/dst-bad-coercions.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -30,10 +30,9 @@ pub fn main() {\n     let y: &T = x; //~ ERROR mismatched types\n \n     // Test that we cannot convert an immutable ptr to a mutable one using *-ptrs\n-    let x: &mut T = &S; //~ ERROR types differ in mutability\n-    let x: *mut T = &S; //~ ERROR types differ in mutability\n-    let x: *mut S = &S;\n-    //~^ ERROR mismatched types\n+    let x: &mut T = &S; //~ ERROR mismatched types\n+    let x: *mut T = &S; //~ ERROR mismatched types\n+    let x: *mut S = &S; //~ ERROR mismatched types\n \n     // The below four sets of tests test that we cannot implicitly deref a *-ptr\n     // during a coercion."}, {"sha": "506322d41f531c975fc0ec82d8a3636eed758727", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -21,6 +21,5 @@ pub fn main() {\n     let f: Fat<[int, ..3]> = Fat { ptr: [5i, 6, 7] };\n     let g: &Fat<[int]> = &f;\n     let h: &Fat<Fat<[int]>> = &Fat { ptr: *g };\n-    //~^ ERROR trying to initialise a dynamically sized struct\n-    //~^^ ERROR E0161\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }"}, {"sha": "750b475adb2bb847ef48e81234b3b669f01d4fa2", "filename": "src/test/compile-fail/dst-sized-trait-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-sized-trait-param.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that when you implement a trait that has a sized type\n+// parameter, the corresponding value must be sized. Also that the\n+// self type must be sized if appropriate.\n+\n+trait Foo<T> { fn take(self, x: &T) { } } // Note: T is sized\n+\n+impl Foo<[int]> for uint { }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `[int]`\n+\n+impl Foo<int> for [uint] { }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented for the type `[uint]`\n+\n+pub fn main() { }"}, {"sha": "3d25c7ee772f626f95963eb35bf63d26d7003355", "filename": "src/test/compile-fail/error-should-say-copy-not-pod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ferror-should-say-copy-not-pod.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -13,5 +13,5 @@\n fn check_bound<T:Copy>(_: T) {}\n \n fn main() {\n-    check_bound(\"nocopy\".to_string()); //~ ERROR does not fulfill `Copy`\n+    check_bound(\"nocopy\".to_string()); //~ ERROR the trait `core::kinds::Copy` is not implemented\n }"}, {"sha": "194047ce848f6e8d2104d13055eb1b1cf8870ff6", "filename": "src/test/compile-fail/ifmt-unimpl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-unimpl.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     format!(\"{:d}\", \"3\");\n-    //~^ ERROR: failed to find an implementation of trait core::fmt::Signed\n+    //~^ ERROR: the trait `core::fmt::Signed` is not implemented\n }"}, {"sha": "69a35bcbd7b1153a7a105a67e3b86719847b3cb5", "filename": "src/test/compile-fail/impl-bounds-checking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-bounds-checking.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -17,7 +17,7 @@ trait Getter<T: Clone2> {\n     fn get(&self) -> T;\n }\n \n-impl Getter<int> for int { //~ ERROR failed to find an implementation of trait Clone2 for int\n+impl Getter<int> for int { //~ ERROR the trait `Clone2` is not implemented\n     fn get(&self) -> int { *self }\n }\n "}, {"sha": "75b9626a6596f4590823b0e5962fdfd16181cc6b", "filename": "src/test/compile-fail/issue-14915.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14915.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,8 +15,8 @@ fn main() {\n     let y: Gc<int> = box (GC) 0;\n \n     println!(\"{}\", x + 1); //~ ERROR binary operation `+` cannot be applied to type `Box<int>`\n-    //~^ ERROR cannot determine a type for this bounded type parameter: unconstrained type\n+    //~^ ERROR unable to infer enough type information\n     println!(\"{}\", y + 1);\n     //~^ ERROR binary operation `+` cannot be applied to type `Gc<int>`\n-    //~^^ ERROR cannot determine a type for this bounded type parameter: unconstrained type\n+    //~^^ ERROR unable to infer enough type information\n }"}, {"sha": "981abf6cc23d8867cd58ba26874d85926034cee9", "filename": "src/test/compile-fail/issue-3907-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -17,6 +17,6 @@ struct S {\n     name: int\n }\n \n-fn bar(_x: Foo) {} //~ ERROR variable `_x` has dynamically sized type\n+fn bar(_x: Foo) {} //~ ERROR the trait `core::kinds::Sized` is not implemented\n \n fn main() {}"}, {"sha": "d0830ff8e4d76efda060130a8ebed5ff539128ce", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -11,6 +11,6 @@\n trait I {}\n type K = I+'static;\n \n-fn foo(_x: K) {} //~ ERROR: variable `_x` has dynamically sized type\n+fn foo(_x: K) {} //~ ERROR: the trait `core::kinds::Sized` is not implemented\n \n fn main() {}"}, {"sha": "71b1bcd69da333afb71ff123bd1316e31857e0ce", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,10 +15,9 @@ struct Struct {\n }\n \n fn new_struct(r: A+'static) -> Struct {\n-    //~^ ERROR variable `r` has dynamically sized type\n-    Struct { r: r } //~ ERROR trying to initialise a dynamically sized struct\n-    //~^ ERROR E0161\n-    //~^^ ERROR E0161\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n+    Struct { r: r }\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n trait Curve {}"}, {"sha": "701bee85fd732fce8044b3b1d80a2e6d40d3be3a", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -11,5 +11,6 @@\n extern crate debug;\n \n fn main() {\n-    format!(\"{:?}\", None); //~ ERROR: cannot determine a type for this bounded\n+    // Unconstrained type:\n+    format!(\"{:?}\", None); //~ ERROR: E0101\n }"}, {"sha": "3d16ff0a3fac93188ac1770a7d72cfdcfa352167", "filename": "src/test/compile-fail/issue-7013.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7013.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -32,10 +32,5 @@ struct A {\n \n fn main() {\n     let a = A {v: box B{v: None} as Box<Foo+Send>};\n-    //~^ ERROR cannot pack type `Box<B>`, which does not fulfill `Send`, as a trait bounded by Send\n-    let v = Rc::new(RefCell::new(a));\n-    let w = v.clone();\n-    let b = &*v;\n-    let mut b = b.borrow_mut();\n-    b.v.set(w.clone());\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented for the type `B`\n }"}, {"sha": "3524d11d1842a621e2c05952cb956479a1eddb8c", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -34,29 +34,29 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<&'a [int]>();\n \n     // ...unless they are mutable\n-    assert_copy::<&'static mut int>(); //~ ERROR does not fulfill\n-    assert_copy::<&'a mut int>();  //~ ERROR does not fulfill\n+    assert_copy::<&'static mut int>(); //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<&'a mut int>();  //~ ERROR `core::kinds::Copy` is not implemented\n \n     // ~ pointers are not ok\n-    assert_copy::<Box<int>>();   //~ ERROR does not fulfill\n-    assert_copy::<String>();   //~ ERROR does not fulfill\n-    assert_copy::<Vec<int> >(); //~ ERROR does not fulfill\n-    assert_copy::<Box<&'a mut int>>(); //~ ERROR does not fulfill\n+    assert_copy::<Box<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<String>();   //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<Vec<int> >(); //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<Box<&'a mut int>>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n     // borrowed object types are generally ok\n     assert_copy::<&'a Dummy>();\n     assert_copy::<&'a Dummy+Copy>();\n     assert_copy::<&'static Dummy+Copy>();\n \n     // owned object types are not ok\n-    assert_copy::<Box<Dummy>>(); //~ ERROR does not fulfill\n-    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR does not fulfill\n+    assert_copy::<Box<Dummy>>(); //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<Box<Dummy+Copy>>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n     // mutable object types are not ok\n-    assert_copy::<&'a mut Dummy+Copy>();  //~ ERROR does not fulfill\n+    assert_copy::<&'a mut Dummy+Copy>();  //~ ERROR `core::kinds::Copy` is not implemented\n \n     // closures are like an `&mut` object\n-    assert_copy::<||>(); //~ ERROR does not fulfill\n+    assert_copy::<||>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n     // unsafe ptrs are ok\n     assert_copy::<*const int>();\n@@ -74,11 +74,11 @@ fn test<'a,T,U:Copy>(_: &'a int) {\n     assert_copy::<MyStruct>();\n \n     // structs containing non-POD are not ok\n-    assert_copy::<MyNoncopyStruct>(); //~ ERROR does not fulfill\n+    assert_copy::<MyNoncopyStruct>(); //~ ERROR `core::kinds::Copy` is not implemented\n \n     // managed or ref counted types are not ok\n-    assert_copy::<Gc<int>>();   //~ ERROR does not fulfill\n-    assert_copy::<Rc<int>>();   //~ ERROR does not fulfill\n+    assert_copy::<Gc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n+    assert_copy::<Rc<int>>();   //~ ERROR `core::kinds::Copy` is not implemented\n }\n \n pub fn main() {"}, {"sha": "6b25289567b27157a8042a0271222ad1fcf64e06", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -19,5 +19,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x = box 3i;\n     take_param(&x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n+    //~^ ERROR the trait `core::kinds::Copy` is not implemented\n }"}, {"sha": "c92887965c0d2010eae0c3556555e453001871dd", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -20,20 +20,22 @@ impl<T: Send + Copy> Gettable<T> for S<T> {}\n fn f<T>(val: T) {\n     let t: S<T> = S;\n     let a = &t as &Gettable<T>;\n-    //~^ ERROR instantiating a type parameter with an incompatible type `T`\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n+    //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n     let a: &Gettable<T> = &t;\n-    //~^ ERROR instantiating a type parameter with an incompatible type `T`\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n+    //~^^ ERROR the trait `core::kinds::Copy` is not implemented\n }\n \n-fn main() {\n-    let t: S<&int> = S;\n-    let a = &t as &Gettable<&int>;\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n+fn foo<'a>() {\n+    let t: S<&'a int> = S;\n+    let a = &t as &Gettable<&'a int>;\n     let t: Box<S<String>> = box S;\n     let a = t as Box<Gettable<String>>;\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n+    //~^ ERROR the trait `core::kinds::Copy` is not implemented\n     let t: Box<S<String>> = box S;\n     let a: Box<Gettable<String>> = t;\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n+    //~^ ERROR the trait `core::kinds::Copy` is not implemented\n }\n \n+fn main() { }"}, {"sha": "51ee38d5cfed2af9c3a4483e0e8461b914cfcd55", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -23,8 +23,8 @@ fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n     let x = box 3i;\n-    take_param(&x); //~ ERROR does not fulfill `Copy`\n+    take_param(&x); //~ ERROR `core::kinds::Copy` is not implemented\n \n     let y = &x;\n-    let z = &x as &Foo; //~ ERROR does not fulfill `Copy`\n+    let z = &x as &Foo; //~ ERROR `core::kinds::Copy` is not implemented\n }"}, {"sha": "d87d1a33ca13144c87d8ab425e7c9f10f7e39245", "filename": "src/test/compile-fail/kindck-proc-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-proc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-proc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-proc-bounds.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -13,10 +13,10 @@ fn is_freeze<T: Sync>() {}\n \n fn foo<'a>() {\n     is_send::<proc()>();\n-    //~^ ERROR: instantiating a type parameter with an incompatible type\n+    //~^ ERROR: the trait `core::kinds::Send` is not implemented\n \n     is_freeze::<proc()>();\n-    //~^ ERROR: instantiating a type parameter with an incompatible type\n+    //~^ ERROR: the trait `core::kinds::Sync` is not implemented\n }\n \n fn main() { }"}, {"sha": "9217d05002d88115674cd036d9549c1e3d311aa1", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -19,19 +19,20 @@ trait Message : Send { }\n // careful with object types, who knows what they close over...\n \n fn object_ref_with_static_bound_not_ok() {\n-    assert_send::<&'static Dummy+'static>(); //~ ERROR does not fulfill\n+    assert_send::<&'static Dummy+'static>();\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR does not fulfill\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn proc_with_no_bound_not_ok<'a>() {\n-    assert_send::<proc()>(); //~ ERROR does not fulfill\n+    assert_send::<proc()>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn closure_with_no_bound_not_ok<'a>() {\n-    assert_send::<||:'static>(); //~ ERROR does not fulfill\n+    assert_send::<||:'static>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "9b0991e9ac6deeec2af892e9326e091c3dd75ab5", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -18,6 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>(); //~ ERROR does not fulfill the required lifetime\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n fn test52<'a>() {\n     assert_send::<&'a Dummy+Send>(); //~ ERROR does not fulfill the required lifetime\n@@ -35,10 +36,12 @@ fn test61() {\n // them not ok\n fn test_70<'a>() {\n     assert_send::<proc():'a>(); //~ ERROR does not fulfill the required lifetime\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>(); //~ ERROR does not fulfill the required lifetime\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "d46c6e68c05c20e5e38d4fdf07f8a53295bafc0f", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,11 +14,11 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n fn test53() {\n-    assert_send::<Box<Dummy>>(); //~ ERROR does not fulfill `Send`\n+    assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::kinds::Send` is not implemented\n }\n \n // ...unless they are properly bounded"}, {"sha": "a9bbfcfa26263c50fba60f3bcab62077bf7b5e0b", "filename": "src/test/compile-fail/kindck-send-unsafe.rs~rust-lang_master", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs%7Erust-lang_master", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs%7Erust-lang_master", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-unsafe.rs%7Erust-lang_master?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn assert_send<T:Send>() { }\n+\n+// unsafe ptrs are ok unless they point at unsendable things\n+fn test70() {\n+    assert_send::<*mut int>();\n+}\n+fn test71<'a>() {\n+    assert_send::<*mut &'a int>(); //~ ERROR does not fulfill the required lifetime\n+}\n+\n+fn main() {\n+}"}, {"sha": "cbe391324794fe4a60e5851b987bf839ab7d307d", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -18,6 +18,5 @@ fn main() {\n     let x: Box<HashMap<int, int>> = box HashMap::new();\n     let x: Box<Map<int, int>> = x;\n     let y: Box<Map<uint, int>> = box x;\n-    //~^ ERROR failed to find an implementation of trait collections::Map<uint,int>\n-    //~^^ ERROR failed to find an implementation of trait core::collections::Collection\n+    //~^ ERROR the trait `collections::Map<uint,int>` is not implemented\n }"}, {"sha": "d620c13cc2520d15efb0d934bc44811a6dc094d4", "filename": "src/test/compile-fail/marker-no-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-copy.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,5 +14,5 @@ fn foo<P:Copy>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoCopy); //~ ERROR does not fulfill\n+    foo(marker::NoCopy); //~ ERROR the trait `core::kinds::Copy` is not implemented\n }"}, {"sha": "813e2548398b51304ab2ee03558c32a12350b9b8", "filename": "src/test/compile-fail/marker-no-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-send.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,5 +14,5 @@ fn foo<P:Send>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoSend); //~ ERROR does not fulfill `Send`\n+    foo(marker::NoSend); //~ ERROR the trait `core::kinds::Send` is not implemented\n }"}, {"sha": "735e61fa139f0195e9bb24416af25c33af05767b", "filename": "src/test/compile-fail/marker-no-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmarker-no-share.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,5 +14,5 @@ fn foo<P: Sync>(p: P) { }\n \n fn main()\n {\n-    foo(marker::NoSync); //~ ERROR does not fulfill `Sync`\n+    foo(marker::NoSync); //~ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "60921c041356fc39137aac8fc87af2489baf7d7c", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,5 +14,5 @@ fn f<T: Sync>(_: T) {}\n \n fn main() {\n     let x = RefCell::new(0i);\n-    f(x); //~ ERROR: which does not fulfill `Sync`\n+    f(x); //~ ERROR `core::kinds::Sync` is not implemented\n }"}, {"sha": "96937524ad51319b33f031bd2b417337f64275f4", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -19,5 +19,5 @@ fn bar<T: Sync>(_: T) {}\n \n fn main() {\n     let x = A(marker::NoSync);\n-    bar(&x); //~ ERROR type parameter with an incompatible type\n+    bar(&x); //~ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "f58350cf0934faec0dc8bc02824eec313b1e13fe", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -36,7 +36,8 @@ fn main() {\n     let x = foo(Port(box(GC) ()));\n \n     task::spawn(proc() {\n-        let y = x;   //~ ERROR does not fulfill `Send`\n+        let y = x;\n+        //~^ ERROR does not fulfill `Send`\n         println!(\"{:?}\", y);\n     });\n }"}, {"sha": "2235a265bba16ec998341d11e11d6f78b94134d8", "filename": "src/test/compile-fail/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-enum.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -19,6 +19,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = A(marker::NoSend);\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Send`\n+    //~^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "c05b17afe1d27bf960eb7217fc6e7f3089efb668", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,6 +15,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Rc::new(5i);\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `alloc::rc::Rc<int>`,\n-    //         which does not fulfill `Send`\n+    //~^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "6e84578e92e3b9d0ea29ba92fa324be45fc846d5", "filename": "src/test/compile-fail/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -20,6 +20,5 @@ fn bar<T: Send>(_: T) {}\n fn main() {\n     let x = Foo { a: 5, ns: marker::NoSend };\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Send`\n+    //~^ ERROR the trait `core::kinds::Send` is not implemented\n }"}, {"sha": "1a692dab6d49011efab646195338c7874332a92d", "filename": "src/test/compile-fail/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-enum.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -17,6 +17,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = A(marker::NoSync);\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Sync`\n+    //~^ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "5572f72d8fe834313a5c8a81f84647f16b560af1", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,6 +16,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Rc::new(RefCell::new(5i));\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n-    //         `std::rc::Rc<std::cell::RefCell<int>>`, which does not fulfill `Sync`\n+    //~^ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "1379a9f7382b006678b007d268ecf93238a305eb", "filename": "src/test/compile-fail/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -17,6 +17,5 @@ fn bar<T: Sync>(_: T) {}\n fn main() {\n     let x = Foo { a: 5, m: marker::NoSync };\n     bar(x);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `Foo`,\n-    //         which does not fulfill `Sync`\n+    //~^ ERROR the trait `core::kinds::Sync` is not implemented\n }"}, {"sha": "cfaf149a49cac6f4d4d2b2f45897e4d63688dd0a", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,6 +14,6 @@\n \n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n-fn take_object(f: Box<Foo>) { take_foo(f); } //~ ERROR failed to find an implementation of trait\n-//~^ ERROR failed to find an implementation\n+fn take_object(f: Box<Foo>) { take_foo(f); }\n+//~^ ERROR the trait `Foo` is not implemented\n fn main() {}"}, {"sha": "0e8bb40e0ffee01357bae2610b948078587603a1", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -43,8 +43,7 @@ fn main() {\n     {\n         // Can't do this copy\n         let x = box box box A {y: r(i)};\n-        let _z = x.clone(); //~ ERROR failed to find an implementation\n-        //~^ ERROR failed to find an implementation\n+        let _z = x.clone(); //~ ERROR not implemented\n         println!(\"{:?}\", x);\n     }\n     println!(\"{:?}\", *i);"}, {"sha": "c6a9f67cfc651babc3b6e836a1933dfeaca78047", "filename": "src/test/compile-fail/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bound-missing-bound-in-impl.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -12,8 +12,6 @@\n // nominal types (but not on other types) and that they are type\n // checked.\n \n-#![no_std]\n-\n struct Inv<'a> { // invariant w/r/t 'a\n     x: &'a mut &'a int\n }"}, {"sha": "50190411bf09bd770d9311ccb3b32dd58f88baf0", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -58,6 +58,7 @@ fn box_with_region_not_ok<'a>() {\n \n fn object_with_random_bound_not_ok<'a>() {\n     assert_send::<&'a Dummy+'a>(); //~ ERROR does not fulfill\n+    //~^ ERROR not implemented\n }\n \n fn object_with_send_bound_not_ok<'a>() {\n@@ -66,10 +67,12 @@ fn object_with_send_bound_not_ok<'a>() {\n \n fn proc_with_lifetime_not_ok<'a>() {\n     assert_send::<proc():'a>(); //~ ERROR does not fulfill\n+    //~^ ERROR not implemented\n }\n \n fn closure_with_lifetime_not_ok<'a>() {\n     assert_send::<||:'a>(); //~ ERROR does not fulfill\n+    //~^ ERROR not implemented\n }\n \n // unsafe pointers are ok unless they point at unsendable things"}, {"sha": "279139d8de96a0e1520074b1d802027173acc7ea", "filename": "src/test/compile-fail/regions-bounded-method-type-parameters.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-method-type-parameters.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![no_std]\n-\n // Check that explicit region bounds are allowed on the various\n // nominal types (but not on other types) and that they are type\n // checked."}, {"sha": "adc960b069d05d89f798d1a7e7673c5445e1189a", "filename": "src/test/compile-fail/regions-escape-via-trait-or-not.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-via-trait-or-not.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![no_std]\n-\n #![allow(dead_code)]\n \n trait Deref {"}, {"sha": "773d6e2c703655433b6afa9355de737a2e225ae5", "filename": "src/test/compile-fail/regions-lifetime-bounds-on-fns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-lifetime-bounds-on-fns.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![no_std]\n-\n fn a<'a, 'b:'a>(x: &mut &'a int, y: &mut &'b int) {\n     // Note: this is legal because of the `'b:'a` declaration.\n     *x = *y;"}, {"sha": "8fdf586b3d1de4ec3a88cefcc140ce102c79ec08", "filename": "src/test/compile-fail/repeat-to-run-dtor-twice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat-to-run-dtor-twice.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -24,5 +24,6 @@ impl Drop for Foo {\n \n fn main() {\n     let a = Foo { x: 3 };\n-    let _ = [ a, ..5 ];     //~ ERROR copying a value of non-copyable type\n+    let _ = [ a, ..5 ];\n+    //~^ ERROR the trait `core::kinds::Copy` is not implemented for the type `Foo`\n }"}, {"sha": "e9997083babd2d0336d6287319d1b87fdab8e110", "filename": "src/test/compile-fail/task-rng-isnt-sendable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftask-rng-isnt-sendable.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,5 +16,5 @@ fn test_send<S: Send>() {}\n \n pub fn main() {\n     test_send::<rand::TaskRng>();\n-    //~^ ERROR: incompatible type `std::rand::TaskRng`, which does not fulfill `Send`\n+    //~^ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "85a2761172d6136d6973d940217826eabeb99be2", "filename": "src/test/compile-fail/trait-bounds-not-on-bare-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-bare-trait.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n // This should emit the less confusing error, not the more confusing one.\n \n fn foo(_x: Foo + Send) {\n-    //~^ERROR variable `_x` has dynamically sized type `Foo+Send`\n+    //~^ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n fn main() { }"}, {"sha": "4233fa843eb611d0ca02e51b74a11f428b121a53", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,12 +16,11 @@ struct Foo<T:Trait> {\n \n fn main() {\n     let foo = Foo {\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR instantiating a type parameter with an incompatible type\n+    //~^ ERROR not implemented\n         x: 3i\n     };\n+\n     let baz: Foo<uint> = fail!();\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR instantiating a type parameter with an incompatible type\n+    //~^ ERROR not implemented\n }\n "}, {"sha": "c26cccc8b146c292f3e3e9aff8483f4552255030", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-static.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-static.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,8 +15,7 @@ struct Foo<T:Trait> {\n }\n \n static X: Foo<uint> = Foo {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     x: 1,\n };\n "}, {"sha": "d01f9d59fb43725275f03ed24ae38b64f59db9fd", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,22 +15,11 @@ extern crate trait_bounds_on_structs_and_enums_xc;\n use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n \n fn explode(x: Foo<uint>) {}\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n \n fn main() {\n-    let foo = Foo {\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR instantiating a type parameter with an incompatible type\n-        x: 3i\n-    };\n-    let bar: Bar<f64> = return;\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR instantiating a type parameter with an incompatible type\n-    let _ = bar;\n }\n "}, {"sha": "d3689067aef715d34a307258406bc28e825be028", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:trait_bounds_on_structs_and_enums_xc.rs\n+\n+extern crate trait_bounds_on_structs_and_enums_xc;\n+\n+use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n+\n+fn main() {\n+    let foo = Foo {\n+    //~^ ERROR not implemented\n+        x: 3i\n+    };\n+    let bar: Bar<f64> = return;\n+    //~^ ERROR not implemented\n+    let _ = bar;\n+}\n+"}, {"sha": "5fe8e435e68067102f7615d47a386e3a05bd8677", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -20,40 +20,34 @@ enum Bar<T:Trait> {\n     CBar(uint),\n }\n \n-fn explode(x: Foo<uint>) {}\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+fn explode(x: Foo<u32>) {}\n+//~^ ERROR not implemented\n \n fn kaboom(y: Bar<f32>) {}\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n \n-impl<T> Foo<T> { //~ ERROR failed to find an implementation\n-//~^ ERROR instantiating a type parameter with an incompatible type\n+impl<T> Foo<T> {\n+//~^ ERROR the trait `Trait` is not implemented\n     fn uhoh() {}\n }\n \n struct Baz {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     a: Foo<int>,\n }\n \n enum Boo {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     Quux(Bar<uint>),\n }\n \n struct Badness<T> {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     b: Foo<T>,\n }\n \n enum MoreBadness<T> {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     EvenMoreBadness(Bar<T>),\n }\n \n@@ -64,15 +58,10 @@ trait PolyTrait<T> {\n struct Struct;\n \n impl PolyTrait<Foo<uint>> for Struct {\n-//~^ ERROR failed to find an implementation\n-//~^^ ERROR instantiating a type parameter with an incompatible type\n+//~^ ERROR not implemented\n     fn whatever() {}\n }\n \n fn main() {\n-    let bar: Bar<f64> = return;\n-    //~^ ERROR failed to find an implementation\n-    //~^^ ERROR instantiating a type parameter with an incompatible type\n-    let _ = bar;\n }\n "}, {"sha": "74982946d7ddd6f591e2440d55843e53cf5d7245", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -25,7 +25,6 @@ impl Trait<&'static str> for Struct {\n \n fn main() {\n     let s: Box<Trait<int>> = box Struct { person: \"Fred\" };\n-    //~^ ERROR expected Trait<int>, found Trait<&'static str>\n-    //~^^ ERROR expected Trait<int>, found Trait<&'static str>\n+    //~^ ERROR type mismatch\n     s.f(1);\n }"}, {"sha": "580aea651857b1ec966aa0724f9d2e4d4d07f25d", "filename": "src/test/compile-fail/type-params-in-different-spaces-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-2.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,12 +15,12 @@ trait Tr<T> {\n // these compile as if Self: Tr<U>, even tho only Self: Tr<Self or T>\n trait A:    Tr<Self> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR expected Tr<U>, found Tr<Self>\n+        Tr::op(u)   //~ ERROR type mismatch\n     }\n }\n trait B<T>: Tr<T> {\n     fn test<U>(u: U) -> Self {\n-        Tr::op(u)   //~ ERROR expected Tr<U>, found Tr<T>\n+        Tr::op(u)   //~ ERROR type mismatch\n     }\n }\n "}, {"sha": "7c74cdc890d8519bc3c200a70ffb305b9f26dd28", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -39,5 +39,5 @@ fn main() {\n \n     let ns = NoSync{m: marker::NoSync};\n     test(ns);\n-    //~^ ERROR instantiating a type parameter with an incompatible type `NoSync`, which does not fulfill `Sync`\n+    //~^ ERROR `core::kinds::Sync` is not implemented\n }"}, {"sha": "a96bde7cca4cdcb06ce12c1140709b7b9aa22e32", "filename": "src/test/compile-fail/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-vtable-mismatch.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -18,8 +18,7 @@ fn call_it<F:FnMut<(int,int),int>>(y: int, mut f: F) -> int {\n \n pub fn main() {\n     let f = |&mut: x: uint, y: int| -> int { (x as int) + y };\n-    let z = call_it(3, f);  //~ ERROR expected core::ops::FnMut\n-    //~^ ERROR expected core::ops::FnMut\n+    let z = call_it(3, f);  //~ ERROR type mismatch\n     println!(\"{}\", z);\n }\n "}, {"sha": "27f1da75c3aef60c6e5a61d4b3978a751164d9e3", "filename": "src/test/compile-fail/unboxed-closures-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-trait.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -17,6 +17,6 @@ fn c<F:|: int, int| -> int>(f: F) -> int {\n fn main() {\n     let z: int = 7;\n     assert_eq!(c(|&: x: int, y| x + y + z), 10);\n-    //~^ ERROR failed to find an implementation\n+    //~^ ERROR not implemented\n }\n "}, {"sha": "940ca76582802a0cfc06099b5b0ad0529351b770", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -20,7 +20,6 @@ impl Drop for r {\n \n fn main() {\n     let i = box r { b: true };\n-    let _j = i.clone(); //~ ERROR failed to find an implementation\n-    //~^ ERROR failed to find an implementation\n+    let _j = i.clone(); //~ ERROR not implemented\n     println!(\"{:?}\", i);\n }"}, {"sha": "7d6cdaef85b2f35ca70deec321b5876f7a862d5e", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -16,5 +16,5 @@ fn f<T:Send>(_i: T) {\n \n fn main() {\n     let i = box box(GC) 100i;\n-    f(i); //~ ERROR does not fulfill `Send`\n+    f(i); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "54b1fdea7190d0dfd5bb773f1a729faaae622574", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -36,10 +36,8 @@ fn main() {\n     let r1 = vec!(box r { i: i1 });\n     let r2 = vec!(box r { i: i2 });\n     f(r1.clone(), r2.clone());\n-    //~^ ERROR failed to find an implementation of\n-    //~^^ ERROR failed to find an implementation of\n-    //~^^^ ERROR failed to find an implementation of\n-    //~^^^^ ERROR failed to find an implementation of\n+    //~^ ERROR the trait `core::clone::Clone` is not implemented\n+    //~^^ ERROR the trait `core::clone::Clone` is not implemented\n     println!(\"{:?}\", (r2, i1.get()));\n     println!(\"{:?}\", (r1, i2.get()));\n }"}, {"sha": "c3fea8e86d4f469536cfcbd967488010d4e6422a", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -28,6 +28,6 @@ fn foo(i:int, j: Gc<String>) -> foo {\n \n fn main() {\n   let cat = \"kitty\".to_string();\n-  let (tx, _) = channel(); //~ ERROR does not fulfill `Send`\n-  tx.send(foo(42, box(GC) (cat))); //~ ERROR does not fulfill `Send`\n+  let (tx, _) = channel(); //~ ERROR `core::kinds::Send` is not implemented\n+  tx.send(foo(42, box(GC) (cat))); //~ ERROR `core::kinds::Send` is not implemented\n }"}, {"sha": "7b5d42954117cb313ba9f28cb26791f616c48405", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: instantiating a type parameter with an incompatible type\n fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<T>() }\n+fn foo<Sized? T>() { bar::<T>() } //~ ERROR the trait `core::kinds::Sized` is not implemented\n fn main() { }"}, {"sha": "edef3ae6492692487879c1a27da0e0fa23059cc0", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,7 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: instantiating a type parameter with an incompatible type\n+enum Foo<T> { FooSome(T), FooNone }\n+\n fn bar<T: Sized>() { }\n-fn foo<Sized? T>() { bar::<Option<T>>() }\n+fn foo<Sized? T>() { bar::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n+//\n+// One error is for T being provided to Foo<T>, the other is\n+// for Foo<T> being provided to bar.\n+\n fn main() { }"}, {"sha": "58aba1a264648ab5cf174f162aff169f752a10f1", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: instantiating a type parameter with an incompatible type\n-\n struct Foo<T> { data: T }\n \n fn bar<T: Sized>() { }\n fn foo<Sized? T>() { bar::<Foo<T>>() }\n+//~^ ERROR the trait `core::kinds::Sized` is not implemented\n+//~^^ ERROR the trait `core::kinds::Sized` is not implemented\n+// One error is for the T in Foo<T>, the other is for Foo<T> as a value\n+// for bar's type parameter.\n+\n fn main() { }"}, {"sha": "fba1237340fe56274b4000e26b05442d71eb13f1", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,20 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test sized-ness checking in substitution.\n+// Test sized-ness checking in substitution within fn bodies..\n \n \n // Unbounded.\n fn f1<Sized? X>(x: &X) {\n-    f2::<X>(x); //~ ERROR instantiating a type parameter with an incompatible type `X`, which does n\n+    f2::<X>(x);\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n fn f2<X>(x: &X) {\n }\n \n // Bounded.\n trait T for Sized? {}\n fn f3<Sized? X: T>(x: &X) {\n-    f4::<X>(x); //~ ERROR instantiating a type parameter with an incompatible type `X`, which does n\n+    f4::<X>(x);\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n fn f4<X: T>(x: &X) {\n }\n@@ -34,7 +36,8 @@ enum E<Sized? X> {\n fn f5<Y>(x: &Y) {}\n fn f6<Sized? X>(x: &X) {}\n fn f7<Sized? X>(x1: &E<X>, x2: &E<X>) {\n-    f5(x1); //~ERROR instantiating a type parameter with an incompatible type `E<X>`, which does not\n+    f5(x1);\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n     f6(x2); // ok\n }\n \n@@ -45,40 +48,18 @@ struct S<Sized? X> {\n }\n \n fn f8<Sized? X>(x1: &S<X>, x2: &S<X>) {\n-    f5(x1); //~ERROR instantiating a type parameter with an incompatible type `S<X>`, which does not\n+    f5(x1);\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n     f6(x2); // ok\n }\n \n // Test some tuples.\n fn f9<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(*x1, 34i)); //~ERROR E0161\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n-    f5(&(32i, *x2)); //~ERROR E0161\n-    //~^ ERROR instantiating a type parameter with an incompatible type\n+    f5(&(*x1, 34i));\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n+    f5(&(32i, *x2));\n+    //~^ ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n-// impl - bounded\n-trait T1<Z: T> {\n-}\n-struct S3<Sized? Y>;\n-impl<Sized? X: T> T1<X> for S3<X> { //~ ERROR instantiating a type parameter with an incompatible\n-}\n-\n-// impl - unbounded\n-trait T2<Z> {\n-}\n-impl<Sized? X> T2<X> for S3<X> { //~ ERROR instantiating a type parameter with an incompatible type\n-}\n-\n-// impl - struct\n-trait T3<Sized? Z> {\n-}\n-struct S4<Y>;\n-impl<Sized? X> T3<X> for S4<X> { //~ ERROR instantiating a type parameter with an incompatible type\n-}\n-impl<Sized? X> S4<X> { //~ ERROR instantiating a type parameter with an incompatible type\n-}\n-\n-\n pub fn main() {\n }"}, {"sha": "0efd178f75b8c479a831a9f6e8456d773ac26c5a", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -14,33 +14,29 @@\n trait T for Sized? {}\n \n fn f1<Sized? X>(x: &X) {\n-    let _: X; //~ERROR variable `_` has dynamically sized type `X`\n-    let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n-    let y: X; //~ERROR variable `y` has dynamically sized type `X`\n-    let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n+    let _: X; // <-- this is OK, no bindings created, no initializer.\n+    let _: (int, (X, int)); // same\n+    let y: X; //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let y: (int, (X, int)); //~ERROR the trait `core::kinds::Sized` is not implemented\n }\n fn f2<Sized? X: T>(x: &X) {\n-    let _: X; //~ERROR variable `_` has dynamically sized type `X`\n-    let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n-    let y: X; //~ERROR variable `y` has dynamically sized type `X`\n-    let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n+    let y: X; //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let y: (int, (X, int)); //~ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n fn f3<Sized? X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1; //~ERROR variable `y` has dynamically sized type `X`\n-    let y = *x2; //~ERROR variable `y` has dynamically sized type `X`\n-    let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n-    //~^ ERROR E0161\n+    let y: X = *x1; //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let y = *x2; //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let (y, z) = (*x3, 4i); //~ERROR the trait `core::kinds::Sized` is not implemented\n }\n fn f4<Sized? X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-    let y: X = *x1;         //~ERROR variable `y` has dynamically sized type `X`\n-    let y = *x2;            //~ERROR variable `y` has dynamically sized type `X`\n-    let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n-    //~^ ERROR E0161\n+    let y: X = *x1;         //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let y = *x2;            //~ERROR the trait `core::kinds::Sized` is not implemented\n+    let (y, z) = (*x3, 4i); //~ERROR the trait `core::kinds::Sized` is not implemented\n }\n \n-fn g1<Sized? X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n-fn g2<Sized? X: T>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n+fn g1<Sized? X>(x: X) {} //~ERROR the trait `core::kinds::Sized` is not implemented\n+fn g2<Sized? X: T>(x: X) {} //~ERROR the trait `core::kinds::Sized` is not implemented\n \n pub fn main() {\n }"}, {"sha": "fd9dffe00d2d50a28b64e22fffdb246f7707ef5c", "filename": "src/test/compile-fail/unsized7.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test sized-ness checking in substitution in impls.\n+\n+trait T for Sized? {}\n+\n+// I would like these to fail eventually.\n+// impl - bounded\n+trait T1<Z: T> {\n+}\n+struct S3<Sized? Y>;\n+impl<Sized? X: T> T1<X> for S3<X> {\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `X`\n+}\n+\n+// impl - unbounded\n+trait T2<Z> {\n+}\n+struct S4<Sized? Y>;\n+impl<Sized? X> T2<X> for S4<X> {\n+    //~^ ERROR `core::kinds::Sized` is not implemented for the type `X`\n+}\n+\n+// impl - struct\n+trait T3<Sized? Z> {\n+}\n+struct S5<Y>;\n+impl<Sized? X> T3<X> for S5<X> { //~ ERROR not implemented\n+}\n+\n+impl<Sized? X> S5<X> { //~ ERROR not implemented\n+}\n+\n+\n+fn main() { }"}, {"sha": "bfd52d69cb217210472b6c66df1511e8877a1b6b", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: failed to find an implementation\n-\n struct r {\n   i:int\n }\n@@ -25,5 +23,7 @@ fn main() {\n     let i = vec!(r(0));\n     let j = vec!(r(1));\n     let k = i + j;\n+    //~^ ERROR not implemented\n     println!(\"{}\", j);\n+    //~^ ERROR not implemented\n }"}, {"sha": "12cfe9c20fa9b5e6ba7d085e33ea949bfc1720a6", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -24,8 +24,7 @@ impl TraitB for int {\n \n fn call_it<B:TraitB>(b: B)  -> int {\n     let y = 4u;\n-    b.gimme_an_a(y) //~ ERROR failed to find an implementation of trait TraitA\n-    //~^ ERROR failed to find an implementation of trait TraitA\n+    b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n }\n \n fn main() {"}, {"sha": "4a4a5f3193d3af085083f5444af4cf0092dca131", "filename": "src/test/compile-fail/where-clauses-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-unsatisfied.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -15,9 +15,6 @@ struct Struct;\n \n fn main() {\n     drop(equal(&Struct, &Struct))\n-    //~^ ERROR failed to find an implementation of trait core::cmp::Eq\n-    //~^^ ERROR failed to find an implementation of trait core::cmp::PartialEq\n-    //~^^^ ERROR failed to find an implementation of trait core::cmp::Eq\n-    //~^^^^ ERROR failed to find an implementation of trait core::cmp::PartialEq\n+    //~^ ERROR the trait `core::cmp::Eq` is not implemented\n }\n "}, {"sha": "6d7715ed9a5a039012a1428c774236ade4bed296", "filename": "src/test/run-pass/drop-struct-as-object.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-struct-as-object.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that destructor on a struct runs successfully after the struct\n+// is boxed and converted to an object.\n+\n+static mut value: uint = 0;\n+\n+struct Cat {\n+    name : uint,\n+}\n+\n+trait Dummy {\n+    fn get(&self) -> uint;\n+}\n+\n+impl Dummy for Cat {\n+    fn get(&self) -> uint { self.name }\n+}\n+\n+impl Drop for Cat {\n+    fn drop(&mut self) {\n+        unsafe { value = self.name; }\n+    }\n+}\n+\n+pub fn main() {\n+    {\n+        let x = box Cat {name: 22};\n+        let nyan: Box<Dummy> = x as Box<Dummy>;\n+    }\n+    unsafe {\n+        assert_eq!(value, 22);\n+    }\n+}"}, {"sha": "f8bc0929bfa807fc0481a5b4ffd61d2714ee687c", "filename": "src/test/run-pass/object-one-type-two-traits.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88f86782ecd9319e0e2c875bbf1efecd66ebf41/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-one-type-two-traits.rs?ref=b88f86782ecd9319e0e2c875bbf1efecd66ebf41", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Testing creating two vtables with the same self type, but different\n+// traits.\n+\n+use std::any::Any;\n+use std::any::AnyRefExt;\n+\n+trait Wrap {\n+    fn get(&self) -> int;\n+    fn wrap(self: Box<Self>) -> Box<Any+'static>;\n+}\n+\n+impl Wrap for int {\n+    fn get(&self) -> int {\n+        *self\n+    }\n+    fn wrap(self: Box<int>) -> Box<Any+'static> {\n+        self as Box<Any+'static>\n+    }\n+}\n+\n+fn is<T:'static>(x: &Any) -> bool {\n+    x.is::<T>()\n+}\n+\n+fn main() {\n+    let x = box 22i as Box<Wrap>;\n+    println!(\"x={}\", x.get());\n+    let y = x.wrap();\n+}"}]}