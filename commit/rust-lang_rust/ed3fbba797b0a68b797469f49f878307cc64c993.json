{"sha": "ed3fbba797b0a68b797469f49f878307cc64c993", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkM2ZiYmE3OTdiMGE2OGI3OTc0NjlmNDlmODc4MzA3Y2M2NGM5OTM=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-07-16T18:26:02Z"}, "committer": {"name": "Jared Roesch", "email": "jroesch@MacBook.home", "date": "2015-07-26T02:57:59Z"}, "message": "Fix error message spans", "tree": {"sha": "a500b50ef90b2447f114147dc56a5bf40fc0bb0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a500b50ef90b2447f114147dc56a5bf40fc0bb0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3fbba797b0a68b797469f49f878307cc64c993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3fbba797b0a68b797469f49f878307cc64c993", "html_url": "https://github.com/rust-lang/rust/commit/ed3fbba797b0a68b797469f49f878307cc64c993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3fbba797b0a68b797469f49f878307cc64c993/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbfbdd7d1426d34b94223909eec2c9c009d9c731", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfbdd7d1426d34b94223909eec2c9c009d9c731", "html_url": "https://github.com/rust-lang/rust/commit/fbfbdd7d1426d34b94223909eec2c9c009d9c731"}], "stats": {"total": 187, "additions": 110, "deletions": 77}, "files": [{"sha": "10552791d8b86731d2098d9f03c0a37c3884a0fa", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -119,6 +119,7 @@ pub enum Node<'ast> {\n     NodeStructCtor(&'ast StructDef),\n \n     NodeLifetime(&'ast Lifetime),\n+    NodeTyParam(&'ast TyParam)\n }\n \n /// Represents an entry and its parent NodeID.\n@@ -142,6 +143,7 @@ enum MapEntry<'ast> {\n     EntryBlock(NodeId, &'ast Block),\n     EntryStructCtor(NodeId, &'ast StructDef),\n     EntryLifetime(NodeId, &'ast Lifetime),\n+    EntryTyParam(NodeId, &'ast TyParam),\n \n     /// Roots for node trees.\n     RootCrate,\n@@ -175,7 +177,8 @@ impl<'ast> MapEntry<'ast> {\n             NodePat(n) => EntryPat(p, n),\n             NodeBlock(n) => EntryBlock(p, n),\n             NodeStructCtor(n) => EntryStructCtor(p, n),\n-            NodeLifetime(n) => EntryLifetime(p, n)\n+            NodeLifetime(n) => EntryLifetime(p, n),\n+            NodeTyParam(n) => EntryTyParam(p, n),\n         }\n     }\n \n@@ -194,6 +197,7 @@ impl<'ast> MapEntry<'ast> {\n             EntryBlock(id, _) => id,\n             EntryStructCtor(id, _) => id,\n             EntryLifetime(id, _) => id,\n+            EntryTyParam(id, _) => id,\n             _ => return None\n         })\n     }\n@@ -213,6 +217,7 @@ impl<'ast> MapEntry<'ast> {\n             EntryBlock(_, n) => NodeBlock(n),\n             EntryStructCtor(_, n) => NodeStructCtor(n),\n             EntryLifetime(_, n) => NodeLifetime(n),\n+            EntryTyParam(_, n) => NodeTyParam(n),\n             _ => return None\n         })\n     }\n@@ -573,6 +578,7 @@ impl<'ast> Map<'ast> {\n             Some(NodePat(pat)) => pat.span,\n             Some(NodeBlock(block)) => block.span,\n             Some(NodeStructCtor(_)) => self.expect_item(self.get_parent(id)).span,\n+            Some(NodeTyParam(ty_param)) => ty_param.span,\n             _ => return None,\n         };\n         Some(sp)\n@@ -815,6 +821,14 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.parent_node = parent_node;\n     }\n \n+    fn visit_generics(&mut self, generics: &'ast Generics) {\n+        for ty_param in generics.ty_params.iter() {\n+            self.insert(ty_param.id, NodeTyParam(ty_param));\n+        }\n+\n+        visit::walk_generics(self, generics);\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'ast TraitItem) {\n         let parent_node = self.parent_node;\n         self.parent_node = ti.id;\n@@ -1015,7 +1029,7 @@ impl<'a> NodePrinter for pprust::State<'a> {\n             NodePat(a)         => self.print_pat(&*a),\n             NodeBlock(a)       => self.print_block(&*a),\n             NodeLifetime(a)    => self.print_lifetime(&*a),\n-\n+            NodeTyParam(_)     => panic!(\"cannot print TyParam\"),\n             // these cases do not carry enough information in the\n             // ast_map to reconstruct their full structure for pretty\n             // printing.\n@@ -1123,6 +1137,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n             format!(\"lifetime {}{}\",\n                     pprust::lifetime_to_string(&**l), id_str)\n         }\n+        Some(NodeTyParam(ref ty_param)) => {\n+            format!(\"typaram {:?}{}\", ty_param, id_str)\n+        }\n         None => {\n             format!(\"unknown node{}\", id_str)\n         }"}, {"sha": "54c55d76a8270215f1e76c1244938447dfde530c", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -833,6 +833,7 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n     assert_eq!(next(st), '|');\n     let index = parse_u32(st);\n     assert_eq!(next(st), '|');\n+    let default_def_id = parse_def_(st, NominalType, conv);\n     let default = parse_opt(st, |st| parse_ty_(st, conv));\n     let object_lifetime_default = parse_object_lifetime_default(st, conv);\n \n@@ -841,6 +842,7 @@ fn parse_type_param_def_<'a, 'tcx, F>(st: &mut PState<'a, 'tcx>, conv: &mut F)\n         def_id: def_id,\n         space: space,\n         index: index,\n+        default_def_id: default_def_id,\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n     }"}, {"sha": "597401daccfd22a2245ce6e562b4e6984cf17adb", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -409,9 +409,9 @@ pub fn enc_region_bounds<'a, 'tcx>(w: &mut Encoder,\n \n pub fn enc_type_param_def<'a, 'tcx>(w: &mut Encoder, cx: &ctxt<'a, 'tcx>,\n                                     v: &ty::TypeParameterDef<'tcx>) {\n-    mywrite!(w, \"{}:{}|{}|{}|\",\n+    mywrite!(w, \"{}:{}|{}|{}|{}|\",\n              token::get_name(v.name), (cx.ds)(v.def_id),\n-             v.space.to_uint(), v.index);\n+             v.space.to_uint(), v.index, (cx.ds)(v.default_def_id));\n     enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n     enc_object_lifetime_default(w, cx, v.object_lifetime_default);\n }"}, {"sha": "d10dd7073532bf880df8a6814f5b72cc6d6e0fbe", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -40,7 +40,6 @@ use syntax::codemap;\n use syntax::codemap::{Span, DUMMY_SP};\n use util::nodemap::{FnvHashMap, NodeMap};\n \n-use ast_map;\n use self::combine::CombineFields;\n use self::region_inference::{RegionVarBindings, RegionSnapshot};\n use self::error_reporting::ErrorReporting;\n@@ -658,6 +657,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// must be attached to the variable when created, if it is created\n     /// without a default, this will return None.\n     ///\n+    /// This code does not apply to integral or floating point variables,\n+    /// only to use declared defaults.\n+    ///\n     /// See `new_ty_var_with_default` to create a type variable with a default.\n     /// See `type_variable::Default` for details about what a default entails.\n     pub fn default(&self, ty: Ty<'tcx>) -> Option<type_variable::Default<'tcx>> {\n@@ -1055,31 +1057,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                               substs: &mut Substs<'tcx>,\n                               defs: &[ty::TypeParameterDef<'tcx>]) {\n \n-        // This doesn't work ...\n-        fn definition_span<'tcx>(tcx: &ty::ctxt<'tcx>, def_id: ast::DefId) -> Span {\n-            let parent = tcx.map.get_parent(def_id.node);\n-            debug!(\"definition_span def_id={:?} parent={:?} node={:?} parent_node={:?}\",\n-                def_id, parent, tcx.map.find(def_id.node), tcx.map.find(parent));\n-            match tcx.map.find(parent) {\n-                None => DUMMY_SP,\n-                Some(ref node) => match *node {\n-                    ast_map::NodeItem(ref item) => item.span,\n-                    ast_map::NodeForeignItem(ref item) => item.span,\n-                    ast_map::NodeTraitItem(ref item) => item.span,\n-                    ast_map::NodeImplItem(ref item) => item.span,\n-                    _ => DUMMY_SP\n-                }\n-            }\n-        }\n-\n         let mut vars = Vec::with_capacity(defs.len());\n \n         for def in defs.iter() {\n-            let default = def.default.subst_spanned(self.tcx, substs, Some(span)).map(|default| {\n+            let default = def.default.map(|default| {\n+                let definition_span = self.tcx.map.opt_span(def.def_id.node);\n                 type_variable::Default {\n-                    ty: default,\n+                    ty: default.subst_spanned(self.tcx, substs, Some(span)),\n                     origin_span: span,\n-                    definition_span: definition_span(self.tcx, def.def_id)\n+                    definition_span: definition_span.unwrap_or(DUMMY_SP)\n                 }\n             });\n "}, {"sha": "a4f714b3bf9c7ff4e1a2a93b5bb3952597f56d98", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -115,8 +115,6 @@ pub struct Field<'tcx> {\n     pub mt: TypeAndMut<'tcx>\n }\n \n-\n-\n // Enum information\n #[derive(Clone)]\n pub struct VariantInfo<'tcx> {\n@@ -2282,6 +2280,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub def_id: ast::DefId,\n     pub space: subst::ParamSpace,\n     pub index: u32,\n+    pub default_def_id: DefId, // for use in error reporing about defaults\n     pub default: Option<Ty<'tcx>>,\n     pub object_lifetime_default: ObjectLifetimeDefault,\n }\n@@ -5084,7 +5083,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                        values.found)\n             },\n             TyParamDefaultMismatch(ref values) => {\n-                write!(f, \"conflicting type parameter defaults {} and {}\",\n+                write!(f, \"conflicting type parameter defaults `{}` and `{}`\",\n                        values.expected.ty,\n                        values.found.ty)\n             }\n@@ -5453,11 +5452,11 @@ impl<'tcx> ctxt<'tcx> {\n                              expected.ty,\n                              found.ty));\n                 self.sess.span_note(expected.definition_span,\n-                    &format!(\"...a default was defined\"));\n+                    &format!(\"a default was defined here...\"));\n                 self.sess.span_note(expected.origin_span,\n                     &format!(\"...that was applied to an unconstrained type variable here\"));\n                 self.sess.span_note(found.definition_span,\n-                    &format!(\"...a second default was defined\"));\n+                    &format!(\"a second default was defined here...\"));\n                 self.sess.span_note(found.origin_span,\n                     &format!(\"...that also applies to the same type variable here\"));\n             }"}, {"sha": "0c694926ba4b5a829e2c775fadaac7be73924e8e", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -340,6 +340,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n             space: self.space,\n             index: self.index,\n             default: self.default.fold_with(folder),\n+            default_def_id: self.default_def_id,\n             object_lifetime_default: self.object_lifetime_default.fold_with(folder),\n         }\n     }"}, {"sha": "31e4b9c48e20b84dfecab3497676fa91bece31d1", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -266,6 +266,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // Ugh -- but this ensures any new variants won't be forgotten\n         ast_map::NodeForeignItem(..) |\n         ast_map::NodeLifetime(..) |\n+        ast_map::NodeTyParam(..) |\n         ast_map::NodeExpr(..) |\n         ast_map::NodeStmt(..) |\n         ast_map::NodeArg(..) |"}, {"sha": "120cfcbca3748bf9fdc17be94c1d8881eb8676b9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -55,7 +55,7 @@ use middle::def;\n use middle::implicator::object_region_bounds;\n use middle::resolve_lifetime as rl;\n use middle::privacy::{AllPublic, LastMod};\n-use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n+use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs, ParamSpace};\n use middle::traits;\n use middle::ty::{self, RegionEscape, Ty, ToPredicate, HasTypeFlags};\n use middle::ty_fold;\n@@ -111,7 +111,11 @@ pub trait AstConv<'tcx> {\n     }\n \n     /// What type should we use when a type is omitted?\n-    fn ty_infer(&self, default: Option<ty::TypeParameterDef<'tcx>>, span: Span) -> Ty<'tcx>;\n+        fn ty_infer(&self,\n+                    param_and_substs: Option<ty::TypeParameterDef<'tcx>>,\n+                    substs: Option<&mut Substs<'tcx>>,\n+                    space: Option<ParamSpace>,\n+                    span: Span) -> Ty<'tcx>;\n \n     /// Projecting an associated type from a (potentially)\n     /// higher-ranked trait reference is more complicated, because of\n@@ -403,7 +407,11 @@ fn create_substs_for_ast_path<'tcx>(\n     // they were optional (e.g. paths inside expressions).\n     let mut type_substs = if param_mode == PathParamMode::Optional &&\n                              types_provided.is_empty() {\n-        ty_param_defs.iter().map(|p| this.ty_infer(Some(p.clone()), span)).collect()\n+        let mut substs = region_substs.clone();\n+        ty_param_defs\n+            .iter()\n+            .map(|p| this.ty_infer(Some(p.clone()), Some(&mut substs), Some(TypeSpace), span))\n+            .collect()\n     } else {\n         types_provided\n     };\n@@ -1661,7 +1669,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             // values in a ExprClosure, or as\n             // the type of local variables. Both of these cases are\n             // handled specially and will not descend into this routine.\n-            this.ty_infer(None, ast_ty.span)\n+            this.ty_infer(None, None, None, ast_ty.span)\n         }\n     };\n \n@@ -1677,7 +1685,7 @@ pub fn ty_of_arg<'tcx>(this: &AstConv<'tcx>,\n {\n     match a.ty.node {\n         ast::TyInfer if expected_ty.is_some() => expected_ty.unwrap(),\n-        ast::TyInfer => this.ty_infer(None, a.ty.span),\n+        ast::TyInfer => this.ty_infer(None, None, None, a.ty.span),\n         _ => ast_ty_to_ty(this, rscope, &*a.ty),\n     }\n }\n@@ -1796,7 +1804,7 @@ fn ty_of_method_or_bare_fn<'a, 'tcx>(this: &AstConv<'tcx>,\n \n     let output_ty = match decl.output {\n         ast::Return(ref output) if output.node == ast::TyInfer =>\n-            ty::FnConverging(this.ty_infer(None, output.span)),\n+            ty::FnConverging(this.ty_infer(None, None, None, output.span)),\n         ast::Return(ref output) =>\n             ty::FnConverging(convert_ty_with_lifetime_elision(this,\n                                                               implied_output_region,\n@@ -1936,7 +1944,7 @@ pub fn ty_of_closure<'tcx>(\n         _ if is_infer && expected_ret_ty.is_some() =>\n             expected_ret_ty.unwrap(),\n         _ if is_infer =>\n-            ty::FnConverging(this.ty_infer(None, decl.output.span())),\n+            ty::FnConverging(this.ty_infer(None, None, None, decl.output.span())),\n         ast::Return(ref output) =>\n             ty::FnConverging(ast_ty_to_ty(this, &rb, &**output)),\n         ast::DefaultReturn(..) => unreachable!(),"}, {"sha": "76886fc1275bd3517edad8e1e19173bd60d0c2ac", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 48, "deletions": 36, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -1139,14 +1139,31 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         trait_def.associated_type_names.contains(&assoc_name)\n     }\n \n-    fn ty_infer(&self, ty_param_def: Option<ty::TypeParameterDef<'tcx>>, span: Span) -> Ty<'tcx> {\n-        let default = ty_param_def.and_then(|t|\n-            t.default.map(|ty| type_variable::Default {\n-                ty: ty,\n+    fn ty_infer(&self,\n+                ty_param_def: Option<ty::TypeParameterDef<'tcx>>,\n+                substs: Option<&mut subst::Substs<'tcx>>,\n+                space: Option<subst::ParamSpace>,\n+                span: Span) -> Ty<'tcx> {\n+        // Grab the default doing subsitution\n+        let default = ty_param_def.and_then(|def| {\n+            let definition_span = self.tcx()\n+                                      .map\n+                                      .opt_span(def.def_id.node);\n+\n+            def.default.map(|ty| type_variable::Default {\n+                ty: ty.subst_spanned(self.tcx(), substs.as_ref().unwrap(), Some(span)),\n                 origin_span: span,\n-                definition_span: span\n-        }));\n-        self.infcx().next_ty_var_with_default(default)\n+                definition_span: definition_span.unwrap_or(codemap::DUMMY_SP)\n+            })\n+        });\n+\n+        let ty_var = self.infcx().next_ty_var_with_default(default);\n+\n+        // Finally we add the type variable to the substs\n+        match substs {\n+            None => ty_var,\n+            Some(substs) => { substs.types.push(space.unwrap(), ty_var); ty_var }\n+        }\n     }\n \n     fn projected_ty_from_poly_trait_ref(&self,\n@@ -1829,10 +1846,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // a unification failure and then report an error for each.\n                 for (conflict, default) in conflicts {\n                     let conflicting_default =\n-                        self.find_conflicting_default(\n-                            &unbound_tyvars,\n-                            &default_map,\n-                            conflict).unwrap_or(type_variable::Default {\n+                        self.find_conflicting_default(&unbound_tyvars, &default_map, conflict)\n+                            .unwrap_or(type_variable::Default {\n                                 ty: self.infcx().next_ty_var(),\n                                 origin_span: codemap::DUMMY_SP,\n                                 definition_span: codemap::DUMMY_SP\n@@ -1871,36 +1886,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // We also run this inside snapshot that never commits so we can do error\n         // reporting for more then one conflict.\n-        //let _ = self.infcx().commit_if_ok(|_: &infer::CombinedSnapshot| {\n-            for ty in &unbound_tyvars {\n-                if self.infcx().type_var_diverges(ty) {\n-                    demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().mk_nil());\n-                } else {\n-                    match self.infcx().type_is_unconstrained_numeric(ty) {\n-                        UnconstrainedInt => {\n-                            demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.i32)\n-                        },\n-                        UnconstrainedFloat => {\n-                            demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.f64)\n-                        },\n-                        Neither => {\n-                            if let Some(default) = default_map.get(ty) {\n-                                let default = default.clone();\n-                                match infer::mk_eqty(self.infcx(), false,\n-                                                     infer::Misc(default.origin_span),\n-                                                     ty, default.ty) {\n-                                    Ok(()) => {}\n-                                    Err(_) => {\n-                                        result = Some(default);\n-                                    }\n+        for ty in &unbound_tyvars {\n+            if self.infcx().type_var_diverges(ty) {\n+                demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().mk_nil());\n+            } else {\n+                match self.infcx().type_is_unconstrained_numeric(ty) {\n+                    UnconstrainedInt => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.i32)\n+                    },\n+                    UnconstrainedFloat => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.f64)\n+                    },\n+                    Neither => {\n+                        if let Some(default) = default_map.get(ty) {\n+                            let default = default.clone();\n+                            match infer::mk_eqty(self.infcx(), false,\n+                                                 infer::Misc(default.origin_span),\n+                                                 ty, default.ty) {\n+                                Ok(()) => {}\n+                                Err(_) => {\n+                                    result = Some(default);\n                                 }\n                             }\n                         }\n                     }\n                 }\n             }\n-            // let result: Result<(), ()> = Err(()); result\n-        //});\n+        }\n \n         return result;\n     }\n@@ -4613,7 +4625,6 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n             }\n         }\n     }\n-\n     if let Some(self_ty) = opt_self_ty {\n         if type_defs.len(subst::SelfSpace) == 1 {\n             substs.types.push(subst::SelfSpace, self_ty);\n@@ -4839,6 +4850,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         // Nothing specified at all: supply inference variables for\n         // everything.\n         if provided_len == 0 && !(require_type_space && space == subst::TypeSpace) {\n+            substs.types.replace(space, Vec::new());\n             fcx.infcx().type_vars_for_defs(span, space, substs, &desired[..]);\n             return;\n         }"}, {"sha": "6bff90825f328d8e06fea038135b0d0b714fa12e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -404,7 +404,11 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn ty_infer(&self, _default: Option<ty::TypeParameterDef<'tcx>>, span: Span) -> Ty<'tcx> {\n+        fn ty_infer(&self,\n+                    _ty_param_def: Option<ty::TypeParameterDef<'tcx>>,\n+                    _substs: Option<&mut Substs<'tcx>>,\n+                    _space: Option<ParamSpace>,\n+                    span: Span) -> Ty<'tcx> {\n         span_err!(self.tcx().sess, span, E0121,\n                   \"the type placeholder `_` is not allowed within types on item signatures\");\n         self.tcx().types.err\n@@ -1648,6 +1652,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         index: 0,\n         name: special_idents::type_self.name,\n         def_id: local_def(param_id),\n+        default_def_id: local_def(param_id),\n         default: None,\n         object_lifetime_default: ty::ObjectLifetimeDefault::BaseDefault,\n     };\n@@ -1921,6 +1926,8 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         index: index,\n         name: param.ident.name,\n         def_id: local_def(param.id),\n+        // what do I return? should this be an option as well\n+        default_def_id: local_def(param.default.as_ref().map(|d| d.id).unwrap_or(param.id)),\n         default: default,\n         object_lifetime_default: object_lifetime_default,\n     };"}, {"sha": "c37d3747da75c280237dc2d6b925078e69555499", "filename": "src/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frust-installer?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -1 +1 @@\n-Subproject commit 8e4f8ea581502a2edc8177a040300e05ff7f91e3\n+Subproject commit c37d3747da75c280237dc2d6b925078e69555499"}, {"sha": "eba86415af4c94e4c52555415ccb86f2a51cbda2", "filename": "src/test/run-pass/default_ty_param_dependent_defaults.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3fbba797b0a68b797469f49f878307cc64c993/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault_ty_param_dependent_defaults.rs?ref=ed3fbba797b0a68b797469f49f878307cc64c993", "patch": "@@ -11,8 +11,8 @@\n \n use std::marker::PhantomData;\n \n-struct Foo<T,U=T> { data: PhantomData<(T, U)> }\n+struct Foo<T,U=T> { t: T, data: PhantomData<U> }\n \n fn main() {\n-    let foo = Foo { data: PhantomData };\n+    let foo = Foo { t: 'a', data: PhantomData };\n }"}]}