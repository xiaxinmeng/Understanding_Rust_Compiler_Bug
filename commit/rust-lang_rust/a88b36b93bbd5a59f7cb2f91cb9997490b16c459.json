{"sha": "a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OGIzNmI5M2JiZDVhNTlmN2NiMmY5MWNiOTk5NzQ5MGIxNmM0NTk=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-04T15:24:36Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2020-04-05T09:22:01Z"}, "message": "Stop importing int/float modules in libcore", "tree": {"sha": "7babb2772cd418d2bc67b0a95eae167e47771adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7babb2772cd418d2bc67b0a95eae167e47771adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "html_url": "https://github.com/rust-lang/rust/commit/a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff4f083986cb5f0430a78feb139603f0ceeb9c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fff4f083986cb5f0430a78feb139603f0ceeb9c1", "html_url": "https://github.com/rust-lang/rust/commit/fff4f083986cb5f0430a78feb139603f0ceeb9c1"}], "stats": {"total": 62, "additions": 23, "deletions": 39}, "files": [{"sha": "4e1fd8bf753cad249414eaa1d2acc32ff202c864", "filename": "src/libcore/benches/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::dragon::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n #[bench]"}, {"sha": "77ca901a90af39890588491cf122386eca0c763c", "filename": "src/libcore/benches/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -1,6 +1,5 @@\n use super::super::*;\n use core::num::flt2dec::strategy::grisu::*;\n-use std::{f64, i16};\n use test::Bencher;\n \n pub fn decode_finite<T: DecodableFloat>(v: T) -> Decoded {"}, {"sha": "275a1d062cafbb06d8c1c9186ae1d01728465918", "filename": "src/libcore/tests/fmt/num.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fnum.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -104,7 +104,6 @@ fn test_format_int() {\n \n #[test]\n fn test_format_int_exp_limits() {\n-    use core::{i128, i16, i32, i64, i8, u128, u16, u32, u64, u8};\n     assert_eq!(format!(\"{:e}\", i8::MIN), \"-1.28e2\");\n     assert_eq!(format!(\"{:e}\", i8::MAX), \"1.27e2\");\n     assert_eq!(format!(\"{:e}\", i16::MIN), \"-3.2768e4\");\n@@ -125,8 +124,6 @@ fn test_format_int_exp_limits() {\n \n #[test]\n fn test_format_int_exp_precision() {\n-    use core::{i128, i16, i32, i64, i8};\n-\n     //test that float and integer match\n     let big_int: u32 = 314_159_265;\n     assert_eq!(format!(\"{:.1e}\", big_int), format!(\"{:.1e}\", f64::from(big_int)));\n@@ -214,7 +211,6 @@ fn test_format_int_sign_padding() {\n \n #[test]\n fn test_format_int_twos_complement() {\n-    use core::{i16, i32, i64, i8};\n     assert_eq!(format!(\"{}\", i8::MIN), \"-128\");\n     assert_eq!(format!(\"{}\", i16::MIN), \"-32768\");\n     assert_eq!(format!(\"{}\", i32::MIN), \"-2147483648\");"}, {"sha": "e0954a661c8d9f401201b8be514ad1bb1612f416", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -3,8 +3,6 @@\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n-use core::usize;\n-use core::{i16, i8, isize};\n \n #[test]\n fn test_lt() {\n@@ -2251,62 +2249,58 @@ fn test_range_inclusive_folds() {\n \n #[test]\n fn test_range_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((0..0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..100usize).size_hint(), (100, Some(100)));\n-    assert_eq!((0..UMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((0..usize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((0..0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..100u128).size_hint(), (100, Some(100)));\n-    assert_eq!((0..umax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..umax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..0isize).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100isize).size_hint(), (200, Some(200)));\n-    assert_eq!((IMIN..IMAX).size_hint(), (UMAX, Some(UMAX)));\n+    assert_eq!((isize::MIN..isize::MAX).size_hint(), (usize::MAX, Some(usize::MAX)));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..0i128).size_hint(), (0, Some(0)));\n     assert_eq!((-100..100i128).size_hint(), (200, Some(200)));\n-    assert_eq!((imin..imax).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..imax).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]\n fn test_range_inclusive_size_hint() {\n-    use core::usize::MAX as UMAX;\n     assert_eq!((1..=0usize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0usize).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100usize).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=UMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=UMAX).size_hint(), (UMAX, None));\n+    assert_eq!((0..=usize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=usize::MAX).size_hint(), (usize::MAX, None));\n \n-    let umax = u128::try_from(UMAX).unwrap();\n+    let umax = u128::try_from(usize::MAX).unwrap();\n     assert_eq!((1..=0u128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0u128).size_hint(), (1, Some(1)));\n     assert_eq!((0..=100u128).size_hint(), (101, Some(101)));\n-    assert_eq!((0..=umax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((0..=umax).size_hint(), (UMAX, None));\n-    assert_eq!((0..=umax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((0..=umax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((0..=umax).size_hint(), (usize::MAX, None));\n+    assert_eq!((0..=umax + 1).size_hint(), (usize::MAX, None));\n \n-    use core::isize::{MAX as IMAX, MIN as IMIN};\n     assert_eq!((0..=-1isize).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0isize).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100isize).size_hint(), (201, Some(201)));\n-    assert_eq!((IMIN..=IMAX - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((IMIN..=IMAX).size_hint(), (UMAX, None));\n+    assert_eq!((isize::MIN..=isize::MAX - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((isize::MIN..=isize::MAX).size_hint(), (usize::MAX, None));\n \n-    let imin = i128::try_from(IMIN).unwrap();\n-    let imax = i128::try_from(IMAX).unwrap();\n+    let imin = i128::try_from(isize::MIN).unwrap();\n+    let imax = i128::try_from(isize::MAX).unwrap();\n     assert_eq!((0..=-1i128).size_hint(), (0, Some(0)));\n     assert_eq!((0..=0i128).size_hint(), (1, Some(1)));\n     assert_eq!((-100..=100i128).size_hint(), (201, Some(201)));\n-    assert_eq!((imin..=imax - 1).size_hint(), (UMAX, Some(UMAX)));\n-    assert_eq!((imin..=imax).size_hint(), (UMAX, None));\n-    assert_eq!((imin..=imax + 1).size_hint(), (UMAX, None));\n+    assert_eq!((imin..=imax - 1).size_hint(), (usize::MAX, Some(usize::MAX)));\n+    assert_eq!((imin..=imax).size_hint(), (usize::MAX, None));\n+    assert_eq!((imin..=imax + 1).size_hint(), (usize::MAX, None));\n }\n \n #[test]"}, {"sha": "1c172f49c279c726fc73a69968ec5fdf6fd1521e", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -1,7 +1,5 @@\n #![allow(overflowing_literals)]\n \n-use std::{f32, f64, i64};\n-\n mod parse;\n mod rawfp;\n "}, {"sha": "ae892e3b0bfbfb7bec345fb7d3b82c1df3c38bf0", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -1,4 +1,4 @@\n-use std::{f32, f64, fmt, i16, str};\n+use std::{fmt, str};\n \n use core::num::flt2dec::{decode, DecodableFloat, Decoded, FullDecoded};\n use core::num::flt2dec::{round_up, Formatted, Part, Sign, MAX_SIG_DIGITS};"}, {"sha": "5b050a2c3563156edc48c0af5707694428d1385b", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -1,6 +1,5 @@\n #![cfg(not(target_arch = \"wasm32\"))]\n \n-use std::i16;\n use std::str;\n \n use core::num::flt2dec::strategy::grisu::format_exact_opt;"}, {"sha": "8396a0dd62db91ad3fdb3c8f0ffcc30264d8d67a", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a88b36b93bbd5a59f7cb2f91cb9997490b16c459/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=a88b36b93bbd5a59f7cb2f91cb9997490b16c459", "patch": "@@ -2,7 +2,6 @@ macro_rules! int_module {\n     ($T:ident, $T_i:ident) => {\n         #[cfg(test)]\n         mod tests {\n-            use core::isize;\n             use core::mem;\n             use core::ops::{BitAnd, BitOr, BitXor, Not, Shl, Shr};\n             use core::$T_i::*;"}]}