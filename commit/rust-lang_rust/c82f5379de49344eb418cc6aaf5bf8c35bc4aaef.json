{"sha": "c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmY1Mzc5ZGU0OTM0NGViNDE4Y2M2YWFmNWJmOGMzNWJjNGFhZWY=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-07-10T16:30:32Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-07-12T18:12:01Z"}, "message": "Enable Chalk tracing in hir_ty tests", "tree": {"sha": "7c060a12fcdb8cbd2054e064257602374c3df0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c060a12fcdb8cbd2054e064257602374c3df0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "html_url": "https://github.com/rust-lang/rust/commit/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "209c492432c15b017f99dba06d5937389c1f9546", "url": "https://api.github.com/repos/rust-lang/rust/commits/209c492432c15b017f99dba06d5937389c1f9546", "html_url": "https://github.com/rust-lang/rust/commit/209c492432c15b017f99dba06d5937389c1f9546"}], "stats": {"total": 181, "additions": 114, "deletions": 67}, "files": [{"sha": "8085f29d79ab61dd30646d3a4cee6116cf20f291", "filename": "Cargo.lock", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -33,6 +33,15 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.12.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\n+dependencies = [\n+ \"winapi 0.3.9\",\n+]\n+\n [[package]]\n name = \"anyhow\"\n version = \"1.0.31\"\n@@ -51,6 +60,17 @@ version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cff77d8686867eceff3105329d4698d96c2391c176d5d03adc90c7389162b5b8\"\n \n+[[package]]\n+name = \"atty\"\n+version = \"0.2.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"winapi 0.3.9\",\n+]\n+\n [[package]]\n name = \"autocfg\"\n version = \"1.0.0\"\n@@ -971,6 +991,16 @@ dependencies = [\n  \"unicode-xid\",\n ]\n \n+[[package]]\n+name = \"quanta\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f4f7a1905379198075914bc93d32a5465c40474f90a078bb13439cb00c547bcc\"\n+dependencies = [\n+ \"libc\",\n+ \"winapi 0.3.9\",\n+]\n+\n [[package]]\n name = \"quote\"\n version = \"1.0.7\"\n@@ -1120,6 +1150,9 @@ dependencies = [\n  \"smallvec\",\n  \"stdx\",\n  \"test_utils\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+ \"tracing-tree\",\n ]\n \n [[package]]\n@@ -1722,6 +1755,15 @@ dependencies = [\n  \"winapi 0.3.9\",\n ]\n \n+[[package]]\n+name = \"termcolor\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bb6bfa289a4d7c5766392812c0a1f4c1ba45afa1ad47803c11e1f407d846d75f\"\n+dependencies = [\n+ \"winapi-util\",\n+]\n+\n [[package]]\n name = \"terminal_size\"\n version = \"0.1.13\"\n@@ -1856,7 +1898,7 @@ version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"c72c8cf3ec4ed69fef614d011a5ae4274537a8a8c59133558029bd731eb71659\"\n dependencies = [\n- \"ansi_term\",\n+ \"ansi_term 0.11.0\",\n  \"chrono\",\n  \"lazy_static\",\n  \"matchers\",\n@@ -1870,6 +1912,21 @@ dependencies = [\n  \"tracing-serde\",\n ]\n \n+[[package]]\n+name = \"tracing-tree\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a389731c9e6c56fef11e438e5b6afae861d5bc301c8b4bdca8d19f0e830d82\"\n+dependencies = [\n+ \"ansi_term 0.12.1\",\n+ \"atty\",\n+ \"chrono\",\n+ \"quanta\",\n+ \"termcolor\",\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\""}, {"sha": "3370230a18c5843ab4464002bb96955467f75655", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -33,3 +33,7 @@ chalk-ir = { version = \"0.15.0\" }\n [dev-dependencies]\n insta = \"0.16.0\"\n expect = { path = \"../expect\" }\n+\n+tracing = \"0.1\"\n+tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n+tracing-tree = { version = \"0.1.3\" }"}, {"sha": "27f5a60bf6edbea68ffaed2db09cbbe9e7d7e91e", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -37,6 +37,15 @@ use crate::{\n // against snapshots of the expected results using insta. Use cargo-insta to\n // update the snapshots.\n \n+fn setup_tracing() -> tracing::subscriber::DefaultGuard {\n+    use tracing_subscriber::{layer::SubscriberExt, EnvFilter, Registry};\n+    use tracing_tree::HierarchicalLayer;\n+    let filter = EnvFilter::from_env(\"CHALK_DEBUG\");\n+    let layer = HierarchicalLayer::default().with_indent_amount(2).with_writer(std::io::stderr);\n+    let subscriber = Registry::default().with(filter).with(layer);\n+    tracing::subscriber::set_default(subscriber)\n+}\n+\n fn check_types(ra_fixture: &str) {\n     check_types_impl(ra_fixture, false)\n }\n@@ -46,6 +55,7 @@ fn check_types_source_code(ra_fixture: &str) {\n }\n \n fn check_types_impl(ra_fixture: &str, display_source: bool) {\n+    let _tracing = setup_tracing();\n     let db = TestDB::with_files(ra_fixture);\n     let mut checked_one = false;\n     for (file_id, annotations) in db.extract_annotations() {\n@@ -86,6 +96,7 @@ fn infer(ra_fixture: &str) -> String {\n }\n \n fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n+    let _tracing = setup_tracing();\n     let (db, file_id) = TestDB::with_single_file(content);\n \n     let mut buf = String::new();"}, {"sha": "85bcd00504fa6a4920d56720c1525541846cb286", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 34, "deletions": 59, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -3000,69 +3000,44 @@ fn infer_box_fn_arg() {\n \n #[test]\n fn infer_dyn_fn_output() {\n-    assert_snapshot!(\n-        infer(\n-            r#\"\n-            //- /lib.rs deps:std\n-\n-            #[lang = \"fn_once\"]\n-            pub trait FnOnce<Args> {\n-                type Output;\n-\n-                extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-            }\n-\n-            #[lang = \"fn\"]\n-            pub trait Fn<Args>:FnOnce<Args> {\n-                extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-            }\n-\n-            #[lang = \"deref\"]\n-            pub trait Deref {\n-                type Target: ?Sized;\n-\n-                fn deref(&self) -> &Self::Target;\n-            }\n+    check_types(\n+        r#\"\n+//- /lib.rs\n+#[lang = \"fn_once\"]\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n \n-            #[lang = \"owned_box\"]\n-            pub struct Box<T: ?Sized> {\n-                inner: *mut T,\n-            }\n+#[lang = \"fn\"]\n+pub trait Fn<Args>: FnOnce<Args> {\n+    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n+}\n \n-            impl<T: ?Sized> Deref for Box<T> {\n-                type Target = T;\n+fn foo() {\n+    let f: &dyn Fn() -> i32;\n+    f();\n+  //^^^ i32\n+}\"#,\n+    );\n+}\n \n-                fn deref(&self) -> &T {\n-                    &self.inner\n-                }\n-            }\n+#[test]\n+fn infer_dyn_fn_once_output() {\n+    check_types(\n+        r#\"\n+//- /lib.rs\n+#[lang = \"fn_once\"]\n+pub trait FnOnce<Args> {\n+    type Output;\n+    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n+}\n \n-            fn foo() {\n-                let f: Box<dyn Fn() -> i32> = box(|| 5);\n-                let x = f();\n-            }\n-        \"#\n-        ),\n-        @r###\"\n-    100..104 'self': Self\n-    106..110 'args': Args\n-    219..223 'self': &Self\n-    225..229 'args': Args\n-    333..337 'self': &Self\n-    503..507 'self': &Box<T>\n-    515..542 '{     ...     }': &T\n-    525..536 '&self.inner': &*mut T\n-    526..530 'self': &Box<T>\n-    526..536 'self.inner': *mut T\n-    555..620 '{     ...f(); }': ()\n-    565..566 'f': Box<dyn Fn<(), Output = i32>>\n-    591..600 'box(|| 5)': Box<|| -> i32>\n-    595..599 '|| 5': || -> i32\n-    598..599 '5': i32\n-    610..611 'x': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n-    614..615 'f': Box<dyn Fn<(), Output = i32>>\n-    614..617 'f()': FnOnce::Output<dyn Fn<(), Output = i32>, ()>\n-    \"###\n+fn foo() {\n+    let f: dyn FnOnce() -> i32;\n+    f();\n+  //^^^ i32\n+}\"#,\n     );\n }\n "}, {"sha": "e944c19768190dbb4918fd16feb415cda2661703", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -3,7 +3,7 @@ use std::sync::Arc;\n \n use log::debug;\n \n-use chalk_ir::{fold::shift::Shift, GenericArg, TypeName, CanonicalVarKinds};\n+use chalk_ir::{fold::shift::Shift, CanonicalVarKinds, GenericArg, TypeName};\n use chalk_solve::rust_ir::{self, OpaqueTyDatumBound, WellKnownTrait};\n \n use hir_def::{\n@@ -377,16 +377,13 @@ pub(crate) fn struct_datum_query(\n     let variant = rust_ir::AdtVariantDatum {\n         fields: Vec::new(), // FIXME add fields (only relevant for auto traits),\n     };\n-    let struct_datum_bound = rust_ir::AdtDatumBound {\n-        variants: vec![variant],\n-        where_clauses,\n-    };\n+    let struct_datum_bound = rust_ir::AdtDatumBound { variants: vec![variant], where_clauses };\n     let struct_datum = StructDatum {\n         // FIXME set ADT kind\n         kind: rust_ir::AdtKind::Struct,\n         id: struct_id,\n         binders: make_binders(struct_datum_bound, num_params),\n-        flags\n+        flags,\n     };\n     Arc::new(struct_datum)\n }"}, {"sha": "848cb6e7dbc3dca648a43e00f0076d4f45449eef", "filename": "crates/ra_hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82f5379de49344eb418cc6aaf5bf8c35bc4aaef/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=c82f5379de49344eb418cc6aaf5bf8c35bc4aaef", "patch": "@@ -575,7 +575,10 @@ where\n                 )\n             });\n         let value = self.value.to_chalk(db);\n-        chalk_ir::Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n+        chalk_ir::Canonical {\n+            value,\n+            binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds),\n+        }\n     }\n \n     fn from_chalk(db: &dyn HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {"}]}