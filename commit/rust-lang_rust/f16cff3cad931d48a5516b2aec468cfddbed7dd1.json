{"sha": "f16cff3cad931d48a5516b2aec468cfddbed7dd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNmNmZjNjYWQ5MzFkNDhhNTUxNmIyYWVjNDY4Y2ZkZGJlZDdkZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T19:45:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T19:45:08Z"}, "message": "Merge #2393\n\n2393: Simplify ADT fields r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7daaf3dc8595dc8f431e84db6469c7fa02f6e680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7daaf3dc8595dc8f431e84db6469c7fa02f6e680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f16cff3cad931d48a5516b2aec468cfddbed7dd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2t3ECRBK7hj4Ov3rIwAAdHIIADP2g+mlDe08/CajNfnsaIax\nQ+jGpw+8IIy+CNZniS9pb/eQ33VgKmwCe+Sz0f8zi2XjgXHMi586UIJQObL1wWYk\nSO2vTtJ42yAah7BrbTlcm8wZ+xaO57Yk/gURcXjzYtBARPwDp6rjv+LIGtVh3j4t\ng/6yeuyzHigN5/H/+JSi3EMCDK84TzOrkMsT2FftfwtRZzbFA72Xlq2zCrx0HgIA\nYA4cRslnH0ejbgePypytkg18AxnATarutHn5uZkt2psXxTVY/s6rvyJ2bu7le+NP\nmLhL93ajXgu18wZmlzwTS+UJbrE0fodSaeyNTyClsVEMDVYE+MlosGui/InQ1+8=\n=uXa1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7daaf3dc8595dc8f431e84db6469c7fa02f6e680\nparent 09389ed1d43c244352cecbd78c8685480d60157d\nparent 586acef5283e78f19e5e9daf4e8aac40e2a9ff16\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574624708 +0000\ncommitter GitHub <noreply@github.com> 1574624708 +0000\n\nMerge #2393\n\n2393: Simplify ADT fields r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f16cff3cad931d48a5516b2aec468cfddbed7dd1", "html_url": "https://github.com/rust-lang/rust/commit/f16cff3cad931d48a5516b2aec468cfddbed7dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f16cff3cad931d48a5516b2aec468cfddbed7dd1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09389ed1d43c244352cecbd78c8685480d60157d", "url": "https://api.github.com/repos/rust-lang/rust/commits/09389ed1d43c244352cecbd78c8685480d60157d", "html_url": "https://github.com/rust-lang/rust/commit/09389ed1d43c244352cecbd78c8685480d60157d"}, {"sha": "586acef5283e78f19e5e9daf4e8aac40e2a9ff16", "url": "https://api.github.com/repos/rust-lang/rust/commits/586acef5283e78f19e5e9daf4e8aac40e2a9ff16", "html_url": "https://github.com/rust-lang/rust/commit/586acef5283e78f19e5e9daf4e8aac40e2a9ff16"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "984e1eec3ab576756c7c55a1eb38e5da94e05647", "filename": "crates/ra_arena/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Flib.rs?ref=f16cff3cad931d48a5516b2aec468cfddbed7dd1", "patch": "@@ -37,7 +37,7 @@ impl fmt::Display for RawId {\n }\n \n #[derive(Clone, PartialEq, Eq)]\n-pub struct Arena<ID: ArenaId, T> {\n+pub struct Arena<ID, T> {\n     data: Vec<T>,\n     _ty: PhantomData<ID>,\n }\n@@ -67,6 +67,12 @@ pub trait ArenaId {\n     fn into_raw(self) -> RawId;\n }\n \n+impl<ID, T> Arena<ID, T> {\n+    pub const fn new() -> Arena<ID, T> {\n+        Arena { data: Vec::new(), _ty: PhantomData }\n+    }\n+}\n+\n impl<ID: ArenaId, T> Arena<ID, T> {\n     pub fn len(&self) -> usize {\n         self.data.len()"}, {"sha": "ab0544a4c7a0e84e14f01252365b9c3dcf9b1d9b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f16cff3cad931d48a5516b2aec468cfddbed7dd1", "patch": "@@ -301,7 +301,7 @@ pub enum FieldSource {\n \n impl StructField {\n     pub fn name(&self, db: &impl HirDatabase) -> Name {\n-        self.parent.variant_data(db).fields().unwrap()[self.id].name.clone()\n+        self.parent.variant_data(db).fields()[self.id].name.clone()\n     }\n \n     pub fn ty(&self, db: &impl HirDatabase) -> Ty {\n@@ -335,8 +335,7 @@ impl Struct {\n         db.struct_data(self.id.into())\n             .variant_data\n             .fields()\n-            .into_iter()\n-            .flat_map(|it| it.iter())\n+            .iter()\n             .map(|(id, _)| StructField { parent: self.into(), id })\n             .collect()\n     }\n@@ -345,8 +344,7 @@ impl Struct {\n         db.struct_data(self.id.into())\n             .variant_data\n             .fields()\n-            .into_iter()\n-            .flat_map(|it| it.iter())\n+            .iter()\n             .find(|(_id, data)| data.name == *name)\n             .map(|(id, _)| StructField { parent: self.into(), id })\n     }\n@@ -443,17 +441,15 @@ impl EnumVariant {\n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n         self.variant_data(db)\n             .fields()\n-            .into_iter()\n-            .flat_map(|it| it.iter())\n+            .iter()\n             .map(|(id, _)| StructField { parent: self.into(), id })\n             .collect()\n     }\n \n     pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         self.variant_data(db)\n             .fields()\n-            .into_iter()\n-            .flat_map(|it| it.iter())\n+            .iter()\n             .find(|(_id, data)| data.name == *name)\n             .map(|(id, _)| StructField { parent: self.into(), id })\n     }"}, {"sha": "1e7c22774d1cd55f8c6b3e82b0c83015eadc98c6", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f16cff3cad931d48a5516b2aec468cfddbed7dd1", "patch": "@@ -200,8 +200,7 @@ impl FromSource for StructField {\n         variant_def\n             .variant_data(db)\n             .fields()\n-            .into_iter()\n-            .flat_map(|it| it.iter())\n+            .iter()\n             .map(|(id, _)| StructField { parent: variant_def, id })\n             .find(|f| f.source(db) == src)\n     }"}, {"sha": "2b40cb07db1c5171375fbf6156489fed5bd928d2", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=f16cff3cad931d48a5516b2aec468cfddbed7dd1", "patch": "@@ -557,7 +557,7 @@ pub(crate) fn type_for_field(db: &impl HirDatabase, field: StructField) -> Ty {\n         VariantDef::EnumVariant(it) => it.parent.id.resolver(db),\n     };\n     let var_data = parent_def.variant_data(db);\n-    let type_ref = &var_data.fields().unwrap()[field.id].type_ref;\n+    let type_ref = &var_data.fields()[field.id].type_ref;\n     Ty::from_hir(db, &resolver, type_ref)\n }\n \n@@ -696,10 +696,7 @@ impl From<Option<BuiltinFloat>> for Uncertain<FloatTy> {\n \n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n     let struct_data = db.struct_data(def.id.into());\n-    let fields = match struct_data.variant_data.fields() {\n-        Some(fields) => fields,\n-        None => panic!(\"fn_sig_for_struct_constructor called on unit struct\"),\n-    };\n+    let fields = struct_data.variant_data.fields();\n     let resolver = def.id.resolver(db);\n     let params = fields\n         .iter()\n@@ -712,7 +709,7 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> FnSig {\n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n     let struct_data = db.struct_data(def.id.into());\n-    if struct_data.variant_data.fields().is_none() {\n+    if struct_data.variant_data.is_unit() {\n         return type_for_adt(db, def); // Unit struct\n     }\n     let generics = db.generic_params(def.id.into());\n@@ -722,10 +719,7 @@ fn type_for_struct_constructor(db: &impl HirDatabase, def: Struct) -> Ty {\n \n fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> FnSig {\n     let var_data = def.variant_data(db);\n-    let fields = match var_data.fields() {\n-        Some(fields) => fields,\n-        None => panic!(\"fn_sig_for_enum_variant_constructor called for unit variant\"),\n-    };\n+    let fields = var_data.fields();\n     let resolver = def.parent.id.resolver(db);\n     let params = fields\n         .iter()\n@@ -740,7 +734,7 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant)\n /// Build the type of a tuple enum variant constructor.\n fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariant) -> Ty {\n     let var_data = def.variant_data(db);\n-    if var_data.fields().is_none() {\n+    if var_data.is_unit() {\n         return type_for_adt(db, def.parent_enum(db)); // Unit variant\n     }\n     let generics = db.generic_params(def.parent_enum(db).id.into());"}, {"sha": "c9f30923ee69701a0d631d4ec43d35c9c90aa091", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cff3cad931d48a5516b2aec468cfddbed7dd1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=f16cff3cad931d48a5516b2aec468cfddbed7dd1", "patch": "@@ -109,10 +109,18 @@ impl VariantData {\n         }\n     }\n \n-    pub fn fields(&self) -> Option<&Arena<LocalStructFieldId, StructFieldData>> {\n+    pub fn fields(&self) -> &Arena<LocalStructFieldId, StructFieldData> {\n+        const EMPTY: &Arena<LocalStructFieldId, StructFieldData> = &Arena::new();\n         match &self {\n-            VariantData::Record(fields) | VariantData::Tuple(fields) => Some(fields),\n-            _ => None,\n+            VariantData::Record(fields) | VariantData::Tuple(fields) => fields,\n+            _ => EMPTY,\n+        }\n+    }\n+\n+    pub fn is_unit(&self) -> bool {\n+        match self {\n+            VariantData::Unit => true,\n+            _ => false,\n         }\n     }\n }"}]}