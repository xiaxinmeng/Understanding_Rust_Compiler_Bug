{"sha": "6a3f819f795d656f36a2967647a83438f8fb58c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhM2Y4MTlmNzk1ZDY1NmYzNmEyOTY3NjQ3YTgzNDM4ZjhmYjU4YzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T20:40:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-16T20:40:48Z"}, "message": "move smol_str to a separare repo", "tree": {"sha": "24cda2f8a5d7263b3df739f4f22ee24d323c84d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24cda2f8a5d7263b3df739f4f22ee24d323c84d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a3f819f795d656f36a2967647a83438f8fb58c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f819f795d656f36a2967647a83438f8fb58c4", "html_url": "https://github.com/rust-lang/rust/commit/6a3f819f795d656f36a2967647a83438f8fb58c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a3f819f795d656f36a2967647a83438f8fb58c4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a43a159d03a91d8cce07003d427df4f3d6966d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a43a159d03a91d8cce07003d427df4f3d6966d", "html_url": "https://github.com/rust-lang/rust/commit/e0a43a159d03a91d8cce07003d427df4f3d6966d"}], "stats": {"total": 178, "additions": 2, "deletions": 176}, "files": [{"sha": "502f532a77d2492203b0c9ec9da82d65db578014", "filename": "crates/libeditor/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f819f795d656f36a2967647a83438f8fb58c4/crates%2Flibeditor%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f819f795d656f36a2967647a83438f8fb58c4/crates%2Flibeditor%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2FCargo.toml?ref=6a3f819f795d656f36a2967647a83438f8fb58c4", "patch": "@@ -9,5 +9,5 @@ itertools = \"0.7.8\"\n superslice = \"0.1.0\"\n \n libsyntax2 = { path = \"../libsyntax2\" }\n-smol_str = { path = \"../smol_str\" }\n+smol_str = \"0.1.0\"\n assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "78e9e18a2e7a4ddebf8beda05cd5f446da883d94", "filename": "crates/libsyntax2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a3f819f795d656f36a2967647a83438f8fb58c4/crates%2Flibsyntax2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6a3f819f795d656f36a2967647a83438f8fb58c4/crates%2Flibsyntax2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2FCargo.toml?ref=6a3f819f795d656f36a2967647a83438f8fb58c4", "patch": "@@ -10,7 +10,7 @@ text_unit = \"0.1.2\"\n itertools = \"0.7.5\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\"\n-smol_str = { path = \"../smol_str\" }\n+smol_str = \"0.1.0\"\n \n [dev-dependencies]\n assert_eq_text = { path = \"../assert_eq_text\" }"}, {"sha": "83ca12f62f4f85c76231b87d91acc2ce6614c3e6", "filename": "crates/smol_str/Cargo.toml", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fsmol_str%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fsmol_str%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsmol_str%2FCargo.toml?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -1,6 +0,0 @@\n-[package]\n-name = \"smol_str\"\n-version = \"0.1.0\"\n-authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n-\n-[dependencies]"}, {"sha": "79b179ef46fd0b67abdbef87173c8d945dcbcb23", "filename": "crates/smol_str/src/lib.rs", "status": "removed", "additions": 0, "deletions": 168, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fsmol_str%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0a43a159d03a91d8cce07003d427df4f3d6966d/crates%2Fsmol_str%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsmol_str%2Fsrc%2Flib.rs?ref=e0a43a159d03a91d8cce07003d427df4f3d6966d", "patch": "@@ -1,168 +0,0 @@\n-use std::{sync::Arc, ops::Deref, fmt};\n-\n-#[derive(Clone)]\n-pub struct SmolStr(Repr);\n-\n-impl SmolStr {\n-    pub fn new(text: &str) -> SmolStr {\n-        SmolStr(Repr::new(text))\n-    }\n-\n-    pub fn as_str(&self) -> &str {\n-        self.0.as_str()\n-    }\n-\n-    pub fn to_string(&self) -> String {\n-        self.as_str().to_string()\n-    }\n-}\n-\n-impl Deref for SmolStr {\n-    type Target = str;\n-\n-    fn deref(&self) -> &str {\n-        self.as_str()\n-    }\n-}\n-\n-impl PartialEq<str> for SmolStr {\n-    fn eq(&self, other: &str) -> bool {\n-        self.as_str() == other\n-    }\n-}\n-\n-impl PartialEq<SmolStr> for str {\n-    fn eq(&self, other: &SmolStr) -> bool {\n-        other == self\n-    }\n-}\n-\n-impl<'a> PartialEq<&'a str> for SmolStr {\n-    fn eq(&self, other: &&'a str) -> bool {\n-        self == *other\n-    }\n-}\n-\n-impl<'a> PartialEq<SmolStr> for &'a str {\n-    fn eq(&self, other: &SmolStr) -> bool {\n-        *self == other\n-    }\n-}\n-\n-impl PartialEq<String> for SmolStr {\n-    fn eq(&self, other: &String) -> bool {\n-        self.as_str() == other\n-    }\n-}\n-\n-impl PartialEq<SmolStr> for String {\n-    fn eq(&self, other: &SmolStr) -> bool {\n-        other == self\n-    }\n-}\n-\n-impl<'a> PartialEq<&'a String> for SmolStr {\n-    fn eq(&self, other: &&'a String) -> bool {\n-        self == *other\n-    }\n-}\n-\n-impl<'a> PartialEq<SmolStr> for &'a String {\n-    fn eq(&self, other: &SmolStr) -> bool {\n-        *self == other\n-    }\n-}\n-\n-impl fmt::Debug for SmolStr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(self.as_str(), f)\n-    }\n-}\n-\n-impl fmt::Display for SmolStr {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(self.as_str(), f)\n-    }\n-}\n-\n-const INLINE_CAP: usize = 22;\n-const WS_TAG: u8 = (INLINE_CAP + 1) as u8;\n-\n-#[derive(Clone, Debug)]\n-enum Repr {\n-    Heap(Arc<str>),\n-    Inline {\n-        len: u8,\n-        buf: [u8; INLINE_CAP],\n-    },\n-}\n-\n-impl Repr {\n-    fn new(text: &str) -> Repr {\n-        let len = text.len();\n-        if len <= INLINE_CAP {\n-            let mut buf = [0; INLINE_CAP];\n-            buf[..len].copy_from_slice(text.as_bytes());\n-            return Repr::Inline { len: len as u8, buf };\n-        }\n-\n-        let newlines = text.bytes().take_while(|&b| b == b'\\n').count();\n-        let spaces = text[newlines..].bytes().take_while(|&b| b == b' ').count();\n-        if newlines + spaces == len && newlines <= N_NEWLINES && spaces <= N_SPACES {\n-            let mut buf = [0; INLINE_CAP];\n-            buf[0] = newlines as u8;\n-            buf[1] = spaces as u8;\n-            return Repr::Inline { len: WS_TAG, buf };\n-        }\n-\n-        Repr::Heap(\n-            text.to_string().into_boxed_str().into()\n-        )\n-    }\n-\n-    fn as_str(&self) -> &str {\n-        match self {\n-            Repr::Heap(data) => &*data,\n-            Repr::Inline { len, buf } => {\n-                if *len == WS_TAG {\n-                    let newlines = buf[0] as usize;\n-                    let spaces = buf[1] as usize;\n-                    assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n-                    return &WS[N_NEWLINES - newlines..N_NEWLINES + spaces];\n-                }\n-\n-                let len = *len as usize;\n-                let buf = &buf[..len];\n-                unsafe { ::std::str::from_utf8_unchecked(buf) }\n-            }\n-        }\n-    }\n-}\n-\n-const N_NEWLINES: usize = 32;\n-const N_SPACES: usize = 128;\n-const WS: &str =\n-    \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n                                                                                                                                \";\n-\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    #[test]\n-    #[cfg(target_pointer_width = \"64\")]\n-    fn smol_str_is_smol() {\n-        assert_eq!(::std::mem::size_of::<SmolStr>(), 8 + 8 + 8)\n-    }\n-\n-    #[test]\n-    fn test_round_trip() {\n-        let mut text = String::new();\n-        for n in 0..256 {\n-            let smol = SmolStr::new(&text);\n-            assert_eq!(smol.as_str(), text.as_str());\n-            text.push_str(&n.to_string());\n-        }\n-    }\n-}\n-"}]}