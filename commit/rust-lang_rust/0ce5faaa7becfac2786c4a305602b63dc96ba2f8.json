{"sha": "0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTVmYWFhN2JlY2ZhYzI3ODZjNGEzMDU2MDJiNjNkYzk2YmEyZjg=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-17T23:41:16Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-12-19T07:35:52Z"}, "message": "Delete rest of rustrt\n\n... and address other rebasing fallout.", "tree": {"sha": "ef5344dee2edef576472af0303d21f0a61fa9a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef5344dee2edef576472af0303d21f0a61fa9a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "html_url": "https://github.com/rust-lang/rust/commit/0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce5faaa7becfac2786c4a305602b63dc96ba2f8/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08600b189eeb2e61879b44a07f9fdc33fa82689", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08600b189eeb2e61879b44a07f9fdc33fa82689", "html_url": "https://github.com/rust-lang/rust/commit/d08600b189eeb2e61879b44a07f9fdc33fa82689"}], "stats": {"total": 135, "additions": 2, "deletions": 133}, "files": [{"sha": "02ca7d3ce6d45a412f7850149c17dbabb8ac44d4", "filename": "src/librustrt/lib.rs", "status": "removed", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08600b189eeb2e61879b44a07f9fdc33fa82689/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=d08600b189eeb2e61879b44a07f9fdc33fa82689", "patch": "@@ -1,132 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name = \"rustrt\"]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n-\n-#![allow(unknown_features)]\n-#![feature(macro_rules, phase, globs, thread_local, asm)]\n-#![feature(linkage, lang_items, unsafe_destructor, default_type_params)]\n-#![feature(import_shadowing, slicing_syntax)]\n-#![feature(unboxed_closures)]\n-#![no_std]\n-#![experimental]\n-\n-#[phase(plugin, link)] extern crate core;\n-extern crate alloc;\n-extern crate libc;\n-extern crate collections;\n-\n-#[cfg(test)] extern crate \"rustrt\" as realrustrt;\n-#[cfg(test)] extern crate test;\n-\n-#[cfg(test)] #[phase(plugin, link)] extern crate std;\n-\n-pub use self::util::{Stdio, Stdout, Stderr};\n-pub use self::unwind::{begin_unwind, begin_unwind_fmt};\n-\n-use core::prelude::*;\n-\n-mod macros;\n-\n-mod at_exit_imp;\n-mod local_ptr;\n-mod thread_local_storage;\n-mod util;\n-mod libunwind;\n-mod stack_overflow;\n-pub mod thunk;\n-\n-pub mod args;\n-pub mod bookkeeping;\n-pub mod c_str;\n-pub mod exclusive;\n-pub mod local;\n-pub mod mutex;\n-pub mod stack;\n-pub mod task;\n-pub mod thread;\n-pub mod unwind;\n-\n-/// The default error code of the rust runtime if the main task panics instead\n-/// of exiting cleanly.\n-pub const DEFAULT_ERROR_CODE: int = 101;\n-\n-/// One-time runtime initialization.\n-///\n-/// Initializes global state, including frobbing the crate's logging flags,\n-/// and storing the process arguments.\n-pub fn init(argc: int, argv: *const *const u8) {\n-    // FIXME: Derefing these pointers is not safe.\n-    // Need to propagate the unsafety to `start`.\n-    unsafe {\n-        args::init(argc, argv);\n-        local_ptr::init();\n-        at_exit_imp::init();\n-        thread::init();\n-    }\n-\n-    // FIXME(#14344) this shouldn't be necessary\n-    collections::fixme_14344_be_sure_to_link_to_collections();\n-    alloc::fixme_14344_be_sure_to_link_to_collections();\n-    libc::issue_14344_workaround();\n-}\n-\n-/// Enqueues a procedure to run when the runtime is cleaned up\n-///\n-/// The procedure passed to this function will be executed as part of the\n-/// runtime cleanup phase. For normal rust programs, this means that it will run\n-/// after all other tasks have exited.\n-///\n-/// The procedure is *not* executed with a local `Task` available to it, so\n-/// primitives like logging, I/O, channels, spawning, etc, are *not* available.\n-/// This is meant for \"bare bones\" usage to clean up runtime details, this is\n-/// not meant as a general-purpose \"let's clean everything up\" function.\n-///\n-/// It is forbidden for procedures to register more `at_exit` handlers when they\n-/// are running, and doing so will lead to a process abort.\n-pub fn at_exit<F:FnOnce()+Send>(f: F) {\n-    at_exit_imp::push(thunk::Thunk::new(f));\n-}\n-\n-/// One-time runtime cleanup.\n-///\n-/// This function is unsafe because it performs no checks to ensure that the\n-/// runtime has completely ceased running. It is the responsibility of the\n-/// caller to ensure that the runtime is entirely shut down and nothing will be\n-/// poking around at the internal components.\n-///\n-/// Invoking cleanup while portions of the runtime are still in use may cause\n-/// undefined behavior.\n-pub unsafe fn cleanup() {\n-    bookkeeping::wait_for_other_tasks();\n-    at_exit_imp::run();\n-    args::cleanup();\n-    thread::cleanup();\n-    local_ptr::cleanup();\n-}\n-\n-// FIXME: these probably shouldn't be public...\n-#[doc(hidden)]\n-pub mod shouldnt_be_public {\n-    #[cfg(not(test))]\n-    pub use super::local_ptr::native::maybe_tls_key;\n-    #[cfg(all(not(windows), not(target_os = \"android\"), not(target_os = \"ios\")))]\n-    pub use super::local_ptr::compiled::RT_TLS_PTR;\n-}\n-\n-#[cfg(not(test))]\n-mod std {\n-    pub use core::{fmt, option, cmp, kinds};\n-}"}, {"sha": "8f945fec4d5625b766e8bdfdf9f06dd57224613b", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5faaa7becfac2786c4a305602b63dc96ba2f8/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5faaa7becfac2786c4a305602b63dc96ba2f8/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "patch": "@@ -1516,7 +1516,7 @@ mod test {\n \n         // wait for the child task to exit before we exit\n         rx2.recv();\n-    })\n+    }}\n }\n \n #[cfg(test)]"}, {"sha": "aa50597c816980d0e56fc64e6c321f310452edc3", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ce5faaa7becfac2786c4a305602b63dc96ba2f8/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce5faaa7becfac2786c4a305602b63dc96ba2f8/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=0ce5faaa7becfac2786c4a305602b63dc96ba2f8", "patch": "@@ -41,6 +41,7 @@ use option::Option;\n use option::Option::{Some, None};\n use ops::{Deref, DerefMut, FnOnce};\n use result::Result::{Ok, Err};\n+use rt;\n use slice::SliceExt;\n use str::StrPrelude;\n use string::String;"}]}