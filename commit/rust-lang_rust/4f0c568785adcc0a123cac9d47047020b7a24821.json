{"sha": "4f0c568785adcc0a123cac9d47047020b7a24821", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMGM1Njg3ODVhZGNjMGExMjNjYWM5ZDQ3MDQ3MDIwYjdhMjQ4MjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T15:18:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-14T15:18:27Z"}, "message": "Auto merge of #87082 - michaelwoerister:const-in-debuginfo-type-names-fix, r=oli-obk,wesleywiser\n\nHandle non-integer const generic parameters in debuginfo type names.\n\nThis PR fixes an ICE introduced by https://github.com/rust-lang/rust/pull/85269 which started emitting const generic arguments for debuginfo names but did not cover the case where such an argument could not be evaluated to a flat string of bits.\n\nThe fix implemented in this PR is very basic: If `try_eval_bits()` fails for the constant in question, we fall back to generating a stable hash of the constant and emit that instead. This way we get a (virtually) unique name and side step the problem of generating a string representation of a potentially complex value.\n\nThe downside is that the generated name will be rather opaque. E.g. the regression test adds a function `const_generic_fn_non_int<()>` which is then rendered as `const_generic_fn_non_int<{CONST#fe3cfa0214ac55c7}>`. I think it's an open question how to deal with this more gracefully.\n\nI'd be interested in ideas on how to do this better.\n\nr? `@wesleywiser`\n\ncc `@dpaoliello` (do you see any problems with this approach?)\ncc `@Mark-Simulacrum` & `@nagisa` (who I've seen comment on debuginfo issues recently -- anyone else?)\n\nFixes https://github.com/rust-lang/rust/issues/86893", "tree": {"sha": "7704ab1d6b9254cc08fae581401373279aaa1548", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7704ab1d6b9254cc08fae581401373279aaa1548"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f0c568785adcc0a123cac9d47047020b7a24821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c568785adcc0a123cac9d47047020b7a24821", "html_url": "https://github.com/rust-lang/rust/commit/4f0c568785adcc0a123cac9d47047020b7a24821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c568785adcc0a123cac9d47047020b7a24821/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5ed4a88d6a869cdb152829ed697d6459650db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5ed4a88d6a869cdb152829ed697d6459650db3", "html_url": "https://github.com/rust-lang/rust/commit/ee5ed4a88d6a869cdb152829ed697d6459650db3"}, {"sha": "28343be42fc699c080968c76061fc2da781b30b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28343be42fc699c080968c76061fc2da781b30b9", "html_url": "https://github.com/rust-lang/rust/commit/28343be42fc699c080968c76061fc2da781b30b9"}], "stats": {"total": 111, "additions": 91, "deletions": 20}, "files": [{"sha": "25268d9a5552f2aaff924dd359a730ba9dfb0f25", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4f0c568785adcc0a123cac9d47047020b7a24821/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0c568785adcc0a123cac9d47047020b7a24821/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=4f0c568785adcc0a123cac9d47047020b7a24821", "patch": "@@ -12,12 +12,15 @@\n // * `\"` is treated as the start of a string.\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_middle::ich::NodeIdHashingMode;\n+use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n-use rustc_target::abi::{TagEncoding, Variants};\n+use rustc_target::abi::{Integer, TagEncoding, Variants};\n \n use std::fmt::Write;\n \n@@ -47,7 +50,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n ) {\n     // When targeting MSVC, emit C++ style type names for compatibility with\n     // .natvis visualizers (and perhaps other existing native debuggers?)\n-    let cpp_like_names = tcx.sess.target.is_like_msvc;\n+    let cpp_like_names = cpp_like_names(tcx);\n \n     match *t.kind() {\n         ty::Bool => output.push_str(\"bool\"),\n@@ -424,16 +427,14 @@ fn push_unqualified_item_name(\n     disambiguated_data: DisambiguatedDefPathData,\n     output: &mut String,\n ) {\n-    let cpp_like_names = tcx.sess.target.is_like_msvc;\n-\n     match disambiguated_data.data {\n         DefPathData::CrateRoot => {\n             output.push_str(&tcx.crate_name(def_id.krate).as_str());\n         }\n         DefPathData::ClosureExpr if tcx.generator_kind(def_id).is_some() => {\n             // Generators look like closures, but we want to treat them differently\n             // in the debug info.\n-            if cpp_like_names {\n+            if cpp_like_names(tcx) {\n                 write!(output, \"generator${}\", disambiguated_data.disambiguator).unwrap();\n             } else {\n                 write!(output, \"{{generator#{}}}\", disambiguated_data.disambiguator).unwrap();\n@@ -444,7 +445,7 @@ fn push_unqualified_item_name(\n                 output.push_str(&name.as_str());\n             }\n             DefPathDataName::Anon { namespace } => {\n-                if cpp_like_names {\n+                if cpp_like_names(tcx) {\n                     write!(output, \"{}${}\", namespace, disambiguated_data.disambiguator).unwrap();\n                 } else {\n                     write!(output, \"{{{}#{}}}\", namespace, disambiguated_data.disambiguator)\n@@ -478,19 +479,14 @@ fn push_generic_params_internal<'tcx>(\n         match type_parameter {\n             GenericArgKind::Type(type_parameter) => {\n                 push_debuginfo_type_name(tcx, type_parameter, true, output, visited);\n-                output.push_str(\", \");\n-            }\n-            GenericArgKind::Const(const_parameter) => match const_parameter.val {\n-                ty::ConstKind::Param(param) => write!(output, \"{}, \", param.name).unwrap(),\n-                _ => write!(\n-                    output,\n-                    \"0x{:x}, \",\n-                    const_parameter.eval_bits(tcx, ty::ParamEnv::reveal_all(), const_parameter.ty)\n-                )\n-                .unwrap(),\n-            },\n+            }\n+            GenericArgKind::Const(ct) => {\n+                push_const_param(tcx, ct, output);\n+            }\n             other => bug!(\"Unexpected non-erasable generic: {:?}\", other),\n         }\n+\n+        output.push_str(\", \");\n     }\n \n     output.pop();\n@@ -499,6 +495,51 @@ fn push_generic_params_internal<'tcx>(\n     push_close_angle_bracket(tcx, output);\n }\n \n+fn push_const_param<'tcx>(tcx: TyCtxt<'tcx>, ct: &'tcx ty::Const<'tcx>, output: &mut String) {\n+    match ct.val {\n+        ty::ConstKind::Param(param) => {\n+            write!(output, \"{}\", param.name)\n+        }\n+        _ => match ct.ty.kind() {\n+            ty::Int(ity) => {\n+                let bits = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+                let val = Integer::from_int_ty(&tcx, *ity).size().sign_extend(bits) as i128;\n+                write!(output, \"{}\", val)\n+            }\n+            ty::Uint(_) => {\n+                let val = ct.eval_bits(tcx, ty::ParamEnv::reveal_all(), ct.ty);\n+                write!(output, \"{}\", val)\n+            }\n+            ty::Bool => {\n+                let val = ct.try_eval_bool(tcx, ty::ParamEnv::reveal_all()).unwrap();\n+                write!(output, \"{}\", val)\n+            }\n+            _ => {\n+                // If we cannot evaluate the constant to a known type, we fall back\n+                // to emitting a stable hash value of the constant. This isn't very pretty\n+                // but we get a deterministic, virtually unique value for the constant.\n+                let hcx = &mut tcx.create_stable_hashing_context();\n+                let mut hasher = StableHasher::new();\n+                hcx.while_hashing_spans(false, |hcx| {\n+                    hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n+                        ct.val.hash_stable(hcx, &mut hasher);\n+                    });\n+                });\n+                // Let's only emit 64 bits of the hash value. That should be plenty for\n+                // avoiding collisions and will make the emitted type names shorter.\n+                let hash: u64 = hasher.finish();\n+\n+                if cpp_like_names(tcx) {\n+                    write!(output, \"CONST${:x}\", hash)\n+                } else {\n+                    write!(output, \"{{CONST#{:x}}}\", hash)\n+                }\n+            }\n+        },\n+    }\n+    .unwrap();\n+}\n+\n pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, output: &mut String) {\n     let mut visited = FxHashSet::default();\n     push_generic_params_internal(tcx, substs, output, &mut visited);\n@@ -507,9 +548,13 @@ pub fn push_generic_params<'tcx>(tcx: TyCtxt<'tcx>, substs: SubstsRef<'tcx>, out\n fn push_close_angle_bracket<'tcx>(tcx: TyCtxt<'tcx>, output: &mut String) {\n     // MSVC debugger always treats `>>` as a shift, even when parsing templates,\n     // so add a space to avoid confusion.\n-    if tcx.sess.target.is_like_msvc && output.ends_with('>') {\n+    if cpp_like_names(tcx) && output.ends_with('>') {\n         output.push(' ')\n     };\n \n     output.push('>');\n }\n+\n+fn cpp_like_names(tcx: TyCtxt<'_>) -> bool {\n+    tcx.sess.target.is_like_msvc\n+}"}, {"sha": "20a49f0bd26ebc1344b29d7238f6388feee66548", "filename": "src/test/debuginfo/function-names.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4f0c568785adcc0a123cac9d47047020b7a24821/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f0c568785adcc0a123cac9d47047020b7a24821/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-names.rs?ref=4f0c568785adcc0a123cac9d47047020b7a24821", "patch": "@@ -33,6 +33,13 @@\n // Generator\n // Generators don't seem to appear in GDB's symbol table.\n \n+// Const generic parameter\n+// gdb-command:info functions -q function_names::const_generic_fn.*\n+// gdb-check:[...]static fn function_names::const_generic_fn_bool();\n+// gdb-check:[...]static fn function_names::const_generic_fn_non_int();\n+// gdb-check:[...]static fn function_names::const_generic_fn_signed_int();\n+// gdb-check:[...]static fn function_names::const_generic_fn_unsigned_int();\n+\n // === CDB TESTS ===================================================================================\n \n // Top-level function\n@@ -49,9 +56,9 @@\n \n // Trait implementations\n // cdb-command:x a!function_names::*::trait_function*\n-// cdb-check:[...] a!function_names::impl$6::trait_function<i32, 0x1> (void)\n // cdb-check:[...] a!function_names::impl$3::trait_function<i32> (void)\n // cdb-check:[...] a!function_names::impl$1::trait_function (void)\n+// cdb-check:[...] a!function_names::impl$6::trait_function<i32, 1> (void)\n // cdb-check:[...] a!function_names::impl$5::trait_function3<function_names::TestStruct1> (void)\n // cdb-check:[...] a!function_names::Mod1::impl$1::trait_function (void)\n \n@@ -65,10 +72,18 @@\n // cdb-command:x a!function_names::*::generator*\n // cdb-check:[...] a!function_names::main::generator$1 (void)\n \n+// Const generic parameter\n+// cdb-command:x a!function_names::const_generic_fn*\n+// cdb-check:[...] a!function_names::const_generic_fn_bool<false> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_non_int<CONST$fe3cfa0214ac55c7> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_unsigned_int<14> (void)\n+// cdb-check:[...] a!function_names::const_generic_fn_signed_int<-7> (void)\n+\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n-#![feature(generators, generator_trait)]\n+#![feature(const_generics, generators, generator_trait)]\n+#![allow(incomplete_features)] // for const_generics\n \n use Mod1::TestTrait2;\n use std::ops::Generator;\n@@ -97,6 +112,12 @@ fn main() {\n     // Generator\n     let mut generator = || { yield; return; };\n     Pin::new(&mut generator).resume(());\n+\n+    // Const generic functions\n+    const_generic_fn_bool::<false>();\n+    const_generic_fn_non_int::<{()}>();\n+    const_generic_fn_signed_int::<-7>();\n+    const_generic_fn_unsigned_int::<14>();\n }\n \n struct TestStruct1;\n@@ -173,3 +194,8 @@ fn generic_func<T>(value: T) -> T {\n \n     value\n }\n+\n+fn const_generic_fn_bool<const C: bool>() {}\n+fn const_generic_fn_non_int<const C: ()>() {}\n+fn const_generic_fn_signed_int<const C: i64>() {}\n+fn const_generic_fn_unsigned_int<const C: u32>() {}"}]}