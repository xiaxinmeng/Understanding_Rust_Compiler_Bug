{"sha": "9f8d2205f0518389993a9b5de6646ba8b14e5a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOGQyMjA1ZjA1MTgzODk5OTNhOWI1ZGU2NjQ2YmE4YjE0ZTVhMTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-17T06:31:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-17T06:31:28Z"}, "message": "auto merge of #14945 : alexcrichton/rust/issue-14940, r=brson\n\nThis just takes a similar approach to reading stdin on windows by artificially\r\nlimiting the size of the buffers going in and out.\r\n\r\nCloses #14940", "tree": {"sha": "21b8bdf4d9c534cda7d41ad72e177f2d695127d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b8bdf4d9c534cda7d41ad72e177f2d695127d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8d2205f0518389993a9b5de6646ba8b14e5a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8d2205f0518389993a9b5de6646ba8b14e5a12", "html_url": "https://github.com/rust-lang/rust/commit/9f8d2205f0518389993a9b5de6646ba8b14e5a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8d2205f0518389993a9b5de6646ba8b14e5a12/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fca994389554a0808ece09e3adca2e562cacea", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fca994389554a0808ece09e3adca2e562cacea", "html_url": "https://github.com/rust-lang/rust/commit/79fca994389554a0808ece09e3adca2e562cacea"}, {"sha": "d400563e179b9836304d55f1eaee9ce33f54fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d400563e179b9836304d55f1eaee9ce33f54fb7f", "html_url": "https://github.com/rust-lang/rust/commit/d400563e179b9836304d55f1eaee9ce33f54fb7f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "c989dcc3d2945eb21577a44c1c0b581e809f0d47", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f8d2205f0518389993a9b5de6646ba8b14e5a12/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8d2205f0518389993a9b5de6646ba8b14e5a12/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=9f8d2205f0518389993a9b5de6646ba8b14e5a12", "patch": "@@ -31,6 +31,7 @@ use failure::local_stderr;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n+use iter::Iterator;\n use kinds::Send;\n use libc;\n use option::{Option, Some, None};\n@@ -40,7 +41,9 @@ use rt;\n use rt::local::Local;\n use rt::task::Task;\n use rt::rtio::{DontClose, IoFactory, LocalIo, RtioFileStream, RtioTTY};\n+use slice::ImmutableVector;\n use str::StrSlice;\n+use uint;\n \n // And so begins the tale of acquiring a uv handle to a stdio stream on all\n // platforms in all situations. Our story begins by splitting the world into two\n@@ -355,10 +358,18 @@ impl StdWriter {\n \n impl Writer for StdWriter {\n     fn write(&mut self, buf: &[u8]) -> IoResult<()> {\n-        match self.inner {\n-            TTY(ref mut tty) => tty.write(buf),\n-            File(ref mut file) => file.write(buf),\n-        }.map_err(IoError::from_rtio_error)\n+        // As with stdin on windows, stdout often can't handle writes of large\n+        // sizes. For an example, see #14940. For this reason, chunk the output\n+        // buffer on windows, but on unix we can just write the whole buffer all\n+        // at once.\n+        let max_size = if cfg!(windows) {64 * 1024} else {uint::MAX};\n+        for chunk in buf.chunks(max_size) {\n+            try!(match self.inner {\n+                TTY(ref mut tty) => tty.write(chunk),\n+                File(ref mut file) => file.write(chunk),\n+            }.map_err(IoError::from_rtio_error))\n+        }\n+        Ok(())\n     }\n }\n "}, {"sha": "e0a63331e9717722595aa1c42a0c87bd251501ac", "filename": "src/test/run-pass/issue-14940.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f8d2205f0518389993a9b5de6646ba8b14e5a12/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8d2205f0518389993a9b5de6646ba8b14e5a12/src%2Ftest%2Frun-pass%2Fissue-14940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14940.rs?ref=9f8d2205f0518389993a9b5de6646ba8b14e5a12", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::os;\n+use std::io::{stdio, Command};\n+\n+fn main() {\n+    let args = os::args();\n+    if args.len() > 1 {\n+        let mut out = stdio::stdout();\n+        out.write(['a' as u8, ..128 * 1024]).unwrap();\n+    } else {\n+        let out = Command::new(args.get(0).as_slice()).arg(\"child\").output();\n+        let out = out.unwrap();\n+        assert!(out.status.success());\n+    }\n+}"}]}