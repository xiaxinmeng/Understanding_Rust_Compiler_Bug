{"sha": "46423006839c1594422e7dade08687a2942f6f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2NDIzMDA2ODM5YzE1OTQ0MjJlN2RhZGUwODY4N2EyOTQyZjZmNjk=", "commit": {"author": {"name": "Jesse Ruderman", "email": "jruderman@gmail.com", "date": "2011-07-29T04:18:07Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-29T08:39:15Z"}, "message": "Make the fuzzer check for obvious errors in the 'rest of the compiler', not just the parser. (Disabled by default because it's slow and messy.)", "tree": {"sha": "aefa5d8ca39c3f12ddd0c154504b9399c2b3aa66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aefa5d8ca39c3f12ddd0c154504b9399c2b3aa66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46423006839c1594422e7dade08687a2942f6f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46423006839c1594422e7dade08687a2942f6f69", "html_url": "https://github.com/rust-lang/rust/commit/46423006839c1594422e7dade08687a2942f6f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46423006839c1594422e7dade08687a2942f6f69/comments", "author": {"login": "jruderman", "id": 692547, "node_id": "MDQ6VXNlcjY5MjU0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/692547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jruderman", "html_url": "https://github.com/jruderman", "followers_url": "https://api.github.com/users/jruderman/followers", "following_url": "https://api.github.com/users/jruderman/following{/other_user}", "gists_url": "https://api.github.com/users/jruderman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jruderman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jruderman/subscriptions", "organizations_url": "https://api.github.com/users/jruderman/orgs", "repos_url": "https://api.github.com/users/jruderman/repos", "events_url": "https://api.github.com/users/jruderman/events{/privacy}", "received_events_url": "https://api.github.com/users/jruderman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56d680ab795e3c92063bb673babdb5fd7aa37d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d680ab795e3c92063bb673babdb5fd7aa37d8f", "html_url": "https://github.com/rust-lang/rust/commit/56d680ab795e3c92063bb673babdb5fd7aa37d8f"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "254ff7f795110798d698a0fafd9f6e5acf9ccac3", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 65, "deletions": 6, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/46423006839c1594422e7dade08687a2942f6f69/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46423006839c1594422e7dade08687a2942f6f69/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=46423006839c1594422e7dade08687a2942f6f69", "patch": "@@ -85,6 +85,9 @@ fn safe_to_steal(e: ast::expr_) -> bool {\n       ast::expr_ret(option::none.) { false }\n       ast::expr_put(option::none.) { false }\n \n+      ast::expr_ret(_) { false /* lots of code generation issues, such as https://github.com/graydon/rust/issues/770 */ }\n+      ast::expr_fail(_) { false }\n+\n       _ {\n         true\n       }\n@@ -149,7 +152,7 @@ fn as_str(f: fn(ioivec::writer) ) -> str {\n     ret w.get_str();\n }\n \n-fn pp_variants(crate: &ast::crate, codemap: &codemap::codemap, filename: &str) {\n+fn check_variants_of_ast(crate: &ast::crate, codemap: &codemap::codemap, filename: &str) {\n     let exprs = steal_exprs(crate);\n     let exprsL = ivec::len(exprs);\n     if (exprsL < 100u) {\n@@ -166,11 +169,64 @@ fn pp_variants(crate: &ast::crate, codemap: &codemap::codemap, filename: &str) {\n                 // 1u would be sane here, but the pretty-printer currently has lots of whitespace and paren issues,\n                 // and https://github.com/graydon/rust/issues/766 is hilarious.\n                 check_roundtrip_convergence(str3, 7u);\n+                //check_whole_compiler(str3);\n             }\n         }\n     }\n }\n \n+// We'd find more bugs if we could take an AST here, but\n+// - that would find many \"false positives\" or unimportant bugs\n+// - that would be tricky, requiring use of tasks or serialization or randomness.\n+// This seems to find plenty of bugs as it is :)\n+fn check_whole_compiler(code: &str) {\n+    let filename = \"test.rs\";\n+    write_file(filename, code);\n+    let p = std::run::program_output(\"/Users/jruderman/code/rust/build/stage1/rustc\", [\"-c\", filename]);\n+    //log_err #fmt(\"Status: %d\", p.status);\n+    //log_err \"Output: \" + p.out;\n+    if p.err != \"\" {\n+        if contains(p.err, \"argument of incompatible type\") {\n+            log_err \"https://github.com/graydon/rust/issues/769\";\n+        } else if contains(p.err, \"Cannot create binary operator with two operands of differing type\") {\n+            log_err \"https://github.com/graydon/rust/issues/770\";\n+        } else if contains(p.err, \"May only branch on boolean predicates!\") {\n+            log_err \"https://github.com/graydon/rust/issues/770 or https://github.com/graydon/rust/issues/776\";\n+        } else if contains(p.err, \"Invalid constantexpr cast!\") && contains(code, \"!\") {\n+            log_err \"https://github.com/graydon/rust/issues/777\";\n+        } else if contains(p.err, \"Both operands to ICmp instruction are not of the same type!\") && contains(code, \"!\") {\n+            log_err \"https://github.com/graydon/rust/issues/777 #issuecomment-1678487\";\n+        } else if contains(p.err, \"Ptr must be a pointer to Val type!\") && contains(code, \"!\") {\n+            log_err \"https://github.com/graydon/rust/issues/779\";\n+        } else if contains(p.err, \"Calling a function with bad signature!\") && (contains(code, \"iter\") || contains(code, \"range\")) {\n+            log_err \"https://github.com/graydon/rust/issues/771 - calling an iter fails\";\n+        } else if contains(p.err, \"Calling a function with a bad signature!\") && contains(code, \"empty\") {\n+            log_err \"https://github.com/graydon/rust/issues/775 - possibly a modification of run-pass/import-glob-crate.rs\";\n+        } else if contains(p.err, \"Invalid type for pointer element!\") && contains(code, \"put\") {\n+            log_err \"https://github.com/graydon/rust/issues/773 - put put ()\";\n+        } else if contains(p.err, \"pointer being freed was not allocated\") && contains(p.out, \"Out of stack space, sorry\") {\n+            log_err \"https://github.com/graydon/rust/issues/768 + https://github.com/graydon/rust/issues/778\"\n+        } else {\n+            log_err \"Stderr: \" + p.err;\n+            fail \"Unfamiliar error message\";\n+        }\n+    } else if contains(p.out, \"non-exhaustive match failure\") && contains(p.out, \"alias.rs\") {\n+        log_err \"https://github.com/graydon/rust/issues/772\";\n+    } else if contains(p.out, \"non-exhaustive match failure\") && contains(p.out, \"trans.rs\") && contains(code, \"put\") {\n+        log_err \"https://github.com/graydon/rust/issues/774\";\n+    } else if contains(p.out, \"Out of stack space, sorry\") {\n+        log_err \"Possibly a variant of https://github.com/graydon/rust/issues/768\";\n+    } else if p.status == 256 {\n+        if !contains(p.out, \"error:\") {\n+            fail \"Exited with status 256 without a span-error\";\n+        }\n+    } else if p.status == 11 {\n+        log_err \"What is this I don't even\";\n+    } else if p.status != 0 {\n+        fail \"Unfamiliar status code\";\n+    }\n+}\n+\n fn parse_and_print(code: &str) -> str {\n     let filename = \"tmp.rs\";\n     let codemap = codemap::new_codemap();\n@@ -186,7 +242,9 @@ fn content_is_dangerous_to_modify(code: &str) -> bool {\n     let dangerous_patterns = [\n          \"obj\", // not safe to steal; https://github.com/graydon/rust/issues/761\n          \"#macro\", // not safe to steal things inside of it, because they have a special syntax\n-         \" be \" // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n+         \"#\", // strange representation of the arguments to #fmt, for example\n+         \" be \", // don't want to replace its child with a non-call: \"Non-call expression in tail call\"\n+         \"@\" // hangs when compiling: https://github.com/graydon/rust/issues/768\n     ];\n \n     for p: str in dangerous_patterns { if contains(code, p) { ret true; } }\n@@ -277,18 +335,18 @@ fn check_convergence(files: &str[]) {\n     }\n }\n \n-fn check_convergence_of_variants(files: &str[]) {\n+fn check_variants(files: &str[]) {\n     for file in files {\n         if !file_is_confusing(file) {\n             let s = read_whole_file(file);\n             if content_is_dangerous_to_modify(s) || content_is_confusing(s) { cont; }\n-            log_err \"check_convergence_of_variants: \" + file;\n+            log_err \"check_variants: \" + file;\n             let codemap = codemap::new_codemap();\n             let crate = parser::parse_crate_from_source_str(file, s, ~[], codemap);\n             log_err as_str(bind pprust::print_crate(codemap, crate, file,\n                                         ioivec::string_reader(s), _,\n                                         pprust::no_ann()));\n-            pp_variants(*crate, codemap, file);\n+            check_variants_of_ast(*crate, codemap, file);\n         }\n     }\n }\n@@ -303,7 +361,8 @@ fn main(args: vec[str]) {\n \n     find_rust_files(files, root);\n     check_convergence(files);\n-    check_convergence_of_variants(files);\n+    check_variants(files);\n+    log_err \"Fuzzer done\";\n }\n \n // Local Variables:"}]}