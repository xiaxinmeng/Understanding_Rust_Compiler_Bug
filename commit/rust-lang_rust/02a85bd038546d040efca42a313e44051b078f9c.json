{"sha": "02a85bd038546d040efca42a313e44051b078f9c", "node_id": "C_kwDOAAsO6NoAKDAyYTg1YmQwMzg1NDZkMDQwZWZjYTQyYTMxM2U0NDA1MWIwNzhmOWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-09T07:03:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-09T07:03:44Z"}, "message": "Rollup merge of #110304 - cchiw:master, r=davidtwco\n\nAdd GNU Property Note\n\nFix #103001\n\nGenerates the missing property note:\n```\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size \tDescription\n  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\t      Properties: x86 feature: IBT\n```", "tree": {"sha": "efd98c1d8e32a7eb1d4b5baad037690370e4aa3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd98c1d8e32a7eb1d4b5baad037690370e4aa3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a85bd038546d040efca42a313e44051b078f9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWfBQCRBK7hj4Ov3rIwAAe+UIADxdUYg01Bp0oR+2yvJiSSoW\nqdpipUz9QgJnWSQcCN+Nwj+C6R/mSWLzjmY/e9Utibjb7dpMj41tfM5crqOOtRGi\nH6AqmYhzPDkqsT/yKVW9cUqWoXKJl9hF57K8f0tTepT7Yr/v7BZAJkJPmmPChkVj\nhkWvdyGLAbGI1AIGWGmtvUhVsIHE5HSVRyAtNh08O0YsxbnIKE3cPrbmu7S3WL2i\naAbTwr6caeCeQLTSj7/E3toRDrb9/QXSPDGu+yrAtt5AqLv5ouN0Gs2bqx2/psS3\nmzH5VKOJph/p6WKgycBBeeumrMfRxIRvIJ/dsT1O6M0WFLpn+DqwyvHn8NdFHhM=\n=ojPg\n-----END PGP SIGNATURE-----\n", "payload": "tree efd98c1d8e32a7eb1d4b5baad037690370e4aa3d\nparent 33a01e2e93bfdd0c37649c6f82172644b8315b55\nparent 37f3e2f4b115b166518a208950ecaaef1434830b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683615824 +0530\ncommitter GitHub <noreply@github.com> 1683615824 +0530\n\nRollup merge of #110304 - cchiw:master, r=davidtwco\n\nAdd GNU Property Note\n\nFix #103001\n\nGenerates the missing property note:\n```\nDisplaying notes found in: .note.gnu.property\n  Owner                Data size \tDescription\n  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\t      Properties: x86 feature: IBT\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a85bd038546d040efca42a313e44051b078f9c", "html_url": "https://github.com/rust-lang/rust/commit/02a85bd038546d040efca42a313e44051b078f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a85bd038546d040efca42a313e44051b078f9c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a01e2e93bfdd0c37649c6f82172644b8315b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a01e2e93bfdd0c37649c6f82172644b8315b55", "html_url": "https://github.com/rust-lang/rust/commit/33a01e2e93bfdd0c37649c6f82172644b8315b55"}, {"sha": "37f3e2f4b115b166518a208950ecaaef1434830b", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f3e2f4b115b166518a208950ecaaef1434830b", "html_url": "https://github.com/rust-lang/rust/commit/37f3e2f4b115b166518a208950ecaaef1434830b"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "8968133bac5ba0cdf55b31f1d203736a146b7ef7", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/02a85bd038546d040efca42a313e44051b078f9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a85bd038546d040efca42a313e44051b078f9c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=02a85bd038546d040efca42a313e44051b078f9c", "patch": "@@ -12,6 +12,7 @@ use object::{\n \n use snap::write::FrameEncoder;\n \n+use object::elf::NT_GNU_PROPERTY_TYPE_0;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::owned_slice::try_slice_owned;\n use rustc_data_structures::sync::MetadataRef;\n@@ -93,6 +94,54 @@ pub(super) fn search_for_section<'a>(\n         .map_err(|e| format!(\"failed to read {} section in '{}': {}\", section, path.display(), e))\n }\n \n+fn add_gnu_property_note(\n+    file: &mut write::Object<'static>,\n+    architecture: Architecture,\n+    binary_format: BinaryFormat,\n+    endianness: Endianness,\n+) {\n+    // check bti protection\n+    if binary_format != BinaryFormat::Elf\n+        || !matches!(architecture, Architecture::X86_64 | Architecture::Aarch64)\n+    {\n+        return;\n+    }\n+\n+    let section = file.add_section(\n+        file.segment_name(StandardSegment::Data).to_vec(),\n+        b\".note.gnu.property\".to_vec(),\n+        SectionKind::Note,\n+    );\n+    let mut data: Vec<u8> = Vec::new();\n+    let n_namsz: u32 = 4; // Size of the n_name field\n+    let n_descsz: u32 = 16; // Size of the n_desc field\n+    let n_type: u32 = NT_GNU_PROPERTY_TYPE_0; // Type of note descriptor\n+    let header_values = [n_namsz, n_descsz, n_type];\n+    header_values.iter().for_each(|v| {\n+        data.extend_from_slice(&match endianness {\n+            Endianness::Little => v.to_le_bytes(),\n+            Endianness::Big => v.to_be_bytes(),\n+        })\n+    });\n+    data.extend_from_slice(b\"GNU\\0\"); // Owner of the program property note\n+    let pr_type: u32 = match architecture {\n+        Architecture::X86_64 => 0xc0000002,\n+        Architecture::Aarch64 => 0xc0000000,\n+        _ => unreachable!(),\n+    };\n+    let pr_datasz: u32 = 4; //size of the pr_data field\n+    let pr_data: u32 = 3; //program property descriptor\n+    let pr_padding: u32 = 0;\n+    let property_values = [pr_type, pr_datasz, pr_data, pr_padding];\n+    property_values.iter().for_each(|v| {\n+        data.extend_from_slice(&match endianness {\n+            Endianness::Little => v.to_le_bytes(),\n+            Endianness::Big => v.to_be_bytes(),\n+        })\n+    });\n+    file.append_section_data(section, &data, 8);\n+}\n+\n pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n     let endianness = match sess.target.options.endian {\n         Endian::Little => Endianness::Little,\n@@ -205,6 +254,7 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n         _ => elf::ELFOSABI_NONE,\n     };\n     let abi_version = 0;\n+    add_gnu_property_note(&mut file, architecture, binary_format, endianness);\n     file.flags = FileFlags::Elf { os_abi, abi_version, e_flags };\n     Some(file)\n }"}, {"sha": "cabe951e1c5cb2d5cbb1fbdb6d3b91e158977b8e", "filename": "tests/run-make/branch-protection-check-IBT/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02a85bd038546d040efca42a313e44051b078f9c/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/02a85bd038546d040efca42a313e44051b078f9c/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile?ref=02a85bd038546d040efca42a313e44051b078f9c", "patch": "@@ -0,0 +1,15 @@\n+# Check for GNU Property Note\n+\n+include ../tools.mk\n+\n+# How to run this\n+# python3 x.py test --target x86_64-unknown-linux-gnu  tests/run-make/branch-protection-check-IBT/\n+\n+# only-x86_64\n+\n+all:\n+ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86_64)\n+\t$(RUSTC) --target x86_64-unknown-linux-gnu -Z cf-protection=branch -L$(TMPDIR) -C link-args='-nostartfiles'  -C save-temps  ./main.rs -o $(TMPDIR)/rsmain\n+\t readelf -nW $(TMPDIR)/rsmain | $(CGREP) -e \".note.gnu.property\"\n+endif\n+"}, {"sha": "ad379d6ea4373eab048e758c128f99477cb6c8a8", "filename": "tests/run-make/branch-protection-check-IBT/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02a85bd038546d040efca42a313e44051b078f9c/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a85bd038546d040efca42a313e44051b078f9c/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs?ref=02a85bd038546d040efca42a313e44051b078f9c", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(\"hello world\");\n+}"}]}