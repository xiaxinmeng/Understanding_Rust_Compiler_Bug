{"sha": "bd177f3ea31e47b94dd400239a9badfe2bd47355", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMTc3ZjNlYTMxZTQ3Yjk0ZGQ0MDAyMzlhOWJhZGZlMmJkNDczNTU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-04-27T15:34:08Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-04-27T15:34:08Z"}, "message": "Stabilized vectored IO\n\nThis renames `std::io::IoVec` to `std::io::IoSlice` and\n`std::io::IoVecMut` to `std::io::IoSliceMut`, and stabilizes\n`std::io::IoSlice`, `std::io::IoSliceMut`,\n`std::io::Read::read_vectored`, and `std::io::Write::write_vectored`.\n\nCloses #58452", "tree": {"sha": "d6bc8669ce10dbb427760147938821f464fd606a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6bc8669ce10dbb427760147938821f464fd606a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd177f3ea31e47b94dd400239a9badfe2bd47355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd177f3ea31e47b94dd400239a9badfe2bd47355", "html_url": "https://github.com/rust-lang/rust/commit/bd177f3ea31e47b94dd400239a9badfe2bd47355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd177f3ea31e47b94dd400239a9badfe2bd47355/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a32d504a5aa49b951bfc70602a9615cb772acf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a32d504a5aa49b951bfc70602a9615cb772acf", "html_url": "https://github.com/rust-lang/rust/commit/d4a32d504a5aa49b951bfc70602a9615cb772acf"}], "stats": {"total": 556, "additions": 278, "deletions": 278}, "files": [{"sha": "eaf5d619f5454b1a48a9728cc41b07f5a4072916", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -11,7 +11,7 @@\n \n use crate::fmt;\n use crate::ffi::OsString;\n-use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, Seek, Read, Initializer, Write, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::fs as fs_imp;\n use crate::sys_common::{AsInnerMut, FromInner, AsInner, IntoInner};\n@@ -617,7 +617,7 @@ impl Read for File {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -632,7 +632,7 @@ impl Write for File {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n \n@@ -650,7 +650,7 @@ impl Read for &File {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -665,7 +665,7 @@ impl Write for &File {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n "}, {"sha": "6a9f7b90fff8fa94ad89b1f0298d959ebfd43b6e", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n use crate::cmp;\n use crate::error;\n use crate::fmt;\n-use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoSlice, IoSliceMut};\n use crate::memchr;\n \n /// The `BufReader` struct adds buffering to any reader.\n@@ -249,7 +249,7 @@ impl<R: Read> Read for BufReader<R> {\n         Ok(nread)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.pos == self.cap && total_len >= self.buf.len() {\n             self.discard_buffer();\n@@ -609,7 +609,7 @@ impl<W: Write> Write for BufWriter<W> {\n         }\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum::<usize>();\n         if self.buf.len() + total_len > self.buf.capacity() {\n             self.flush_buf()?;"}, {"sha": "872aa1f3701933704de1b30075ef2033bc7e0d01", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::io::prelude::*;\n \n use crate::cmp;\n-use crate::io::{self, Initializer, SeekFrom, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, SeekFrom, Error, ErrorKind, IoSlice, IoSliceMut};\n \n use core::convert::TryInto;\n \n@@ -230,7 +230,7 @@ impl<T> Read for Cursor<T> where T: AsRef<[u8]> {\n         Ok(n)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n             let n = self.read(buf)?;\n@@ -275,7 +275,7 @@ fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<us\n fn slice_write_vectored(\n     pos_mut: &mut u64,\n     slice: &mut [u8],\n-    bufs: &[IoVec<'_>],\n+    bufs: &[IoSlice<'_>],\n ) -> io::Result<usize>\n {\n     let mut nwritten = 0;\n@@ -319,7 +319,7 @@ fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usi\n fn vec_write_vectored(\n     pos_mut: &mut u64,\n     vec: &mut Vec<u8>,\n-    bufs: &[IoVec<'_>],\n+    bufs: &[IoSlice<'_>],\n ) -> io::Result<usize>\n {\n     let mut nwritten = 0;\n@@ -337,7 +337,7 @@ impl Write for Cursor<&mut [u8]> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         slice_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n@@ -350,7 +350,7 @@ impl Write for Cursor<&mut Vec<u8>> {\n         vec_write(&mut self.pos, self.inner, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         vec_write_vectored(&mut self.pos, self.inner, bufs)\n     }\n \n@@ -363,7 +363,7 @@ impl Write for Cursor<Vec<u8>> {\n         vec_write(&mut self.pos, &mut self.inner, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         vec_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n@@ -378,7 +378,7 @@ impl Write for Cursor<Box<[u8]>> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         slice_write_vectored(&mut self.pos, &mut self.inner, bufs)\n     }\n \n@@ -388,7 +388,7 @@ impl Write for Cursor<Box<[u8]>> {\n #[cfg(test)]\n mod tests {\n     use crate::io::prelude::*;\n-    use crate::io::{Cursor, SeekFrom, IoVec, IoVecMut};\n+    use crate::io::{Cursor, SeekFrom, IoSlice, IoSliceMut};\n \n     #[test]\n     fn test_vec_writer() {\n@@ -397,7 +397,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(writer, b);\n@@ -410,7 +410,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(&writer.get_ref()[..], b);\n@@ -424,7 +424,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]).unwrap(), 3);\n         assert_eq!(writer.write(&[4, 5, 6, 7]).unwrap(), 4);\n         assert_eq!(writer.write_vectored(\n-            &[IoVec::new(&[]), IoVec::new(&[8, 9]), IoVec::new(&[10])],\n+            &[IoSlice::new(&[]), IoSlice::new(&[8, 9]), IoSlice::new(&[10])],\n         ).unwrap(), 3);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         assert_eq!(&writer.get_ref()[..], b);\n@@ -452,18 +452,18 @@ mod tests {\n     fn test_box_slice_writer_vectored() {\n         let mut writer = Cursor::new(vec![0u8; 9].into_boxed_slice());\n         assert_eq!(writer.position(), 0);\n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[0])]).unwrap(), 1);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n         assert_eq!(writer.position(), 1);\n         assert_eq!(\n-            writer.write_vectored(&[IoVec::new(&[1, 2, 3]), IoVec::new(&[4, 5, 6, 7])]).unwrap(),\n+            writer.write_vectored(&[IoSlice::new(&[1, 2, 3]), IoSlice::new(&[4, 5, 6, 7])]).unwrap(),\n             7,\n         );\n         assert_eq!(writer.position(), 8);\n         assert_eq!(writer.write_vectored(&[]).unwrap(), 0);\n         assert_eq!(writer.position(), 8);\n \n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[8, 9])]).unwrap(), 1);\n-        assert_eq!(writer.write_vectored(&[IoVec::new(&[10])]).unwrap(), 0);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n+        assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(&**writer.get_ref(), b);\n     }\n@@ -495,20 +495,20 @@ mod tests {\n         {\n             let mut writer = Cursor::new(&mut buf[..]);\n             assert_eq!(writer.position(), 0);\n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[0])]).unwrap(), 1);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n             assert_eq!(writer.position(), 1);\n             assert_eq!(\n                 writer.write_vectored(\n-                    &[IoVec::new(&[1, 2, 3]), IoVec::new(&[4, 5, 6, 7])],\n+                    &[IoSlice::new(&[1, 2, 3]), IoSlice::new(&[4, 5, 6, 7])],\n                 ).unwrap(),\n                 7,\n             );\n             assert_eq!(writer.position(), 8);\n             assert_eq!(writer.write_vectored(&[]).unwrap(), 0);\n             assert_eq!(writer.position(), 8);\n \n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[8, 9])]).unwrap(), 1);\n-            assert_eq!(writer.write_vectored(&[IoVec::new(&[10])]).unwrap(), 0);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[8, 9])]).unwrap(), 1);\n+            assert_eq!(writer.write_vectored(&[IoSlice::new(&[10])]).unwrap(), 0);\n         }\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7, 8];\n         assert_eq!(buf, b);\n@@ -578,11 +578,11 @@ mod tests {\n     fn test_mem_reader_vectored() {\n         let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7]);\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -592,7 +592,7 @@ mod tests {\n         let mut buf2 = [0; 4];\n         assert_eq!(\n             reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n             ).unwrap(),\n             7,\n         );\n@@ -629,11 +629,11 @@ mod tests {\n     fn test_boxed_slice_reader_vectored() {\n         let mut reader = Cursor::new(vec![0, 1, 2, 3, 4, 5, 6, 7].into_boxed_slice());\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -643,7 +643,7 @@ mod tests {\n         let mut buf2 = [0; 4];\n         assert_eq!(\n             reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n             ).unwrap(),\n             7,\n         );\n@@ -689,10 +689,10 @@ mod tests {\n         let in_buf = vec![0, 1, 2, 3, 4, 5, 6, 7];\n         let reader = &mut &in_buf[..];\n         let mut buf = [];\n-        assert_eq!(reader.read_vectored(&mut [IoVecMut::new(&mut buf)]).unwrap(), 0);\n+        assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoVecMut::new(&mut []), IoVecMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.len(), 7);\n@@ -702,7 +702,7 @@ mod tests {\n         let mut buf2 = [0; 4];\n         assert_eq!(\n             reader.read_vectored(\n-                &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n             ).unwrap(),\n             7,\n         );"}, {"sha": "7b866049d7ef1064efb27fed2df211decf283b40", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,6 +1,6 @@\n use crate::cmp;\n-use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoVecMut,\n-         IoVec};\n+use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoSliceMut,\n+         IoSlice};\n use crate::fmt;\n use crate::mem;\n \n@@ -15,7 +15,7 @@ impl<R: Read + ?Sized> Read for &mut R {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n \n@@ -45,7 +45,7 @@ impl<W: Write + ?Sized> Write for &mut W {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         (**self).write_vectored(bufs)\n     }\n \n@@ -94,7 +94,7 @@ impl<R: Read + ?Sized> Read for Box<R> {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n \n@@ -124,7 +124,7 @@ impl<W: Write + ?Sized> Write for Box<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         (**self).write_vectored(bufs)\n     }\n \n@@ -207,7 +207,7 @@ impl Read for &[u8] {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nread = 0;\n         for buf in bufs {\n             nread += self.read(buf)?;\n@@ -280,7 +280,7 @@ impl Write for &mut [u8] {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n             nwritten += self.write(buf)?;\n@@ -316,7 +316,7 @@ impl Write for Vec<u8> {\n     }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len = bufs.iter().map(|b| b.len()).sum();\n         self.reserve(len);\n         for buf in bufs {"}, {"sha": "8fea6251e652a143a2ae29aab6f616692f543080", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -390,7 +390,7 @@ fn read_to_end_with_reservation<R: Read + ?Sized>(r: &mut R,\n     ret\n }\n \n-pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoVecMut<'_>]) -> Result<usize>\n+pub(crate) fn default_read_vectored<F>(read: F, bufs: &mut [IoSliceMut<'_>]) -> Result<usize>\n where\n     F: FnOnce(&mut [u8]) -> Result<usize>\n {\n@@ -401,7 +401,7 @@ where\n     read(buf)\n }\n \n-pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoVec<'_>]) -> Result<usize>\n+pub(crate) fn default_write_vectored<F>(write: F, bufs: &[IoSlice<'_>]) -> Result<usize>\n where\n     F: FnOnce(&[u8]) -> Result<usize>\n {\n@@ -554,8 +554,8 @@ pub trait Read {\n     ///\n     /// The default implementation calls `read` with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> {\n         default_read_vectored(|b| self.read(b), bufs)\n     }\n \n@@ -911,32 +911,32 @@ pub trait Read {\n /// It is semantically a wrapper around an `&mut [u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n #[repr(transparent)]\n-pub struct IoVecMut<'a>(sys::io::IoVecMut<'a>);\n+pub struct IoSliceMut<'a>(sys::io::IoSliceMut<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> fmt::Debug for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> fmt::Debug for IoSliceMut<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n-impl<'a> IoVecMut<'a> {\n-    /// Creates a new `IoVecMut` wrapping a byte slice.\n+impl<'a> IoSliceMut<'a> {\n+    /// Creates a new `IoSliceMut` wrapping a byte slice.\n     ///\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(sys::io::IoVecMut::new(buf))\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(sys::io::IoSliceMut::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> Deref for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> Deref for IoSliceMut<'a> {\n     type Target = [u8];\n \n     #[inline]\n@@ -945,8 +945,8 @@ impl<'a> Deref for IoVecMut<'a> {\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> DerefMut for IoVecMut<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> DerefMut for IoSliceMut<'a> {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut [u8] {\n         self.0.as_mut_slice()\n@@ -958,32 +958,32 @@ impl<'a> DerefMut for IoVecMut<'a> {\n /// It is semantically a wrapper around an `&[u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n #[repr(transparent)]\n-pub struct IoVec<'a>(sys::io::IoVec<'a>);\n+pub struct IoSlice<'a>(sys::io::IoSlice<'a>);\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> fmt::Debug for IoVec<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> fmt::Debug for IoSlice<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(self.0.as_slice(), fmt)\n     }\n }\n \n-impl<'a> IoVec<'a> {\n-    /// Creates a new `IoVec` wrapping a byte slice.\n+impl<'a> IoSlice<'a> {\n+    /// Creates a new `IoSlice` wrapping a byte slice.\n     ///\n     /// # Panics\n     ///\n     /// Panics on Windows if the slice is larger than 4GB.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(sys::io::IoVec::new(buf))\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(sys::io::IoSlice::new(buf))\n     }\n }\n \n-#[unstable(feature = \"iovec\", issue = \"58452\")]\n-impl<'a> Deref for IoVec<'a> {\n+#[stable(feature = \"iovec\", since = \"1.36.0\")]\n+impl<'a> Deref for IoSlice<'a> {\n     type Target = [u8];\n \n     #[inline]\n@@ -1141,8 +1141,8 @@ pub trait Write {\n     ///\n     /// The default implementation calls `write` with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n-    #[unstable(feature = \"iovec\", issue = \"58452\")]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> Result<usize> {\n+    #[stable(feature = \"iovec\", since = \"1.36.0\")]\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {\n         default_write_vectored(|b| self.write(b), bufs)\n     }\n \n@@ -1926,7 +1926,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n         self.second.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> Result<usize> {\n         if !self.done_first {\n             match self.first.read_vectored(bufs)? {\n                 0 if bufs.iter().any(|b| !b.is_empty()) => self.done_first = true,"}, {"sha": "990c0eb8955e4280f1072c249cd211df8af77f32", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -5,7 +5,7 @@ use crate::io::prelude::*;\n use crate::cell::RefCell;\n use crate::fmt;\n use crate::io::lazy::Lazy;\n-use crate::io::{self, Initializer, BufReader, LineWriter, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, BufReader, LineWriter, IoSlice, IoSliceMut};\n use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n@@ -75,7 +75,7 @@ fn stderr_raw() -> io::Result<StderrRaw> { stdio::Stderr::new().map(StderrRaw) }\n impl Read for StdinRaw {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -87,7 +87,7 @@ impl Read for StdinRaw {\n impl Write for StdoutRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -96,7 +96,7 @@ impl Write for StdoutRaw {\n impl Write for StderrRaw {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -116,7 +116,7 @@ impl<W: io::Write> io::Write for Maybe<W> {\n         }\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total = bufs.iter().map(|b| b.len()).sum();\n         match self {\n             Maybe::Real(w) => handle_ebadf(w.write_vectored(bufs), total),\n@@ -140,7 +140,7 @@ impl<R: io::Read> io::Read for Maybe<R> {\n         }\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self {\n             Maybe::Real(r) => handle_ebadf(r.read_vectored(bufs), 0),\n             Maybe::Fake => Ok(0)\n@@ -334,7 +334,7 @@ impl Read for Stdin {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.lock().read(buf)\n     }\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.lock().read_vectored(bufs)\n     }\n     #[inline]\n@@ -358,7 +358,7 @@ impl Read for StdinLock<'_> {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -520,7 +520,7 @@ impl Write for Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -538,7 +538,7 @@ impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -679,7 +679,7 @@ impl Write for Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.lock().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {\n@@ -697,7 +697,7 @@ impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.borrow_mut().write_vectored(bufs)\n     }\n     fn flush(&mut self) -> io::Result<()> {"}, {"sha": "7c4eae6512df4822a448efb3f65967de69eb868d", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n #![allow(missing_copy_implementations)]\n \n use crate::fmt;\n-use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoVec, IoVecMut};\n+use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoSlice, IoSliceMut};\n use crate::mem;\n \n /// Copies the entire contents of a reader into a writer.\n@@ -153,7 +153,7 @@ impl Read for Repeat {\n     }\n \n     #[inline]\n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut nwritten = 0;\n         for buf in bufs {\n             nwritten += self.read(buf)?;\n@@ -206,7 +206,7 @@ impl Write for Sink {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { Ok(buf.len()) }\n \n     #[inline]\n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let total_len = bufs.iter().map(|b| b.len()).sum();\n         Ok(total_len)\n     }"}, {"sha": "0460ac9d7535439b53d02d53692d6a17a5f62275", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::io::prelude::*;\n \n use crate::fmt;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::net::{ToSocketAddrs, SocketAddr, Shutdown};\n use crate::sys_common::net as net_imp;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n@@ -569,7 +569,7 @@ impl TcpStream {\n impl Read for TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -582,7 +582,7 @@ impl Read for TcpStream {\n impl Write for TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -592,7 +592,7 @@ impl Write for TcpStream {\n impl Read for &TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -605,7 +605,7 @@ impl Read for &TcpStream {\n impl Write for &TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -930,7 +930,7 @@ impl fmt::Debug for TcpListener {\n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n     use crate::fmt;\n-    use crate::io::{ErrorKind, IoVec, IoVecMut};\n+    use crate::io::{ErrorKind, IoSlice, IoSliceMut};\n     use crate::io::prelude::*;\n     use crate::net::*;\n     use crate::net::test::{next_test_ip4, next_test_ip6};\n@@ -1216,7 +1216,7 @@ mod tests {\n             let mut b = [0];\n             let mut c = [0; 3];\n             let len = t!(s2.read_vectored(\n-                &mut [IoVecMut::new(&mut a), IoVecMut::new(&mut b), IoVecMut::new(&mut c)],\n+                &mut [IoSliceMut::new(&mut a), IoSliceMut::new(&mut b), IoSliceMut::new(&mut c)],\n             ));\n             assert!(len > 0);\n             assert_eq!(b, [10]);\n@@ -1235,7 +1235,7 @@ mod tests {\n             let a = [];\n             let b = [10];\n             let c = [11, 12];\n-            t!(s1.write_vectored(&[IoVec::new(&a), IoVec::new(&b), IoVec::new(&c)]));\n+            t!(s1.write_vectored(&[IoSlice::new(&a), IoSlice::new(&b), IoSlice::new(&c)]));\n \n             let mut buf = [0; 4];\n             let len = t!(s2.read(&mut buf));"}, {"sha": "c1addb46a0a230f8b121e0ec3638535dc6ce9bbd", "filename": "src/libstd/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -111,7 +111,7 @@ use crate::io::prelude::*;\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::fs;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n@@ -225,7 +225,7 @@ impl Write for ChildStdin {\n         self.inner.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n \n@@ -276,7 +276,7 @@ impl Read for ChildStdout {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -328,7 +328,7 @@ impl Read for ChildStderr {\n         self.inner.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/cloudabi/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "05f91541011e6960a82afe307a9a121fb7011e86", "filename": "src/libstd/sys/cloudabi/shims/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -198,15 +198,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "8d609cdfad5dcbee7ae40a920e9474ff21eb770c", "filename": "src/libstd/sys/cloudabi/shims/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -43,15 +43,15 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "fb14dc591018116ea405550f4697f60378b2d7e8", "filename": "src/libstd/sys/cloudabi/shims/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "b80a1a349e3386835908176ae9e6ff1756befa6d", "filename": "src/libstd/sys/redox/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n@@ -278,15 +278,15 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/redox/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "494f943c96b53f92ec30c484d9009148a34e0ffb", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::cmp;\n-use crate::io::{self, Error, ErrorKind, Result, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, Result, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::path::Path;\n@@ -34,15 +34,15 @@ impl TcpStream {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write(b), bufs)\n     }\n "}, {"sha": "29cacb6d562f285e29f16aa61ac0209dd09f9c39", "filename": "src/libstd/sys/redox/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::{cvt, syscall};\n use crate::sys::fd::FileDesc;\n \n@@ -24,15 +24,15 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n "}, {"sha": "e9095b375fe5d52205bd886827290f84bb5f8069", "filename": "src/libstd/sys/sgx/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,15 +200,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/sgx/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "76b0b81186aeb06c5bd82e4f99d4ddbdee8b7a7d", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr, ToSocketAddrs};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void, sgx_ineffective, AsInner, FromInner, IntoInner, TryIntoInner};\n@@ -136,15 +136,15 @@ impl TcpStream {\n         self.inner.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::default_read_vectored(|b| self.read(b), bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.inner.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::default_write_vectored(|b| self.write(b), bufs)\n     }\n "}, {"sha": "fb14dc591018116ea405550f4697f60378b2d7e8", "filename": "src/libstd/sys/sgx/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "45a850aa4a85c61d40f522d4339993a46428acd8", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -18,7 +18,7 @@ mod libc {\n use crate::ascii;\n use crate::ffi::OsStr;\n use crate::fmt;\n-use crate::io::{self, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Initializer, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{self, Shutdown};\n use crate::os::unix::ffi::OsStrExt;\n@@ -551,7 +551,7 @@ impl io::Read for UnixStream {\n         io::Read::read(&mut &*self, buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         io::Read::read_vectored(&mut &*self, bufs)\n     }\n \n@@ -567,7 +567,7 @@ impl<'a> io::Read for &'a UnixStream {\n         self.0.read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -583,7 +583,7 @@ impl io::Write for UnixStream {\n         io::Write::write(&mut &*self, buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         io::Write::write_vectored(&mut &*self, bufs)\n     }\n \n@@ -598,7 +598,7 @@ impl<'a> io::Write for &'a UnixStream {\n         self.0.write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n \n@@ -1531,14 +1531,14 @@ mod test {\n         let (mut s1, mut s2) = or_panic!(UnixStream::pair());\n \n         let len = or_panic!(s1.write_vectored(\n-            &[IoVec::new(b\"hello\"), IoVec::new(b\" \"), IoVec::new(b\"world!\")],\n+            &[IoSlice::new(b\"hello\"), IoSlice::new(b\" \"), IoSlice::new(b\"world!\")],\n         ));\n         assert_eq!(len, 12);\n \n         let mut buf1 = [0; 6];\n         let mut buf2 = [0; 7];\n         let len = or_panic!(s2.read_vectored(\n-            &mut [IoVecMut::new(&mut buf1), IoVecMut::new(&mut buf2)],\n+            &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n         ));\n         assert_eq!(len, 12);\n         assert_eq!(&buf1, b\"hello \");"}, {"sha": "6d23963e141aa033e5bbda322a40622cdf5f1553", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n use crate::cmp;\n-use crate::io::{self, Read, Initializer, IoVec, IoVecMut};\n+use crate::io::{self, Read, Initializer, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::cvt;\n@@ -53,7 +53,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::readv(self.fd,\n                         bufs.as_ptr() as *const libc::iovec,\n@@ -115,7 +115,7 @@ impl FileDesc {\n         Ok(ret as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let ret = cvt(unsafe {\n             libc::writev(self.fd,\n                          bufs.as_ptr() as *const libc::iovec,"}, {"sha": "e653f6721f06257fea23b7f05a238f196e57b612", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -2,7 +2,7 @@ use crate::os::unix::prelude::*;\n \n use crate::ffi::{CString, CStr, OsString, OsStr};\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, SeekFrom, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -567,7 +567,7 @@ impl File {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -579,7 +579,7 @@ impl File {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "72954ff20ef95a230d162547de74d62c41c63957", "filename": "src/libstd/sys/unix/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -4,15 +4,15 @@ use crate::slice;\n use libc::{iovec, c_void};\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: iovec,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice {\n             vec: iovec {\n                 iov_base: buf.as_ptr() as *mut u8 as *mut c_void,\n                 iov_len: buf.len()\n@@ -29,15 +29,15 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: iovec,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut {\n             vec: iovec {\n                 iov_base: buf.as_mut_ptr() as *mut c_void,\n                 iov_len: buf.len()"}, {"sha": "2c6f21aa21a3a5a9b1aea03a158837ffa9161f3b", "filename": "src/libstd/sys/unix/l4re.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fl4re.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -5,7 +5,7 @@ macro_rules! unimpl {\n pub mod net {\n     #![allow(warnings)]\n     use crate::fmt;\n-    use crate::io::{self, IoVec, IoVecMut};\n+    use crate::io::{self, IoSlice, IoSliceMut};\n     use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n     use crate::sys_common::{AsInner, FromInner, IntoInner};\n     use crate::sys::fd::FileDesc;\n@@ -46,7 +46,7 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n@@ -66,7 +66,7 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+        pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n@@ -152,15 +152,15 @@ pub mod net {\n             unimpl!();\n         }\n \n-        pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n         pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n             unimpl!();\n         }\n \n-        pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+        pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n             unimpl!();\n         }\n "}, {"sha": "75750b5c4e588abd857e1f99bbe4f14d0623c910", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::ffi::CStr;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::str;\n@@ -244,7 +244,7 @@ impl Socket {\n         self.recv_with_flags(buf, MSG_PEEK)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n@@ -276,7 +276,7 @@ impl Socket {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "d36e94df63f8c79396555df245a56ee5cd78dd5e", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sys::fd::FileDesc;\n@@ -60,15 +60,15 @@ impl AnonPipe {\n         self.0.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.0.read_vectored(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.0.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.0.write_vectored(bufs)\n     }\n "}, {"sha": "f9b017df24088c32fec959a3eeffee673a9e036a", "filename": "src/libstd/sys/unix/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstdio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::fd::FileDesc;\n use crate::mem::ManuallyDrop;\n \n@@ -15,7 +15,7 @@ impl io::Read for Stdin {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDIN_FILENO)).read_vectored(bufs)\n     }\n }\n@@ -29,7 +29,7 @@ impl io::Write for Stdout {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDOUT_FILENO)).write_vectored(bufs)\n     }\n \n@@ -47,7 +47,7 @@ impl io::Write for Stderr {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write(buf)\n     }\n \n-    fn write_vectored(&mut self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(FileDesc::new(libc::STDERR_FILENO)).write_vectored(bufs)\n     }\n "}, {"sha": "0ec4122f385daca6840abd59b6e9f09142f20cae", "filename": "src/libstd/sys/wasi/ext/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -3,7 +3,7 @@\n #![unstable(feature = \"wasi_ext\", issue = \"0\")]\n \n use crate::fs::{self, File, Metadata, OpenOptions};\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::os::wasi::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n@@ -25,7 +25,7 @@ pub trait FileExt {\n     /// return with a short read.\n     ///\n     /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read_vectored\n-    fn read_at(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize>;\n+    fn read_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize>;\n \n     /// Writes a number of bytes starting from a given offset.\n     ///\n@@ -43,7 +43,7 @@ pub trait FileExt {\n     /// short write.\n     ///\n     /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write_vectored\n-    fn write_at(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize>;\n+    fn write_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize>;\n \n     /// Returns the current position within the file.\n     ///\n@@ -105,11 +105,11 @@ pub trait FileExt {\n // FIXME: bind __wasi_random_get maybe? - on crates.io for unix\n \n impl FileExt for fs::File {\n-    fn read_at(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize> {\n+    fn read_at(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().fd().pread(bufs, offset)\n     }\n \n-    fn write_at(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize> {\n+    fn write_at(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         self.as_inner().fd().pwrite(bufs, offset)\n     }\n "}, {"sha": "25692ec08680193a3c7daec07f10c3470f4b8d8a", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,6 +1,6 @@\n #![allow(dead_code)]\n \n-use crate::io::{self, IoVec, IoVecMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n use crate::sys::cvt_wasi;\n@@ -24,25 +24,25 @@ pub type RiFlags = u16;\n pub type RoFlags = u16;\n pub type SiFlags = u16;\n \n-fn iovec(a: &mut [IoVecMut<'_>]) -> (*const libc::__wasi_iovec_t, usize) {\n+fn iovec(a: &mut [IoSliceMut<'_>]) -> (*const libc::__wasi_iovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVecMut<'_>>(),\n+        mem::size_of::<IoSliceMut<'_>>(),\n         mem::size_of::<libc::__wasi_iovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVecMut<'_>>(),\n+        mem::align_of::<IoSliceMut<'_>>(),\n         mem::align_of::<libc::__wasi_iovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_iovec_t, a.len())\n }\n \n-fn ciovec(a: &[IoVec<'_>]) -> (*const libc::__wasi_ciovec_t, usize) {\n+fn ciovec(a: &[IoSlice<'_>]) -> (*const libc::__wasi_ciovec_t, usize) {\n     assert_eq!(\n-        mem::size_of::<IoVec<'_>>(),\n+        mem::size_of::<IoSlice<'_>>(),\n         mem::size_of::<libc::__wasi_ciovec_t>()\n     );\n     assert_eq!(\n-        mem::align_of::<IoVec<'_>>(),\n+        mem::align_of::<IoSlice<'_>>(),\n         mem::align_of::<libc::__wasi_ciovec_t>()\n     );\n     (a.as_ptr() as *const libc::__wasi_ciovec_t, a.len())\n@@ -67,28 +67,28 @@ impl WasiFd {\n         cvt_wasi(unsafe { libc::__wasi_fd_datasync(self.fd) })\n     }\n \n-    pub fn pread(&self, bufs: &mut [IoVecMut<'_>], offset: u64) -> io::Result<usize> {\n+    pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pread(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn pwrite(&self, bufs: &[IoVec<'_>], offset: u64) -> io::Result<usize> {\n+    pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_pwrite(self.fd, ptr, len, offset, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn read(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = iovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_read(self.fd, ptr, len, &mut read) })?;\n         Ok(read)\n     }\n \n-    pub fn write(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let mut read = 0;\n         let (ptr, len) = ciovec(bufs);\n         cvt_wasi(unsafe { libc::__wasi_fd_write(self.fd, ptr, len, &mut read) })?;\n@@ -309,7 +309,7 @@ impl WasiFd {\n \n     pub fn sock_recv(\n         &self,\n-        ri_data: &mut [IoVecMut<'_>],\n+        ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: RiFlags,\n     ) -> io::Result<(usize, RoFlags)> {\n         let mut ro_datalen = 0;\n@@ -321,7 +321,7 @@ impl WasiFd {\n         Ok((ro_datalen, ro_flags))\n     }\n \n-    pub fn sock_send(&self, si_data: &[IoVec<'_>], si_flags: SiFlags) -> io::Result<usize> {\n+    pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: SiFlags) -> io::Result<usize> {\n         let mut so_datalen = 0;\n         let (ptr, len) = ciovec(si_data);\n         cvt_wasi(unsafe { libc::__wasi_sock_send(self.fd, ptr, len, si_flags, &mut so_datalen) })?;"}, {"sha": "172c60385b317af15c384e4735a3575458a06144", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,6 +1,6 @@\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut, SeekFrom};\n+use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::iter;\n use crate::mem::{self, ManuallyDrop};\n use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n@@ -414,18 +414,18 @@ impl File {\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n-        self.read_vectored(&mut [IoVecMut::new(buf)])\n+        self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.fd.read(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(buf)])\n+        self.write_vectored(&[IoSlice::new(buf)])\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.fd.write(bufs)\n     }\n "}, {"sha": "cc8f1e16fa01dbe7b9bc790e830d77dd4a97daa9", "filename": "src/libstd/sys/wasi/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -4,15 +4,15 @@ use crate::slice;\n use libc::{__wasi_ciovec_t, __wasi_iovec_t, c_void};\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: __wasi_ciovec_t,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice {\n             vec: __wasi_ciovec_t {\n                 buf: buf.as_ptr() as *const c_void,\n                 buf_len: buf.len(),\n@@ -29,15 +29,15 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: __wasi_iovec_t,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut {\n             vec: __wasi_iovec_t {\n                 buf: buf.as_mut_ptr() as *mut c_void,\n                 buf_len: buf.len()"}, {"sha": "80f633a8e1f2b84b3c26ea7daee6af896bda09e1", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -44,15 +44,15 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         unsupported()\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         unsupported()\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         unsupported()\n     }\n "}, {"sha": "9f07f054362feb550124adaaf5f3951dae58ed3c", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "2bf8d803c01bb2ae37f47a286d3936f493602127", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::libc;\n use crate::mem::ManuallyDrop;\n use crate::sys::fd::WasiFd;\n@@ -13,10 +13,10 @@ impl Stdin {\n     }\n \n     pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n-        self.read_vectored(&mut [IoVecMut::new(data)])\n+        self.read_vectored(&mut [IoSliceMut::new(data)])\n     }\n \n-    pub fn read_vectored(&self, data: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, data: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDIN_FILENO as u32) })\n             .read(data)\n     }\n@@ -28,10 +28,10 @@ impl Stdout {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(data)])\n+        self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDOUT_FILENO as u32) })\n             .write(data)\n     }\n@@ -47,10 +47,10 @@ impl Stderr {\n     }\n \n     pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n-        self.write_vectored(&[IoVec::new(data)])\n+        self.write_vectored(&[IoSlice::new(data)])\n     }\n \n-    pub fn write_vectored(&self, data: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, data: &[IoSlice<'_>]) -> io::Result<usize> {\n         ManuallyDrop::new(unsafe { WasiFd::from_raw(libc::STDERR_FILENO as u32) })\n             .write(data)\n     }"}, {"sha": "e9095b375fe5d52205bd886827290f84bb5f8069", "filename": "src/libstd/sys/wasm/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::ffi::OsString;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n-use crate::io::{self, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, SeekFrom, IoSlice, IoSliceMut};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n use crate::sys::{unsupported, Void};\n@@ -200,15 +200,15 @@ impl File {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "4b423a5cbc11a0e2f8d88372304928ae1df9ecbc", "filename": "src/libstd/sys/wasm/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,9 +1,9 @@\n-pub struct IoVec<'a>(&'a [u8]);\n+pub struct IoSlice<'a>(&'a [u8]);\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n-        IoVec(buf)\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n+        IoSlice(buf)\n     }\n \n     #[inline]\n@@ -12,12 +12,12 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a>(&'a mut [u8]);\n+pub struct IoSliceMut<'a>(&'a mut [u8]);\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n-        IoVecMut(buf)\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n+        IoSliceMut(buf)\n     }\n \n     #[inline]"}, {"sha": "d50f989d2bb5f0cbf15779390b2289937ff8524a", "filename": "src/libstd/sys/wasm/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,5 +1,5 @@\n use crate::fmt;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n@@ -40,15 +40,15 @@ impl TcpStream {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "9f07f054362feb550124adaaf5f3951dae58ed3c", "filename": "src/libstd/sys/wasm/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,4 +1,4 @@\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::sys::Void;\n \n pub struct AnonPipe(Void);\n@@ -8,15 +8,15 @@ impl AnonPipe {\n         match self.0 {}\n     }\n \n-    pub fn read_vectored(&self, _bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n     pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n         match self.0 {}\n     }\n \n-    pub fn write_vectored(&self, _bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         match self.0 {}\n     }\n "}, {"sha": "d5cb205c85f5214c99dbf47c15dc46b00f1a074d", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -2,7 +2,7 @@ use crate::os::windows::prelude::*;\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::io::{self, Error, SeekFrom, IoVec, IoVecMut};\n+use crate::io::{self, Error, SeekFrom, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n@@ -314,7 +314,7 @@ impl File {\n         self.handle.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.handle.read_vectored(bufs)\n     }\n \n@@ -326,7 +326,7 @@ impl File {\n         self.handle.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.handle.write_vectored(bufs)\n     }\n "}, {"sha": "3e5aa69335461dfe608c42a81876b9733f4d4699", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_handle\")]\n \n use crate::cmp;\n-use crate::io::{self, ErrorKind, Read, IoVec, IoVecMut};\n+use crate::io::{self, ErrorKind, Read, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::ops::Deref;\n use crate::ptr;\n@@ -89,7 +89,7 @@ impl RawHandle {\n         }\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         crate::io::default_read_vectored(|buf| self.read(buf), bufs)\n     }\n \n@@ -173,7 +173,7 @@ impl RawHandle {\n         Ok(amt as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         crate::io::default_write_vectored(|buf| self.write(buf), bufs)\n     }\n \n@@ -208,7 +208,7 @@ impl<'a> Read for &'a RawHandle {\n         (**self).read(buf)\n     }\n \n-    fn read_vectored(&mut self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    fn read_vectored(&mut self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         (**self).read_vectored(bufs)\n     }\n }"}, {"sha": "c045a63e9118f7171d00931bdb289c214e0c44f4", "filename": "src/libstd/sys/windows/io.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fio.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -3,16 +3,16 @@ use crate::slice;\n use crate::sys::c;\n \n #[repr(transparent)]\n-pub struct IoVec<'a> {\n+pub struct IoSlice<'a> {\n     vec: c::WSABUF,\n     _p: PhantomData<&'a [u8]>,\n }\n \n-impl<'a> IoVec<'a> {\n+impl<'a> IoSlice<'a> {\n     #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n+    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n         assert!(buf.len() <= c::ULONG::max_value() as usize);\n-        IoVec {\n+        IoSlice {\n             vec: c::WSABUF {\n                 len: buf.len() as c::ULONG,\n                 buf: buf.as_ptr() as *mut u8 as *mut c::CHAR,\n@@ -29,16 +29,16 @@ impl<'a> IoVec<'a> {\n     }\n }\n \n-pub struct IoVecMut<'a> {\n+pub struct IoSliceMut<'a> {\n     vec: c::WSABUF,\n     _p: PhantomData<&'a mut [u8]>,\n }\n \n-impl<'a> IoVecMut<'a> {\n+impl<'a> IoSliceMut<'a> {\n     #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n+    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n         assert!(buf.len() <= c::ULONG::max_value() as usize);\n-        IoVecMut {\n+        IoSliceMut {\n             vec: c::WSABUF {\n                 len: buf.len() as c::ULONG,\n                 buf: buf.as_mut_ptr() as *mut c::CHAR,"}, {"sha": "7dd1af5441bfb86352c81e4ea5984dd6bd8c8929", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n #![unstable(issue = \"0\", feature = \"windows_net\")]\n \n use crate::cmp;\n-use crate::io::{self, Read, IoVec, IoVecMut};\n+use crate::io::{self, Read, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown};\n use crate::ptr;\n@@ -208,7 +208,7 @@ impl Socket {\n         self.recv_with_flags(buf, 0)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         // On unix when a socket is shut down all further reads return 0, so we\n         // do the same on windows to map a shut down socket to returning EOF.\n         let len = cmp::min(bufs.len(), c::DWORD::max_value() as usize) as c::DWORD;\n@@ -268,7 +268,7 @@ impl Socket {\n         self.recv_from_with_flags(buf, c::MSG_PEEK)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         let len = cmp::min(bufs.len(), c::DWORD::max_value() as usize) as c::DWORD;\n         let mut nwritten = 0;\n         unsafe {"}, {"sha": "493ee8a9a2d7c72ccbd26ef90fc429addcb7eecb", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::os::windows::prelude::*;\n \n use crate::ffi::OsStr;\n-use crate::io::{self, IoVec, IoVecMut};\n+use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::path::Path;\n use crate::ptr;\n@@ -166,15 +166,15 @@ impl AnonPipe {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n }"}, {"sha": "cf1dc20b52fc6c239cf7fdcac678c808e7eddada", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -1,7 +1,7 @@\n use crate::cmp;\n use crate::ffi::CString;\n use crate::fmt;\n-use crate::io::{self, Error, ErrorKind, IoVec, IoVecMut};\n+use crate::io::{self, Error, ErrorKind, IoSlice, IoSliceMut};\n use crate::mem;\n use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::ptr;\n@@ -256,7 +256,7 @@ impl TcpStream {\n         self.inner.read(buf)\n     }\n \n-    pub fn read_vectored(&self, bufs: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n         self.inner.read_vectored(bufs)\n     }\n \n@@ -271,7 +271,7 @@ impl TcpStream {\n         Ok(ret as usize)\n     }\n \n-    pub fn write_vectored(&self, bufs: &[IoVec<'_>]) -> io::Result<usize> {\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n         self.inner.write_vectored(bufs)\n     }\n "}, {"sha": "e2bcd4d40af7f371bb5555e7266cf4874d68c348", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd177f3ea31e47b94dd400239a9badfe2bd47355/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=bd177f3ea31e47b94dd400239a9badfe2bd47355", "patch": "@@ -135,8 +135,8 @@ fn check(cache: &mut Cache,\n        file.ends_with(\"ty/struct.Slice.html\") ||\n        file.ends_with(\"ty/enum.Attributes.html\") ||\n        file.ends_with(\"ty/struct.SymbolName.html\") ||\n-       file.ends_with(\"io/struct.IoVec.html\") ||\n-       file.ends_with(\"io/struct.IoVecMut.html\") {\n+       file.ends_with(\"io/struct.IoSlice.html\") ||\n+       file.ends_with(\"io/struct.IoSliceMut.html\") {\n         return None;\n     }\n     // FIXME(#32553)"}]}