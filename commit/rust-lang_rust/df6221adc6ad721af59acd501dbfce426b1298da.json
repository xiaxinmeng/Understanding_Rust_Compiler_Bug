{"sha": "df6221adc6ad721af59acd501dbfce426b1298da", "node_id": "C_kwDOAAsO6NoAKGRmNjIyMWFkYzZhZDcyMWFmNTlhY2Q1MDFkYmZjZTQyNmIxMjk4ZGE", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-26T21:40:48Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-09-01T13:04:25Z"}, "message": "Sort tests at compile time, not at startup\n\nRecently, another Miri user was trying to run `cargo miri test` on the\ncrate `iced-x86` with `--features=code_asm,mvex`. This configuration has\na startup time of ~18 minutes. That's ~18 minutes before any tests even\nstart to run. The fact that this crate has over 26,000 tests and Miri is\nslow makes a lot of code which is otherwise a bit sloppy but fine into a\nhuge runtime issue.\n\nSorting the tests when the test harness is created instead of at startup\ntime knocks just under 4 minutes out of those ~18 minutes. I have ways\nto remove most of the rest of the startup time, but this change requires\ncoordinating changes of both the compiler and libtest, so I'm sending it\nseparately.", "tree": {"sha": "ac6198562d44420adf93c680ed6861113809bcfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6198562d44420adf93c680ed6861113809bcfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6221adc6ad721af59acd501dbfce426b1298da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6221adc6ad721af59acd501dbfce426b1298da", "html_url": "https://github.com/rust-lang/rust/commit/df6221adc6ad721af59acd501dbfce426b1298da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6221adc6ad721af59acd501dbfce426b1298da/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9898a7947059433d08357cdaaba84c4705873d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9898a7947059433d08357cdaaba84c4705873d", "html_url": "https://github.com/rust-lang/rust/commit/4f9898a7947059433d08357cdaaba84c4705873d"}], "stats": {"total": 187, "additions": 130, "deletions": 57}, "files": [{"sha": "92e70bfc779eb52a7ec8dbba793d56f1a70140c4", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -36,13 +36,22 @@ pub fn expand_test_case(\n     let sp = ecx.with_def_site_ctxt(attr_sp);\n     let mut item = anno_item.expect_item();\n     item = item.map(|mut item| {\n+        let test_path_symbol = Symbol::intern(&item_path(\n+            // skip the name of the root module\n+            &ecx.current_expansion.module.mod_path[1..],\n+            &item.ident,\n+        ));\n         item.vis = ast::Visibility {\n             span: item.vis.span,\n             kind: ast::VisibilityKind::Public,\n             tokens: None,\n         };\n         item.ident.span = item.ident.span.with_ctxt(sp.ctxt());\n-        item.attrs.push(ecx.attribute(ecx.meta_word(sp, sym::rustc_test_marker)));\n+        item.attrs.push(ecx.attribute(attr::mk_name_value_item_str(\n+            Ident::new(sym::rustc_test_marker, sp),\n+            test_path_symbol,\n+            sp,\n+        )));\n         item\n     });\n \n@@ -215,6 +224,12 @@ pub fn expand_test_or_bench(\n         )\n     };\n \n+    let test_path_symbol = Symbol::intern(&item_path(\n+        // skip the name of the root module\n+        &cx.current_expansion.module.mod_path[1..],\n+        &item.ident,\n+    ));\n+\n     let mut test_const = cx.item(\n         sp,\n         Ident::new(item.ident.name, sp),\n@@ -224,9 +239,14 @@ pub fn expand_test_or_bench(\n                 Ident::new(sym::cfg, attr_sp),\n                 vec![attr::mk_nested_word_item(Ident::new(sym::test, attr_sp))],\n             )),\n-            // #[rustc_test_marker]\n-            cx.attribute(cx.meta_word(attr_sp, sym::rustc_test_marker)),\n-        ],\n+            // #[rustc_test_marker = \"test_case_sort_key\"]\n+            cx.attribute(attr::mk_name_value_item_str(\n+                Ident::new(sym::rustc_test_marker, attr_sp),\n+                test_path_symbol,\n+                attr_sp,\n+            )),\n+        ]\n+        .into(),\n         // const $ident: test::TestDescAndFn =\n         ast::ItemKind::Const(\n             ast::Defaultness::Final,\n@@ -250,14 +270,7 @@ pub fn expand_test_or_bench(\n                                         cx.expr_call(\n                                             sp,\n                                             cx.expr_path(test_path(\"StaticTestName\")),\n-                                            vec![cx.expr_str(\n-                                                sp,\n-                                                Symbol::intern(&item_path(\n-                                                    // skip the name of the root module\n-                                                    &cx.current_expansion.module.mod_path[1..],\n-                                                    &item.ident,\n-                                                )),\n-                                            )],\n+                                            vec![cx.expr_str(sp, test_path_symbol)],\n                                         ),\n                                     ),\n                                     // ignore: true | false"}, {"sha": "a06c2e64193143c95112ea778df730240d9db9e1", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -19,9 +19,11 @@ use tracing::debug;\n \n use std::{iter, mem};\n \n+#[derive(Clone)]\n struct Test {\n     span: Span,\n     ident: Ident,\n+    name: Symbol,\n }\n \n struct TestCtxt<'a> {\n@@ -121,10 +123,10 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n \n     fn flat_map_item(&mut self, i: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         let mut item = i.into_inner();\n-        if is_test_case(&self.cx.ext_cx.sess, &item) {\n+        if let Some(name) = get_test_name(&self.cx.ext_cx.sess, &item) {\n             debug!(\"this is a test item\");\n \n-            let test = Test { span: item.span, ident: item.ident };\n+            let test = Test { span: item.span, ident: item.ident, name };\n             self.tests.push(test);\n         }\n \n@@ -355,9 +357,12 @@ fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     debug!(\"building test vector from {} tests\", cx.test_cases.len());\n     let ecx = &cx.ext_cx;\n \n+    let mut tests = cx.test_cases.clone();\n+    tests.sort_by(|a, b| a.name.as_str().cmp(&b.name.as_str()));\n+\n     ecx.expr_array_ref(\n         sp,\n-        cx.test_cases\n+        tests\n             .iter()\n             .map(|test| {\n                 ecx.expr_addr_of(test.span, ecx.expr_path(ecx.path(test.span, vec![test.ident])))\n@@ -366,8 +371,8 @@ fn mk_tests_slice(cx: &TestCtxt<'_>, sp: Span) -> P<ast::Expr> {\n     )\n }\n \n-fn is_test_case(sess: &Session, i: &ast::Item) -> bool {\n-    sess.contains_name(&i.attrs, sym::rustc_test_marker)\n+fn get_test_name(sess: &Session, i: &ast::Item) -> Option<Symbol> {\n+    sess.first_attr_value_str_by_name(&i.attrs, sym::rustc_test_marker)\n }\n \n fn get_test_runner("}, {"sha": "7c063cdec529a41cfb609cc1f9d24862d2e2c6ed", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -727,7 +727,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n          for reserving for `for<T> From<!> for T` impl\"\n     ),\n     rustc_attr!(\n-        rustc_test_marker, Normal, template!(Word), WarnFollowing,\n+        rustc_test_marker, Normal, template!(NameValueStr: \"name\"), WarnFollowing,\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\",\n     ),\n     rustc_attr!("}, {"sha": "b1270c272710dd69a6c74a2adcaf75540225a245", "filename": "library/test/src/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -147,7 +147,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n     let mut ntest = 0;\n     let mut nbench = 0;\n \n-    for test in filter_tests(&opts, tests) {\n+    for test in filter_tests(&opts, tests).into_iter() {\n         use crate::TestFn::*;\n \n         let TestDescAndFn { desc: TestDesc { name, .. }, testfn } = test;"}, {"sha": "e39d383728e8c3c908fb64a33b836ed1cca47ac1", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -242,20 +242,20 @@ where\n     let event = TestEvent::TeFiltered(filtered_descs, shuffle_seed);\n     notify_about_test_event(event)?;\n \n-    let (filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n+    let (mut filtered_tests, filtered_benchs): (Vec<_>, _) = filtered_tests\n         .into_iter()\n         .enumerate()\n         .map(|(i, e)| (TestId(i), e))\n         .partition(|(_, e)| matches!(e.testfn, StaticTestFn(_) | DynTestFn(_)));\n \n     let concurrency = opts.test_threads.unwrap_or_else(get_concurrency);\n \n-    let mut remaining = filtered_tests;\n     if let Some(shuffle_seed) = shuffle_seed {\n-        shuffle_tests(shuffle_seed, &mut remaining);\n-    } else {\n-        remaining.reverse();\n+        shuffle_tests(shuffle_seed, &mut filtered_tests);\n     }\n+    // Store the tests in a VecDeque so we can efficiently remove the first element to run the\n+    // tests in the order they were passed (unless shuffled).\n+    let mut remaining = VecDeque::from(filtered_tests);\n     let mut pending = 0;\n \n     let (tx, rx) = channel::<CompletedTest>();\n@@ -295,7 +295,7 @@ where\n \n     if concurrency == 1 {\n         while !remaining.is_empty() {\n-            let (id, test) = remaining.pop().unwrap();\n+            let (id, test) = remaining.pop_front().unwrap();\n             let event = TestEvent::TeWait(test.desc.clone());\n             notify_about_test_event(event)?;\n             let join_handle =\n@@ -309,7 +309,7 @@ where\n     } else {\n         while pending > 0 || !remaining.is_empty() {\n             while pending < concurrency && !remaining.is_empty() {\n-                let (id, test) = remaining.pop().unwrap();\n+                let (id, test) = remaining.pop_front().unwrap();\n                 let timeout = time::get_default_test_timeout();\n                 let desc = test.desc.clone();\n \n@@ -421,9 +421,6 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n         RunIgnored::No => {}\n     }\n \n-    // Sort the tests alphabetically\n-    filtered.sort_by(|t1, t2| t1.desc.name.as_slice().cmp(t2.desc.name.as_slice()));\n-\n     filtered\n }\n "}, {"sha": "79489c40f4e0751f9985563110dda7955f7fef88", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -600,33 +600,6 @@ fn sample_tests() -> Vec<TestDescAndFn> {\n     tests\n }\n \n-#[test]\n-pub fn sort_tests() {\n-    let mut opts = TestOpts::new();\n-    opts.run_tests = true;\n-\n-    let tests = sample_tests();\n-    let filtered = filter_tests(&opts, tests);\n-\n-    let expected = vec![\n-        \"isize::test_pow\".to_string(),\n-        \"isize::test_to_str\".to_string(),\n-        \"sha1::test\".to_string(),\n-        \"test::do_not_run_ignored_tests\".to_string(),\n-        \"test::filter_for_ignored_option\".to_string(),\n-        \"test::first_free_arg_should_be_a_filter\".to_string(),\n-        \"test::ignored_tests_result_in_ignored\".to_string(),\n-        \"test::parse_ignored_flag\".to_string(),\n-        \"test::parse_include_ignored_flag\".to_string(),\n-        \"test::run_include_ignored_option\".to_string(),\n-        \"test::sort_tests\".to_string(),\n-    ];\n-\n-    for (a, b) in expected.iter().zip(filtered) {\n-        assert_eq!(*a, b.desc.name.to_string());\n-    }\n-}\n-\n #[test]\n pub fn shuffle_tests() {\n     let mut opts = TestOpts::new();"}, {"sha": "6201f3d9ce1f4999dfb7d8729a7a7694de32a48d", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -210,12 +210,13 @@ pub(crate) fn run(options: RustdocOptions) -> Result<(), ErrorGuaranteed> {\n pub(crate) fn run_tests(\n     mut test_args: Vec<String>,\n     nocapture: bool,\n-    tests: Vec<test::TestDescAndFn>,\n+    mut tests: Vec<test::TestDescAndFn>,\n ) {\n     test_args.insert(0, \"rustdoctest\".to_string());\n     if nocapture {\n         test_args.push(\"--nocapture\".to_string());\n     }\n+    tests.sort_by(|a, b| a.desc.name.as_slice().cmp(&b.desc.name.as_slice()));\n     test::test_main(&test_args, tests, None);\n }\n "}, {"sha": "15dcd4ed97df4a51c389d0bd62482d06d8b522e3", "filename": "src/test/pretty/tests-are-sorted.pp", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftest%2Fpretty%2Ftests-are-sorted.pp", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftest%2Fpretty%2Ftests-are-sorted.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftests-are-sorted.pp?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -0,0 +1,69 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#[prelude_import]\n+use ::std::prelude::rust_2015::*;\n+#[macro_use]\n+extern crate std;\n+// compile-flags: --crate-type=lib --test\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:tests-are-sorted.pp\n+\n+extern crate test;\n+#[cfg(test)]\n+#[rustc_test_marker = \"m_test\"]\n+pub const m_test: test::TestDescAndFn =\n+    test::TestDescAndFn {\n+        desc: test::TestDesc {\n+            name: test::StaticTestName(\"m_test\"),\n+            ignore: false,\n+            ignore_message: ::core::option::Option::None,\n+            compile_fail: false,\n+            no_run: false,\n+            should_panic: test::ShouldPanic::No,\n+            test_type: test::TestType::Unknown,\n+        },\n+        testfn: test::StaticTestFn(|| test::assert_test_result(m_test())),\n+    };\n+fn m_test() {}\n+\n+extern crate test;\n+#[cfg(test)]\n+#[rustc_test_marker = \"z_test\"]\n+pub const z_test: test::TestDescAndFn =\n+    test::TestDescAndFn {\n+        desc: test::TestDesc {\n+            name: test::StaticTestName(\"z_test\"),\n+            ignore: false,\n+            ignore_message: ::core::option::Option::None,\n+            compile_fail: false,\n+            no_run: false,\n+            should_panic: test::ShouldPanic::No,\n+            test_type: test::TestType::Unknown,\n+        },\n+        testfn: test::StaticTestFn(|| test::assert_test_result(z_test())),\n+    };\n+fn z_test() {}\n+\n+extern crate test;\n+#[cfg(test)]\n+#[rustc_test_marker = \"a_test\"]\n+pub const a_test: test::TestDescAndFn =\n+    test::TestDescAndFn {\n+        desc: test::TestDesc {\n+            name: test::StaticTestName(\"a_test\"),\n+            ignore: false,\n+            ignore_message: ::core::option::Option::None,\n+            compile_fail: false,\n+            no_run: false,\n+            should_panic: test::ShouldPanic::No,\n+            test_type: test::TestType::Unknown,\n+        },\n+        testfn: test::StaticTestFn(|| test::assert_test_result(a_test())),\n+    };\n+fn a_test() {}\n+#[rustc_main]\n+pub fn main() -> () {\n+    extern crate test;\n+    test::test_main_static(&[&a_test, &m_test, &z_test])\n+}"}, {"sha": "1f737d54719301bf43c56b4379b4b9d29e316b44", "filename": "src/test/pretty/tests-are-sorted.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftest%2Fpretty%2Ftests-are-sorted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftest%2Fpretty%2Ftests-are-sorted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftests-are-sorted.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --crate-type=lib --test\n+// pretty-compare-only\n+// pretty-mode:expanded\n+// pp-exact:tests-are-sorted.pp\n+\n+#[test]\n+fn m_test() {}\n+\n+#[test]\n+fn z_test() {}\n+\n+#[test]\n+fn a_test() {}"}, {"sha": "f3f06bde6f16621a4b7aaf49140fc2a54b01a827", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6221adc6ad721af59acd501dbfce426b1298da/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=df6221adc6ad721af59acd501dbfce426b1298da", "patch": "@@ -401,6 +401,8 @@ pub fn run_tests(config: Config) {\n         make_tests(c, &mut tests);\n     }\n \n+    tests.sort_by(|a, b| a.desc.name.as_slice().cmp(&b.desc.name.as_slice()));\n+\n     let res = test::run_tests_console(&opts, tests);\n     match res {\n         Ok(true) => {}"}]}