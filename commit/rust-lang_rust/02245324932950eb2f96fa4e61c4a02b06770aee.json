{"sha": "02245324932950eb2f96fa4e61c4a02b06770aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMjQ1MzI0OTMyOTUwZWIyZjk2ZmE0ZTYxYzRhMDJiMDY3NzBhZWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-05T18:26:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-05T18:26:54Z"}, "message": "Rollup merge of #62133 - petrochenkov:norustc, r=eddyb\n\nFeature gate `rustc` attributes harder\n\nFixes https://github.com/rust-lang/rust/issues/62116", "tree": {"sha": "0f2471b94373342f963bd44111cb7fae4425e530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2471b94373342f963bd44111cb7fae4425e530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02245324932950eb2f96fa4e61c4a02b06770aee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdH5ZuCRBK7hj4Ov3rIwAAdHIIAEkP6OZYLESUhgytbqZ/H9Ad\n5VRn6ltNSkJFKEQ1+FrbHhrTK8ii7TM4I6iFtr9KRjv4fNinYA8MVyIVBnv6LRsN\nTkyIw4PfLM+3kaj9UWEfV4zqdVCRPRkasQO9eTJTaR8teH5szp9qmEcQ+i7koXji\nFPFeV10dA232NFQUTI3ZDItS3iPjnFrcLidBm3z/+6g5oFSlFMc4mJBsLfMcTUp6\ng6cFX62nMGAsFFQAEyO5x1qAOphCRVvWDBR7kuV70c3Wuvu/9mdLJAVM4jfvtiYQ\nt0n4c+sqvrEFSeJW0dZG2g+RmvdiFnOlif5l4C028aoCFqjaD1K4mitSetcxjOw=\n=EzoL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f2471b94373342f963bd44111cb7fae4425e530\nparent 40841e049a651f41e362f8dddbe509a159d318ba\nparent e4e7eb2d5891ceb9241f769540dd413e90020971\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562351214 +0200\ncommitter GitHub <noreply@github.com> 1562351214 +0200\n\nRollup merge of #62133 - petrochenkov:norustc, r=eddyb\n\nFeature gate `rustc` attributes harder\n\nFixes https://github.com/rust-lang/rust/issues/62116\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02245324932950eb2f96fa4e61c4a02b06770aee", "html_url": "https://github.com/rust-lang/rust/commit/02245324932950eb2f96fa4e61c4a02b06770aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02245324932950eb2f96fa4e61c4a02b06770aee/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40841e049a651f41e362f8dddbe509a159d318ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/40841e049a651f41e362f8dddbe509a159d318ba", "html_url": "https://github.com/rust-lang/rust/commit/40841e049a651f41e362f8dddbe509a159d318ba"}, {"sha": "e4e7eb2d5891ceb9241f769540dd413e90020971", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e7eb2d5891ceb9241f769540dd413e90020971", "html_url": "https://github.com/rust-lang/rust/commit/e4e7eb2d5891ceb9241f769540dd413e90020971"}], "stats": {"total": 442, "additions": 251, "deletions": 191}, "files": [{"sha": "6ab64a11237003c6567da0149f93332417caaadb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -74,6 +74,7 @@\n #![feature(concat_idents)]\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n+#![feature(custom_inner_attributes)]\n #![feature(doc_cfg)]\n #![feature(doc_spotlight)]\n #![feature(extern_types)]"}, {"sha": "dd0beee2104e8cf07a28af3d18d4a527b7824692", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -19,9 +19,8 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::{\n-    feature_err, is_builtin_attr_name, AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES,\n-};\n+use syntax::feature_gate::{feature_err, emit_feature_err, is_builtin_attr_name};\n+use syntax::feature_gate::{AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES};\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -298,12 +297,25 @@ impl<'a> Resolver<'a> {\n         let res = self.resolve_macro_to_res_inner(path, kind, parent_scope, trace, force);\n \n         // Report errors and enforce feature gates for the resolved macro.\n+        let features = self.session.features_untracked();\n         if res != Err(Determinacy::Undetermined) {\n             // Do not report duplicated errors on every undetermined resolution.\n             for segment in &path.segments {\n                 if let Some(args) = &segment.args {\n                     self.session.span_err(args.span(), \"generic arguments in macro path\");\n                 }\n+                if kind == MacroKind::Attr && !features.rustc_attrs &&\n+                   segment.ident.as_str().starts_with(\"rustc\") {\n+                    let msg = \"attributes starting with `rustc` are \\\n+                               reserved for use by the `rustc` compiler\";\n+                    emit_feature_err(\n+                        &self.session.parse_sess,\n+                        sym::rustc_attrs,\n+                        segment.ident.span,\n+                        GateIssue::Language,\n+                        msg,\n+                    );\n+                }\n             }\n         }\n \n@@ -320,24 +332,15 @@ impl<'a> Resolver<'a> {\n             }\n             Res::NonMacroAttr(attr_kind) => {\n                 if kind == MacroKind::Attr {\n-                    let features = self.session.features_untracked();\n                     if attr_kind == NonMacroAttrKind::Custom {\n                         assert!(path.segments.len() == 1);\n-                        let name = path.segments[0].ident.as_str();\n-                        if name.starts_with(\"rustc_\") {\n-                            if !features.rustc_attrs {\n-                                let msg = \"unless otherwise specified, attributes with the prefix \\\n-                                           `rustc_` are reserved for internal compiler diagnostics\";\n-                                self.report_unknown_attribute(path.span, &name, msg,\n-                                                              sym::rustc_attrs);\n-                            }\n-                        } else if !features.custom_attribute {\n+                        if !features.custom_attribute {\n                             let msg = format!(\"The attribute `{}` is currently unknown to the \\\n                                                compiler and may have meaning added to it in the \\\n                                                future\", path);\n                             self.report_unknown_attribute(\n                                 path.span,\n-                                &name,\n+                                &path.segments[0].ident.as_str(),\n                                 &msg,\n                                 sym::custom_attribute,\n                             );"}, {"sha": "6fbd2ab7c43f2f7438071fe69543cee2852da455", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1504,9 +1504,7 @@ impl<'feat> ExpansionConfig<'feat> {\n     }\n \n     fn enable_custom_inner_attributes(&self) -> bool {\n-        self.features.map_or(false, |features| {\n-            features.custom_inner_attributes || features.custom_attribute || features.rustc_attrs\n-        })\n+        self.features.map_or(false, |features| features.custom_inner_attributes)\n     }\n }\n "}, {"sha": "e1e39faaad4adfb626b57153acaa5a511ca11ef8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1296,6 +1296,18 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                     attribute is just used for rustc unit \\\n                                                     tests and will never be stable\",\n                                                     cfg_fn!(rustc_attrs))),\n+    (sym::rustc_dump_env_program_clauses, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                    sym::rustc_attrs,\n+                                                    \"the `#[rustc_dump_env_program_clauses]` \\\n+                                                    attribute is just used for rustc unit \\\n+                                                    tests and will never be stable\",\n+                                                    cfg_fn!(rustc_attrs))),\n+    (sym::rustc_object_lifetime_default, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                    sym::rustc_attrs,\n+                                                    \"the `#[rustc_object_lifetime_default]` \\\n+                                                    attribute is just used for rustc unit \\\n+                                                    tests and will never be stable\",\n+                                                    cfg_fn!(rustc_attrs))),\n     (sym::rustc_test_marker, Normal, template!(Word), Gated(Stability::Unstable,\n                                     sym::rustc_attrs,\n                                     \"the `#[rustc_test_marker]` attribute \\\n@@ -1357,6 +1369,26 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n                                                 \"internal implementation detail\",\n                                                 cfg_fn!(rustc_attrs))),\n \n+    (sym::rustc_allocator_nounwind, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n+    (sym::rustc_doc_only_macro, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n+    (sym::rustc_promotable, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n+    (sym::rustc_allow_const_fn_ptr, Whitelisted, template!(Word), Gated(Stability::Unstable,\n+                                                sym::rustc_attrs,\n+                                                \"internal implementation detail\",\n+                                                cfg_fn!(rustc_attrs))),\n+\n     (sym::rustc_dummy, Normal, template!(Word /* doesn't matter*/), Gated(Stability::Unstable,\n                                          sym::rustc_attrs,\n                                          \"used by the test suite\",\n@@ -1643,6 +1675,14 @@ impl<'a> Context<'a> {\n             }\n             debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n             return;\n+        } else {\n+            for segment in &attr.path.segments {\n+                if segment.ident.as_str().starts_with(\"rustc\") {\n+                    let msg = \"attributes starting with `rustc` are \\\n+                               reserved for use by the `rustc` compiler\";\n+                    gate_feature!(self, rustc_attrs, segment.ident.span, msg);\n+                }\n+            }\n         }\n         for &(n, ty) in self.plugin_attributes {\n             if attr.path == n {\n@@ -1653,19 +1693,13 @@ impl<'a> Context<'a> {\n                 return;\n             }\n         }\n-        if !attr::is_known(attr) {\n-            if attr.name_or_empty().as_str().starts_with(\"rustc_\") {\n-                let msg = \"unless otherwise specified, attributes with the prefix `rustc_` \\\n-                           are reserved for internal compiler diagnostics\";\n-                gate_feature!(self, rustc_attrs, attr.span, msg);\n-            } else if !is_macro {\n-                // Only run the custom attribute lint during regular feature gate\n-                // checking. Macro gating runs before the plugin attributes are\n-                // registered, so we skip this in that case.\n-                let msg = format!(\"The attribute `{}` is currently unknown to the compiler and \\\n-                                   may have meaning added to it in the future\", attr.path);\n-                gate_feature!(self, custom_attribute, attr.span, &msg);\n-            }\n+        if !is_macro && !attr::is_known(attr) {\n+            // Only run the custom attribute lint during regular feature gate\n+            // checking. Macro gating runs before the plugin attributes are\n+            // registered, so we skip this in that case.\n+            let msg = format!(\"The attribute `{}` is currently unknown to the compiler and \\\n+                                may have meaning added to it in the future\", attr.path);\n+            gate_feature!(self, custom_attribute, attr.span, &msg);\n         }\n     }\n }"}, {"sha": "35152e7f4babd4a6a28c8bc261979e07dbddcb59", "filename": "src/test/run-pass-fulldeps/issue-15778-pass.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-15778-pass.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -2,12 +2,13 @@\n // ignore-stage1\n // compile-flags: -D crate-not-okay\n \n-#![feature(plugin, rustc_attrs)]\n+#![feature(plugin, custom_attribute, custom_inner_attributes, rustc_attrs)]\n+\n #![plugin(lint_for_crate)]\n #![rustc_crate_okay]\n #![rustc_crate_blue]\n #![rustc_crate_red]\n #![rustc_crate_grey]\n #![rustc_crate_green]\n \n-pub fn main() { }\n+fn main() {}"}, {"sha": "9ebf0fcb1c1925d7c5a10523a879e1bf98cf8780", "filename": "src/test/run-pass/attr-on-generic-formals.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/40841e049a651f41e362f8dddbe509a159d318ba/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40841e049a651f41e362f8dddbe509a159d318ba/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs?ref=40841e049a651f41e362f8dddbe509a159d318ba", "patch": "@@ -1,52 +0,0 @@\n-#![allow(unused_attributes)]\n-\n-// This test ensures we can attach attributes to the formals in all\n-// places where generic parameter lists occur, assuming appropriate\n-// feature gates are enabled.\n-//\n-// (We are prefixing all tested features with `rustc_`, to ensure that\n-// the attributes themselves won't be rejected by the compiler when\n-// using `rustc_attrs` feature. There is a separate compile-fail/ test\n-// ensuring that the attribute feature-gating works in this context.)\n-\n-#![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n-struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n-struct StTy<#[rustc_ty_struct] I>(I);\n-\n-enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n-enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n-\n-trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n-\n-type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n-type TyTy<#[rustc_ty_type] L> = (L, );\n-\n-impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n-impl<#[rustc_ty_inherent] M> StTy<M> { }\n-\n-impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n-    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n-}\n-impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n-    fn foo(&self, _: N) { }\n-}\n-\n-fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n-\n-impl<I> StTy<I> {\n-    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n-}\n-\n-fn hof_lt<Q>(_: Q)\n-    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n-{\n-}\n-\n-fn main() {\n-\n-}"}, {"sha": "df9c8d894652b5b280d5df09b5568c270f05a273", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -6,10 +6,8 @@\n \n struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n \n-impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+impl<#[rustc_dummy] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n     //~^ ERROR trailing attribute after generic parameter\n }\n \n-fn main() {\n-\n-}\n+fn main() {}"}, {"sha": "5b4f5222a2b1404129d01d03eb521ad4221fdc41", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-1.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,8 +1,8 @@\n error: trailing attribute after generic parameter\n-  --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:25\n+  --> $DIR/attrs-with-no-formal-in-generics-1.rs:9:29\n    |\n-LL | impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n-   |                         ^^^^^^^ attributes must go before parameters\n+LL | impl<#[rustc_dummy] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+   |                             ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "d1d044035260bf3fdadc7b641a42fc474f29910f", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -6,7 +6,7 @@\n \n struct RefAny<'a, T>(&'a T);\n \n-impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n+impl<#[rustc_dummy] 'a, #[rustc_dummy] T, #[oops]> RefAny<'a, T> {}\n //~^ ERROR trailing attribute after generic parameter\n \n fn main() {}"}, {"sha": "fce3ff7de78e88ec4a18e8fb712d2a7c45ca9fe4", "filename": "src/test/ui/attributes/attrs-with-no-formal-in-generics-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fattrs-with-no-formal-in-generics-2.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,8 +1,8 @@\n error: trailing attribute after generic parameter\n-  --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:35\n+  --> $DIR/attrs-with-no-formal-in-generics-2.rs:9:43\n    |\n-LL | impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {}\n-   |                                   ^^^^^^^ attributes must go before parameters\n+LL | impl<#[rustc_dummy] 'a, #[rustc_dummy] T, #[oops]> RefAny<'a, T> {}\n+   |                                           ^^^^^^^ attributes must go before parameters\n \n error: aborting due to previous error\n "}, {"sha": "0f9d37292958aa703dabcafad748323c8fe95a83", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -5,7 +5,7 @@ const fn error(_: fn()) {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_allow_const_fn_ptr]\n-//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n+//~^ ERROR internal implementation detail\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "d2ca0c8bc381b5a66e1edda7518cbe726e6fa965", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_feature_gate.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_feature_gate.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,8 +1,8 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n-  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:3\n+error[E0658]: internal implementation detail\n+  --> $DIR/allow_const_fn_ptr_feature_gate.rs:7:1\n    |\n LL | #[rustc_allow_const_fn_ptr]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable"}, {"sha": "d3a2e486416afd9ae47c570f4f8c31c716b8e510", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,6 +1,23 @@\n // Test that `#[rustc_*]` attributes are gated by `rustc_attrs` feature gate.\n \n-#[rustc_foo]\n-//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n+#![feature(decl_macro)]\n \n+mod rustc { pub macro unknown() {} }\n+mod unknown { pub macro rustc() {} }\n+\n+#[rustc::unknown]\n+//~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+//~| ERROR macro `rustc::unknown` may not be used in attributes\n+fn f() {}\n+\n+#[unknown::rustc]\n+//~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+//~| ERROR macro `unknown::rustc` may not be used in attributes\n+fn g() {}\n+\n+#[rustc_dummy]\n+//~^ ERROR used by the test suite\n+#[rustc_unknown]\n+//~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+//~| ERROR attribute `rustc_unknown` is currently unknown\n fn main() {}"}, {"sha": "cdc7b27a749e5f4c21eb31bc814e9b3c6c7f8155", "filename": "src/test/ui/feature-gates/feature-gate-rustc-attrs.stderr", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-attrs.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,12 +1,60 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n-  --> $DIR/feature-gate-rustc-attrs.rs:3:3\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+  --> $DIR/feature-gate-rustc-attrs.rs:8:3\n    |\n-LL | #[rustc_foo]\n-   |   ^^^^^^^^^\n+LL | #[rustc::unknown]\n+   |   ^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: macro `rustc::unknown` may not be used in attributes\n+  --> $DIR/feature-gate-rustc-attrs.rs:8:1\n+   |\n+LL | #[rustc::unknown]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+  --> $DIR/feature-gate-rustc-attrs.rs:13:12\n+   |\n+LL | #[unknown::rustc]\n+   |            ^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: macro `unknown::rustc` may not be used in attributes\n+  --> $DIR/feature-gate-rustc-attrs.rs:13:1\n+   |\n+LL | #[unknown::rustc]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+  --> $DIR/feature-gate-rustc-attrs.rs:20:3\n+   |\n+LL | #[rustc_unknown]\n+   |   ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error[E0658]: The attribute `rustc_unknown` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/feature-gate-rustc-attrs.rs:20:3\n+   |\n+LL | #[rustc_unknown]\n+   |   ^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error[E0658]: used by the test suite\n+  --> $DIR/feature-gate-rustc-attrs.rs:18:1\n+   |\n+LL | #[rustc_dummy]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "3c5cc84c6a6ac7d9e0e94c471de875fccfaa5894", "filename": "src/test/ui/generic/generic-param-attrs.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-param-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-param-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fgeneric-param-attrs.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,44 +1,38 @@\n // This test previously ensured that attributes on formals in generic parameter\n // lists are rejected without a feature gate.\n-//\n-// (We are prefixing all tested features with `rustc_`, to ensure that\n-// the attributes themselves won't be rejected by the compiler when\n-// using `rustc_attrs` feature. There is a separate compile-fail/ test\n-// ensuring that the attribute feature-gating works in this context.)\n \n // build-pass (FIXME(62277): could be check-pass?)\n \n #![feature(rustc_attrs)]\n-#![allow(dead_code)]\n-\n-struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n-struct StTy<#[rustc_ty_struct] I>(I);\n-enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n-enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n-trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n-trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n-type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n-type TyTy<#[rustc_ty_type] L> = (L, );\n-\n-impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n-impl<#[rustc_ty_inherent] M> StTy<M> { }\n-impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+\n+struct StLt<#[rustc_dummy] 'a>(&'a u32);\n+struct StTy<#[rustc_dummy] I>(I);\n+enum EnLt<#[rustc_dummy] 'b> { A(&'b u32), B }\n+enum EnTy<#[rustc_dummy] J> { A(J), B }\n+trait TrLt<#[rustc_dummy] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+trait TrTy<#[rustc_dummy] K> { fn foo(&self, _: K); }\n+type TyLt<#[rustc_dummy] 'd> = &'d u32;\n+type TyTy<#[rustc_dummy] L> = (L, );\n+\n+impl<#[rustc_dummy] 'e> StLt<'e> { }\n+impl<#[rustc_dummy] M> StTy<M> { }\n+impl<#[rustc_dummy] 'f> TrLt<'f> for StLt<'f> {\n     fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n }\n-impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+impl<#[rustc_dummy] N> TrTy<N> for StTy<N> {\n     fn foo(&self, _: N) { }\n }\n \n-fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n-fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+fn f_lt<#[rustc_dummy] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+fn f_ty<#[rustc_dummy] O>(_: O) { }\n \n impl<I> StTy<I> {\n-    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n-    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+    fn m_lt<#[rustc_dummy] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    fn m_ty<#[rustc_dummy] P>(_: P) { }\n }\n \n fn hof_lt<Q>(_: Q)\n-    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    where Q: for <#[rustc_dummy] 'i> Fn(&'i [u32]) -> &'i u32\n {}\n \n fn main() {}"}, {"sha": "fb50dce1af616ec86387b35749d668b3e526d0eb", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,10 +1,7 @@\n-// compile-flags:-Zborrowck=mir -Zverbose\n-\n // Test that we can deduce when projections like `T::Item` outlive the\n // function body. Test that this does not imply that `T: 'a` holds.\n \n-#![allow(warnings)]\n-#![feature(rustc_attrs)]\n+// compile-flags:-Zborrowck=mir -Zverbose\n \n use std::cell::Cell;\n \n@@ -18,7 +15,6 @@ where\n     f(&value, Cell::new(&n));\n }\n \n-#[rustc_errors]\n fn generic1<T: Iterator>(value: T) {\n     // No error here:\n     twice(value, |value_ref, item| invoke1(item));\n@@ -30,7 +26,6 @@ where\n {\n }\n \n-#[rustc_errors]\n fn generic2<T: Iterator>(value: T) {\n     twice(value, |value_ref, item| invoke2(value_ref, item));\n     //~^ ERROR the parameter type `T` may not live long enough"}, {"sha": "9f0c60c1e1705a34424e546f32cc55a44bdb440f", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,5 +1,5 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-implied-bounds.rs:35:18\n+  --> $DIR/projection-implied-bounds.rs:30:18\n    |\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a68c3cf12fd7179a1ecd3adab2a247d0c2fb24e4", "filename": "src/test/ui/nll/ty-outlives/ty-param-implied-bounds.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-implied-bounds.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -4,9 +4,6 @@\n // Test that we assume that universal types like `T` outlive the\n // function body.\n \n-#![allow(warnings)]\n-#![feature(rustc_attrs)]\n-\n use std::cell::Cell;\n \n fn twice<F, T>(value: T, mut f: F)\n@@ -17,7 +14,6 @@ where\n     f(Cell::new(&value));\n }\n \n-#[rustc_errors]\n fn generic<T>(value: T) {\n     // No error here:\n     twice(value, |r| invoke(r));"}, {"sha": "f71c8cd0e0c398f7ebc29a3e59c16a6d2469059c", "filename": "src/test/ui/object-lifetime/object-lifetime-default.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,44 +1,44 @@\n-error: 'a,Ambiguous\n-  --> $DIR/object-lifetime-default.rs:24:1\n+error: BaseDefault\n+  --> $DIR/object-lifetime-default.rs:6:1\n    |\n-LL | struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct A<T>(T);\n+   | ^^^^^^^^^^^^^^^\n \n-error: 'a,'b\n-  --> $DIR/object-lifetime-default.rs:21:1\n+error: BaseDefault\n+  --> $DIR/object-lifetime-default.rs:9:1\n    |\n-LL | struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct B<'a,T>(&'a (), T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'b\n-  --> $DIR/object-lifetime-default.rs:18:1\n+error: 'a\n+  --> $DIR/object-lifetime-default.rs:12:1\n    |\n-LL | struct E<'a,'b:'a,T:'b>(&'a T, &'b T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct C<'a,T:'a>(&'a T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Ambiguous\n   --> $DIR/object-lifetime-default.rs:15:1\n    |\n LL | struct D<'a,'b,T:'a+'b>(&'a T, &'b T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: 'a\n-  --> $DIR/object-lifetime-default.rs:12:1\n+error: 'b\n+  --> $DIR/object-lifetime-default.rs:18:1\n    |\n-LL | struct C<'a,T:'a>(&'a T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct E<'a,'b:'a,T:'b>(&'a T, &'b T);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:9:1\n+error: 'a,'b\n+  --> $DIR/object-lifetime-default.rs:21:1\n    |\n-LL | struct B<'a,T>(&'a (), T);\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | struct F<'a,'b,T:'a,U:'b>(&'a T, &'b U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: BaseDefault\n-  --> $DIR/object-lifetime-default.rs:6:1\n+error: 'a,Ambiguous\n+  --> $DIR/object-lifetime-default.rs:24:1\n    |\n-LL | struct A<T>(T);\n-   | ^^^^^^^^^^^^^^^\n+LL | struct G<'a,'b,T:'a,U:'a+'b>(&'a T, &'b U);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "437ae930934709c94b2e4e54f33cf46bc83a8cb2", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,12 +1,12 @@\n // aux-build:derive-unstable-2.rs\n \n-#![allow(warnings)]\n-\n #[macro_use]\n extern crate derive_unstable_2;\n \n #[derive(Unstable)]\n-//~^ ERROR: reserved for internal compiler\n+//~^ ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+//~| ERROR attribute `rustc_foo` is currently unknown to the compiler\n+\n struct A;\n \n fn main() {"}, {"sha": "803773db88e9636cecdcd07a0d10d59ad37a3c09", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,12 +1,21 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n-  --> $DIR/expand-to-unstable-2.rs:8:10\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+  --> $DIR/expand-to-unstable-2.rs:6:10\n    |\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: The attribute `rustc_foo` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/expand-to-unstable-2.rs:6:10\n+   |\n+LL | #[derive(Unstable)]\n+   |          ^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "cb535362266c00365163e35fd25ce5aa82f32b64", "filename": "src/test/ui/reserved/reserved-attr-on-macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,5 +1,7 @@\n #[rustc_attribute_should_be_reserved]\n-//~^ ERROR unless otherwise specified, attributes with the prefix `rustc_` are reserved\n+//~^ ERROR attribute `rustc_attribute_should_be_reserved` is currently unknown\n+//~| ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+\n macro_rules! foo {\n     () => (());\n }"}, {"sha": "0c62c82017e18fb8c91879fccdb2e195a19a863f", "filename": "src/test/ui/reserved/reserved-attr-on-macro.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freserved%2Freserved-attr-on-macro.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n   --> $DIR/reserved-attr-on-macro.rs:1:3\n    |\n LL | #[rustc_attribute_should_be_reserved]\n@@ -7,14 +7,23 @@ LL | #[rustc_attribute_should_be_reserved]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n+error[E0658]: The attribute `rustc_attribute_should_be_reserved` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/reserved-attr-on-macro.rs:1:3\n+   |\n+LL | #[rustc_attribute_should_be_reserved]\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error: cannot determine resolution for the macro `foo`\n-  --> $DIR/reserved-attr-on-macro.rs:8:5\n+  --> $DIR/reserved-attr-on-macro.rs:10:5\n    |\n LL |     foo!();\n    |     ^^^\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "0e10131ce8d1f4d325935d7d5b0d835db04ff8d9", "filename": "src/test/ui/suggestions/attribute-typos.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.rs?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,13 +1,11 @@\n-#[deprcated]    //~ ERROR E0658\n-fn foo() {}     //~| HELP a built-in attribute with a similar name exists\n-                //~| SUGGESTION deprecated\n-                //~| HELP add #![feature(custom_attribute)] to the crate attributes to enable\n+#[deprcated] //~ ERROR attribute `deprcated` is currently unknown\n+fn foo() {}\n \n-#[tests]        //~ ERROR E0658\n-fn bar() {}     //~| HELP a built-in attribute with a similar name exists\n-                //~| SUGGESTION test\n-                //~| HELP add #![feature(custom_attribute)] to the crate attributes to enable\n+#[tests] //~ ERROR attribute `tests` is currently unknown to the compiler\n+fn bar() {}\n \n-#[rustc_err]    //~ ERROR E0658\n-fn main() {}    //~| HELP add #![feature(rustc_attrs)] to the crate attributes to enable\n-                // don't suggest rustc attributes\n+#[rustc_err]\n+//~^ ERROR attribute `rustc_err` is currently unknown\n+//~| ERROR attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+\n+fn main() {}"}, {"sha": "958688b4d390652f111e5a559de34780c51eab8a", "filename": "src/test/ui/suggestions/attribute-typos.stderr", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02245324932950eb2f96fa4e61c4a02b06770aee/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fattribute-typos.stderr?ref=02245324932950eb2f96fa4e61c4a02b06770aee", "patch": "@@ -1,14 +1,23 @@\n-error[E0658]: unless otherwise specified, attributes with the prefix `rustc_` are reserved for internal compiler diagnostics\n-  --> $DIR/attribute-typos.rs:11:3\n+error[E0658]: attributes starting with `rustc` are reserved for use by the `rustc` compiler\n+  --> $DIR/attribute-typos.rs:7:3\n    |\n LL | #[rustc_err]\n    |   ^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(rustc_attrs)] to the crate attributes to enable\n \n+error[E0658]: The attribute `rustc_err` is currently unknown to the compiler and may have meaning added to it in the future\n+  --> $DIR/attribute-typos.rs:7:3\n+   |\n+LL | #[rustc_err]\n+   |   ^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add #![feature(custom_attribute)] to the crate attributes to enable\n+\n error[E0658]: The attribute `tests` is currently unknown to the compiler and may have meaning added to it in the future\n-  --> $DIR/attribute-typos.rs:6:3\n+  --> $DIR/attribute-typos.rs:4:3\n    |\n LL | #[tests]\n    |   ^^^^^ help: a built-in attribute with a similar name exists: `test`\n@@ -25,6 +34,6 @@ LL | #[deprcated]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add #![feature(custom_attribute)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}