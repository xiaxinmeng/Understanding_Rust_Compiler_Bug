{"sha": "89f1848b556971a4278f2b2385137ca6c9e07094", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZjE4NDhiNTU2OTcxYTQyNzhmMmIyMzg1MTM3Y2E2YzllMDcwOTQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-13T03:50:33Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2015-01-13T03:50:33Z"}, "message": "Initialize memory for BufferedReader buffer\n\nIt's passed to the underlying reader, so uninitialized memory == sad\ntimes.\n\nWe might want to shrink the default buffer size as well. 64k is pretty\nhuge. Java uses 8k by default, and Go uses 4k for reference.", "tree": {"sha": "391a5e2e363c8ff5f69154d8f4dd4e5f2095d1a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/391a5e2e363c8ff5f69154d8f4dd4e5f2095d1a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89f1848b556971a4278f2b2385137ca6c9e07094", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89f1848b556971a4278f2b2385137ca6c9e07094", "html_url": "https://github.com/rust-lang/rust/commit/89f1848b556971a4278f2b2385137ca6c9e07094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89f1848b556971a4278f2b2385137ca6c9e07094/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5fbae33897a8340542f21b6ded913148ca9199", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5fbae33897a8340542f21b6ded913148ca9199", "html_url": "https://github.com/rust-lang/rust/commit/3d5fbae33897a8340542f21b6ded913148ca9199"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "9aee90132155b3dff9ee20d574f3e82967bc53e7", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/89f1848b556971a4278f2b2385137ca6c9e07094/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89f1848b556971a4278f2b2385137ca6c9e07094/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=89f1848b556971a4278f2b2385137ca6c9e07094", "patch": "@@ -15,7 +15,7 @@\n use cmp;\n use fmt;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::{IteratorExt, ExactSizeIterator};\n+use iter::{IteratorExt, ExactSizeIterator, repeat};\n use ops::Drop;\n use option::Option;\n use option::Option::{Some, None};\n@@ -62,17 +62,11 @@ impl<R> fmt::Show for BufferedReader<R> where R: fmt::Show {\n impl<R: Reader> BufferedReader<R> {\n     /// Creates a new `BufferedReader` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {\n-        // It's *much* faster to create an uninitialized buffer than it is to\n-        // fill everything in with 0. This buffer is entirely an implementation\n-        // detail and is never exposed, so we're safe to not initialize\n-        // everything up-front. This allows creation of BufferedReader instances\n-        // to be very cheap (large mallocs are not nearly as expensive as large\n-        // callocs).\n-        let mut buf = Vec::with_capacity(cap);\n-        unsafe { buf.set_len(cap); }\n         BufferedReader {\n             inner: inner,\n-            buf: buf,\n+            // We can't use the same trick here as we do for BufferedWriter,\n+            // since this memory is visible to the inner Reader.\n+            buf: repeat(0).take(cap).collect(),\n             pos: 0,\n             cap: 0,\n         }\n@@ -166,7 +160,12 @@ impl<W> fmt::Show for BufferedWriter<W> where W: fmt::Show {\n impl<W: Writer> BufferedWriter<W> {\n     /// Creates a new `BufferedWriter` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n-        // See comments in BufferedReader for why this uses unsafe code.\n+        // It's *much* faster to create an uninitialized buffer than it is to\n+        // fill everything in with 0. This buffer is entirely an implementation\n+        // detail and is never exposed, so we're safe to not initialize\n+        // everything up-front. This allows creation of BufferedWriter instances\n+        // to be very cheap (large mallocs are not nearly as expensive as large\n+        // callocs).\n         let mut buf = Vec::with_capacity(cap);\n         unsafe { buf.set_len(cap); }\n         BufferedWriter {"}]}