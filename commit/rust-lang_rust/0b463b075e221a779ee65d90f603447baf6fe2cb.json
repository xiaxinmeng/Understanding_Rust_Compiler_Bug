{"sha": "0b463b075e221a779ee65d90f603447baf6fe2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiNDYzYjA3NWUyMjFhNzc5ZWU2NWQ5MGY2MDM0NDdiYWY2ZmUyY2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-17T09:50:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-17T09:50:27Z"}, "message": "Rollup merge of #23329 - jbcrail:rm-syntax-highlight, r=sanxiyn\n\n As suggested by @steveklabnik in #23254, I removed the redundant Rust syntax highlighting from the documentation.", "tree": {"sha": "df1c86ae3fa09eae3899d7cdf9bd7d9293d6cf8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1c86ae3fa09eae3899d7cdf9bd7d9293d6cf8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b463b075e221a779ee65d90f603447baf6fe2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b463b075e221a779ee65d90f603447baf6fe2cb", "html_url": "https://github.com/rust-lang/rust/commit/0b463b075e221a779ee65d90f603447baf6fe2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b463b075e221a779ee65d90f603447baf6fe2cb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46200e5090c94f2ab1812a00c0fd778a6784e2e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/46200e5090c94f2ab1812a00c0fd778a6784e2e9", "html_url": "https://github.com/rust-lang/rust/commit/46200e5090c94f2ab1812a00c0fd778a6784e2e9"}, {"sha": "fcf3f3209accbb9240ea44a24165e35e50eba1d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf3f3209accbb9240ea44a24165e35e50eba1d2", "html_url": "https://github.com/rust-lang/rust/commit/fcf3f3209accbb9240ea44a24165e35e50eba1d2"}], "stats": {"total": 339, "additions": 172, "deletions": 167}, "files": [{"sha": "8befb0579c3a64de42dedceb5b83b915286a5246", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -94,7 +94,7 @@ use heap::deallocate;\n /// With simple pipes, without `Arc`, a copy would have to be made for each\n /// task.\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::Arc;\n /// use std::thread;\n ///"}, {"sha": "451237d75969c8cb409ad485e66cda16eb74e321", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -64,7 +64,7 @@ use core::raw::TraitObject;\n ///\n /// The following two examples are equivalent:\n ///\n-/// ```rust\n+/// ```\n /// #![feature(box_syntax)]\n /// use std::boxed::HEAP;\n ///"}, {"sha": "90fbe04d3482f9f73fbcea9d4c1d90bea4cb4207", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -133,7 +133,7 @@ static FALSE: bool = false;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);"}, {"sha": "4bedbdeb368769a4b2565a184f4168ec85dfb0ec", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -129,7 +129,7 @@ impl<T> ToOwned for T where T: Clone {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::borrow::Cow;\n ///\n /// fn abs_all(input: &mut Cow<[i32]>) {"}, {"sha": "1deb08ad0d1c4f99a849505e4e877d634e58c6f1", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -422,7 +422,7 @@ use string;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::fmt;\n ///\n /// let s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));"}, {"sha": "4993994d46beecbbf8dafe5da007ff3eb018426f", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -136,7 +136,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [5, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n     /// assert!(v == [1, 2, 3, 4, 5]);\n@@ -162,7 +162,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);\n@@ -284,7 +284,7 @@ pub trait SliceExt {\n     /// Print the adjacent pairs of a slice (i.e. `[1,2]`, `[2,3]`,\n     /// `[3,4]`):\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = &[1, 2, 3, 4];\n     /// for win in v.windows(2) {\n     ///     println!(\"{:?}\", win);\n@@ -307,7 +307,7 @@ pub trait SliceExt {\n     /// Print the slice two elements at a time (i.e. `[1,2]`,\n     /// `[3,4]`, `[5]`):\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = &[1, 2, 3, 4, 5];\n     /// for win in v.chunks(2) {\n     ///     println!(\"{:?}\", win);\n@@ -398,7 +398,7 @@ pub trait SliceExt {\n     /// uniquely determined position; the second and third are not\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -533,7 +533,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n     /// v.swap(1, 3);\n     /// assert!(v == [\"a\", \"d\", \"c\", \"b\"]);\n@@ -553,7 +553,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [1, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n@@ -582,7 +582,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [1, 2, 3];\n     /// v.reverse();\n     /// assert!(v == [3, 2, 1]);\n@@ -614,7 +614,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -625,7 +625,7 @@ pub trait SliceExt {\n     ///\n     /// Iterating through permutations one by one.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -642,7 +642,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -662,7 +662,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [-5, 4, 1, -3, 2];\n     ///\n     /// v.sort();\n@@ -684,7 +684,7 @@ pub trait SliceExt {\n     /// uniquely determined position; the second and third are not\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -711,7 +711,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -731,7 +731,7 @@ pub trait SliceExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];"}, {"sha": "b2273646b959e6fc0018ee6536cddecf1bc0a272", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -911,7 +911,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// assert!(\"banana\".ends_with(\"nana\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "d2bc98096f647ba258390c4fbc8317ab55286c29", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -138,7 +138,7 @@ impl String {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::str::Utf8Error;\n     ///\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n@@ -164,7 +164,7 @@ impl String {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n     /// let output = String::from_utf8_lossy(input);\n     /// assert_eq!(output, \"Hello \\u{FFFD}World\");\n@@ -296,7 +296,7 @@ impl String {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// // \ud834\udd1emusic\n     /// let mut v = &mut [0xD834, 0xDD1E, 0x006d, 0x0075,\n     ///                   0x0073, 0x0069, 0x0063];\n@@ -324,7 +324,7 @@ impl String {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// // \ud834\udd1emus<invalid>ic<invalid>\n     /// let v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n     ///           0x0073, 0xDD1E, 0x0069, 0x0063,"}, {"sha": "404179bd4849702344f67cfc17220ed19a59ed12", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -633,7 +633,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec!(1, 2);\n     /// vec.push(3);\n     /// assert_eq!(vec, [1, 2, 3]);\n@@ -671,7 +671,7 @@ impl<T> Vec<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut vec = vec![1, 2, 3];\n     /// assert_eq!(vec.pop(), Some(3));\n     /// assert_eq!(vec, [1, 2]);"}, {"sha": "aefcad49a58834b411f1dc6ee0d8423f7cdb263f", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -201,7 +201,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -224,7 +224,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -258,7 +258,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -513,7 +513,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -536,7 +536,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -824,7 +824,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -849,7 +849,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -949,7 +949,7 @@ impl<T> VecDeque<T> {\n     /// Panics if `i` is greater than ringbuf's length\n     ///\n     /// # Examples\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1151,7 +1151,7 @@ impl<T> VecDeque<T> {\n     /// Returns `None` if `i` is out of bounds.\n     ///\n     /// # Examples\n-    /// ```rust\n+    /// ```\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "6dcae9879a0d0fd5da3f30e61823e1e472153327", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -216,7 +216,7 @@ macro_rules! writeln {\n ///\n /// Match arms:\n ///\n-/// ```rust\n+/// ```\n /// fn foo(x: Option<int>) {\n ///     match x {\n ///         Some(n) if n >= 0 => println!(\"Some(Non-negative)\"),\n@@ -229,7 +229,7 @@ macro_rules! writeln {\n ///\n /// Iterators:\n ///\n-/// ```rust\n+/// ```\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in std::iter::count(0, 1) {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "1b866501b8ea1a3d0fb62d347f1af1af990ddabf", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -310,15 +310,15 @@ impl<T:?Sized> MarkerTrait for T { }\n ///\n /// Therefore, we can model a method like this as follows:\n ///\n-/// ```rust\n+/// ```\n /// use std::marker::PhantomFn;\n /// trait Even : PhantomFn<Self> { }\n /// ```\n ///\n /// Another equivalent, but clearer, option would be to use\n /// `MarkerTrait`:\n ///\n-/// ```rust\n+/// ```\n /// use std::marker::MarkerTrait;\n /// trait Even : MarkerTrait { }\n /// ```"}, {"sha": "551f97ead12d8262f1f2f30860ea91a410e9eb74", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -251,7 +251,7 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// `self.buf`. But `replace` can be used to disassociate the original value of `self.buf` from\n /// `self`, allowing it to be returned:\n ///\n-/// ```rust\n+/// ```\n /// use std::mem;\n /// # struct Buffer<T> { buf: Vec<T> }\n /// impl<T> Buffer<T> {"}, {"sha": "ae1b5f65eeb52575cf30acd04ecbeb1ca8ce78d9", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -281,7 +281,7 @@ impl Float for f32 {\n \n     /// The fractional part of the number, satisfying:\n     ///\n-    /// ```rust\n+    /// ```\n     /// use core::num::Float;\n     ///\n     /// let x = 1.65f32;"}, {"sha": "4a73c1e8fcf45415849f0c0e3af32497818e35f4", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -288,7 +288,7 @@ impl Float for f64 {\n \n     /// The fractional part of the number, satisfying:\n     ///\n-    /// ```rust\n+    /// ```\n     /// use core::num::Float;\n     ///\n     /// let x = 1.65f64;"}, {"sha": "a77f97096005497034ab6c7c578d50da97dc1d84", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -84,7 +84,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -99,7 +99,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -118,7 +118,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -134,7 +134,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -150,7 +150,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -167,7 +167,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -183,7 +183,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -200,7 +200,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -223,7 +223,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -246,7 +246,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -269,7 +269,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -291,7 +291,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// assert_eq!(5u16.checked_add(65530), Some(65535));\n@@ -305,7 +305,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// assert_eq!((-127i8).checked_sub(1), Some(-128));\n@@ -319,7 +319,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// assert_eq!(5u8.checked_mul(51), Some(255));\n@@ -333,7 +333,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// assert_eq!((-127i8).checked_div(-1), Some(127));\n@@ -371,7 +371,7 @@ pub trait Int\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::num::Int;\n     ///\n     /// assert_eq!(2.pow(4), 16);"}, {"sha": "6324e8fa874439bf54d850809716a54146753534", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -78,7 +78,7 @@ use fmt;\n /// A trivial implementation of `Drop`. The `drop` method is called when `_x` goes\n /// out of scope, and therefore `main` prints `Dropping!`.\n ///\n-/// ```rust\n+/// ```\n /// struct HasDrop;\n ///\n /// impl Drop for HasDrop {\n@@ -162,7 +162,7 @@ macro_rules! forward_ref_binop {\n /// A trivial implementation of `Add`. When `Foo + Foo` happens, it ends up\n /// calling `add`, and therefore, `main` prints `Adding!`.\n ///\n-/// ```rust\n+/// ```\n /// use std::ops::Add;\n ///\n /// #[derive(Copy)]\n@@ -216,7 +216,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// A trivial implementation of `Sub`. When `Foo - Foo` happens, it ends up\n /// calling `sub`, and therefore, `main` prints `Subtracting!`.\n ///\n-/// ```rust\n+/// ```\n /// use std::ops::Sub;\n ///\n /// #[derive(Copy)]\n@@ -270,7 +270,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n /// A trivial implementation of `Mul`. When `Foo * Foo` happens, it ends up\n /// calling `mul`, and therefore, `main` prints `Multiplying!`.\n ///\n-/// ```rust\n+/// ```\n /// use std::ops::Mul;\n ///\n /// #[derive(Copy)]"}, {"sha": "455c68d4319d670ae952fd374a0da4b307b65a4b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -897,7 +897,7 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// Here is an example which increments every integer in a vector,\n     /// checking for overflow:\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::u16;\n     ///\n     /// let v = vec!(1, 2);"}, {"sha": "fee8caa04c47b3b7965f51f0a8eeabcb66dced8b", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -896,7 +896,7 @@ impl<A, E, V: FromIterator<A>> FromIterator<Result<A, E>> for Result<V, E> {\n     /// Here is an example which increments every integer in a vector,\n     /// checking for overflow:\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::u32;\n     ///\n     /// let v = vec!(1, 2);"}, {"sha": "b1576c0d37739b179f77f4c0450ed0d3c714c8be", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -1449,7 +1449,7 @@ pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::slice;\n ///\n /// // manifest a slice out of thin air!\n@@ -1492,7 +1492,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::slice;\n ///\n /// // manifest a slice out of thin air!"}, {"sha": "bd46b093b76b000177f4a4b5016ff8c6fd5e2002", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -140,7 +140,7 @@ impl FromStr for bool {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::str::FromStr;\n     ///\n     /// assert_eq!(FromStr::from_str(\"true\"), Ok(true));\n@@ -151,7 +151,7 @@ impl FromStr for bool {\n     /// Note, in many cases, the StrExt::parse() which is based on\n     /// this FromStr::from_str() is more proper.\n     ///\n-    /// ```rust\n+    /// ```\n     /// assert_eq!(\"true\".parse(), Ok(true));\n     /// assert_eq!(\"false\".parse(), Ok(false));\n     /// assert!(\"not even a boolean\".parse::<bool>().is_err());\n@@ -1186,7 +1186,7 @@ mod traits {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert_eq!(&s[0 .. 1], \"L\");\n     ///"}, {"sha": "3180f03cfd3c2ee2d4c60efb78c8d8591a2e1c69", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -59,7 +59,7 @@ impl Rand for Exp1 {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{Exp, IndependentSample};\n ///"}, {"sha": "8eaac203fb4ad22ffdfbc3e1c40dfdc18bdf1e45", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -39,7 +39,7 @@ use super::{IndependentSample, Sample, Exp};\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{IndependentSample, Gamma};\n ///\n@@ -186,7 +186,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{ChiSquared, IndependentSample};\n ///\n@@ -243,7 +243,7 @@ impl IndependentSample<f64> for ChiSquared {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{FisherF, IndependentSample};\n ///\n@@ -287,7 +287,7 @@ impl IndependentSample<f64> for FisherF {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{StudentT, IndependentSample};\n ///"}, {"sha": "a46709932e2de72afe7f6fa11b68a3ab31d6bd31", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -93,7 +93,7 @@ pub struct Weighted<T> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///"}, {"sha": "d07964624bf582e94941d0800dcc4aee7d3db9fb", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -75,7 +75,7 @@ impl Rand for StandardNormal {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{Normal, IndependentSample};\n ///\n@@ -123,7 +123,7 @@ impl IndependentSample<f64> for Normal {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand;\n /// use std::rand::distributions::{LogNormal, IndependentSample};\n ///"}, {"sha": "4086e149e7866fee68b6e4143257eba4ba68cc8b", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -35,7 +35,7 @@ use distributions::{Sample, IndependentSample};\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {"}, {"sha": "5e52a176c9e16db2a344629d5adb9a4c3d74fcd8", "filename": "src/librand/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -148,7 +148,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut v = [0; 13579];\n@@ -183,7 +183,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -228,7 +228,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -246,7 +246,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -260,7 +260,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let s: String = thread_rng().gen_ascii_chars().take(10).collect();\n@@ -296,7 +296,7 @@ pub trait Rng : Sized {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -359,7 +359,7 @@ pub trait SeedableRng<Seed>: Rng {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -374,7 +374,7 @@ pub trait SeedableRng<Seed>: Rng {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -478,7 +478,8 @@ impl Rand for XorShiftRng {\n /// `[0,1)`.\n ///\n /// # Examples\n-/// ```rust\n+///\n+/// ```\n /// use std::rand::{random, Open01};\n ///\n /// let Open01(val) = random::<Open01<f32>>();\n@@ -495,7 +496,7 @@ pub struct Open01<F>(pub F);\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand::{random, Closed01};\n ///\n /// let Closed01(val) = random::<Closed01<f32>>();"}, {"sha": "81e65da37fc5f34701cda91c16a612aaccccf607", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -102,7 +102,7 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand::{Rng, SeedableRng, StdRng};\n /// use std::rand::reseeding::{Reseeder, ReseedingRng};\n ///"}, {"sha": "6b66d7227d300d00ca6e4280ebf7ea778b69d18c", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -535,7 +535,7 @@ fn assemble_candidates_from_param_env<'cx,'tcx>(\n /// In the case of a nested projection like <<A as Foo>::FooT as Bar>::BarT, we may find\n /// that the definition of `Foo` has some clues:\n ///\n-/// ```rust\n+/// ```\n /// trait Foo {\n ///     type FooT : Bar<BarT=i32>\n /// }"}, {"sha": "1069d1282eab1e9f5b37ab7998f3d6bf7f3823b3", "filename": "src/librustc/middle/ty_walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc%2Fmiddle%2Fty_walk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_walk.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> TypeWalker<'tcx> {\n     ///\n     /// Example: Imagine you are walking `Foo<Bar<int>, uint>`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut iter: TypeWalker = ...;\n     /// iter.next(); // yields Foo\n     /// iter.next(); // yields Bar<int>"}, {"sha": "cf36ec1f3ed96f49954a1ec836a582ae23c6460c", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -253,7 +253,7 @@ fn trans_fn_ref_with_substs_to_callee<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// Translates an adapter that implements the `Fn` trait for a fn\n /// pointer. This is basically the equivalent of something like:\n ///\n-/// ```rust\n+/// ```\n /// impl<'a> Fn(&'a int) -> &'a int for fn(&int) -> &int {\n ///     extern \"rust-abi\" fn call(&self, args: (&'a int,)) -> &'a int {\n ///         (*self)(args.0)"}, {"sha": "1f8d45a007d2b19864febe22d2780bf3198c6188", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -31,7 +31,7 @@ impl ToHex for [u8] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// extern crate serialize;\n     /// use serialize::hex::ToHex;\n     ///\n@@ -100,7 +100,7 @@ impl FromHex for str {\n     ///\n     /// This converts a string literal to hexadecimal and back.\n     ///\n-    /// ```rust\n+    /// ```\n     /// extern crate serialize;\n     /// use serialize::hex::{FromHex, ToHex};\n     ///"}, {"sha": "4b6fbe01f760bbe0b19b85d22f21a34b6561f55a", "filename": "src/libstd/env.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -41,7 +41,7 @@ use sys::os as os_imp;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// // We assume that we are in a valid directory.\n@@ -58,7 +58,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n /// use std::path::Path;\n ///\n@@ -102,7 +102,7 @@ pub struct VarsOs { inner: os_imp::Env }\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// // We will iterate through the references to the element returned by\n@@ -125,7 +125,7 @@ pub fn vars() -> Vars {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// // We will iterate through the references to the element returned by\n@@ -166,7 +166,7 @@ impl Iterator for VarsOs {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// let key = \"HOME\";\n@@ -188,7 +188,7 @@ pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// let key = \"HOME\";\n@@ -246,7 +246,7 @@ impl Error for VarError {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// let key = \"KEY\";\n@@ -282,7 +282,7 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// let key = \"PATH\";\n@@ -326,7 +326,7 @@ pub struct JoinPathsError {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n /// use std::path::PathBuf;\n ///\n@@ -374,7 +374,7 @@ impl Error for JoinPathsError {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// match env::home_dir() {\n@@ -416,7 +416,7 @@ pub fn temp_dir() -> PathBuf {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// match env::current_exe() {\n@@ -481,7 +481,7 @@ pub struct ArgsOs { inner: os_imp::Args }\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// // Prints each argument on a separate line\n@@ -503,7 +503,7 @@ pub fn args() -> Args {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::env;\n ///\n /// // Prints each argument on a separate line"}, {"sha": "ba89b3a0ea63f8b0e365a07ea6275d0beb258839", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -473,7 +473,7 @@ pub fn rename<P: AsPath, Q: AsPath>(from: P, to: Q) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::fs;\n ///\n /// fs::copy(\"foo.txt\", \"bar.txt\");\n@@ -540,7 +540,7 @@ pub fn read_link<P: AsPath>(path: P) -> io::Result<PathBuf> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::fs;\n ///\n /// fs::create_dir(\"/some/dir\");\n@@ -576,7 +576,7 @@ pub fn create_dir_all<P: AsPath>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::fs;\n ///\n /// fs::remove_dir(\"/some/dir\");\n@@ -627,7 +627,7 @@ pub fn remove_dir_all<P: AsPath>(path: P) -> io::Result<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::io;\n /// use std::fs::{self, PathExt, DirEntry};\n /// use std::path::Path;"}, {"sha": "e1ef30627948d4a19f5e20977351d093b0a7e4e3", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -182,7 +182,7 @@ pub mod builtin {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::fmt;\n     ///\n     /// let s = fmt::format(format_args!(\"hello {}\", \"world\"));\n@@ -205,7 +205,7 @@ pub mod builtin {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let path: &'static str = env!(\"PATH\");\n     /// println!(\"the $PATH variable at the time of compiling was: {}\", path);\n     /// ```\n@@ -224,7 +224,7 @@ pub mod builtin {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let key: Option<&'static str> = option_env!(\"SECRET_KEY\");\n     /// println!(\"the secret key might be: {:?}\", key);\n     /// ```\n@@ -372,7 +372,7 @@ pub mod builtin {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// mod test {\n     ///     pub fn foo() {\n     ///         assert!(module_path!().ends_with(\"test\"));\n@@ -395,7 +395,7 @@ pub mod builtin {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let my_directory = if cfg!(windows) {\n     ///     \"windows-specific-directory\"\n     /// } else {"}, {"sha": "82a48a72499b62bb18d46810380c24f5f80b4201", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -34,7 +34,7 @@ use vec::Vec;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::old_io::{BufferedReader, File};\n ///\n /// let file = File::open(&Path::new(\"message.txt\"));\n@@ -137,7 +137,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::old_io::{BufferedWriter, File};\n ///\n /// let file = File::create(&Path::new(\"message.txt\")).unwrap();\n@@ -323,7 +323,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::{BufferedStream, File};\n ///"}, {"sha": "ff3af380b7d6a4378d2232cf85157bf8c5f29958", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -176,7 +176,7 @@ impl File {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::File;\n     ///\n     /// let contents = File::open(&Path::new(\"foo.txt\")).read_to_end();\n@@ -195,7 +195,7 @@ impl File {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::File;\n     ///\n@@ -286,7 +286,7 @@ impl File {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::fs;\n ///\n@@ -317,7 +317,7 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::old_io::fs;\n ///\n /// let p = Path::new(\"/some/file/path.txt\");\n@@ -359,7 +359,7 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::fs;\n ///\n@@ -387,7 +387,7 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::fs;\n ///\n@@ -437,7 +437,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::fs;\n@@ -508,7 +508,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::fs;\n@@ -532,7 +532,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::fs;\n ///\n@@ -556,7 +556,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_io::fs;\n /// use std::old_io;"}, {"sha": "72774334c13b093af2d55ad0e07c73020d146333", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -56,7 +56,7 @@ impl Writer for Vec<u8> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::MemWriter;\n ///\n@@ -116,7 +116,7 @@ impl Writer for MemWriter {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::MemReader;\n ///\n@@ -246,7 +246,7 @@ impl<'a> Buffer for &'a [u8] {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::BufWriter;\n ///\n@@ -318,7 +318,7 @@ impl<'a> Seek for BufWriter<'a> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// # #![allow(unused_must_use)]\n /// use std::old_io::BufReader;\n ///"}, {"sha": "15a80e34451f95ba569626fe44fab9cd6e8f2a22", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -1410,7 +1410,7 @@ pub trait Buffer: Reader {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::BufReader;\n     ///\n     /// let mut reader = BufReader::new(b\"hello\\nworld\");"}, {"sha": "ad0e7a7284de48c2fb8fe47ddbbe2947b61a4ea1", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -52,7 +52,7 @@ impl UnixStream {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::net::pipe::UnixStream;\n     ///"}, {"sha": "b699b93f2b88c71344d26732eda99bb53609a928", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -142,7 +142,7 @@ impl StdinReader {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io;\n     ///\n     /// let mut stdin = old_io::stdin();"}, {"sha": "65c62a99335220d5409934483f254316163c4884", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -115,7 +115,7 @@ impl Timer {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -128,7 +128,7 @@ impl Timer {\n     /// ten_milliseconds.recv().unwrap();\n     /// ```\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -167,7 +167,7 @@ impl Timer {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -186,7 +186,7 @@ impl Timer {\n     /// ten_milliseconds.recv().unwrap();\n     /// ```\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///"}, {"sha": "46233a46ee556edd2463b119391c78a0d52b4f63", "filename": "src/libstd/os.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -132,7 +132,7 @@ pub const TMPBUF_SZ : uint = 1000;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// // We assume that we are in a valid directory.\n@@ -152,7 +152,7 @@ pub fn getcwd() -> IoResult<Path> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// // We will iterate through the references to the element returned by os::env();\n@@ -188,7 +188,7 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// let key = \"HOME\";\n@@ -230,7 +230,7 @@ fn byteify(s: OsString) -> Vec<u8> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// let key = \"KEY\";\n@@ -270,7 +270,8 @@ pub fn unsetenv(n: &str) {\n /// environment variable.\n ///\n /// # Examples\n-/// ```rust\n+///\n+/// ```\n /// use std::os;\n ///\n /// let key = \"PATH\";\n@@ -302,7 +303,7 @@ pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n /// use std::old_path::Path;\n ///\n@@ -363,7 +364,7 @@ pub fn dll_filename(base: &str) -> String {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// match os::self_exe_name() {\n@@ -383,7 +384,7 @@ pub fn self_exe_name() -> Option<Path> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// match os::self_exe_path() {\n@@ -412,7 +413,7 @@ pub fn self_exe_path() -> Option<Path> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// match os::homedir() {\n@@ -501,7 +502,8 @@ pub fn tmpdir() -> Path {\n /// as is.\n ///\n /// # Examples\n-/// ```rust\n+///\n+/// ```\n /// use std::os;\n /// use std::old_path::Path;\n ///\n@@ -532,7 +534,8 @@ pub fn make_absolute(p: &Path) -> IoResult<Path> {\n /// whether the change was completed successfully or not.\n ///\n /// # Examples\n-/// ```rust\n+///\n+/// ```\n /// use std::os;\n /// use std::old_path::Path;\n ///\n@@ -553,7 +556,8 @@ pub fn errno() -> i32 {\n /// Return the string corresponding to an `errno()` value of `errnum`.\n ///\n /// # Examples\n-/// ```rust\n+///\n+/// ```\n /// use std::os;\n ///\n /// // Same as println!(\"{}\", last_os_error());\n@@ -749,7 +753,7 @@ extern \"system\" {\n /// See `String::from_utf8_lossy` for details.\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::os;\n ///\n /// // Prints each argument on a separate line"}, {"sha": "2d97d6513663713ae07599b9582d409bd2d3fcc7", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -856,7 +856,7 @@ impl<'a> cmp::Ord for Components<'a> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::path::PathBuf;\n ///\n /// let mut path = PathBuf::new(\"c:\\\\\");\n@@ -948,7 +948,7 @@ impl PathBuf {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::path::PathBuf;\n     ///\n     /// let mut buf = PathBuf::new(\"/\");\n@@ -1105,7 +1105,7 @@ impl AsOsStr for PathBuf {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::path::Path;\n ///\n /// let path = Path::new(\"/tmp/foo/bar.txt\");\n@@ -1210,7 +1210,7 @@ impl Path {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::path::Path;\n     ///\n     /// let path = Path::new(\"/foo/bar\");"}, {"sha": "69053252ed1de1e944d5ec6b69082910213b55a7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -426,7 +426,7 @@ pub fn random<T: Rand>() -> T {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand::{thread_rng, sample};\n ///\n /// let mut rng = thread_rng();"}, {"sha": "42c153af03639909e9f36ea49862ba0ca8407ad0", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -25,7 +25,7 @@ use slice::SliceExt;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::rand::{reader, Rng};\n /// use std::old_io::MemReader;\n ///"}, {"sha": "ebf4d3377499e99188b372b54ec5ff091ff6bc2a", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -13,7 +13,7 @@ use sync::{Mutex, Condvar};\n /// A barrier enables multiple tasks to synchronize the beginning\n /// of some computation.\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::{Arc, Barrier};\n /// use std::thread;\n ///"}, {"sha": "1cbfbbf29278f1b03663400c2ea0fddc459c0a8a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -46,7 +46,7 @@ use fmt;\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n /// use std::sync::mpsc::channel;\n@@ -84,7 +84,7 @@ use fmt;\n ///\n /// To recover from a poisoned mutex:\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n@@ -135,7 +135,7 @@ unsafe impl<T: Send> Sync for Mutex<T> { }\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "258cf1d38a8ca887369ffb830f2aa6410386c584", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -26,7 +26,7 @@ use sync::{StaticMutex, MUTEX_INIT};\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::{Once, ONCE_INIT};\n ///\n /// static START: Once = ONCE_INIT;"}, {"sha": "8a1946b86ab4a1ae3a9dda176e5f1359c81682a2", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -60,7 +60,7 @@ impl<'a> Drop for Sentinel<'a> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use std::sync::TaskPool;\n /// use std::iter::AdditiveIterator;\n /// use std::sync::mpsc::channel;"}, {"sha": "917c2d2dfbe888e8a9e44c08851fbb7d491340a2", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b463b075e221a779ee65d90f603447baf6fe2cb/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=0b463b075e221a779ee65d90f603447baf6fe2cb", "patch": "@@ -482,7 +482,7 @@ impl<'a> Iterator for Utf16Items<'a> {\n ///\n /// # Examples\n ///\n-/// ```rust\n+/// ```\n /// use unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};\n ///\n /// // \ud834\udd1emus<invalid>ic<invalid>"}]}