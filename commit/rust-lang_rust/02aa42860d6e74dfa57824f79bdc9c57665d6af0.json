{"sha": "02aa42860d6e74dfa57824f79bdc9c57665d6af0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYWE0Mjg2MGQ2ZTc0ZGZhNTc4MjRmNzliZGM5YzU3NjY1ZDZhZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-09T13:35:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T13:35:23Z"}, "message": "Auto merge of #37657 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 8 pull requests\n\n- Successful merges: #35102, #37425, #37483, #37588, #37601, #37610, #37650, #37652\n- Failed merges:", "tree": {"sha": "395b309b58ae7057a59ef8d85cb5eb253386975a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395b309b58ae7057a59ef8d85cb5eb253386975a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02aa42860d6e74dfa57824f79bdc9c57665d6af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02aa42860d6e74dfa57824f79bdc9c57665d6af0", "html_url": "https://github.com/rust-lang/rust/commit/02aa42860d6e74dfa57824f79bdc9c57665d6af0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02aa42860d6e74dfa57824f79bdc9c57665d6af0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "966c70085adc69eecf9c8cd1f128872e8d90614d", "url": "https://api.github.com/repos/rust-lang/rust/commits/966c70085adc69eecf9c8cd1f128872e8d90614d", "html_url": "https://github.com/rust-lang/rust/commit/966c70085adc69eecf9c8cd1f128872e8d90614d"}, {"sha": "5c92c2c6a9450d087b0977b89318688fe1bbd2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c92c2c6a9450d087b0977b89318688fe1bbd2a0", "html_url": "https://github.com/rust-lang/rust/commit/5c92c2c6a9450d087b0977b89318688fe1bbd2a0"}], "stats": {"total": 768, "additions": 621, "deletions": 147}, "files": [{"sha": "2eab449dbd421094809e0a3c0eee33172e57759d", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 12, "deletions": 99, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -4,112 +4,25 @@ This first chapter of the book will get us going with Rust and its tooling.\n First, we\u2019ll install Rust. Then, the classic \u2018Hello World\u2019 program. Finally,\n we\u2019ll talk about Cargo, Rust\u2019s build system and package manager.\n \n+We\u2019ll be showing off a number of commands using a terminal, and those lines all\n+start with `$`. You don't need to type in the `$`s, they are there to indicate\n+the start of each command. We\u2019ll see many tutorials and examples around the web\n+that follow this convention: `$` for commands run as our regular user, and `#`\n+for commands we should be running as an administrator.\n+\n # Installing Rust\n \n The first step to using Rust is to install it. Generally speaking, you\u2019ll need\n an Internet connection to run the commands in this section, as we\u2019ll be\n downloading Rust from the Internet.\n \n-We\u2019ll be showing off a number of commands using a terminal, and those lines all\n-start with `$`. You don't need to type in the `$`s, they are there to indicate\n-the start of each command. We\u2019ll see many tutorials and examples around the web\n-that follow this convention: `$` for commands run as our regular user, and `#`\n-for commands we should be running as an administrator.\n+The Rust compiler runs on, and compiles to, a great number of platforms, but is\n+best supported on Linux, Mac, and Windows, on the x86 and x86-64 CPU\n+architecture. There are official builds of the Rust compiler and standard\n+library for these platforms and more. [For full details on Rust platform support\n+see the website][platform-support].\n \n-## Platform support\n-\n-The Rust compiler runs on, and compiles to, a great number of platforms, though\n-not all platforms are equally supported. Rust's support levels are organized\n-into three tiers, each with a different set of guarantees.\n-\n-Platforms are identified by their \"target triple\" which is the string to inform\n-the compiler what kind of output should be produced. The columns below indicate\n-whether the corresponding component works on the specified platform.\n-\n-### Tier 1\n-\n-Tier 1 platforms can be thought of as \"guaranteed to build and work\".\n-Specifically they will each satisfy the following requirements:\n-\n-* Automated testing is set up to run tests for the platform.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  tests passing.\n-* Official release artifacts are provided for the platform.\n-* Documentation for how to use and how to build the platform is available.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `i686-apple-darwin`           |  \u2713  |  \u2713  |  \u2713  | 32-bit OSX (10.7+, Lion+)  |\n-| `i686-pc-windows-gnu`         |  \u2713  |  \u2713  |  \u2713  | 32-bit MinGW (Windows 7+)  |\n-| `i686-pc-windows-msvc`        |  \u2713  |  \u2713  |  \u2713  | 32-bit MSVC (Windows 7+)   |\n-| `i686-unknown-linux-gnu`      |  \u2713  |  \u2713  |  \u2713  | 32-bit Linux (2.6.18+)     |\n-| `x86_64-apple-darwin`         |  \u2713  |  \u2713  |  \u2713  | 64-bit OSX (10.7+, Lion+)  |\n-| `x86_64-pc-windows-gnu`       |  \u2713  |  \u2713  |  \u2713  | 64-bit MinGW (Windows 7+)  |\n-| `x86_64-pc-windows-msvc`      |  \u2713  |  \u2713  |  \u2713  | 64-bit MSVC (Windows 7+)   |\n-| `x86_64-unknown-linux-gnu`    |  \u2713  |  \u2713  |  \u2713  | 64-bit Linux (2.6.18+)     |\n-\n-### Tier 2\n-\n-Tier 2 platforms can be thought of as \"guaranteed to build\". Automated tests\n-are not run so it's not guaranteed to produce a working build, but platforms\n-often work to quite a good degree and patches are always welcome! Specifically,\n-these platforms are required to have each of the following:\n-\n-* Automated building is set up, but may not be running tests.\n-* Landing changes to the `rust-lang/rust` repository's master branch is gated on\n-  platforms **building**. Note that this means for some platforms only the\n-  standard library is compiled, but for others the full bootstrap is run.\n-* Official release artifacts are provided for the platform.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n-| `aarch64-unknown-linux-gnu`   |  \u2713  |  \u2713  |  \u2713  | ARM64 Linux (2.6.18+)      |\n-| `arm-linux-androideabi`       |  \u2713  |     |     | ARM Android                |\n-| `arm-unknown-linux-gnueabi`   |  \u2713  |  \u2713  |  \u2713  | ARM Linux (2.6.18+)        |\n-| `arm-unknown-linux-gnueabihf` |  \u2713  |  \u2713  |  \u2713  | ARM Linux (2.6.18+)        |\n-| `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n-|`armv7-unknown-linux-gnueabihf`|  \u2713  |  \u2713  |  \u2713  | ARMv7 Linux (2.6.18+)      |\n-| `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n-| `i386-apple-ios`              |  \u2713  |     |     | 32-bit x86 iOS             |\n-| `i586-pc-windows-msvc`        |  \u2713  |     |     | 32-bit Windows w/o SSE     |\n-| `mips-unknown-linux-gnu`      |  \u2713  |     |     | MIPS Linux (2.6.18+)       |\n-| `mips-unknown-linux-musl`     |  \u2713  |     |     | MIPS Linux with MUSL       |\n-| `mipsel-unknown-linux-gnu`    |  \u2713  |     |     | MIPS (LE) Linux (2.6.18+)  |\n-| `mipsel-unknown-linux-musl`   |  \u2713  |     |     | MIPS (LE) Linux with MUSL  |\n-| `powerpc-unknown-linux-gnu`   |  \u2713  |     |     | PowerPC Linux (2.6.18+)    |\n-| `powerpc64-unknown-linux-gnu` |  \u2713  |     |     | PPC64 Linux (2.6.18+)      |\n-|`powerpc64le-unknown-linux-gnu`|  \u2713  |     |     | PPC64LE Linux (2.6.18+)    |\n-| `x86_64-apple-ios`            |  \u2713  |     |     | 64-bit x86 iOS             |\n-| `x86_64-rumprun-netbsd`       |  \u2713  |     |     | 64-bit NetBSD Rump Kernel  |\n-| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |  \u2713  | 64-bit FreeBSD             |\n-| `x86_64-unknown-linux-musl`   |  \u2713  |     |     | 64-bit Linux with MUSL     |\n-| `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |  \u2713  | 64-bit NetBSD              |\n-\n-### Tier 3\n-\n-Tier 3 platforms are those which Rust has support for, but landing changes is\n-not gated on the platform either building or passing tests. Working builds for\n-these platforms may be spotty as their reliability is often defined in terms of\n-community contributions. Additionally, release artifacts and installers are not\n-provided, but there may be community infrastructure producing these in\n-unofficial locations.\n-\n-|  Target                       | std |rustc|cargo| notes                      |\n-|-------------------------------|-----|-----|-----|----------------------------|\n-| `aarch64-linux-android`       |  \u2713  |     |     | ARM64 Android              |\n-| `armv7-linux-androideabi`     |  \u2713  |     |     | ARM-v7a Android            |\n-| `i686-linux-android`          |  \u2713  |     |     | 32-bit x86 Android         |\n-| `i686-pc-windows-msvc` (XP)   |  \u2713  |     |     | Windows XP support         |\n-| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |  \u2713  | 32-bit FreeBSD             |\n-| `x86_64-pc-windows-msvc` (XP) |  \u2713  |     |     | Windows XP support         |\n-| `x86_64-sun-solaris`          |  \u2713  |  \u2713  |     | 64-bit Solaris/SunOS       |\n-| `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |\n-| `x86_64-unknown-dragonfly`    |  \u2713  |  \u2713  |     | 64-bit DragonFlyBSD        |\n-| `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n-\n-Note that this table can be expanded over time, this isn't the exhaustive set of\n-tier 3 platforms that will ever be!\n+[platform-support]: https://forge.rust-lang.org/platform-support.html\n \n ## Installing on Linux or Mac\n "}, {"sha": "e2a23979a819a0c637695ce5892c39d12142f250", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -19,6 +19,7 @@ has a command that does that for us. Let\u2019s give it a shot:\n ```bash\n $ cd ~/projects\n $ cargo new guessing_game --bin\n+     Created binary (application) `guessing_game` project\n $ cd guessing_game\n ```\n \n@@ -51,6 +52,7 @@ Let\u2019s try compiling what Cargo gave us:\n ```{bash}\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.53 secs\n ```\n \n Excellent! Open up your `src/main.rs` again. We\u2019ll be writing all of\n@@ -61,6 +63,7 @@ Remember the `run` command from last chapter? Try it out again here:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n      Running `target/debug/guessing_game`\n Hello, world!\n ```\n@@ -282,10 +285,13 @@ we\u2019ll get a warning:\n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-src/main.rs:10:5: 10:39 warning: unused result which must be used,\n-#[warn(unused_must_use)] on by default\n-src/main.rs:10     io::stdin().read_line(&mut guess);\n-                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+warning: unused result which must be used, #[warn(unused_must_use)] on by default\n+  --> src/main.rs:10:5\n+   |\n+10 |     io::stdin().read_line(&mut guess);\n+   |     ^\n+\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.42 secs\n ```\n \n Rust warns us that we haven\u2019t used the `Result` value. This warning comes from\n@@ -321,6 +327,7 @@ Anyway, that\u2019s the tour. We can run what we have with `cargo run`:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.44 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n Please input your guess.\n@@ -373,11 +380,12 @@ Now, without changing any of our code, let\u2019s build our project:\n ```bash\n $ cargo build\n     Updating registry `https://github.com/rust-lang/crates.io-index`\n- Downloading rand v0.3.8\n- Downloading libc v0.1.6\n-   Compiling libc v0.1.6\n-   Compiling rand v0.3.8\n+ Downloading rand v0.3.14\n+ Downloading libc v0.2.17\n+   Compiling libc v0.2.17\n+   Compiling rand v0.3.14\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 5.88 secs\n ```\n \n (You may see different versions, of course.)\n@@ -399,22 +407,24 @@ If we run `cargo build` again, we\u2019ll get different output:\n \n ```bash\n $ cargo build\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n ```\n \n-That\u2019s right, no output! Cargo knows that our project has been built, and that\n+That\u2019s right, nothing was done! Cargo knows that our project has been built, and that\n all of its dependencies are built, and so there\u2019s no reason to do all that\n stuff. With nothing to do, it simply exits. If we open up `src/main.rs` again,\n-make a trivial change, and then save it again, we\u2019ll only see one line:\n+make a trivial change, and then save it again, we\u2019ll only see two lines:\n \n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.45 secs\n ```\n \n So, we told Cargo we wanted any `0.3.x` version of `rand`, and so it fetched the latest\n-version at the time this was written, `v0.3.8`. But what happens when next\n-week, version `v0.3.9` comes out, with an important bugfix? While getting\n-bugfixes is important, what if `0.3.9` contains a regression that breaks our\n+version at the time this was written, `v0.3.14`. But what happens when next\n+week, version `v0.3.15` comes out, with an important bugfix? While getting\n+bugfixes is important, what if `0.3.15` contains a regression that breaks our\n code?\n \n The answer to this problem is the `Cargo.lock` file you\u2019ll now find in your\n@@ -423,11 +433,11 @@ figures out all of the versions that fit your criteria, and then writes them\n to the `Cargo.lock` file. When you build your project in the future, Cargo\n will see that the `Cargo.lock` file exists, and then use that specific version\n rather than do all the work of figuring out versions again. This lets you\n-have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.8`\n+have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.14`\n until we explicitly upgrade, and so will anyone who we share our code with,\n thanks to the lock file.\n \n-What about when we _do_ want to use `v0.3.9`? Cargo has another command,\n+What about when we _do_ want to use `v0.3.15`? Cargo has another command,\n `update`, which says \u2018ignore the lock, figure out all the latest versions that\n fit what we\u2019ve specified. If that works, write those versions out to the lock\n file\u2019. But, by default, Cargo will only look for versions larger than `0.3.0`\n@@ -510,13 +520,15 @@ Try running our new program a few times:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.55 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n The secret number is: 7\n Please input your guess.\n 4\n You guessed: 4\n $ cargo run\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.0 secs\n      Running `target/debug/guessing_game`\n Guess the number!\n The secret number is: 83\n@@ -618,15 +630,20 @@ I did mention that this won\u2019t quite compile yet, though. Let\u2019s try it:\n ```bash\n $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n-src/main.rs:28:21: 28:35 error: mismatched types:\n- expected `&collections::string::String`,\n-    found `&_`\n-(expected struct `collections::string::String`,\n-    found integral variable) [E0308]\n-src/main.rs:28     match guess.cmp(&secret_number) {\n-                                   ^~~~~~~~~~~~~~\n+error[E0308]: mismatched types\n+  --> src/main.rs:23:21\n+   |\n+23 |     match guess.cmp(&secret_number) {\n+   |                     ^^^^^^^^^^^^^^ expected struct `std::string::String`, found integral variable\n+   |\n+   = note: expected type `&std::string::String`\n+   = note:    found type `&{integer}`\n+\n error: aborting due to previous error\n-Could not compile `guessing_game`.\n+\n+error: Could not compile `guessing_game`.\n+\n+To learn more, run the command again with --verbose.\n ```\n \n Whew! This is a big error. The core of it is that we have \u2018mismatched types\u2019.\n@@ -722,6 +739,7 @@ Let\u2019s try our program out!\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 58\n@@ -785,6 +803,7 @@ and quit. Observe:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.58 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 59\n@@ -919,6 +938,7 @@ Now we should be good! Let\u2019s try:\n ```bash\n $ cargo run\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n+    Finished debug [unoptimized + debuginfo] target(s) in 0.57 secs\n      Running `target/guessing_game`\n Guess the number!\n The secret number is: 61"}, {"sha": "d6960b10b0805109f4d1027462bb11a7c3a19c74", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -61,7 +61,7 @@ write something like this:\n \n ```rust,ignore\n struct Point {\n-    mut x: i32,\n+    mut x: i32, // This causes an error.\n     y: i32,\n }\n ```"}, {"sha": "7233dbc618a121889d1fe85371ef7f3567a71a42", "filename": "src/doc/reference.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -21,6 +21,11 @@ separately by extracting documentation attributes from their source code. Many\n of the features that one might expect to be language features are library\n features in Rust, so what you're looking for may be there, not here.\n \n+Finally, this document is not normative. It may include details that are\n+specific to `rustc` itself, and should not be taken as a specification for\n+the Rust language. We intend to produce such a document someday, but this\n+is what we have for now.\n+\n You may also be interested in the [grammar].\n \n [book]: book/index.html"}, {"sha": "3a7da18c8deb1f23624f56142fc0ae8bb77f9e1a", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -381,11 +381,14 @@ impl<T: ?Sized> Arc<T> {\n \n     /// Gets the number of [`Weak`][weak] pointers to this value.\n     ///\n-    /// Be careful how you use this information, because another thread\n-    /// may change the weak count at any time.\n-    ///\n     /// [weak]: struct.Weak.html\n     ///\n+    /// # Safety\n+    ///\n+    /// This method by itself is safe, but using it correctly requires extra care.\n+    /// Another thread can change the weak count at any time,\n+    /// including potentially between calling this method and acting on the result.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -409,8 +412,11 @@ impl<T: ?Sized> Arc<T> {\n \n     /// Gets the number of strong (`Arc`) pointers to this value.\n     ///\n-    /// Be careful how you use this information, because another thread\n-    /// may change the strong count at any time.\n+    /// # Safety\n+    ///\n+    /// This method by itself is safe, but using it correctly requires extra care.\n+    /// Another thread can change the strong count at any time,\n+    /// including potentially between calling this method and acting on the result.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9d402971d18d0085fcd10ee286b4ed53617ffd74", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -556,10 +556,14 @@ impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {}\n \n /// Trait to represent types that can be created by summing up an iterator.\n ///\n-/// This trait is used to implement the `sum` method on iterators. Types which\n-/// implement the trait can be generated by the `sum` method. Like\n-/// `FromIterator` this trait should rarely be called directly and instead\n-/// interacted with through `Iterator::sum`.\n+/// This trait is used to implement the [`sum()`] method on iterators. Types which\n+/// implement the trait can be generated by the [`sum()`] method. Like\n+/// [`FromIterator`] this trait should rarely be called directly and instead\n+/// interacted with through [`Iterator::sum()`].\n+///\n+/// [`sum()`]: ../../std/iter/trait.Sum.html#tymethod.sum\n+/// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n+/// [`Iterator::sum()`]: ../../std/iter/trait.Iterator.html#method.sum\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n@@ -571,10 +575,14 @@ pub trait Sum<A = Self>: Sized {\n /// Trait to represent types that can be created by multiplying elements of an\n /// iterator.\n ///\n-/// This trait is used to implement the `product` method on iterators. Types\n-/// which implement the trait can be generated by the `product` method. Like\n-/// `FromIterator` this trait should rarely be called directly and instead\n-/// interacted with through `Iterator::product`.\n+/// This trait is used to implement the [`product()`] method on iterators. Types\n+/// which implement the trait can be generated by the [`product()`] method. Like\n+/// [`FromIterator`] this trait should rarely be called directly and instead\n+/// interacted with through [`Iterator::product()`].\n+///\n+/// [`product()`]: ../../std/iter/trait.Product.html#tymethod.product\n+/// [`FromIterator`]: ../../std/iter/trait.FromIterator.html\n+/// [`Iterator::product()`]: ../../std/iter/trait.Iterator.html#method.product\n #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by"}, {"sha": "ad9ae5638b6ac454c1f0abe1825f9d45b62426d8", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -21,7 +21,7 @@\n //! of other types, and you can implement them for your types too. As such,\n //! you'll see a few different types of I/O throughout the documentation in\n //! this module: [`File`]s, [`TcpStream`]s, and sometimes even [`Vec<T>`]s. For\n-//! example, `Read` adds a `read()` method, which we can use on `File`s:\n+//! example, [`Read`] adds a [`read()`] method, which we can use on `File`s:\n //!\n //! ```\n //! use std::io;\n@@ -251,6 +251,7 @@\n //! [`Lines`]: struct.Lines.html\n //! [`io::Result`]: type.Result.html\n //! [`try!`]: ../macro.try.html\n+//! [`read()`]: trait.Read.html#tymethod.read\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -814,19 +815,23 @@ pub trait Read {\n ///\n /// Implementors of the `Write` trait are sometimes called 'writers'.\n ///\n-/// Writers are defined by two required methods, `write()` and `flush()`:\n+/// Writers are defined by two required methods, [`write()`] and [`flush()`]:\n ///\n-/// * The `write()` method will attempt to write some data into the object,\n+/// * The [`write()`] method will attempt to write some data into the object,\n ///   returning how many bytes were successfully written.\n ///\n-/// * The `flush()` method is useful for adaptors and explicit buffers\n+/// * The [`flush()`] method is useful for adaptors and explicit buffers\n ///   themselves for ensuring that all buffered data has been pushed out to the\n ///   'true sink'.\n ///\n /// Writers are intended to be composable with one another. Many implementors\n-/// throughout `std::io` take and provide types which implement the `Write`\n+/// throughout [`std::io`] take and provide types which implement the `Write`\n /// trait.\n ///\n+/// [`write()`]: #tymethod.write\n+/// [`flush()`]: #tymethod.flush\n+/// [`std::io`]: index.html\n+///\n /// # Examples\n ///\n /// ```\n@@ -1475,10 +1480,10 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n \n /// Reader adaptor which limits the bytes read from an underlying reader.\n ///\n-/// This struct is generally created by calling [`take()`][take] on a reader.\n-/// Please see the documentation of `take()` for more details.\n+/// This struct is generally created by calling [`take()`] on a reader.\n+/// Please see the documentation of [`take()`] for more details.\n ///\n-/// [take]: trait.Read.html#method.take\n+/// [`take()`]: trait.Read.html#method.take\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Take<T> {\n     inner: T,\n@@ -1491,8 +1496,10 @@ impl<T> Take<T> {\n     ///\n     /// # Note\n     ///\n-    /// This instance may reach EOF after reading fewer bytes than indicated by\n-    /// this method if the underlying `Read` instance reaches EOF.\n+    /// This instance may reach `EOF` after reading fewer bytes than indicated by\n+    /// this method if the underlying [`Read`] instance reaches EOF.\n+    ///\n+    /// [`Read`]: ../../std/io/trait.Read.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "e8b812daed8c13b5c389ba4fd8a8b9f14f75b7af", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -318,10 +318,11 @@ impl<'a> BufRead for StdinLock<'a> {\n ///\n /// Each handle shares a global buffer of data to be written to the standard\n /// output stream. Access is also synchronized via a lock and explicit control\n-/// over locking is available via the `lock` method.\n+/// over locking is available via the [`lock()`] method.\n ///\n /// Created by the [`io::stdout`] method.\n ///\n+/// [`lock()`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdout {"}, {"sha": "2c0ca0043122ccb7440a557357353b20acdb77bc", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "added", "additions": 514, "deletions": 0, "changes": 514, "blob_url": "https://github.com/rust-lang/rust/blob/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02aa42860d6e74dfa57824f79bdc9c57665d6af0/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=02aa42860d6e74dfa57824f79bdc9c57665d6af0", "patch": "@@ -0,0 +1,514 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for unary and binary expressions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph -Z force-overflow-checks=off\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change constant operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_negation() -> i32 {\n+    -10\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_negation() -> i32 {\n+    -1\n+}\n+\n+\n+\n+// Change constant operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn const_bitwise_not() -> i32 {\n+    !100\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn const_bitwise_not() -> i32 {\n+    !99\n+}\n+\n+\n+\n+// Change variable operand of negation -----------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n+    -x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_negation(x: i32, y: i32) -> i32 {\n+    -y\n+}\n+\n+\n+\n+// Change variable operand of bitwise not --------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n+    !x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n+    !y\n+}\n+\n+\n+\n+// Change variable operand of deref --------------------------------------------\n+#[cfg(cfail1)]\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n+    *x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn var_deref(x: &i32, y: &i32) -> i32 {\n+    *y\n+}\n+\n+\n+\n+// Change first constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_const_add() -> i32 {\n+    2 + 3\n+}\n+\n+\n+\n+// Change second constant operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_const_add() -> i32 {\n+    1 + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_const_add() -> i32 {\n+    1 + 3\n+}\n+\n+\n+\n+// Change first variable operand of addition -----------------------------------\n+#[cfg(cfail1)]\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n+    a + 2\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn first_var_add(a: i32, b: i32) -> i32 {\n+    b + 2\n+}\n+\n+\n+\n+// Change second variable operand of addition ----------------------------------\n+#[cfg(cfail1)]\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn second_var_add(a: i32, b: i32) -> i32 {\n+    1 + b\n+}\n+\n+\n+\n+// Change operator from + to - -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_minus(a: i32) -> i32 {\n+    1 - a\n+}\n+\n+\n+\n+// Change operator from + to * -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mult(a: i32) -> i32 {\n+    1 * a\n+}\n+\n+\n+\n+// Change operator from + to / -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_div(a: i32) -> i32 {\n+    1 / a\n+}\n+\n+\n+\n+// Change operator from + to % -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 + a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn plus_to_mod(a: i32) -> i32 {\n+    1 % a\n+}\n+\n+\n+\n+// Change operator from && to || -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a && b\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn and_to_or(a: bool, b: bool) -> bool {\n+    a || b\n+}\n+\n+\n+\n+// Change operator from & to | -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n+    1 | a\n+}\n+\n+\n+\n+// Change operator from & to ^ -------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 & a\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n+    1 ^ a\n+}\n+\n+\n+\n+// Change operator from & to << ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n+    a << 1\n+}\n+\n+\n+\n+// Change operator from & to >> ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a & 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n+    a >> 1\n+}\n+\n+\n+\n+// Change operator from == to != -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_uneq(a: i32) -> bool {\n+    a != 1\n+}\n+\n+\n+\n+// Change operator from == to < ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_lt(a: i32) -> bool {\n+    a < 1\n+}\n+\n+\n+\n+// Change operator from == to > ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_gt(a: i32) -> bool {\n+    a > 1\n+}\n+\n+\n+\n+// Change operator from == to <= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_le(a: i32) -> bool {\n+    a <= 1\n+}\n+\n+\n+\n+// Change operator from == to >= -----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a == 1\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn eq_to_ge(a: i32) -> bool {\n+    a >= 1\n+}\n+\n+\n+\n+// Change type in cast expression ----------------------------------------------\n+#[cfg(cfail1)]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as i32;\n+    let c = b as u64;\n+    c\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn type_cast(a: u8) -> u64 {\n+    let b = a as u32;\n+    let c = b as u64;\n+    c\n+}\n+\n+\n+\n+// Change value in cast expression ---------------------------------------------\n+#[cfg(cfail1)]\n+pub fn value_cast(a: u32) -> i32 {\n+    1 as i32\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn value_cast(a: u32) -> i32 {\n+    2 as i32\n+}\n+\n+\n+\n+// Change l-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn lvalue() -> i32 {\n+    let mut x = 10;\n+    let mut y = 11;\n+    x = 9;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn lvalue() -> i32 {\n+    let mut x = 10;\n+    let mut y = 11;\n+    y = 9;\n+    x\n+}\n+\n+\n+\n+// Change r-value in assignment ------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn rvalue() -> i32 {\n+    let mut x = 10;\n+    x = 9;\n+    x\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn rvalue() -> i32 {\n+    let mut x = 10;\n+    x = 8;\n+    x\n+}\n+\n+\n+\n+// Change index into slice -----------------------------------------------------\n+#[cfg(cfail1)]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[i]\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfails2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfails3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n+    s[j]\n+}"}]}