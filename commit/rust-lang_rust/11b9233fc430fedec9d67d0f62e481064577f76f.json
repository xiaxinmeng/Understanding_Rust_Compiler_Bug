{"sha": "11b9233fc430fedec9d67d0f62e481064577f76f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjkyMzNmYzQzMGZlZGVjOWQ2N2QwZjYyZTQ4MTA2NDU3N2Y3NmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-29T19:53:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-29T19:53:19Z"}, "message": "Merge #9269\n\n9269: Recreate status page r=lnicola a=Milo123459\n\nI'm working on redesigning the status page.\n\nCo-authored-by: Milo <50248166+Milo123459@users.noreply.github.com>", "tree": {"sha": "fbdccf57ae6d515aeeb1aa3fcb05fd8243dd3030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbdccf57ae6d515aeeb1aa3fcb05fd8243dd3030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b9233fc430fedec9d67d0f62e481064577f76f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg23ovCRBK7hj4Ov3rIwAAOrIIAHGzwH50JnpAo5KYLXPnFutW\ncuw+0qomF8mO5Pl39Z8HSh1Z7Hg2dig0UM/zQm5uQQWRposWqrjhaotgJqSlERxx\nOXFBb/8IHB5Dt/ywlztR9qiyhKrmfbjJ+bEHj7AkEn/rSLvZ00xkx5q1zCm7AM2P\ni9Eu0HuNPxC8uBLpRACphRiMNu2v2E1DKdGS/wKDkAsfiZhtY0WodtU2FLh9fCoa\nDxpzDEeGQTBtusfR6PaZbfMMcx9bfY2ZoCGjts6OrnXG1RAcF4pOaFowcM2ieXmU\nLjxeXFB+ZzHuoIXHMkAcMiBmG4HnfaSehNXNS9sEN40Z9dosWwCvg1b0WReSVco=\n=/9+2\n-----END PGP SIGNATURE-----\n", "payload": "tree fbdccf57ae6d515aeeb1aa3fcb05fd8243dd3030\nparent 1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a\nparent 4d8fe6208eb5543183bc8668ca4fefef50a67bf9\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624996399 +0000\ncommitter GitHub <noreply@github.com> 1624996399 +0000\n\nMerge #9269\n\n9269: Recreate status page r=lnicola a=Milo123459\n\nI'm working on redesigning the status page.\n\nCo-authored-by: Milo <50248166+Milo123459@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b9233fc430fedec9d67d0f62e481064577f76f", "html_url": "https://github.com/rust-lang/rust/commit/11b9233fc430fedec9d67d0f62e481064577f76f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b9233fc430fedec9d67d0f62e481064577f76f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a", "html_url": "https://github.com/rust-lang/rust/commit/1b9b2d1f40bc694a277947f8f0cb77a3fe7b5c1a"}, {"sha": "4d8fe6208eb5543183bc8668ca4fefef50a67bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8fe6208eb5543183bc8668ca4fefef50a67bf9", "html_url": "https://github.com/rust-lang/rust/commit/4d8fe6208eb5543183bc8668ca4fefef50a67bf9"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "d11c2c35e4da8e19b648bdd19c280655a0ff78ef", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=11b9233fc430fedec9d67d0f62e481064577f76f", "patch": "@@ -12,6 +12,7 @@ use ide_db::{\n use itertools::Itertools;\n use profile::{memory_usage, Bytes};\n use rustc_hash::FxHashMap;\n+use std::env;\n use stdx::format_to;\n use syntax::{ast, Parse, SyntaxNode};\n \n@@ -37,12 +38,14 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n     format_to!(buf, \"{}\\n\", FileTextQuery.in_db(db).entries::<FilesStats>());\n     format_to!(buf, \"{}\\n\", LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>());\n     format_to!(buf, \"{}\\n\", syntax_tree_stats(db));\n-    format_to!(buf, \"{} (macros)\\n\", macro_syntax_tree_stats(db));\n-    format_to!(buf, \"{} total\\n\", memory_usage());\n-    format_to!(buf, \"\\ncounts:\\n{}\", profile::countme::get_all());\n+    format_to!(buf, \"{} (Macros)\\n\", macro_syntax_tree_stats(db));\n+    format_to!(buf, \"{} in total\\n\", memory_usage());\n+    if env::var(\"RA_COUNT\").is_ok() {\n+        format_to!(buf, \"\\nCounts:\\n{}\", profile::countme::get_all());\n+    }\n \n     if let Some(file_id) = file_id {\n-        format_to!(buf, \"\\nfile info:\\n\");\n+        format_to!(buf, \"\\nFile info:\\n\");\n         let krate = crate::parent_module::crate_for(db, file_id).pop();\n         match krate {\n             Some(krate) => {\n@@ -51,19 +54,19 @@ pub(crate) fn status(db: &RootDatabase, file_id: Option<FileId>) -> String {\n                     Some(it) => format!(\"{}({:?})\", it, krate),\n                     None => format!(\"{:?}\", krate),\n                 };\n-                format_to!(buf, \"crate: {}\\n\", display_crate(krate));\n+                format_to!(buf, \"Crate: {}\\n\", display_crate(krate));\n                 let deps = crate_graph[krate]\n                     .dependencies\n                     .iter()\n                     .map(|dep| format!(\"{}={:?}\", dep.name, dep.crate_id))\n                     .format(\", \");\n-                format_to!(buf, \"deps: {}\\n\", deps);\n+                format_to!(buf, \"Dependencies: {}\\n\", deps);\n             }\n-            None => format_to!(buf, \"does not belong to any crate\"),\n+            None => format_to!(buf, \"Does not belong to any crate\"),\n         }\n     }\n \n-    buf\n+    buf.trim().to_string()\n }\n \n #[derive(Default)]\n@@ -74,7 +77,7 @@ struct FilesStats {\n \n impl fmt::Display for FilesStats {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} ({}) files\", self.total, self.size)\n+        write!(fmt, \"{} of files\", self.size)\n     }\n }\n \n@@ -100,7 +103,7 @@ pub(crate) struct SyntaxTreeStats {\n \n impl fmt::Display for SyntaxTreeStats {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} trees, {} retained\", self.total, self.retained)\n+        write!(fmt, \"{} trees, {} preserved\", self.total, self.retained)\n     }\n }\n \n@@ -142,7 +145,7 @@ struct LibrarySymbolsStats {\n \n impl fmt::Display for LibrarySymbolsStats {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} ({}) index symbols\", self.total, self.size)\n+        write!(fmt, \"{} of index symbols ({})\", self.size, self.total)\n     }\n }\n "}, {"sha": "3f35ce1ebcf3b4c76b945e6b2258bd7573889223", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=11b9233fc430fedec9d67d0f62e481064577f76f", "patch": "@@ -38,7 +38,6 @@ tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2\", default-features = false, features = [\"env-filter\", \"registry\"] }\n tracing-tree = { version = \"0.1.4\" }\n always-assert = \"0.1\"\n-\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n flycheck = { path = \"../flycheck\", version = \"0.0.0\" }\n ide = { path = \"../ide\", version = \"0.0.0\" }"}, {"sha": "f7fa8f294c88e8f93f37f88b3fa641c8c7712ab9", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b9233fc430fedec9d67d0f62e481064577f76f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=11b9233fc430fedec9d67d0f62e481064577f76f", "patch": "@@ -60,21 +60,25 @@ pub(crate) fn handle_analyzer_status(\n     }\n \n     if snap.workspaces.is_empty() {\n-        buf.push_str(\"no workspaces\\n\")\n+        buf.push_str(\"No workspaces\\n\")\n     } else {\n-        buf.push_str(\"workspaces:\\n\");\n-        for w in snap.workspaces.iter() {\n-            format_to!(buf, \"{} packages loaded\\n\", w.n_packages());\n-        }\n+        buf.push_str(\"Workspaces:\\n\");\n+        format_to!(\n+            buf,\n+            \"Loaded {:?} packages across {} workspace{}.\\n\",\n+            snap.workspaces.iter().map(|w| w.n_packages()).sum::<usize>(),\n+            snap.workspaces.len(),\n+            if snap.workspaces.len() == 1 { \"\" } else { \"s\" }\n+        );\n     }\n-    buf.push_str(\"\\nanalysis:\\n\");\n+    buf.push_str(\"\\nAnalysis:\\n\");\n     buf.push_str(\n         &snap\n             .analysis\n             .status(file_id)\n             .unwrap_or_else(|_| \"Analysis retrieval was cancelled\".to_owned()),\n     );\n-    format_to!(buf, \"\\n\\nrequests:\\n\");\n+    format_to!(buf, \"\\n\\nRequests:\\n\");\n     let requests = snap.latest_requests.read();\n     for (is_last, r) in requests.iter() {\n         let mark = if is_last { \"*\" } else { \" \" };"}]}