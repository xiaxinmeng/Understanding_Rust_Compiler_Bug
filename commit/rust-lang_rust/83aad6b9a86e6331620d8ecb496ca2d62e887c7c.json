{"sha": "83aad6b9a86e6331620d8ecb496ca2d62e887c7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYWFkNmI5YTg2ZTYzMzE2MjBkOGVjYjQ5NmNhMmQ2MmU4ODdjN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-15T14:40:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T14:40:03Z"}, "message": "Rollup merge of #69528 - HeroicKatora:finalize-ref-cell, r=dtolnay\n\nAdd undo_leak to reset RefCell borrow state\n\nThis method is complementary for the feature cell_leak added in an\nearlier PR. It allows *safely* reverting the effects of leaking a borrow guard by\nstatically proving that such a guard could not longer exist. This was\nnot added to the existing `get_mut` out of concern of impacting the\ncomplexity of the otherwise pure pointer cast and because the name\n`get_mut` poorly communicates the intent of resetting remaining borrows.\n\nThis is a follow-up to #68712 and uses the same tracking issue, #69099,\nas these methods deal with the same mechanism and the idea came up\n[in a review comment](https://github.com/rust-lang/rust/pull/68712#discussion_r384670041).\n\n@dtolnay who reviewed the prior PR.\ncc @RalfJung", "tree": {"sha": "0036f8e023f4d4d00be56c9cf4833d2d2e5e31bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0036f8e023f4d4d00be56c9cf4833d2d2e5e31bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83aad6b9a86e6331620d8ecb496ca2d62e887c7c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebj5DCRBK7hj4Ov3rIwAAdHIIAAG6d4oKAvtYsDzac58RsLWo\n4kefk3WV+R+fVhDESlhPMw6VX9FD2NJCSylrgpm3de6tDY99lESd/j/AZS+dX89z\nDTewFPbcH9YtfckD8xfGjoehrxYGOBvYpJ9FPKyJQ7W7GDfnEbdiVN4srLbUzcRf\npceZ26tgcpLkZTbNEDnnuUyxy57wnPx36on+Izl0MedOICdXvKpvxuBPomoarsu+\nuMbm8FAoipV4x6nRgyvcA2JTx32wSkR1/SXH9PxCnTqj1YJ0EZ2d9+xJ2JRCsRIs\n5sbJf1vg6KH2YgKgl04/GjTwA8VWdKFc91TXnvS6EIHhMDdRYB9LWUEVpKQCOss=\n=Y7/8\n-----END PGP SIGNATURE-----\n", "payload": "tree 0036f8e023f4d4d00be56c9cf4833d2d2e5e31bb\nparent 5a72ecf2c5c97933cecce91cb58d104da8120624\nparent 51b93966240acffdbe3fbb898bb647a03b146e09\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584283203 +0100\ncommitter GitHub <noreply@github.com> 1584283203 +0100\n\nRollup merge of #69528 - HeroicKatora:finalize-ref-cell, r=dtolnay\n\nAdd undo_leak to reset RefCell borrow state\n\nThis method is complementary for the feature cell_leak added in an\nearlier PR. It allows *safely* reverting the effects of leaking a borrow guard by\nstatically proving that such a guard could not longer exist. This was\nnot added to the existing `get_mut` out of concern of impacting the\ncomplexity of the otherwise pure pointer cast and because the name\n`get_mut` poorly communicates the intent of resetting remaining borrows.\n\nThis is a follow-up to #68712 and uses the same tracking issue, #69099,\nas these methods deal with the same mechanism and the idea came up\n[in a review comment](https://github.com/rust-lang/rust/pull/68712#discussion_r384670041).\n\n@dtolnay who reviewed the prior PR.\ncc @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83aad6b9a86e6331620d8ecb496ca2d62e887c7c", "html_url": "https://github.com/rust-lang/rust/commit/83aad6b9a86e6331620d8ecb496ca2d62e887c7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83aad6b9a86e6331620d8ecb496ca2d62e887c7c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a72ecf2c5c97933cecce91cb58d104da8120624", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a72ecf2c5c97933cecce91cb58d104da8120624", "html_url": "https://github.com/rust-lang/rust/commit/5a72ecf2c5c97933cecce91cb58d104da8120624"}, {"sha": "51b93966240acffdbe3fbb898bb647a03b146e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b93966240acffdbe3fbb898bb647a03b146e09", "html_url": "https://github.com/rust-lang/rust/commit/51b93966240acffdbe3fbb898bb647a03b146e09"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "dbf073cd4792e52ba8eb9fb419694483a6624a8d", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/83aad6b9a86e6331620d8ecb496ca2d62e887c7c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83aad6b9a86e6331620d8ecb496ca2d62e887c7c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=83aad6b9a86e6331620d8ecb496ca2d62e887c7c", "patch": "@@ -958,6 +958,33 @@ impl<T: ?Sized> RefCell<T> {\n         unsafe { &mut *self.value.get() }\n     }\n \n+    /// Undo the effect of leaked guards on the borrow state of the `RefCell`.\n+    ///\n+    /// This call is similar to [`get_mut`] but more specialized. It borrows `RefCell` mutably to\n+    /// ensure no borrows exist and then resets the state tracking shared borrows. This is relevant\n+    /// if some `Ref` or `RefMut` borrows have been leaked.\n+    ///\n+    /// [`get_mut`]: #method.get_mut\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_leak)]\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let mut c = RefCell::new(0);\n+    /// std::mem::forget(c.borrow_mut());\n+    ///\n+    /// assert!(c.try_borrow().is_err());\n+    /// c.undo_leak();\n+    /// assert!(c.try_borrow().is_ok());\n+    /// ```\n+    #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n+    pub fn undo_leak(&mut self) -> &mut T {\n+        *self.borrow.get_mut() = UNUSED;\n+        self.get_mut()\n+    }\n+\n     /// Immutably borrows the wrapped value, returning an error if the value is\n     /// currently mutably borrowed.\n     ///\n@@ -1272,8 +1299,10 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     /// ```\n     #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n     pub fn leak(orig: Ref<'b, T>) -> &'b T {\n-        // By forgetting this Ref we ensure that the borrow counter in the RefCell never goes back\n-        // to UNUSED again. No further mutable references can be created from the original cell.\n+        // By forgetting this Ref we ensure that the borrow counter in the RefCell can't go back to\n+        // UNUSED within the lifetime `'b`. Resetting the reference tracking state would require a\n+        // unique reference to the borrowed RefCell. No further mutable references can be created\n+        // from the original cell.\n         mem::forget(orig.borrow);\n         orig.value\n     }\n@@ -1387,9 +1416,11 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n     /// ```\n     #[unstable(feature = \"cell_leak\", issue = \"69099\")]\n     pub fn leak(orig: RefMut<'b, T>) -> &'b mut T {\n-        // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell never\n-        // goes back to UNUSED again. No further references can be created from the original cell,\n-        // making the current borrow the only reference for the remaining lifetime.\n+        // By forgetting this BorrowRefMut we ensure that the borrow counter in the RefCell can't\n+        // go back to UNUSED within the lifetime `'b`. Resetting the reference tracking state would\n+        // require a unique reference to the borrowed RefCell. No further references can be created\n+        // from the original cell within that lifetime, making the current borrow the only\n+        // reference for the remaining lifetime.\n         mem::forget(orig.borrow);\n         orig.value\n     }"}]}