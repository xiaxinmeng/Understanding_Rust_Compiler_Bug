{"sha": "95df8024e7e934aec9f985a6680b65fd0d40a428", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZGY4MDI0ZTdlOTM0YWVjOWY5ODVhNjY4MGI2NWZkMGQ0MGE0Mjg=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-17T16:23:18Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-17T16:55:37Z"}, "message": "improper_ctypes_definitions: allow `Box`\n\nThis commit stops linting against `Box` in `extern \"C\" fn`s for the\n`improper_ctypes_definitions` lint - boxes are documented to be\nFFI-safe.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "2b1999400acac6c378b290ad004973c171ba4e75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1999400acac6c378b290ad004973c171ba4e75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95df8024e7e934aec9f985a6680b65fd0d40a428", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8R2AkACgkQJZLnbIc4\nH9kFIg//egdY4odTCnUiREEuzkxBlX8/K8e6Q+lVb/GSzv6yRQ81KD8nLPE04tO9\nu1p5v98UoB68JA8dSInOsKf9mlBY6CslLHDclHvEm4TFmTi4GJFO9Vv/kZxkwdxU\nsXhgpFSb9foDmZHZ6ImJfbImNKTfn7Lyqi4S4jfug+7sURzJ14HJqxGhIultFwA8\ntyQWv/6D841m3bULzhfBksAvXbrxM6G07HgkC8a0ZzW9Dd065a5ji/Bvyd1vtz7P\n8mQtxKsfr0RPY+kbFlgl+qtA3L6nAza6G9vgQEOXVOrUI7BQ++dX8IPZOi35nwIz\nhpbBZAtBBfnp++TnvJ+2osBnvNWmgOBF4OM3D80IvQUjksSO+OvMX60paHFqJ6Wo\n3CSLfE5YF5TxkTvgQW89y29lMYiGm/r4wofJdifovi2/Srz7MzPbcW2Ywm+yPjvH\naQ3D8pMJEmWNaLHaWq7KTetCpW9ghmmfSVKklYBF8rSip5WJ7TKatFMbB3i2cMjo\naFUeC5uJg6Il9nuLQUEHPA7vGw2nPs9hrv9Zlz99Kpv+2hluS5mb65NhPl6p2xWX\nLB4CnAx3h1wVjf5dloO4kEIQizAViZ6rFxVX6m1Gy7QdzPEeIAAZ1wfOWx4Qy8PZ\nITQ/mmItpzrU4OOVaoyQRQHH6cZr301YjEcmpYcFsfyBacHusc0=\n=0EL4\n-----END PGP SIGNATURE-----", "payload": "tree 2b1999400acac6c378b290ad004973c171ba4e75\nparent e2e29de5e8a2908260d54182638241ff086a26c2\nauthor David Wood <david@davidtw.co> 1595002998 +0100\ncommitter David Wood <david@davidtw.co> 1595004937 +0100\n\nimproper_ctypes_definitions: allow `Box`\n\nThis commit stops linting against `Box` in `extern \"C\" fn`s for the\n`improper_ctypes_definitions` lint - boxes are documented to be\nFFI-safe.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95df8024e7e934aec9f985a6680b65fd0d40a428", "html_url": "https://github.com/rust-lang/rust/commit/95df8024e7e934aec9f985a6680b65fd0d40a428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95df8024e7e934aec9f985a6680b65fd0d40a428/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e29de5e8a2908260d54182638241ff086a26c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e29de5e8a2908260d54182638241ff086a26c2", "html_url": "https://github.com/rust-lang/rust/commit/e2e29de5e8a2908260d54182638241ff086a26c2"}], "stats": {"total": 122, "additions": 58, "deletions": 64}, "files": [{"sha": "7014722bab824f930eb3f5b48a0f624ce0d662eb", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=95df8024e7e934aec9f985a6680b65fd0d40a428", "patch": "@@ -531,6 +531,11 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         match ty.kind {\n             ty::FnPtr(_) => true,\n             ty::Ref(..) => true,\n+            ty::Adt(def, _)\n+                if def.is_box() && matches!(self.mode, ImproperCTypesMode::Definitions) =>\n+            {\n+                true\n+            }\n             ty::Adt(def, substs) if def.repr.transparent() && !def.is_union() => {\n                 let guaranteed_nonnull_optimization = self\n                     .cx\n@@ -558,7 +563,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     /// Check if this enum can be safely exported based on the \"nullable pointer optimization\".\n-    /// Currently restricted to function pointers, references, `core::num::NonZero*`,\n+    /// Currently restricted to function pointers, boxes, references, `core::num::NonZero*`,\n     /// `core::ptr::NonNull`, and `#[repr(transparent)]` newtypes.\n     fn is_repr_nullable_ptr(\n         &self,\n@@ -692,6 +697,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n \n         match ty.kind {\n+            ty::Adt(def, _)\n+                if def.is_box() && matches!(self.mode, ImproperCTypesMode::Definitions) =>\n+            {\n+                FfiSafe\n+            }\n+\n             ty::Adt(def, substs) => {\n                 if def.is_phantom_data() {\n                     return FfiPhantom(ty);"}, {"sha": "aa02e578663286e4add09881b496b47a5a247af5", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=95df8024e7e934aec9f985a6680b65fd0d40a428", "patch": "@@ -71,7 +71,8 @@ pub extern \"C\" fn str_type(p: &str) { }\n //~^ ERROR: uses type `str`\n \n pub extern \"C\" fn box_type(p: Box<u32>) { }\n-//~^ ERROR uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn opt_box_type(p: Option<Box<u32>>) { }\n \n pub extern \"C\" fn char_type(p: char) { }\n //~^ ERROR uses type `char`\n@@ -106,7 +107,6 @@ pub extern \"C\" fn fn_type2(p: fn()) { }\n //~^ ERROR uses type `fn()`\n \n pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n-//~^ ERROR: uses type `std::boxed::Box<u32>`\n \n pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n //~^ ERROR: uses type `i128`\n@@ -115,7 +115,6 @@ pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n //~^ ERROR: uses type `str`\n \n pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n-//~^ ERROR: uses type `std::boxed::Box<u32>`\n \n pub extern \"C\" fn good3(fptr: Option<extern fn()>) { }\n "}, {"sha": "d0a449514e50ef767db39de3abc0817ba96eeab5", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=95df8024e7e934aec9f985a6680b65fd0d40a428", "patch": "@@ -21,17 +21,8 @@ LL | pub extern \"C\" fn str_type(p: &str) { }\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:73:31\n-   |\n-LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n-   |                               ^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n error: `extern` fn uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:76:32\n+  --> $DIR/lint-ctypes-fn.rs:77:32\n    |\n LL | pub extern \"C\" fn char_type(p: char) { }\n    |                                ^^^^ not FFI-safe\n@@ -40,23 +31,23 @@ LL | pub extern \"C\" fn char_type(p: char) { }\n    = note: the `char` type has no C equivalent\n \n error: `extern` fn uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:79:32\n+  --> $DIR/lint-ctypes-fn.rs:80:32\n    |\n LL | pub extern \"C\" fn i128_type(p: i128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:82:32\n+  --> $DIR/lint-ctypes-fn.rs:83:32\n    |\n LL | pub extern \"C\" fn u128_type(p: u128) { }\n    |                                ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:85:33\n+  --> $DIR/lint-ctypes-fn.rs:86:33\n    |\n LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    |                                 ^^^^^^^^^^ not FFI-safe\n@@ -65,7 +56,7 @@ LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:88:34\n+  --> $DIR/lint-ctypes-fn.rs:89:34\n    |\n LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    |                                  ^^^^^^^ not FFI-safe\n@@ -74,7 +65,7 @@ LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n    = note: tuples have unspecified layout\n \n error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:91:32\n+  --> $DIR/lint-ctypes-fn.rs:92:32\n    |\n LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n    |                                ^^^^^^^^ not FFI-safe\n@@ -88,7 +79,7 @@ LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:94:40\n+  --> $DIR/lint-ctypes-fn.rs:95:40\n    |\n LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -101,15 +92,15 @@ LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:97:51\n+  --> $DIR/lint-ctypes-fn.rs:98:51\n    |\n LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n    |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:102:30\n+  --> $DIR/lint-ctypes-fn.rs:103:30\n    |\n LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    |                              ^^^^^^ not FFI-safe\n@@ -118,23 +109,14 @@ LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` fn uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:105:31\n+  --> $DIR/lint-ctypes-fn.rs:106:31\n    |\n LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n    |                               ^^^^ not FFI-safe\n    |\n    = help: consider using an `extern fn(...) -> ...` function pointer instead\n    = note: this function pointer has Rust-specific calling convention\n \n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:108:35\n-   |\n-LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n-   |                                   ^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n error: `extern` fn uses type `i128`, which is not FFI-safe\n   --> $DIR/lint-ctypes-fn.rs:111:39\n    |\n@@ -152,25 +134,16 @@ LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n    = help: consider using `*const u8` and a length instead\n    = note: string slices have no C equivalent\n \n-error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:117:37\n-   |\n-LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n-   |                                     ^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n-   = note: this struct has unspecified layout\n-\n error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:161:43\n+  --> $DIR/lint-ctypes-fn.rs:160:43\n    |\n LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n    |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:174:39\n+  --> $DIR/lint-ctypes-fn.rs:173:39\n    |\n LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    |                                       ^^^^^^ not FFI-safe\n@@ -179,13 +152,13 @@ LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n    = note: this struct has unspecified layout\n \n error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-fn.rs:177:41\n+  --> $DIR/lint-ctypes-fn.rs:176:41\n    |\n LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n    |                                         ^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 17 previous errors\n "}, {"sha": "bdf95350c70451c6a82eb66a03c8332f790b95e8", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=95df8024e7e934aec9f985a6680b65fd0d40a428", "patch": "@@ -48,6 +48,8 @@ extern {\n     pub fn slice_type(p: &[u32]); //~ ERROR: uses type `[u32]`\n     pub fn str_type(p: &str); //~ ERROR: uses type `str`\n     pub fn box_type(p: Box<u32>); //~ ERROR uses type `std::boxed::Box<u32>`\n+    pub fn opt_box_type(p: Option<Box<u32>>);\n+    //~^ ERROR uses type `std::option::Option<std::boxed::Box<u32>>`\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`"}, {"sha": "13b9adca3f9f5af7c4cd86f6d369daac55ae66b8", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95df8024e7e934aec9f985a6680b65fd0d40a428/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=95df8024e7e934aec9f985a6680b65fd0d40a428", "patch": "@@ -58,8 +58,17 @@ LL |     pub fn box_type(p: Box<u32>);\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n \n+error: `extern` block uses type `std::option::Option<std::boxed::Box<u32>>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:51:28\n+   |\n+LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n+   |                            ^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n+   = note: enum has no representation hint\n+\n error: `extern` block uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:51:25\n+  --> $DIR/lint-ctypes.rs:53:25\n    |\n LL |     pub fn char_type(p: char);\n    |                         ^^^^ not FFI-safe\n@@ -68,31 +77,31 @@ LL |     pub fn char_type(p: char);\n    = note: the `char` type has no C equivalent\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:52:25\n+  --> $DIR/lint-ctypes.rs:54:25\n    |\n LL |     pub fn i128_type(p: i128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:53:25\n+  --> $DIR/lint-ctypes.rs:55:25\n    |\n LL |     pub fn u128_type(p: u128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `dyn std::clone::Clone`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:54:26\n+  --> $DIR/lint-ctypes.rs:56:26\n    |\n LL |     pub fn trait_type(p: &dyn Clone);\n    |                          ^^^^^^^^^^ not FFI-safe\n    |\n    = note: trait objects have no C equivalent\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:55:26\n+  --> $DIR/lint-ctypes.rs:57:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n    |                          ^^^^^^^^^^ not FFI-safe\n@@ -101,7 +110,7 @@ LL |     pub fn tuple_type(p: (i32, i32));\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:56:27\n+  --> $DIR/lint-ctypes.rs:58:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n    |                           ^^^^^^^ not FFI-safe\n@@ -110,7 +119,7 @@ LL |     pub fn tuple_type2(p: I32Pair);\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:57:25\n+  --> $DIR/lint-ctypes.rs:59:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n    |                         ^^^^^^^^ not FFI-safe\n@@ -124,7 +133,7 @@ LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:58:33\n+  --> $DIR/lint-ctypes.rs:60:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -137,15 +146,15 @@ LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:61:12\n+  --> $DIR/lint-ctypes.rs:63:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:62:23\n+  --> $DIR/lint-ctypes.rs:64:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n    |                       ^^^^^^ not FFI-safe\n@@ -154,7 +163,7 @@ LL |     pub fn fn_type(p: RustFn);\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:63:24\n+  --> $DIR/lint-ctypes.rs:65:24\n    |\n LL |     pub fn fn_type2(p: fn());\n    |                        ^^^^ not FFI-safe\n@@ -163,7 +172,7 @@ LL |     pub fn fn_type2(p: fn());\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:64:28\n+  --> $DIR/lint-ctypes.rs:66:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -172,15 +181,15 @@ LL |     pub fn fn_contained(p: RustBadRet);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:65:32\n+  --> $DIR/lint-ctypes.rs:67:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n    |                                ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:66:31\n+  --> $DIR/lint-ctypes.rs:68:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n    |                               ^^^^^^^^^^^^^^ not FFI-safe\n@@ -189,7 +198,7 @@ LL |     pub fn transparent_str(p: TransparentStr);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:67:30\n+  --> $DIR/lint-ctypes.rs:69:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -198,7 +207,7 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:68:27\n+  --> $DIR/lint-ctypes.rs:70:27\n    |\n LL |     pub fn raw_array(arr: [u8; 8]);\n    |                           ^^^^^^^ not FFI-safe\n@@ -207,20 +216,20 @@ LL |     pub fn raw_array(arr: [u8; 8]);\n    = note: passing raw arrays by value is not FFI-safe\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:70:34\n+  --> $DIR/lint-ctypes.rs:72:34\n    |\n LL |     pub static static_u128_type: u128;\n    |                                  ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:71:40\n+  --> $DIR/lint-ctypes.rs:73:40\n    |\n LL |     pub static static_u128_array_type: [u128; 16];\n    |                                        ^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 24 previous errors\n "}]}