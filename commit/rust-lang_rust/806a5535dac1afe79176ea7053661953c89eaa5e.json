{"sha": "806a5535dac1afe79176ea7053661953c89eaa5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNmE1NTM1ZGFjMWFmZTc5MTc2ZWE3MDUzNjYxOTUzYzg5ZWFhNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-01T07:28:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-01T07:28:44Z"}, "message": "Auto merge of #34004 - Manishearth:rollup, r=Manishearth\n\nRollup of 11 pull requests\n\n- Successful merges: #33385, #33606, #33841, #33892, #33896, #33915, #33921, #33967, #33970, #33973, #33977\n- Failed merges:", "tree": {"sha": "99d22a2009b161f10079a54f94fd3cd754c51910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d22a2009b161f10079a54f94fd3cd754c51910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/806a5535dac1afe79176ea7053661953c89eaa5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/806a5535dac1afe79176ea7053661953c89eaa5e", "html_url": "https://github.com/rust-lang/rust/commit/806a5535dac1afe79176ea7053661953c89eaa5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/806a5535dac1afe79176ea7053661953c89eaa5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433d70cda2e6d61d5bbb20423f0937a643cf34b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/433d70cda2e6d61d5bbb20423f0937a643cf34b4", "html_url": "https://github.com/rust-lang/rust/commit/433d70cda2e6d61d5bbb20423f0937a643cf34b4"}, {"sha": "42e593a540ac5b08d4bd1cb6fd3d0fcb9ae74a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42e593a540ac5b08d4bd1cb6fd3d0fcb9ae74a8f", "html_url": "https://github.com/rust-lang/rust/commit/42e593a540ac5b08d4bd1cb6fd3d0fcb9ae74a8f"}], "stats": {"total": 435, "additions": 354, "deletions": 81}, "files": [{"sha": "7513e524e73a1ef5499fd5b268572ba3b80961a2", "filename": "src/doc/footer.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Fdoc%2Ffooter.inc", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Fdoc%2Ffooter.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ffooter.inc?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -1,5 +1,5 @@\n <footer><p>\n-Copyright &copy; 2011-2015 The Rust Project Developers. Licensed under the\n+Copyright &copy; 2011 The Rust Project Developers. Licensed under the\n <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache License, Version 2.0</a>\n or the <a href=\"https://opensource.org/licenses/MIT\">MIT license</a>, at your option.\n </p><p>"}, {"sha": "6f77d79ab0bfec4c419241588c42f0c3e97d7156", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -8,19 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Utilities for formatting and printing strings\n+//! Utilities for formatting and printing `String`s\n //!\n //! This module contains the runtime support for the `format!` syntax extension.\n //! This macro is implemented in the compiler to emit calls to this module in\n-//! order to format arguments at runtime into strings and streams.\n+//! order to format arguments at runtime into strings.\n //!\n //! # Usage\n //!\n //! The `format!` macro is intended to be familiar to those coming from C's\n-//! printf/fprintf functions or Python's `str.format` function. In its current\n-//! revision, the `format!` macro returns a `String` type which is the result of\n-//! the formatting. In the future it will also be able to pass in a stream to\n-//! format arguments directly while performing minimal allocations.\n+//! printf/fprintf functions or Python's `str.format` function.\n //!\n //! Some examples of the `format!` extension are:\n //!"}, {"sha": "b6ae6fde1e35db40b2d47cae5bb7b40c72f3e78c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -1830,6 +1830,9 @@ impl<A> SlicePartialEq<A> for [A]\n         if self.len() != other.len() {\n             return false;\n         }\n+        if self.as_ptr() == other.as_ptr() {\n+            return true;\n+        }\n         unsafe {\n             let size = mem::size_of_val(self);\n             memcmp(self.as_ptr() as *const u8,"}, {"sha": "32b81ab7f53a8ab19b69487bf98167ad0dd964a7", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -354,7 +354,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n /// UTF-8-like encoding).\n #[unstable(feature = \"str_internals\", issue = \"0\")]\n #[inline]\n-pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n+pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n     let x = match bytes.next() {\n         None => return None,\n@@ -388,7 +388,8 @@ pub fn next_code_point(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n /// Reads the last code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n #[inline]\n-fn next_code_point_reverse(bytes: &mut slice::Iter<u8>) -> Option<u32> {\n+fn next_code_point_reverse<'a,\n+                           I: DoubleEndedIterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n     let w = match bytes.next_back() {\n         None => return None,"}, {"sha": "eb1fb43789f996485d78d204155647906888f683", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -26,7 +26,7 @@ use syntax::parse::token::InternedString;\n use syntax::codemap::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n+use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n@@ -37,6 +37,7 @@ use hir::pat_util::EnumerateAndAdjustIterator;\n \n use std::mem::replace;\n use std::cmp::Ordering;\n+use std::ops::Deref;\n \n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Clone, Copy, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n@@ -322,7 +323,7 @@ impl<'a, 'tcx> Index<'tcx> {\n /// features and possibly prints errors. Returns a list of all\n /// features used.\n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                          -> FnvHashMap<InternedString, StabilityLevel> {\n+                                          -> FnvHashMap<InternedString, attr::StabilityLevel> {\n     let _task = tcx.dep_graph.in_task(DepNode::StabilityCheck);\n     let ref active_lib_features = tcx.sess.features.borrow().declared_lib_features;\n \n@@ -343,7 +344,7 @@ pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     active_features: FnvHashSet<InternedString>,\n-    used_features: FnvHashMap<InternedString, StabilityLevel>,\n+    used_features: FnvHashMap<InternedString, attr::StabilityLevel>,\n     // Within a block where feature gate checking can be skipped.\n     in_skip_block: u32,\n }\n@@ -367,7 +368,8 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         match *stab {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(), Unstable);\n+                self.used_features.insert(feature.clone(),\n+                                          attr::Unstable { reason: reason.clone(), issue: issue });\n \n                 if !self.active_features.contains(feature) {\n                     let msg = match *reason {\n@@ -380,7 +382,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 }\n             }\n             Some(&Stability { ref level, ref feature, .. }) => {\n-                self.used_features.insert(feature.clone(), StabilityLevel::from_attr_level(level));\n+                self.used_features.insert(feature.clone(), level.clone());\n \n                 // Stable APIs are always ok to call and deprecated APIs are\n                 // handled by a lint.\n@@ -716,28 +718,32 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n /// libraries, identify activated features that don't exist and error about them.\n pub fn check_unused_or_stable_features(sess: &Session,\n                                        lib_features_used: &FnvHashMap<InternedString,\n-                                                                      StabilityLevel>) {\n+                                                                      attr::StabilityLevel>) {\n     let ref declared_lib_features = sess.features.borrow().declared_lib_features;\n     let mut remaining_lib_features: FnvHashMap<InternedString, Span>\n         = declared_lib_features.clone().into_iter().collect();\n \n-    let stable_msg = \"this feature is stable. attribute no longer needed\";\n+    fn format_stable_since_msg(version: &str) -> String {\n+        format!(\"this feature has been stable since {}. Attribute no longer needed\", version)\n+    }\n \n-    for &span in &sess.features.borrow().declared_stable_lang_features {\n+    for &(ref stable_lang_feature, span) in &sess.features.borrow().declared_stable_lang_features {\n+        let version = find_lang_feature_accepted_version(stable_lang_feature.deref())\n+            .expect(\"unexpectedly couldn't find version feature was stabilized\");\n         sess.add_lint(lint::builtin::STABLE_FEATURES,\n                       ast::CRATE_NODE_ID,\n                       span,\n-                      stable_msg.to_string());\n+                      format_stable_since_msg(version));\n     }\n \n     for (used_lib_feature, level) in lib_features_used {\n         match remaining_lib_features.remove(used_lib_feature) {\n             Some(span) => {\n-                if *level == Stable {\n+                if let &attr::StabilityLevel::Stable { since: ref version } = level {\n                     sess.add_lint(lint::builtin::STABLE_FEATURES,\n                                   ast::CRATE_NODE_ID,\n                                   span,\n-                                  stable_msg.to_string());\n+                                  format_stable_since_msg(version.deref()));\n                 }\n             }\n             None => ( /* used but undeclared, handled during the previous ast visit */ )"}, {"sha": "3d187cfc08175b44e430118e42753a78bf0b42fb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n                                   arenas: &'tcx CtxtArenas<'tcx>,\n-                                  def_map: RefCell<DefMap>,\n+                                  def_map: DefMap,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   map: ast_map::Map<'tcx>,\n                                   freevars: FreevarMap,\n@@ -693,7 +693,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             item_variance_map: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             variance_computed: Cell::new(false),\n             sess: s,\n-            def_map: def_map,\n+            def_map: RefCell::new(def_map),\n             tables: RefCell::new(Tables::empty()),\n             impl_trait_refs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             trait_defs: RefCell::new(DepTrackingMap::new(dep_graph.clone())),"}, {"sha": "cbbbd84ec505a42fcaf9f43cf72c20259d260d4a", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -44,7 +44,6 @@ use super::Compilation;\n \n use serialize::json;\n \n-use std::cell::RefCell;\n use std::collections::HashMap;\n use std::env;\n use std::ffi::{OsString, OsStr};\n@@ -893,7 +892,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     let trait_map = resolutions.trait_map;\n     TyCtxt::create_and_enter(sess,\n                              arenas,\n-                             RefCell::new(resolutions.def_map),\n+                             resolutions.def_map,\n                              named_region_map,\n                              hir_map,\n                              resolutions.freevars,"}, {"sha": "6423d94e6f6fb703baba0b6da4948431d122ea82", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -29,7 +29,6 @@ use rustc_metadata::cstore::CStore;\n use rustc_metadata::creader::read_local_crates;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n-use std::cell::RefCell;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -140,7 +139,7 @@ fn test_env<F>(source_string: &str,\n     let index = stability::Index::new(&ast_map);\n     TyCtxt::create_and_enter(&sess,\n                              &arenas,\n-                             RefCell::new(resolutions.def_map),\n+                             resolutions.def_map,\n                              named_region_map.unwrap(),\n                              ast_map,\n                              resolutions.freevars,"}, {"sha": "80c56a5dc08f15a0407f4d0d97bf5d352e731102", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -118,10 +118,6 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.cx.infcx.tcx\n     }\n \n-    fn infcx(&self) -> &'a InferCtxt<'a, 'gcx, 'tcx> {\n-        self.cx.infcx\n-    }\n-\n     fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if ty.needs_infer() || ty.has_escaping_regions() || ty.references_error() {\n             span_mirbug_and_err!(self, parent, \"bad type {:?}\", ty)\n@@ -292,30 +288,11 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         };\n \n         if let Some(field) = variant.fields.get(field.index()) {\n-            Ok(self.normalize(field.ty(tcx, substs)))\n+            Ok(self.cx.normalize(&field.ty(tcx, substs)))\n         } else {\n             Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n         }\n     }\n-\n-    fn normalize(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        let infcx = self.infcx();\n-        let mut selcx = traits::SelectionContext::new(infcx);\n-        let cause = traits::ObligationCause::misc(self.last_span, 0);\n-        let traits::Normalized { value: ty, obligations } =\n-            traits::normalize(&mut selcx, cause, &ty);\n-\n-        debug!(\"normalize: ty={:?} obligations={:?}\",\n-               ty,\n-               obligations);\n-\n-        let mut fulfill_cx = &mut self.cx.fulfillment_cx;\n-        for obligation in obligations {\n-            fulfill_cx.register_predicate_obligation(infcx, obligation);\n-        }\n-\n-        ty\n-    }\n }\n \n pub struct TypeChecker<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n@@ -373,7 +350,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn check_terminator(&self,\n+    fn check_terminator(&mut self,\n                         mir: &Mir<'tcx>,\n                         term: &Terminator<'tcx>) {\n         debug!(\"check_terminator: {:?}\", term);\n@@ -431,6 +408,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }\n                 };\n                 let sig = tcx.erase_late_bound_regions(&func_ty.sig);\n+                let sig = self.normalize(&sig);\n                 self.check_call_dest(mir, term, &sig, destination);\n \n                 if self.is_box_free(func) {\n@@ -558,6 +536,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+\n+    fn normalize<T>(&mut self, value: &T) -> T\n+        where T: fmt::Debug + TypeFoldable<'tcx>\n+    {\n+        let mut selcx = traits::SelectionContext::new(self.infcx);\n+        let cause = traits::ObligationCause::misc(self.last_span, 0);\n+        let traits::Normalized { value, obligations } =\n+            traits::normalize(&mut selcx, cause, value);\n+\n+        debug!(\"normalize: value={:?} obligations={:?}\",\n+               value,\n+               obligations);\n+\n+        let mut fulfill_cx = &mut self.fulfillment_cx;\n+        for obligation in obligations {\n+            fulfill_cx.register_predicate_obligation(self.infcx, obligation);\n+        }\n+\n+        value\n+    }\n+\n     fn verify_obligations(&mut self, mir: &Mir<'tcx>) {\n         self.last_span = mir.span;\n         if let Err(e) = self.fulfillment_cx.select_all_or_error(self.infcx) {"}, {"sha": "36053d3c4ffa78da45e937b69d55541f6b335a2a", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -2422,13 +2422,16 @@ impl<'a> Resolver<'a> {\n                                 }\n                             }\n                         }\n-                    } else if let Err(false) = self.resolve_path(pat_id, &path, 0, ValueNS) {\n-                        resolve_error(\n-                            self,\n-                            path.span,\n-                            ResolutionError::UnresolvedEnumVariantStructOrConst(\n-                                &path.segments.last().unwrap().identifier.name.as_str())\n-                        );\n+                    } else {\n+                        if let Err(false) = self.resolve_path(pat_id, &path, 0, ValueNS) {\n+                            // No error has been reported, so we need to do this ourselves.\n+                            resolve_error(\n+                                self,\n+                                path.span,\n+                                ResolutionError::UnresolvedEnumVariantStructOrConst(\n+                                    &path.segments.last().unwrap().identifier.name.as_str())\n+                            );\n+                        }\n                         self.record_def(pattern.id, err_path_resolution());\n                     }\n                     visit::walk_path(self, path);"}, {"sha": "2d780559db1229b5382bdf831ec4b117f93ff43d", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -230,6 +230,7 @@ impl<T> BufRead for Cursor<T> where T: AsRef<[u8]> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for Cursor<&'a mut [u8]> {\n+    #[inline]\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let pos = cmp::min(self.pos, self.inner.len() as u64);\n         let amt = (&mut self.inner[(pos as usize)..]).write(data)?;\n@@ -269,6 +270,7 @@ impl Write for Cursor<Vec<u8>> {\n \n #[stable(feature = \"cursor_box_slice\", since = \"1.5.0\")]\n impl Write for Cursor<Box<[u8]>> {\n+    #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         let pos = cmp::min(self.pos, self.inner.len() as u64);\n         let amt = (&mut self.inner[(pos as usize)..]).write(buf)?;"}, {"sha": "69e24cf071902252c6a211fdfd8435d48d5509b9", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -179,15 +179,15 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n             TokenTree::Delimited(_, ref delim) => &delim.tts[..],\n-            _ => cx.span_fatal(sp, \"malformed macro lhs\")\n+            _ => cx.span_bug(sp, \"malformed macro lhs\")\n         };\n \n         match TokenTree::parse(cx, lhs_tt, arg) {\n             Success(named_matches) => {\n                 let rhs = match rhses[i] {\n                     // ignore delimiters\n                     TokenTree::Delimited(_, ref delimed) => delimed.tts.clone(),\n-                    _ => cx.span_fatal(sp, \"malformed macro rhs\"),\n+                    _ => cx.span_bug(sp, \"malformed macro rhs\"),\n                 };\n                 // rhs has holes ( `$id` and `$(...)` that need filled)\n                 let trncbr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n@@ -326,19 +326,14 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n     NormalTT(exp, Some(def.span), def.allow_internal_unstable)\n }\n \n-// why is this here? because of https://github.com/rust-lang/rust/issues/27774\n-fn ref_slice<A>(s: &A) -> &[A] { use std::slice::from_raw_parts; unsafe { from_raw_parts(s, 1) } }\n-\n fn check_lhs_nt_follows(cx: &mut ExtCtxt, lhs: &TokenTree) -> bool {\n     // lhs is going to be like TokenTree::Delimited(...), where the\n     // entire lhs is those tts. Or, it can be a \"bare sequence\", not wrapped in parens.\n     match lhs {\n         &TokenTree::Delimited(_, ref tts) => check_matcher(cx, &tts.tts),\n-        tt @ &TokenTree::Sequence(..) => check_matcher(cx, ref_slice(tt)),\n         _ => {\n-            cx.span_err(lhs.get_span(),\n-                        \"invalid macro matcher; matchers must be contained \\\n-                         in balanced delimiters or a repetition indicator\");\n+            cx.span_err(lhs.get_span(), \"invalid macro matcher; matchers must \\\n+                                         be contained in balanced delimiters\");\n             false\n         }\n     }"}, {"sha": "08e593ca74780407515b2bcd252310f093e927a5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -59,8 +59,8 @@ macro_rules! declare_features {\n \n         /// A set of features to be used by later passes.\n         pub struct Features {\n-            /// spans of #![feature] attrs for stable language features. for error reporting\n-            pub declared_stable_lang_features: Vec<Span>,\n+            /// #![feature] attrs for stable language features, for error reporting\n+            pub declared_stable_lang_features: Vec<(InternedString, Span)>,\n             /// #![feature] attrs for non-language (library) features\n             pub declared_lib_features: Vec<(InternedString, Span)>,\n             $(pub $feature: bool),+\n@@ -753,6 +753,10 @@ pub fn check_attribute(attr: &ast::Attribute, handler: &Handler,\n     cx.check_attribute(attr, true);\n }\n \n+pub fn find_lang_feature_accepted_version(feature: &str) -> Option<&'static str> {\n+    ACCEPTED_FEATURES.iter().find(|t| t.0 == feature).map(|t| t.1)\n+}\n+\n fn find_lang_feature_issue(feature: &str) -> Option<u32> {\n     if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n         let issue = info.2;\n@@ -1191,7 +1195,7 @@ pub fn get_features(span_handler: &Handler, krate: &ast::Crate) -> Features {\n                     }\n                     else if let Some(&(_, _, _)) = ACCEPTED_FEATURES.iter()\n                         .find(|& &(n, _, _)| name == n) {\n-                        features.declared_stable_lang_features.push(mi.span);\n+                        features.declared_stable_lang_features.push((name, mi.span));\n                     } else {\n                         features.declared_lib_features.push((name, mi.span));\n                     }"}, {"sha": "16d713bba92ab3c11b0f848d0c22a16268efc708", "filename": "src/test/compile-fail/E0117.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0117.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+impl Drop for u32 {} //~ ERROR E0117\n+\n+fn main() {\n+}"}, {"sha": "d37ff34b861f41d272970920bf135f222773d5ff", "filename": "src/test/compile-fail/E0118.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+impl (u8, u8) { //~ ERROR E0118\n+    fn get_state(&self) -> String {\n+        String::new()\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "9528631b3047b6bd749b3aad2db3a7f1ea5cd4a0", "filename": "src/test/compile-fail/E0119.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0119.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0119.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0119.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait MyTrait {\n+    fn get(&self) -> usize;\n+}\n+\n+impl<T> MyTrait for T {\n+    fn get(&self) -> usize { 0 }\n+}\n+\n+struct Foo {\n+    value: usize\n+}\n+\n+impl MyTrait for Foo { //~ ERROR E0119\n+    fn get(&self) -> usize { self.value }\n+}\n+\n+fn main() {\n+}"}, {"sha": "de084274f6fb80883c8cce0380e1d4cf5cba7d1f", "filename": "src/test/compile-fail/E0120.rs", "status": "renamed", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0120.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Make sure that \"bare sequences\" don't ICE in follow checking\n+trait MyTrait {}\n \n-// pretty-expanded FIXME #23616\n-\n-macro_rules! bare {\n-    $($id:expr),+ => ( $($id)+ )\n+impl Drop for MyTrait { //~ ERROR E0120\n+    fn drop(&mut self) {}\n }\n \n-fn main() { }\n+fn main() {\n+}", "previous_filename": "src/test/run-pass/issue-21350.rs"}, {"sha": "b26b5f41bfe4772fe185303640be9c3e445ebbc1", "filename": "src/test/compile-fail/E0121.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0121.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo() -> _ { 5 } //~ ERROR E0121\n+\n+static BAR: _ = \"test\"; //~ ERROR E0121\n+\n+fn main() {\n+}"}, {"sha": "414b19ead624d052aea6d42f382d0b27b963fe5a", "filename": "src/test/compile-fail/E0124.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0124.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    field1: i32,\n+    field1: i32, //~ ERROR E0124\n+}\n+\n+fn main() {\n+}"}, {"sha": "37071012825ec9b67f9984e7f202300f80eee315", "filename": "src/test/compile-fail/E0128.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0128.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<T=U, U=()> { //~ ERROR E0128\n+    field1: T,\n+    field2: U,\n+}\n+\n+fn main() {\n+}"}, {"sha": "ef5961e133894d37c90103238f9cbb280d64fd58", "filename": "src/test/compile-fail/E0130.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0130.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn foo((a, b): (u32, u32)); //~ ERROR E0130\n+}\n+\n+fn main() {\n+}"}, {"sha": "aa11577ccdf1ed1f1a0578dcfd050079d1b2c7ac", "filename": "src/test/compile-fail/E0131.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0131.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main<T>() { //~ ERROR E0131\n+}"}, {"sha": "ff19a577f903dbe4016e18043eb6943768c6fb97", "filename": "src/test/compile-fail/E0132.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0132.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0132.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0132.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(start)]\n+\n+#[start]\n+fn f<T>() {} //~ ERROR E0132\n+\n+fn main() {\n+}"}, {"sha": "630ee851d0af006e6d320ee229cd3c5d37fa4952", "filename": "src/test/compile-fail/E0133.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0133.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0133.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0133.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+unsafe fn f() { return; }\n+\n+fn main() {\n+    f(); //~ ERROR E0133\n+}"}, {"sha": "695ce7995a9a46ef3cb44fad2b4a5cc687c8388d", "filename": "src/test/compile-fail/E0137.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0137.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0137.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0137.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(main)]\n+\n+#[main]\n+fn foo() {}\n+\n+#[main]\n+fn f() {} //~ ERROR E0137"}, {"sha": "97d85e5e71e0898e10840cd33109da3cb4fe7b69", "filename": "src/test/compile-fail/E0138.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0138.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(start)]\n+\n+#[start]\n+fn foo(argc: isize, argv: *const *const u8) -> isize {}\n+\n+#[start]\n+fn f(argc: isize, argv: *const *const u8) -> isize {} //~ ERROR E0138"}, {"sha": "ae501b94e3f057ac919d5587066592689a09a5cf", "filename": "src/test/compile-fail/E0152.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0152.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0152.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0152.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(lang_items)]\n+\n+#[lang = \"panic_fmt\"]\n+struct Foo; //~ ERROR E0152\n+\n+fn main() {\n+}"}, {"sha": "81adf9083024d62d4d1f41be911dfc1365ee178e", "filename": "src/test/compile-fail/E0161.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0161.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2FE0161.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0161.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+\n+fn main() {\n+    let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n+                                     //~^ ERROR E0507\n+}"}, {"sha": "5d81e21f05684e1f816522c214a289bc287458b7", "filename": "src/test/compile-fail/malformed_macro_lhs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmalformed_macro_lhs.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n macro_rules! my_precioooous {\n-    $($t:tt)* => (1);\n+    $($t:tt)* => (1); //~ ERROR invalid macro matcher\n }\n \n fn main() {\n-    my_precioooous!(); //~ ERROR malformed macro lhs\n+    my_precioooous!();\n }"}, {"sha": "6f8c95c384032c343b99df245b2c5003a04b74af", "filename": "src/test/compile-fail/stable-features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Fcompile-fail%2Fstable-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstable-features.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -12,8 +12,8 @@\n // language and lib features.\n \n #![deny(stable_features)]\n-#![feature(test_accepted_feature)] //~ ERROR this feature is stable\n-#![feature(rust1)] //~ ERROR this feature is stable\n+#![feature(test_accepted_feature)] //~ ERROR this feature has been stable since 1.0.0\n+#![feature(rust1)] //~ ERROR this feature has been stable since 1.0.0\n \n fn main() {\n     let _foo: Vec<()> = Vec::new();"}, {"sha": "08401c275a52cff5dbbba98d714feae9e86a67de", "filename": "src/test/run-pass/mir_call_with_associated_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/806a5535dac1afe79176ea7053661953c89eaa5e/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_call_with_associated_type.rs?ref=806a5535dac1afe79176ea7053661953c89eaa5e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+impl<'a> Trait for &'a () {\n+    type Type = u32;\n+}\n+\n+#[rustc_mir]\n+fn foo<'a>(t: <&'a () as Trait>::Type) -> <&'a () as Trait>::Type {\n+    t\n+}\n+\n+#[rustc_mir]\n+fn main() {\n+    assert_eq!(foo(4), 4);\n+}"}]}