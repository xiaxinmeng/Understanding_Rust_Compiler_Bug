{"sha": "b60e32c82864d841e87359333af1e6d1f9cff9ee", "node_id": "C_kwDOAAsO6NoAKGI2MGUzMmM4Mjg2NGQ4NDFlODczNTkzMzNhZjFlNmQxZjljZmY5ZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-30T14:52:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-30T14:52:50Z"}, "message": "Auto merge of #92434 - matthiaskrgr:rollup-m8wuq0v, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #91519 (ast: Avoid aborts on fatal errors thrown from mutable AST visitor)\n - #92414 (Fix spacing of pretty printed const item without body)\n - #92423 (Add UI test for #92292)\n - #92427 (Use `UnsafeCell::get_mut()` in `core::lazy::OnceCell::get_mut()`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2b87169833d19bc32c9c6b9dcf8ce682e58b68b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b87169833d19bc32c9c6b9dcf8ce682e58b68b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b60e32c82864d841e87359333af1e6d1f9cff9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b60e32c82864d841e87359333af1e6d1f9cff9ee", "html_url": "https://github.com/rust-lang/rust/commit/b60e32c82864d841e87359333af1e6d1f9cff9ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b60e32c82864d841e87359333af1e6d1f9cff9ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d4ee7c7adcea52dfc62328309f5ef7df000266", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d4ee7c7adcea52dfc62328309f5ef7df000266", "html_url": "https://github.com/rust-lang/rust/commit/f8d4ee7c7adcea52dfc62328309f5ef7df000266"}, {"sha": "c10fe04484e90ef32b5b8b9b9428a45fd6a8bb77", "url": "https://api.github.com/repos/rust-lang/rust/commits/c10fe04484e90ef32b5b8b9b9428a45fd6a8bb77", "html_url": "https://github.com/rust-lang/rust/commit/c10fe04484e90ef32b5b8b9b9428a45fd6a8bb77"}], "stats": {"total": 213, "additions": 176, "deletions": 37}, "files": [{"sha": "0fd515750ab49e019c8014cf124bed718a694bd0", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 116, "deletions": 12, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -14,13 +14,14 @@ use crate::tokenstream::*;\n \n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use smallvec::{smallvec, Array, SmallVec};\n use std::ops::DerefMut;\n-use std::{panic, process, ptr};\n+use std::{panic, ptr};\n \n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n@@ -283,23 +284,21 @@ pub trait MutVisitor: Sized {\n \n /// Use a map-style function (`FnOnce(T) -> T`) to overwrite a `&mut T`. Useful\n /// when using a `flat_map_*` or `filter_map_*` method within a `visit_`\n-/// method. Abort the program if the closure panics.\n-///\n-/// FIXME: Abort on panic means that any fatal error inside `visit_clobber` will abort the compiler.\n-/// Instead of aborting on catching a panic we need to reset the visited node to some valid but\n-/// possibly meaningless value and rethrow the panic.\n+/// method.\n //\n // No `noop_` prefix because there isn't a corresponding method in `MutVisitor`.\n-pub fn visit_clobber<T, F>(t: &mut T, f: F)\n-where\n-    F: FnOnce(T) -> T,\n-{\n+pub fn visit_clobber<T: DummyAstNode>(t: &mut T, f: impl FnOnce(T) -> T) {\n     unsafe {\n         // Safe because `t` is used in a read-only fashion by `read()` before\n         // being overwritten by `write()`.\n         let old_t = ptr::read(t);\n-        let new_t = panic::catch_unwind(panic::AssertUnwindSafe(|| f(old_t)))\n-            .unwrap_or_else(|_| process::abort());\n+        let new_t =\n+            panic::catch_unwind(panic::AssertUnwindSafe(|| f(old_t))).unwrap_or_else(|err| {\n+                // Set `t` to some valid but possible meaningless value,\n+                // and pass the fatal error further.\n+                ptr::write(t, T::dummy());\n+                panic::resume_unwind(err);\n+            });\n         ptr::write(t, new_t);\n     }\n }\n@@ -1454,3 +1453,108 @@ pub fn noop_visit_vis<T: MutVisitor>(visibility: &mut Visibility, vis: &mut T) {\n     }\n     vis.visit_span(&mut visibility.span);\n }\n+\n+/// Some value for the AST node that is valid but possibly meaningless.\n+pub trait DummyAstNode {\n+    fn dummy() -> Self;\n+}\n+\n+impl<T> DummyAstNode for Option<T> {\n+    fn dummy() -> Self {\n+        Default::default()\n+    }\n+}\n+\n+impl<T: DummyAstNode + 'static> DummyAstNode for P<T> {\n+    fn dummy() -> Self {\n+        P(DummyAstNode::dummy())\n+    }\n+}\n+\n+impl<T> DummyAstNode for ThinVec<T> {\n+    fn dummy() -> Self {\n+        Default::default()\n+    }\n+}\n+\n+impl DummyAstNode for Item {\n+    fn dummy() -> Self {\n+        Item {\n+            attrs: Default::default(),\n+            id: DUMMY_NODE_ID,\n+            span: Default::default(),\n+            vis: Visibility {\n+                kind: VisibilityKind::Public,\n+                span: Default::default(),\n+                tokens: Default::default(),\n+            },\n+            ident: Ident::empty(),\n+            kind: ItemKind::ExternCrate(None),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Expr {\n+    fn dummy() -> Self {\n+        Expr {\n+            id: DUMMY_NODE_ID,\n+            kind: ExprKind::Err,\n+            span: Default::default(),\n+            attrs: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Ty {\n+    fn dummy() -> Self {\n+        Ty {\n+            id: DUMMY_NODE_ID,\n+            kind: TyKind::Err,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Pat {\n+    fn dummy() -> Self {\n+        Pat {\n+            id: DUMMY_NODE_ID,\n+            kind: PatKind::Wild,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Stmt {\n+    fn dummy() -> Self {\n+        Stmt { id: DUMMY_NODE_ID, kind: StmtKind::Empty, span: Default::default() }\n+    }\n+}\n+\n+impl DummyAstNode for Block {\n+    fn dummy() -> Self {\n+        Block {\n+            stmts: Default::default(),\n+            id: DUMMY_NODE_ID,\n+            rules: BlockCheckMode::Default,\n+            span: Default::default(),\n+            tokens: Default::default(),\n+            could_be_bare_literal: Default::default(),\n+        }\n+    }\n+}\n+\n+impl DummyAstNode for Crate {\n+    fn dummy() -> Self {\n+        Crate {\n+            attrs: Default::default(),\n+            items: Default::default(),\n+            span: Default::default(),\n+            is_placeholder: Default::default(),\n+        }\n+    }\n+}"}, {"sha": "0d5ce07c6ca1101e73307e36e874d37b4fcb6402", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -1116,7 +1116,9 @@ impl<'a> State<'a> {\n         self.print_ident(ident);\n         self.word_space(\":\");\n         self.print_type(ty);\n-        self.space();\n+        if body.is_some() {\n+            self.space();\n+        }\n         self.end(); // end the head-ibox\n         if let Some(body) = body {\n             self.word_space(\"=\");"}, {"sha": "f216a66148703d0fee859d4dd7d08b7cb25403dc", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -1160,13 +1160,18 @@ macro_rules! assign_id {\n \n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n     fn visit_crate(&mut self, krate: &mut ast::Crate) {\n-        let span = krate.span;\n-        let empty_crate =\n-            || ast::Crate { attrs: Vec::new(), items: Vec::new(), span, is_placeholder: None };\n-        let mut fold_crate = |krate: ast::Crate| {\n+        visit_clobber(krate, |krate| {\n+            let span = krate.span;\n             let mut krate = match self.configure(krate) {\n                 Some(krate) => krate,\n-                None => return empty_crate(),\n+                None => {\n+                    return ast::Crate {\n+                        attrs: Vec::new(),\n+                        items: Vec::new(),\n+                        span,\n+                        is_placeholder: None,\n+                    };\n+                }\n             };\n \n             if let Some(attr) = self.take_first_attr(&mut krate) {\n@@ -1177,10 +1182,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n             noop_visit_crate(&mut krate, self);\n             krate\n-        };\n-\n-        // Cannot use `visit_clobber` here, see the FIXME on it.\n-        *krate = fold_crate(mem::replace(krate, empty_crate()));\n+        })\n     }\n \n     fn visit_expr(&mut self, expr: &mut P<ast::Expr>) {"}, {"sha": "788f0cce01ba838a83f57f92cbf4d482c00739bc", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -102,8 +102,7 @@ impl<T> OnceCell<T> {\n     /// Returns `None` if the cell is empty.\n     #[unstable(feature = \"once_cell\", issue = \"74465\")]\n     pub fn get_mut(&mut self) -> Option<&mut T> {\n-        // SAFETY: Safe because we have unique access\n-        unsafe { &mut *self.inner.get() }.as_mut()\n+        self.inner.get_mut().as_mut()\n     }\n \n     /// Sets the contents of the cell to `value`."}, {"sha": "b094ba577db2d7944744a6b5025362c9b9b919bc", "filename": "src/test/pretty/nested-item-vis-defaultness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fnested-item-vis-defaultness.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -6,42 +6,42 @@ fn main() {}\n \n #[cfg(FALSE)]\n extern \"C\" {\n-    static X: u8 ;\n+    static X: u8;\n     type X;\n     fn foo();\n-    pub static X: u8 ;\n+    pub static X: u8;\n     pub type X;\n     pub fn foo();\n }\n \n #[cfg(FALSE)]\n trait T {\n-    const X: u8 ;\n+    const X: u8;\n     type X;\n     fn foo();\n-    default const X: u8 ;\n+    default const X: u8;\n     default type X;\n     default fn foo();\n-    pub const X: u8 ;\n+    pub const X: u8;\n     pub type X;\n     pub fn foo();\n-    pub default const X: u8 ;\n+    pub default const X: u8;\n     pub default type X;\n     pub default fn foo();\n }\n \n #[cfg(FALSE)]\n impl T for S {\n-    const X: u8 ;\n+    const X: u8;\n     type X;\n     fn foo();\n-    default const X: u8 ;\n+    default const X: u8;\n     default type X;\n     default fn foo();\n-    pub const X: u8 ;\n+    pub const X: u8;\n     pub type X;\n     pub fn foo();\n-    pub default const X: u8 ;\n+    pub default const X: u8;\n     pub default type X;\n     pub default fn foo();\n }"}, {"sha": "7d1c05a85bcf54c3c4e0f0091591ee1adb16ca5d", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -382,13 +382,13 @@ fn test_item() {\n         stringify_item!(\n             static S: ();\n         ),\n-        \"static S: () ;\", // FIXME\n+        \"static S: ();\",\n     );\n     assert_eq!(\n         stringify_item!(\n             static mut S: ();\n         ),\n-        \"static mut S: () ;\",\n+        \"static mut S: ();\",\n     );\n \n     // ItemKind::Const\n@@ -402,7 +402,7 @@ fn test_item() {\n         stringify_item!(\n             const S: ();\n         ),\n-        \"const S: () ;\", // FIXME\n+        \"const S: ();\",\n     );\n \n     // ItemKind::Fn"}, {"sha": "bb3700a2b5e94f711055fa715d58319733c24ad5", "filename": "src/test/ui/traits/issue-92292.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fui%2Ftraits%2Fissue-92292.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b60e32c82864d841e87359333af1e6d1f9cff9ee/src%2Ftest%2Fui%2Ftraits%2Fissue-92292.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-92292.rs?ref=b60e32c82864d841e87359333af1e6d1f9cff9ee", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+pub struct MyGenericType<T> {\n+    _marker: PhantomData<*const T>,\n+}\n+\n+pub struct MyNonGenericType;\n+\n+impl<T> From<MyGenericType<T>> for MyNonGenericType {\n+    fn from(_: MyGenericType<T>) -> Self {\n+        todo!()\n+    }\n+}\n+\n+pub trait MyTrait {\n+    const MY_CONSTANT: i32;\n+}\n+\n+impl<T> MyTrait for MyGenericType<T>\n+where\n+    Self: Into<MyNonGenericType>,\n+{\n+    const MY_CONSTANT: i32 = 1;\n+}\n+\n+impl<T> MyGenericType<T> {\n+    const MY_OTHER_CONSTANT: i32 = <MyGenericType<T> as MyTrait>::MY_CONSTANT;\n+}\n+\n+fn main() {}"}]}