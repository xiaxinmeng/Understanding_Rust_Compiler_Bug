{"sha": "f6fc80206e9600ae753cdfbd762fb982afca48b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZmM4MDIwNmU5NjAwYWU3NTNjZGZiZDc2MmZiOTgyYWZjYTQ4YjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-15T15:12:30Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-06T19:32:07Z"}, "message": "rustc: rename -Zexternal-macro-backtrace to -Zmacro-backtrace.", "tree": {"sha": "91bdbf8d40248f5ecc5fa5ea6d66e4c91ece1128", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91bdbf8d40248f5ecc5fa5ea6d66e4c91ece1128"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6fc80206e9600ae753cdfbd762fb982afca48b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6fc80206e9600ae753cdfbd762fb982afca48b0", "html_url": "https://github.com/rust-lang/rust/commit/f6fc80206e9600ae753cdfbd762fb982afca48b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6fc80206e9600ae753cdfbd762fb982afca48b0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f286dbf27b61afdd96f632d0bc7f4c49fbb7d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f286dbf27b61afdd96f632d0bc7f4c49fbb7d0f", "html_url": "https://github.com/rust-lang/rust/commit/8f286dbf27b61afdd96f632d0bc7f4c49fbb7d0f"}], "stats": {"total": 290, "additions": 141, "deletions": 149}, "files": [{"sha": "d12ee2935ebf587bb771a9cd869d885d080483b7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -847,7 +847,13 @@ impl<'a> Builder<'a> {\n             rustflags.arg(\"-Zforce-unstable-if-unmarked\");\n         }\n \n-        rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        // cfg(bootstrap): the flag was renamed from `-Zexternal-macro-backtrace`\n+        // to `-Zmacro-backtrace`, keep only the latter after beta promotion.\n+        if stage == 0 {\n+            rustflags.arg(\"-Zexternal-macro-backtrace\");\n+        } else {\n+            rustflags.arg(\"-Zmacro-backtrace\");\n+        }\n \n         let want_rustdoc = self.doc_tests != DocTests::No;\n "}, {"sha": "1eda1c9200f6e872f56870819e99a52273eef6d7", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -23,7 +23,7 @@ pub struct AnnotateSnippetEmitterWriter {\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n     ui_testing: bool,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n@@ -37,7 +37,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -172,9 +172,9 @@ impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMap>>,\n         short_message: bool,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> Self {\n-        Self { source_map, short_message, ui_testing: false, external_macro_backtrace }\n+        Self { source_map, short_message, ui_testing: false, macro_backtrace }\n     }\n \n     /// Allows to modify `Self` to enable or disable the `ui_testing` flag."}, {"sha": "59493b4a683b02e946f7a034f607867d0540da8a", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -54,19 +54,11 @@ impl HumanReadableErrorType {\n         source_map: Option<Lrc<SourceMap>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n-        EmitterWriter::new(\n-            dst,\n-            source_map,\n-            short,\n-            teach,\n-            color,\n-            terminal_width,\n-            external_macro_backtrace,\n-        )\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width, macro_backtrace)\n     }\n }\n \n@@ -294,12 +286,12 @@ pub trait Emitter {\n             if self.fix_multispans_in_extern_macros(source_map, span, children) {\n                 let msg = if level == &Error {\n                     \"this error originates in a macro outside of the current crate \\\n-                    (in Nightly builds, run with -Z external-macro-backtrace \\\n+                    (in Nightly builds, run with -Z macro-backtrace \\\n                     for more info)\"\n                         .to_string()\n                 } else {\n                     \"this warning originates in a macro outside of the current crate \\\n-                    (in Nightly builds, run with -Z external-macro-backtrace \\\n+                    (in Nightly builds, run with -Z macro-backtrace \\\n                     for more info)\"\n                         .to_string()\n                 };\n@@ -467,7 +459,7 @@ impl Emitter for EmitterWriter {\n             &mut primary_span,\n             &mut children,\n             &diag.level,\n-            self.external_macro_backtrace,\n+            self.macro_backtrace,\n         );\n \n         self.emit_messages_default(\n@@ -546,7 +538,7 @@ pub struct EmitterWriter {\n     ui_testing: bool,\n     terminal_width: Option<usize>,\n \n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n #[derive(Debug)]\n@@ -563,7 +555,7 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -573,7 +565,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -584,7 +576,7 @@ impl EmitterWriter {\n         teach: bool,\n         colored: bool,\n         terminal_width: Option<usize>,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -593,7 +585,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n "}, {"sha": "ffdff6acec5de1b0a08553198c048fda445667b3", "filename": "src/librustc_errors/json.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fjson.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -36,7 +36,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n-    external_macro_backtrace: bool,\n+    macro_backtrace: bool,\n }\n \n impl JsonEmitter {\n@@ -45,7 +45,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n@@ -54,22 +54,22 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n     pub fn basic(\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(\n             None,\n             Lrc::new(SourceMap::new(file_path_mapping)),\n             pretty,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         )\n     }\n \n@@ -79,7 +79,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n-        external_macro_backtrace: bool,\n+        macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -88,7 +88,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n-            external_macro_backtrace,\n+            macro_backtrace,\n         }\n     }\n \n@@ -245,13 +245,7 @@ impl Diagnostic {\n         let buf = BufWriter::default();\n         let output = buf.clone();\n         je.json_rendered\n-            .new_emitter(\n-                Box::new(buf),\n-                Some(je.sm.clone()),\n-                false,\n-                None,\n-                je.external_macro_backtrace,\n-            )\n+            .new_emitter(Box::new(buf), Some(je.sm.clone()), false, None, je.macro_backtrace)\n             .ui_testing(je.ui_testing)\n             .emit_diagnostic(diag);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();"}, {"sha": "97667febc3ca235d5b1c2429dd46b86f89f545a8", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -336,9 +336,9 @@ pub struct HandlerFlags {\n     /// If true, immediately print bugs registered with `delay_span_bug`.\n     /// (rustc: see `-Z report-delayed-bugs`)\n     pub report_delayed_bugs: bool,\n-    /// show macro backtraces even for non-local macros.\n-    /// (rustc: see `-Z external-macro-backtrace`)\n-    pub external_macro_backtrace: bool,\n+    /// Show macro backtraces.\n+    /// (rustc: see `-Z macro-backtrace`)\n+    pub macro_backtrace: bool,\n     /// If true, identical diagnostics are reported only once.\n     pub deduplicate_diagnostics: bool,\n }\n@@ -385,7 +385,7 @@ impl Handler {\n             false,\n             false,\n             None,\n-            flags.external_macro_backtrace,\n+            flags.macro_backtrace,\n         ));\n         Self::with_emitter_and_flags(emitter, flags)\n     }"}, {"sha": "75b5e37b2df694f61e29dd2e810156d2b53e28c4", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -624,7 +624,7 @@ impl DebuggingOptions {\n             treat_err_as_bug: self.treat_err_as_bug,\n             dont_buffer_diagnostics: self.dont_buffer_diagnostics,\n             report_delayed_bugs: self.report_delayed_bugs,\n-            external_macro_backtrace: self.external_macro_backtrace,\n+            macro_backtrace: self.macro_backtrace,\n             deduplicate_diagnostics: self.deduplicate_diagnostics.unwrap_or(true),\n         }\n     }"}, {"sha": "0250c40bcdcf1b81e3c799a4c5899cba4d18713c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -776,8 +776,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n         \"immediately print bugs registered with `delay_span_bug`\"),\n-    external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n-        \"show macro backtraces even for non-local macros\"),\n+    macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n+        \"show macro backtraces\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help\"),\n     terminal_width: Option<usize> = (None, parse_opt_uint, [UNTRACKED],"}, {"sha": "648dd6ad32a6b01cc94478f69c5eb92da3fbef94", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -858,7 +858,7 @@ fn default_emitter(\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n-    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n+    let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -867,7 +867,7 @@ fn default_emitter(\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n-                    external_macro_backtrace,\n+                    macro_backtrace,\n                 );\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             } else {\n@@ -878,7 +878,7 @@ fn default_emitter(\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n@@ -887,7 +887,7 @@ fn default_emitter(\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n                         None,  // no terminal width\n-                        external_macro_backtrace,\n+                        macro_backtrace,\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n@@ -899,7 +899,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n@@ -910,7 +910,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n-                external_macro_backtrace,\n+                macro_backtrace,\n             )\n             .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),"}, {"sha": "d0250d862fcc4d9d24d4ff62bc464540d26ace4f", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3a7f13f5bba8cda9d279b70a4c1f36b0daab802d", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL | static settings_dir: String = format!(\"\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "66ff9508db796e69b870f143578aaca2c0c63d23", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "15dd84fa7ed3fad97ba1c7f114a4618a6636da09", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -12,7 +12,7 @@ LL |     assert_eq!(Y, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant expression failed\n   --> $DIR/const_fn_ptr_fail2.rs:22:5\n@@ -22,7 +22,7 @@ LL |     assert_eq!(Z, 4);\n    |                |\n    |                referenced constant has errors\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bbbe70510306e7b208b883a9cdf3eec3002c8434", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -7,7 +7,7 @@ LL | pub const Z: () = panic!(\"cheese\");\n    |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:19\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:7:19\n@@ -17,7 +17,7 @@ LL | pub const Y: () = unreachable!();\n    |                   |\n    |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:7:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:10:19\n@@ -27,7 +27,7 @@ LL | pub const X: () = unimplemented!();\n    |                   |\n    |                   the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:10:19\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cedeabeadeb5945742202b36006d29a2dc204125", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore.rs:5:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:8:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore.rs:8:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:11:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore.rs:11:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3e8bea4d069baa09e18d6786eb3f793c28cc509e", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -7,7 +7,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_main.rs:9:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:12:15\n@@ -17,7 +17,7 @@ LL | const Y: () = unreachable!();\n    |               |\n    |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_main.rs:12:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_main.rs:15:15\n@@ -27,7 +27,7 @@ LL | const X: () = unimplemented!();\n    |               |\n    |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_main.rs:15:15\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e3b20e4147ab363b43870b980e8aa7b019025b36", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:9:15\n@@ -16,7 +16,7 @@ LL | const X: () = unimplemented!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:6:15\n@@ -26,7 +26,7 @@ LL | const Y: () = unreachable!();\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1cdbe6c887f6d48d7d62ad63e302cd978ec7b48a", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:16:13"}, {"sha": "ae142897b37040bcbd04fe768ac0483da210b98e", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-never-type.rs:12:13"}, {"sha": "c3808391c7822b1a44589a4d635b36e32e4bbfc2", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -5,7 +5,7 @@ LL |     static_assert!(2 + 2 == 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e0e3df1193f55096f53763d1f51e556aa412add2", "filename": "src/test/ui/consts/control-flow/assert.both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.both.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -7,7 +7,7 @@ LL | const _: () = assert!(false);\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:12:15\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3f4719b681cbd627dca997efcd275a33ed7fddab", "filename": "src/test/ui/consts/control-flow/assert.if_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.if_match.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/assert.rs:12:15\n@@ -16,7 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5a7f10e2ee40a3a0236c04db5a8d6d01b4744c7b", "filename": "src/test/ui/consts/control-flow/issue-50577.if_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.if_match.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1eeda43b41c30f4dfdc8452559171b68a13ed791", "filename": "src/test/ui/consts/control-flow/issue-50577.stock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stock.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `if` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -16,7 +16,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: `match` is not allowed in a `const`\n   --> $DIR/issue-50577.rs:7:16\n@@ -26,7 +26,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/49146\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0317]: `if` may be missing an `else` clause\n   --> $DIR/issue-50577.rs:7:16\n@@ -39,7 +39,7 @@ LL |         Drop = assert_eq!(1, 1)\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6fcb7cafff28437b496a2d86020b2de0249ac113", "filename": "src/test/ui/consts/control-flow/short-circuit.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fshort-circuit.stock.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -7,7 +7,7 @@ LL | const _: bool = true || panic!();\n    |                         the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:10:25\n    |\n    = note: `#[deny(const_err)]` on by default\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/short-circuit.rs:11:26\n@@ -17,7 +17,7 @@ LL | const _: bool = false && panic!();\n    |                          |\n    |                          the evaluated program panicked at 'explicit panic', $DIR/short-circuit.rs:11:26\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9786e2e353cca408d8f84399e0df3be5b8062989", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL |     vec![1, 2, 3]\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4421ce9c7d33110b3526e341dadf6eacab5b5158", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1f9c5e3d7690bca6780dc5cce3dfc0e425708557", "filename": "src/test/ui/deprecation/deprecation-lint-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f675b6af958f50ce3d7985f283923e4935c5e455", "filename": "src/test/ui/deprecation/deprecation-lint-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f4843469ccefca0fd2985ef4f05812b3108ee914", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:39:17"}, {"sha": "4b7be3cf98dfea5db3ff9b0a99587011aab725a0", "filename": "src/test/ui/editions/edition-imports-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d83934ccc239e8c1466d53716b4976798e4da130", "filename": "src/test/ui/editions/edition-imports-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "43a4c8a361fd93d5b31fea30f667741673fa0a20", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `E`\n LL |     gen_gated!();\n    |     ^^^^^^^^^^^^^ could not find `E` in `{{root}}`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f4b41d3accc514d88b41c3a78bb0c56c44908356", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "d747b8232ebc3a45d14ada365ec85d46d013c0a0", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL | () => (pub fn r#async () { })"}, {"sha": "75347d6e8c9501467d005a602c6efe999cd1db0c", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a466471d5e4ecc4af13153e8bed6306892980080", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: cannot find macro `panic` in this scope\n LL |         assert_eq!(0, 0);\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared type or module `Vec`\n   --> $DIR/no_implicit_prelude.rs:11:9"}, {"sha": "11eca073f955814a26662b04d4615efe83c2a10c", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: `$crate` may not be imported\n LL |     m!();\n    |     ^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "873d8f898811f8de0cb93bd0c41b403e5503d206", "filename": "src/test/ui/internal/internal-unstable-noallow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -5,7 +5,7 @@ LL |     call_unstable_noallow!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct_field'\n   --> $DIR/internal-unstable-noallow.rs:18:5\n@@ -14,7 +14,7 @@ LL |     construct_unstable_noallow!(0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'method'\n   --> $DIR/internal-unstable-noallow.rs:20:35\n@@ -23,7 +23,7 @@ LL |     |x: internal_unstable::Foo| { call_method_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(method)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct2_field'\n   --> $DIR/internal-unstable-noallow.rs:22:35\n@@ -32,7 +32,7 @@ LL |     |x: internal_unstable::Bar| { access_field_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct2_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fbafae5e6344ccf1305da8d8267e789de1c0d5a3", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL | static VEC: [u32; 256] = vec![];\n    |\n    = note: expected array `[u32; 256]`\n              found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dc715e2858b47c185c0eabf01d6f7171feb62dbe", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f3de6941cfe949d418412e02ce16167272b2a578", "filename": "src/test/ui/issues/issue-2150.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2150.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "25da3f6a5506566b808982522df64284a2b07d60", "filename": "src/test/ui/issues/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32829.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51999\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8d20377be576a58f93585fb2a21fc845a9a6e5f6", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -33,7 +33,7 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |\n    = note: expected type `bool`\n             found struct `std::vec::Vec<_>`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/issue-34334.rs:2:29"}, {"sha": "4e5cf23afe1437a1f00461d30c83fe7549af98de", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -80,7 +80,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     fn(usize) -> Foo {Foo::Bar}\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -91,7 +91,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `std::fmt::Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -102,7 +102,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    = help: the trait `std::fmt::Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&fn(usize) -> Foo {Foo::Bar}`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "10d05fd8f2b1b0d52ae7accfa975c5570062c152", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -10,7 +10,7 @@ LL |     x.use_mut();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bf737bcc0e3473112543d8ff98d5a2d3b760ca7f", "filename": "src/test/ui/lint/lint-stability2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "29b19577f440fcc9b29d5c19d6abfc787145452c", "filename": "src/test/ui/lint/lint-stability3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "05f35855861f5118ee636b78f075a5ca007349d9", "filename": "src/test/ui/macro_backtrace/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.rs?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -1,6 +1,6 @@\n // Test that the macro backtrace facility works\n // aux-build:ping.rs\n-// compile-flags: -Z external-macro-backtrace\n+// compile-flags: -Z macro-backtrace\n \n #[macro_use] extern crate ping;\n "}, {"sha": "4bbdf01150c4c844ca1fff1de84282eaa23d4a06", "filename": "src/test/ui/macros/assert.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -16,7 +16,7 @@ error: macro requires a boolean expression as an argument\n LL |     debug_assert!();\n    |     ^^^^^^^^^^^^^^^^ boolean expression required\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/assert.rs:5:19"}, {"sha": "0c10fb644b0f6a4463acfbfbdfc4c6dcabe9b126", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "5519105ca9a544305c75d4c6d931127a011a30a1", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a8ee9cf255628cbfded5788eb322a786829aeda2", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,5 +6,5 @@ LL |     write!(&mut example, \"{}\", 42);\n    |\n    = note: `-W unused-must-use` implied by `-W unused`\n    = note: this `Result` may be an `Err` variant, which should be handled\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a824e3565509d7290e3a48cb36378810b5b3e51a", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -13,7 +13,7 @@ LL | |         E::F => \"\",\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "277bcce6af9c599cbc002b11b70c955898bacffe", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -47,7 +47,7 @@ LL |     mac!(bar);\n LL |     bar.pow(2);\n    |         ^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8f7d68737bc09af6d6b3e86bae02174f55ebb3ff", "filename": "src/test/ui/never_type/feature-gate-never_type_fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffeature-gate-never_type_fallback.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -8,7 +8,7 @@ LL |     panic!()\n    |     -------- this returned value is of type `!`\n    |\n    = note: the return type of a function must have a statically known size\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ef48083d670615afb2b87a3b05779427785690e1", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -12,7 +12,7 @@ note: the lint level is defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n-   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5"}, {"sha": "eb93cfe774b9c61c37e1b47cce4eb65146e62bb8", "filename": "src/test/ui/out-of-order-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -14,7 +14,7 @@ note: `bar` could also refer to the macro defined here\n    |\n LL | macro_rules! bar { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4f57b17660ee596cc729682355d46d51170d3d44", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,55 +4,55 @@ error: type `fn() {ext::priv_fn}` is private\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: static `PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `ext::PrivEnum` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as ext::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r ext::Pub<u8>) {ext::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "b9d9f9842bcee50fa3ddf3bd4e463023c0196cc9", "filename": "src/test/ui/proc-macro/dollar-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -22,7 +22,7 @@ LL |     dollar_crate_external::external!();\n    |     previous definition of the type `D` here\n    |\n    = note: `D` must be defined only once in the type namespace of this module\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "805c965a87903c96a94edf74c40e0d902740c801", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bd0c926279632764101d9192507b9ef51d166b21", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -20,7 +20,7 @@ LL |         return;\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bfb4675df1186a18ff8f440bc61439687ca978fe", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -24,7 +24,7 @@ LL |         return;\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dd294ddccd9709f9c45687fd9da0ae45381121f2", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:21:5\n@@ -21,7 +21,7 @@ LL |     loop { return; }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:32:5\n@@ -31,7 +31,7 @@ LL |     loop { 'middle: loop { loop { break 'middle; } } }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "796cbba12a2b15a98054121cefc215ff9b212d49", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:19:5\n@@ -21,7 +21,7 @@ LL |     match () { () if false => return, () => return }\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b15ed910a4febca1d508c4fd65dbfe76e666e551", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ LL |         assert_eq!(*x, 3);\n    |         ------------------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "58ba38d1304fa0b617ee8fd3cfd19b0858f0bd8f", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -8,7 +8,7 @@ LL |     let _ = dbg!(a);\n LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "460561997e163087c66a6f651ff0e09563be9d68", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -8,7 +8,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = note: add `#[derive(Debug)]` or manually implement `std::fmt::Debug`\n    = note: required because of the requirements on the impl of `std::fmt::Debug` for `&NotDebug`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ee1f99e3b07b4b75c4c00aab2384bb2756545a7a", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |     s = format!(\"foo\");\n    |         ^^^^^^^^^^^^^^ expected `&mut std::string::String`, found struct `std::string::String`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "3d00ef29052e9d1c3009a5081d85aadd012133fd", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::fmt::Arguments`, found struct `std::string::String`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b28e3cf8d666e3504729c90633a2d13390756b7a", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -10,7 +10,7 @@ LL |     y.use_ref();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fe2583eafe505a6030948b8198fe2920b2bb2f98", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -9,7 +9,7 @@ LL | |     };\n    | |______expected `&str`, found struct `std::string::String`\n    |        in this macro invocation\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "092503cdf8063c8a3801943c04f2ace20ec733d3", "filename": "src/test/ui/suggestions/dont-suggest-try_into-in-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-try_into-in-macros.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     assert_eq!(10u64, 10usize);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u64`, found `usize`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5d26366fe83c693d78496a501078f502aaeb014f", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -33,7 +33,7 @@ LL |     writeln!(fp, \"hello world\").unwrap();\n    |\n    = note: the method `write_fmt` exists but the following trait bounds were not satisfied:\n            `std::io::BufWriter<&dyn std::io::Write> : std::io::Write`\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a69502de786f0aff472fddca4cdf9bc313b07f68", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -10,7 +10,7 @@ LL |         Some(vec![_x]) => (),\n    |              help: use a slice pattern here instead: `[_x]`\n    |\n    = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d88397f398f883ae537ff28faa0c983fae9da596", "filename": "src/test/ui/try-block/try-block-opt-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-opt-init.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -4,7 +4,7 @@ error[E0381]: borrow of possibly-uninitialized variable: `cfg_res`\n LL |     assert_eq!(cfg_res, 5);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `cfg_res`\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d6f4a8d7619142d166165dce0d1b726a089f6f4a", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n    = note: for more information, see https://github.com/rust-lang/rust/issues/23416\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7f0de3f1d70de0d371d8552a4a8c9c3c66965c8f", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL |     let x = vec![];\n    |         |\n    |         consider giving `x` the explicit type `std::vec::Vec<T>`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1fa436c216b379b2260ab838ec025cc0190bf867", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -6,7 +6,7 @@ LL |     let (x, ) = (vec![], );\n    |         |\n    |         consider giving this pattern the explicit type `(std::vec::Vec<T>,)`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "021f8b03eab3a9b713727f1affe74dc65361ebea", "filename": "src/test/ui/unreachable-code-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Funreachable-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6fc80206e9600ae753cdfbd762fb982afca48b0/src%2Ftest%2Fui%2Funreachable-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable-code-ret.stderr?ref=f6fc80206e9600ae753cdfbd762fb982afca48b0", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}