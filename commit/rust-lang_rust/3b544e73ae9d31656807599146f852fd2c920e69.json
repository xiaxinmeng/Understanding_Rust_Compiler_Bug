{"sha": "3b544e73ae9d31656807599146f852fd2c920e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNTQ0ZTczYWU5ZDMxNjU2ODA3NTk5MTQ2Zjg1MmZkMmM5MjBlNjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-26T10:58:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-26T10:58:20Z"}, "message": "Rollup merge of #77122 - ecstatic-morse:const-fn-arithmetic, r=RalfJung,oli-obk\n\nAdd `#![feature(const_fn_floating_point_arithmetic)]`\n\ncc #76618\n\nThis is a template for splitting up `const_fn` into granular feature gates. I think this will make it easier, both for us and for users, to track stabilization of each individual feature. We don't *have* to do this, however. We could also keep stabilizing things out from under `const_fn`.\n\ncc @rust-lang/wg-const-eval\nr? @oli-obk", "tree": {"sha": "a4ae8190cace6297268aa85e7034cd3e4207751e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ae8190cace6297268aa85e7034cd3e4207751e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b544e73ae9d31656807599146f852fd2c920e69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbx7MCRBK7hj4Ov3rIwAAdHIIAE9da0bNh+cfqrvy1CdwS/wF\nqvWnVLE/zB9gWIH2M9lNNSPdIaiXSWqZ4KlitWSqYTTYuKybLWPP3JVICwx1NkCF\nTLMd6utrGzbn+pypXu/YWffl9AxH854MZdv/uqD3mwOkHCH/HElP9Xfaw3XRxL/R\ni9o0sUcNhdKV4NtOtugescR196Ig/mY0DtvSmRKbgrh7248KtUsHWofkqvLss2aT\nJ9CtNk7tB0zp1hUpJ/hWFt++goHMzdrZJVr19W9eDgohmm1zmiSBbS+UN7+LRa5+\nhpNM011zYzSdhVCm27Em2O2/XyqBQOUdfHM4WgYmQwgDiyExHdaxD9xhfAA62a0=\n=QMjD\n-----END PGP SIGNATURE-----\n", "payload": "tree a4ae8190cace6297268aa85e7034cd3e4207751e\nparent ac8169dc106f2005d41d969c114d85e8e53bce61\nparent 659028f48b7b47ee3e16a4d110b1379ed8524121\nauthor Ralf Jung <post@ralfj.de> 1601117900 +0200\ncommitter GitHub <noreply@github.com> 1601117900 +0200\n\nRollup merge of #77122 - ecstatic-morse:const-fn-arithmetic, r=RalfJung,oli-obk\n\nAdd `#![feature(const_fn_floating_point_arithmetic)]`\n\ncc #76618\n\nThis is a template for splitting up `const_fn` into granular feature gates. I think this will make it easier, both for us and for users, to track stabilization of each individual feature. We don't *have* to do this, however. We could also keep stabilizing things out from under `const_fn`.\n\ncc @rust-lang/wg-const-eval\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b544e73ae9d31656807599146f852fd2c920e69", "html_url": "https://github.com/rust-lang/rust/commit/3b544e73ae9d31656807599146f852fd2c920e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b544e73ae9d31656807599146f852fd2c920e69/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac8169dc106f2005d41d969c114d85e8e53bce61", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8169dc106f2005d41d969c114d85e8e53bce61", "html_url": "https://github.com/rust-lang/rust/commit/ac8169dc106f2005d41d969c114d85e8e53bce61"}, {"sha": "659028f48b7b47ee3e16a4d110b1379ed8524121", "url": "https://api.github.com/repos/rust-lang/rust/commits/659028f48b7b47ee3e16a4d110b1379ed8524121", "html_url": "https://github.com/rust-lang/rust/commit/659028f48b7b47ee3e16a4d110b1379ed8524121"}], "stats": {"total": 243, "additions": 159, "deletions": 84}, "files": [{"sha": "17b9e1ee7e8ba0ad1bbcb7e799ebaeb4ff184a5e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -584,6 +584,9 @@ declare_features! (\n     /// Allows non trivial generic constants which have to be manually propageted upwards.\n     (active, const_evaluatable_checked, \"1.48.0\", Some(76560), None),\n \n+    /// Allows basic arithmetic on floating point types in a `const fn`.\n+    (active, const_fn_floating_point_arithmetic, \"1.48.0\", Some(57241), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "1d741085853609e926d7f997f5190b94431a95f0", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -112,6 +112,30 @@ impl NonConstOp for Abort {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct FloatingPointOp;\n+impl NonConstOp for FloatingPointOp {\n+    const STOPS_CONST_CHECKING: bool = true;\n+\n+    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n+        if ccx.const_kind() == hir::ConstContext::ConstFn {\n+            Status::Unstable(sym::const_fn_floating_point_arithmetic)\n+        } else {\n+            Status::Allowed\n+        }\n+    }\n+\n+    fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_fn_floating_point_arithmetic,\n+            span,\n+            &format!(\"floating point arithmetic is not allowed in {}s\", ccx.const_kind()),\n+        )\n+        .emit();\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct NonPrimitiveOp;\n impl NonConstOp for NonPrimitiveOp {"}, {"sha": "73725c7b98eeee87f4b0a3a9dbf0a7feaf28b65e", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -540,8 +540,12 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n             Rvalue::UnaryOp(_, ref operand) => {\n                 let ty = operand.ty(self.body, self.tcx);\n-                if !(ty.is_integral() || ty.is_bool()) {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                if is_int_bool_or_char(ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(self.span, \"non-primitive type in `Rvalue::UnaryOp`: {:?}\", ty);\n                 }\n             }\n \n@@ -550,7 +554,9 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 let lhs_ty = lhs.ty(self.body, self.tcx);\n                 let rhs_ty = rhs.ty(self.body, self.tcx);\n \n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs_ty.kind() {\n+                if is_int_bool_or_char(lhs_ty) && is_int_bool_or_char(rhs_ty) {\n+                    // Int, bool, and char operations are fine.\n+                } else if lhs_ty.is_fn_ptr() || lhs_ty.is_unsafe_ptr() {\n                     assert_eq!(lhs_ty, rhs_ty);\n                     assert!(\n                         op == BinOp::Eq\n@@ -563,12 +569,15 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     );\n \n                     self.check_op(ops::RawPtrComparison);\n-                }\n-\n-                if !(lhs_ty.is_integral() || lhs_ty.is_bool() || lhs_ty.is_char())\n-                    || !(rhs_ty.is_integral() || rhs_ty.is_bool() || rhs_ty.is_char())\n-                {\n-                    self.check_op(ops::NonPrimitiveOp)\n+                } else if lhs_ty.is_floating_point() || rhs_ty.is_floating_point() {\n+                    self.check_op(ops::FloatingPointOp);\n+                } else {\n+                    span_bug!(\n+                        self.span,\n+                        \"non-primitive type in `Rvalue::BinaryOp`: {:?} \u26ac {:?}\",\n+                        lhs_ty,\n+                        rhs_ty\n+                    );\n                 }\n             }\n         }\n@@ -867,3 +876,7 @@ fn place_as_reborrow(\n         }\n     })\n }\n+\n+fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n+    ty.is_bool() || ty.is_integral() || ty.is_char()\n+}"}, {"sha": "12134a85f45c5924c954cb355471aded2d596a70", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -352,6 +352,7 @@ symbols! {\n         const_evaluatable_checked,\n         const_extern_fn,\n         const_fn,\n+        const_fn_floating_point_arithmetic,\n         const_fn_transmute,\n         const_fn_union,\n         const_generics,"}, {"sha": "30fb87b0226455a7a2fb7bf50cf4b1caad4464bc", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -82,6 +82,7 @@\n #![feature(const_pin)]\n #![feature(const_fn_union)]\n #![feature(const_fn)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]"}, {"sha": "d03428dd0828293720e287dc401f9d286807f4cf", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -236,6 +236,7 @@\n #![feature(clamp)]\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n+#![cfg_attr(not(bootstrap), feature(const_fn_floating_point_arithmetic))]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n #![feature(const_ip)]"}, {"sha": "094ae7378bce827e4c5c88931f8477701bc7843c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -4,7 +4,7 @@ const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n //~^ ERROR function pointers in const fn are unstable\n const unsafe extern fn use_float() { 1.0 + 1.0; }\n-//~^ ERROR only int, `bool` and `char` operations are stable in const fn\n+//~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n //~^ ERROR casting pointers to integers\n "}, {"sha": "fcc34f358f9f9d044a1b64b9bf81b1cf032f7418", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -7,14 +7,14 @@ LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n   --> $DIR/const-extern-fn-min-const-fn.rs:6:38\n    |\n LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n    |                                      ^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n   --> $DIR/const-extern-fn-min-const-fn.rs:8:48"}, {"sha": "ae24f8f65009adf85bb099f6b0de13c25510f809", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.gated.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.gated.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -0,0 +1,8 @@\n+error: fatal error triggered by #[rustc_error]\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:20:1\n+   |\n+LL | fn main() {}\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5e32482b21a52376e8ebf601681c52f3e22270b4", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -0,0 +1,20 @@\n+// gate-test-const_fn_floating_point_arithmetic\n+\n+// revisions: stock gated\n+\n+#![feature(rustc_attrs)]\n+#![cfg_attr(gated, feature(const_fn_floating_point_arithmetic))]\n+\n+const fn add(f: f32) -> f32 { f + 2.0 }\n+//[stock]~^ floating point arithmetic\n+const fn sub(f: f32) -> f32 { 2.0 - f }\n+//[stock]~^ floating point arithmetic\n+const fn mul(f: f32, g: f32) -> f32 { f * g }\n+//[stock]~^ floating point arithmetic\n+const fn div(f: f32, g: f32) -> f32 { f / g }\n+//[stock]~^ floating point arithmetic\n+const fn neg(f: f32) -> f32 { -f }\n+//[stock]~^ floating point arithmetic\n+\n+#[rustc_error]\n+fn main() {} //[gated]~ fatal error triggered by #[rustc_error]"}, {"sha": "ef7a60faf3f5c8fdeeec5feda0a762d9eae09465", "filename": "src/test/ui/consts/const_fn_floating_point_arithmetic.stock.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_fn_floating_point_arithmetic.stock.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -0,0 +1,48 @@\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:8:31\n+   |\n+LL | const fn add(f: f32) -> f32 { f + 2.0 }\n+   |                               ^^^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:10:31\n+   |\n+LL | const fn sub(f: f32) -> f32 { 2.0 - f }\n+   |                               ^^^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:12:39\n+   |\n+LL | const fn mul(f: f32, g: f32) -> f32 { f * g }\n+   |                                       ^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:14:39\n+   |\n+LL | const fn div(f: f32, g: f32) -> f32 { f / g }\n+   |                                       ^^^^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error[E0658]: floating point arithmetic is not allowed in constant functions\n+  --> $DIR/const_fn_floating_point_arithmetic.rs:16:31\n+   |\n+LL | const fn neg(f: f32) -> f32 { -f }\n+   |                               ^^\n+   |\n+   = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n+   = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e15f4b804f716ddcd31f3adc9424117e7e2f4eaf", "filename": "src/test/ui/consts/const_let_eq_float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_eq_float.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -1,6 +1,6 @@\n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n-#![feature(const_fn)]\n+#![feature(const_fn_floating_point_arithmetic)]\n \n struct Foo<T>(T);\n struct Bar<T> { x: T }"}, {"sha": "55a999d5cdc040699c569574e1bbc4301be8f0b3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -77,14 +77,6 @@ const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n //~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n const fn foo11_2<T: Send>(t: T) -> T { t }\n //~^ ERROR trait bounds other than `Sized` on const fn parameters are unstable\n-const fn foo19(f: f32) -> f32 { f * 2.0 }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_3(f: f32) -> f32 { -f }\n-//~^ ERROR int, `bool` and `char` operations\n-const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-//~^ ERROR int, `bool` and `char` operations\n \n static BAR: u32 = 42;\n const fn foo25() -> u32 { BAR } //~ ERROR cannot refer to statics"}, {"sha": "a37e5203eeef4b62c06fc159ccb123c0133c0449", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 18, "deletions": 54, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -76,60 +76,24 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:80:33\n-   |\n-LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n-   |                                 ^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:82:35\n-   |\n-LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n-   |                                   ^^^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:84:35\n-   |\n-LL | const fn foo19_3(f: f32) -> f32 { -f }\n-   |                                   ^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n-error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn.rs:86:43\n-   |\n-LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n-   |                                           ^^^^^\n-   |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n-\n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:90:27\n+  --> $DIR/min_const_fn.rs:82:27\n    |\n LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0013]: constant functions cannot refer to statics\n-  --> $DIR/min_const_fn.rs:91:37\n+  --> $DIR/min_const_fn.rs:83:37\n    |\n LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                     ^^^\n    |\n    = help: consider extracting the value of the `static` to a `const`, and referring to that\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:92:42\n+  --> $DIR/min_const_fn.rs:84:42\n    |\n LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -138,7 +102,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:94:63\n+  --> $DIR/min_const_fn.rs:86:63\n    |\n LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -147,7 +111,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:96:42\n+  --> $DIR/min_const_fn.rs:88:42\n    |\n LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n@@ -156,7 +120,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constant functions is unstable\n-  --> $DIR/min_const_fn.rs:98:63\n+  --> $DIR/min_const_fn.rs:90:63\n    |\n LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n    |                                                               ^^^^^^^^^^\n@@ -165,7 +129,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/min_const_fn.rs:101:14\n+  --> $DIR/min_const_fn.rs:93:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n@@ -174,7 +138,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:110:6\n+  --> $DIR/min_const_fn.rs:102:6\n    |\n LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n@@ -183,7 +147,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:115:6\n+  --> $DIR/min_const_fn.rs:107:6\n    |\n LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n@@ -192,7 +156,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:120:6\n+  --> $DIR/min_const_fn.rs:112:6\n    |\n LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n@@ -201,7 +165,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:126:34\n+  --> $DIR/min_const_fn.rs:118:34\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -210,7 +174,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:128:22\n+  --> $DIR/min_const_fn.rs:120:22\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n@@ -219,7 +183,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:129:23\n+  --> $DIR/min_const_fn.rs:121:23\n    |\n LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n@@ -228,7 +192,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:130:32\n+  --> $DIR/min_const_fn.rs:122:32\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -237,7 +201,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n-  --> $DIR/min_const_fn.rs:135:41\n+  --> $DIR/min_const_fn.rs:127:41\n    |\n LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1 }\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -246,7 +210,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:138:21\n+  --> $DIR/min_const_fn.rs:130:21\n    |\n LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n@@ -255,15 +219,15 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/min_const_fn.rs:140:27\n+  --> $DIR/min_const_fn.rs:132:27\n    |\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 26 previous errors\n \n Some errors have detailed explanations: E0013, E0493, E0658, E0723.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "292e2dd167c919d0800887e0b77ec632489fefdf", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, foo, foo2)]\n+#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -25,9 +25,9 @@ const fn bar2() -> u32 { foo2() } //~ ERROR not yet stable as a const fn\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-// conformity is required, even with `const_fn` feature gate\n+// Const-stable functions cannot rely on unstable const-eval features.\n const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n-//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]"}, {"sha": "fa2260b40d19fe03a9207ba1bc707b50c971e88c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -14,7 +14,7 @@ LL | const fn bar2() -> u32 { foo2() }\n    |\n    = help: Const-stable functions can only call other const-stable functions\n \n-error: const-stable function cannot use `#[feature(const_fn)]`\n+error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_fn_libstd_stability.rs:29:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }"}, {"sha": "0f48341ddf3eccd4dd2ac79e3cdabad3927c7b91", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, foo, foo2)]\n+#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -27,7 +27,7 @@ const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR not yet stable as\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n-//~^ ERROR const-stable function cannot use `#[feature(const_fn)]`\n+//~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n \n // check whether this function cannot be called even with the feature gate active\n #[unstable(feature = \"foo2\", issue = \"none\")]"}, {"sha": "1ca5964ce0fc4355b90451693e077ece36d1e28a", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b544e73ae9d31656807599146f852fd2c920e69/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=3b544e73ae9d31656807599146f852fd2c920e69", "patch": "@@ -14,7 +14,7 @@ LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |\n    = help: Const-stable functions can only call other const-stable functions\n \n-error: const-stable function cannot use `#[feature(const_fn)]`\n+error: const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:29:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }"}]}