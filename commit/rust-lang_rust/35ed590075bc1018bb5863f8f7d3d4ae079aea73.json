{"sha": "35ed590075bc1018bb5863f8f7d3d4ae079aea73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZWQ1OTAwNzViYzEwMThiYjU4NjNmOGY3ZDNkNGFlMDc5YWVhNzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T11:42:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-09T19:00:40Z"}, "message": "also enable passing arguments through from cargo-miri", "tree": {"sha": "9872b08758da150e7fbfc6f362f8d4f61c8cabe7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9872b08758da150e7fbfc6f362f8d4f61c8cabe7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35ed590075bc1018bb5863f8f7d3d4ae079aea73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35ed590075bc1018bb5863f8f7d3d4ae079aea73", "html_url": "https://github.com/rust-lang/rust/commit/35ed590075bc1018bb5863f8f7d3d4ae079aea73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35ed590075bc1018bb5863f8f7d3d4ae079aea73/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e468766b79d3efb0b46f0cd2cefb451ac0a710b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e468766b79d3efb0b46f0cd2cefb451ac0a710b", "html_url": "https://github.com/rust-lang/rust/commit/5e468766b79d3efb0b46f0cd2cefb451ac0a710b"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "93200f33a260644e477789b2a5ba8738c3f8e1f8", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/35ed590075bc1018bb5863f8f7d3d4ae079aea73/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ed590075bc1018bb5863f8f7d3d4ae079aea73/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=35ed590075bc1018bb5863f8f7d3d4ae079aea73", "patch": "@@ -10,7 +10,7 @@ use std::fs::{self, File};\n const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates and tests in Miri\n \n Usage:\n-    cargo miri [subcommand] [options] [--] [<miri opts>...]\n+    cargo miri [subcommand] [options] [--] [<miri opts>...] [--] [<program opts>...]\n \n Subcommands:\n     run                      Run binaries (default)\n@@ -22,8 +22,9 @@ Common options:\n     --features               Features to compile for the package\n     -V, --version            Print version info and exit\n \n-Other [options] are the same as `cargo rustc`.  Everything after the \"--\" is\n-passed verbatim to Miri.\n+Other [options] are the same as `cargo rustc`.  Everything after the first \"--\" is\n+passed verbatim to Miri, which will pass everything after the second \"--\" verbatim\n+to the interpreted program.\n \n The config flag `miri` is automatically defined for convenience. You can use\n it to configure the resource limits\n@@ -355,11 +356,13 @@ fn in_cargo_miri() {\n             }\n             cmd.arg(arg);\n         }\n-        // add \"--\" \"-Zcargo-miri-marker\" and the remaining user flags\n+        // Add \"--\" (to end the cargo flags), and then the user flags.  We add markers around the user flags\n+        // to be able to identify them later.\n         cmd\n             .arg(\"--\")\n-            .arg(\"cargo-miri-marker\")\n-            .args(args);\n+            .arg(\"cargo-miri-marker-begin\")\n+            .args(args)\n+            .arg(\"cargo-miri-marker-end\");\n         let path = std::env::current_exe().expect(\"current executable path invalid\");\n         cmd.env(\"RUSTC_WRAPPER\", path);\n         if verbose {\n@@ -413,10 +416,19 @@ fn inside_cargo_rustc() {\n     };\n     args.splice(0..0, miri::miri_default_args().iter().map(ToString::to_string));\n \n-    // see if we have cargo-miri-marker, which means we want to interpret this crate in Miri\n-    // (and remove the marker).\n-    let needs_miri = if let Some(pos) = args.iter().position(|arg| arg == \"cargo-miri-marker\") {\n-        args.remove(pos);\n+    // See if we can find the cargo-miri markers.  Those only get added to the binary we want to\n+    // run.  They also serve to mark the user-defined arguments, which we have to move all the way to the\n+    // end (they get added somewhere in the middle).\n+    let needs_miri = if let Some(begin) = args.iter().position(|arg| arg == \"cargo-miri-marker-begin\") {\n+        let end = args.iter().position(|arg| arg == \"cargo-miri-marker-end\").expect(\"Cannot find end marker\");\n+        // These mark the user arguments.  We remove the first and last as they are the markers.\n+        let mut user_args = args.drain(begin..=end);\n+        assert_eq!(user_args.next().unwrap(), \"cargo-miri-marker-begin\");\n+        assert_eq!(user_args.next_back().unwrap(), \"cargo-miri-marker-end\");\n+        // Collect the rest and add it back at the end\n+        let mut user_args = user_args.collect::<Vec<String>>();\n+        args.append(&mut user_args);\n+        // Run this in Miri\n         true\n     } else {\n         false"}, {"sha": "8c59b6bcdead616496035b3d17b001011daeb946", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=35ed590075bc1018bb5863f8f7d3d4ae079aea73", "patch": "@@ -37,10 +37,19 @@ def test(name, cmd, stdout_ref, stderr_ref):\n \n def test_cargo_miri_run():\n     test(\"cargo miri run\", [\"cargo\", \"miri\", \"run\", \"-q\"], \"stdout.ref\", \"stderr.ref\")\n+    test(\"cargo miri run (with arguments)\",\n+        [\"cargo\", \"miri\", \"run\", \"-q\", \"--\", \"--\", \"hello world\", '\"hello world\"'],\n+        \"stdout.ref\", \"stderr.ref2\"\n+    )\n \n def test_cargo_miri_test():\n     test(\"cargo miri test\", [\"cargo\", \"miri\", \"test\", \"-q\"], \"test.stdout.ref\", \"test.stderr.ref\")\n+    test(\"cargo miri test (with filter)\",\n+        [\"cargo\", \"miri\", \"test\", \"-q\", \"--\", \"--\", \"impl\"],\n+        \"test.stdout.ref2\", \"test.stderr.ref\"\n+    )\n \n test_cargo_miri_run()\n test_cargo_miri_test()\n+print(\"TEST SUCCESSFUL!\")\n sys.exit(0)"}, {"sha": "8226b1b7cdec7f93577fa8dd1a7e8a5147d5145b", "filename": "test-cargo-miri/stderr.ref2", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Fstderr.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Fstderr.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Fstderr.ref2?ref=35ed590075bc1018bb5863f8f7d3d4ae079aea73", "patch": "@@ -0,0 +1,3 @@\n+main\n+hello world\n+\"hello world\""}, {"sha": "ce3506709d5a09b46c0f09981b198d4d6b7b8dd5", "filename": "test-cargo-miri/test.stdout.ref2", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/35ed590075bc1018bb5863f8f7d3d4ae079aea73/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=35ed590075bc1018bb5863f8f7d3d4ae079aea73", "patch": "@@ -0,0 +1,11 @@\n+\n+running 0 tests\n+\n+test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+\n+\n+running 1 test\n+test simple ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n+"}]}