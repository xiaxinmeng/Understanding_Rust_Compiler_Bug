{"sha": "bc09c1ddc5604642926428d69f2ebd7557b3230b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMDljMWRkYzU2MDQ2NDI5MjY0MjhkNjlmMmViZDc1NTdiMzIzMGI=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-01-14T18:34:39Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-02-19T23:32:59Z"}, "message": "Made str::MatchIndices a private implementantion detail", "tree": {"sha": "11c920a8b1d0804017e56317988be858dd8668a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11c920a8b1d0804017e56317988be858dd8668a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc09c1ddc5604642926428d69f2ebd7557b3230b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc09c1ddc5604642926428d69f2ebd7557b3230b", "html_url": "https://github.com/rust-lang/rust/commit/bc09c1ddc5604642926428d69f2ebd7557b3230b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc09c1ddc5604642926428d69f2ebd7557b3230b/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f0bead8158eaf948c93d1cae93b60978937417", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f0bead8158eaf948c93d1cae93b60978937417", "html_url": "https://github.com/rust-lang/rust/commit/54f0bead8158eaf948c93d1cae93b60978937417"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "cbd103ee765a4f6a521eac03e9fd86c17db14342", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc09c1ddc5604642926428d69f2ebd7557b3230b/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc09c1ddc5604642926428d69f2ebd7557b3230b/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=bc09c1ddc5604642926428d69f2ebd7557b3230b", "patch": "@@ -931,29 +931,43 @@ impl Searcher {\n     }\n }\n \n-/// An iterator over the start and end indices of the matches of a\n-/// substring within a larger string\n #[derive(Clone)]\n #[unstable(feature = \"core\", reason = \"type may be removed\")]\n-pub struct MatchIndices<'a> {\n+struct OldMatchIndices<'a> {\n     // constants\n     haystack: &'a str,\n     needle: &'a str,\n     searcher: Searcher\n }\n \n+/// An iterator over the start and end indices of the matches of a\n+/// substring within a larger string\n+#[derive(Clone)]\n+#[unstable(feature = \"core\", reason = \"type may be removed\")]\n+pub struct MatchIndices<'a>(OldMatchIndices<'a>);\n+\n+#[stable]\n+impl<'a> Iterator for MatchIndices<'a> {\n+    type Item = (uint, uint);\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<(uint, uint)> {\n+        self.0.next()\n+    }\n+}\n+\n /// An iterator over the substrings of a string separated by a given\n /// search string\n #[derive(Clone)]\n #[unstable(feature = \"core\", reason = \"type may be removed\")]\n pub struct SplitStr<'a> {\n-    it: MatchIndices<'a>,\n+    it: OldMatchIndices<'a>,\n     last_end: uint,\n     finished: bool\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Iterator for MatchIndices<'a> {\n+impl<'a> Iterator for OldMatchIndices<'a> {\n     type Item = (uint, uint);\n \n     #[inline]\n@@ -1465,17 +1479,17 @@ impl StrExt for str {\n \n     #[inline]\n     fn match_indices<'a>(&'a self, sep: &'a str) -> MatchIndices<'a> {\n-        MatchIndices {\n+        MatchIndices(OldMatchIndices {\n             haystack: self,\n             needle: sep,\n             searcher: Searcher::new(self.as_bytes(), sep.as_bytes())\n-        }\n+        })\n     }\n \n     #[inline]\n     fn split_str<'a>(&'a self, sep: &'a str) -> SplitStr<'a> {\n         SplitStr {\n-            it: self.match_indices(sep),\n+            it: self.match_indices(sep).0,\n             last_end: 0,\n             finished: false\n         }"}, {"sha": "4eff47f382098efb138eaf598621e21042805dd2", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc09c1ddc5604642926428d69f2ebd7557b3230b/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc09c1ddc5604642926428d69f2ebd7557b3230b/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=bc09c1ddc5604642926428d69f2ebd7557b3230b", "patch": "@@ -84,14 +84,14 @@ impl<'a, C: CharEq> DoubleEndedMatcher<'a> for CharEqMatcher<'a, C> {}\n \n // Impl for &str\n \n-struct StrMatcher<'a>(super::MatchIndices<'a>);\n+struct StrMatcher<'a>(super::OldMatchIndices<'a>);\n \n impl<'a> Pattern<'a> for &'a str {\n     type Matcher = StrMatcher<'a>;\n \n     #[inline]\n     fn into_matcher(self, haystack: &'a str) -> StrMatcher<'a> {\n-        let mi = super::MatchIndices {\n+        let mi = super::OldMatchIndices {\n             haystack: haystack,\n             needle: self,\n             searcher: super::Searcher::new(haystack.as_bytes(), self.as_bytes())"}]}