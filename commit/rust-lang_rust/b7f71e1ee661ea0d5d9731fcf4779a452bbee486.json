{"sha": "b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjcxZTFlZTY2MWVhMGQ1ZDk3MzFmY2Y0Nzc5YTQ1MmJiZWU0ODY=", "commit": {"author": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-28T01:33:57Z"}, "committer": {"name": "Tom Lee", "email": "github@tomlee.co", "date": "2013-05-28T02:34:25Z"}, "message": "Implementing suggestions from @nikomatsakis", "tree": {"sha": "8dc6dfb56e09b3d1740ebfa8c4628e47d8461003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc6dfb56e09b3d1740ebfa8c4628e47d8461003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "html_url": "https://github.com/rust-lang/rust/commit/b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/comments", "author": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomaslee", "id": 93216, "node_id": "MDQ6VXNlcjkzMjE2", "avatar_url": "https://avatars.githubusercontent.com/u/93216?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomaslee", "html_url": "https://github.com/thomaslee", "followers_url": "https://api.github.com/users/thomaslee/followers", "following_url": "https://api.github.com/users/thomaslee/following{/other_user}", "gists_url": "https://api.github.com/users/thomaslee/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomaslee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomaslee/subscriptions", "organizations_url": "https://api.github.com/users/thomaslee/orgs", "repos_url": "https://api.github.com/users/thomaslee/repos", "events_url": "https://api.github.com/users/thomaslee/events{/privacy}", "received_events_url": "https://api.github.com/users/thomaslee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a85993ff69d5ba9a2cf07b0d1889b3ddf2e099e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85993ff69d5ba9a2cf07b0d1889b3ddf2e099e5", "html_url": "https://github.com/rust-lang/rust/commit/a85993ff69d5ba9a2cf07b0d1889b3ddf2e099e5"}], "stats": {"total": 203, "additions": 102, "deletions": 101}, "files": [{"sha": "5bbfaac0792aec5b5725cfadf74090f458f44b7a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -1593,7 +1593,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n                         impl_id: Option<ast::def_id>,\n                         param_substs: Option<@param_substs>,\n                         sp: Option<span>)\n-                     -> (fn_ctxt, bool) {\n+                     -> fn_ctxt {\n     for param_substs.each |p| { p.validate(); }\n \n     debug!(\"new_fn_ctxt_w_id(path=%s, id=%?, impl_id=%?, \\\n@@ -1611,12 +1611,11 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n             ty::subst_tps(ccx.tcx, substs.tys, substs.self_ty, output_type)\n         }\n     };\n-    let imm = ty::type_is_immediate(substd_output_type);\n-\n+    let is_immediate = ty::type_is_immediate(substd_output_type);\n     let fcx = @mut fn_ctxt_ {\n           llfn: llfndecl,\n           llenv: unsafe {\n-              llvm::LLVMGetParam(llfndecl, arg_env(imm) as c_uint)\n+              llvm::LLVMGetUndef(T_ptr(T_i8()))\n           },\n           llretptr: None,\n           llstaticallocas: llbbs.sa,\n@@ -1625,7 +1624,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           llself: None,\n           personality: None,\n           loop_ret: None,\n-          has_immediate_return_value: imm,\n+          has_immediate_return_value: is_immediate,\n           llargs: @mut HashMap::new(),\n           lllocals: @mut HashMap::new(),\n           llupvars: @mut HashMap::new(),\n@@ -1636,17 +1635,19 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           path: path,\n           ccx: @ccx\n     };\n-\n+    fcx.llenv = unsafe {\n+          llvm::LLVMGetParam(llfndecl, fcx.env_arg_pos() as c_uint)\n+    };\n     fcx.llretptr = Some(make_return_pointer(fcx, substd_output_type));\n-    (fcx, imm)\n+    fcx\n }\n \n pub fn new_fn_ctxt(ccx: @CrateContext,\n                    path: path,\n                    llfndecl: ValueRef,\n                    output_type: ty::t,\n                    sp: Option<span>)\n-                -> (fn_ctxt, bool) {\n+                -> fn_ctxt {\n     new_fn_ctxt_w_id(ccx, path, llfndecl, -1, output_type, None, None, sp)\n }\n \n@@ -1666,8 +1667,7 @@ pub fn new_fn_ctxt(ccx: @CrateContext,\n // field of the fn_ctxt with\n pub fn create_llargs_for_fn_args(cx: fn_ctxt,\n                                  self_arg: self_arg,\n-                                 args: &[ast::arg],\n-                                 ret_imm: bool)\n+                                 args: &[ast::arg])\n                               -> ~[ValueRef] {\n     let _icx = cx.insn_ctxt(\"create_llargs_for_fn_args\");\n \n@@ -1693,7 +1693,7 @@ pub fn create_llargs_for_fn_args(cx: fn_ctxt,\n     // llvm::LLVMGetParam for each argument.\n     vec::from_fn(args.len(), |i| {\n         unsafe {\n-            let arg_n = arg_pos(ret_imm, i);\n+            let arg_n = cx.arg_pos(i);\n             let arg = &args[i];\n             let llarg = llvm::LLVMGetParam(cx.llfn, arg_n as c_uint);\n \n@@ -1832,15 +1832,15 @@ pub fn trans_closure(ccx: @CrateContext,\n            param_substs.repr(ccx.tcx));\n \n     // Set up arguments to the function.\n-    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n-                                       path,\n-                                       llfndecl,\n-                                       id,\n-                                       output_type,\n-                                       impl_id,\n-                                       param_substs,\n-                                       Some(body.span));\n-    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs, imm);\n+    let fcx = new_fn_ctxt_w_id(ccx,\n+                               path,\n+                               llfndecl,\n+                               id,\n+                               output_type,\n+                               impl_id,\n+                               param_substs,\n+                               Some(body.span));\n+    let raw_llargs = create_llargs_for_fn_args(fcx, self_arg, decl.inputs);\n \n     // Set the fixed stack segment flag if necessary.\n     if attr::attrs_contains_name(attributes, \"fixed_stack_segment\") {\n@@ -1965,16 +1965,16 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n                                 ty_param_substs,\n                                 None,\n                                 ty::node_id_to_type(ccx.tcx, enum_id));\n-    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n-                                       ~[],\n-                                       llfndecl,\n-                                       variant.node.id,\n-                                       enum_ty,\n-                                       None,\n-                                       param_substs,\n-                                       None);\n-\n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args, imm);\n+    let fcx = new_fn_ctxt_w_id(ccx,\n+                               ~[],\n+                               llfndecl,\n+                               variant.node.id,\n+                               enum_ty,\n+                               None,\n+                               param_substs,\n+                               None);\n+\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n     let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n     let arg_tys = ty::ty_fn_args(node_id_type(bcx, variant.node.id));\n     let bcx = copy_args_to_allocas(fcx, bcx, fn_args, raw_llargs, arg_tys);\n@@ -2044,16 +2044,16 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n                                ty_to_str(ccx.tcx, ctor_ty)))\n     };\n \n-    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n-                                       ~[],\n-                                       llfndecl,\n-                                       ctor_id,\n-                                       tup_ty,\n-                                       None,\n-                                       param_substs,\n-                                       None);\n+    let fcx = new_fn_ctxt_w_id(ccx,\n+                               ~[],\n+                               llfndecl,\n+                               ctor_id,\n+                               tup_ty,\n+                               None,\n+                               param_substs,\n+                               None);\n \n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args, imm);\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n@@ -2301,14 +2301,19 @@ pub fn create_entry_wrapper(ccx: @CrateContext,\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::CCallConv, llfty);\n \n-        let (fcx, _) = new_fn_ctxt(ccx, ~[], llfdecl, nt, None);\n+        let fcx = new_fn_ctxt(ccx, ~[], llfdecl, nt, None);\n+\n+        // the args vector built in create_entry_fn will need\n+        // be updated if this assertion starts to fail.\n+        assert!(fcx.has_immediate_return_value);\n \n         let bcx = top_scope_block(fcx, None);\n         let lltop = bcx.llbb;\n \n         // Call main.\n         let llenvarg = unsafe {\n-            llvm::LLVMGetParam(llfdecl, arg_env(true) as c_uint)\n+            let env_arg = fcx.env_arg_pos();\n+            llvm::LLVMGetParam(llfdecl, env_arg as c_uint)\n         };\n         let args = ~[llenvarg];\n         let llresult = Call(bcx, main_llfn, args);"}, {"sha": "c6f4d230419733c24b05faef01a5d9dbffb22ba2", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -132,8 +132,7 @@ pub impl FnType {\n                        bcx: block,\n                        ret_ty: TypeRef,\n                        llwrapfn: ValueRef,\n-                       llargbundle: ValueRef,\n-                       ret_imm: bool) {\n+                       llargbundle: ValueRef) {\n         let mut atys = /*bad*/copy self.arg_tys;\n         let mut attrs = /*bad*/copy self.attrs;\n         let mut j = 0u;"}, {"sha": "ad5dadaf8701d994d0fdb629a4bd03332e522ad8", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -351,6 +351,30 @@ pub struct fn_ctxt_ {\n     ccx: @@CrateContext\n }\n \n+pub impl fn_ctxt_ {\n+    pub fn arg_pos(&self, arg: uint) -> uint {\n+        if self.has_immediate_return_value {\n+            arg + 1u\n+        } else {\n+            arg + 2u\n+        }\n+    }\n+\n+    pub fn out_arg_pos(&self) -> uint {\n+        assert!(self.has_immediate_return_value);\n+        0u\n+    }\n+\n+    pub fn env_arg_pos(&self) -> uint {\n+        if !self.has_immediate_return_value {\n+            1u\n+        } else {\n+            0u\n+        }\n+    }\n+\n+}\n+\n pub type fn_ctxt = @mut fn_ctxt_;\n \n pub fn warn_not_to_commit(ccx: @CrateContext, msg: &str) {\n@@ -660,27 +684,6 @@ pub fn mk_block(llbb: BasicBlockRef, parent: Option<block>, kind: block_kind,\n     @mut block_(llbb, parent, kind, is_lpad, node_info, fcx)\n }\n \n-pub fn arg_pos(ret_imm: bool, arg: uint) -> uint {\n-    if ret_imm {\n-        arg + 1u\n-    } else {\n-        arg + 2u\n-    }\n-}\n-\n-pub fn arg_out(ret_imm: bool) -> uint {\n-    assert!(ret_imm);\n-    0u\n-}\n-\n-pub fn arg_env(ret_imm: bool) -> uint {\n-    if !ret_imm {\n-        1u\n-    } else {\n-        0u\n-    }\n-}\n-\n pub struct Result {\n     bcx: block,\n     val: ValueRef"}, {"sha": "63356a135d059e328310b6d61f0d926d46dbf487", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -150,14 +150,10 @@ fn build_shim_fn_(ccx: @CrateContext,\n         ccx.llmod, shim_name, tys.shim_fn_ty);\n \n     // Declare the body of the shim function:\n-    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llshimfn, tys.fn_sig.output, None);\n+    let fcx = new_fn_ctxt(ccx, ~[], llshimfn, tys.fn_sig.output, None);\n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n \n-    //\n-    // FIXME [#6575] this seems to be making the assumption that the first\n-    //               implicit argument is always available?\n-    //\n     let llargbundle = get_param(llshimfn, 0u);\n     let llargvals = arg_builder(bcx, tys, llargbundle);\n \n@@ -179,8 +175,7 @@ fn build_shim_fn_(ccx: @CrateContext,\n type wrap_arg_builder<'self> = &'self fn(bcx: block,\n                                          tys: &ShimTypes,\n                                          llwrapfn: ValueRef,\n-                                         llargbundle: ValueRef,\n-                                         ret_imm: bool);\n+                                         llargbundle: ValueRef);\n \n type wrap_ret_builder<'self> = &'self fn(bcx: block,\n                                          tys: &ShimTypes,\n@@ -195,7 +190,7 @@ fn build_wrap_fn_(ccx: @CrateContext,\n                   arg_builder: wrap_arg_builder,\n                   ret_builder: wrap_ret_builder) {\n     let _icx = ccx.insn_ctxt(\"foreign::build_wrap_fn_\");\n-    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llwrapfn, tys.fn_sig.output, None);\n+    let fcx = new_fn_ctxt(ccx, ~[], llwrapfn, tys.fn_sig.output, None);\n \n     // Patch up the return type if it's not immediate and we're returning via\n     // the C ABI.\n@@ -210,7 +205,7 @@ fn build_wrap_fn_(ccx: @CrateContext,\n \n     // Allocate the struct and write the arguments into it.\n     let llargbundle = alloca(bcx, tys.bundle_ty);\n-    arg_builder(bcx, tys, llwrapfn, llargbundle, imm);\n+    arg_builder(bcx, tys, llwrapfn, llargbundle);\n \n     // Create call itself.\n     let llshimfnptr = PointerCast(bcx, llshimfn, T_ptr(T_i8()));\n@@ -438,14 +433,14 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                        cc: lib::llvm::CallConv) {\n         debug!(\"build_direct_fn(%s)\", *link_name(ccx, item));\n \n-        let (fcx, imm) = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n+        let fcx = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n         let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n         let llbasefn = base_fn(ccx, *link_name(ccx, item), tys, cc);\n         let ty = ty::lookup_item_type(ccx.tcx,\n                                       ast_util::local_def(item.id)).ty;\n         let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, arg_pos(imm, i))\n+            get_param(decl, fcx.arg_pos(i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n@@ -464,7 +459,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                          cc: lib::llvm::CallConv) {\n         debug!(\"build_fast_ffi_fn(%s)\", *link_name(ccx, item));\n \n-        let (fcx, imm) = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n+        let fcx = new_fn_ctxt(ccx, ~[], decl, tys.fn_sig.output, None);\n         let bcx = top_scope_block(fcx, None), lltop = bcx.llbb;\n         let llbasefn = base_fn(ccx, *link_name(ccx, item), tys, cc);\n         set_no_inline(fcx.llfn);\n@@ -473,7 +468,7 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n                                       ast_util::local_def(item.id)).ty;\n         let ret_ty = ty::ty_fn_ret(ty);\n         let args = vec::from_fn(ty::ty_fn_args(ty).len(), |i| {\n-            get_param(decl, arg_pos(imm, i))\n+            get_param(decl, fcx.arg_pos(i))\n         });\n         let retval = Call(bcx, llbasefn, args);\n         if !ty::type_is_nil(ret_ty) && !ty::type_is_bot(ret_ty) {\n@@ -514,13 +509,13 @@ pub fn trans_foreign_mod(ccx: @CrateContext,\n         fn build_args(bcx: block,\n                       tys: &ShimTypes,\n                       llwrapfn: ValueRef,\n-                      llargbundle: ValueRef,\n-                      ret_imm: bool) {\n+                      llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::wrap::build_args\");\n             let ccx = bcx.ccx();\n             let n = tys.llsig.llarg_tys.len();\n             for uint::range(0, n) |i| {\n-                let mut llargval = get_param(llwrapfn, arg_pos(ret_imm, i));\n+                let arg_i = bcx.fcx.arg_pos(i);\n+                let mut llargval = get_param(llwrapfn, arg_i);\n \n                 // In some cases, Rust will pass a pointer which the\n                 // native C type doesn't have.  In that case, just\n@@ -558,14 +553,14 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx, item.id));\n \n-    let (fcx, imm) = new_fn_ctxt_w_id(ccx,\n-                                       path,\n-                                       decl,\n-                                       item.id,\n-                                       output_type,\n-                                       None,\n-                                       Some(substs),\n-                                       Some(item.span));\n+    let fcx = new_fn_ctxt_w_id(ccx,\n+                               path,\n+                               decl,\n+                               item.id,\n+                               output_type,\n+                               None,\n+                               Some(substs),\n+                               Some(item.span));\n \n     // Set the fixed stack segment flag if necessary.\n     if attr::attrs_contains_name(attributes, \"fixed_stack_segment\") {\n@@ -574,7 +569,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n \n     let mut bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let first_real_arg = arg_pos(imm, 0u);\n+    let first_real_arg = fcx.arg_pos(0u);\n     match *ccx.sess.str_of(item.ident) {\n         ~\"atomic_cxchg\" => {\n             let old = AtomicCmpXchg(bcx,\n@@ -1356,14 +1351,12 @@ pub fn trans_foreign_fn(ccx: @CrateContext,\n         fn build_args(bcx: block,\n                       tys: &ShimTypes,\n                       llwrapfn: ValueRef,\n-                      llargbundle: ValueRef,\n-                      ret_imm: bool) {\n+                      llargbundle: ValueRef) {\n             let _icx = bcx.insn_ctxt(\"foreign::foreign::wrap::build_args\");\n             tys.fn_ty.build_wrap_args(bcx,\n                                       tys.llsig.llret_ty,\n                                       llwrapfn,\n-                                      llargbundle,\n-                                      ret_imm);\n+                                      llargbundle);\n         }\n \n         fn build_ret(bcx: block, tys: &ShimTypes, llargbundle: ValueRef) {"}, {"sha": "405e5e36de799ba4d04537a7d94912ef9a6ce795", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -727,7 +727,7 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n                                helper: glue_helper)\n                             -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"make_generic_glue_inner\");\n-    let (fcx, imm) = new_fn_ctxt(ccx, ~[], llfn, ty::mk_nil(), None);\n+    let fcx = new_fn_ctxt(ccx, ~[], llfn, ty::mk_nil(), None);\n     lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ccx.stats.n_glues_created += 1u;\n     // All glue functions take values passed *by alias*; this is a\n@@ -740,7 +740,8 @@ pub fn make_generic_glue_inner(ccx: @CrateContext,\n \n     let bcx = top_scope_block(fcx, None);\n     let lltop = bcx.llbb;\n-    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, arg_pos(true, 1u) as c_uint) };\n+    let rawptr0_arg = fcx.arg_pos(1u);\n+    let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, rawptr0_arg as c_uint) };\n     helper(bcx, llrawptr0, t);\n     finish_fn(fcx, lltop);\n     return llfn;"}, {"sha": "839c9a96b78e87081687255bee71e2ee24dca571", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f71e1ee661ea0d5d9731fcf4779a452bbee486/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=b7f71e1ee661ea0d5d9731fcf4779a452bbee486", "patch": "@@ -286,19 +286,19 @@ pub impl Reflector {\n \n                 let llfty = type_of_fn(ccx, [opaqueptrty], ty::mk_int());\n                 let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n+                let fcx = new_fn_ctxt(ccx,\n+                                      ~[],\n+                                      llfdecl,\n+                                      ty::mk_uint(),\n+                                      None);\n                 let arg = unsafe {\n                     //\n                     // we know the return type of llfdecl is an int here, so\n                     // no need for a special check to see if the return type\n                     // is immediate.\n                     //\n-                    llvm::LLVMGetParam(llfdecl, arg_pos(true, 0u) as c_uint)\n+                    llvm::LLVMGetParam(llfdecl, fcx.arg_pos(0u) as c_uint)\n                 };\n-                let (fcx, _) = new_fn_ctxt(ccx,\n-                                              ~[],\n-                                              llfdecl,\n-                                              ty::mk_uint(),\n-                                              None);\n                 let bcx = top_scope_block(fcx, None);\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, repr, arg);"}]}