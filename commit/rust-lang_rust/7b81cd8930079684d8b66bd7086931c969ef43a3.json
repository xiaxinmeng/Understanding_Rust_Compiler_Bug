{"sha": "7b81cd8930079684d8b66bd7086931c969ef43a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODFjZDg5MzAwNzk2ODRkOGI2NmJkNzA4NjkzMWM5NjllZjQzYTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-07T08:19:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-07T08:19:29Z"}, "message": "Fix #1503 in a saner way\n\nCloses #1933", "tree": {"sha": "dc8a74335d59011ef58822caf1f92c262306102d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8a74335d59011ef58822caf1f92c262306102d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b81cd8930079684d8b66bd7086931c969ef43a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b81cd8930079684d8b66bd7086931c969ef43a3", "html_url": "https://github.com/rust-lang/rust/commit/7b81cd8930079684d8b66bd7086931c969ef43a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b81cd8930079684d8b66bd7086931c969ef43a3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55d7d6add5f7a2ae8e8eb164574ecec8b870a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55d7d6add5f7a2ae8e8eb164574ecec8b870a86", "html_url": "https://github.com/rust-lang/rust/commit/e55d7d6add5f7a2ae8e8eb164574ecec8b870a86"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "6ada125be07b528ac579756c8e5db26cb872500d", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7b81cd8930079684d8b66bd7086931c969ef43a3/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b81cd8930079684d8b66bd7086931c969ef43a3/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=7b81cd8930079684d8b66bd7086931c969ef43a3", "patch": "@@ -258,9 +258,9 @@ fn extract_variant_args(bcx: block, pat_id: ast::node_id,\n                         vdefs: {enm: def_id, var: def_id}, val: ValueRef) ->\n    {vals: [ValueRef], bcx: block} {\n     let ccx = bcx.fcx.ccx, bcx = bcx;\n-    // invariant:\n-    // pat_id must have the same length ty_param_substs as vdefs?\n-    let ty_param_substs = node_id_type_params(bcx, pat_id);\n+    let enum_ty_substs = alt check ty::get(node_id_type(bcx, pat_id)).struct {\n+      ty::ty_enum(id, tps) { assert id == vdefs.enm; tps }\n+    };\n     let blobptr = val;\n     let variants = ty::enum_variants(ccx.tcx, vdefs.enm);\n     let args = [];\n@@ -275,12 +275,8 @@ fn extract_variant_args(bcx: block, pat_id: ast::node_id,\n     let vdefs_tg = vdefs.enm;\n     let vdefs_var = vdefs.var;\n     while i < size {\n-        let r =\n-            // invariant needed:\n-            // how do we know it even makes sense to pass in ty_param_substs\n-            // here? What if it's [] and the enum type has variables in it?\n-            GEP_enum(bcx, blobptr, vdefs_tg, vdefs_var,\n-                            ty_param_substs, i);\n+        let r = GEP_enum(bcx, blobptr, vdefs_tg, vdefs_var,\n+                         enum_ty_substs, i);\n         bcx = r.bcx;\n         args += [r.val];\n         i += 1u;"}, {"sha": "88911e2eae7aa971a5e34f2aac8ad0df84e8c1e4", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b81cd8930079684d8b66bd7086931c969ef43a3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b81cd8930079684d8b66bd7086931c969ef43a3/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=7b81cd8930079684d8b66bd7086931c969ef43a3", "patch": "@@ -1445,15 +1445,7 @@ fn check_pat(fcx: @fn_ctxt, map: pat_util::pat_id_map, pat: @ast::pat,\n     let tcx = fcx.ccx.tcx;\n     alt pat.node {\n       ast::pat_wild {\n-          alt structure_of(fcx, pat.span, expected) {\n-                  ty::ty_enum(_, expected_tps) {\n-                    write_ty_substs(tcx, pat.id, expected,\n-                                    expected_tps);\n-                  }\n-                  _ {\n-                    write_ty(tcx, pat.id, expected);\n-                  }\n-              }\n+        write_ty(tcx, pat.id, expected);\n       }\n       ast::pat_lit(lt) {\n         check_expr_with(fcx, lt, expected);"}]}