{"sha": "4a03e04755d220d71c90e989411d235d035c3164", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMDNlMDQ3NTVkMjIwZDcxYzkwZTk4OTQxMWQyMzVkMDM1YzMxNjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-12-15T06:42:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-12-19T02:12:46Z"}, "message": "Make Android tests fail if no device is available", "tree": {"sha": "2c81d83d7f8e98b4c79e6859d57de6bd2307358e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c81d83d7f8e98b4c79e6859d57de6bd2307358e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a03e04755d220d71c90e989411d235d035c3164", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a03e04755d220d71c90e989411d235d035c3164", "html_url": "https://github.com/rust-lang/rust/commit/4a03e04755d220d71c90e989411d235d035c3164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a03e04755d220d71c90e989411d235d035c3164/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6df87c1d876895a7e313728b43d9710ae682bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6df87c1d876895a7e313728b43d9710ae682bb", "html_url": "https://github.com/rust-lang/rust/commit/8f6df87c1d876895a7e313728b43d9710ae682bb"}], "stats": {"total": 219, "additions": 98, "deletions": 121}, "files": [{"sha": "666c6af4e44e5cc26a98d3def3c15de283507383", "filename": "mk/tests.mk", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a03e04755d220d71c90e989411d235d035c3164/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4a03e04755d220d71c90e989411d235d035c3164/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4a03e04755d220d71c90e989411d235d035c3164", "patch": "@@ -133,16 +133,13 @@ $(foreach target,$(CFG_TARGET), \\\n   $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n     $(if $(findstring adb,$(CFG_ADB)), \\\n       $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n-        $(info check: $(target) test enabled \\\n-          $(info check: android device attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n-        $(info check: $(target) test disabled \\\n-          $(info check: android device not attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+        $(info check: android device attached) \\\n+        $(eval $(call DEF_ADB_DEVICE_STATUS, true)), \\\n+        $(info check: android device not attached) \\\n+        $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n       ), \\\n-      $(info check: $(target) test disabled \\\n-        $(info check: adb not found) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+      $(info check: adb not found) \\\n+      $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n     ), \\\n   ) \\\n )\n@@ -451,8 +448,8 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n \n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, run: skipped $$< )\n-\t@touch $$@\n+\t@$$(call E, failing: no device for $$< )\n+\tfalse\n endef\n \n $(foreach host,$(CFG_HOST), \\"}, {"sha": "4176c6698c996376726dccbfbe4c3a1eef8e7668", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 90, "deletions": 110, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/4a03e04755d220d71c90e989411d235d035c3164/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a03e04755d220d71c90e989411d235d035c3164/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=4a03e04755d220d71c90e989411d235d035c3164", "patch": "@@ -37,6 +37,18 @@ use std::vec;\n use extra::test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {\n+\n+    match config.target {\n+\n+        ~\"arm-linux-androideabi\" => {\n+            if !config.adb_device_status {\n+                fail!(\"android device not available\");\n+            }\n+        }\n+\n+        _=> { }\n+    }\n+\n     let mut _mm = MetricMap::new();\n     run_metrics(config, testfile, &mut _mm);\n }\n@@ -99,20 +111,8 @@ fn run_rfail_test(config: &config, props: &TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", &ProcRes);\n     }\n \n-    match config.target {\n-\n-        ~\"arm-linux-androideabi\" => {\n-            if (config.adb_device_status) {\n-                check_correct_failure_status(&ProcRes);\n-                check_error_patterns(props, testfile, &ProcRes);\n-            }\n-        }\n-\n-        _=> {\n-            check_correct_failure_status(&ProcRes);\n-            check_error_patterns(props, testfile, &ProcRes);\n-        }\n-    }\n+    check_correct_failure_status(&ProcRes);\n+    check_error_patterns(props, testfile, &ProcRes);\n }\n \n fn check_correct_failure_status(ProcRes: &ProcRes) {\n@@ -275,86 +275,86 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     let mut ProcArgs;\n     match config.target {\n         ~\"arm-linux-androideabi\" => {\n-            if (config.adb_device_status) {\n-\n-                cmds = cmds.replace(\"run\",\"continue\");\n-\n-                // write debugger script\n-                let script_str = [~\"set charset UTF-8\",\n-                    format!(\"file {}\",exe_file.as_str().unwrap().to_owned()),\n-                    ~\"target remote :5039\",\n-                    cmds,\n-                    ~\"quit\"].connect(\"\\n\");\n-                debug!(\"script_str = {}\", script_str);\n-                dump_output_file(config, testfile, script_str, \"debugger.script\");\n-\n-\n-                procsrv::run(\"\", config.adb_path,\n-                    [~\"push\", exe_file.as_str().unwrap().to_owned(), config.adb_test_dir.clone()],\n-                    ~[(~\"\",~\"\")], Some(~\"\"))\n-                    .expect(format!(\"failed to exec `{}`\", config.adb_path));\n-\n-                procsrv::run(\"\", config.adb_path,\n-                    [~\"forward\", ~\"tcp:5039\", ~\"tcp:5039\"],\n-                    ~[(~\"\",~\"\")], Some(~\"\"))\n-                    .expect(format!(\"failed to exec `{}`\", config.adb_path));\n-\n-                let adb_arg = format!(\"export LD_LIBRARY_PATH={}; gdbserver :5039 {}/{}\",\n-                         config.adb_test_dir.clone(), config.adb_test_dir.clone(),\n-                         str::from_utf8(exe_file.filename().unwrap()));\n-\n-                let mut process = procsrv::run_background(\"\", config.adb_path,\n-                        [~\"shell\",adb_arg.clone()],~[(~\"\",~\"\")], Some(~\"\"))\n-                        .expect(format!(\"failed to exec `{}`\", config.adb_path));\n-                loop {\n-                    //waiting 1 second for gdbserver start\n-                    timer::sleep(1000);\n-                    let result = do task::try {\n-                        tcp::TcpStream::connect(\n-                        SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 5039 });\n-                    };\n-                    if result.is_err() {\n-                        continue;\n-                    }\n-                    break;\n-                }\n \n-                let args = split_maybe_args(&config.rustcflags);\n-                let mut tool_path:~str = ~\"\";\n-                for arg in args.iter() {\n-                    if arg.contains(\"--android-cross-path=\") {\n-                        tool_path = arg.replace(\"--android-cross-path=\",\"\");\n-                        break;\n-                    }\n-                }\n+            cmds = cmds.replace(\"run\",\"continue\");\n \n-                if tool_path.equals(&~\"\") {\n-                    fatal(~\"cannot found android cross path\");\n-                }\n+            // write debugger script\n+            let script_str = [~\"set charset UTF-8\",\n+                              format!(\"file {}\",exe_file.as_str().unwrap().to_owned()),\n+                              ~\"target remote :5039\",\n+                              cmds,\n+                              ~\"quit\"].connect(\"\\n\");\n+            debug!(\"script_str = {}\", script_str);\n+            dump_output_file(config, testfile, script_str, \"debugger.script\");\n \n-                let debugger_script = make_out_name(config, testfile, \"debugger.script\");\n-                // FIXME (#9639): This needs to handle non-utf8 paths\n-                let debugger_opts = ~[~\"-quiet\", ~\"-batch\", ~\"-nx\",\n-                    \"-command=\" + debugger_script.as_str().unwrap().to_owned()];\n-\n-                let gdb_path = tool_path.append(\"/bin/arm-linux-androideabi-gdb\");\n-                let procsrv::Result{ out, err, status }=\n-                    procsrv::run(\"\",\n-                            gdb_path,\n-                            debugger_opts, ~[(~\"\",~\"\")], None)\n-                    .expect(format!(\"failed to exec `{}`\", gdb_path));\n-                let cmdline = {\n-                    let cmdline = make_cmdline(\"\", \"arm-linux-androideabi-gdb\", debugger_opts);\n-                    logv(config, format!(\"executing {}\", cmdline));\n-                    cmdline\n+\n+            procsrv::run(\"\", config.adb_path,\n+                         [~\"push\", exe_file.as_str().unwrap().to_owned(),\n+                          config.adb_test_dir.clone()],\n+                         ~[(~\"\",~\"\")], Some(~\"\"))\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+\n+            procsrv::run(\"\", config.adb_path,\n+                         [~\"forward\", ~\"tcp:5039\", ~\"tcp:5039\"],\n+                         ~[(~\"\",~\"\")], Some(~\"\"))\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+\n+            let adb_arg = format!(\"export LD_LIBRARY_PATH={}; gdbserver :5039 {}/{}\",\n+                                  config.adb_test_dir.clone(), config.adb_test_dir.clone(),\n+                                  str::from_utf8(exe_file.filename().unwrap()));\n+\n+            let mut process = procsrv::run_background(\"\", config.adb_path,\n+                                                      [~\"shell\",adb_arg.clone()],\n+                                                      ~[(~\"\",~\"\")], Some(~\"\"))\n+                .expect(format!(\"failed to exec `{}`\", config.adb_path));\n+            loop {\n+                //waiting 1 second for gdbserver start\n+                timer::sleep(1000);\n+                let result = do task::try {\n+                    tcp::TcpStream::connect(\n+                        SocketAddr { ip: Ipv4Addr(127, 0, 0, 1), port: 5039 });\n                 };\n+                if result.is_err() {\n+                    continue;\n+                }\n+                break;\n+            }\n+\n+            let args = split_maybe_args(&config.rustcflags);\n+            let mut tool_path:~str = ~\"\";\n+            for arg in args.iter() {\n+                if arg.contains(\"--android-cross-path=\") {\n+                    tool_path = arg.replace(\"--android-cross-path=\",\"\");\n+                    break;\n+                }\n+            }\n \n-                ProcRes = ProcRes {status: status,\n-                    stdout: out,\n-                    stderr: err,\n-                    cmdline: cmdline};\n-                process.force_destroy();\n+            if tool_path.equals(&~\"\") {\n+                fatal(~\"cannot found android cross path\");\n             }\n+\n+            let debugger_script = make_out_name(config, testfile, \"debugger.script\");\n+            // FIXME (#9639): This needs to handle non-utf8 paths\n+            let debugger_opts = ~[~\"-quiet\", ~\"-batch\", ~\"-nx\",\n+                                  \"-command=\" + debugger_script.as_str().unwrap().to_owned()];\n+\n+            let gdb_path = tool_path.append(\"/bin/arm-linux-androideabi-gdb\");\n+            let procsrv::Result{ out, err, status }=\n+                procsrv::run(\"\",\n+                             gdb_path,\n+                             debugger_opts, ~[(~\"\",~\"\")], None)\n+                .expect(format!(\"failed to exec `{}`\", gdb_path));\n+            let cmdline = {\n+                let cmdline = make_cmdline(\"\", \"arm-linux-androideabi-gdb\", debugger_opts);\n+                logv(config, format!(\"executing {}\", cmdline));\n+                cmdline\n+            };\n+\n+            ProcRes = ProcRes {status: status,\n+                               stdout: out,\n+                               stderr: err,\n+                               cmdline: cmdline};\n+            process.force_destroy();\n         }\n \n         _=> {\n@@ -662,11 +662,7 @@ fn exec_compiled_test(config: &config, props: &TestProps,\n     match config.target {\n \n         ~\"arm-linux-androideabi\" => {\n-            if (config.adb_device_status) {\n-                _arm_exec_compiled_test(config, props, testfile, env)\n-            } else {\n-                _dummy_exec_compiled_test(config, props, testfile)\n-            }\n+            _arm_exec_compiled_test(config, props, testfile, env)\n         }\n \n         _=> {\n@@ -710,9 +706,7 @@ fn compose_and_run_compiler(\n         match config.target {\n \n             ~\"arm-linux-androideabi\" => {\n-                if (config.adb_device_status) {\n-                    _arm_push_aux_shared_library(config, testfile);\n-                }\n+                _arm_push_aux_shared_library(config, testfile);\n             }\n \n             _=> { }\n@@ -992,20 +986,6 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     }\n }\n \n-fn _dummy_exec_compiled_test(config: &config, props: &TestProps,\n-                      testfile: &Path) -> ProcRes {\n-\n-    let args = make_run_args(config, props, testfile);\n-    let cmdline = make_cmdline(\"\", args.prog, args.args);\n-\n-    match config.mode {\n-        mode_run_fail => ProcRes {status: process::ExitStatus(101), stdout: ~\"\",\n-                                 stderr: ~\"\", cmdline: cmdline},\n-        _             => ProcRes {status: process::ExitStatus(0), stdout: ~\"\",\n-                                 stderr: ~\"\", cmdline: cmdline}\n-    }\n-}\n-\n fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n     let tdir = aux_output_dir_name(config, testfile);\n "}]}