{"sha": "10d7d7304b11a27414d2da74e044e22cb889188e", "node_id": "C_kwDOAAsO6NoAKDEwZDdkNzMwNGIxMWEyNzQxNGQyZGE3NGUwNDRlMjJjYjg4OTE4OGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-25T12:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-25T12:29:26Z"}, "message": "Revert \"Handle dev-dependency cycles\"", "tree": {"sha": "af599e567160ae42421b111a8eae16b0c9eb6c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af599e567160ae42421b111a8eae16b0c9eb6c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d7d7304b11a27414d2da74e044e22cb889188e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkR8emCRBK7hj4Ov3rIwAAZTAIAKMdDrtdPZWosg/xukAoKkHQ\nliMABvRUV+9lUFARrvKTjhEM/an8/7caLibPLFLKTxnmVc4N9bcJrj8YAYp6B/4j\nvex/0T4QC+Dv1xvnXWI1Dj1dPXkULwzfiC0/CvqcFXATV7WEZPZRMe5k6zHCY6Bh\nCc/vcEqXRQSiiofLogaP/q1hCexD9DwJmHX6P+SQl/CIMJZWYj+27JrcLFhUF5iT\niaSQiUuWCJpiqKnrgjybbPo8vuBLSY6I3hg39yRSTcGcX1k7WeX+aNM6yLqpsalb\nm1YqUgzDKXEF7bUSLwchVqe37mFNl+2DPMGU3P8FPdl93/HUZnh5tpi0a8rMIfQ=\n=bApe\n-----END PGP SIGNATURE-----\n", "payload": "tree af599e567160ae42421b111a8eae16b0c9eb6c16\nparent a96bb452a75871ab376c67649eb71121c093ab34\nauthor Lukas Wirth <lukastw97@gmail.com> 1682425766 +0200\ncommitter GitHub <noreply@github.com> 1682425766 +0200\n\nRevert \"Handle dev-dependency cycles\"\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d7d7304b11a27414d2da74e044e22cb889188e", "html_url": "https://github.com/rust-lang/rust/commit/10d7d7304b11a27414d2da74e044e22cb889188e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d7d7304b11a27414d2da74e044e22cb889188e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96bb452a75871ab376c67649eb71121c093ab34", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96bb452a75871ab376c67649eb71121c093ab34", "html_url": "https://github.com/rust-lang/rust/commit/a96bb452a75871ab376c67649eb71121c093ab34"}], "stats": {"total": 1850, "additions": 52, "deletions": 1798}, "files": [{"sha": "8759782bb29cbd1312bf213a4026731497cd6c6d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -87,7 +87,6 @@ name = \"base-db\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg\",\n- \"indexmap\",\n  \"la-arena\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -580,7 +579,6 @@ dependencies = [\n  \"hir-def\",\n  \"hir-expand\",\n  \"hkalbasi-rustc-ap-rustc_index\",\n- \"indexmap\",\n  \"intern\",\n  \"itertools\",\n  \"la-arena\","}, {"sha": "c2d021c223857dac172ea139fdf414cdf839eef2", "filename": "crates/base-db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2FCargo.toml?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -14,7 +14,6 @@ doctest = false\n [dependencies]\n salsa = \"0.17.0-pre.2\"\n rustc-hash = \"1.1.0\"\n-indexmap = \"1.6.0\"\n \n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n "}, {"sha": "dfd0b2abc33253b1373d9af8117b65a829137efa", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -417,11 +417,6 @@ impl CrateGraph {\n         Ok(())\n     }\n \n-    pub fn duplicate(&mut self, id: CrateId) -> CrateId {\n-        let data = self[id].clone();\n-        self.arena.alloc(data)\n-    }\n-\n     pub fn add_dep(\n         &mut self,\n         from: CrateId,\n@@ -617,12 +612,6 @@ impl ops::Index<CrateId> for CrateGraph {\n     }\n }\n \n-impl ops::IndexMut<CrateId> for CrateGraph {\n-    fn index_mut(&mut self, crate_id: CrateId) -> &mut CrateData {\n-        &mut self.arena[crate_id]\n-    }\n-}\n-\n impl CrateData {\n     fn add_dep(&mut self, dep: Dependency) {\n         self.dependencies.push(dep)"}, {"sha": "b65cf7341f350e4fbb721f3ae41ef5501a0e16fd", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -6,10 +6,9 @@ mod input;\n mod change;\n pub mod fixture;\n \n-use std::{hash::BuildHasherDefault, panic, sync::Arc};\n+use std::{panic, sync::Arc};\n \n-use indexmap::IndexSet;\n-use rustc_hash::FxHasher;\n+use rustc_hash::FxHashSet;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n@@ -60,10 +59,7 @@ pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<str>;\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId>;\n-    fn relevant_crates(\n-        &self,\n-        file_id: FileId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>>;\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -103,16 +99,10 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n \n-    fn source_root_crates(\n-        &self,\n-        id: SourceRootId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>>;\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n }\n \n-fn source_root_crates(\n-    db: &dyn SourceDatabaseExt,\n-    id: SourceRootId,\n-) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n+fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<CrateId>> {\n     let graph = db.crate_graph();\n     let res = graph\n         .iter()\n@@ -138,10 +128,7 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         source_root.resolve_path(path)\n     }\n \n-    fn relevant_crates(\n-        &self,\n-        file_id: FileId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         let _p = profile::span(\"relevant_crates\");\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)"}, {"sha": "6bfcd90970dde91b88b9210f811f9a30f5ffa323", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -1,9 +1,7 @@\n //! Database used for testing `hir_def`.\n \n use std::{\n-    fmt,\n-    hash::BuildHasherDefault,\n-    panic,\n+    fmt, panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -13,8 +11,7 @@ use base_db::{\n     Upcast,\n };\n use hir_expand::{db::ExpandDatabase, InFile};\n-use indexmap::IndexSet;\n-use rustc_hash::FxHasher;\n+use rustc_hash::FxHashSet;\n use syntax::{algo, ast, AstNode};\n \n use crate::{\n@@ -80,10 +77,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(\n-        &self,\n-        file_id: FileId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "3ab7460e8cd53de755a611f21230f74d2cfb68d7", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -30,7 +30,6 @@ la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.17.0\"\n typed-arena = \"2.0.1\"\n rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n-indexmap = \"1.6.0\"\n \n # local deps\n stdx.workspace = true"}, {"sha": "ca96a8d17246f3ca643041f304d755bbe2d94d72", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -1,9 +1,7 @@\n //! Database used for testing `hir`.\n \n use std::{\n-    fmt,\n-    hash::BuildHasherDefault,\n-    panic,\n+    fmt, panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -13,8 +11,7 @@ use base_db::{\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::ExpandDatabase;\n-use indexmap::IndexSet;\n-use rustc_hash::FxHasher;\n+use rustc_hash::FxHashSet;\n use stdx::hash::NoHashHashMap;\n use syntax::TextRange;\n use test_utils::extract_annotations;\n@@ -85,10 +82,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(\n-        &self,\n-        file_id: FileId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "c50ffa4f8b70349d6252c0f4a55c32f501d3a4b3", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -119,9 +119,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn file_to_def(&self, file: FileId) -> SmallVec<[ModuleId; 1]> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n         let mut mods = SmallVec::new();\n-        // HACK: We iterate in reverse so that dev-dependency duplicated crates appear first in this\n-        // Most code only deals with one module and we want to prefer the test enabled code where possible\n-        for &crate_id in self.db.relevant_crates(file).iter().rev() {\n+        for &crate_id in self.db.relevant_crates(file).iter() {\n             // FIXME: inner items\n             let crate_def_map = self.db.crate_def_map(crate_id);\n             mods.extend("}, {"sha": "b0c5820fb0910ec86dddc23bb1c68a4949af9c86", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -43,7 +43,7 @@ pub mod syntax_helpers {\n     pub use parser::LexedStr;\n }\n \n-use std::{fmt, hash::BuildHasherDefault, mem::ManuallyDrop, sync::Arc};\n+use std::{fmt, mem::ManuallyDrop, sync::Arc};\n \n use base_db::{\n     salsa::{self, Durability},\n@@ -53,7 +53,6 @@ use hir::{\n     db::{DefDatabase, ExpandDatabase, HirDatabase},\n     symbols::FileSymbolKind,\n };\n-use indexmap::IndexSet;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n@@ -120,10 +119,7 @@ impl FileLoader for RootDatabase {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(\n-        &self,\n-        file_id: FileId,\n-    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "3e5234afc810f5e24f50a1179ec693e569168ccd", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -5,7 +5,7 @@ use std::{\n \n use base_db::{CrateGraph, FileId, ProcMacroPaths};\n use cfg::{CfgAtom, CfgDiff};\n-use expect_test::{expect, expect_file, Expect, ExpectFile};\n+use expect_test::{expect, Expect};\n use paths::{AbsPath, AbsPathBuf};\n use serde::de::DeserializeOwned;\n \n@@ -114,11 +114,6 @@ fn check_crate_graph(crate_graph: CrateGraph, expect: Expect) {\n     replace_root(&mut crate_graph, false);\n     expect.assert_eq(&crate_graph);\n }\n-fn check_crate_graph_f(crate_graph: CrateGraph, expect: ExpectFile) {\n-    let mut crate_graph = format!(\"{crate_graph:#?}\");\n-    replace_root(&mut crate_graph, false);\n-    expect.assert_eq(&crate_graph);\n-}\n \n #[test]\n fn cargo_hello_world_project_model_with_wildcard_overrides() {\n@@ -1671,12 +1666,3 @@ fn rust_project_is_proc_macro_has_proc_macro_dep() {\n     // on the proc_macro sysroot crate.\n     crate_data.dependencies.iter().find(|&dep| dep.name.deref() == \"proc_macro\").unwrap();\n }\n-\n-#[test]\n-fn cargo_dev_dependencies() {\n-    let (crate_graph, _proc_macros) = load_cargo(\"complex-with-dev-deps.json\");\n-    check_crate_graph_f(\n-        crate_graph,\n-        expect_file![\"../test_data/cargo_dev_dependencies-crate-graph.txt\"],\n-    )\n-}"}, {"sha": "5518b6bc7f584cc1f41a690904256cb0f55ec1b0", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 36, "deletions": 128, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d7d7304b11a27414d2da74e044e22cb889188e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=10d7d7304b11a27414d2da74e044e22cb889188e", "patch": "@@ -2,12 +2,7 @@\n //! metadata` or `rust-project.json`) into representation stored in the salsa\n //! database -- `CrateGraph`.\n \n-use std::{\n-    collections::{hash_map::Entry, VecDeque},\n-    fmt, fs,\n-    process::Command,\n-    sync::Arc,\n-};\n+use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{\n@@ -849,12 +844,12 @@ fn cargo_to_crate_graph(\n         None => (SysrootPublicDeps::default(), None),\n     };\n \n-    let cfg_options = forced_cfg.clone().unwrap_or_else(|| {\n+    let cfg_options = {\n         let mut cfg_options = CfgOptions::default();\n         cfg_options.extend(rustc_cfg);\n         cfg_options.insert_atom(\"debug_assertions\".into());\n         cfg_options\n-    });\n+    };\n \n     // Mapping of a package to its library target\n     let mut pkg_to_lib_crate = FxHashMap::default();\n@@ -866,6 +861,32 @@ fn cargo_to_crate_graph(\n     for pkg in cargo.packages() {\n         has_private |= cargo[pkg].metadata.rustc_private;\n \n+        let cfg_options = forced_cfg.clone().unwrap_or_else(|| {\n+            let mut cfg_options = cfg_options.clone();\n+\n+            // Add test cfg for local crates\n+            if cargo[pkg].is_local {\n+                cfg_options.insert_atom(\"test\".into());\n+            }\n+\n+            let overrides = match override_cfg {\n+                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n+                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n+            };\n+\n+            if let Some(overrides) = overrides {\n+                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n+                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n+                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n+                //\n+                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n+                // figure out the set of cfgs that would have to apply to make it active.\n+\n+                cfg_options.apply_diff(overrides.clone());\n+            };\n+            cfg_options\n+        });\n+\n         let mut lib_tgt = None;\n         for &tgt in cargo[pkg].targets.iter() {\n             if cargo[tgt].kind != TargetKind::Lib && !cargo[pkg].is_member {\n@@ -876,7 +897,7 @@ fn cargo_to_crate_graph(\n                 // https://github.com/rust-lang/rust-analyzer/issues/11300\n                 continue;\n             }\n-            let Some(file_id) = load(&cargo[tgt].root) else { continue };\n+            let Some(file_id) =  load(&cargo[tgt].root) else { continue };\n \n             let crate_id = add_target_crate_root(\n                 crate_graph,\n@@ -904,19 +925,15 @@ fn cargo_to_crate_graph(\n             pkg_crates.entry(pkg).or_insert_with(Vec::new).push((crate_id, cargo[tgt].kind));\n         }\n \n-        let Some(targets) = pkg_crates.get(&pkg) else { continue };\n         // Set deps to the core, std and to the lib target of the current package\n-        for &(from, kind) in targets {\n+        for &(from, kind) in pkg_crates.get(&pkg).into_iter().flatten() {\n             // Add sysroot deps first so that a lib target named `core` etc. can overwrite them.\n             public_deps.add_to_crate_graph(crate_graph, from);\n \n             // Add dep edge of all targets to the package's lib target\n             if let Some((to, name)) = lib_tgt.clone() {\n-                if to != from {\n-                    if kind == TargetKind::BuildScript {\n-                        // build script can not depend on its library target\n-                        continue;\n-                    }\n+                if to != from && kind != TargetKind::BuildScript {\n+                    // (build script can not depend on its library target)\n \n                     // For root projects with dashes in their name,\n                     // cargo metadata does not do any normalization,\n@@ -928,47 +945,6 @@ fn cargo_to_crate_graph(\n         }\n     }\n \n-    // We now need to duplicate workspace members that are used as dev-dependencies to prevent\n-    // cycles from forming.\n-\n-    // Map from crate id to it's dev-dependency clone id\n-    let mut test_dupes = FxHashMap::default();\n-    let mut work = vec![];\n-\n-    // Get all dependencies of the workspace members that are used as dev-dependencies\n-    for pkg in cargo.packages() {\n-        for dep in &cargo[pkg].dependencies {\n-            if dep.kind == DepKind::Dev && cargo[dep.pkg].is_member {\n-                work.push(dep.pkg);\n-            }\n-        }\n-    }\n-    while let Some(pkg) = work.pop() {\n-        let Some(&to) = pkg_to_lib_crate.get(&pkg) else { continue };\n-        match test_dupes.entry(to) {\n-            Entry::Occupied(_) => continue,\n-            Entry::Vacant(v) => {\n-                for dep in &cargo[pkg].dependencies {\n-                    if dep.kind == DepKind::Normal && cargo[dep.pkg].is_member {\n-                        work.push(dep.pkg);\n-                    }\n-                }\n-                v.insert({\n-                    let duped = crate_graph.duplicate(to);\n-                    tracing::info!(\n-                        \"duplicating workspace crate {:?} as it is being used as a dev-dependency: {to:?} -> {duped:?}\",\n-                        crate_graph[to].display_name\n-                    );\n-                    if let Some(proc_macro) = proc_macros.get(&to).cloned() {\n-                        proc_macros.insert(duped, proc_macro);\n-                    }\n-                    crate_graph[duped].cfg_options.insert_atom(\"test\".into());\n-                    duped\n-                });\n-            }\n-        }\n-    }\n-\n     // Now add a dep edge from all targets of upstream to the lib\n     // target of downstream.\n     for pkg in cargo.packages() {\n@@ -982,71 +958,12 @@ fn cargo_to_crate_graph(\n                 if (dep.kind == DepKind::Build) != (kind == TargetKind::BuildScript) {\n                     continue;\n                 }\n-                add_dep(\n-                    crate_graph,\n-                    from,\n-                    name.clone(),\n-                    if dep.kind == DepKind::Dev {\n-                        // point to the test enabled duplicate for dev-dependencies\n-                        test_dupes.get(&to).copied().unwrap_or(to)\n-                    } else {\n-                        to\n-                    },\n-                );\n \n-                if dep.kind == DepKind::Normal && cargo[dep.pkg].is_member {\n-                    // Also apply the dependency as a test enabled dependency to the test duplicate\n-                    if let Some(&dupe) = test_dupes.get(&from) {\n-                        let to = test_dupes.get(&to).copied().unwrap_or_else(|| {\n-                            panic!(\n-                                \"dependency of a dev dependency did not get duplicated! {:?} {:?}\",\n-                                crate_graph[to].display_name, crate_graph[from].display_name,\n-                            )\n-                        });\n-                        add_dep(crate_graph, dupe, name.clone(), to);\n-                    }\n-                }\n+                add_dep(crate_graph, from, name.clone(), to)\n             }\n         }\n     }\n \n-    for (&pkg, targets) in &pkg_crates {\n-        for &(krate, _) in targets {\n-            if let Some(&dupe) = test_dupes.get(&krate) {\n-                tracing::info!(\n-                    \"{krate:?} {:?} {dupe:?} {:?}\",\n-                    crate_graph[krate].cfg_options,\n-                    crate_graph[dupe].cfg_options\n-                );\n-                // if the crate got duped as a dev-dep the dupe already has test set\n-                continue;\n-            }\n-            let cfg_options = &mut crate_graph[krate].cfg_options;\n-\n-            // Add test cfg for local crates\n-            if cargo[pkg].is_local {\n-                cfg_options.insert_atom(\"test\".into());\n-            }\n-\n-            let overrides = match override_cfg {\n-                CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n-                CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n-            };\n-\n-            if let Some(overrides) = overrides {\n-                // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n-                // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n-                // working on rust-lang/rust as that's the only time it appears outside sysroot).\n-                //\n-                // A more ideal solution might be to reanalyze crates based on where the cursor is and\n-                // figure out the set of cfgs that would have to apply to make it active.\n-\n-                cfg_options.apply_diff(overrides.clone());\n-            };\n-        }\n-    }\n-\n-    // FIXME: Handle rustc private crates properly when used as dev-dependencies\n     if has_private {\n         // If the user provided a path to rustc sources, we add all the rustc_private crates\n         // and create dependencies on them for the crates which opt-in to that\n@@ -1170,9 +1087,7 @@ fn handle_rustc_crates(\n                 continue;\n             }\n             for dep in &rustc_workspace[pkg].dependencies {\n-                if dep.kind == DepKind::Normal {\n-                    queue.push_back(dep.pkg);\n-                }\n+                queue.push_back(dep.pkg);\n             }\n \n             let mut cfg_options = cfg_options.clone();\n@@ -1482,12 +1397,10 @@ fn handle_hack_cargo_workspace(\n         .collect()\n }\n \n-#[track_caller]\n fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n     add_dep_inner(graph, from, Dependency::new(name, to))\n }\n \n-#[track_caller]\n fn add_dep_with_prelude(\n     graph: &mut CrateGraph,\n     from: CrateId,\n@@ -1498,18 +1411,13 @@ fn add_dep_with_prelude(\n     add_dep_inner(graph, from, Dependency::with_prelude(name, to, prelude))\n }\n \n-#[track_caller]\n fn add_proc_macro_dep(crate_graph: &mut CrateGraph, from: CrateId, to: CrateId, prelude: bool) {\n     add_dep_with_prelude(crate_graph, from, CrateName::new(\"proc_macro\").unwrap(), to, prelude);\n }\n \n-#[track_caller]\n fn add_dep_inner(graph: &mut CrateGraph, from: CrateId, dep: Dependency) {\n     if let Err(err) = graph.add_dep(from, dep) {\n-        if cfg!(test) {\n-            panic!(\"{}\", err);\n-        }\n-        tracing::error!(\"{}\", err);\n+        tracing::error!(\"{}\", err)\n     }\n }\n "}, {"sha": "107094025147dfeb19cc18e140f50e45c42b5fa2", "filename": "crates/project-model/test_data/cargo_dev_dependencies-crate-graph.txt", "status": "removed", "additions": 0, "deletions": 609, "changes": 609, "blob_url": "https://github.com/rust-lang/rust/blob/a96bb452a75871ab376c67649eb71121c093ab34/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a96bb452a75871ab376c67649eb71121c093ab34/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt?ref=a96bb452a75871ab376c67649eb71121c093ab34", "patch": "@@ -1,609 +0,0 @@\n-{\n-    0: CrateData {\n-        root_file_id: FileId(\n-            1,\n-        ),\n-        edition: Edition2018,\n-        version: Some(\n-            \"0.7.20\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"aho_corasick\",\n-                ),\n-                canonical_name: \"aho_corasick\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"feature=default\",\n-                \"feature=std\",\n-            ],\n-        ),\n-        potential_cfg_options: Some(\n-            CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"feature=default\",\n-                    \"feature=std\",\n-                ],\n-            ),\n-        ),\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20\",\n-                \"CARGO_PKG_VERSION\": \"0.7.20\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"aho_corasick\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"aho-corasick\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"20\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [\n-            Dependency {\n-                crate_id: Idx::<CrateData>(2),\n-                name: CrateName(\n-                    \"memchr\",\n-                ),\n-                prelude: true,\n-            },\n-        ],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/BurntSushi/aho-corasick\",\n-            ),\n-            name: \"aho-corasick\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    1: CrateData {\n-        root_file_id: FileId(\n-            2,\n-        ),\n-        edition: Edition2021,\n-        version: Some(\n-            \"0.3.0\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"la_arena\",\n-                ),\n-                canonical_name: \"la-arena\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-            ],\n-        ),\n-        potential_cfg_options: None,\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/la-arena-0.3.0\",\n-                \"CARGO_PKG_VERSION\": \"0.3.0\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"la_arena\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"la-arena\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"3\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/la-arena\",\n-            ),\n-            name: \"la-arena\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    2: CrateData {\n-        root_file_id: FileId(\n-            3,\n-        ),\n-        edition: Edition2018,\n-        version: Some(\n-            \"2.5.0\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"memchr\",\n-                ),\n-                canonical_name: \"memchr\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"feature=default\",\n-                \"feature=std\",\n-            ],\n-        ),\n-        potential_cfg_options: Some(\n-            CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"feature=compiler_builtins\",\n-                    \"feature=core\",\n-                    \"feature=default\",\n-                    \"feature=libc\",\n-                    \"feature=rustc-dep-of-std\",\n-                    \"feature=std\",\n-                    \"feature=use_std\",\n-                ],\n-            ),\n-        ),\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"2\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0\",\n-                \"CARGO_PKG_VERSION\": \"2.5.0\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"memchr\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"memchr\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"5\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/BurntSushi/memchr\",\n-            ),\n-            name: \"memchr\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    3: CrateData {\n-        root_file_id: FileId(\n-            4,\n-        ),\n-        edition: Edition2021,\n-        version: Some(\n-            \"0.1.0\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                canonical_name: \"ra-playground\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-            ],\n-        ),\n-        potential_cfg_options: None,\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n-                \"CARGO_PKG_VERSION\": \"0.1.0\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"ra_playground\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"ra-playground\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [\n-            Dependency {\n-                crate_id: Idx::<CrateData>(1),\n-                name: CrateName(\n-                    \"la_arena\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(7),\n-                name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(5),\n-                name: CrateName(\n-                    \"regex\",\n-                ),\n-                prelude: true,\n-            },\n-        ],\n-        origin: Local {\n-            repo: None,\n-            name: Some(\n-                \"ra-playground\",\n-            ),\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    4: CrateData {\n-        root_file_id: FileId(\n-            5,\n-        ),\n-        edition: Edition2021,\n-        version: Some(\n-            \"0.1.0\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                canonical_name: \"ra-playground\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"test\",\n-            ],\n-        ),\n-        potential_cfg_options: None,\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n-                \"CARGO_PKG_VERSION\": \"0.1.0\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"ra_playground\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"ra-playground\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [\n-            Dependency {\n-                crate_id: Idx::<CrateData>(3),\n-                name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(1),\n-                name: CrateName(\n-                    \"la_arena\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(7),\n-                name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(5),\n-                name: CrateName(\n-                    \"regex\",\n-                ),\n-                prelude: true,\n-            },\n-        ],\n-        origin: Local {\n-            repo: None,\n-            name: Some(\n-                \"ra-playground\",\n-            ),\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    5: CrateData {\n-        root_file_id: FileId(\n-            6,\n-        ),\n-        edition: Edition2018,\n-        version: Some(\n-            \"1.7.3\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"regex\",\n-                ),\n-                canonical_name: \"regex\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"feature=aho-corasick\",\n-                \"feature=default\",\n-                \"feature=memchr\",\n-                \"feature=perf\",\n-                \"feature=perf-cache\",\n-                \"feature=perf-dfa\",\n-                \"feature=perf-inline\",\n-                \"feature=perf-literal\",\n-                \"feature=std\",\n-                \"feature=unicode\",\n-                \"feature=unicode-age\",\n-                \"feature=unicode-bool\",\n-                \"feature=unicode-case\",\n-                \"feature=unicode-gencat\",\n-                \"feature=unicode-perl\",\n-                \"feature=unicode-script\",\n-                \"feature=unicode-segment\",\n-            ],\n-        ),\n-        potential_cfg_options: Some(\n-            CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"feature=aho-corasick\",\n-                    \"feature=default\",\n-                    \"feature=memchr\",\n-                    \"feature=pattern\",\n-                    \"feature=perf\",\n-                    \"feature=perf-cache\",\n-                    \"feature=perf-dfa\",\n-                    \"feature=perf-inline\",\n-                    \"feature=perf-literal\",\n-                    \"feature=std\",\n-                    \"feature=unicode\",\n-                    \"feature=unicode-age\",\n-                    \"feature=unicode-bool\",\n-                    \"feature=unicode-case\",\n-                    \"feature=unicode-gencat\",\n-                    \"feature=unicode-perl\",\n-                    \"feature=unicode-script\",\n-                    \"feature=unicode-segment\",\n-                    \"feature=unstable\",\n-                    \"feature=use_std\",\n-                ],\n-            ),\n-        ),\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"1\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3\",\n-                \"CARGO_PKG_VERSION\": \"1.7.3\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"regex\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"regex\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"3\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [\n-            Dependency {\n-                crate_id: Idx::<CrateData>(0),\n-                name: CrateName(\n-                    \"aho_corasick\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(2),\n-                name: CrateName(\n-                    \"memchr\",\n-                ),\n-                prelude: true,\n-            },\n-            Dependency {\n-                crate_id: Idx::<CrateData>(6),\n-                name: CrateName(\n-                    \"regex_syntax\",\n-                ),\n-                prelude: true,\n-            },\n-        ],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/rust-lang/regex\",\n-            ),\n-            name: \"regex\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    6: CrateData {\n-        root_file_id: FileId(\n-            7,\n-        ),\n-        edition: Edition2018,\n-        version: Some(\n-            \"0.6.29\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"regex_syntax\",\n-                ),\n-                canonical_name: \"regex-syntax\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"feature=default\",\n-                \"feature=unicode\",\n-                \"feature=unicode-age\",\n-                \"feature=unicode-bool\",\n-                \"feature=unicode-case\",\n-                \"feature=unicode-gencat\",\n-                \"feature=unicode-perl\",\n-                \"feature=unicode-script\",\n-                \"feature=unicode-segment\",\n-            ],\n-        ),\n-        potential_cfg_options: Some(\n-            CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"feature=default\",\n-                    \"feature=unicode\",\n-                    \"feature=unicode-age\",\n-                    \"feature=unicode-bool\",\n-                    \"feature=unicode-case\",\n-                    \"feature=unicode-gencat\",\n-                    \"feature=unicode-perl\",\n-                    \"feature=unicode-script\",\n-                    \"feature=unicode-segment\",\n-                ],\n-            ),\n-        ),\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29\",\n-                \"CARGO_PKG_VERSION\": \"0.6.29\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"regex_syntax\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"regex-syntax\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"29\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"6\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/rust-lang/regex\",\n-            ),\n-            name: \"regex-syntax\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    7: CrateData {\n-        root_file_id: FileId(\n-            4,\n-        ),\n-        edition: Edition2021,\n-        version: Some(\n-            \"0.1.0\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"ra_playground\",\n-                ),\n-                canonical_name: \"ra-playground\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"test\",\n-            ],\n-        ),\n-        potential_cfg_options: None,\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$ra-playground\",\n-                \"CARGO_PKG_VERSION\": \"0.1.0\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"ra_playground\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"ra-playground\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [],\n-        origin: Local {\n-            repo: None,\n-            name: Some(\n-                \"ra-playground\",\n-            ),\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-}\n\\ No newline at end of file"}, {"sha": "6046e16d7d547c35dcd7cc8e5f4b5c3c4ff3c958", "filename": "crates/project-model/test_data/complex-with-dev-deps.json", "status": "removed", "additions": 0, "deletions": 985, "changes": 985, "blob_url": "https://github.com/rust-lang/rust/blob/a96bb452a75871ab376c67649eb71121c093ab34/crates%2Fproject-model%2Ftest_data%2Fcomplex-with-dev-deps.json", "raw_url": "https://github.com/rust-lang/rust/raw/a96bb452a75871ab376c67649eb71121c093ab34/crates%2Fproject-model%2Ftest_data%2Fcomplex-with-dev-deps.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Ftest_data%2Fcomplex-with-dev-deps.json?ref=a96bb452a75871ab376c67649eb71121c093ab34", "patch": "@@ -1,985 +0,0 @@\n-{\n-    \"packages\": [\n-        {\n-            \"name\": \"aho-corasick\",\n-            \"version\": \"0.7.20\",\n-            \"id\": \"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-            \"license\": \"Unlicense OR MIT\",\n-            \"license_file\": null,\n-            \"description\": \"Fast multiple substring searching.\",\n-            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-            \"dependencies\": [\n-                {\n-                    \"name\": \"memchr\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^2.4.0\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": false,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                }\n-            ],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"aho_corasick\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/src/lib.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": true,\n-                    \"doctest\": true,\n-                    \"test\": true\n-                }\n-            ],\n-            \"features\": {\n-                \"default\": [\n-                    \"std\"\n-                ],\n-                \"std\": [\n-                    \"memchr/std\"\n-                ]\n-            },\n-            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/aho-corasick-0.7.20/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [\n-                \"Andrew Gallant <jamslam@gmail.com>\"\n-            ],\n-            \"categories\": [\n-                \"text-processing\"\n-            ],\n-            \"keywords\": [\n-                \"string\",\n-                \"search\",\n-                \"text\",\n-                \"aho\",\n-                \"multi\"\n-            ],\n-            \"readme\": \"README.md\",\n-            \"repository\": \"https://github.com/BurntSushi/aho-corasick\",\n-            \"homepage\": \"https://github.com/BurntSushi/aho-corasick\",\n-            \"documentation\": null,\n-            \"edition\": \"2018\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": null\n-        },\n-        {\n-            \"name\": \"la-arena\",\n-            \"version\": \"0.3.0\",\n-            \"id\": \"la-arena 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-            \"license\": \"MIT OR Apache-2.0\",\n-            \"license_file\": null,\n-            \"description\": \"Simple index-based arena without deletion.\",\n-            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-            \"dependencies\": [],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"la-arena\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/la-arena-0.3.0/src/lib.rs\",\n-                    \"edition\": \"2021\",\n-                    \"doc\": true,\n-                    \"doctest\": true,\n-                    \"test\": true\n-                }\n-            ],\n-            \"features\": {},\n-            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/la-arena-0.3.0/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [],\n-            \"categories\": [\n-                \"data-structures\",\n-                \"memory-management\",\n-                \"rust-patterns\"\n-            ],\n-            \"keywords\": [],\n-            \"readme\": null,\n-            \"repository\": \"https://github.com/rust-lang/rust-analyzer/tree/master/lib/la-arena\",\n-            \"homepage\": null,\n-            \"documentation\": \"https://docs.rs/la-arena\",\n-            \"edition\": \"2021\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": \"1.56\"\n-        },\n-        {\n-            \"name\": \"memchr\",\n-            \"version\": \"2.5.0\",\n-            \"id\": \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-            \"license\": \"Unlicense/MIT\",\n-            \"license_file\": null,\n-            \"description\": \"Safe interface to memchr.\",\n-            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-            \"dependencies\": [\n-                {\n-                    \"name\": \"compiler_builtins\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^0.1.2\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": true,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"rustc-std-workspace-core\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^1.0.0\",\n-                    \"kind\": null,\n-                    \"rename\": \"core\",\n-                    \"optional\": true,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"libc\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^0.2.18\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": true,\n-                    \"uses_default_features\": false,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"quickcheck\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^1.0.3\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": false,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                }\n-            ],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"memchr\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/src/lib.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": true,\n-                    \"doctest\": true,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"custom-build\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"build-script-build\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/build.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                }\n-            ],\n-            \"features\": {\n-                \"compiler_builtins\": [\n-                    \"dep:compiler_builtins\"\n-                ],\n-                \"core\": [\n-                    \"dep:core\"\n-                ],\n-                \"default\": [\n-                    \"std\"\n-                ],\n-                \"libc\": [\n-                    \"dep:libc\"\n-                ],\n-                \"rustc-dep-of-std\": [\n-                    \"core\",\n-                    \"compiler_builtins\"\n-                ],\n-                \"std\": [],\n-                \"use_std\": [\n-                    \"std\"\n-                ]\n-            },\n-            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.5.0/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [\n-                \"Andrew Gallant <jamslam@gmail.com>\",\n-                \"bluss\"\n-            ],\n-            \"categories\": [],\n-            \"keywords\": [\n-                \"memchr\",\n-                \"char\",\n-                \"scan\",\n-                \"strchr\",\n-                \"string\"\n-            ],\n-            \"readme\": \"README.md\",\n-            \"repository\": \"https://github.com/BurntSushi/memchr\",\n-            \"homepage\": \"https://github.com/BurntSushi/memchr\",\n-            \"documentation\": \"https://docs.rs/memchr/\",\n-            \"edition\": \"2018\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": null\n-        },\n-        {\n-            \"name\": \"ra-playground\",\n-            \"version\": \"0.1.0\",\n-            \"id\": \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\",\n-            \"license\": null,\n-            \"license_file\": null,\n-            \"description\": null,\n-            \"source\": null,\n-            \"dependencies\": [\n-                {\n-                    \"name\": \"la-arena\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"*\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"ra-playground\",\n-                    \"source\": null,\n-                    \"req\": \"*\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null,\n-                    \"path\": \"$ROOT$ra-playground\"\n-                },\n-                {\n-                    \"name\": \"regex\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"*\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                }\n-            ],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"ra-playground\",\n-                    \"src_path\": \"$ROOT$ra-playground/src/lib.rs\",\n-                    \"edition\": \"2021\",\n-                    \"doc\": true,\n-                    \"doctest\": true,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"bin\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"ra-playground\",\n-                    \"src_path\": \"$ROOT$ra-playground/src/main.rs\",\n-                    \"edition\": \"2021\",\n-                    \"doc\": true,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                }\n-            ],\n-            \"features\": {},\n-            \"manifest_path\": \"$ROOT$ra-playground/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [],\n-            \"categories\": [],\n-            \"keywords\": [],\n-            \"readme\": null,\n-            \"repository\": null,\n-            \"homepage\": null,\n-            \"documentation\": null,\n-            \"edition\": \"2021\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": null\n-        },\n-        {\n-            \"name\": \"regex\",\n-            \"version\": \"1.7.3\",\n-            \"id\": \"regex 1.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-            \"license\": \"MIT OR Apache-2.0\",\n-            \"license_file\": null,\n-            \"description\": \"An implementation of regular expressions for Rust. This implementation uses\\nfinite automata and guarantees linear time matching on all inputs.\\n\",\n-            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-            \"dependencies\": [\n-                {\n-                    \"name\": \"aho-corasick\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^0.7.18\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": true,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"memchr\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^2.4.0\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": true,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"regex-syntax\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^0.6.29\",\n-                    \"kind\": null,\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": false,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"lazy_static\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^1\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": true,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"quickcheck\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^1.0.3\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": false,\n-                    \"features\": [],\n-                    \"target\": null,\n-                    \"registry\": null\n-                },\n-                {\n-                    \"name\": \"rand\",\n-                    \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-                    \"req\": \"^0.8.3\",\n-                    \"kind\": \"dev\",\n-                    \"rename\": null,\n-                    \"optional\": false,\n-                    \"uses_default_features\": false,\n-                    \"features\": [\n-                        \"getrandom\",\n-                        \"small_rng\"\n-                    ],\n-                    \"target\": null,\n-                    \"registry\": null\n-                }\n-            ],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"regex\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/src/lib.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": true,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna-bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna-bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna-cheat\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna-cheat.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna-replace\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna-replace.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna-single-cheat\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna-single-cheat.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna-single\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna-single.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"example\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"shootout-regex-dna\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/examples/shootout-regex-dna.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"default\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_default.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"default-bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_default_bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"nfa\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_nfa.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"nfa-utf8bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_nfa_utf8bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"nfa-bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_nfa_bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"backtrack\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_backtrack.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"backtrack-utf8bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_backtrack_utf8bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"backtrack-bytes\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_backtrack_bytes.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"test\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"crates-regex\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/tests/test_crates_regex.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": true\n-                }\n-            ],\n-            \"features\": {\n-                \"aho-corasick\": [\n-                    \"dep:aho-corasick\"\n-                ],\n-                \"default\": [\n-                    \"std\",\n-                    \"perf\",\n-                    \"unicode\",\n-                    \"regex-syntax/default\"\n-                ],\n-                \"memchr\": [\n-                    \"dep:memchr\"\n-                ],\n-                \"pattern\": [],\n-                \"perf\": [\n-                    \"perf-cache\",\n-                    \"perf-dfa\",\n-                    \"perf-inline\",\n-                    \"perf-literal\"\n-                ],\n-                \"perf-cache\": [],\n-                \"perf-dfa\": [],\n-                \"perf-inline\": [],\n-                \"perf-literal\": [\n-                    \"aho-corasick\",\n-                    \"memchr\"\n-                ],\n-                \"std\": [],\n-                \"unicode\": [\n-                    \"unicode-age\",\n-                    \"unicode-bool\",\n-                    \"unicode-case\",\n-                    \"unicode-gencat\",\n-                    \"unicode-perl\",\n-                    \"unicode-script\",\n-                    \"unicode-segment\",\n-                    \"regex-syntax/unicode\"\n-                ],\n-                \"unicode-age\": [\n-                    \"regex-syntax/unicode-age\"\n-                ],\n-                \"unicode-bool\": [\n-                    \"regex-syntax/unicode-bool\"\n-                ],\n-                \"unicode-case\": [\n-                    \"regex-syntax/unicode-case\"\n-                ],\n-                \"unicode-gencat\": [\n-                    \"regex-syntax/unicode-gencat\"\n-                ],\n-                \"unicode-perl\": [\n-                    \"regex-syntax/unicode-perl\"\n-                ],\n-                \"unicode-script\": [\n-                    \"regex-syntax/unicode-script\"\n-                ],\n-                \"unicode-segment\": [\n-                    \"regex-syntax/unicode-segment\"\n-                ],\n-                \"unstable\": [\n-                    \"pattern\"\n-                ],\n-                \"use_std\": [\n-                    \"std\"\n-                ]\n-            },\n-            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [\n-                \"The Rust Project Developers\"\n-            ],\n-            \"categories\": [\n-                \"text-processing\"\n-            ],\n-            \"keywords\": [],\n-            \"readme\": \"README.md\",\n-            \"repository\": \"https://github.com/rust-lang/regex\",\n-            \"homepage\": \"https://github.com/rust-lang/regex\",\n-            \"documentation\": \"https://docs.rs/regex\",\n-            \"edition\": \"2018\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": null\n-        },\n-        {\n-            \"name\": \"regex-syntax\",\n-            \"version\": \"0.6.29\",\n-            \"id\": \"regex-syntax 0.6.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n-            \"license\": \"MIT OR Apache-2.0\",\n-            \"license_file\": null,\n-            \"description\": \"A regular expression parser.\",\n-            \"source\": \"registry+https://github.com/rust-lang/crates.io-index\",\n-            \"dependencies\": [],\n-            \"targets\": [\n-                {\n-                    \"kind\": [\n-                        \"lib\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"lib\"\n-                    ],\n-                    \"name\": \"regex-syntax\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29/src/lib.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": true,\n-                    \"doctest\": true,\n-                    \"test\": true\n-                },\n-                {\n-                    \"kind\": [\n-                        \"bench\"\n-                    ],\n-                    \"crate_types\": [\n-                        \"bin\"\n-                    ],\n-                    \"name\": \"bench\",\n-                    \"src_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29/benches/bench.rs\",\n-                    \"edition\": \"2018\",\n-                    \"doc\": false,\n-                    \"doctest\": false,\n-                    \"test\": false\n-                }\n-            ],\n-            \"features\": {\n-                \"default\": [\n-                    \"unicode\"\n-                ],\n-                \"unicode\": [\n-                    \"unicode-age\",\n-                    \"unicode-bool\",\n-                    \"unicode-case\",\n-                    \"unicode-gencat\",\n-                    \"unicode-perl\",\n-                    \"unicode-script\",\n-                    \"unicode-segment\"\n-                ],\n-                \"unicode-age\": [],\n-                \"unicode-bool\": [],\n-                \"unicode-case\": [],\n-                \"unicode-gencat\": [],\n-                \"unicode-perl\": [],\n-                \"unicode-script\": [],\n-                \"unicode-segment\": []\n-            },\n-            \"manifest_path\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.6.29/Cargo.toml\",\n-            \"metadata\": null,\n-            \"publish\": null,\n-            \"authors\": [\n-                \"The Rust Project Developers\"\n-            ],\n-            \"categories\": [],\n-            \"keywords\": [],\n-            \"readme\": \"README.md\",\n-            \"repository\": \"https://github.com/rust-lang/regex\",\n-            \"homepage\": \"https://github.com/rust-lang/regex\",\n-            \"documentation\": \"https://docs.rs/regex-syntax\",\n-            \"edition\": \"2018\",\n-            \"links\": null,\n-            \"default_run\": null,\n-            \"rust_version\": null\n-        }\n-    ],\n-    \"workspace_members\": [\n-        \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\"\n-    ],\n-    \"resolve\": {\n-        \"nodes\": [\n-            {\n-                \"id\": \"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                \"dependencies\": [\n-                    \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\"\n-                ],\n-                \"deps\": [\n-                    {\n-                        \"name\": \"memchr\",\n-                        \"pkg\": \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": null,\n-                                \"target\": null\n-                            }\n-                        ]\n-                    }\n-                ],\n-                \"features\": [\n-                    \"default\",\n-                    \"std\"\n-                ]\n-            },\n-            {\n-                \"id\": \"la-arena 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                \"dependencies\": [],\n-                \"deps\": [],\n-                \"features\": []\n-            },\n-            {\n-                \"id\": \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                \"dependencies\": [],\n-                \"deps\": [],\n-                \"features\": [\n-                    \"default\",\n-                    \"std\"\n-                ]\n-            },\n-            {\n-                \"id\": \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\",\n-                \"dependencies\": [\n-                    \"la-arena 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                    \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\",\n-                    \"regex 1.7.3 (registry+https://github.com/rust-lang/crates.io-index)\"\n-                ],\n-                \"deps\": [\n-                    {\n-                        \"name\": \"la_arena\",\n-                        \"pkg\": \"la-arena 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": null,\n-                                \"target\": null\n-                            }\n-                        ]\n-                    },\n-                    {\n-                        \"name\": \"ra_playground\",\n-                        \"pkg\": \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": \"dev\",\n-                                \"target\": null\n-                            }\n-                        ]\n-                    },\n-                    {\n-                        \"name\": \"regex\",\n-                        \"pkg\": \"regex 1.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": \"dev\",\n-                                \"target\": null\n-                            }\n-                        ]\n-                    }\n-                ],\n-                \"features\": []\n-            },\n-            {\n-                \"id\": \"regex 1.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                \"dependencies\": [\n-                    \"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                    \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                    \"regex-syntax 0.6.29 (registry+https://github.com/rust-lang/crates.io-index)\"\n-                ],\n-                \"deps\": [\n-                    {\n-                        \"name\": \"aho_corasick\",\n-                        \"pkg\": \"aho-corasick 0.7.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": null,\n-                                \"target\": null\n-                            }\n-                        ]\n-                    },\n-                    {\n-                        \"name\": \"memchr\",\n-                        \"pkg\": \"memchr 2.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": null,\n-                                \"target\": null\n-                            }\n-                        ]\n-                    },\n-                    {\n-                        \"name\": \"regex_syntax\",\n-                        \"pkg\": \"regex-syntax 0.6.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                        \"dep_kinds\": [\n-                            {\n-                                \"kind\": null,\n-                                \"target\": null\n-                            }\n-                        ]\n-                    }\n-                ],\n-                \"features\": [\n-                    \"aho-corasick\",\n-                    \"default\",\n-                    \"memchr\",\n-                    \"perf\",\n-                    \"perf-cache\",\n-                    \"perf-dfa\",\n-                    \"perf-inline\",\n-                    \"perf-literal\",\n-                    \"std\",\n-                    \"unicode\",\n-                    \"unicode-age\",\n-                    \"unicode-bool\",\n-                    \"unicode-case\",\n-                    \"unicode-gencat\",\n-                    \"unicode-perl\",\n-                    \"unicode-script\",\n-                    \"unicode-segment\"\n-                ]\n-            },\n-            {\n-                \"id\": \"regex-syntax 0.6.29 (registry+https://github.com/rust-lang/crates.io-index)\",\n-                \"dependencies\": [],\n-                \"deps\": [],\n-                \"features\": [\n-                    \"default\",\n-                    \"unicode\",\n-                    \"unicode-age\",\n-                    \"unicode-bool\",\n-                    \"unicode-case\",\n-                    \"unicode-gencat\",\n-                    \"unicode-perl\",\n-                    \"unicode-script\",\n-                    \"unicode-segment\"\n-                ]\n-            }\n-        ],\n-        \"root\": \"ra-playground 0.1.0 (path+file:///$ROOT$ra-playground)\"\n-    },\n-    \"target_directory\": \"$ROOT$ra-playground/target\",\n-    \"version\": 1,\n-    \"workspace_root\": \"$ROOT$ra-playground\",\n-    \"metadata\": null\n-}"}]}