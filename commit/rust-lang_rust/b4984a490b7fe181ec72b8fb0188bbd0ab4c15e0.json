{"sha": "b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTg0YTQ5MGI3ZmUxODFlYzcyYjhmYjAxODhiYmQwYWI0YzE1ZTA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:45:00Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-07-07T16:45:00Z"}, "message": "collections: merge unsafe_push_all_clone and push_all", "tree": {"sha": "39e7e50b889cee6529dc45fb113680b3790353ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39e7e50b889cee6529dc45fb113680b3790353ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0", "html_url": "https://github.com/rust-lang/rust/commit/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d107c397acbc7b0d9677c36882616308346ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d107c397acbc7b0d9677c36882616308346ed9", "html_url": "https://github.com/rust-lang/rust/commit/e2d107c397acbc7b0d9677c36882616308346ed9"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "03d06253a5ec72f2035fd72744a2b1651dd4d798", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b4984a490b7fe181ec72b8fb0188bbd0ab4c15e0", "patch": "@@ -197,14 +197,8 @@ impl<T: Clone> Vec<T> {\n     /// ```\n     #[inline]\n     pub fn from_slice(values: &[T]) -> Vec<T> {\n-        let mut vector = Vec::with_capacity(values.len());\n-\n-        // Directly call `unsafe_push_all_clone` so we can skip a call to\n-        // `reserve_addtional`.\n-        unsafe {\n-            unsafe_push_all_clone(&mut vector, values);\n-        }\n-\n+        let mut vector = Vec::new();\n+        vector.push_all(values);\n         vector\n     }\n \n@@ -248,8 +242,18 @@ impl<T: Clone> Vec<T> {\n     pub fn push_all(&mut self, other: &[T]) {\n         self.reserve_additional(other.len());\n \n-        unsafe {\n-            unsafe_push_all_clone(self, other)\n+        for i in range(0, other.len()) {\n+            let len = self.len();\n+\n+            // Unsafe code so this can be optimised to a memcpy (or something similarly\n+            // fast) when T is Copy. LLVM is easily confused, so any extra operations\n+            // during the loop can prevent this optimisation.\n+            unsafe {\n+                ptr::write(\n+                    self.as_mut_slice().unsafe_mut_ref(len),\n+                    other.unsafe_ref(i).clone());\n+                self.set_len(len + 1);\n+            }\n         }\n     }\n \n@@ -1550,25 +1554,6 @@ pub mod raw {\n     }\n }\n \n-// Unsafe code so this can be optimised to a memcpy (or something similarly\n-// fast) when T is Copy. LLVM is easily confused, so any extra operations\n-// during the loop can prevent this optimisation.\n-//\n-// WARNING: You must preallocate space on the vector before you call this\n-// method.\n-#[inline(always)]\n-unsafe fn unsafe_push_all_clone<T: Clone>(dst: &mut Vec<T>, src: &[T]) {\n-    let mut dst_len = dst.len();\n-\n-    for i in range(0, src.len()) {\n-        ptr::write(\n-            dst.as_mut_slice().unsafe_mut_ref(dst_len),\n-            src.unsafe_ref(i).clone());\n-        dst_len += 1;\n-        dst.set_len(dst_len);\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     extern crate test;"}]}