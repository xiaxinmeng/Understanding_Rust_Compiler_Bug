{"sha": "bbd581c583a7168359bf94beaa111d6ad3316837", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZDU4MWM1ODNhNzE2ODM1OWJmOTRiZWFhMTExZDZhZDMzMTY4Mzc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-19T17:19:21Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "fix elaborate for predicates with unbound variables", "tree": {"sha": "778a7fe7ae10a4814f49e7113703d30ec027a8f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/778a7fe7ae10a4814f49e7113703d30ec027a8f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbd581c583a7168359bf94beaa111d6ad3316837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd581c583a7168359bf94beaa111d6ad3316837", "html_url": "https://github.com/rust-lang/rust/commit/bbd581c583a7168359bf94beaa111d6ad3316837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbd581c583a7168359bf94beaa111d6ad3316837/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4c99ad88169689ce560ad05eedf60de1d5e9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4c99ad88169689ce560ad05eedf60de1d5e9c4", "html_url": "https://github.com/rust-lang/rust/commit/8d4c99ad88169689ce560ad05eedf60de1d5e9c4"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "6aeb225a6e9cbf7a789274bf6d495b6367dac3dc", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbd581c583a7168359bf94beaa111d6ad3316837/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd581c583a7168359bf94beaa111d6ad3316837/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=bbd581c583a7168359bf94beaa111d6ad3316837", "patch": "@@ -151,15 +151,11 @@ impl Elaborator<'tcx> {\n \n     fn elaborate(&mut self, obligation: &PredicateObligation<'tcx>) {\n         let tcx = self.visited.tcx;\n-        let pred = match obligation.predicate.kind() {\n-            // We have to be careful and rebind this when\n-            // dealing with a predicate further down.\n-            ty::PredicateKind::ForAll(binder) => binder.skip_binder().kind(),\n-            pred => pred,\n-        };\n-\n-        match pred {\n-            ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", pred),\n+\n+        match obligation.predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n+            ty::PredicateKind::ForAll(_) => {\n+                bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n+            }\n             ty::PredicateKind::Trait(data, _) => {\n                 // Get predicates declared on the trait.\n                 let predicates = tcx.super_predicates_of(data.def_id());"}, {"sha": "74a4939ae10d5cf4c9d45d2fde20257be82ccf16", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbd581c583a7168359bf94beaa111d6ad3316837/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbd581c583a7168359bf94beaa111d6ad3316837/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=bbd581c583a7168359bf94beaa111d6ad3316837", "patch": "@@ -763,7 +763,7 @@ impl AutoTraitFinder<'tcx> {\n                             }\n                         }\n                         Ok(None) => {\n-                            // It's ok not to make progress when hvave no inference variables -\n+                            // It's ok not to make progress when have no inference variables -\n                             // in that case, we were only performing unifcation to check if an\n                             // error occurred (which would indicate that it's impossible for our\n                             // type to implement the auto trait)."}]}