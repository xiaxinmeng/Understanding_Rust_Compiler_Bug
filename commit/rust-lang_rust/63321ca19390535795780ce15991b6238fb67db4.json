{"sha": "63321ca19390535795780ce15991b6238fb67db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMzIxY2ExOTM5MDUzNTc5NTc4MGNlMTU5OTFiNjIzOGZiNjdkYjQ=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-30T01:46:02Z"}, "committer": {"name": "James Miller", "email": "james@aatch.net", "date": "2016-03-31T02:13:24Z"}, "message": "Turn break critical edges into a MIR pass\n\nAlso adds a new set of passes to run just before translation that\n\"prepare\" the MIR for codegen. Removal of landing pads, region erasure\nand break critical edges are run in this pass.\n\nAlso fixes some merge/rebase errors.", "tree": {"sha": "b1609ad02bbd1eaa362d187eb48842622d018439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1609ad02bbd1eaa362d187eb48842622d018439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63321ca19390535795780ce15991b6238fb67db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63321ca19390535795780ce15991b6238fb67db4", "html_url": "https://github.com/rust-lang/rust/commit/63321ca19390535795780ce15991b6238fb67db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63321ca19390535795780ce15991b6238fb67db4/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6935782b07c1caf2cc78c44faf28cc4cf0658fe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6935782b07c1caf2cc78c44faf28cc4cf0658fe8", "html_url": "https://github.com/rust-lang/rust/commit/6935782b07c1caf2cc78c44faf28cc4cf0658fe8"}], "stats": {"total": 59, "additions": 36, "deletions": 23}, "files": [{"sha": "fbb185303e06dcd24e60a220f520b0f22eef30f9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=63321ca19390535795780ce15991b6238fb67db4", "patch": "@@ -876,10 +876,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n             passes.push_pass(box mir::transform::type_check::TypeckMir);\n             passes.push_pass(box mir::transform::simplify_cfg::SimplifyCfg);\n-            // Late passes\n-            passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n             passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n-            passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n             // And run everything.\n             passes.run_passes(tcx, &mut mir_map);\n         });\n@@ -933,22 +930,24 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// Run the translation phase to LLVM, after which the AST and analysis can\n pub fn phase_4_translate_to_llvm<'tcx>(tcx: &TyCtxt<'tcx>,\n                                        mut mir_map: MirMap<'tcx>,\n-                                       analysis: ty::CrateAnalysis)\n-                                       -> trans::CrateTranslation {\n+                                       analysis: ty::CrateAnalysis) -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n     time(time_passes,\n          \"resolving dependency formats\",\n          || dependency_format::calculate(&tcx.sess));\n \n-    time(time_passes,\n-         \"erasing regions from MIR\",\n-         || mir::transform::erase_regions::erase_regions(tcx, &mut mir_map));\n-\n-    time(time_passes, \"breaking critical edges\",\n-         || mir::transform::break_critical_edges::break_critical_edges(&mut mir_map));\n+    // Run the passes that transform the MIR into a more suitable for translation\n+    // to LLVM code.\n+    time(time_passes, \"Prepare MIR codegen passes\", || {\n+        let mut passes = ::rustc::mir::transform::Passes::new();\n+        passes.push_pass(box mir::transform::no_landing_pads::NoLandingPads);\n+        passes.push_pass(box mir::transform::remove_dead_blocks::RemoveDeadBlocks);\n+        passes.push_pass(box mir::transform::erase_regions::EraseRegions);\n+        passes.push_pass(box mir::transform::break_critical_edges::BreakCriticalEdges);\n+        passes.run_passes(tcx, &mut mir_map);\n+    });\n \n-    // Option dance to work around the lack of stack once closures.\n     time(time_passes,\n          \"translation\",\n          move || trans::trans_crate(tcx, &mir_map, analysis))"}, {"sha": "e78c8e8fd73559ff73a8cbe2ce2faec00a567451", "filename": "src/librustc_mir/transform/break_critical_edges.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fbreak_critical_edges.rs?ref=63321ca19390535795780ce15991b6238fb67db4", "patch": "@@ -7,11 +7,16 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+use rustc::ty::TyCtxt;\n use rustc::mir::repr::*;\n-use rustc::mir::mir_map::MirMap;\n+use rustc::mir::transform::{MirPass, Pass};\n+use syntax::ast::NodeId;\n \n use traversal;\n \n+pub struct BreakCriticalEdges;\n+\n /**\n  * Breaks critical edges in the MIR.\n  *\n@@ -34,13 +39,16 @@ use traversal;\n  * NOTE: Simplify CFG will happily undo most of the work this pass does.\n  *\n  */\n-pub fn break_critical_edges<'tcx>(mir_map: &mut MirMap<'tcx>) {\n-    for (_, mir) in &mut mir_map.map {\n-        break_critical_edges_fn(mir);\n+\n+impl<'tcx> MirPass<'tcx> for BreakCriticalEdges {\n+    fn run_pass(&mut self, _: &TyCtxt<'tcx>, _: NodeId, mir: &mut Mir<'tcx>) {\n+        break_critical_edges(mir);\n     }\n }\n \n-fn break_critical_edges_fn(mir: &mut Mir) {\n+impl Pass for BreakCriticalEdges {}\n+\n+fn break_critical_edges(mir: &mut Mir) {\n     let mut pred_count = vec![0u32; mir.basic_blocks.len()];\n \n     // Build the precedecessor map for the MIR\n@@ -63,13 +71,19 @@ fn break_critical_edges_fn(mir: &mut Mir) {\n \n         if let Some(ref mut term) = data.terminator {\n             let is_invoke = term_is_invoke(term);\n+            let term_span = term.span;\n+            let term_scope = term.scope;\n             let succs = term.successors_mut();\n             if succs.len() > 1 || (succs.len() > 0 && is_invoke) {\n                 for tgt in succs {\n                     let num_preds = pred_count[tgt.index()];\n                     if num_preds > 1 {\n                         // It's a critical edge, break it\n-                        let goto = Terminator::Goto { target: *tgt };\n+                        let goto = Terminator {\n+                            span: term_span,\n+                            scope: term_scope,\n+                            kind: TerminatorKind::Goto { target: *tgt }\n+                        };\n                         let data = BasicBlockData::new(Some(goto));\n                         // Get the index it will be when inserted into the MIR\n                         let idx = cur_len + new_blocks.len();\n@@ -88,9 +102,9 @@ fn break_critical_edges_fn(mir: &mut Mir) {\n \n // Returns true if the terminator would use an invoke in LLVM.\n fn term_is_invoke(term: &Terminator) -> bool {\n-    match *term {\n-        Terminator::Call { cleanup: Some(_), .. } |\n-        Terminator::Drop { unwind: Some(_), .. } => true,\n+    match term.kind {\n+        TerminatorKind::Call { cleanup: Some(_), .. } |\n+        TerminatorKind::Drop { unwind: Some(_), .. } => true,\n         _ => false\n     }\n }"}, {"sha": "8b6821136f511962dc796ddfd98ecd28d8b57a07", "filename": "src/librustc_mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_mir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_mir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftraversal.rs?ref=63321ca19390535795780ce15991b6238fb67db4", "patch": "@@ -163,7 +163,7 @@ impl<'a, 'tcx> Postorder<'a, 'tcx> {\n         // Now that the top of the stack has no successors we can traverse, each item will\n         // be popped off during iteration until we get back to `A`. This yeilds [E, D, B].\n         //\n-        // When we yeild `B` and call `traverse_successor`, We push `C` to the stack, but\n+        // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but\n         // since we've already visited `E`, that child isn't added to the stack. The last\n         // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]\n         loop {"}, {"sha": "91577fc654a4665442decbaf149fcdebb8c1a6ce", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63321ca19390535795780ce15991b6238fb67db4/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=63321ca19390535795780ce15991b6238fb67db4", "patch": "@@ -19,7 +19,7 @@ use common::{self, Block, BlockAndBuilder, FunctionContext};\n use std::ops::Deref;\n use std::rc::Rc;\n \n-use trans::basic_block::BasicBlock;\n+use basic_block::BasicBlock;\n \n use rustc_data_structures::bitvec::BitVector;\n "}]}