{"sha": "3c6e1936bc410e69f8e5a4a3a40ae83330a381bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmUxOTM2YmM0MTBlNjlmOGU1YTRhM2E0MGFlODMzMzBhMzgxYmM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-15T22:39:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-15T22:39:17Z"}, "message": "Rollup merge of #70354 - XAMPPRocky:master, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.43.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/master/RELEASES.md)\n\nr? @Mark-Simulacrum\n\ncc @rust-lang/release", "tree": {"sha": "3713c45c319a3b9a0c178a8d175bf2174d9bf008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3713c45c319a3b9a0c178a8d175bf2174d9bf008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJel40VCRBK7hj4Ov3rIwAAdHIIAASd2KEpHkFCT/tVBdMZ5B7n\nllSH+5LSJ58aUkIG0wyazz9wu+Z60vQ/ZqkJctEfIchFiXYcYOO6yqMSb5MfDhZP\nuNrdLUwfae/L/cfCl0lmpit1y/sDmioXgoBd0TxPDADQvUipHb1ZZkqVvOv3obYP\n5c8yhlxJp2GoKk/TtotocRBwXagpbMmtOV3PWcWtQyNcCrNo4yHEXeWb/gDbbHTi\nKhWNE556SGlkSDBmHpziFUzgmzCaZ7BjYFkujYuUh4vrhtc+hwAjfGX2MFRGey4C\n+QkzHLCKe0h0d6q9yhyzVwFypV+2ZqjCNXh1tLSvEdconq7O7QKdNM7zYFkfwhQ=\n=HKFB\n-----END PGP SIGNATURE-----\n", "payload": "tree 3713c45c319a3b9a0c178a8d175bf2174d9bf008\nparent 03707b56717ab6b105cba5627985689c5a3debe5\nparent dda3445fd51ead62353243928c4376f404b3c182\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586990357 +0200\ncommitter GitHub <noreply@github.com> 1586990357 +0200\n\nRollup merge of #70354 - XAMPPRocky:master, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.43.0\n\n### [Rendered](https://github.com/XAMPPRocky/rust/blob/master/RELEASES.md)\n\nr? @Mark-Simulacrum\n\ncc @rust-lang/release\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc", "html_url": "https://github.com/rust-lang/rust/commit/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03707b56717ab6b105cba5627985689c5a3debe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03707b56717ab6b105cba5627985689c5a3debe5", "html_url": "https://github.com/rust-lang/rust/commit/03707b56717ab6b105cba5627985689c5a3debe5"}, {"sha": "dda3445fd51ead62353243928c4376f404b3c182", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda3445fd51ead62353243928c4376f404b3c182", "html_url": "https://github.com/rust-lang/rust/commit/dda3445fd51ead62353243928c4376f404b3c182"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "36597b1864f25097a54881389f3a1f8fc0db77cc", "filename": "RELEASES.md", "status": "modified", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/3c6e1936bc410e69f8e5a4a3a40ae83330a381bc/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=3c6e1936bc410e69f8e5a4a3a40ae83330a381bc", "patch": "@@ -1,3 +1,152 @@\n+Version 1.43.0 (2020-04-23)\n+==========================\n+\n+Language\n+--------\n+- [Fixed using binary operations with `&{number}` (e.g. `&1.0`) not having\n+  the type inferred correctly.][68129]\n+- [Attributes such as `#[cfg()]` can now be used on `if` expressions.][69201]\n+\n+**Syntax only changes**\n+- [Allow `type Foo: Ord` syntactically.][69361]\n+- [Fuse associated and extern items up to defaultness.][69194]\n+- [Syntactically allow `self` in all `fn` contexts.][68764]\n+- [Merge `fn` syntax + cleanup item parsing.][68728]\n+- [`item` macro fragments can be interpolated into `trait`s, `impl`s, and `extern` blocks.][69366]\n+  For example, you may now write:\n+  ```rust \n+  macro_rules! mac_trait {\n+      ($i:item) => {\n+          trait T { $i }\n+      }\n+  }\n+  mac_trait! {\n+      fn foo() {}\n+  }\n+  ```\n+\n+These are still rejected *semantically*, so you will likely receive an error but\n+these changes can be seen and parsed by macros and\n+conditional compilation.\n+\n+\n+Compiler\n+--------\n+- [You can now pass multiple lint flags to rustc to override the previous\n+  flags.][67885] For example; `rustc -D unused -A unused-variables` denies\n+  everything in the `unused` lint group except `unused-variables` which\n+  is explicitly allowed. However, passing `rustc -A unused-variables -D unused` denies\n+  everything in the `unused` lint group **including** `unused-variables` since\n+  the allow flag is specified before the deny flag (and therefore overridden).\n+- [rustc will now prefer your system MinGW libraries over its bundled libraries\n+  if they are available on `windows-gnu`.][67429]\n+- [rustc now buffers errors/warnings printed in JSON.][69227]\n+\n+Libraries\n+---------\n+- [`Arc<[T; N]>`, `Box<[T; N]>`, and `Rc<[T; N]>`, now implement\n+  `TryFrom<Arc<[T]>>`,`TryFrom<Box<[T]>>`, and `TryFrom<Rc<[T]>>`\n+  respectively.][69538] **Note** These conversions are only available when `N`\n+  is `0..=32`.\n+- [You can now use associated constants on floats and integers directly, rather\n+  than having to import the module.][68952] e.g. You can now write `u32::MAX` or\n+  `f32::NAN` with no imports.\n+- [`u8::is_ascii` is now `const`.][68984]\n+- [`String` now implements `AsMut<str>`.][68742]\n+- [Added the `primitive` module to `std` and `core`.][67637] This module\n+  reexports Rust's primitive types. This is mainly useful in macros\n+  where you want avoid these types being shadowed.\n+- [Relaxed some of the trait bounds on `HashMap` and `HashSet`.][67642]\n+- [`string::FromUtf8Error` now implements `Clone + Eq`.][68738]\n+\n+Stabilized APIs\n+---------------\n+- [`Once::is_completed`]\n+- [`f32::LOG10_2`]\n+- [`f32::LOG2_10`]\n+- [`f64::LOG10_2`]\n+- [`f64::LOG2_10`]\n+- [`iter::once_with`]\n+\n+Cargo\n+-----\n+- [You can now set config `[profile]`s in your `.cargo/config`, or through\n+  your environment.][cargo/7823]\n+- [Cargo will now set `CARGO_BIN_EXE_<name>` pointing to a binary's\n+  executable path when running integration tests or benchmarks.][cargo/7697]\n+  `<name>` is the name of your binary as-is e.g. If you wanted the executable\n+  path for a binary named `my-program`you would use `env!(\"CARGO_BIN_EXE_my-program\")`.\n+\n+Misc\n+----\n+- [Certain checks in the `const_err` lint were deemed unrelated to const\n+  evaluation][69185], and have been moved to the `unconditional_panic` and\n+  `arithmetic_overflow` lints.\n+  \n+Compatibility Notes\n+-------------------\n+\n+- [Having trailing syntax in the `assert!` macro is now a hard error.][69548] This\n+  has been a warning since 1.36.0.\n+- [Fixed `Self` not having the correctly inferred type.][69340] This incorrectly\n+  led to some instances being accepted, and now correctly emits a hard error.\n+\n+[69340]: https://github.com/rust-lang/rust/pull/69340\n+\n+Internal Only\n+-------------\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of `rustc` and\n+related tools.\n+\n+- [All components are now built with `opt-level=3` instead of `2`.][67878]\n+- [Improved how rustc generates drop code.][67332]\n+- [Improved performance from `#[inline]`-ing certain hot functions.][69256]\n+- [traits: preallocate 2 Vecs of known initial size][69022]\n+- [Avoid exponential behaviour when relating types][68772]\n+- [Skip `Drop` terminators for enum variants without drop glue][68943]\n+- [Improve performance of coherence checks][68966]\n+- [Deduplicate types in the generator witness][68672]\n+- [Invert control in struct_lint_level.][68725]\n+\n+[67332]: https://github.com/rust-lang/rust/pull/67332/\n+[67429]: https://github.com/rust-lang/rust/pull/67429/\n+[67637]: https://github.com/rust-lang/rust/pull/67637/\n+[67642]: https://github.com/rust-lang/rust/pull/67642/\n+[67878]: https://github.com/rust-lang/rust/pull/67878/\n+[67885]: https://github.com/rust-lang/rust/pull/67885/\n+[68129]: https://github.com/rust-lang/rust/pull/68129/\n+[68672]: https://github.com/rust-lang/rust/pull/68672/\n+[68725]: https://github.com/rust-lang/rust/pull/68725/\n+[68728]: https://github.com/rust-lang/rust/pull/68728/\n+[68738]: https://github.com/rust-lang/rust/pull/68738/\n+[68742]: https://github.com/rust-lang/rust/pull/68742/\n+[68764]: https://github.com/rust-lang/rust/pull/68764/\n+[68772]: https://github.com/rust-lang/rust/pull/68772/\n+[68943]: https://github.com/rust-lang/rust/pull/68943/\n+[68952]: https://github.com/rust-lang/rust/pull/68952/\n+[68966]: https://github.com/rust-lang/rust/pull/68966/\n+[68984]: https://github.com/rust-lang/rust/pull/68984/\n+[69022]: https://github.com/rust-lang/rust/pull/69022/\n+[69185]: https://github.com/rust-lang/rust/pull/69185/\n+[69194]: https://github.com/rust-lang/rust/pull/69194/\n+[69201]: https://github.com/rust-lang/rust/pull/69201/\n+[69227]: https://github.com/rust-lang/rust/pull/69227/\n+[69548]: https://github.com/rust-lang/rust/pull/69548/\n+[69256]: https://github.com/rust-lang/rust/pull/69256/\n+[69361]: https://github.com/rust-lang/rust/pull/69361/\n+[69366]: https://github.com/rust-lang/rust/pull/69366/\n+[69538]: https://github.com/rust-lang/rust/pull/69538/\n+[cargo/7823]: https://github.com/rust-lang/cargo/pull/7823\n+[cargo/7697]: https://github.com/rust-lang/cargo/pull/7697\n+[`Once::is_completed`]: https://doc.rust-lang.org/std/sync/struct.Once.html#method.is_completed\n+[`f32::LOG10_2`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG10_2.html\n+[`f32::LOG2_10`]: https://doc.rust-lang.org/std/f32/consts/constant.LOG2_10.html\n+[`f64::LOG10_2`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG10_2.html\n+[`f64::LOG2_10`]: https://doc.rust-lang.org/std/f64/consts/constant.LOG2_10.html\n+[`iter::once_with`]: https://doc.rust-lang.org/std/iter/fn.once_with.html\n+\n+\n Version 1.42.0 (2020-03-12)\n ==========================\n "}]}