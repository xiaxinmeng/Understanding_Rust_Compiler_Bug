{"sha": "8bce2404a86fa7f11284a81bc1e7c28e06e6b90e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiY2UyNDA0YTg2ZmE3ZjExMjg0YTgxYmMxZTdjMjhlMDZlNmI5MGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T18:21:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T18:21:15Z"}, "message": "Rollup merge of #72398 - Lucretiel:ip-socket-display, r=Mark-Simulacrum\n\nSocketAddr and friends now correctly pad its content\n\nCurrently, `IpAddr` and friends correctly respect formatting parameters when printing via `Display`. This PR makes SocketAddr and friends do the same thing.", "tree": {"sha": "ac93c46e4c51ab21be0d6440202de3a7ff5c9769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac93c46e4c51ab21be0d6440202de3a7ff5c9769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0VKbCRBK7hj4Ov3rIwAAdHIIABlMsxqB1FNj5ChOai5ISlRU\nxZXwMBKz3hGN9hJ4hUI+OrByQASR+CKnI0zcyJySJupPrhpVP2UbDrfx3PRBqL+l\nQluoTmi/f5IvOm2IzeE6ld00Ft4UoN/lpVpxhfkzfia5gkLnPYkxUrJNa94XjVWy\nps1GqMR1X8MN58/EXjvUbc2OKIV1IlAcyDCJ2mFQh6d8XnMAZCbF+mbaFluq9i7C\nRHhbEijzeIA+5SYFKl+1ioSwqIBRz6FOZyzwDR4QDdSopKy6q3bUZ7pIhTutmVBQ\n3x6lUto2Ko7A/w96vAumEfLGFlzNsc4vS76igHvjx29YaiL7/iGaBiD96mm8Ge0=\n=LGqd\n-----END PGP SIGNATURE-----\n", "payload": "tree ac93c46e4c51ab21be0d6440202de3a7ff5c9769\nparent 9c1f2035a973aaa7202647ec323e21011a47aae5\nparent 06a97a027a21f6fe67f91b0630291fbb62d2de83\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590776475 +0200\ncommitter GitHub <noreply@github.com> 1590776475 +0200\n\nRollup merge of #72398 - Lucretiel:ip-socket-display, r=Mark-Simulacrum\n\nSocketAddr and friends now correctly pad its content\n\nCurrently, `IpAddr` and friends correctly respect formatting parameters when printing via `Display`. This PR makes SocketAddr and friends do the same thing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e", "html_url": "https://github.com/rust-lang/rust/commit/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c1f2035a973aaa7202647ec323e21011a47aae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1f2035a973aaa7202647ec323e21011a47aae5", "html_url": "https://github.com/rust-lang/rust/commit/9c1f2035a973aaa7202647ec323e21011a47aae5"}, {"sha": "06a97a027a21f6fe67f91b0630291fbb62d2de83", "url": "https://api.github.com/repos/rust-lang/rust/commits/06a97a027a21f6fe67f91b0630291fbb62d2de83", "html_url": "https://github.com/rust-lang/rust/commit/06a97a027a21f6fe67f91b0630291fbb62d2de83"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "b780340884e1f83d735a8907887acc86e3774111", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bce2404a86fa7f11284a81bc1e7c28e06e6b90e/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=8bce2404a86fa7f11284a81bc1e7c28e06e6b90e", "patch": "@@ -2,7 +2,7 @@ use crate::cmp::Ordering;\n use crate::convert::TryInto;\n use crate::fmt;\n use crate::hash;\n-use crate::io;\n+use crate::io::{self, Write};\n use crate::iter;\n use crate::mem;\n use crate::net::{htons, ntohs, IpAddr, Ipv4Addr, Ipv6Addr};\n@@ -600,7 +600,26 @@ impl fmt::Display for SocketAddr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV4 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}:{}\", self.ip(), self.port())\n+        // Fast path: if there's no alignment stuff, write to the output buffer\n+        // directly\n+        if f.precision().is_none() && f.width().is_none() {\n+            write!(f, \"{}:{}\", self.ip(), self.port())\n+        } else {\n+            const IPV4_SOCKET_BUF_LEN: usize = (3 * 4)  // the segments\n+                + 3  // the separators\n+                + 1 + 5; // the port\n+            let mut buf = [0; IPV4_SOCKET_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n+\n+            // Unwrap is fine because writing to a sufficiently-sized\n+            // buffer is infallible\n+            write!(buf_slice, \"{}:{}\", self.ip(), self.port()).unwrap();\n+            let len = IPV4_SOCKET_BUF_LEN - buf_slice.len();\n+\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            f.pad(buf)\n+        }\n     }\n }\n \n@@ -614,7 +633,28 @@ impl fmt::Debug for SocketAddrV4 {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddrV6 {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"[{}]:{}\", self.ip(), self.port())\n+        // Fast path: if there's no alignment stuff, write to the output\n+        // buffer directly\n+        if f.precision().is_none() && f.width().is_none() {\n+            write!(f, \"[{}]:{}\", self.ip(), self.port())\n+        } else {\n+            const IPV6_SOCKET_BUF_LEN: usize = (4 * 8)  // The address\n+            + 7  // The colon separators\n+            + 2  // The brackets\n+            + 1 + 5; // The port\n+\n+            let mut buf = [0; IPV6_SOCKET_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n+\n+            // Unwrap is fine because writing to a sufficiently-sized\n+            // buffer is infallible\n+            write!(buf_slice, \"[{}]:{}\", self.ip(), self.port()).unwrap();\n+            let len = IPV6_SOCKET_BUF_LEN - buf_slice.len();\n+\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            f.pad(buf)\n+        }\n     }\n }\n \n@@ -1168,6 +1208,28 @@ mod tests {\n         assert!(v6.is_ipv6());\n     }\n \n+    #[test]\n+    fn socket_v4_to_str() {\n+        let socket = SocketAddrV4::new(Ipv4Addr::new(192, 168, 0, 1), 8080);\n+\n+        assert_eq!(format!(\"{}\", socket), \"192.168.0.1:8080\");\n+        assert_eq!(format!(\"{:<20}\", socket), \"192.168.0.1:8080    \");\n+        assert_eq!(format!(\"{:>20}\", socket), \"    192.168.0.1:8080\");\n+        assert_eq!(format!(\"{:^20}\", socket), \"  192.168.0.1:8080  \");\n+        assert_eq!(format!(\"{:.10}\", socket), \"192.168.0.\");\n+    }\n+\n+    #[test]\n+    fn socket_v6_to_str() {\n+        let socket: SocketAddrV6 = \"[2a02:6b8:0:1::1]:53\".parse().unwrap();\n+\n+        assert_eq!(format!(\"{}\", socket), \"[2a02:6b8:0:1::1]:53\");\n+        assert_eq!(format!(\"{:<24}\", socket), \"[2a02:6b8:0:1::1]:53    \");\n+        assert_eq!(format!(\"{:>24}\", socket), \"    [2a02:6b8:0:1::1]:53\");\n+        assert_eq!(format!(\"{:^24}\", socket), \"  [2a02:6b8:0:1::1]:53  \");\n+        assert_eq!(format!(\"{:.15}\", socket), \"[2a02:6b8:0:1::\");\n+    }\n+\n     #[test]\n     fn compare() {\n         let v4_1 = \"224.120.45.1:23456\".parse::<SocketAddrV4>().unwrap();"}]}