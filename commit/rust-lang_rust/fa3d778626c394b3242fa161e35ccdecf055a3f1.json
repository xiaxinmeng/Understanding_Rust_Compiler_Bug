{"sha": "fa3d778626c394b3242fa161e35ccdecf055a3f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhM2Q3Nzg2MjZjMzk0YjMyNDJmYTE2MWUzNWNjZGVjZjA1NWEzZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T08:14:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-29T08:14:30Z"}, "message": "Auto merge of #23787 - steveklabnik:gh23760, r=alexcrichton\n\nThis was originally used to set up the guessing game, but that no longer\r\nexists. This version uses `old_io`, and updating it involves talking\r\nabout `&mut` and such, which we haven't covered yet. So, for now, let's\r\njust remove it.\r\n\r\nFixes #23760", "tree": {"sha": "e913b5b44711131a6d123f9087fa43ff52f7e115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e913b5b44711131a6d123f9087fa43ff52f7e115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa3d778626c394b3242fa161e35ccdecf055a3f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d778626c394b3242fa161e35ccdecf055a3f1", "html_url": "https://github.com/rust-lang/rust/commit/fa3d778626c394b3242fa161e35ccdecf055a3f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa3d778626c394b3242fa161e35ccdecf055a3f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "227b46bdede794d5c8476b810bb1c30926bd9c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/227b46bdede794d5c8476b810bb1c30926bd9c04", "html_url": "https://github.com/rust-lang/rust/commit/227b46bdede794d5c8476b810bb1c30926bd9c04"}, {"sha": "9fb54f87cca9fa89b64c7720d8c9ac10f0905b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb54f87cca9fa89b64c7720d8c9ac10f0905b7f", "html_url": "https://github.com/rust-lang/rust/commit/9fb54f87cca9fa89b64c7720d8c9ac10f0905b7f"}], "stats": {"total": 167, "additions": 0, "deletions": 167}, "files": [{"sha": "d31348d667b57e56e996ca86e2e64e4505f8fdde", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa3d778626c394b3242fa161e35ccdecf055a3f1/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/fa3d778626c394b3242fa161e35ccdecf055a3f1/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=fa3d778626c394b3242fa161e35ccdecf055a3f1", "patch": "@@ -13,7 +13,6 @@\n     * [Looping](looping.md)\n     * [Strings](strings.md)\n     * [Arrays, Vectors, and Slices](arrays-vectors-and-slices.md)\n-    * [Standard Input](standard-input.md)\n * [Intermediate Rust](intermediate.md)\n     * [Crates and Modules](crates-and-modules.md)\n     * [Testing](testing.md)"}, {"sha": "38af0c94954ca9ba4ee7302ff73235058aaaf31d", "filename": "src/doc/trpl/standard-input.md", "status": "removed", "additions": 0, "deletions": 166, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/227b46bdede794d5c8476b810bb1c30926bd9c04/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=227b46bdede794d5c8476b810bb1c30926bd9c04", "patch": "@@ -1,166 +0,0 @@\n-% Standard Input\n-\n-Getting input from the keyboard is pretty easy, but uses some things\n-we haven't seen before. Here's a simple program that reads some input,\n-and then prints it back out:\n-\n-```{rust,ignore}\n-# #![feature(old_io)]\n-fn main() {\n-    println!(\"Type something!\");\n-\n-    let input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n-\n-    println!(\"{}\", input);\n-}\n-```\n-\n-Let's go over these chunks, one by one:\n-\n-```{rust,ignore}\n-std::old_io::stdin();\n-```\n-\n-This calls a function, `stdin()`, that lives inside the `std::old_io` module. As\n-you can imagine, everything in `std` is provided by Rust, the 'standard\n-library.' We'll talk more about the module system later.\n-\n-Since writing the fully qualified name all the time is annoying, we can use\n-the `use` statement to import it in:\n-\n-```{rust}\n-# #![feature(old_io)]\n-use std::old_io::stdin;\n-\n-stdin();\n-```\n-\n-However, it's considered better practice to not import individual functions, but\n-to import the module, and only use one level of qualification:\n-\n-```{rust}\n-# #![feature(old_io)]\n-use std::old_io;\n-\n-old_io::stdin();\n-```\n-\n-Let's update our example to use this style:\n-\n-```{rust,ignore}\n-use std::old_io;\n-\n-fn main() {\n-    println!(\"Type something!\");\n-\n-    let input = old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n-\n-    println!(\"{}\", input);\n-}\n-```\n-\n-Next up:\n-\n-```{rust,ignore}\n-.read_line()\n-```\n-\n-The `read_line()` method can be called on the result of `stdin()` to return\n-a full line of input. Nice and easy.\n-\n-```{rust,ignore}\n-.ok().expect(\"Failed to read line\");\n-```\n-\n-Do you remember this code?\n-\n-```{rust}\n-enum OptionalInt {\n-    Value(i32),\n-    Missing,\n-}\n-\n-fn main() {\n-    let x = OptionalInt::Value(5);\n-    let y = OptionalInt::Missing;\n-\n-    match x {\n-        OptionalInt::Value(n) => println!(\"x is {}\", n),\n-        OptionalInt::Missing => println!(\"x is missing!\"),\n-    }\n-\n-    match y {\n-        OptionalInt::Value(n) => println!(\"y is {}\", n),\n-        OptionalInt::Missing => println!(\"y is missing!\"),\n-    }\n-}\n-```\n-\n-We had to match each time to see if we had a value or not. In this case,\n-though, we _know_ that `x` has a `Value`, but `match` forces us to handle\n-the `missing` case. This is what we want 99% of the time, but sometimes, we\n-know better than the compiler.\n-\n-Likewise, `read_line()` does not return a line of input. It _might_ return a\n-line of input, though it might also fail to do so. This could happen if our program\n-isn't running in a terminal, but as part of a cron job, or some other context\n-where there's no standard input. Because of this, `read_line` returns a type\n-very similar to our `OptionalInt`: an `IoResult<T>`. We haven't talked about\n-`IoResult<T>` yet because it is the *generic* form of our `OptionalInt`.\n-Until then, you can think of it as being the same thing, just for any type \u2013\n-not just `i32`s.\n-\n-Rust provides a method on these `IoResult<T>`s called `ok()`, which does the\n-same thing as our `match` statement but assumes that we have a valid value.\n-We then call `expect()` on the result, which will terminate our program if we\n-don't have a valid value. In this case, if we can't get input, our program\n-doesn't work, so we're okay with that. In most cases, we would want to handle\n-the error case explicitly. `expect()` allows us to give an error message if\n-this crash happens.\n-\n-We will cover the exact details of how all of this works later in the Guide in\n-[Error Handling]. For now, this gives you enough of a basic understanding to\n-work with.\n-\n-Back to the code we were working on! Here's a refresher:\n-\n-```{rust,ignore}\n-use std::old_io;\n-\n-fn main() {\n-    println!(\"Type something!\");\n-\n-    let input = old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n-\n-    println!(\"{}\", input);\n-}\n-```\n-\n-With long lines like this, Rust gives you some flexibility with the whitespace.\n-We _could_ write the example like this:\n-\n-```{rust,ignore}\n-use std::old_io;\n-\n-fn main() {\n-    println!(\"Type something!\");\n-\n-    // here, we'll show the types at each step\n-\n-    let input = old_io::stdin() // std::old_io::stdio::StdinReader\n-                  .read_line() // IoResult<String>\n-                  .ok() // Option<String>\n-                  .expect(\"Failed to read line\"); // String\n-\n-    println!(\"{}\", input);\n-}\n-```\n-\n-Sometimes, this makes things more readable \u2013 sometimes, less. Use your judgement\n-here.\n-\n-That's all you need to get basic input from the standard input! It's not too\n-complicated, but there are a number of small parts.\n-\n-\n-[Error Handling]: ./error-handling.html"}]}