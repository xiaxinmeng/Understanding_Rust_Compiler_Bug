{"sha": "67653292beccfd3b88d13d9060d4e84c4a261f63", "node_id": "C_kwDOAAsO6NoAKDY3NjUzMjkyYmVjY2ZkM2I4OGQxM2Q5MDYwZDRlODRjNGEyNjFmNjM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:00:11Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T21:00:11Z"}, "message": "Add to_constraint_category to ObligationCause and SubregionOrigin", "tree": {"sha": "6282b07518ef1ef9179fff2451b751e8236c2cc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6282b07518ef1ef9179fff2451b751e8236c2cc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67653292beccfd3b88d13d9060d4e84c4a261f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67653292beccfd3b88d13d9060d4e84c4a261f63", "html_url": "https://github.com/rust-lang/rust/commit/67653292beccfd3b88d13d9060d4e84c4a261f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67653292beccfd3b88d13d9060d4e84c4a261f63/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6075877c897e1f6d2580ecd02a345b964b63d20d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6075877c897e1f6d2580ecd02a345b964b63d20d", "html_url": "https://github.com/rust-lang/rust/commit/6075877c897e1f6d2580ecd02a345b964b63d20d"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "937c52328d6adc2fe64765c6af50fe5e849cbc0b", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=67653292beccfd3b88d13d9060d4e84c4a261f63", "patch": "@@ -249,7 +249,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         // the original values `v_o` that was canonicalized into a\n         // variable...\n \n-        let constraint_category = ConstraintCategory::BoringNoLocation;\n+        let constraint_category = cause.to_constraint_category();\n \n         for (index, original_value) in original_values.var_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n@@ -643,7 +643,7 @@ pub fn make_query_region_constraints<'tcx>(\n \n     let outlives: Vec<_> = constraints\n         .iter()\n-        .map(|(k, _)| {\n+        .map(|(k, origin)| {\n             let constraint = ty::Binder::dummy(match *k {\n                 // Swap regions because we are going from sub (<=) to outlives\n                 // (>=).\n@@ -660,7 +660,7 @@ pub fn make_query_region_constraints<'tcx>(\n                 Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n             });\n \n-            (constraint, ConstraintCategory::BoringNoLocation)\n+            (constraint, origin.to_constraint_category())\n         })\n         .chain(\n             outlives_obligations"}, {"sha": "949d6823adff1fb01381c68b7e81fb48e241805f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=67653292beccfd3b88d13d9060d4e84c4a261f63", "patch": "@@ -20,6 +20,7 @@ use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n use rustc_middle::mir::interpret::{ErrorHandled, EvalToValTreeResult};\n+use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::select;\n use rustc_middle::ty::abstract_const::{AbstractConst, FailureKind};\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -422,6 +423,15 @@ pub enum SubregionOrigin<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(SubregionOrigin<'_>, 32);\n \n+impl<'tcx> SubregionOrigin<'tcx> {\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n+        match self {\n+            Self::Subtype(type_trace) => type_trace.cause.to_constraint_category(),\n+            _ => ConstraintCategory::BoringNoLocation,\n+        }\n+    }\n+}\n+\n /// Times when we replace late-bound regions with variables:\n #[derive(Clone, Copy, Debug)]\n pub enum LateBoundRegionConversionTime {"}, {"sha": "5bd1774f6b1ec7b11dc58fe1e2a3e6c735914f9d", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=67653292beccfd3b88d13d9060d4e84c4a261f63", "patch": "@@ -164,7 +164,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n             let outlives =\n                 &mut TypeOutlives::new(self, self.tcx, &region_bound_pairs, None, param_env);\n-            let category = ConstraintCategory::BoringNoLocation;\n+            let category = origin.to_constraint_category();\n             outlives.type_must_outlive(origin, sup_type, sub_region, category);\n         }\n     }\n@@ -394,7 +394,7 @@ where\n         if approx_env_bounds.is_empty() && trait_bounds.is_empty() && needs_infer {\n             debug!(\"projection_must_outlive: no declared bounds\");\n \n-            let constraint = ConstraintCategory::BoringNoLocation;\n+            let constraint = origin.to_constraint_category();\n             for k in projection_ty.substs {\n                 match k.unpack() {\n                     GenericArgKind::Lifetime(lt) => {\n@@ -444,7 +444,7 @@ where\n             let unique_bound = trait_bounds[0];\n             debug!(\"projection_must_outlive: unique trait bound = {:?}\", unique_bound);\n             debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n-            let category = ConstraintCategory::BoringNoLocation;\n+            let category = origin.to_constraint_category();\n             self.delegate.push_sub_region_constraint(origin, region, unique_bound, category);\n             return;\n         }"}, {"sha": "4cdcb40ba115165f9a0dad689499583936f5c4b5", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67653292beccfd3b88d13d9060d4e84c4a261f63/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=67653292beccfd3b88d13d9060d4e84c4a261f63", "patch": "@@ -10,6 +10,7 @@ mod structural_impls;\n pub mod util;\n \n use crate::infer::canonical::Canonical;\n+use crate::mir::ConstraintCategory;\n use crate::ty::abstract_const::NotConstEvaluatable;\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, AdtKind, Ty, TyCtxt};\n@@ -183,6 +184,13 @@ impl<'tcx> ObligationCause<'tcx> {\n             variant(DerivedObligationCause { parent_trait_pred, parent_code: self.code }).into();\n         self\n     }\n+\n+    pub fn to_constraint_category(&self) -> ConstraintCategory<'tcx> {\n+        match self.code() {\n+            MatchImpl(cause, _) => cause.to_constraint_category(),\n+            _ => ConstraintCategory::BoringNoLocation,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]"}]}