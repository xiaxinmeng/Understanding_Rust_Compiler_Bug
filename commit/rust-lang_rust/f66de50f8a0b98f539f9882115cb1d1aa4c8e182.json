{"sha": "f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "node_id": "C_kwDOAAsO6NoAKGY2NmRlNTBmOGEwYjk4ZjUzOWY5ODgyMTE1Y2IxZDFhYTRjOGUxODI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T16:48:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-29T16:51:21Z"}, "message": "Use the correct lifetime binder for elided lifetimes in path.", "tree": {"sha": "5792ab011e94c4fe7536694a38918ae9a497660d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5792ab011e94c4fe7536694a38918ae9a497660d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "html_url": "https://github.com/rust-lang/rust/commit/f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66de50f8a0b98f539f9882115cb1d1aa4c8e182/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e85edd9a844b523a02dbd89f3c02cd13e4c9fe46", "url": "https://api.github.com/repos/rust-lang/rust/commits/e85edd9a844b523a02dbd89f3c02cd13e4c9fe46", "html_url": "https://github.com/rust-lang/rust/commit/e85edd9a844b523a02dbd89f3c02cd13e4c9fe46"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "31f30f39c87f3eca2a336ce18e025a2611723ab5", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f66de50f8a0b98f539f9882115cb1d1aa4c8e182/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66de50f8a0b98f539f9882115cb1d1aa4c8e182/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "patch": "@@ -1319,7 +1319,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | PathSource::Struct\n                 | PathSource::TupleStruct(..) => false,\n             };\n-            let mut error = false;\n+            let mut error = true;\n+            let mut res = LifetimeRes::Error;\n             for rib in self.lifetime_ribs.iter().rev() {\n                 match rib.kind {\n                     // In create-parameter mode we error here because we don't want to support\n@@ -1329,7 +1330,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     //     impl Foo for std::cell::Ref<u32> // note lack of '_\n                     //     async fn foo(_: std::cell::Ref<u32>) { ... }\n                     LifetimeRibKind::AnonymousCreateParameter(_) => {\n-                        error = true;\n                         break;\n                     }\n                     // `PassThrough` is the normal case.\n@@ -1338,19 +1338,22 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     // `PathSegment`, for which there is no associated `'_` or `&T` with no explicit\n                     // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n                     // later, at which point a suitable error will be emitted.\n-                    LifetimeRibKind::AnonymousPassThrough(..)\n-                    | LifetimeRibKind::AnonymousReportError\n-                    | LifetimeRibKind::Item => break,\n+                    LifetimeRibKind::AnonymousPassThrough(binder) => {\n+                        error = false;\n+                        res = LifetimeRes::Anonymous { binder, elided: true };\n+                        break;\n+                    }\n+                    LifetimeRibKind::AnonymousReportError | LifetimeRibKind::Item => {\n+                        // FIXME(cjgillot) This resolution is wrong, but this does not matter\n+                        // since these cases are erroneous anyway.\n+                        res = LifetimeRes::Anonymous { binder: DUMMY_NODE_ID, elided: true };\n+                        error = false;\n+                        break;\n+                    }\n                     _ => {}\n                 }\n             }\n \n-            let res = if error {\n-                LifetimeRes::Error\n-            } else {\n-                LifetimeRes::Anonymous { binder: segment_id, elided: true }\n-            };\n-\n             let node_ids = self.r.next_node_ids(expected_lifetimes);\n             self.record_lifetime_res(\n                 segment_id,"}, {"sha": "9c9965d8fb8b534eb97b70aa2405eba4bd710f5d", "filename": "src/test/ui/lifetimes/elided-lifetime-in-path-in-impl-Fn.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f66de50f8a0b98f539f9882115cb1d1aa4c8e182/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66de50f8a0b98f539f9882115cb1d1aa4c8e182/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs?ref=f66de50f8a0b98f539f9882115cb1d1aa4c8e182", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+struct Foo<'a>(&'a ());\n+\n+fn with_fn() -> fn(Foo) {\n+    |_| ()\n+}\n+\n+fn with_impl_fn() -> impl Fn(Foo) {\n+    |_| ()\n+}\n+\n+fn with_where_fn<T>()\n+where\n+    T: Fn(Foo),\n+{\n+}\n+\n+fn main() {}"}]}