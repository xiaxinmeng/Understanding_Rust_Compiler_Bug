{"sha": "5eb3433ed5201c6180e6bee26c3156fea4b174f0", "node_id": "C_kwDOAAsO6NoAKDVlYjM0MzNlZDUyMDFjNjE4MGU2YmVlMjZjMzE1NmZlYTRiMTc0ZjA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-17T21:55:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T21:55:04Z"}, "message": "Rollup merge of #94731 - TaKO8Ki:const-generic-expr-recovery, r=davidtwco,oli-obk\n\nSuggest adding `{ .. }` around a const function call with arguments\n\ncloses #91020", "tree": {"sha": "3ff7e0997602c0125422710d7479a576e7f15ad8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ff7e0997602c0125422710d7479a576e7f15ad8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eb3433ed5201c6180e6bee26c3156fea4b174f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiM644CRBK7hj4Ov3rIwAAhqAIAA+SMaDBa1q7ZLEthDUj85sI\nknqYkQ4f0czNnuvclW3CL1CBSXyursLBxSV2RXTKC79jr53L93d+O7nzM33oahfq\nP3x1AtLhTC74khwPZ9b5CxtfsUK370IUAoLwrG92XhenpPQqe5vsY0MBU8XLEnVN\ncpYrKhMoS3Oa52hjRjhkq5voR5tuAbaHf7ZnU/3q4C4hM0EjXdLPL+XrUkIE35QR\nHwU/OvPr3JAOrHwd3dxOkL3+ubG9LZnmYpLcilZ59qENohve+GIfZxp8xfu4lgTv\nztfnribB2nljvhUkxj/3pKFzWX9erllCUC78rm+jewkwU/NesI5hI1ROFC6elMw=\n=kfMo\n-----END PGP SIGNATURE-----\n", "payload": "tree 3ff7e0997602c0125422710d7479a576e7f15ad8\nparent a8956e6618370ab766a3c3c79c73a1f1f41130a6\nparent 9a6532276ec45e22695f0a012a0782c97bf39a2d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647554104 +0100\ncommitter GitHub <noreply@github.com> 1647554104 +0100\n\nRollup merge of #94731 - TaKO8Ki:const-generic-expr-recovery, r=davidtwco,oli-obk\n\nSuggest adding `{ .. }` around a const function call with arguments\n\ncloses #91020\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb3433ed5201c6180e6bee26c3156fea4b174f0", "html_url": "https://github.com/rust-lang/rust/commit/5eb3433ed5201c6180e6bee26c3156fea4b174f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eb3433ed5201c6180e6bee26c3156fea4b174f0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8956e6618370ab766a3c3c79c73a1f1f41130a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8956e6618370ab766a3c3c79c73a1f1f41130a6", "html_url": "https://github.com/rust-lang/rust/commit/a8956e6618370ab766a3c3c79c73a1f1f41130a6"}, {"sha": "9a6532276ec45e22695f0a012a0782c97bf39a2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6532276ec45e22695f0a012a0782c97bf39a2d", "html_url": "https://github.com/rust-lang/rust/commit/9a6532276ec45e22695f0a012a0782c97bf39a2d"}], "stats": {"total": 199, "additions": 163, "deletions": 36}, "files": [{"sha": "754ae12bbea41b01fd150cd5a61bb465bce0a2e9", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -151,7 +151,7 @@ impl<'a> Parser<'a> {\n         span: Span,\n         attr_type: OuterAttributeType,\n     ) -> Option<Span> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         let lo = span.lo()\n             + BytePos(match attr_type {\n                 OuterAttributeType::Attribute => 1,"}, {"sha": "b5b628a3f55bd1d3975b346cce96350101e8d194", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 65, "deletions": 22, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -5,6 +5,7 @@ use super::{\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n };\n \n+use crate::lexer::UnmatchedBrace;\n use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n@@ -21,6 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, Handler, PResult};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n+use std::ops::{Deref, DerefMut};\n \n use std::mem::take;\n \n@@ -154,6 +156,28 @@ impl AttemptLocalParseRecovery {\n     }\n }\n \n+// SnapshotParser is used to create a snapshot of the parser\n+// without causing duplicate errors being emitted when the `Parser`\n+// is dropped.\n+pub(super) struct SnapshotParser<'a> {\n+    parser: Parser<'a>,\n+    unclosed_delims: Vec<UnmatchedBrace>,\n+}\n+\n+impl<'a> Deref for SnapshotParser<'a> {\n+    type Target = Parser<'a>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.parser\n+    }\n+}\n+\n+impl<'a> DerefMut for SnapshotParser<'a> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.parser\n+    }\n+}\n+\n impl<'a> Parser<'a> {\n     pub(super) fn span_err<S: Into<MultiSpan>>(\n         &self,\n@@ -179,6 +203,25 @@ impl<'a> Parser<'a> {\n         &self.sess.span_diagnostic\n     }\n \n+    /// Relace `self` with `snapshot.parser` and extend `unclosed_delims` with `snapshot.unclosed_delims`.\n+    /// This is to avoid losing unclosed delims errors `create_snapshot_for_diagnostic` clears.\n+    pub(super) fn restore_snapshot(&mut self, snapshot: SnapshotParser<'a>) {\n+        *self = snapshot.parser;\n+        self.unclosed_delims.extend(snapshot.unclosed_delims.clone());\n+    }\n+\n+    /// Create a snapshot of the `Parser`.\n+    pub(super) fn create_snapshot_for_diagnostic(&self) -> SnapshotParser<'a> {\n+        let mut snapshot = self.clone();\n+        let unclosed_delims = self.unclosed_delims.clone();\n+        // Clear `unclosed_delims` in snapshot to avoid\n+        // duplicate errors being emitted when the `Parser`\n+        // is dropped (which may or may not happen, depending\n+        // if the parsing the snapshot is created for is successful)\n+        snapshot.unclosed_delims.clear();\n+        SnapshotParser { parser: snapshot, unclosed_delims }\n+    }\n+\n     pub(super) fn span_to_snippet(&self, span: Span) -> Result<String, SpanSnippetError> {\n         self.sess.source_map().span_to_snippet(span)\n     }\n@@ -438,7 +481,7 @@ impl<'a> Parser<'a> {\n             // fn foo() -> Foo {\n             //     field: value,\n             // }\n-            let mut snapshot = self.clone();\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             let path =\n                 Path { segments: vec![], span: self.prev_token.span.shrink_to_lo(), tokens: None };\n             let struct_expr = snapshot.parse_struct_expr(None, path, AttrVec::new(), false);\n@@ -464,7 +507,7 @@ impl<'a> Parser<'a> {\n                             Applicability::MaybeIncorrect,\n                         )\n                         .emit();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n@@ -678,7 +721,7 @@ impl<'a> Parser<'a> {\n     /// angle brackets.\n     pub(super) fn check_turbofish_missing_angle_brackets(&mut self, segment: &mut PathSegment) {\n         if token::ModSep == self.token.kind && segment.args.is_none() {\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             self.bump();\n             let lo = self.token.span;\n             match self.parse_angle_args(None) {\n@@ -712,14 +755,14 @@ impl<'a> Parser<'a> {\n                         .emit();\n                     } else {\n                         // This doesn't look like an invalid turbofish, can't recover parse state.\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                 }\n                 Err(err) => {\n                     // We couldn't parse generic parameters, unlikely to be a turbofish. Rely on\n                     // generic parse error instead.\n                     err.cancel();\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                 }\n             }\n         }\n@@ -825,7 +868,7 @@ impl<'a> Parser<'a> {\n                 // `x == y < z`\n                 (BinOpKind::Eq, AssocOp::Less | AssocOp::LessEqual | AssocOp::Greater | AssocOp::GreaterEqual) => {\n                     // Consume `z`/outer-op-rhs.\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     match self.parse_expr() {\n                         Ok(r2) => {\n                             // We are sure that outer-op-rhs could be consumed, the suggestion is\n@@ -835,14 +878,14 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n                 }\n                 // `x > y == z`\n                 (BinOpKind::Lt | BinOpKind::Le | BinOpKind::Gt | BinOpKind::Ge, AssocOp::Equal) => {\n-                    let snapshot = self.clone();\n+                    let snapshot = self.create_snapshot_for_diagnostic();\n                     // At this point it is always valid to enclose the lhs in parentheses, no\n                     // further checks are necessary.\n                     match self.parse_expr() {\n@@ -852,7 +895,7 @@ impl<'a> Parser<'a> {\n                         }\n                         Err(expr_err) => {\n                             expr_err.cancel();\n-                            *self = snapshot;\n+                            self.restore_snapshot(snapshot);\n                             false\n                         }\n                     }\n@@ -917,7 +960,7 @@ impl<'a> Parser<'a> {\n                     || outer_op.node == AssocOp::Greater\n                 {\n                     if outer_op.node == AssocOp::Less {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump();\n                         // So far we have parsed `foo<bar<`, consume the rest of the type args.\n                         let modifiers =\n@@ -929,15 +972,15 @@ impl<'a> Parser<'a> {\n                         {\n                             // We don't have `foo< bar >(` or `foo< bar >::`, so we rewind the\n                             // parser and bail out.\n-                            *self = snapshot.clone();\n+                            self.restore_snapshot(snapshot);\n                         }\n                     }\n                     return if token::ModSep == self.token.kind {\n                         // We have some certainty that this was a bad turbofish at this point.\n                         // `foo< bar >::`\n                         suggest(&mut err);\n \n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         self.bump(); // `::`\n \n                         // Consume the rest of the likely `foo<bar>::new()` or return at `foo<bar>`.\n@@ -954,7 +997,7 @@ impl<'a> Parser<'a> {\n                                 expr_err.cancel();\n                                 // Not entirely sure now, but we bubble the error up with the\n                                 // suggestion.\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                                 Err(err)\n                             }\n                         }\n@@ -1008,7 +1051,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn consume_fn_args(&mut self) -> Result<(), ()> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         self.bump(); // `(`\n \n         // Consume the fn call arguments.\n@@ -1018,7 +1061,7 @@ impl<'a> Parser<'a> {\n \n         if self.token.kind == token::Eof {\n             // Not entirely sure that what we consumed were fn arguments, rollback.\n-            *self = snapshot;\n+            self.restore_snapshot(snapshot);\n             Err(())\n         } else {\n             // 99% certain that the suggestion is correct, continue parsing.\n@@ -1959,12 +2002,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_const_param_decl(&mut self, ty_generics: Option<&Generics>) -> Option<GenericArg> {\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         let param = match self.parse_const_param(vec![]) {\n             Ok(param) => param,\n             Err(err) => {\n                 err.cancel();\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 return None;\n             }\n         };\n@@ -2056,7 +2099,7 @@ impl<'a> Parser<'a> {\n             // We perform these checks and early return to avoid taking a snapshot unnecessarily.\n             return Err(err);\n         }\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n         if is_op_or_dot {\n             self.bump();\n         }\n@@ -2101,7 +2144,7 @@ impl<'a> Parser<'a> {\n                 err.cancel();\n             }\n         }\n-        *self = snapshot;\n+        self.restore_snapshot(snapshot);\n         Err(err)\n     }\n \n@@ -2161,7 +2204,7 @@ impl<'a> Parser<'a> {\n         let span = self.token.span;\n         // We only emit \"unexpected `:`\" error here if we can successfully parse the\n         // whole pattern correctly in that case.\n-        let snapshot = self.clone();\n+        let snapshot = self.create_snapshot_for_diagnostic();\n \n         // Create error for \"unexpected `:`\".\n         match self.expected_one_of_not_found(&[], &[]) {\n@@ -2173,7 +2216,7 @@ impl<'a> Parser<'a> {\n                         // reasonable error.\n                         inner_err.cancel();\n                         err.cancel();\n-                        *self = snapshot;\n+                        self.restore_snapshot(snapshot);\n                     }\n                     Ok(mut pat) => {\n                         // We've parsed the rest of the pattern.\n@@ -2252,7 +2295,7 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 // Carry on as if we had not done anything. This should be unreachable.\n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n             }\n         };\n         first_pat"}, {"sha": "ef006d5fcda8cf5a0fe65caa0413eacc644dbd8f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -703,7 +703,7 @@ impl<'a> Parser<'a> {\n                         ExprKind::Path(None, ast::Path { segments, .. }),\n                         TokenKind::Ident(kw::For | kw::Loop | kw::While, false),\n                     ) if segments.len() == 1 => {\n-                        let snapshot = self.clone();\n+                        let snapshot = self.create_snapshot_for_diagnostic();\n                         let label = Label {\n                             ident: Ident::from_str_and_span(\n                                 &format!(\"'{}\", segments[0].ident),\n@@ -725,7 +725,7 @@ impl<'a> Parser<'a> {\n                             }\n                             Err(err) => {\n                                 err.cancel();\n-                                *self = snapshot;\n+                                self.restore_snapshot(snapshot);\n                             }\n                         }\n                     }\n@@ -1885,7 +1885,7 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         attrs: AttrVec,\n     ) -> Option<P<Expr>> {\n-        let mut snapshot = self.clone();\n+        let mut snapshot = self.create_snapshot_for_diagnostic();\n         match snapshot.parse_array_or_repeat_expr(attrs, token::Brace) {\n             Ok(arr) => {\n                 let hi = snapshot.prev_token.span;\n@@ -1901,7 +1901,7 @@ impl<'a> Parser<'a> {\n                 .note(\"to define an array, one would use square brackets instead of curly braces\")\n                 .emit();\n \n-                *self = snapshot;\n+                self.restore_snapshot(snapshot);\n                 Some(self.mk_expr_err(arr.span))\n             }\n             Err(e) => {\n@@ -2369,7 +2369,7 @@ impl<'a> Parser<'a> {\n         if self.token.kind != token::Semi {\n             return None;\n         }\n-        let start_snapshot = self.clone();\n+        let start_snapshot = self.create_snapshot_for_diagnostic();\n         let semi_sp = self.token.span;\n         self.bump(); // `;`\n         let mut stmts =\n@@ -2417,15 +2417,15 @@ impl<'a> Parser<'a> {\n                 return Some(err(self, stmts));\n             }\n             if self.token.kind == token::Comma {\n-                *self = start_snapshot;\n+                self.restore_snapshot(start_snapshot);\n                 return None;\n             }\n-            let pre_pat_snapshot = self.clone();\n+            let pre_pat_snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_pat_no_top_alt(None) {\n                 Ok(_pat) => {\n                     if self.token.kind == token::FatArrow {\n                         // Reached arm end.\n-                        *self = pre_pat_snapshot;\n+                        self.restore_snapshot(pre_pat_snapshot);\n                         return Some(err(self, stmts));\n                     }\n                 }\n@@ -2434,21 +2434,21 @@ impl<'a> Parser<'a> {\n                 }\n             }\n \n-            *self = pre_pat_snapshot;\n+            self.restore_snapshot(pre_pat_snapshot);\n             match self.parse_stmt_without_recovery(true, ForceCollect::No) {\n                 // Consume statements for as long as possible.\n                 Ok(Some(stmt)) => {\n                     stmts.push(stmt);\n                 }\n                 Ok(None) => {\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n                 // We couldn't parse either yet another statement missing it's\n                 // enclosing block nor the next arm's pattern or closing brace.\n                 Err(stmt_err) => {\n                     stmt_err.cancel();\n-                    *self = start_snapshot;\n+                    self.restore_snapshot(start_snapshot);\n                     break;\n                 }\n             }"}, {"sha": "17c57867cf9cfff8435f098efa7891060d29a860", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -624,9 +624,18 @@ impl<'a> Parser<'a> {\n             GenericArg::Const(self.parse_const_arg()?)\n         } else if self.check_type() {\n             // Parse type argument.\n+            let is_const_fn = self.look_ahead(1, |t| t.kind == token::OpenDelim(token::Paren));\n+            let mut snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_ty() {\n                 Ok(ty) => GenericArg::Type(ty),\n                 Err(err) => {\n+                    if is_const_fn {\n+                        if let Ok(expr) = (*snapshot).parse_expr_res(Restrictions::CONST_EXPR, None)\n+                        {\n+                            self.restore_snapshot(snapshot);\n+                            return Ok(Some(self.dummy_const_arg_needs_braces(err, expr.span)));\n+                        }\n+                    }\n                     // Try to recover from possible `const` arg without braces.\n                     return self.recover_const_arg(start, err).map(Some);\n                 }\n@@ -636,7 +645,7 @@ impl<'a> Parser<'a> {\n         } else {\n             // Fall back by trying to parse a const-expr expression. If we successfully do so,\n             // then we should report an error that it needs to be wrapped in braces.\n-            let snapshot = self.clone();\n+            let snapshot = self.create_snapshot_for_diagnostic();\n             match self.parse_expr_res(Restrictions::CONST_EXPR, None) {\n                 Ok(expr) => {\n                     return Ok(Some(self.dummy_const_arg_needs_braces(\n@@ -645,7 +654,7 @@ impl<'a> Parser<'a> {\n                     )));\n                 }\n                 Err(err) => {\n-                    *self = snapshot;\n+                    self.restore_snapshot(snapshot);\n                     err.cancel();\n                     return Ok(None);\n                 }"}, {"sha": "c8d2683e53f47267f7dee7c466444886eeff93d7", "filename": "src/test/ui/const-generics/const-generic-function.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.rs?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -0,0 +1,21 @@\n+fn foo<const N: i32>() -> i32 {\n+    N\n+}\n+\n+const fn bar(n: i32, m: i32) -> i32 {\n+    n\n+}\n+\n+const fn baz() -> i32 {\n+    1\n+}\n+\n+const FOO: i32 = 3;\n+\n+fn main() {\n+    foo::<baz()>(); //~ ERROR expected type, found function `baz`\n+    //~| ERROR unresolved item provided when a constant was expected\n+    foo::<bar(bar(1, 1), bar(1, 1))>(); //~ ERROR expected type, found `1`\n+    foo::<bar(1, 1)>(); //~ ERROR expected type, found `1`\n+    foo::<bar(FOO, 2)>(); //~ ERROR expected type, found `2`\n+}"}, {"sha": "5ad3f1006c17d59e7652cb4f8ea82d0df68b2f3a", "filename": "src/test/ui/const-generics/const-generic-function.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5eb3433ed5201c6180e6bee26c3156fea4b174f0/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5eb3433ed5201c6180e6bee26c3156fea4b174f0/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-function.stderr?ref=5eb3433ed5201c6180e6bee26c3156fea4b174f0", "patch": "@@ -0,0 +1,54 @@\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:18:19\n+   |\n+LL |     foo::<bar(bar(1, 1), bar(1, 1))>();\n+   |                   ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(bar(1, 1), bar(1, 1)) }>();\n+   |           +                           +\n+\n+error: expected type, found `1`\n+  --> $DIR/const-generic-function.rs:19:15\n+   |\n+LL |     foo::<bar(1, 1)>();\n+   |               ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(1, 1) }>();\n+   |           +           +\n+\n+error: expected type, found `2`\n+  --> $DIR/const-generic-function.rs:20:20\n+   |\n+LL |     foo::<bar(FOO, 2)>();\n+   |                    ^ expected type\n+   |\n+help: expressions must be enclosed in braces to be used as const generic arguments\n+   |\n+LL |     foo::<{ bar(FOO, 2) }>();\n+   |           +             +\n+\n+error[E0573]: expected type, found function `baz`\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^ not a type\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/const-generic-function.rs:16:11\n+   |\n+LL |     foo::<baz()>();\n+   |           ^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |     foo::<{ baz() }>();\n+   |           +       +\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0573, E0747.\n+For more information about an error, try `rustc --explain E0573`."}]}