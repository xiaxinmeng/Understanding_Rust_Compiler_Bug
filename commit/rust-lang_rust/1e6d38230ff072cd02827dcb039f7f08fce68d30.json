{"sha": "1e6d38230ff072cd02827dcb039f7f08fce68d30", "node_id": "C_kwDOAAsO6NoAKDFlNmQzODIzMGZmMDcyY2QwMjgyN2RjYjAzOWY3ZjA4ZmNlNjhkMzA", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-09T10:03:47Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-11T21:38:17Z"}, "message": "Reverse parameter to placeholder substitution in chalk results", "tree": {"sha": "6d7496890e0b24992545c260611d14702188abcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7496890e0b24992545c260611d14702188abcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6d38230ff072cd02827dcb039f7f08fce68d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6d38230ff072cd02827dcb039f7f08fce68d30", "html_url": "https://github.com/rust-lang/rust/commit/1e6d38230ff072cd02827dcb039f7f08fce68d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6d38230ff072cd02827dcb039f7f08fce68d30/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fa173ed31d97aedee04f04e134badb67495293", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa173ed31d97aedee04f04e134badb67495293", "html_url": "https://github.com/rust-lang/rust/commit/d4fa173ed31d97aedee04f04e134badb67495293"}], "stats": {"total": 50, "additions": 40, "deletions": 10}, "files": [{"sha": "6f143c1c607b32adc9702e545b114c5cb47002ab", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/1e6d38230ff072cd02827dcb039f7f08fce68d30/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6d38230ff072cd02827dcb039f7f08fce68d30/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1e6d38230ff072cd02827dcb039f7f08fce68d30", "patch": "@@ -1034,10 +1034,6 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         match *t.kind() {\n-            // FIXME(chalk): currently we convert params to placeholders starting at\n-            // index `0`. To support placeholders, we'll actually need to do a\n-            // first pass to collect placeholders. Then we can insert params after.\n-            ty::Placeholder(_) => unimplemented!(),\n             ty::Param(param) => match self.list.iter().position(|r| r == &param) {\n                 Some(idx) => self.tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::from_usize(0),\n@@ -1053,15 +1049,15 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n                     }))\n                 }\n             },\n-\n             _ => t.super_fold_with(self),\n         }\n     }\n \n     fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n         match r {\n-            // FIXME(chalk) - jackh726 - this currently isn't hit in any tests.\n-            // This covers any region variables in a goal, right?\n+            // FIXME(chalk) - jackh726 - this currently isn't hit in any tests,\n+            // since canonicalization will already change these to canonical\n+            // variables (ty::ReLateBound).\n             ty::ReEarlyBound(_re) => match self.named_regions.get(&_re.def_id) {\n                 Some(idx) => {\n                     let br = ty::BoundRegion {\n@@ -1084,6 +1080,39 @@ impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n     }\n }\n \n+crate struct ReverseParamsSubstitutor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+}\n+\n+impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n+    crate fn new(\n+        tcx: TyCtxt<'tcx>,\n+        params: rustc_data_structures::fx::FxHashMap<usize, rustc_middle::ty::ParamTy>,\n+    ) -> Self {\n+        Self { tcx, params }\n+    }\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n+    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        match *t.kind() {\n+            ty::Placeholder(ty::PlaceholderType { universe: ty::UniverseIndex::ROOT, name }) => {\n+                match self.params.get(&name.as_usize()) {\n+                    Some(param) => self.tcx.mk_ty(ty::Param(*param)),\n+                    None => t,\n+                }\n+            }\n+\n+            _ => t.super_fold_with(self),\n+        }\n+    }\n+}\n+\n /// Used to collect `Placeholder`s.\n crate struct PlaceholdersCollector {\n     universe_index: ty::UniverseIndex,"}, {"sha": "3c2a266dab9bcf996a555c754e4ee480b54cc1e6", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1e6d38230ff072cd02827dcb039f7f08fce68d30/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6d38230ff072cd02827dcb039f7f08fce68d30/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=1e6d38230ff072cd02827dcb039f7f08fce68d30", "patch": "@@ -23,7 +23,7 @@ use rustc_infer::traits::{self, CanonicalChalkEnvironmentAndGoal};\n \n use crate::chalk::db::RustIrDatabase as ChalkRustIrDatabase;\n use crate::chalk::lowering::LowerInto;\n-use crate::chalk::lowering::{ParamsSubstitutor, PlaceholdersCollector};\n+use crate::chalk::lowering::{ParamsSubstitutor, PlaceholdersCollector, ReverseParamsSubstitutor};\n \n use chalk_solve::Solution;\n \n@@ -44,7 +44,7 @@ crate fn evaluate_goal<'tcx>(\n     let mut params_substitutor =\n         ParamsSubstitutor::new(tcx, placeholders_collector.next_ty_placeholder);\n     let obligation = obligation.fold_with(&mut params_substitutor);\n-    let _params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n+    let params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n \n     let max_universe = obligation.max_universe.index();\n \n@@ -101,8 +101,9 @@ crate fn evaluate_goal<'tcx>(\n         use rustc_middle::infer::canonical::CanonicalVarInfo;\n \n         let mut var_values: IndexVec<BoundVar, GenericArg<'tcx>> = IndexVec::new();\n+        let mut reverse_param_substitutor = ReverseParamsSubstitutor::new(tcx, params);\n         subst.as_slice(interner).iter().for_each(|p| {\n-            var_values.push(p.lower_into(interner));\n+            var_values.push(p.lower_into(interner).fold_with(&mut reverse_param_substitutor));\n         });\n         let variables: Vec<_> = binders\n             .iter(interner)"}]}