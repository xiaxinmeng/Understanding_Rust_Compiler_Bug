{"sha": "4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOGRkYWM5OWUxZWRmYjIxOWUxMWMzZWEyZDZjNDNjY2VjYjI5YWI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-06-21T20:22:27Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-06-21T20:22:27Z"}, "message": "Use `fold` to implement `Iterator::for_each`\n\nThe benefit of using internal iteration is shown in new benchmarks:\n\n    test iter::bench_for_each_chain_fold     ... bench:     635,110 ns/iter (+/- 5,135)\n    test iter::bench_for_each_chain_loop     ... bench:   2,249,983 ns/iter (+/- 42,001)\n    test iter::bench_for_each_chain_ref_fold ... bench:   2,248,061 ns/iter (+/- 51,940)", "tree": {"sha": "0b8806c71633a73dc6b369b61001ec9942cebceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b8806c71633a73dc6b369b61001ec9942cebceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "html_url": "https://github.com/rust-lang/rust/commit/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4038977a39f7c5bfa76cccf586930ec57befbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4038977a39f7c5bfa76cccf586930ec57befbad", "html_url": "https://github.com/rust-lang/rust/commit/b4038977a39f7c5bfa76cccf586930ec57befbad"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "5b06229c21f23367f0682273c1926884659afe12", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "patch": "@@ -99,3 +99,50 @@ fn bench_zip_add(b: &mut Bencher) {\n         add_zip(&source, &mut dst)\n     });\n }\n+\n+/// `Iterator::for_each` implemented as a plain loop.\n+fn for_each_loop<I, F>(iter: I, mut f: F) where\n+    I: Iterator, F: FnMut(I::Item)\n+{\n+    for item in iter {\n+        f(item);\n+    }\n+}\n+\n+/// `Iterator::for_each` implemented with `fold` for internal iteration.\n+/// (except when `by_ref()` effectively disables that optimization.)\n+fn for_each_fold<I, F>(iter: I, mut f: F) where\n+    I: Iterator, F: FnMut(I::Item)\n+{\n+    iter.fold((), move |(), item| f(item));\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_loop(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_loop(iter, |x| acc += x);\n+        acc\n+    });\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_fold(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_fold(iter, |x| acc += x);\n+        acc\n+    });\n+}\n+\n+#[bench]\n+fn bench_for_each_chain_ref_fold(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut acc = 0;\n+        let mut iter = (0i64..1000000).chain(0..1000000).map(black_box);\n+        for_each_fold(iter.by_ref(), |x| acc += x);\n+        acc\n+    });\n+}"}, {"sha": "d38864f3edddb4b7f28382d9cbdbc944c0350e8b", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=4a8ddac99e1edfb219e11c3ea2d6c43ccecb29ab", "patch": "@@ -487,7 +487,9 @@ pub trait Iterator {\n     /// This is equivalent to using a [`for`] loop on the iterator, although\n     /// `break` and `continue` are not possible from a closure.  It's generally\n     /// more idiomatic to use a `for` loop, but `for_each` may be more legible\n-    /// when processing items at the end of longer iterator chains.\n+    /// when processing items at the end of longer iterator chains.  In some\n+    /// cases `for_each` may also be faster than a loop, because it will use\n+    /// internal iteration on adaptors like `Chain`.\n     ///\n     /// [`for`]: ../../book/first-edition/loops.html#for\n     ///\n@@ -523,9 +525,7 @@ pub trait Iterator {\n     fn for_each<F>(self, mut f: F) where\n         Self: Sized, F: FnMut(Self::Item),\n     {\n-        for item in self {\n-            f(item);\n-        }\n+        self.fold((), move |(), item| f(item));\n     }\n \n     /// Creates an iterator which uses a closure to determine if an element"}]}