{"sha": "5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMmY5NTJkYmNjMWEwZTJiNTc1MzlhZTcwMDA3MTA0NTNmYTNmYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-14T17:05:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-14T17:05:51Z"}, "message": "auto merge of #9181 : lkuper/rust/libsyntax-default-methods-refactor, r=alexcrichton\n\nI'm getting the three `make check` failures mentioned in issue #9127, which I also get building master.", "tree": {"sha": "8ac9ee967acd3495ec982ccc4c805b7e308735db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac9ee967acd3495ec982ccc4c805b7e308735db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "html_url": "https://github.com/rust-lang/rust/commit/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c26513ef9a58fa3e6703320cc37427aa229bbbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c26513ef9a58fa3e6703320cc37427aa229bbbd", "html_url": "https://github.com/rust-lang/rust/commit/1c26513ef9a58fa3e6703320cc37427aa229bbbd"}, {"sha": "ade7df43d667a4a10d7f893591e790961422fa68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ade7df43d667a4a10d7f893591e790961422fa68", "html_url": "https://github.com/rust-lang/rust/commit/ade7df43d667a4a10d7f893591e790961422fa68"}], "stats": {"total": 278, "additions": 3, "deletions": 275}, "files": [{"sha": "8f620e8167b83015aa5fe9470d8387cd41096fd8", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 77, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -362,85 +362,9 @@ impl Visitor<()> for Ctx {\n         self.map_block(block)\n     }\n \n-    // XXX: Methods below can become default methods.\n-\n-    fn visit_mod(&mut self, module: &_mod, _: Span, _: NodeId, _: ()) {\n-        visit::walk_mod(self, module, ())\n-    }\n-\n-    fn visit_view_item(&mut self, view_item: &view_item, _: ()) {\n-        visit::walk_view_item(self, view_item, ())\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: @foreign_item, _: ()) {\n-        visit::walk_foreign_item(self, foreign_item, ())\n-    }\n-\n-    fn visit_local(&mut self, local: @Local, _: ()) {\n-        visit::walk_local(self, local, ())\n-    }\n-\n-    fn visit_arm(&mut self, arm: &Arm, _: ()) {\n-        visit::walk_arm(self, arm, ())\n-    }\n-\n-    fn visit_decl(&mut self, decl: @Decl, _: ()) {\n-        visit::walk_decl(self, decl, ())\n-    }\n-\n-    fn visit_expr_post(&mut self, _: @Expr, _: ()) {\n-        // Empty!\n-    }\n-\n     fn visit_ty(&mut self, typ: &Ty, _: ()) {\n         visit::walk_ty(self, typ, ())\n     }\n-\n-    fn visit_generics(&mut self, generics: &Generics, _: ()) {\n-        visit::walk_generics(self, generics, ())\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: &fn_kind,\n-                function_declaration: &fn_decl,\n-                block: &Block,\n-                span: Span,\n-                node_id: NodeId,\n-                _: ()) {\n-        visit::walk_fn(self,\n-                        function_kind,\n-                        function_declaration,\n-                        block,\n-                        span,\n-                        node_id,\n-                        ())\n-    }\n-\n-    fn visit_ty_method(&mut self, ty_method: &TypeMethod, _: ()) {\n-        visit::walk_ty_method(self, ty_method, ())\n-    }\n-\n-    fn visit_trait_method(&mut self, trait_method: &trait_method, _: ()) {\n-        visit::walk_trait_method(self, trait_method, ())\n-    }\n-\n-    fn visit_struct_def(&mut self,\n-                        struct_def: @struct_def,\n-                        ident: Ident,\n-                        generics: &Generics,\n-                        node_id: NodeId,\n-                        _: ()) {\n-        visit::walk_struct_def(self,\n-                                struct_def,\n-                                ident,\n-                                generics,\n-                                node_id,\n-                                ())\n-    }\n-\n-    fn visit_struct_field(&mut self, struct_field: @struct_field, _: ()) {\n-        visit::walk_struct_field(self, struct_field, ())\n-    }\n }\n \n pub fn map_crate(diag: @mut span_handler, c: &Crate) -> map {"}, {"sha": "f7e58c14db06a81d9e7699540aab724a1428d349", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 198, "changes": 200, "blob_url": "https://github.com/rust-lang/rust/blob/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f2f952dbcc1a0e2b57539ae7000710453fa3fb0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=5f2f952dbcc1a0e2b57539ae7000710453fa3fb0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast::{Block, Crate, NodeId, DeclLocal, Expr_, ExprMac, SyntaxContext};\n+use ast::{Block, Crate, DeclLocal, Expr_, ExprMac, SyntaxContext};\n use ast::{Local, Ident, mac_invoc_tt};\n use ast::{item_mac, Mrk, Stmt_, StmtDecl, StmtMac, StmtExpr, StmtSemi};\n use ast::{token_tree};\n@@ -560,107 +560,10 @@ impl Visitor<()> for NewNameFinderContext {\n         }\n     }\n \n-    // XXX: Methods below can become default methods.\n-\n-    fn visit_mod(&mut self, module: &ast::_mod, _: Span, _: NodeId, _: ()) {\n-        visit::walk_mod(self, module, ())\n-    }\n-\n-    fn visit_view_item(&mut self, view_item: &ast::view_item, _: ()) {\n-        visit::walk_view_item(self, view_item, ())\n-    }\n-\n-    fn visit_item(&mut self, item: @ast::item, _: ()) {\n-        visit::walk_item(self, item, ())\n-    }\n-\n-    fn visit_foreign_item(&mut self,\n-                          foreign_item: @ast::foreign_item,\n-                          _: ()) {\n-        visit::walk_foreign_item(self, foreign_item, ())\n-    }\n-\n-    fn visit_local(&mut self, local: @ast::Local, _: ()) {\n-        visit::walk_local(self, local, ())\n-    }\n-\n-    fn visit_block(&mut self, block: &ast::Block, _: ()) {\n-        visit::walk_block(self, block, ())\n-    }\n-\n-    fn visit_stmt(&mut self, stmt: @ast::Stmt, _: ()) {\n-        visit::walk_stmt(self, stmt, ())\n-    }\n-\n-    fn visit_arm(&mut self, arm: &ast::Arm, _: ()) {\n-        visit::walk_arm(self, arm, ())\n-    }\n-\n-    fn visit_decl(&mut self, decl: @ast::Decl, _: ()) {\n-        visit::walk_decl(self, decl, ())\n-    }\n-\n-    fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n-        visit::walk_expr(self, expr, ())\n-    }\n-\n-    fn visit_expr_post(&mut self, _: @ast::Expr, _: ()) {\n-        // Empty!\n-    }\n-\n     fn visit_ty(&mut self, typ: &ast::Ty, _: ()) {\n         visit::walk_ty(self, typ, ())\n     }\n \n-    fn visit_generics(&mut self, generics: &ast::Generics, _: ()) {\n-        visit::walk_generics(self, generics, ())\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: &visit::fn_kind,\n-                function_declaration: &ast::fn_decl,\n-                block: &ast::Block,\n-                span: Span,\n-                node_id: NodeId,\n-                _: ()) {\n-        visit::walk_fn(self,\n-                        function_kind,\n-                        function_declaration,\n-                        block,\n-                        span,\n-                        node_id,\n-                        ())\n-    }\n-\n-    fn visit_ty_method(&mut self, ty_method: &ast::TypeMethod, _: ()) {\n-        visit::walk_ty_method(self, ty_method, ())\n-    }\n-\n-    fn visit_trait_method(&mut self,\n-                          trait_method: &ast::trait_method,\n-                          _: ()) {\n-        visit::walk_trait_method(self, trait_method, ())\n-    }\n-\n-    fn visit_struct_def(&mut self,\n-                        struct_def: @ast::struct_def,\n-                        ident: Ident,\n-                        generics: &ast::Generics,\n-                        node_id: NodeId,\n-                        _: ()) {\n-        visit::walk_struct_def(self,\n-                                struct_def,\n-                                ident,\n-                                generics,\n-                                node_id,\n-                                ())\n-    }\n-\n-    fn visit_struct_field(&mut self,\n-                          struct_field: @ast::struct_field,\n-                          _: ()) {\n-        visit::walk_struct_field(self, struct_field, ())\n-    }\n }\n \n // a visitor that extracts the paths\n@@ -671,7 +574,6 @@ struct NewPathExprFinderContext {\n     path_accumulator: @mut ~[ast::Path],\n }\n \n-// XXX : YIKES a lot of boilerplate again....\n impl Visitor<()> for NewPathExprFinderContext {\n \n     fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n@@ -684,108 +586,10 @@ impl Visitor<()> for NewPathExprFinderContext {\n         }\n     }\n \n-\n-    // XXX: Methods below can become default methods.\n-\n-    fn visit_pat(&mut self, pattern: @ast::Pat, _: ()) {\n-        visit::walk_pat(self,pattern,())\n-    }\n-\n-    fn visit_mod(&mut self, module: &ast::_mod, _: Span, _: NodeId, _: ()) {\n-        visit::walk_mod(self, module, ())\n-    }\n-\n-    fn visit_view_item(&mut self, view_item: &ast::view_item, _: ()) {\n-        visit::walk_view_item(self, view_item, ())\n-    }\n-\n-    fn visit_item(&mut self, item: @ast::item, _: ()) {\n-        visit::walk_item(self, item, ())\n-    }\n-\n-    fn visit_foreign_item(&mut self,\n-                          foreign_item: @ast::foreign_item,\n-                          _: ()) {\n-        visit::walk_foreign_item(self, foreign_item, ())\n-    }\n-\n-    fn visit_local(&mut self, local: @ast::Local, _: ()) {\n-        visit::walk_local(self, local, ())\n-    }\n-\n-    fn visit_block(&mut self, block: &ast::Block, _: ()) {\n-        visit::walk_block(self, block, ())\n-    }\n-\n-    fn visit_stmt(&mut self, stmt: @ast::Stmt, _: ()) {\n-        visit::walk_stmt(self, stmt, ())\n-    }\n-\n-    fn visit_arm(&mut self, arm: &ast::Arm, _: ()) {\n-        visit::walk_arm(self, arm, ())\n-    }\n-\n-    fn visit_decl(&mut self, decl: @ast::Decl, _: ()) {\n-        visit::walk_decl(self, decl, ())\n-    }\n-\n-    fn visit_expr_post(&mut self, _: @ast::Expr, _: ()) {\n-        // Empty!\n-    }\n-\n     fn visit_ty(&mut self, typ: &ast::Ty, _: ()) {\n         visit::walk_ty(self, typ, ())\n     }\n \n-    fn visit_generics(&mut self, generics: &ast::Generics, _: ()) {\n-        visit::walk_generics(self, generics, ())\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: &visit::fn_kind,\n-                function_declaration: &ast::fn_decl,\n-                block: &ast::Block,\n-                span: Span,\n-                node_id: NodeId,\n-                _: ()) {\n-        visit::walk_fn(self,\n-                        function_kind,\n-                        function_declaration,\n-                        block,\n-                        span,\n-                        node_id,\n-                        ())\n-    }\n-\n-    fn visit_ty_method(&mut self, ty_method: &ast::TypeMethod, _: ()) {\n-        visit::walk_ty_method(self, ty_method, ())\n-    }\n-\n-    fn visit_trait_method(&mut self,\n-                          trait_method: &ast::trait_method,\n-                          _: ()) {\n-        visit::walk_trait_method(self, trait_method, ())\n-    }\n-\n-    fn visit_struct_def(&mut self,\n-                        struct_def: @ast::struct_def,\n-                        ident: Ident,\n-                        generics: &ast::Generics,\n-                        node_id: NodeId,\n-                        _: ()) {\n-        visit::walk_struct_def(self,\n-                                struct_def,\n-                                ident,\n-                                generics,\n-                                node_id,\n-                                ())\n-    }\n-\n-    fn visit_struct_field(&mut self,\n-                          struct_field: @ast::struct_field,\n-                          _: ()) {\n-        visit::walk_struct_field(self, struct_field, ())\n-    }\n }\n \n // return a visitor that extracts the pat_ident paths"}]}