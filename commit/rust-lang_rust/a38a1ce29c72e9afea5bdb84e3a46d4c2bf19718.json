{"sha": "a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOGExY2UyOWM3MmU5YWZlYTViZGI4NGUzYTQ2ZDRjMmJmMTk3MTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-24T22:27:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-25T15:53:32Z"}, "message": "Fix behaviour of divergence in while loop conditions\n\nThis fixes `'a: while break 'a {};` being treated as diverging, by tracking break expressions in the same way as in `loop` expressions.", "tree": {"sha": "4e7f4ebb6526cb3abe4572d792bc683269f8220a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7f4ebb6526cb3abe4572d792bc683269f8220a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "html_url": "https://github.com/rust-lang/rust/commit/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9823cb99c5779c0910a0d0a232966b37dfda73fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9823cb99c5779c0910a0d0a232966b37dfda73fd", "html_url": "https://github.com/rust-lang/rust/commit/9823cb99c5779c0910a0d0a232966b37dfda73fd"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "b0766f059130119eb95eaa422a78455cc7fda050", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "patch": "@@ -3841,10 +3841,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               let ctxt = BreakableCtxt {\n                   // cannot use break with a value from a while loop\n                   coerce: None,\n-                  may_break: true,\n+                  may_break: false,  // Will get updated if/when we find a `break`.\n               };\n \n-              self.with_breakable_ctxt(expr.id, ctxt, || {\n+              let (ctxt, ()) = self.with_breakable_ctxt(expr.id, ctxt, || {\n                   self.check_expr_has_type_or_error(&cond, tcx.types.bool);\n                   let cond_diverging = self.diverges.get();\n                   self.check_block_no_value(&body);\n@@ -3853,6 +3853,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                   self.diverges.set(cond_diverging);\n               });\n \n+              if ctxt.may_break {\n+                  // No way to know whether it's diverging because\n+                  // of a `break` or an outer `break` or `return`.\n+                  self.diverges.set(Diverges::Maybe);\n+              }\n+\n               self.tcx.mk_nil()\n           }\n           hir::ExprLoop(ref body, _, source) => {\n@@ -3871,7 +3877,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n               let ctxt = BreakableCtxt {\n                   coerce,\n-                  may_break: false, // will get updated if/when we find a `break`\n+                  may_break: false, // Will get updated if/when we find a `break`.\n               };\n \n               let (ctxt, ()) = self.with_breakable_ctxt(expr.id, ctxt, || {\n@@ -3880,7 +3886,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n               if ctxt.may_break {\n                   // No way to know whether it's diverging because\n-                  // of a `break` or an outer `break` or `return.\n+                  // of a `break` or an outer `break` or `return`.\n                   self.diverges.set(Diverges::Maybe);\n               }\n "}, {"sha": "cc5d17e42d52bcec181514e5011ab6b19d89c4f6", "filename": "src/test/ui/break-while-condition.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Ftest%2Fui%2Fbreak-while-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.rs?ref=a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+\n+fn main() {\n+    let _: ! = { //~ ERROR mismatched types\n+        'a: while break 'a {};\n+    };\n+}"}, {"sha": "5abf60c86d306db7052be26034288cf8f9491df7", "filename": "src/test/ui/break-while-condition.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=a38a1ce29c72e9afea5bdb84e3a46d4c2bf19718", "patch": "@@ -0,0 +1,15 @@\n+error[E0308]: mismatched types\n+  --> $DIR/break-while-condition.rs:14:16\n+   |\n+LL |       let _: ! = { //~ ERROR mismatched types\n+   |  ________________^\n+LL | |         'a: while break 'a {};\n+LL | |     };\n+   | |_____^ expected !, found ()\n+   |\n+   = note: expected type `!`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}