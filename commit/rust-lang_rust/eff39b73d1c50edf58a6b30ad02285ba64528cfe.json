{"sha": "eff39b73d1c50edf58a6b30ad02285ba64528cfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZjM5YjczZDFjNTBlZGY1OGE2YjMwYWQwMjI4NWJhNjQ1MjhjZmU=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-03-28T06:54:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-30T21:02:56Z"}, "message": "On-demandify region mapping", "tree": {"sha": "198baab81320ef586cfd7ecce94b066ab221b077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198baab81320ef586cfd7ecce94b066ab221b077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff39b73d1c50edf58a6b30ad02285ba64528cfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff39b73d1c50edf58a6b30ad02285ba64528cfe", "html_url": "https://github.com/rust-lang/rust/commit/eff39b73d1c50edf58a6b30ad02285ba64528cfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff39b73d1c50edf58a6b30ad02285ba64528cfe/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fb4d25642a3f223db1441972dd5962085cfba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fb4d25642a3f223db1441972dd5962085cfba1", "html_url": "https://github.com/rust-lang/rust/commit/06fb4d25642a3f223db1441972dd5962085cfba1"}], "stats": {"total": 251, "additions": 146, "deletions": 105}, "files": [{"sha": "8471d2ae4e32b176593292a55062fc1daeafa329", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -583,11 +583,11 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         scope_id: ast::NodeId,\n                         to_index: CFGIndex) {\n         let mut data = CFGEdgeData { exiting_scopes: vec![] };\n-        let mut scope = self.tcx.region_maps.node_extent(from_expr.id);\n-        let target_scope = self.tcx.region_maps.node_extent(scope_id);\n+        let mut scope = self.tcx.region_maps().node_extent(from_expr.id);\n+        let target_scope = self.tcx.region_maps().node_extent(scope_id);\n         while scope != target_scope {\n-            data.exiting_scopes.push(scope.node_id(&self.tcx.region_maps));\n-            scope = self.tcx.region_maps.encl_scope(scope);\n+            data.exiting_scopes.push(scope.node_id(&self.tcx.region_maps()));\n+            scope = self.tcx.region_maps().encl_scope(scope);\n         }\n         self.graph.add_edge(from_index, to_index, data);\n     }"}, {"sha": "d68a62e50303110be09daaafc234d539d3520cc3", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -438,7 +438,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a, 'tcx>> for ::middle::region::\n                                           hcx: &mut StableHashingContext<'a, 'tcx>,\n                                           hasher: &mut StableHasher<W>) {\n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hcx.tcx().region_maps.code_extent_data(*self).hash_stable(hcx, hasher);\n+            hcx.tcx().region_maps().code_extent_data(*self).hash_stable(hcx, hasher);\n         });\n     }\n }"}, {"sha": "febf6af8763b290e713cc80f66792e34e2eb24f7", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -123,14 +123,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     format!(\"{}unknown scope: {:?}{}.  Please report a bug.\",\n                             prefix, scope, suffix)\n                 };\n-                let span = match scope.span(&self.region_maps, &self.hir) {\n+                let span = match scope.span(&self.region_maps(), &self.hir) {\n                     Some(s) => s,\n                     None => {\n                         err.note(&unknown_scope());\n                         return;\n                     }\n                 };\n-                let tag = match self.hir.find(scope.node_id(&self.region_maps)) {\n+                let tag = match self.hir.find(scope.node_id(&self.region_maps())) {\n                     Some(hir_map::NodeBlock(_)) => \"block\",\n                     Some(hir_map::NodeExpr(expr)) => match expr.node {\n                         hir::ExprCall(..) => \"call\",\n@@ -150,7 +150,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         return;\n                     }\n                 };\n-                let scope_decorated_tag = match self.region_maps.code_extent_data(scope) {\n+                let scope_decorated_tag = match self.region_maps().code_extent_data(scope) {\n                     region::CodeExtentData::Misc(_) => tag,\n                     region::CodeExtentData::CallSiteScope { .. } => {\n                         \"scope of call-site for function\"\n@@ -183,7 +183,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 };\n \n-                let node = fr.scope.node_id(&self.region_maps);\n+                let node = fr.scope.node_id(&self.region_maps());\n                 let unknown;\n                 let tag = match self.hir.find(node) {\n                     Some(hir_map::NodeBlock(_)) |"}, {"sha": "f8d188fcaed38ba0b9b13bc225e757988bb2fcfb", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -159,7 +159,7 @@ impl<'a, 'gcx, 'tcx> ConstraintGraph<'a, 'gcx, 'tcx> {\n                 add_node(n2);\n             }\n \n-            tcx.region_maps.each_encl_scope(|sub, sup| {\n+            tcx.region_maps().each_encl_scope(|sub, sup| {\n                 add_node(Node::Region(ty::ReScope(*sub)));\n                 add_node(Node::Region(ty::ReScope(*sup)));\n             });\n@@ -245,7 +245,7 @@ impl<'a, 'gcx, 'tcx> dot::GraphWalk<'a> for ConstraintGraph<'a, 'gcx, 'tcx> {\n     fn edges(&self) -> dot::Edges<Edge<'tcx>> {\n         debug!(\"constraint graph has {} edges\", self.map.len());\n         let mut v: Vec<_> = self.map.keys().map(|e| Edge::Constraint(*e)).collect();\n-        self.tcx.region_maps.each_encl_scope(|sub, sup| v.push(Edge::EnclScope(*sub, *sup)));\n+        self.tcx.region_maps().each_encl_scope(|sub, sup| v.push(Edge::EnclScope(*sub, *sup)));\n         debug!(\"region graph has {} edges\", v.len());\n         Cow::Owned(v)\n     }"}, {"sha": "19752f3363ad7fdadb814919009419ccfd5aca91", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -938,7 +938,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 // A \"free\" region can be interpreted as \"some region\n                 // at least as big as the block fr.scope_id\".  So, we can\n                 // reasonably compare free regions and scopes:\n-                let r_id = self.tcx.region_maps.nearest_common_ancestor(fr.scope, s_id);\n+                let r_id = self.tcx.region_maps().nearest_common_ancestor(fr.scope, s_id);\n \n                 if r_id == fr.scope {\n                     // if the free region's scope `fr.scope_id` is bigger than\n@@ -957,7 +957,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 // subtype of the region corresponding to an inner\n                 // block.\n                 self.tcx.mk_region(ReScope(\n-                    self.tcx.region_maps.nearest_common_ancestor(a_id, b_id)))\n+                    self.tcx.region_maps().nearest_common_ancestor(a_id, b_id)))\n             }\n \n             (&ReFree(a_fr), &ReFree(b_fr)) => {"}, {"sha": "f622dfc683b60b34e0c596c12da94e755069b075", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -136,10 +136,10 @@ impl FreeRegionMap {\n                     true,\n \n                 (&ty::ReScope(sub_scope), &ty::ReScope(super_scope)) =>\n-                    tcx.region_maps.is_subscope_of(sub_scope, super_scope),\n+                    tcx.region_maps().is_subscope_of(sub_scope, super_scope),\n \n                 (&ty::ReScope(sub_scope), &ty::ReFree(fr)) =>\n-                    tcx.region_maps.is_subscope_of(sub_scope, fr.scope) ||\n+                    tcx.region_maps().is_subscope_of(sub_scope, fr.scope) ||\n                     self.is_static(fr),\n \n                 (&ty::ReFree(sub_fr), &ty::ReFree(super_fr)) =>"}, {"sha": "73c8d1db312bb4f6fd25fb89da6f69bfe111e9fa", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -1441,7 +1441,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // and must outlive the *call-site* of the function.\n         let fn_ret =\n             self.ir.tcx.liberate_late_bound_regions(\n-                self.ir.tcx.region_maps.call_site_extent(id, body.value.id),\n+                self.ir.tcx.region_maps().call_site_extent(id, body.value.id),\n                 &fn_ret);\n \n         if !fn_ret.is_never() && self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() {"}, {"sha": "b398255aedeb16880b09e73dd4708b81b54562a7", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -796,7 +796,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             // The environment of a closure is guaranteed to\n             // outlive any bindings introduced in the body of the\n             // closure itself.\n-            scope: self.tcx().region_maps.item_extent(fn_body_id),\n+            scope: self.tcx().region_maps().item_extent(fn_body_id),\n             bound_region: ty::BrEnv\n         }));\n \n@@ -845,7 +845,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     pub fn temporary_scope(&self, id: ast::NodeId) -> (&'tcx ty::Region, &'tcx ty::Region)\n     {\n         let (scope, old_scope) =\n-            self.tcx().region_maps.old_and_new_temporary_scope(id);\n+            self.tcx().region_maps().old_and_new_temporary_scope(id);\n         (self.tcx().mk_region(match scope {\n             Some(scope) => ty::ReScope(scope),\n             None => ty::ReStatic"}, {"sha": "18e76ff501182ab7984a97cda1e68d0e61f2b086", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -16,7 +16,6 @@\n //! Most of the documentation on regions can be found in\n //! `middle/infer/region_inference/README.md`\n \n-use dep_graph::DepNode;\n use hir::map as hir_map;\n use session::Session;\n use util::nodemap::{FxHashMap, NodeMap, NodeSet};\n@@ -26,11 +25,15 @@ use std::cell::RefCell;\n use std::collections::hash_map::Entry;\n use std::fmt;\n use std::mem;\n+use std::rc::Rc;\n use syntax::codemap;\n use syntax::ast::{self, NodeId};\n use syntax_pos::Span;\n+use ty::TyCtxt;\n+use ty::maps::Providers;\n \n use hir;\n+use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n use hir::{Block, Item, FnDecl, Arm, Pat, PatKind, Stmt, Expr, Local};\n \n@@ -44,8 +47,13 @@ impl fmt::Debug for CodeExtent {\n \n         ty::tls::with_opt(|opt_tcx| {\n             if let Some(tcx) = opt_tcx {\n-                if let Some(data) = tcx.region_maps.code_extents.borrow().get(self.0 as usize) {\n-                    write!(f, \"/{:?}\", data)?;\n+                let region_maps = tcx.region_maps();\n+                {\n+                    let code_extents = &region_maps.code_extents;\n+                    if let Some(data) = code_extents.borrow().get(self.0 as usize) {\n+                        write!(f, \"/{:?}\", data)?;\n+                    }\n+                    mem::drop(code_extents); // FIXME why is this necessary?\n                 }\n             }\n             Ok(())\n@@ -1256,9 +1264,19 @@ impl<'hir, 'a> Visitor<'hir> for RegionResolutionVisitor<'hir, 'a> {\n     }\n }\n \n-pub fn resolve_crate(sess: &Session, map: &hir_map::Map) -> RegionMaps {\n-    let _task = map.dep_graph.in_task(DepNode::RegionResolveCrate);\n-    let krate = map.krate();\n+pub fn resolve_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<RegionMaps> {\n+    tcx.region_resolve_crate(LOCAL_CRATE)\n+}\n+\n+fn region_resolve_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n+    -> Rc<RegionMaps>\n+{\n+    debug_assert!(crate_num == LOCAL_CRATE);\n+\n+    let sess = &tcx.sess;\n+    let hir_map = &tcx.hir;\n+\n+    let krate = hir_map.krate();\n \n     let maps = RegionMaps {\n         code_extents: RefCell::new(vec![]),\n@@ -1279,7 +1297,7 @@ pub fn resolve_crate(sess: &Session, map: &hir_map::Map) -> RegionMaps {\n         let mut visitor = RegionResolutionVisitor {\n             sess: sess,\n             region_maps: &maps,\n-            map: map,\n+            map: hir_map,\n             cx: Context {\n                 root_id: None,\n                 parent: ROOT_CODE_EXTENT,\n@@ -1289,5 +1307,12 @@ pub fn resolve_crate(sess: &Session, map: &hir_map::Map) -> RegionMaps {\n         };\n         krate.visit_all_item_likes(&mut visitor.as_deep_visitor());\n     }\n-    return maps;\n+    Rc::new(maps)\n+}\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        region_resolve_crate,\n+        ..*providers\n+    };\n }"}, {"sha": "98b502f5608e75b445d2e21cb805e4b0d5790e9d", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         // Search for a predicate like `Self : Sized` amongst the trait bounds.\n         let free_substs = self.construct_free_substs(def_id,\n-            self.region_maps.node_extent(ast::DUMMY_NODE_ID));\n+            self.region_maps().node_extent(ast::DUMMY_NODE_ID));\n         let predicates = self.predicates_of(def_id);\n         let predicates = predicates.instantiate(self, free_substs).predicates;\n         elaborate_predicates(self, predicates)"}, {"sha": "c6e9822da894ecf834ddbc950f8cced49695f529", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -51,6 +51,7 @@ use std::mem;\n use std::ops::Deref;\n use std::iter;\n use std::cmp::Ordering;\n+use std::rc::Rc;\n use syntax::abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n@@ -439,8 +440,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n-    pub region_maps: RegionMaps,\n-\n     pub hir: hir_map::Map<'tcx>,\n     pub maps: maps::Maps<'tcx>,\n \n@@ -678,6 +677,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         local as usize == global as usize\n     }\n \n+    pub fn region_maps(self) -> Rc<RegionMaps> {\n+        self.region_resolve_crate(LOCAL_CRATE)\n+    }\n+\n     /// Create a type context and call the closure with a `TyCtxt` reference\n     /// to the context. The closure enforces that the type context and any interned\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n@@ -690,7 +693,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   resolutions: ty::Resolutions,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   hir: hir_map::Map<'tcx>,\n-                                  region_maps: RegionMaps,\n                                   lang_items: middle::lang_items::LanguageItems,\n                                   stability: stability::Index<'tcx>,\n                                   crate_name: &str,\n@@ -714,7 +716,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map: named_region_map,\n-            region_maps: region_maps,\n             variance_computed: Cell::new(false),\n             trait_map: resolutions.trait_map,\n             export_map: resolutions.export_map,"}, {"sha": "abee0ae4ad63f3cde1562df0e8316a74ea005d6d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -14,6 +14,7 @@ use hir::def::Def;\n use hir;\n use middle::const_val;\n use middle::privacy::AccessLevels;\n+use middle::region::RegionMaps;\n use mir;\n use session::CompileResult;\n use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n@@ -291,6 +292,12 @@ impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::region_resolve_crate<'tcx> {\n+    fn describe(_: TyCtxt, _: CrateNum) -> String {\n+        format!(\"resolve crate\")\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -571,6 +578,8 @@ define_maps! { <'tcx>\n \n     [] reachable_set: reachability_dep_node(CrateNum) -> Rc<NodeSet>,\n \n+    [] region_resolve_crate: region_resolve_crate_dep_node(CrateNum) -> Rc<RegionMaps>,\n+\n     [] mir_shims: mir_shim_dep_node(ty::InstanceDef<'tcx>) -> &'tcx RefCell<mir::Mir<'tcx>>,\n \n     [] def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n@@ -592,6 +601,10 @@ fn reachability_dep_node(_: CrateNum) -> DepNode<DefId> {\n     DepNode::Reachability\n }\n \n+fn region_resolve_crate_dep_node(_: CrateNum) -> DepNode<DefId> {\n+    DepNode::RegionResolveCrate\n+}\n+\n fn mir_shim_dep_node(instance: ty::InstanceDef) -> DepNode<DefId> {\n     instance.dep_node()\n }\n@@ -608,4 +621,4 @@ fn typeck_item_bodies_dep_node(_: CrateNum) -> DepNode<DefId> {\n \n fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepNode<DefId> {\n     DepNode::ConstEval(def_id)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c0b340ad54455d329fcbf65f4c21d3b60094eab5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -1220,13 +1220,13 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                         let impl_def_id = tcx.hir.local_def_id(impl_id);\n                         tcx.construct_parameter_environment(impl_item.span,\n                                                             impl_def_id,\n-                                                            tcx.region_maps.item_extent(id))\n+                                                            tcx.region_maps().item_extent(id))\n                     }\n                     hir::ImplItemKind::Method(_, ref body) => {\n                         tcx.construct_parameter_environment(\n                             impl_item.span,\n                             tcx.hir.local_def_id(id),\n-                            tcx.region_maps.call_site_extent(id, body.node_id))\n+                            tcx.region_maps().call_site_extent(id, body.node_id))\n                     }\n                 }\n             }\n@@ -1239,18 +1239,18 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                         let trait_def_id = tcx.hir.local_def_id(trait_id);\n                         tcx.construct_parameter_environment(trait_item.span,\n                                                             trait_def_id,\n-                                                            tcx.region_maps.item_extent(id))\n+                                                            tcx.region_maps().item_extent(id))\n                     }\n                     hir::TraitItemKind::Method(_, ref body) => {\n                         // Use call-site for extent (unless this is a\n                         // trait method with no default; then fallback\n                         // to the method id).\n                         let extent = if let hir::TraitMethod::Provided(body_id) = *body {\n                             // default impl: use call_site extent as free_id_outlive bound.\n-                            tcx.region_maps.call_site_extent(id, body_id.node_id)\n+                            tcx.region_maps().call_site_extent(id, body_id.node_id)\n                         } else {\n                             // no default impl: use item extent as free_id_outlive bound.\n-                            tcx.region_maps.item_extent(id)\n+                            tcx.region_maps().item_extent(id)\n                         };\n                         tcx.construct_parameter_environment(\n                             trait_item.span,\n@@ -1268,7 +1268,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                         tcx.construct_parameter_environment(\n                             item.span,\n                             fn_def_id,\n-                            tcx.region_maps.call_site_extent(id, body_id.node_id))\n+                            tcx.region_maps().call_site_extent(id, body_id.node_id))\n                     }\n                     hir::ItemEnum(..) |\n                     hir::ItemStruct(..) |\n@@ -1280,13 +1280,13 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                         let def_id = tcx.hir.local_def_id(id);\n                         tcx.construct_parameter_environment(item.span,\n                                                             def_id,\n-                                                            tcx.region_maps.item_extent(id))\n+                                                            tcx.region_maps().item_extent(id))\n                     }\n                     hir::ItemTrait(..) => {\n                         let def_id = tcx.hir.local_def_id(id);\n                         tcx.construct_parameter_environment(item.span,\n                                                             def_id,\n-                                                            tcx.region_maps.item_extent(id))\n+                                                            tcx.region_maps().item_extent(id))\n                     }\n                     _ => {\n                         span_bug!(item.span,\n@@ -1304,7 +1304,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n                     tcx.construct_parameter_environment(\n                         expr.span,\n                         base_def_id,\n-                        tcx.region_maps.call_site_extent(id, body.node_id))\n+                        tcx.region_maps().call_site_extent(id, body.node_id))\n                 } else {\n                     tcx.empty_parameter_environment()\n                 }\n@@ -2474,7 +2474,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// See `ParameterEnvironment` struct def'n for details.\n-    /// If you were using `free_id: NodeId`, you might try `self.region_maps.item_extent(free_id)`\n+    /// If you were using `free_id: NodeId`, you might try `self.region_maps().item_extent(free_id)`\n     /// for the `free_id_outlive` parameter. (But note that this is not always quite right.)\n     pub fn construct_parameter_environment(self,\n                                            span: Span,\n@@ -2521,12 +2521,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             is_freeze_cache: RefCell::new(FxHashMap()),\n         };\n \n-        let cause = traits::ObligationCause::misc(span, free_id_outlive.node_id(&self.region_maps));\n+        let cause = traits::ObligationCause::misc(span,\n+                                                  free_id_outlive.node_id(&self.region_maps()));\n         traits::normalize_param_env_or_error(tcx, unnormalized_env, cause)\n     }\n \n     pub fn node_scope_region(self, id: NodeId) -> &'tcx Region {\n-        self.mk_region(ty::ReScope(self.region_maps.node_extent(id)))\n+        self.mk_region(ty::ReScope(self.region_maps().node_extent(id)))\n     }\n \n     pub fn visit_all_item_likes_in_krate<V,F>(self,"}, {"sha": "97cf9253038e7df1a79be4357944096e2a8fc454", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -239,8 +239,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         //! currently in scope.\n \n         let tcx = self.tcx();\n-        self.each_issued_loan(scope.node_id(&tcx.region_maps), |loan| {\n-            if tcx.region_maps.is_subscope_of(scope, loan.kill_scope) {\n+        self.each_issued_loan(scope.node_id(&tcx.region_maps()), |loan| {\n+            if tcx.region_maps().is_subscope_of(scope, loan.kill_scope) {\n                 op(loan)\n             } else {\n                 true\n@@ -379,7 +379,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                new_loan);\n \n         // Should only be called for loans that are in scope at the same time.\n-        assert!(self.tcx().region_maps.scopes_intersect(old_loan.kill_scope,\n+        assert!(self.tcx().region_maps().scopes_intersect(old_loan.kill_scope,\n                                                         new_loan.kill_scope));\n \n         self.report_error_if_loan_conflicts_with_restriction(\n@@ -460,7 +460,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             // 3. Where does old loan expire.\n \n             let previous_end_span =\n-                self.tcx().hir.span(old_loan.kill_scope.node_id(&self.tcx().region_maps))\n+                self.tcx().hir.span(old_loan.kill_scope.node_id(&self.tcx().region_maps()))\n                               .end_point();\n \n             let mut err = match (new_loan.kind, old_loan.kind) {\n@@ -710,7 +710,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         let mut ret = UseOk;\n \n         self.each_in_scope_loan_affecting_path(\n-            self.tcx().region_maps.node_extent(expr_id), use_path, |loan| {\n+            self.tcx().region_maps().node_extent(expr_id), use_path, |loan| {\n             if !compatible_borrow_kinds(loan.kind, borrow_kind) {\n                 ret = UseWhileBorrowed(loan.loan_path.clone(), loan.span);\n                 false\n@@ -824,7 +824,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n \n         // Check that we don't invalidate any outstanding loans\n         if let Some(loan_path) = opt_loan_path(&assignee_cmt) {\n-            let scope = self.tcx().region_maps.node_extent(assignment_id);\n+            let scope = self.tcx().region_maps().node_extent(assignment_id);\n             self.each_in_scope_loan_affecting_path(scope, &loan_path, |loan| {\n                 self.report_illegal_mutation(assignment_span, &loan_path, loan);\n                 false"}, {"sha": "2dfb4f1dd82d3e06c1063b8c423a821e70ed6a47", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             }\n             Categorization::Local(local_id) => {\n                 self.bccx.tcx.mk_region(ty::ReScope(\n-                    self.bccx.tcx.region_maps.var_scope(local_id)))\n+                    self.bccx.tcx.region_maps().var_scope(local_id)))\n             }\n             Categorization::StaticItem |\n             Categorization::Deref(.., mc::UnsafePtr(..)) => {"}, {"sha": "41fab1f3a4fc0a6b62f6a9293cd472ee7d2edeb5", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -45,7 +45,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         bccx: bccx,\n         infcx: &infcx,\n         all_loans: Vec::new(),\n-        item_ub: bccx.tcx.region_maps.node_extent(body.node_id),\n+        item_ub: bccx.tcx.region_maps().node_extent(body.node_id),\n         move_data: MoveData::new(),\n         move_error_collector: move_error::MoveErrorCollector::new(),\n     };\n@@ -371,7 +371,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n                 };\n                 debug!(\"loan_scope = {:?}\", loan_scope);\n \n-                let borrow_scope = self.tcx().region_maps.node_extent(borrow_id);\n+                let borrow_scope = self.tcx().region_maps().node_extent(borrow_id);\n                 let gen_scope = self.compute_gen_scope(borrow_scope, loan_scope);\n                 debug!(\"gen_scope = {:?}\", gen_scope);\n \n@@ -458,7 +458,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         //! notably method arguments, the loan may be introduced only\n         //! later, once it comes into scope.\n \n-        if self.bccx.tcx.region_maps.is_subscope_of(borrow_scope, loan_scope) {\n+        if self.bccx.tcx.region_maps().is_subscope_of(borrow_scope, loan_scope) {\n             borrow_scope\n         } else {\n             loan_scope\n@@ -489,11 +489,11 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         //! do not require restrictions and hence do not cause a loan.\n \n         let lexical_scope = lp.kill_scope(self.bccx.tcx);\n-        let rm = &self.bccx.tcx.region_maps;\n+        let rm = &self.bccx.tcx.region_maps();\n         if rm.is_subscope_of(lexical_scope, loan_scope) {\n             lexical_scope\n         } else {\n-            assert!(self.bccx.tcx.region_maps.is_subscope_of(loan_scope, lexical_scope));\n+            assert!(self.bccx.tcx.region_maps().is_subscope_of(loan_scope, lexical_scope));\n             loan_scope\n         }\n     }"}, {"sha": "2baec7418eb277672987b68a3fd1296a02d06f37", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -141,9 +141,9 @@ fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,\n                              id_range,\n                              all_loans.len());\n     for (loan_idx, loan) in all_loans.iter().enumerate() {\n-        loan_dfcx.add_gen(loan.gen_scope.node_id(&tcx.region_maps), loan_idx);\n+        loan_dfcx.add_gen(loan.gen_scope.node_id(&tcx.region_maps()), loan_idx);\n         loan_dfcx.add_kill(KillFrom::ScopeEnd,\n-                           loan.kill_scope.node_id(&tcx.region_maps), loan_idx);\n+                           loan.kill_scope.node_id(&tcx.region_maps()), loan_idx);\n     }\n     loan_dfcx.add_kills_from_flow_exits(cfg);\n     loan_dfcx.propagate(cfg, body);\n@@ -314,10 +314,10 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n impl<'a, 'tcx> LoanPath<'tcx> {\n     pub fn kill_scope(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> region::CodeExtent {\n         match self.kind {\n-            LpVar(local_id) => tcx.region_maps.var_scope(local_id),\n+            LpVar(local_id) => tcx.region_maps().var_scope(local_id),\n             LpUpvar(upvar_id) => {\n                 let block_id = closure_to_block(upvar_id.closure_expr_id, tcx);\n-                tcx.region_maps.node_extent(block_id)\n+                tcx.region_maps().node_extent(block_id)\n             }\n             LpDowncast(ref base, _) |\n             LpExtend(ref base, ..) => base.kill_scope(tcx),\n@@ -966,7 +966,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     fn region_end_span(&self, region: &'tcx ty::Region) -> Option<Span> {\n         match *region {\n             ty::ReScope(scope) => {\n-                match scope.span(&self.tcx.region_maps, &self.tcx.hir) {\n+                match scope.span(&self.tcx.region_maps(), &self.tcx.hir) {\n                     Some(s) => {\n                         Some(s.end_point())\n                     }\n@@ -1247,7 +1247,7 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n fn statement_scope_span(tcx: TyCtxt, region: &ty::Region) -> Option<Span> {\n     match *region {\n         ty::ReScope(scope) => {\n-            match tcx.hir.find(scope.node_id(&tcx.region_maps)) {\n+            match tcx.hir.find(scope.node_id(&tcx.region_maps())) {\n                 Some(hir_map::NodeStmt(stmt)) => Some(stmt.span),\n                 _ => None\n             }"}, {"sha": "60d0ab5ff823a6e61544280dee104d73a23f8175", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -548,7 +548,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                 LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n                     let kill_scope = path.loan_path.kill_scope(tcx);\n                     let path = *self.path_map.borrow().get(&path.loan_path).unwrap();\n-                    self.kill_moves(path, kill_scope.node_id(&tcx.region_maps),\n+                    self.kill_moves(path, kill_scope.node_id(&tcx.region_maps()),\n                                     KillFrom::ScopeEnd, dfcx_moves);\n                 }\n                 LpExtend(..) => {}\n@@ -563,7 +563,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                 LpVar(..) | LpUpvar(..) | LpDowncast(..) => {\n                     let kill_scope = lp.kill_scope(tcx);\n                     dfcx_assign.add_kill(KillFrom::ScopeEnd,\n-                                         kill_scope.node_id(&tcx.region_maps),\n+                                         kill_scope.node_id(&tcx.region_maps()),\n                                          assignment_index);\n                 }\n                 LpExtend(..) => {"}, {"sha": "bb3bda6827798b37cc37e79ee5f68fa57f7e9a86", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -874,10 +874,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     }));\n     sess.derive_registrar_fn.set(derive_registrar::find(&hir_map));\n \n-    let region_map = time(time_passes,\n-                          \"region resolution\",\n-                          || middle::region::resolve_crate(sess, &hir_map));\n-\n     time(time_passes,\n          \"loop checking\",\n          || loops::check_crate(sess, &hir_map));\n@@ -898,6 +894,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     ty::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_const_eval::provide(&mut local_providers);\n+    middle::region::provide(&mut local_providers);\n \n     let mut extern_providers = ty::maps::Providers::default();\n     cstore::provide(&mut extern_providers);\n@@ -914,7 +911,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              resolutions,\n                              named_region_map,\n                              hir_map,\n-                             region_map,\n                              lang_items,\n                              index,\n                              name,\n@@ -923,10 +919,15 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n             time(time_passes,\n                  \"compute_incremental_hashes_map\",\n                  || rustc_incremental::compute_incremental_hashes_map(tcx));\n+\n         time(time_passes,\n              \"load_dep_graph\",\n              || rustc_incremental::load_dep_graph(tcx, &incremental_hashes_map));\n \n+        time(time_passes,\n+             \"region resolution\",\n+             || middle::region::resolve_crate(tcx));\n+\n         time(time_passes, \"stability index\", || {\n             tcx.stability.borrow_mut().build(tcx)\n         });"}, {"sha": "f99f41c633e9f0c2b9a53d21e7ee819923dddb85", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -83,7 +83,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let_extent_stack.push(remainder_scope);\n \n                     // Declare the bindings, which may create a visibility scope.\n-                    let remainder_span = remainder_scope.span(&tcx.region_maps, &tcx.hir);\n+                    let remainder_span = remainder_scope.span(&tcx.region_maps(), &tcx.hir);\n                     let remainder_span = remainder_span.unwrap_or(span);\n                     let scope = this.declare_bindings(None, remainder_span, &pattern);\n "}, {"sha": "7c12c9ef5fadd103fec1f1734fe1a93538d8ebb9", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn schedule_drop_for_binding(&mut self, var: NodeId, span: Span) {\n         let local_id = self.var_indices[&var];\n         let var_ty = self.local_decls[local_id].ty;\n-        let extent = self.hir.tcx().region_maps.var_scope(var);\n+        let extent = self.hir.tcx().region_maps().var_scope(var);\n         self.schedule_drop(span, extent, &Lvalue::Local(local_id), var_ty);\n     }\n "}, {"sha": "2afaaaf0878542378573c05b9aef1f91b9ca0c10", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -137,10 +137,10 @@ pub fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let mut builder = Builder::new(hir, span, arguments.len(), return_ty);\n \n     let call_site_extent =\n-        tcx.region_maps.lookup_code_extent(\n+        tcx.region_maps().lookup_code_extent(\n             CodeExtentData::CallSiteScope { fn_id: fn_id, body_id: body.value.id });\n     let arg_extent =\n-        tcx.region_maps.lookup_code_extent(\n+        tcx.region_maps().lookup_code_extent(\n             CodeExtentData::ParameterScope { fn_id: fn_id, body_id: body.value.id });\n     let mut block = START_BLOCK;\n     unpack!(block = builder.in_scope(call_site_extent, block, |builder| {\n@@ -203,7 +203,7 @@ pub fn construct_const<'a, 'gcx, 'tcx>(hir: Cx<'a, 'gcx, 'tcx>,\n     let span = tcx.hir.span(tcx.hir.body_owner(body_id));\n     let mut builder = Builder::new(hir, span, 0, ty);\n \n-    let extent = tcx.region_maps.temporary_scope(ast_expr.id)\n+    let extent = tcx.region_maps().temporary_scope(ast_expr.id)\n                     .unwrap_or(ROOT_CODE_EXTENT);\n     let mut block = START_BLOCK;\n     let _ = builder.in_scope(extent, block, |builder| {"}, {"sha": "2a024454ecb4af3468e0ae25c6e487e5e768eded", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -411,7 +411,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // The outermost scope (`scopes[0]`) will be the `CallSiteScope`.\n         // We want `scopes[1]`, which is the `ParameterScope`.\n         assert!(self.scopes.len() >= 2);\n-        assert!(match self.hir.tcx().region_maps.code_extent_data(self.scopes[1].extent) {\n+        assert!(match self.hir.tcx().region_maps().code_extent_data(self.scopes[1].extent) {\n             CodeExtentData::ParameterScope { .. } => true,\n             _ => false,\n         });\n@@ -499,7 +499,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     scope.needs_cleanup = true;\n                 }\n                 let tcx = self.hir.tcx();\n-                let extent_span = extent.span(&tcx.region_maps, &tcx.hir).unwrap();\n+                let extent_span = extent.span(&tcx.region_maps(), &tcx.hir).unwrap();\n                 // Attribute scope exit drops to scope's closing brace\n                 let scope_end = Span { lo: extent_span.hi, .. extent_span};\n                 scope.drops.push(DropData {"}, {"sha": "1be07fba2b0cdf55a83a5cf3b5791cc26e1c8147", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -24,7 +24,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n         let stmts = mirror_stmts(cx, self.id, &*self.stmts);\n         Block {\n             targeted_by_break: self.targeted_by_break,\n-            extent: cx.tcx.region_maps.node_extent(self.id),\n+            extent: cx.tcx.region_maps().node_extent(self.id),\n             span: self.span,\n             stmts: stmts,\n             expr: self.expr.to_ref(),\n@@ -44,7 +44,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n                     span: stmt.span,\n                     kind: StmtKind::Expr {\n-                        scope: cx.tcx.region_maps.node_extent(id),\n+                        scope: cx.tcx.region_maps().node_extent(id),\n                         expr: expr.to_ref(),\n                     },\n                 })))\n@@ -60,14 +60,14 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             first_statement_index: index as u32,\n                         });\n                         let remainder_extent =\n-                            cx.tcx.region_maps.lookup_code_extent(remainder_extent);\n+                            cx.tcx.region_maps().lookup_code_extent(remainder_extent);\n \n                         let pattern = Pattern::from_hir(cx.tcx, cx.tables(), &local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             span: stmt.span,\n                             kind: StmtKind::Let {\n                                 remainder_scope: remainder_extent,\n-                                init_scope: cx.tcx.region_maps.node_extent(id),\n+                                init_scope: cx.tcx.region_maps().node_extent(id),\n                                 pattern: pattern,\n                                 initializer: local.init.to_ref(),\n                             },\n@@ -84,7 +84,7 @@ pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    block: &'tcx hir::Block)\n                                    -> ExprRef<'tcx> {\n     let block_ty = cx.tables().node_id_to_type(block.id);\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(block.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(block.id);\n     let expr = Expr {\n         ty: block_ty,\n         temp_lifetime: temp_lifetime,"}, {"sha": "ae63828f0ac76132163048e172d0bb427eda808f", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -26,8 +26,8 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n     type Output = Expr<'tcx>;\n \n     fn make_mirror<'a, 'gcx>(self, cx: &mut Cx<'a, 'gcx, 'tcx>) -> Expr<'tcx> {\n-        let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(self.id);\n-        let expr_extent = cx.tcx.region_maps.node_extent(self.id);\n+        let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(self.id);\n+        let expr_extent = cx.tcx.region_maps().node_extent(self.id);\n \n         debug!(\"Expr::make_mirror(): id={}, span={:?}\", self.id, self.span);\n \n@@ -216,7 +216,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n         };\n \n         // Finally, create a destruction scope, if any.\n-        if let Some(extent) = cx.tcx.region_maps.opt_destruction_extent(self.id) {\n+        if let Some(extent) = cx.tcx.region_maps().opt_destruction_extent(self.id) {\n             expr = Expr {\n                 temp_lifetime: temp_lifetime,\n                 temp_lifetime_was_shrunk: was_shrunk,\n@@ -238,7 +238,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                           expr: &'tcx hir::Expr)\n                                           -> Expr<'tcx> {\n     let expr_ty = cx.tables().expr_ty(expr);\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(expr.id);\n \n     let kind = match expr.node {\n         // Here comes the interesting stuff:\n@@ -610,7 +610,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             match dest.target_id {\n                 hir::ScopeTarget::Block(target_id) |\n                 hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(target_id)) => ExprKind::Break {\n-                    label: cx.tcx.region_maps.node_extent(target_id),\n+                    label: cx.tcx.region_maps().node_extent(target_id),\n                     value: value.to_ref(),\n                 },\n                 hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n@@ -621,7 +621,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             match dest.target_id {\n                 hir::ScopeTarget::Block(_) => bug!(\"cannot continue to blocks\"),\n                 hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(loop_id)) => ExprKind::Continue {\n-                    label: cx.tcx.region_maps.node_extent(loop_id),\n+                    label: cx.tcx.region_maps().node_extent(loop_id),\n                 },\n                 hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n                     bug!(\"invalid loop id for continue: {}\", err)\n@@ -686,7 +686,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprBox(ref value) => {\n             ExprKind::Box {\n                 value: value.to_ref(),\n-                value_extents: cx.tcx.region_maps.node_extent(value.id),\n+                value_extents: cx.tcx.region_maps().node_extent(value.id),\n             }\n         }\n         hir::ExprArray(ref fields) => ExprKind::Array { fields: fields.to_ref() },\n@@ -707,7 +707,7 @@ fn method_callee<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                  method_call: ty::MethodCall)\n                                  -> Expr<'tcx> {\n     let callee = cx.tables().method_map[&method_call];\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(expr.id);\n     Expr {\n         temp_lifetime: temp_lifetime,\n         temp_lifetime_was_shrunk: was_shrunk,\n@@ -791,7 +791,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                expr: &'tcx hir::Expr,\n                                def: Def)\n                                -> ExprKind<'tcx> {\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(expr.id);\n \n     match def {\n         Def::Local(def_id) => {\n@@ -828,7 +828,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             // signature will be &self or &mut self and hence will\n             // have a bound region with number 0\n             let region = ty::Region::ReFree(ty::FreeRegion {\n-                scope: cx.tcx.region_maps.node_extent(body_id),\n+                scope: cx.tcx.region_maps().node_extent(body_id),\n                 bound_region: ty::BoundRegion::BrAnon(0),\n             });\n             let region = cx.tcx.mk_region(region);\n@@ -979,7 +979,7 @@ fn overloaded_operator<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         PassArgs::ByRef => {\n             let region = cx.tcx.node_scope_region(expr.id);\n             let (temp_lifetime, was_shrunk) =\n-                cx.tcx.region_maps.temporary_scope2(expr.id);\n+                cx.tcx.region_maps().temporary_scope2(expr.id);\n             argrefs.extend(args.iter()\n                 .map(|arg| {\n                     let arg_ty = cx.tables().expr_ty_adjusted(arg);\n@@ -1031,7 +1031,7 @@ fn overloaded_lvalue<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     // construct the complete expression `foo()` for the overloaded call,\n     // which will yield the &T type\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(expr.id);\n     let ref_kind = overloaded_operator(cx, expr, method_call, pass_args, receiver, args);\n     let ref_expr = Expr {\n         temp_lifetime: temp_lifetime,\n@@ -1056,7 +1056,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         closure_expr_id: closure_expr.id,\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id).unwrap();\n-    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps.temporary_scope2(closure_expr.id);\n+    let (temp_lifetime, was_shrunk) = cx.tcx.region_maps().temporary_scope2(closure_expr.id);\n     let var_ty = cx.tables().node_id_to_type(id_var);\n     let captured_var = Expr {\n         temp_lifetime: temp_lifetime,"}, {"sha": "d8604f65dff92144c4585eb186db487dd5ac8662", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -253,7 +253,7 @@ fn closure_self_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_id);\n \n     let region = ty::Region::ReFree(ty::FreeRegion {\n-        scope: tcx.region_maps.item_extent(body_id.node_id),\n+        scope: tcx.region_maps().item_extent(body_id.node_id),\n         bound_region: ty::BoundRegion::BrEnv,\n     });\n     let region = tcx.mk_region(region);"}, {"sha": "eb897d10d25894f9b014b5c71775a3ae82589cf3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -133,7 +133,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             Some(&rl::Region::Free(scope, id)) => {\n                 let name = tcx.hir.name(id);\n                 tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                    scope: scope.to_code_extent(&tcx.region_maps),\n+                    scope: scope.to_code_extent(&tcx.region_maps()),\n                     bound_region: ty::BrNamed(tcx.hir.local_def_id(id), name)\n                 }))\n "}, {"sha": "c74d71babc2dfdd608c62f5a8810f18413567d62", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         debug!(\"check_closure: expr.id={:?} closure_type={:?}\", expr.id, closure_type);\n \n-        let extent = self.tcx.region_maps.call_site_extent(expr.id, body.value.id);\n+        let extent = self.tcx.region_maps().call_site_extent(expr.id, body.value.id);\n         let fn_sig = self.tcx.liberate_late_bound_regions(extent, &sig);\n         let fn_sig = self.inh.normalize_associated_types_in(body.value.span,\n                                                             body.value.id, &fn_sig);"}, {"sha": "4c9874cfa5a0732243f52fa233a7512810fc85c5", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -278,7 +278,7 @@ pub fn check_safety_of_destructor_if_necessary<'a, 'gcx, 'tcx>(\n            ty, scope);\n \n \n-    let parent_scope = match rcx.tcx.region_maps.opt_encl_scope(scope) {\n+    let parent_scope = match rcx.tcx.region_maps().opt_encl_scope(scope) {\n         Some(parent_scope) => parent_scope,\n         // If no enclosing scope, then it must be the root scope\n         // which cannot be outlived."}, {"sha": "e40d8f6cafca324a4637f66812ffecdd11485567", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -781,7 +781,7 @@ fn typeck_tables_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             check_abi(tcx, span, fn_sig.abi());\n \n             // Compute the fty from point of view of inside fn.\n-            let fn_scope = inh.tcx.region_maps.call_site_extent(id, body_id.node_id);\n+            let fn_scope = inh.tcx.region_maps().call_site_extent(id, body_id.node_id);\n             let fn_sig =\n                 fn_sig.subst(inh.tcx, &inh.parameter_environment.free_substs);\n             let fn_sig ="}, {"sha": "16297709b194a59d9f171cdc904fc87654b3813f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -276,7 +276,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let body_id = body.id();\n \n-        let call_site = self.tcx.region_maps.lookup_code_extent(\n+        let call_site = self.tcx.region_maps().lookup_code_extent(\n             region::CodeExtentData::CallSiteScope { fn_id: id, body_id: body_id.node_id });\n         let old_call_site_scope = self.set_call_site_scope(Some(call_site));\n \n@@ -302,7 +302,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n \n         let old_body_id = self.set_body_id(body_id.node_id);\n         self.relate_free_regions(&fn_sig_tys[..], body_id.node_id, span);\n-        self.link_fn_args(self.tcx.region_maps.node_extent(body_id.node_id), &body.arguments);\n+        self.link_fn_args(self.tcx.region_maps().node_extent(body_id.node_id), &body.arguments);\n         self.visit_body(body);\n         self.visit_region_obligations(body_id.node_id);\n \n@@ -450,7 +450,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             // that the lifetime of any regions that appear in a\n             // variable's type enclose at least the variable's scope.\n \n-            let var_scope = tcx.region_maps.var_scope(id);\n+            let var_scope = tcx.region_maps().var_scope(id);\n             let var_region = self.tcx.mk_region(ty::ReScope(var_scope));\n \n             let origin = infer::BindingTypeIsNotValidAtDecl(span);\n@@ -868,7 +868,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         // call occurs.\n         //\n         // FIXME(#6268) to support nested method calls, should be callee_id\n-        let callee_scope = self.tcx.region_maps.node_extent(call_expr.id);\n+        let callee_scope = self.tcx.region_maps().node_extent(call_expr.id);\n         let callee_region = self.tcx.mk_region(ty::ReScope(callee_scope));\n \n         debug!(\"callee_region={:?}\", callee_region);\n@@ -1021,7 +1021,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"constrain_index(index_expr=?, indexed_ty={}\",\n                self.ty_to_string(indexed_ty));\n \n-        let r_index_expr = ty::ReScope(self.tcx.region_maps.node_extent(index_expr.id));\n+        let r_index_expr = ty::ReScope(self.tcx.region_maps().node_extent(index_expr.id));\n         if let ty::TyRef(r_ptr, mt) = indexed_ty.sty {\n             match mt.ty.sty {\n                 ty::TySlice(_) | ty::TyStr => {"}, {"sha": "08024c9e9e691a9e82bbade0ded9a7ec0703333d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff39b73d1c50edf58a6b30ad02285ba64528cfe/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=eff39b73d1c50edf58a6b30ad02285ba64528cfe", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             let predicates = fcx.instantiate_bounds(item.span, def_id, free_substs);\n \n             let mut implied_bounds = vec![];\n-            let free_id_outlive = fcx.tcx.region_maps.call_site_extent(item.id, body_id.node_id);\n+            let free_id_outlive = fcx.tcx.region_maps().call_site_extent(item.id, body_id.node_id);\n             this.check_fn_or_method(fcx, item.span, sig, &predicates,\n                                     free_id_outlive, &mut implied_bounds);\n             implied_bounds"}]}