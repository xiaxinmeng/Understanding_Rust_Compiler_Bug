{"sha": "bf801590503447cc5b1ddd520b39d2957d90368b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODAxNTkwNTAzNDQ3Y2M1YjFkZGQ1MjBiMzlkMjk1N2Q5MDM2OGI=", "commit": {"author": {"name": "Andrew Sun", "email": "me@andrewsun.com", "date": "2021-01-06T08:23:54Z"}, "committer": {"name": "Andrew Sun", "email": "me@andrewsun.com", "date": "2021-01-06T08:23:54Z"}, "message": "Make target-cpu=native detect individual features", "tree": {"sha": "f56dd8a57494ba3938a46f40497ce1452c042c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56dd8a57494ba3938a46f40497ce1452c042c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf801590503447cc5b1ddd520b39d2957d90368b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf801590503447cc5b1ddd520b39d2957d90368b", "html_url": "https://github.com/rust-lang/rust/commit/bf801590503447cc5b1ddd520b39d2957d90368b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf801590503447cc5b1ddd520b39d2957d90368b/comments", "author": {"login": "as-com", "id": 3819625, "node_id": "MDQ6VXNlcjM4MTk2MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3819625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/as-com", "html_url": "https://github.com/as-com", "followers_url": "https://api.github.com/users/as-com/followers", "following_url": "https://api.github.com/users/as-com/following{/other_user}", "gists_url": "https://api.github.com/users/as-com/gists{/gist_id}", "starred_url": "https://api.github.com/users/as-com/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/as-com/subscriptions", "organizations_url": "https://api.github.com/users/as-com/orgs", "repos_url": "https://api.github.com/users/as-com/repos", "events_url": "https://api.github.com/users/as-com/events{/privacy}", "received_events_url": "https://api.github.com/users/as-com/received_events", "type": "User", "site_admin": false}, "committer": {"login": "as-com", "id": 3819625, "node_id": "MDQ6VXNlcjM4MTk2MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/3819625?v=4", "gravatar_id": "", "url": "https://api.github.com/users/as-com", "html_url": "https://github.com/as-com", "followers_url": "https://api.github.com/users/as-com/followers", "following_url": "https://api.github.com/users/as-com/following{/other_user}", "gists_url": "https://api.github.com/users/as-com/gists{/gist_id}", "starred_url": "https://api.github.com/users/as-com/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/as-com/subscriptions", "organizations_url": "https://api.github.com/users/as-com/orgs", "repos_url": "https://api.github.com/users/as-com/repos", "events_url": "https://api.github.com/users/as-com/events{/privacy}", "received_events_url": "https://api.github.com/users/as-com/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41601ef39442bca19bc6ac8ef72e5d89335e92d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41601ef39442bca19bc6ac8ef72e5d89335e92d7", "html_url": "https://github.com/rust-lang/rust/commit/41601ef39442bca19bc6ac8ef72e5d89335e92d7"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "68f319ade1e79b808f14ec6cb0166a3f68f7f7dd", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=bf801590503447cc5b1ddd520b39d2957d90368b", "patch": "@@ -164,7 +164,8 @@ pub fn target_machine_factory(\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n-    let features = attributes::llvm_target_features(sess).collect::<Vec<_>>();\n+    let mut features = llvm_util::handle_native_features(sess);\n+    features.extend(attributes::llvm_target_features(sess).map(|s| s.to_owned()));\n     let mut singlethread = sess.target.singlethread;\n \n     // On the wasm target once the `atomics` feature is enabled that means that"}, {"sha": "502f3b44af1aaf0c336c87d482fe60ac8681fe02", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=bf801590503447cc5b1ddd520b39d2957d90368b", "patch": "@@ -12,6 +12,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]\n+#![feature(stdsimd)]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}, {"sha": "2da06e6babe71bf7b1898e291ade71a75e4b1b0c", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801590503447cc5b1ddd520b39d2957d90368b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=bf801590503447cc5b1ddd520b39d2957d90368b", "patch": "@@ -10,6 +10,7 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use std::ffi::CString;\n \n+use std::detect;\n use std::slice;\n use std::str;\n use std::sync::atomic::{AtomicBool, Ordering};\n@@ -221,6 +222,25 @@ pub fn target_cpu(sess: &Session) -> &str {\n     handle_native(name)\n }\n \n+pub fn handle_native_features(sess: &Session) -> Vec<String> {\n+    const LLVM_NOT_RECOGNIZED: &[&str] = &[\"tsc\"];\n+\n+    match sess.opts.cg.target_cpu {\n+        Some(ref s) => {\n+            if s != \"native\" {\n+                return vec![];\n+            }\n+\n+            detect::features()\n+                .map(|(feature, support)| (to_llvm_feature(sess, feature), support))\n+                .filter(|(feature, _)| !LLVM_NOT_RECOGNIZED.contains(feature))\n+                .map(|(feature, support)| (if support { \"+\" } else { \"-\" }).to_owned() + feature)\n+                .collect()\n+        }\n+        None => vec![],\n+    }\n+}\n+\n pub fn tune_cpu(sess: &Session) -> Option<&str> {\n     match sess.opts.debugging_opts.tune_cpu {\n         Some(ref s) => Some(handle_native(&**s)),"}]}