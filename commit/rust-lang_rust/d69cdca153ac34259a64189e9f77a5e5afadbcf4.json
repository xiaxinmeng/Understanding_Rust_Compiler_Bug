{"sha": "d69cdca153ac34259a64189e9f77a5e5afadbcf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OWNkY2ExNTNhYzM0MjU5YTY0MTg5ZTlmNzdhNWU1YWZhZGJjZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-08T06:48:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-08T06:48:45Z"}, "message": "Auto merge of #42998 - behnam:uni-ver-type, r=sfackler\n\n[libstd_unicode] Change UNICODE_VERSION to use u32\n\nLooks like there's no strong reason to keep these values at `u64`.\n\nWith the current plans for the Unicode Standard, `u8` should be enough for the next 200 years. To stay on the safe side, I'm using `u16` here. I don't see a reason to go with anything machine-dependent/more-efficient.", "tree": {"sha": "53abd969a946615566dd44e3dfb03be5692b88d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53abd969a946615566dd44e3dfb03be5692b88d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69cdca153ac34259a64189e9f77a5e5afadbcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69cdca153ac34259a64189e9f77a5e5afadbcf4", "html_url": "https://github.com/rust-lang/rust/commit/d69cdca153ac34259a64189e9f77a5e5afadbcf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69cdca153ac34259a64189e9f77a5e5afadbcf4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4e1a5036db1085d118ab83f76be431695602f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4e1a5036db1085d118ab83f76be431695602f6", "html_url": "https://github.com/rust-lang/rust/commit/7c4e1a5036db1085d118ab83f76be431695602f6"}, {"sha": "42f886110afd8c944c9a94d82d65e17bf704f03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f886110afd8c944c9a94d82d65e17bf704f03f", "html_url": "https://github.com/rust-lang/rust/commit/42f886110afd8c944c9a94d82d65e17bf704f03f"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "1e8a0be80966da3e37e352194a0f04ddec5e0472", "filename": "src/libstd_unicode/tables.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d69cdca153ac34259a64189e9f77a5e5afadbcf4/src%2Flibstd_unicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69cdca153ac34259a64189e9f77a5e5afadbcf4/src%2Flibstd_unicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Ftables.rs?ref=d69cdca153ac34259a64189e9f77a5e5afadbcf4", "patch": "@@ -12,9 +12,32 @@\n \n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n-/// The version of [Unicode](http://www.unicode.org/)\n-/// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n-pub const UNICODE_VERSION: (u64, u64, u64) = (10, 0, 0);\n+/// Represents a Unicode Version.\n+///\n+/// See also: <http://www.unicode.org/versions/>\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub struct UnicodeVersion {\n+    /// Major version.\n+    pub major: u32,\n+\n+    /// Minor version.\n+    pub minor: u32,\n+\n+    /// Micro (or Update) version.\n+    pub micro: u32,\n+\n+    // Private field to keep struct expandable.\n+    _priv: (),\n+}\n+\n+/// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n+/// `CharExt` and `UnicodeStrPrelude` traits are based on.\n+pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n+    major: 10,\n+    minor: 0,\n+    micro: 0,\n+    _priv: (),\n+};\n \n \n // BoolTrie is a trie for representing a set of Unicode codepoints. It is"}, {"sha": "1fac859242eab676c3e96abffd3af12dc905f714", "filename": "src/libstd_unicode/unicode.py", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d69cdca153ac34259a64189e9f77a5e5afadbcf4/src%2Flibstd_unicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/d69cdca153ac34259a64189e9f77a5e5afadbcf4/src%2Flibstd_unicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Funicode.py?ref=d69cdca153ac34259a64189e9f77a5e5afadbcf4", "patch": "@@ -560,9 +560,32 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n             pattern = \"for Version (\\d+)\\.(\\d+)\\.(\\d+) of the Unicode\"\n             unicode_version = re.search(pattern, readme.read()).groups()\n         rf.write(\"\"\"\n-/// The version of [Unicode](http://www.unicode.org/)\n-/// that the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.\n-pub const UNICODE_VERSION: (u64, u64, u64) = (%s, %s, %s);\n+/// Represents a Unicode Version.\n+///\n+/// See also: <http://www.unicode.org/versions/>\n+#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+pub struct UnicodeVersion {\n+    /// Major version.\n+    pub major: u32,\n+\n+    /// Minor version.\n+    pub minor: u32,\n+\n+    /// Micro (or Update) version.\n+    pub micro: u32,\n+\n+    // Private field to keep struct expandable.\n+    _priv: (),\n+}\n+\n+/// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n+/// `CharExt` and `UnicodeStrPrelude` traits are based on.\n+pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n+    major: %s,\n+    minor: %s,\n+    micro: %s,\n+    _priv: (),\n+};\n \"\"\" % unicode_version)\n         (canon_decomp, compat_decomp, gencats, combines,\n                 to_upper, to_lower, to_title) = load_unicode_data(\"UnicodeData.txt\")"}]}