{"sha": "16201da6a4ff613d00ca3680c43cbb1b52f60cf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MjAxZGE2YTRmZjYxM2QwMGNhMzY4MGM0M2NiYjFiNTJmNjBjZjE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T10:29:13Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-18T10:29:13Z"}, "message": "Rename panic_box to panic_any.", "tree": {"sha": "9afbcb52d62e9d4a288c6a1281f096ef017f71ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afbcb52d62e9d4a288c6a1281f096ef017f71ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16201da6a4ff613d00ca3680c43cbb1b52f60cf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16201da6a4ff613d00ca3680c43cbb1b52f60cf1", "html_url": "https://github.com/rust-lang/rust/commit/16201da6a4ff613d00ca3680c43cbb1b52f60cf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16201da6a4ff613d00ca3680c43cbb1b52f60cf1/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b0aff1df1dd5ee7c60e8fbeff15cc3edaa3208", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b0aff1df1dd5ee7c60e8fbeff15cc3edaa3208", "html_url": "https://github.com/rust-lang/rust/commit/01b0aff1df1dd5ee7c60e8fbeff15cc3edaa3208"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9a756e4bbb4d4488758b3489677d61d47f9efd2e", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16201da6a4ff613d00ca3680c43cbb1b52f60cf1/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16201da6a4ff613d00ca3680c43cbb1b52f60cf1/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=16201da6a4ff613d00ca3680c43cbb1b52f60cf1", "patch": "@@ -23,17 +23,17 @@ pub use crate::panicking::{set_hook, take_hook};\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n pub use core::panic::{Location, PanicInfo};\n \n-/// Panic the current thread, with the given payload as the panic message.\n+/// Panic the current thread with the given message as the panic payload.\n ///\n-/// This supports an arbitrary panic payload, instead of just (formatted) strings.\n+/// The message can be of any (`Any + Send`) type, not just strings.\n ///\n-/// The message is attached as a `Box<'static + Any + Send>`, which can be\n-/// accessed using [`PanicInfo::payload`].\n+/// The message is wrapped in a `Box<'static + Any + Send>`, which can be\n+/// accessed later using [`PanicInfo::payload`].\n ///\n /// See the [`panic!`] macro for more information about panicking.\n #[unstable(feature = \"panic_box\", issue = \"none\")]\n #[inline]\n-pub fn panic_box<M: Any + Send>(msg: M) -> ! {\n+pub fn panic_any<M: Any + Send>(msg: M) -> ! {\n     crate::panicking::begin_panic(msg);\n }\n "}]}