{"sha": "84406d438c6c49aa63875096e5f3cca1a3879f17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NDA2ZDQzOGM2YzQ5YWE2Mzg3NTA5NmU1ZjNjY2ExYTM4NzlmMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-16T04:41:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-16T04:41:29Z"}, "message": "auto merge of #14213 : kballard/rust/str_from_utf8_result, r=cmr\n\nChange `str::from_utf8_owned()` and `StrBuf::from_utf8()` to return `Result`.\r\n\r\nThis allows the vector to be recovered when it contains invalid UTF-8.", "tree": {"sha": "7a6fd3d17580bc611d1d9c6bd5774f70c847b58c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6fd3d17580bc611d1d9c6bd5774f70c847b58c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84406d438c6c49aa63875096e5f3cca1a3879f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84406d438c6c49aa63875096e5f3cca1a3879f17", "html_url": "https://github.com/rust-lang/rust/commit/84406d438c6c49aa63875096e5f3cca1a3879f17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84406d438c6c49aa63875096e5f3cca1a3879f17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632d48640113ab75833f5b2ae613532b8209c9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/632d48640113ab75833f5b2ae613532b8209c9b2", "html_url": "https://github.com/rust-lang/rust/commit/632d48640113ab75833f5b2ae613532b8209c9b2"}, {"sha": "ba7844a7fff0061e5b4528c2ecd5adf765145b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7844a7fff0061e5b4528c2ecd5adf765145b70", "html_url": "https://github.com/rust-lang/rust/commit/ba7844a7fff0061e5b4528c2ecd5adf765145b70"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "5cd555cad8ea9e66517a809da0926bdd050c8a25", "filename": "src/doc/complement-cheatsheet.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Fdoc%2Fcomplement-cheatsheet.md", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Fdoc%2Fcomplement-cheatsheet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-cheatsheet.md?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -60,7 +60,7 @@ To return an Owned String (~str) use the str helper function [`from_utf8_owned`]\n ~~~\n use std::str;\n \n-let x: Option<~str> = str::from_utf8_owned(~[104u8,105u8]);\n+let x: Result<~str,~[u8]> = str::from_utf8_owned(~[104u8,105u8]);\n let y: ~str = x.unwrap();\n ~~~\n "}, {"sha": "5702557526fa82f805328b79f9ea2f9a92992e0a", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -181,9 +181,8 @@ impl<'a> FromBase64 for &'a str {\n      * Convert any base64 encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_utf8_owned` function in `std::str`\n-     * to turn a `[u8]` into a string with characters corresponding to those\n-     * values.\n+     * You can use the `StrBuf::from_utf8` function in `std::strbuf` to turn a\n+     * `Vec<u8>` into a string with characters corresponding to those values.\n      *\n      * # Example\n      *\n@@ -199,7 +198,7 @@ impl<'a> FromBase64 for &'a str {\n      *     let res = hello_str.from_base64();\n      *     if res.is_ok() {\n      *       let opt_bytes = StrBuf::from_utf8(res.unwrap());\n-     *       if opt_bytes.is_some() {\n+     *       if opt_bytes.is_ok() {\n      *         println!(\"decoded from base64: {}\", opt_bytes.unwrap());\n      *       }\n      *     }"}, {"sha": "2b9ba763b2ebb45c2b29afecebfa32da2d359730", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -80,9 +80,8 @@ impl<'a> FromHex for &'a str {\n      * Convert any hexadecimal encoded string (literal, `@`, `&`, or `~`)\n      * to the byte values it encodes.\n      *\n-     * You can use the `from_utf8_owned` function in `std::str`\n-     * to turn a `[u8]` into a string with characters corresponding to those\n-     * values.\n+     * You can use the `StrBuf::from_utf8` function in `std::strbuf` to turn a\n+     * `Vec<u8>` into a string with characters corresponding to those values.\n      *\n      * # Example\n      *"}, {"sha": "63d6219ab8af5fce6bb44ad756fcc3bdbbe788d7", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -19,6 +19,7 @@ use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n+use result::ResultUnwrap;\n use slice::{CloneableVector, ImmutableVector, MutableVector};\n use std::cmp::{Ord, Eq};\n use str::{StrAllocating, StrSlice};"}, {"sha": "b1dab4c3c60c8a707c0393bc7fc85b3ba4fc3782", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -87,6 +87,7 @@ use iter::{Iterator, range, AdditiveIterator};\n use mem::transmute;\n use mem;\n use option::{None, Option, Some};\n+use result::{Result, Ok, Err};\n use slice::Vector;\n use slice::{ImmutableVector, MutableVector, CloneableVector};\n use strbuf::StrBuf;\n@@ -105,12 +106,14 @@ Section: Creating a string\n */\n \n /// Consumes a vector of bytes to create a new utf-8 string.\n-/// Returns None if the vector contains invalid UTF-8.\n-pub fn from_utf8_owned(vv: ~[u8]) -> Option<~str> {\n+///\n+/// Returns `Err` with the original vector if the vector contains invalid\n+/// UTF-8.\n+pub fn from_utf8_owned(vv: ~[u8]) -> Result<~str, ~[u8]> {\n     if is_utf8(vv) {\n-        Some(unsafe { raw::from_utf8_owned(vv) })\n+        Ok(unsafe { raw::from_utf8_owned(vv) })\n     } else {\n-        None\n+        Err(vv)\n     }\n }\n \n@@ -2120,13 +2123,13 @@ mod tests {\n     #[test]\n     fn test_str_from_utf8_owned() {\n         let xs = bytes!(\"hello\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), Some(\"hello\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"hello\".to_owned()));\n \n         let xs = bytes!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\").to_owned();\n-        assert_eq!(from_utf8_owned(xs), Some(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_owned()));\n+        assert_eq!(from_utf8_owned(xs), Ok(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".to_owned()));\n \n         let xs = bytes!(\"hello\", 0xff).to_owned();\n-        assert_eq!(from_utf8_owned(xs), None);\n+        assert_eq!(from_utf8_owned(xs), Err(bytes!(\"hello\", 0xff).to_owned()));\n     }\n \n     #[test]"}, {"sha": "de480ef1b7fb7ddb4a6d5923bd90c6af8a389aa0", "filename": "src/libstd/strbuf.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fstrbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84406d438c6c49aa63875096e5f3cca1a3879f17/src%2Flibstd%2Fstrbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstrbuf.rs?ref=84406d438c6c49aa63875096e5f3cca1a3879f17", "patch": "@@ -20,6 +20,7 @@ use mem;\n use option::{None, Option, Some};\n use ptr::RawPtr;\n use ptr;\n+use result::{Result, Ok, Err};\n use slice::{OwnedVector, Vector, CloneableVector};\n use str::{CharRange, OwnedStr, Str, StrSlice, StrAllocating};\n use str;\n@@ -72,14 +73,17 @@ impl StrBuf {\n         }\n     }\n \n-    /// Tries to create a new string buffer from the given byte\n-    /// vector, validating that the vector is UTF-8 encoded.\n+    /// Returns the vector as a string buffer, if possible, taking care not to\n+    /// copy it.\n+    ///\n+    /// Returns `Err` with the original vector if the vector contains invalid\n+    /// UTF-8.\n     #[inline]\n-    pub fn from_utf8(vec: Vec<u8>) -> Option<StrBuf> {\n+    pub fn from_utf8(vec: Vec<u8>) -> Result<StrBuf, Vec<u8>> {\n         if str::is_utf8(vec.as_slice()) {\n-            Some(StrBuf { vec: vec })\n+            Ok(StrBuf { vec: vec })\n         } else {\n-            None\n+            Err(vec)\n         }\n     }\n "}]}