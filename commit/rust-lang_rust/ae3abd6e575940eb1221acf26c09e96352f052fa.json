{"sha": "ae3abd6e575940eb1221acf26c09e96352f052fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlM2FiZDZlNTc1OTQwZWIxMjIxYWNmMjZjMDllOTYzNTJmMDUyZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-13T14:45:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-13T15:02:44Z"}, "message": "Rename ra_ssr -> ssr", "tree": {"sha": "b9c7e76342b631709ecc7cea807dd82a43539312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9c7e76342b631709ecc7cea807dd82a43539312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae3abd6e575940eb1221acf26c09e96352f052fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae3abd6e575940eb1221acf26c09e96352f052fa", "html_url": "https://github.com/rust-lang/rust/commit/ae3abd6e575940eb1221acf26c09e96352f052fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae3abd6e575940eb1221acf26c09e96352f052fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77", "html_url": "https://github.com/rust-lang/rust/commit/bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77"}], "stats": {"total": 205, "additions": 95, "deletions": 110}, "files": [{"sha": "4d8b748392d0e4c262104b76a31894c8c828b6a2", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -1135,28 +1135,14 @@ dependencies = [\n  \"oorandom\",\n  \"profile\",\n  \"ra_assists\",\n- \"ra_ssr\",\n  \"rustc-hash\",\n+ \"ssr\",\n  \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n  \"text_edit\",\n ]\n \n-[[package]]\n-name = \"ra_ssr\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"base_db\",\n- \"expect\",\n- \"hir\",\n- \"ide_db\",\n- \"rustc-hash\",\n- \"syntax\",\n- \"test_utils\",\n- \"text_edit\",\n-]\n-\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -1254,11 +1240,11 @@ dependencies = [\n  \"profile\",\n  \"project_model\",\n  \"ra_ide\",\n- \"ra_ssr\",\n  \"rayon\",\n  \"rustc-hash\",\n  \"serde\",\n  \"serde_json\",\n+ \"ssr\",\n  \"stdx\",\n  \"syntax\",\n  \"test_utils\",\n@@ -1456,6 +1442,20 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"ssr\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"base_db\",\n+ \"expect\",\n+ \"hir\",\n+ \"ide_db\",\n+ \"rustc-hash\",\n+ \"syntax\",\n+ \"test_utils\",\n+ \"text_edit\",\n+]\n+\n [[package]]\n name = \"stdx\"\n version = \"0.1.0\""}, {"sha": "8519e9ccaec7a4a9021b854d33c4e7f5d075ffa5", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -29,7 +29,7 @@ cfg = { path = \"../cfg\" }\n profile = { path = \"../profile\" }\n test_utils = { path = \"../test_utils\" }\n ra_assists = { path = \"../ra_assists\" }\n-ra_ssr = { path = \"../ra_ssr\" }\n+ssr = { path = \"../ssr\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "bbc9e4b8af2764353c8d78832f7db3cd6d4926bb", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -39,7 +39,6 @@ mod matching_brace;\n mod parent_module;\n mod references;\n mod runnables;\n-mod ssr;\n mod status;\n mod syntax_highlighting;\n mod syntax_tree;\n@@ -95,7 +94,7 @@ pub use ide_db::{\n     RootDatabase,\n };\n pub use ra_assists::{Assist, AssistConfig, AssistId, AssistKind, ResolvedAssist};\n-pub use ra_ssr::SsrError;\n+pub use ssr::SsrError;\n pub use text_edit::{Indel, TextEdit};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n@@ -515,20 +514,23 @@ impl Analysis {\n         &self,\n         query: &str,\n         parse_only: bool,\n-        position: FilePosition,\n+        resolve_context: FilePosition,\n         selections: Vec<FileRange>,\n     ) -> Cancelable<Result<SourceChange, SsrError>> {\n         self.with_db(|db| {\n-            let edits = ssr::parse_search_replace(query, parse_only, db, position, selections)?;\n+            let rule: ssr::SsrRule = query.parse()?;\n+            let mut match_finder = ssr::MatchFinder::in_context(db, resolve_context, selections);\n+            match_finder.add_rule(rule)?;\n+            let edits = if parse_only { Vec::new() } else { match_finder.edits() };\n             Ok(SourceChange::from(edits))\n         })\n     }\n \n     /// Performs an operation on that may be Canceled.\n-    fn with_db<F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe, T>(\n-        &self,\n-        f: F,\n-    ) -> Cancelable<T> {\n+    fn with_db<F, T>(&self, f: F) -> Cancelable<T>\n+    where\n+        F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe,\n+    {\n         self.db.catch_canceled(f)\n     }\n }"}, {"sha": "a8a7041923b6d8d4189c53d2e9df177948ac56ee", "filename": "crates/ra_ide/src/ssr.rs", "status": "removed", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=bb5c189b7dae1ea63ccd5d7a0c2e097d7c676f77", "patch": "@@ -1,72 +0,0 @@\n-use base_db::{FilePosition, FileRange};\n-use ide_db::RootDatabase;\n-\n-use crate::SourceFileEdit;\n-use ra_ssr::{MatchFinder, SsrError, SsrRule};\n-\n-// Feature: Structural Search and Replace\n-//\n-// Search and replace with named wildcards that will match any expression, type, path, pattern or item.\n-// The syntax for a structural search replace command is `<search_pattern> ==>> <replace_pattern>`.\n-// A `$<name>` placeholder in the search pattern will match any AST node and `$<name>` will reference it in the replacement.\n-// Within a macro call, a placeholder will match up until whatever token follows the placeholder.\n-//\n-// All paths in both the search pattern and the replacement template must resolve in the context\n-// in which this command is invoked. Paths in the search pattern will then match the code if they\n-// resolve to the same item, even if they're written differently. For example if we invoke the\n-// command in the module `foo` with a pattern of `Bar`, then code in the parent module that refers\n-// to `foo::Bar` will match.\n-//\n-// Paths in the replacement template will be rendered appropriately for the context in which the\n-// replacement occurs. For example if our replacement template is `foo::Bar` and we match some\n-// code in the `foo` module, we'll insert just `Bar`.\n-//\n-// Inherent method calls should generally be written in UFCS form. e.g. `foo::Bar::baz($s, $a)` will\n-// match `$s.baz($a)`, provided the method call `baz` resolves to the method `foo::Bar::baz`.\n-//\n-// The scope of the search / replace will be restricted to the current selection if any, otherwise\n-// it will apply to the whole workspace.\n-//\n-// Placeholders may be given constraints by writing them as `${<name>:<constraint1>:<constraint2>...}`.\n-//\n-// Supported constraints:\n-//\n-// |===\n-// | Constraint    | Restricts placeholder\n-//\n-// | kind(literal) | Is a literal (e.g. `42` or `\"forty two\"`)\n-// | not(a)        | Negates the constraint `a`\n-// |===\n-//\n-// Available via the command `rust-analyzer.ssr`.\n-//\n-// ```rust\n-// // Using structural search replace command [foo($a, $b) ==>> ($a).foo($b)]\n-//\n-// // BEFORE\n-// String::from(foo(y + 5, z))\n-//\n-// // AFTER\n-// String::from((y + 5).foo(z))\n-// ```\n-//\n-// |===\n-// | Editor  | Action Name\n-//\n-// | VS Code | **Rust Analyzer: Structural Search Replace**\n-// |===\n-pub fn parse_search_replace(\n-    rule: &str,\n-    parse_only: bool,\n-    db: &RootDatabase,\n-    resolve_context: FilePosition,\n-    selections: Vec<FileRange>,\n-) -> Result<Vec<SourceFileEdit>, SsrError> {\n-    let rule: SsrRule = rule.parse()?;\n-    let mut match_finder = MatchFinder::in_context(db, resolve_context, selections);\n-    match_finder.add_rule(rule)?;\n-    if parse_only {\n-        return Ok(Vec::new());\n-    }\n-    Ok(match_finder.edits())\n-}"}, {"sha": "749cf648c6f7d25b91ed0f2030955c4e8dfda438", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -48,7 +48,7 @@ toolchain = { path = \"../toolchain\" }\n # This should only be used in CLI\n base_db = { path = \"../base_db\" }\n ide_db = { path = \"../ide_db\" }\n-ra_ssr = { path = \"../ra_ssr\" }\n+ssr = { path = \"../ssr\" }\n hir = { path = \"../hir\" }\n hir_def = { path = \"../hir_def\" }\n hir_ty = { path = \"../hir_ty\" }"}, {"sha": "0bc92431a9a0b7d69c15f11478fed5e56e61cfc9", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -7,8 +7,8 @@ use std::{env, fmt::Write, path::PathBuf};\n \n use anyhow::{bail, Result};\n use pico_args::Arguments;\n-use ra_ssr::{SsrPattern, SsrRule};\n use rust_analyzer::cli::{AnalysisStatsCmd, BenchCmd, BenchWhat, Position, Verbosity};\n+use ssr::{SsrPattern, SsrRule};\n use vfs::AbsPathBuf;\n \n pub(crate) struct Args {"}, {"sha": "b237a94d113ad7164a6d6ca3294522667c783963", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -13,11 +13,13 @@ use anyhow::Result;\n use ra_ide::Analysis;\n use syntax::{AstNode, SourceFile};\n \n-pub use analysis_bench::{BenchCmd, BenchWhat, Position};\n-pub use analysis_stats::AnalysisStatsCmd;\n-pub use diagnostics::diagnostics;\n-pub use load_cargo::load_cargo;\n-pub use ssr::{apply_ssr_rules, search_for_patterns};\n+pub use self::{\n+    analysis_bench::{BenchCmd, BenchWhat, Position},\n+    analysis_stats::AnalysisStatsCmd,\n+    diagnostics::diagnostics,\n+    load_cargo::load_cargo,\n+    ssr::{apply_ssr_rules, search_for_patterns},\n+};\n \n #[derive(Clone, Copy)]\n pub enum Verbosity {"}, {"sha": "c11e109437191c97884162ca281ab5bda42d49e2", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -1,7 +1,7 @@\n //! Applies structured search replace rules from the command line.\n \n use crate::cli::{load_cargo::load_cargo, Result};\n-use ra_ssr::{MatchFinder, SsrPattern, SsrRule};\n+use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use base_db::SourceDatabaseExt;"}, {"sha": "cd05eeecc89df21946564cec7792e70e6307c10d", "filename": "crates/ssr/Cargo.toml", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2FCargo.toml?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -1,22 +1,23 @@\n [package]\n-edition = \"2018\"\n-name = \"ra_ssr\"\n+name = \"ssr\"\n version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n-license = \"MIT OR Apache-2.0\"\n description = \"Structural search and replace of Rust code\"\n+license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n \n [lib]\n doctest = false\n \n [dependencies]\n+rustc-hash = \"1.1.0\"\n+\n text_edit = { path = \"../text_edit\" }\n syntax = { path = \"../syntax\" }\n base_db = { path = \"../base_db\" }\n ide_db = { path = \"../ide_db\" }\n hir = { path = \"../hir\" }\n-rustc-hash = \"1.1.0\"\n test_utils = { path = \"../test_utils\" }\n \n [dev-dependencies]", "previous_filename": "crates/ra_ssr/Cargo.toml"}, {"sha": "c02bacae6bfe68f2ed94a114011ecb805006844e", "filename": "crates/ssr/src/errors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ferrors.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/errors.rs"}, {"sha": "292bd5b9a73a6ffc25c9c83ae7157ddf6f07b8b2", "filename": "crates/ssr/src/lib.rs", "status": "renamed", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Flib.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "patch": "@@ -3,6 +3,58 @@\n //! Allows searching the AST for code that matches one or more patterns and then replacing that code\n //! based on a template.\n \n+// Feature: Structural Search and Replace\n+//\n+// Search and replace with named wildcards that will match any expression, type, path, pattern or item.\n+// The syntax for a structural search replace command is `<search_pattern> ==>> <replace_pattern>`.\n+// A `$<name>` placeholder in the search pattern will match any AST node and `$<name>` will reference it in the replacement.\n+// Within a macro call, a placeholder will match up until whatever token follows the placeholder.\n+//\n+// All paths in both the search pattern and the replacement template must resolve in the context\n+// in which this command is invoked. Paths in the search pattern will then match the code if they\n+// resolve to the same item, even if they're written differently. For example if we invoke the\n+// command in the module `foo` with a pattern of `Bar`, then code in the parent module that refers\n+// to `foo::Bar` will match.\n+//\n+// Paths in the replacement template will be rendered appropriately for the context in which the\n+// replacement occurs. For example if our replacement template is `foo::Bar` and we match some\n+// code in the `foo` module, we'll insert just `Bar`.\n+//\n+// Inherent method calls should generally be written in UFCS form. e.g. `foo::Bar::baz($s, $a)` will\n+// match `$s.baz($a)`, provided the method call `baz` resolves to the method `foo::Bar::baz`.\n+//\n+// The scope of the search / replace will be restricted to the current selection if any, otherwise\n+// it will apply to the whole workspace.\n+//\n+// Placeholders may be given constraints by writing them as `${<name>:<constraint1>:<constraint2>...}`.\n+//\n+// Supported constraints:\n+//\n+// |===\n+// | Constraint    | Restricts placeholder\n+//\n+// | kind(literal) | Is a literal (e.g. `42` or `\"forty two\"`)\n+// | not(a)        | Negates the constraint `a`\n+// |===\n+//\n+// Available via the command `rust-analyzer.ssr`.\n+//\n+// ```rust\n+// // Using structural search replace command [foo($a, $b) ==>> ($a).foo($b)]\n+//\n+// // BEFORE\n+// String::from(foo(y + 5, z))\n+//\n+// // AFTER\n+// String::from((y + 5).foo(z))\n+// ```\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Structural Search Replace**\n+// |===\n+\n mod matching;\n mod nester;\n mod parsing;", "previous_filename": "crates/ra_ssr/src/lib.rs"}, {"sha": "ffc7202ae560fb09061259e57c53291a568ca39b", "filename": "crates/ssr/src/matching.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/matching.rs"}, {"sha": "6ac355dfc22b47db29349f465f97391daaf60f35", "filename": "crates/ssr/src/nester.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fnester.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fnester.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fnester.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/nester.rs"}, {"sha": "9570e96e36eee441bb29da6930e66a1d2cb0f7fc", "filename": "crates/ssr/src/parsing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fparsing.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/parsing.rs"}, {"sha": "8f8fe6149a57d45dfe8e57c28f1041721d52be8e", "filename": "crates/ssr/src/replacing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Freplacing.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/replacing.rs"}, {"sha": "020fd799413822d22261fb20d2605d4019e5e32d", "filename": "crates/ssr/src/resolving.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fresolving.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/resolving.rs"}, {"sha": "8509cfa4dea0d0ec07e48ad1f845ba0b27cf9138", "filename": "crates/ssr/src/search.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fsearch.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/search.rs"}, {"sha": "0d0a0009064213db0c4b5e48d1ee8b783bc14ac3", "filename": "crates/ssr/src/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae3abd6e575940eb1221acf26c09e96352f052fa/crates%2Fssr%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Ftests.rs?ref=ae3abd6e575940eb1221acf26c09e96352f052fa", "previous_filename": "crates/ra_ssr/src/tests.rs"}]}