{"sha": "6830052c7b87217886324129bffbe096e485d415", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MzAwNTJjN2I4NzIxNzg4NjMyNDEyOWJmZmJlMDk2ZTQ4NWQ0MTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T05:09:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-26T05:09:27Z"}, "message": "Auto merge of #86637 - ehuss:spellings, r=dtolnay\n\nFix a few misspellings.", "tree": {"sha": "0e94aad4f26baa4d8032dfdc226763e89bd1e437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e94aad4f26baa4d8032dfdc226763e89bd1e437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6830052c7b87217886324129bffbe096e485d415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6830052c7b87217886324129bffbe096e485d415", "html_url": "https://github.com/rust-lang/rust/commit/6830052c7b87217886324129bffbe096e485d415", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6830052c7b87217886324129bffbe096e485d415/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca6d9baa9775d41691e43703755612a953dc8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca6d9baa9775d41691e43703755612a953dc8a5", "html_url": "https://github.com/rust-lang/rust/commit/bca6d9baa9775d41691e43703755612a953dc8a5"}, {"sha": "6235e6f93f85134b82500656d9120a58ec7ca328", "url": "https://api.github.com/repos/rust-lang/rust/commits/6235e6f93f85134b82500656d9120a58ec7ca328", "html_url": "https://github.com/rust-lang/rust/commit/6235e6f93f85134b82500656d9120a58ec7ca328"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "53970b485eecd6a8d7616d149c931e8e066afe0d", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -3249,7 +3249,7 @@ declare_lint! {\n     ///\n     /// In Rust 2021, one of the important introductions is the [prelude changes], which add\n     /// `TryFrom`, `TryInto`, and `FromIterator` into the standard library's prelude. Since this\n-    /// results in an amiguity as to which method/function to call when an existing `try_into`\n+    /// results in an ambiguity as to which method/function to call when an existing `try_into`\n     ///  method is called via dot-call syntax or a `try_from`/`from_iter` associated function\n     ///  is called directly on a type.\n     ///"}, {"sha": "c4861817dd05da395b86aa137136a194cf086b27", "filename": "library/alloc/src/collections/btree/fix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ffix.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -3,7 +3,7 @@ use super::node::{marker, ForceResult::*, Handle, LeftOrRight::*, NodeRef, Root}\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n     /// Stocks up a possibly underfull node by merging with or stealing from a\n-    /// sibling. If succesful but at the cost of shrinking the parent node,\n+    /// sibling. If successful but at the cost of shrinking the parent node,\n     /// returns that shrunk parent node. Returns an `Err` if the node is\n     /// an empty root.\n     fn fix_node_through_parent("}, {"sha": "30d237d8bbc547fa77a22c0f5b037c709958652b", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -167,7 +167,7 @@ type BoxedNode<K, V> = NonNull<LeafNode<K, V>>;\n ///   carry a lifetime, because we want it to return `&'a` references.\n ///   Therefore, we define it only for the least powerful type `Immut<'a>`.\n /// - We cannot get implicit coercion from say `Mut<'a>` to `Immut<'a>`.\n-///   Therefore, we have to explicitly call `reborrow` on a more powerfull\n+///   Therefore, we have to explicitly call `reborrow` on a more powerful\n ///   `NodeRef` in order to reach a method like `into_kv`.\n ///\n /// All methods on `NodeRef` that return some kind of reference, either:"}, {"sha": "879deed3bed5e63a11a9886723742f54f76a486f", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -41,7 +41,7 @@ use self::Ordering::*;\n ///\n /// If [`PartialOrd`] or [`Ord`] are also implemented for `Self` and `Rhs`, their methods must also\n /// be consistent with `PartialEq` (see the documentation of those traits for the exact\n-/// requirememts). It's easy to accidentally make them disagree by deriving some of the traits and\n+/// requirements). It's easy to accidentally make them disagree by deriving some of the traits and\n /// manually implementing others.\n ///\n /// The equality relation `==` must satisfy the following conditions"}, {"sha": "a3fbf4d9c38d8ceddbecd69773339ae3988f065d", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -54,7 +54,7 @@ pub use self::zip::TrustedRandomAccess;\n #[unstable(feature = \"iter_zip\", issue = \"83574\")]\n pub use self::zip::zip;\n \n-/// This trait provides transitive access to source-stage in an interator-adapter pipeline\n+/// This trait provides transitive access to source-stage in an iterator-adapter pipeline\n /// under the conditions that\n /// * the iterator source `S` itself implements `SourceIter<Source = S>`\n /// * there is a delegating implementation of this trait for each adapter in the pipeline between"}, {"sha": "3dfbd98fa6c7bf4c1929209eb4a7c82e7d883679", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -980,7 +980,7 @@ impl<T> MaybeUninit<T> {\n         this.as_mut_ptr() as *mut T\n     }\n \n-    /// Copies the elements from `src` to `this`, returning a mutable reference to the now initalized contents of `this`.\n+    /// Copies the elements from `src` to `this`, returning a mutable reference to the now initialized contents of `this`.\n     ///\n     /// If `T` does not implement `Copy`, use [`write_slice_cloned`]\n     ///\n@@ -1033,12 +1033,12 @@ impl<T> MaybeUninit<T> {\n \n         this.copy_from_slice(uninit_src);\n \n-        // SAFETY: Valid elements have just been copied into `this` so it is initalized\n+        // SAFETY: Valid elements have just been copied into `this` so it is initialized\n         unsafe { MaybeUninit::slice_assume_init_mut(this) }\n     }\n \n-    /// Clones the elements from `src` to `this`, returning a mutable reference to the now initalized contents of `this`.\n-    /// Any already initalized elements will not be dropped.\n+    /// Clones the elements from `src` to `this`, returning a mutable reference to the now initialized contents of `this`.\n+    /// Any already initialized elements will not be dropped.\n     ///\n     /// If `T` implements `Copy`, use [`write_slice`]\n     ///\n@@ -1124,7 +1124,7 @@ impl<T> MaybeUninit<T> {\n \n         super::forget(guard);\n \n-        // SAFETY: Valid elements have just been written into `this` so it is initalized\n+        // SAFETY: Valid elements have just been written into `this` so it is initialized\n         unsafe { MaybeUninit::slice_assume_init_mut(this) }\n     }\n }"}, {"sha": "287ae69acd198984683a34e89241d6221c2a3ce2", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -101,7 +101,7 @@ pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {\n ///\n /// This function is safe but the returned pointer is not necessarily safe to dereference.\n /// For slices, see the documentation of [`slice::from_raw_parts`] for safety requirements.\n-/// For trait objects, the metadata must come from a pointer to the same underlying ereased type.\n+/// For trait objects, the metadata must come from a pointer to the same underlying erased type.\n ///\n /// [`slice::from_raw_parts`]: crate::slice::from_raw_parts\n #[unstable(feature = \"ptr_metadata\", issue = \"81513\")]"}, {"sha": "42432563faf33bb9b4df0e66cee8ad56b990ec1b", "filename": "library/proc_macro/src/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -246,7 +246,7 @@ impl<S> DecodeMut<'_, '_, S> for String {\n     }\n }\n \n-/// Simplied version of panic payloads, ignoring\n+/// Simplified version of panic payloads, ignoring\n /// types other than `&'static str` and `String`.\n pub enum PanicMessage {\n     StaticStr(&'static str),"}, {"sha": "605bd33a4bf22f9e7546d3cc88f8d673064173c5", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -971,7 +971,7 @@ mod match_keyword {}\n /// ```\n ///\n /// Like [`struct`]s and [`enum`]s, a module and its content are private by\n-/// default, unaccessible to code outside of the module.\n+/// default, inaccessible to code outside of the module.\n ///\n /// To learn more about allowing access, see the documentation for the [`pub`]\n /// keyword."}, {"sha": "f3b5227df869df2f17644767897383282d89959a", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -226,7 +226,7 @@ pub trait ExitStatusExt: Sealed {\n     ///\n     /// Panics on an attempt to make an `ExitStatusError` from a wait status of `0`.\n     ///\n-    /// Making an `ExitStatus` always succeds and never panics.\n+    /// Making an `ExitStatus` always succeeds and never panics.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n "}, {"sha": "6f523728d7b69f64d00d94ee16f18d62dd8908a4", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -1568,7 +1568,7 @@ impl ExitStatusError {\n \n     /// Reports the exit code, if applicable, from an `ExitStatusError`, as a `NonZero`\n     ///\n-    /// This is exaclty like [`code()`](Self::code), except that it returns a `NonZeroI32`.\n+    /// This is exactly like [`code()`](Self::code), except that it returns a `NonZeroI32`.\n     ///\n     /// Plain `code`, returning a plain integer, is provided because is is often more convenient.\n     /// The returned value from `code()` is indeed also nonzero; use `code_nonzero()` when you want"}, {"sha": "4221799114b533e6db3617ff06c7477eede151cf", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6830052c7b87217886324129bffbe096e485d415/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=6830052c7b87217886324129bffbe096e485d415", "patch": "@@ -14,7 +14,7 @@ use crate::sys::hermit::abi;\n /// This structure behaves a lot like a common mutex. There are some differences:\n ///\n /// - By using busy waiting, it can be used outside the runtime.\n-/// - It is a so called ticket lock and is completly fair.\n+/// - It is a so called ticket lock and is completely fair.\n #[cfg_attr(target_arch = \"x86_64\", repr(align(128)))]\n #[cfg_attr(not(target_arch = \"x86_64\"), repr(align(64)))]\n struct Spinlock<T: ?Sized> {"}]}