{"sha": "88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "node_id": "C_kwDOAAsO6NoAKDg4NjAwYTZkN2Y4ZjZlYjhmODViMTdiMjhhMTdlMDdlYjNhNzM1ZTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-19T01:09:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-01-21T23:22:24Z"}, "message": "Rename `Decoder::read_nil` and `read_unit`.\n\nBecause `()` is called \"unit\" and it makes it match\n`Encoder::emit_unit`.", "tree": {"sha": "b77c2c71bcd0edd8f5e5dbbc838f1ab3908296da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b77c2c71bcd0edd8f5e5dbbc838f1ab3908296da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "html_url": "https://github.com/rust-lang/rust/commit/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbaeec14f90b59a91a6b0f17fc046c66fa811892", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbaeec14f90b59a91a6b0f17fc046c66fa811892", "html_url": "https://github.com/rust-lang/rust/commit/cbaeec14f90b59a91a6b0f17fc046c66fa811892"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0dd10a1d06620dfbf80e6e4c4c94bf0cf095d130", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "patch": "@@ -2419,7 +2419,7 @@ impl<S: Encoder> rustc_serialize::Encodable<S> for AttrId {\n \n impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {\n     fn decode(d: &mut D) -> Result<AttrId, D::Error> {\n-        d.read_nil().map(|_| crate::attr::mk_attr_id())\n+        d.read_unit().map(|_| crate::attr::mk_attr_id())\n     }\n }\n "}, {"sha": "eb46cdac1da4e7494ea44a7d42bee304a24bac89", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "patch": "@@ -459,7 +459,7 @@ macro_rules! implement_ty_decoder {\n                 type Error = String;\n \n                 $crate::__impl_decoder_methods! {\n-                    read_nil -> ();\n+                    read_unit -> ();\n \n                     read_u128 -> u128;\n                     read_u64 -> u64;"}, {"sha": "d3d72ba72a79667633a4918566fa3783b5c59a2a", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "patch": "@@ -2240,7 +2240,7 @@ macro_rules! read_primitive {\n impl crate::Decoder for Decoder {\n     type Error = DecoderError;\n \n-    fn read_nil(&mut self) -> DecodeResult<()> {\n+    fn read_unit(&mut self) -> DecodeResult<()> {\n         expect!(self.pop(), Null)\n     }\n "}, {"sha": "7e515abbe7b051a9cc639da6b6948ab753245dee", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "patch": "@@ -567,7 +567,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     type Error = String;\n \n     #[inline]\n-    fn read_nil(&mut self) -> Result<(), Self::Error> {\n+    fn read_unit(&mut self) -> Result<(), Self::Error> {\n         Ok(())\n     }\n "}, {"sha": "e5104b14724b449981268b3ce911424fcdfaa779", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=88600a6d7f8f6eb8f85b17b28a17e07eb3a735e5", "patch": "@@ -177,7 +177,7 @@ pub trait Decoder {\n     type Error;\n \n     // Primitive types:\n-    fn read_nil(&mut self) -> Result<(), Self::Error>;\n+    fn read_unit(&mut self) -> Result<(), Self::Error>;\n     fn read_usize(&mut self) -> Result<usize, Self::Error>;\n     fn read_u128(&mut self) -> Result<u128, Self::Error>;\n     fn read_u64(&mut self) -> Result<u64, Self::Error>;\n@@ -436,7 +436,7 @@ impl<S: Encoder> Encodable<S> for () {\n \n impl<D: Decoder> Decodable<D> for () {\n     fn decode(d: &mut D) -> Result<(), D::Error> {\n-        d.read_nil()\n+        d.read_unit()\n     }\n }\n \n@@ -448,7 +448,7 @@ impl<S: Encoder, T> Encodable<S> for PhantomData<T> {\n \n impl<D: Decoder, T> Decodable<D> for PhantomData<T> {\n     fn decode(d: &mut D) -> Result<PhantomData<T>, D::Error> {\n-        d.read_nil()?;\n+        d.read_unit()?;\n         Ok(PhantomData)\n     }\n }"}]}