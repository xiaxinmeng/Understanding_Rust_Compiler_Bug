{"sha": "2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmODRmYjVjYzFhYzVmMDRiZGY1YTI4MTk5N2UwMmJjZjRmYzE4ZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T04:26:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-26T04:26:19Z"}, "message": "Auto merge of #46033 - sinkuu:const-enum-match-check, r=arielb1\n\nDo match-check for consts\n\nFixes #43195 (ICE caused by building MIR that contains non-exausitive match)", "tree": {"sha": "f420fc9945cea3345529c5af66b9d93eed0058a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f420fc9945cea3345529c5af66b9d93eed0058a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "html_url": "https://github.com/rust-lang/rust/commit/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693bb0dae24101f1699949ec02917167a6c172d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/693bb0dae24101f1699949ec02917167a6c172d5", "html_url": "https://github.com/rust-lang/rust/commit/693bb0dae24101f1699949ec02917167a6c172d5"}, {"sha": "62cb74af3cb0abc4243a5e7db090749b0100d827", "url": "https://api.github.com/repos/rust-lang/rust/commits/62cb74af3cb0abc4243a5e7db090749b0100d827", "html_url": "https://github.com/rust-lang/rust/commit/62cb74af3cb0abc4243a5e7db090749b0100d827"}], "stats": {"total": 138, "additions": 109, "deletions": 29}, "files": [{"sha": "d44fdd5d9b978d66730b85bfbd32ff33d644c599", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -516,6 +516,7 @@ define_dep_nodes!( <'tcx>\n     [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)> },\n+    [] CheckMatch(DefId),\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },\n     [] SpecializationGraph(DefId),"}, {"sha": "9609ae5a0beb855bfd906627845a6e4915f9c4a8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -371,7 +371,8 @@ for ::middle::const_val::ErrKind<'gcx> {\n             MiscBinaryOp |\n             MiscCatchAll |\n             IndexOpFeatureGated |\n-            TypeckError => {\n+            TypeckError |\n+            CheckMatchError => {\n                 // nothing to do\n             }\n             UnimplementedConstVal(s) => {"}, {"sha": "440af39a0d4695ca72c61c8d53c199726cc199db", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -106,7 +106,8 @@ pub enum ErrKind<'tcx> {\n \n     ErroneousReferencedConstant(Box<ConstEvalErr<'tcx>>),\n \n-    TypeckError\n+    TypeckError,\n+    CheckMatchError,\n }\n \n impl<'tcx> From<ConstMathErr> for ErrKind<'tcx> {\n@@ -168,6 +169,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n             ErroneousReferencedConstant(_) => simple!(\"could not evaluate referenced constant\"),\n \n             TypeckError => simple!(\"type-checking failed\"),\n+            CheckMatchError => simple!(\"match-checking failed\"),\n         }\n     }\n \n@@ -212,8 +214,9 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         primary_span: Span,\n         primary_kind: &str)\n     {\n-        if let ErrKind::TypeckError = self.kind {\n-            return;\n+        match self.kind {\n+            ErrKind::TypeckError | ErrKind::CheckMatchError => return,\n+            _ => {}\n         }\n         self.struct_error(tcx, primary_span, primary_kind).emit();\n     }"}, {"sha": "18c60394a8ed5fdc13788eeec7f21fbdb428ee3a", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -37,7 +37,7 @@ use ty::{self, CrateInherentImpls, Ty, TyCtxt};\n use ty::steal::Steal;\n use ty::subst::Substs;\n use util::nodemap::{DefIdSet, DefIdMap, ItemLocalSet};\n-use util::common::{profq_msg, ProfileQueriesMsg};\n+use util::common::{profq_msg, ErrorReported, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n use rustc_back::PanicStrategy;\n@@ -205,6 +205,9 @@ define_maps! { <'tcx>\n     [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n         -> const_val::EvalResult<'tcx>,\n \n+    [] fn check_match: CheckMatch(DefId)\n+        -> Result<(), ErrorReported>,\n+\n     /// Performs the privacy check and computes \"access levels\".\n     [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Rc<AccessLevels>,\n "}, {"sha": "7f8c8deb5451d30e3adbb03f8bc004841b6c23af", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -800,6 +800,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::SpecializationGraph => { force!(specialization_graph_of, def_id!()); }\n         DepKind::ObjectSafety => { force!(is_object_safe, def_id!()); }\n         DepKind::TraitImpls => { force!(trait_impls_of, def_id!()); }\n+        DepKind::CheckMatch => { force!(check_match, def_id!()); }\n \n         DepKind::ParamEnv => { force!(param_env, def_id!()); }\n         DepKind::DescribeDef => { force!(describe_def, def_id!()); }"}, {"sha": "08152942379178ffc4fb36b03935b06844576052", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -477,6 +477,7 @@ impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n             }\n \n             TypeckError => TypeckError,\n+            CheckMatchError => CheckMatchError,\n         })\n     }\n }"}, {"sha": "762b9787c8d35d0b48a99585e9121a0d2649bf29", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -24,9 +24,11 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::lint;\n use rustc_errors::DiagnosticBuilder;\n+use rustc::util::common::ErrorReported;\n \n use rustc::hir::def::*;\n-use rustc::hir::intravisit::{self, Visitor, FnKind, NestedVisitorMap};\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Pat, PatKind};\n \n use rustc_back::slice;\n@@ -42,19 +44,10 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir)\n     }\n \n-    fn visit_fn(&mut self, fk: FnKind<'tcx>, fd: &'tcx hir::FnDecl,\n-                b: hir::BodyId, s: Span, id: ast::NodeId) {\n-        intravisit::walk_fn(self, fk, fd, b, s, id);\n-\n-        let def_id = self.tcx.hir.local_def_id(id);\n-\n-        MatchVisitor {\n-            tcx: self.tcx,\n-            tables: self.tcx.body_tables(b),\n-            region_scope_tree: &self.tcx.region_scope_tree(def_id),\n-            param_env: self.tcx.param_env(def_id),\n-            identity_substs: Substs::identity_for_item(self.tcx, def_id),\n-        }.visit_body(self.tcx.hir.body(b));\n+    fn visit_body(&mut self, body: &'tcx hir::Body) {\n+        intravisit::walk_body(self, body);\n+        let def_id = self.tcx.hir.body_owner_def_id(body.id());\n+        let _ = self.tcx.check_match(def_id);\n     }\n }\n \n@@ -63,6 +56,27 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.sess.abort_if_errors();\n }\n \n+pub(crate) fn check_match<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Result<(), ErrorReported> {\n+    let body_id = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+        tcx.hir.body_owned_by(id)\n+    } else {\n+        return Ok(());\n+    };\n+\n+    tcx.sess.track_errors(|| {\n+        MatchVisitor {\n+            tcx,\n+            tables: tcx.body_tables(body_id),\n+            region_scope_tree: &tcx.region_scope_tree(def_id),\n+            param_env: tcx.param_env(def_id),\n+            identity_substs: Substs::identity_for_item(tcx, def_id),\n+        }.visit_body(tcx.hir.body(body_id));\n+    })\n+}\n+\n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {\n     struct_span_err!(sess, sp, E0004, \"{}\", &error_message)\n }"}, {"sha": "eb4db6365cc57ee7e55a89fd62808e827085724d", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -18,7 +18,6 @@ use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::layout::LayoutOf;\n-use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::{Substs, Subst};\n use rustc::util::common::ErrorReported;\n@@ -684,14 +683,7 @@ impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n-    *providers = Providers {\n-        const_eval,\n-        ..*providers\n-    };\n-}\n-\n-fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+pub(crate) fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                         -> EvalResult<'tcx> {\n     let (def_id, substs) = if let Some(resolved) = lookup_const_by_id(tcx, key) {\n@@ -705,8 +697,18 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let tables = tcx.typeck_tables_of(def_id);\n     let body = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+        let body_id = tcx.hir.body_owned_by(id);\n+\n+        // Do match-check before building MIR\n+        if tcx.check_match(def_id).is_err() {\n+            return Err(ConstEvalErr {\n+                span: tcx.def_span(key.value.0),\n+                kind: CheckMatchError,\n+            });\n+        }\n+\n         tcx.mir_const_qualif(def_id);\n-        tcx.hir.body(tcx.hir.body_owned_by(id))\n+        tcx.hir.body(body_id)\n     } else {\n         tcx.extern_const_body(def_id).body\n     };"}, {"sha": "714cead4befda35bd8d4af015e3c89c8e89275ce", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -48,5 +48,15 @@ pub mod pattern;\n \n pub use eval::*;\n \n+use rustc::ty::maps::Providers;\n+\n+pub fn provide(providers: &mut Providers) {\n+    *providers = Providers {\n+        const_eval: eval::const_eval,\n+        check_match: check_match::check_match,\n+        ..*providers\n+    };\n+}\n+\n // Build the diagnostics array at the end so that the metadata includes error use sites.\n __build_diagnostic_array! { librustc_const_eval, DIAGNOSTICS }"}, {"sha": "36a6600b62d98d29fd7d85bf214d2eb14df0f39c", "filename": "src/test/compile-fail/const-match-check.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-match-check.rs?ref=2f84fb5cc1ac5f04bdf5a281997e02bcf4fc18d9", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: matchck eval1 eval2\n+\n+#[cfg(matchck)]\n+const X: i32 = { let 0 = 0; 0 };\n+//[matchck]~^ ERROR refutable pattern in local binding\n+\n+#[cfg(matchck)]\n+static Y: i32 = { let 0 = 0; 0 };\n+//[matchck]~^ ERROR refutable pattern in local binding\n+\n+#[cfg(matchck)]\n+trait Bar {\n+    const X: i32 = { let 0 = 0; 0 };\n+    //[matchck]~^ ERROR refutable pattern in local binding\n+}\n+\n+#[cfg(matchck)]\n+impl Bar for () {\n+    const X: i32 = { let 0 = 0; 0 };\n+    //[matchck]~^ ERROR refutable pattern in local binding\n+}\n+\n+#[cfg(eval1)]\n+enum Foo {\n+    A = { let 0 = 0; 0 },\n+    //[eval1]~^ ERROR refutable pattern in local binding\n+}\n+\n+fn main() {\n+    #[cfg(eval2)]\n+    let x: [i32; { let 0 = 0; 0 }] = [];\n+    //[eval2]~^ ERROR refutable pattern in local binding\n+    //[eval2]~| ERROR constant evaluation error\n+}"}]}