{"sha": "12f8472d2800b2d7c05cb1fc466c80072ed8e283", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZjg0NzJkMjgwMGIyZDdjMDVjYjFmYzQ2NmM4MDA3MmVkOGUyODM=", "commit": {"author": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-05-06T14:26:09Z"}, "committer": {"name": "Sergey Parilin", "email": "Sergey.Parilin@fxdd.com", "date": "2019-05-06T14:26:09Z"}, "message": "removed duplicating fill_struct_fields assist", "tree": {"sha": "6e451b71b482e75a5a30548ab8f769c5ec17864c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e451b71b482e75a5a30548ab8f769c5ec17864c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12f8472d2800b2d7c05cb1fc466c80072ed8e283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12f8472d2800b2d7c05cb1fc466c80072ed8e283", "html_url": "https://github.com/rust-lang/rust/commit/12f8472d2800b2d7c05cb1fc466c80072ed8e283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12f8472d2800b2d7c05cb1fc466c80072ed8e283/comments", "author": null, "committer": null, "parents": [{"sha": "26ed92568596ce45ad96c3e2ea5d54099702537f", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ed92568596ce45ad96c3e2ea5d54099702537f", "html_url": "https://github.com/rust-lang/rust/commit/26ed92568596ce45ad96c3e2ea5d54099702537f"}], "stats": {"total": 228, "additions": 0, "deletions": 228}, "files": [{"sha": "54b70e17dd54c38c3fd5059470680ceba2a385f8", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "removed", "additions": 0, "deletions": 226, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/26ed92568596ce45ad96c3e2ea5d54099702537f/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26ed92568596ce45ad96c3e2ea5d54099702537f/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=26ed92568596ce45ad96c3e2ea5d54099702537f", "patch": "@@ -1,226 +0,0 @@\n-use hir::{AdtDef, db::HirDatabase};\n-\n-use ra_syntax::ast::{self, AstNode};\n-\n-use crate::{AssistCtx, Assist, AssistId, ast_editor::{AstEditor, AstBuilder}};\n-\n-pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let struct_lit = ctx.node_at_offset::<ast::StructLit>()?;\n-    let named_field_list = struct_lit.named_field_list()?;\n-\n-    // Collect all fields from struct definition\n-    let mut fields = {\n-        let analyzer =\n-            hir::SourceAnalyzer::new(ctx.db, ctx.frange.file_id, struct_lit.syntax(), None);\n-        let struct_lit_ty = analyzer.type_of(ctx.db, struct_lit.into())?;\n-        let struct_def = match struct_lit_ty.as_adt() {\n-            Some((AdtDef::Struct(s), _)) => s,\n-            _ => return None,\n-        };\n-        struct_def.fields(ctx.db)\n-    };\n-\n-    // Filter out existing fields\n-    for ast_field in named_field_list.fields() {\n-        let name_from_ast = ast_field.name_ref()?.text().to_string();\n-        fields.retain(|field| field.name(ctx.db).to_string() != name_from_ast);\n-    }\n-    if fields.is_empty() {\n-        return None;\n-    }\n-\n-    let db = ctx.db;\n-    ctx.add_action(AssistId(\"fill_struct_fields\"), \"fill struct fields\", |edit| {\n-        let mut ast_editor = AstEditor::new(named_field_list);\n-        if named_field_list.fields().count() == 0 && fields.len() > 2 {\n-            ast_editor.make_multiline();\n-        };\n-\n-        for field in fields {\n-            let field = AstBuilder::<ast::NamedField>::from_pieces(\n-                &AstBuilder::<ast::NameRef>::new(&field.name(db).to_string()),\n-                Some(&AstBuilder::<ast::Expr>::unit()),\n-            );\n-            ast_editor.append_field(&field);\n-        }\n-\n-        edit.target(struct_lit.syntax().range());\n-        edit.set_cursor(struct_lit.syntax().range().start());\n-\n-        ast_editor.into_text_edit(edit.text_edit_builder());\n-    });\n-    ctx.build()\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::helpers::{check_assist, check_assist_target};\n-\n-    use super::fill_struct_fields;\n-\n-    #[test]\n-    fn fill_struct_fields_empty_body() {\n-        check_assist(\n-            fill_struct_fields,\n-            r#\"\n-            struct S<'a, D> {\n-                a: u32,\n-                b: String,\n-                c: (i32, i32),\n-                d: D,\n-                e: &'a str,\n-            }\n-\n-            fn main() {\n-                let s = S<|> {}\n-            }\n-            \"#,\n-            r#\"\n-            struct S<'a, D> {\n-                a: u32,\n-                b: String,\n-                c: (i32, i32),\n-                d: D,\n-                e: &'a str,\n-            }\n-\n-            fn main() {\n-                let s = <|>S {\n-                    a: (),\n-                    b: (),\n-                    c: (),\n-                    d: (),\n-                    e: (),\n-                }\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn fill_struct_fields_target() {\n-        check_assist_target(\n-            fill_struct_fields,\n-            r#\"\n-            struct S<'a, D> {\n-                a: u32,\n-                b: String,\n-                c: (i32, i32),\n-                d: D,\n-                e: &'a str,\n-            }\n-\n-            fn main() {\n-                let s = S<|> {}\n-            }\n-            \"#,\n-            \"S {}\",\n-        );\n-    }\n-\n-    #[test]\n-    fn fill_struct_fields_preserve_self() {\n-        check_assist(\n-            fill_struct_fields,\n-            r#\"\n-            struct Foo {\n-                foo: u8,\n-                bar: String,\n-                baz: i128,\n-            }\n-\n-            impl Foo {\n-                pub fn new() -> Self {\n-                    Self <|>{}\n-                }\n-            }\n-            \"#,\n-            r#\"\n-            struct Foo {\n-                foo: u8,\n-                bar: String,\n-                baz: i128,\n-            }\n-\n-            impl Foo {\n-                pub fn new() -> Self {\n-                    <|>Self {\n-                        foo: (),\n-                        bar: (),\n-                        baz: (),\n-                    }\n-                }\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn fill_struct_fields_partial() {\n-        check_assist(\n-            fill_struct_fields,\n-            r#\"\n-            struct S<'a, D> {\n-                a: u32,\n-                b: String,\n-                c: (i32, i32),\n-                d: D,\n-                e: &'a str,\n-            }\n-\n-            fn main() {\n-                let s = S {\n-                    c: (1, 2),\n-                    e: \"foo\",<|>\n-                }\n-            }\n-            \"#,\n-            r#\"\n-            struct S<'a, D> {\n-                a: u32,\n-                b: String,\n-                c: (i32, i32),\n-                d: D,\n-                e: &'a str,\n-            }\n-\n-            fn main() {\n-                let s = <|>S {\n-                    c: (1, 2),\n-                    e: \"foo\",\n-                    a: (),\n-                    b: (),\n-                    d: (),\n-                }\n-            }\n-            \"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn fill_struct_short() {\n-        check_assist(\n-            fill_struct_fields,\n-            r#\"\n-            struct S {\n-                foo: u32,\n-                bar: String,\n-            }\n-\n-            fn main() {\n-                let s = S {<|> };\n-            }\n-            \"#,\n-            r#\"\n-            struct S {\n-                foo: u32,\n-                bar: String,\n-            }\n-\n-            fn main() {\n-                let s = <|>S { foo: (), bar: () };\n-            }\n-            \"#,\n-        );\n-    }\n-}"}, {"sha": "ae97a1ab5896321c1cd183fcd45274dec061897a", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12f8472d2800b2d7c05cb1fc466c80072ed8e283/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12f8472d2800b2d7c05cb1fc466c80072ed8e283/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=12f8472d2800b2d7c05cb1fc466c80072ed8e283", "patch": "@@ -93,7 +93,6 @@ mod flip_comma;\n mod flip_binexpr;\n mod change_visibility;\n mod fill_match_arms;\n-mod fill_struct_fields;\n mod introduce_variable;\n mod inline_local_variable;\n mod replace_if_let_with_match;\n@@ -110,7 +109,6 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,\n-        fill_struct_fields::fill_struct_fields,\n         flip_comma::flip_comma,\n         flip_binexpr::flip_binexpr,\n         introduce_variable::introduce_variable,"}]}