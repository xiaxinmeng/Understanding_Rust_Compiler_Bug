{"sha": "2bf6e7880ddab107219ec493952dc8d74c749a5b", "node_id": "C_kwDOAAsO6NoAKDJiZjZlNzg4MGRkYWIxMDcyMTllYzQ5Mzk1MmRjOGQ3NGM3NDlhNWI", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-13T14:44:30Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2021-09-25T23:05:52Z"}, "message": "Remove some unreachable code", "tree": {"sha": "e7f69a7a9201d1c1e0038223228d9836bcc0f137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f69a7a9201d1c1e0038223228d9836bcc0f137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bf6e7880ddab107219ec493952dc8d74c749a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6e7880ddab107219ec493952dc8d74c749a5b", "html_url": "https://github.com/rust-lang/rust/commit/2bf6e7880ddab107219ec493952dc8d74c749a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bf6e7880ddab107219ec493952dc8d74c749a5b/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e", "html_url": "https://github.com/rust-lang/rust/commit/2e78c6bd993d84bd975a5f2f1d68dc7e75c5435e"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "724ac54531541893ae545d4488625f2a4431e636", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2bf6e7880ddab107219ec493952dc8d74c749a5b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bf6e7880ddab107219ec493952dc8d74c749a5b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=2bf6e7880ddab107219ec493952dc8d74c749a5b", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n         let scrut_ty = self.typeck_results.expr_ty_adjusted(scrut);\n         let report = compute_match_usefulness(&cx, &arms, scrut.hir_id, scrut_ty);\n \n-        report_arm_reachability(&cx, &report, |_, arm_span, arm_hir_id, catchall| {\n+        report_arm_reachability(&cx, &report, |arm_span, arm_hir_id, catchall| {\n             match source {\n                 hir::MatchSource::ForLoopDesugar | hir::MatchSource::Normal => {\n                     unreachable_pattern(cx.tcx, arm_span, arm_hir_id, catchall);\n@@ -434,23 +434,14 @@ fn check_let_reachability<'p, 'tcx>(\n     let arms = [MatchArm { pat, hir_id: pat_id, has_guard: false }];\n     let report = compute_match_usefulness(&cx, &arms, pat_id, pat.ty);\n \n-    report_arm_reachability(&cx, &report, |arm_index, arm_span, arm_hir_id, _| {\n-        match let_source(cx.tcx, pat_id) {\n-            LetSource::IfLet | LetSource::WhileLet => {\n-                match arm_index {\n-                    // The arm with the user-specified pattern.\n-                    0 => unreachable_pattern(cx.tcx, arm_span, arm_hir_id, None),\n-                    // The arm with the wildcard pattern.\n-                    1 => irrefutable_let_pattern(cx.tcx, pat_id, arm_span),\n-                    _ => bug!(),\n-                }\n-            }\n-            LetSource::IfLetGuard if arm_index == 0 => {\n-                unreachable_pattern(cx.tcx, arm_span, arm_hir_id, None);\n-            }\n-            _ => {}\n+    match let_source(cx.tcx, pat_id) {\n+        LetSource::IfLet | LetSource::WhileLet | LetSource::IfLetGuard => {\n+            report_arm_reachability(&cx, &report, |arm_span, arm_hir_id, _| {\n+                unreachable_pattern(cx.tcx, arm_span, arm_hir_id, None)\n+            });\n         }\n-    });\n+        _ => {}\n+    }\n \n     if report.non_exhaustiveness_witnesses.is_empty() {\n         // The match is exhaustive, i.e. the `if let` pattern is irrefutable.\n@@ -464,13 +455,13 @@ fn report_arm_reachability<'p, 'tcx, F>(\n     report: &UsefulnessReport<'p, 'tcx>,\n     unreachable: F,\n ) where\n-    F: Fn(usize, Span, HirId, Option<Span>),\n+    F: Fn(Span, HirId, Option<Span>),\n {\n     use Reachability::*;\n     let mut catchall = None;\n-    for (arm_index, (arm, is_useful)) in report.arm_usefulness.iter().enumerate() {\n+    for (arm, is_useful) in report.arm_usefulness.iter() {\n         match is_useful {\n-            Unreachable => unreachable(arm_index, arm.pat.span, arm.hir_id, catchall),\n+            Unreachable => unreachable(arm.pat.span, arm.hir_id, catchall),\n             Reachable(unreachables) if unreachables.is_empty() => {}\n             // The arm is reachable, but contains unreachable subpatterns (from or-patterns).\n             Reachable(unreachables) => {"}]}