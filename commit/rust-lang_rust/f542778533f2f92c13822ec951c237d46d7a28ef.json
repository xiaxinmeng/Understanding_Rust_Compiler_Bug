{"sha": "f542778533f2f92c13822ec951c237d46d7a28ef", "node_id": "C_kwDOAAsO6NoAKGY1NDI3Nzg1MzNmMmY5MmMxMzgyMmVjOTUxYzIzN2Q0NmQ3YTI4ZWY", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-09T07:46:16Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-17T11:27:37Z"}, "message": "Drive-by cleanup: `debug::term_type` => `TerminatorKind::name`", "tree": {"sha": "e1b5778e8961c6d608d688ec1128e7e187b1cf94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1b5778e8961c6d608d688ec1128e7e187b1cf94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f542778533f2f92c13822ec951c237d46d7a28ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f542778533f2f92c13822ec951c237d46d7a28ef", "html_url": "https://github.com/rust-lang/rust/commit/f542778533f2f92c13822ec951c237d46d7a28ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f542778533f2f92c13822ec951c237d46d7a28ef/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d5f9b783149eb628015e3ba5cac0f651c3a702", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d5f9b783149eb628015e3ba5cac0f651c3a702", "html_url": "https://github.com/rust-lang/rust/commit/03d5f9b783149eb628015e3ba5cac0f651c3a702"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "21faf1958e9113541ad956e6f43a78403c88f7bb", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=f542778533f2f92c13822ec951c237d46d7a28ef", "patch": "@@ -749,6 +749,29 @@ pub enum TerminatorKind<'tcx> {\n     },\n }\n \n+impl TerminatorKind<'_> {\n+    /// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n+    /// values it might hold (e.g. `TerminatorKind::Call` always returns `\"Call\"`).\n+    pub const fn name(&self) -> &'static str {\n+        match self {\n+            TerminatorKind::Goto { .. } => \"Goto\",\n+            TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n+            TerminatorKind::Resume => \"Resume\",\n+            TerminatorKind::Terminate => \"Terminate\",\n+            TerminatorKind::Return => \"Return\",\n+            TerminatorKind::Unreachable => \"Unreachable\",\n+            TerminatorKind::Drop { .. } => \"Drop\",\n+            TerminatorKind::Call { .. } => \"Call\",\n+            TerminatorKind::Assert { .. } => \"Assert\",\n+            TerminatorKind::Yield { .. } => \"Yield\",\n+            TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n+            TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n+            TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n+            TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n+        }\n+    }\n+}\n+\n /// Action to be taken when a stack unwind happens.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n #[derive(TypeFoldable, TypeVisitable)]"}, {"sha": "35e4c24dc462b7caeb20fb5bcf694c679a39b84c", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=f542778533f2f92c13822ec951c237d46d7a28ef", "patch": "@@ -118,7 +118,7 @@ use rustc_middle::mir::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::coverage::*;\n-use rustc_middle::mir::{self, BasicBlock, TerminatorKind};\n+use rustc_middle::mir::{self, BasicBlock};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::Span;\n \n@@ -796,36 +796,15 @@ fn bcb_to_string_sections<'tcx>(\n     }\n     let non_term_blocks = bcb_data.basic_blocks[0..len - 1]\n         .iter()\n-        .map(|&bb| format!(\"{:?}: {}\", bb, term_type(&mir_body[bb].terminator().kind)))\n+        .map(|&bb| format!(\"{:?}: {}\", bb, mir_body[bb].terminator().kind.name()))\n         .collect::<Vec<_>>();\n     if non_term_blocks.len() > 0 {\n         sections.push(non_term_blocks.join(\"\\n\"));\n     }\n     sections.push(format!(\n         \"{:?}: {}\",\n         bcb_data.basic_blocks.last().unwrap(),\n-        term_type(&bcb_data.terminator(mir_body).kind)\n+        bcb_data.terminator(mir_body).kind.name(),\n     ));\n     sections\n }\n-\n-/// Returns a simple string representation of a `TerminatorKind` variant, independent of any\n-/// values it might hold.\n-pub(super) fn term_type(kind: &TerminatorKind<'_>) -> &'static str {\n-    match kind {\n-        TerminatorKind::Goto { .. } => \"Goto\",\n-        TerminatorKind::SwitchInt { .. } => \"SwitchInt\",\n-        TerminatorKind::Resume => \"Resume\",\n-        TerminatorKind::Terminate => \"Terminate\",\n-        TerminatorKind::Return => \"Return\",\n-        TerminatorKind::Unreachable => \"Unreachable\",\n-        TerminatorKind::Drop { .. } => \"Drop\",\n-        TerminatorKind::Call { .. } => \"Call\",\n-        TerminatorKind::Assert { .. } => \"Assert\",\n-        TerminatorKind::Yield { .. } => \"Yield\",\n-        TerminatorKind::GeneratorDrop => \"GeneratorDrop\",\n-        TerminatorKind::FalseEdge { .. } => \"FalseEdge\",\n-        TerminatorKind::FalseUnwind { .. } => \"FalseUnwind\",\n-        TerminatorKind::InlineAsm { .. } => \"InlineAsm\",\n-    }\n-}"}, {"sha": "14937912cc599dc368933a256c41e8de6ad25f35", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=f542778533f2f92c13822ec951c237d46d7a28ef", "patch": "@@ -1,4 +1,3 @@\n-use super::debug::term_type;\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph, START_BCB};\n \n use itertools::Itertools;\n@@ -40,7 +39,7 @@ impl CoverageStatement {\n                     \"{}: @{}.{}: {:?}\",\n                     source_range_no_file(tcx, span),\n                     bb.index(),\n-                    term_type(&term.kind),\n+                    term.kind.name(),\n                     term.kind\n                 )\n             }"}, {"sha": "90b58933df7c0a3d1f8837756320498302c6cfbf", "filename": "compiler/rustc_mir_transform/src/coverage/tests.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f542778533f2f92c13822ec951c237d46d7a28ef/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Ftests.rs?ref=f542778533f2f92c13822ec951c237d46d7a28ef", "patch": "@@ -25,7 +25,6 @@\n //! to: `rustc_span::create_default_session_globals_then(|| { test_here(); })`.\n \n use super::counters;\n-use super::debug;\n use super::graph;\n use super::spans;\n \n@@ -188,12 +187,12 @@ fn debug_basic_blocks(mir_body: &Body<'_>) -> String {\n                     | TerminatorKind::Goto { target }\n                     | TerminatorKind::InlineAsm { destination: Some(target), .. }\n                     | TerminatorKind::Yield { resume: target, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), target)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), target)\n                     }\n                     TerminatorKind::SwitchInt { targets, .. } => {\n-                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, debug::term_type(kind), targets)\n+                        format!(\"{}{:?}:{} -> {:?}\", sp, bb, kind.name(), targets)\n                     }\n-                    _ => format!(\"{}{:?}:{}\", sp, bb, debug::term_type(kind)),\n+                    _ => format!(\"{}{:?}:{}\", sp, bb, kind.name()),\n                 }\n             })\n             .collect::<Vec<_>>()\n@@ -215,7 +214,7 @@ fn print_mir_graphviz(name: &str, mir_body: &Body<'_>) {\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bb,\n                         bb,\n-                        debug::term_type(&data.terminator().kind),\n+                        data.terminator().kind.name(),\n                         mir_body\n                             .basic_blocks\n                             .successors(bb)\n@@ -244,7 +243,7 @@ fn print_coverage_graphviz(\n                         \"    {:?} [label=\\\"{:?}: {}\\\"];\\n{}\",\n                         bcb,\n                         bcb,\n-                        debug::term_type(&bcb_data.terminator(mir_body).kind),\n+                        bcb_data.terminator(mir_body).kind.name(),\n                         basic_coverage_blocks\n                             .successors(bcb)\n                             .map(|successor| { format!(\"    {:?} -> {:?};\", bcb, successor) })"}]}