{"sha": "8b2ff472cf0d1e348cc369e2e2927dc552582b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMmZmNDcyY2YwZDFlMzQ4Y2MzNjllMmUyOTI3ZGM1NTI1ODJiMzI=", "commit": {"author": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-02-25T06:20:34Z"}, "committer": {"name": "Tshepang Lekhonkhobe", "email": "tshepang@gmail.com", "date": "2015-02-26T05:21:26Z"}, "message": "remove some compiler warnings", "tree": {"sha": "c325919286138b814a64027ae8d0bb028621bd08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c325919286138b814a64027ae8d0bb028621bd08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2ff472cf0d1e348cc369e2e2927dc552582b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2ff472cf0d1e348cc369e2e2927dc552582b32", "html_url": "https://github.com/rust-lang/rust/commit/8b2ff472cf0d1e348cc369e2e2927dc552582b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2ff472cf0d1e348cc369e2e2927dc552582b32/comments", "author": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tshepang", "id": 588486, "node_id": "MDQ6VXNlcjU4ODQ4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/588486?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tshepang", "html_url": "https://github.com/tshepang", "followers_url": "https://api.github.com/users/tshepang/followers", "following_url": "https://api.github.com/users/tshepang/following{/other_user}", "gists_url": "https://api.github.com/users/tshepang/gists{/gist_id}", "starred_url": "https://api.github.com/users/tshepang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tshepang/subscriptions", "organizations_url": "https://api.github.com/users/tshepang/orgs", "repos_url": "https://api.github.com/users/tshepang/repos", "events_url": "https://api.github.com/users/tshepang/events{/privacy}", "received_events_url": "https://api.github.com/users/tshepang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "610d1695d1e0f1bb4e59449d8ba70409b1dc610c", "url": "https://api.github.com/repos/rust-lang/rust/commits/610d1695d1e0f1bb4e59449d8ba70409b1dc610c", "html_url": "https://github.com/rust-lang/rust/commit/610d1695d1e0f1bb4e59449d8ba70409b1dc610c"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "a2924f8fe53082bb2b6ff4843f20abd07a61c57a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -2663,15 +2663,15 @@ mod tests {\n             let (left, right) = values.split_at_mut(2);\n             {\n                 let left: &[_] = left;\n-                assert!(left[..left.len()] == [1, 2][]);\n+                assert!(left[..left.len()] == [1, 2]);\n             }\n             for p in left {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n-                assert!(right[..right.len()] == [3, 4, 5][]);\n+                assert!(right[..right.len()] == [3, 4, 5]);\n             }\n             for p in right {\n                 *p += 2;"}, {"sha": "c43c6c739d9545ac61c2aae915afec247c4226f9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -2090,15 +2090,15 @@ mod tests {\n             let (left, right) = values.split_at_mut(2);\n             {\n                 let left: &[_] = left;\n-                assert!(&left[..left.len()] == &[1, 2][]);\n+                assert!(&left[..left.len()] == &[1, 2]);\n             }\n             for p in left {\n                 *p += 1;\n             }\n \n             {\n                 let right: &[_] = right;\n-                assert!(&right[..right.len()] == &[3, 4, 5][]);\n+                assert!(&right[..right.len()] == &[3, 4, 5]);\n             }\n             for p in right {\n                 *p += 2;"}, {"sha": "fe73b3b44079503544c6dead2a334b86f0877f99", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -59,16 +59,16 @@ fn iterator_to_slice() {\n                 let mut iter = data.iter_mut();\n                 assert_eq!(&iter[..], &other_data[..]);\n                 // mutability:\n-                assert!(&mut iter[] == other_data);\n+                assert!(&mut iter[..] == other_data);\n \n                 iter.next();\n                 assert_eq!(&iter[..], &other_data[1..]);\n-                assert!(&mut iter[] == &mut other_data[1..]);\n+                assert!(&mut iter[..] == &mut other_data[1..]);\n \n                 iter.next_back();\n \n                 assert_eq!(&iter[..], &other_data[1..2]);\n-                assert!(&mut iter[] == &mut other_data[1..2]);\n+                assert!(&mut iter[..] == &mut other_data[1..2]);\n \n                 let s = iter.into_slice();\n                 assert!(s == &mut other_data[1..2]);"}, {"sha": "0f98b3c33fb8d61dc1bf055cd6c44e6a2bcbf83a", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -68,12 +68,11 @@ pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)\n             Some(d) => d.full_def()\n         };\n         if let def::DefPrimTy(nty) = def {\n-            Some(prim_ty_to_ty(tcx, &path.segments[], nty))\n+            Some(prim_ty_to_ty(tcx, &path.segments, nty))\n         } else {\n             None\n         }\n     } else {\n         None\n     }\n }\n-"}, {"sha": "78ce9abe07d92495d9e646a2ae0122845b24231f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -2985,7 +2985,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         } else {\n             let msg = format!(\"use of undeclared trait name `{}`\",\n                               self.path_names_to_string(trait_path, path_depth));\n-            self.resolve_error(trait_path.span, &msg[]);\n+            self.resolve_error(trait_path.span, &msg);\n             Err(())\n         }\n     }"}, {"sha": "14930f91c9152f02335e731e2ab3bdbdcbd01b39", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -3945,9 +3945,7 @@ mod tests {\n \n     #[test]\n     fn test_encode_hashmap_with_arbitrary_key() {\n-        use std::old_io::Writer;\n         use std::collections::HashMap;\n-        use std::fmt;\n         #[derive(PartialEq, Eq, Hash, RustcEncodable)]\n         struct ArbitraryType(uint);\n         let mut hm: HashMap<ArbitraryType, bool> = HashMap::new();"}, {"sha": "b1779587528c26b20ca9635cca37e48bbdc851ba", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -173,7 +173,7 @@ mod tests {\n         assert_eq!(writer.write(&[1, 2, 3]), Ok(3));\n         assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n     }\n \n     #[test]\n@@ -369,28 +369,28 @@ mod tests {\n         assert_eq!(writer.write(&[4, 5, 6, 7]), Ok(4));\n         assert_eq!(writer.position(), 8);\n         let b: &[_] = &[0, 1, 2, 3, 4, 5, 6, 7];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         assert_eq!(writer.seek(SeekFrom::Start(0)), Ok(0));\n         assert_eq!(writer.position(), 0);\n         assert_eq!(writer.write(&[3, 4]), Ok(2));\n         let b: &[_] = &[3, 4, 2, 3, 4, 5, 6, 7];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         assert_eq!(writer.seek(SeekFrom::Current(1)), Ok(3));\n         assert_eq!(writer.write(&[0, 1]), Ok(2));\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 7];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         assert_eq!(writer.seek(SeekFrom::End(-1)), Ok(7));\n         assert_eq!(writer.write(&[1, 2]), Ok(2));\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n \n         assert_eq!(writer.seek(SeekFrom::End(1)), Ok(10));\n         assert_eq!(writer.write(&[1]), Ok(1));\n         let b: &[_] = &[3, 4, 2, 0, 1, 5, 6, 1, 2, 0, 1];\n-        assert_eq!(&writer.get_ref()[], b);\n+        assert_eq!(&writer.get_ref()[..], b);\n     }\n \n     #[test]"}, {"sha": "264e05f5c8d31ec1229b01ff6f6c39c0316b97ab", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -760,13 +760,13 @@ mod test {\n     #[test] fn idents_name_eq_test() {\n         assert!(segments_name_eq(\n             &[Ident{name:Name(3),ctxt:4}, Ident{name:Name(78),ctxt:82}]\n-                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()[],\n+                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>(),\n             &[Ident{name:Name(3),ctxt:104}, Ident{name:Name(78),ctxt:182}]\n-                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()[]));\n+                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()));\n         assert!(!segments_name_eq(\n             &[Ident{name:Name(3),ctxt:4}, Ident{name:Name(78),ctxt:82}]\n-                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()[],\n+                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>(),\n             &[Ident{name:Name(3),ctxt:104}, Ident{name:Name(77),ctxt:182}]\n-                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()[]));\n+                .iter().map(ident_to_segment).collect::<Vec<PathSegment>>()));\n     }\n }"}, {"sha": "8900b60d1913a2eb533702a630fda0cb4f0b9063", "filename": "src/rustbook/book.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2ff472cf0d1e348cc369e2e2927dc552582b32/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=8b2ff472cf0d1e348cc369e2e2927dc552582b32", "patch": "@@ -114,12 +114,12 @@ pub fn parse_summary<R: Reader>(input: R, src: &Path) -> Result<Book, Vec<String\n             }\n         };\n \n-        let star_idx = match line.find_str(\"*\") { Some(i) => i, None => continue };\n+        let star_idx = match line.find(\"*\") { Some(i) => i, None => continue };\n \n-        let start_bracket = star_idx + line[star_idx..].find_str(\"[\").unwrap();\n-        let end_bracket = start_bracket + line[start_bracket..].find_str(\"](\").unwrap();\n+        let start_bracket = star_idx + line[star_idx..].find(\"[\").unwrap();\n+        let end_bracket = start_bracket + line[start_bracket..].find(\"](\").unwrap();\n         let start_paren = end_bracket + 1;\n-        let end_paren = start_paren + line[start_paren..].find_str(\")\").unwrap();\n+        let end_paren = start_paren + line[start_paren..].find(\")\").unwrap();\n \n         let given_path = &line[start_paren + 1 .. end_paren];\n         let title = line[start_bracket + 1..end_bracket].to_string();"}]}