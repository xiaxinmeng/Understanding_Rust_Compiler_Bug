{"sha": "338dc1f18c04efc9e194ee42b454773bed1d7621", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzOGRjMWYxOGMwNGVmYzllMTk0ZWU0MmI0NTQ3NzNiZWQxZDc2MjE=", "commit": {"author": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T11:35:32Z"}, "committer": {"name": "Giacomo Stevanato", "email": "giaco.stevanato@gmail.com", "date": "2021-05-12T11:36:21Z"}, "message": "Fix diagnostics spans for missing generics in edge cases", "tree": {"sha": "659a0ec51c3a6d670f559000b37bb656678f4eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659a0ec51c3a6d670f559000b37bb656678f4eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/338dc1f18c04efc9e194ee42b454773bed1d7621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/338dc1f18c04efc9e194ee42b454773bed1d7621", "html_url": "https://github.com/rust-lang/rust/commit/338dc1f18c04efc9e194ee42b454773bed1d7621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/338dc1f18c04efc9e194ee42b454773bed1d7621/comments", "author": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SkiFire13", "id": 9020423, "node_id": "MDQ6VXNlcjkwMjA0MjM=", "avatar_url": "https://avatars.githubusercontent.com/u/9020423?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SkiFire13", "html_url": "https://github.com/SkiFire13", "followers_url": "https://api.github.com/users/SkiFire13/followers", "following_url": "https://api.github.com/users/SkiFire13/following{/other_user}", "gists_url": "https://api.github.com/users/SkiFire13/gists{/gist_id}", "starred_url": "https://api.github.com/users/SkiFire13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SkiFire13/subscriptions", "organizations_url": "https://api.github.com/users/SkiFire13/orgs", "repos_url": "https://api.github.com/users/SkiFire13/repos", "events_url": "https://api.github.com/users/SkiFire13/events{/privacy}", "received_events_url": "https://api.github.com/users/SkiFire13/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c8835a0ffb201f2b5a3c3742021056e1d2afe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1c8835a0ffb201f2b5a3c3742021056e1d2afe9", "html_url": "https://github.com/rust-lang/rust/commit/b1c8835a0ffb201f2b5a3c3742021056e1d2afe9"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "56f288ff051c2290e1b9cc347ed6b149182e0781", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/338dc1f18c04efc9e194ee42b454773bed1d7621/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/338dc1f18c04efc9e194ee42b454773bed1d7621/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=338dc1f18c04efc9e194ee42b454773bed1d7621", "patch": "@@ -94,14 +94,10 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         gen_args: &'a hir::GenericArgs<'a>,\n         def_id: DefId,\n     ) -> Self {\n-        let angle_brackets = if gen_args.is_empty() {\n-            AngleBrackets::Missing\n+        let angle_brackets = if gen_args.span_ext().is_none() {\n+            if gen_args.is_empty() { AngleBrackets::Missing } else { AngleBrackets::Implied }\n         } else {\n-            if gen_args.span().is_none() {\n-                AngleBrackets::Implied\n-            } else {\n-                AngleBrackets::Available\n-            }\n+            AngleBrackets::Available\n         };\n \n         Self {\n@@ -337,7 +333,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             ),\n         };\n \n-        if self.gen_args.span().is_some() {\n+        if self.gen_args.span_ext().is_some() {\n             format!(\n                 \"this {} takes {}{} {} argument{} but {} {} supplied\",\n                 def_kind,\n@@ -579,27 +575,32 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                 err.span_suggestion_verbose(span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Available => {\n-                // angle brackets exist, so we just insert missing arguments after the existing\n-                // type or const args\n-\n-                let index_last_provided_arg =\n-                    self.get_lifetime_args_offset() + self.num_provided_type_or_const_args() - 1;\n-                if index_last_provided_arg < self.gen_args.args.len() {\n-                    let first_arg_span =\n-                        self.gen_args.args[index_last_provided_arg].span().shrink_to_hi();\n-                    let source_map = self.tcx.sess.source_map();\n-                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n-                        let sugg = format!(\"{}, {}\", first_gen_arg, suggested_args);\n-                        debug!(\"sugg: {:?}\", sugg);\n+                let gen_args_span = self.gen_args.span().unwrap();\n+                let sugg_offset =\n+                    self.get_lifetime_args_offset() + self.num_provided_type_or_const_args();\n \n-                        err.span_suggestion_verbose(\n-                            first_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n-                }\n+                let (sugg_span, is_first) = if sugg_offset == 0 {\n+                    (gen_args_span.shrink_to_lo(), true)\n+                } else {\n+                    let arg_span = self.gen_args.args[sugg_offset - 1].span();\n+                    // If we came here then inferred lifetimes's spans can only point\n+                    // to either the opening bracket or to the space right after.\n+                    // Both of these spans have an `hi` lower than or equal to the span\n+                    // of the generics excluding the brackets.\n+                    // This allows us to check if `arg_span` is the artificial span of\n+                    // an inferred lifetime, in which case the generic we're suggesting to\n+                    // add will be the first visible, even if it isn't the actual first generic.\n+                    (arg_span.shrink_to_hi(), arg_span.hi() <= gen_args_span.lo())\n+                };\n+\n+                let sugg_prefix = if is_first { \"\" } else { \", \" };\n+                let sugg_suffix =\n+                    if is_first && !self.gen_args.bindings.is_empty() { \", \" } else { \"\" };\n+\n+                let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n     }"}]}