{"sha": "f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "node_id": "C_kwDOAAsO6NoAKGYzYWMzMjhkNTg0YjgzYmI3ZjBiNGZhYTBmN2E1Njk5MTUxYjNjZTk", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-09-27T11:06:31Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-09-27T19:42:09Z"}, "message": "Address feedback", "tree": {"sha": "cf8dc2045284ed418f109b2b9db461b0d3116d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf8dc2045284ed418f109b2b9db461b0d3116d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "html_url": "https://github.com/rust-lang/rust/commit/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/comments", "author": {}, "committer": {}, "parents": [{"sha": "c4c94151321b8018ceb06ccff359109b8fed6bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c94151321b8018ceb06ccff359109b8fed6bfe", "html_url": "https://github.com/rust-lang/rust/commit/c4c94151321b8018ceb06ccff359109b8fed6bfe"}], "stats": {"total": 143, "additions": 113, "deletions": 30}, "files": [{"sha": "c43dc8c134dd355d10c9d1ec139765a3d9507af7", "filename": "compiler/rustc_hir_analysis/src/check/method/suggest.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -1428,7 +1428,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             item_name,\n                             field_ty,\n                             call_expr,\n-                            ProbeScope::AllTraits,\n+                            ProbeScope::TraitsInScope,\n                         )\n                         .ok()\n                         .map(|pick| (variant, field, pick))\n@@ -1500,59 +1500,88 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             item_name,\n                             ty,\n                             call_expr,\n-                            ProbeScope::AllTraits,\n+                            ProbeScope::TraitsInScope,\n                         )  else { return; };\n \n                 let name = self.ty_to_value_string(actual);\n                 let inner_id = kind.did();\n+                let mutable = if let Some(AutorefOrPtrAdjustment::Autoref { mutbl, .. }) =\n+                    pick.autoref_or_ptr_adjustment\n+                {\n+                    Some(mutbl)\n+                } else {\n+                    None\n+                };\n \n                 if tcx.is_diagnostic_item(sym::LocalKey, inner_id) {\n-                    err.help(\"use `with` or `try_with` to access the contents of threadlocals\");\n+                    err.help(\"use `with` or `try_with` to access thread local storage\");\n                 } else if Some(kind.did()) == tcx.lang_items().maybe_uninit() {\n                     err.help(format!(\n                         \"if this `{name}` has been initialized, \\\n                         use one of the `assume_init` methods to access the inner value\"\n                     ));\n                 } else if tcx.is_diagnostic_item(sym::RefCell, inner_id) {\n-                    match pick.autoref_or_ptr_adjustment {\n-                        Some(AutorefOrPtrAdjustment::Autoref {\n-                            mutbl: Mutability::Not, ..\n-                        }) => {\n+                    match mutable {\n+                        Some(Mutability::Not) => {\n                             err.span_suggestion_verbose(\n                                 expr.span.shrink_to_hi(),\n                                 format!(\n-                                    \"use `.borrow()` to borrow the {ty}, \\\n-                                panicking if any outstanding mutable borrows exist.\"\n+                                    \"use `.borrow()` to borrow the `{ty}`, \\\n+                                    panicking if any outstanding mutable borrows exist.\"\n                                 ),\n                                 \".borrow()\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n-                        Some(AutorefOrPtrAdjustment::Autoref {\n-                            mutbl: Mutability::Mut, ..\n-                        }) => {\n+                        Some(Mutability::Mut) => {\n                             err.span_suggestion_verbose(\n                                 expr.span.shrink_to_hi(),\n                                 format!(\n-                                    \"use `.borrow_mut()` to mutably borrow the {ty}, \\\n-                                panicking if any outstanding borrows exist.\"\n+                                    \"use `.borrow_mut()` to mutably borrow the `{ty}`, \\\n+                                    panicking if any outstanding borrows exist.\"\n                                 ),\n                                 \".borrow_mut()\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }\n-                        _ => return,\n+                        None => return,\n                     }\n                 } else if tcx.is_diagnostic_item(sym::Mutex, inner_id) {\n                     err.span_suggestion_verbose(\n                         expr.span.shrink_to_hi(),\n                         format!(\n-                            \"use `.lock()` to borrow the {ty}, \\\n+                            \"use `.lock()` to borrow the `{ty}`, \\\n                             blocking the current thread until it can be acquired\"\n                         ),\n                         \".lock().unwrap()\",\n                         Applicability::MaybeIncorrect,\n                     );\n+                } else if tcx.is_diagnostic_item(sym::RwLock, inner_id) {\n+                    match mutable {\n+                        Some(Mutability::Not) => {\n+                            err.span_suggestion_verbose(\n+                                expr.span.shrink_to_hi(),\n+                                format!(\n+                                    \"use `.read()` to borrow the `{ty}`, \\\n+                                    blocking the current thread until it can be acquired\"\n+                                ),\n+                                \".read().unwrap()\",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        Some(Mutability::Mut) => {\n+                            err.span_suggestion_verbose(\n+                                expr.span.shrink_to_hi(),\n+                                format!(\n+                                    \"use `.write()` to mutably borrow the `{ty}`, \\\n+                                    blocking the current thread until it can be acquired\"\n+                                ),\n+                                \".write().unwrap()\",\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        None => return,\n+                    }\n                 } else {\n                     return;\n                 };"}, {"sha": "67ffc573b990acd074c249faec5a23e1b5db34b1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -276,6 +276,7 @@ symbols! {\n         Rust,\n         RustcDecodable,\n         RustcEncodable,\n+        RwLock,\n         RwLockReadGuard,\n         RwLockWriteGuard,\n         Send,"}, {"sha": "288cab1ef399470a93149829a93d369932276e00", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -614,7 +614,7 @@ impl<T, const N: usize> Cell<[T; N]> {\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](self) for more.\n-#[rustc_diagnostic_item = \"RefCell\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RefCell\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RefCell<T: ?Sized> {\n     borrow: Cell<BorrowFlag>,"}, {"sha": "ee2c79b6669b8d94b8dc8f1acb26b3d10aa36c33", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -76,6 +76,7 @@ use crate::sys_common::rwlock as sys;\n ///\n /// [`Mutex`]: super::Mutex\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"RwLock\")]\n pub struct RwLock<T: ?Sized> {\n     inner: sys::MovableRwLock,\n     poison: poison::Flag,"}, {"sha": "ffd17dc99093aeb036898c96abe21b3f4bd03d9d", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -95,7 +95,7 @@ use crate::fmt;\n /// [loader lock]: https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-best-practices\n /// [`JoinHandle::join`]: crate::thread::JoinHandle::join\n /// [`with`]: LocalKey::with\n-#[rustc_diagnostic_item = \"LocalKey\"]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"LocalKey\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LocalKey<T: 'static> {\n     // This outer `LocalKey<T>` type is what's going to be stored in statics,"}, {"sha": "327bf7caa7257e42ebca9fab15652dc6a2400838", "filename": "src/test/ui/suggestions/inner_type.fixed", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.fixed?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -16,15 +16,25 @@ fn main() {\n \n     other_item.borrow().method();\n     //~^ ERROR no method named `method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow()` to borrow the Struct<u32>, panicking if any outstanding mutable borrows exist.\n+    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n \n     other_item.borrow_mut().some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow_mut()` to mutably borrow the Struct<u32>, panicking if any outstanding borrows exist.\n+    //~| HELP use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n \n     let another_item = std::sync::Mutex::new(Struct { p: 42_u32 });\n \n     another_item.lock().unwrap().method();\n     //~^ ERROR no method named `method` found for struct `Mutex` in the current scope [E0599]\n-    //~| HELP use `.lock()` to borrow the Struct<u32>, blocking the current thread until it can be acquired\n+    //~| HELP use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+\n+    let another_item = std::sync::RwLock::new(Struct { p: 42_u32 });\n+\n+    another_item.read().unwrap().method();\n+    //~^ ERROR no method named `method` found for struct `RwLock` in the current scope [E0599]\n+    //~| HELP use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+\n+    another_item.write().unwrap().some_mutable_method();\n+    //~^ ERROR no method named `some_mutable_method` found for struct `RwLock` in the current scope [E0599]\n+    //~| HELP use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n }\n\\ No newline at end of file"}, {"sha": "a8c1c5d386a1efcd054b5f6626955edd18e6aa16", "filename": "src/test/ui/suggestions/inner_type.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -16,15 +16,25 @@ fn main() {\n \n     other_item.method();\n     //~^ ERROR no method named `method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow()` to borrow the Struct<u32>, panicking if any outstanding mutable borrows exist.\n+    //~| HELP use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n \n     other_item.some_mutable_method();\n     //~^ ERROR no method named `some_mutable_method` found for struct `RefCell` in the current scope [E0599]\n-    //~| HELP use `.borrow_mut()` to mutably borrow the Struct<u32>, panicking if any outstanding borrows exist.\n+    //~| HELP use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n \n     let another_item = std::sync::Mutex::new(Struct { p: 42_u32 });\n \n     another_item.method();\n     //~^ ERROR no method named `method` found for struct `Mutex` in the current scope [E0599]\n-    //~| HELP use `.lock()` to borrow the Struct<u32>, blocking the current thread until it can be acquired\n+    //~| HELP use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+\n+    let another_item = std::sync::RwLock::new(Struct { p: 42_u32 });\n+\n+    another_item.method();\n+    //~^ ERROR no method named `method` found for struct `RwLock` in the current scope [E0599]\n+    //~| HELP use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+\n+    another_item.some_mutable_method();\n+    //~^ ERROR no method named `some_mutable_method` found for struct `RwLock` in the current scope [E0599]\n+    //~| HELP use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n }\n\\ No newline at end of file"}, {"sha": "00d52f0f1d33a31ab5b6c5246a8dfa13b8124cb5", "filename": "src/test/ui/suggestions/inner_type.stderr", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type.stderr?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -9,7 +9,7 @@ note: the method `method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn method(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: use `.borrow()` to borrow the Struct<u32>, panicking if any outstanding mutable borrows exist.\n+help: use `.borrow()` to borrow the `Struct<u32>`, panicking if any outstanding mutable borrows exist.\n    |\n LL |     other_item.borrow().method();\n    |               +++++++++\n@@ -25,7 +25,7 @@ note: the method `some_mutable_method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn some_mutable_method(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: use `.borrow_mut()` to mutably borrow the Struct<u32>, panicking if any outstanding borrows exist.\n+help: use `.borrow_mut()` to mutably borrow the `Struct<u32>`, panicking if any outstanding borrows exist.\n    |\n LL |     other_item.borrow_mut().some_mutable_method();\n    |               +++++++++++++\n@@ -41,11 +41,43 @@ note: the method `method` exists on the type `Struct<u32>`\n    |\n LL |     pub fn method(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: use `.lock()` to borrow the Struct<u32>, blocking the current thread until it can be acquired\n+help: use `.lock()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n    |\n LL |     another_item.lock().unwrap().method();\n    |                 ++++++++++++++++\n \n-error: aborting due to 3 previous errors\n+error[E0599]: no method named `method` found for struct `RwLock` in the current scope\n+  --> $DIR/inner_type.rs:33:18\n+   |\n+LL |     another_item.method();\n+   |                  ^^^^^^ method not found in `RwLock<Struct<u32>>`\n+   |\n+note: the method `method` exists on the type `Struct<u32>`\n+  --> $DIR/inner_type.rs:9:5\n+   |\n+LL |     pub fn method(&self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+help: use `.read()` to borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+   |\n+LL |     another_item.read().unwrap().method();\n+   |                 ++++++++++++++++\n+\n+error[E0599]: no method named `some_mutable_method` found for struct `RwLock` in the current scope\n+  --> $DIR/inner_type.rs:37:18\n+   |\n+LL |     another_item.some_mutable_method();\n+   |                  ^^^^^^^^^^^^^^^^^^^ method not found in `RwLock<Struct<u32>>`\n+   |\n+note: the method `some_mutable_method` exists on the type `Struct<u32>`\n+  --> $DIR/inner_type.rs:11:5\n+   |\n+LL |     pub fn some_mutable_method(&mut self) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: use `.write()` to mutably borrow the `Struct<u32>`, blocking the current thread until it can be acquired\n+   |\n+LL |     another_item.write().unwrap().some_mutable_method();\n+   |                 +++++++++++++++++\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "8dea8100c289c5c6a3393ce4638623cfb58764e6", "filename": "src/test/ui/suggestions/inner_type2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.rs?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -17,7 +17,7 @@ thread_local! {\n fn main() {\n     STRUCT.method();\n     //~^ ERROR no method named `method` found for struct `LocalKey` in the current scope [E0599]\n-    //~| HELP use `with` or `try_with` to access the contents of threadlocals\n+    //~| HELP use `with` or `try_with` to access thread local storage\n \n     let item = std::mem::MaybeUninit::new(Struct { p: 42_u32 });\n     item.method();"}, {"sha": "eddfd9d63409d3d6eca49c29c3317ce2e4562e58", "filename": "src/test/ui/suggestions/inner_type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finner_type2.stderr?ref=f3ac328d584b83bb7f0b4faa0f7a5699151b3ce9", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `method` found for struct `LocalKey` in the curren\n LL |     STRUCT.method();\n    |            ^^^^^^ method not found in `LocalKey<Struct<u32>>`\n    |\n-   = help: use `with` or `try_with` to access the contents of threadlocals\n+   = help: use `with` or `try_with` to access thread local storage\n note: the method `method` exists on the type `Struct<u32>`\n   --> $DIR/inner_type2.rs:6:5\n    |"}]}