{"sha": "e711abc29032ddd395b60fccc47063e49785168f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTFhYmMyOTAzMmRkZDM5NWI2MGZjY2M0NzA2M2U0OTc4NTE2OGY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-06T12:18:51Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Lower Pat::Path", "tree": {"sha": "13a21ef0173733283f263193d6bbbf116da2ca9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13a21ef0173733283f263193d6bbbf116da2ca9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e711abc29032ddd395b60fccc47063e49785168f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e711abc29032ddd395b60fccc47063e49785168f", "html_url": "https://github.com/rust-lang/rust/commit/e711abc29032ddd395b60fccc47063e49785168f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e711abc29032ddd395b60fccc47063e49785168f/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e50ce67631bc8f8e28042112a924b73c6081dc71", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50ce67631bc8f8e28042112a924b73c6081dc71", "html_url": "https://github.com/rust-lang/rust/commit/e50ce67631bc8f8e28042112a924b73c6081dc71"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "5c9419d2cca7db4f82ea2538be754ac98c1d9519", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e711abc29032ddd395b60fccc47063e49785168f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e711abc29032ddd395b60fccc47063e49785168f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=e711abc29032ddd395b60fccc47063e49785168f", "patch": "@@ -99,6 +99,10 @@ impl<'a> PatCtxt<'a> {\n         let kind = match self.body[pat] {\n             hir_def::expr::Pat::Wild => PatKind::Wild,\n \n+            hir_def::expr::Pat::Path(ref path) => {\n+                return self.lower_path(pat, path);\n+            }\n+\n             hir_def::expr::Pat::Tuple { ref args, ellipsis } => {\n                 let arity = match *ty.kind(&Interner) {\n                     TyKind::Tuple(arity, _) => arity,\n@@ -193,6 +197,20 @@ impl<'a> PatCtxt<'a> {\n         // TODO: do we need PatKind::AscribeUserType ?\n         kind\n     }\n+\n+    fn lower_path(&mut self, pat: hir_def::expr::PatId, path: &hir_def::path::Path) -> Pat {\n+        let ty = &self.infer[pat];\n+\n+        let pat_from_kind = |kind| Pat { ty: ty.clone(), kind: Box::new(kind) };\n+\n+        match self.infer.variant_resolution_for_pat(pat) {\n+            Some(_) => pat_from_kind(self.lower_variant_or_leaf(pat, ty, Vec::new())),\n+            None => {\n+                self.errors.push(PatternError::Unimplemented);\n+                pat_from_kind(PatKind::Wild)\n+            }\n+        }\n+    }\n }\n \n #[cfg(test)]"}]}