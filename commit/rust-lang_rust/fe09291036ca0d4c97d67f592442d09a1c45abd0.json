{"sha": "fe09291036ca0d4c97d67f592442d09a1c45abd0", "node_id": "C_kwDOAAsO6NoAKGZlMDkyOTEwMzZjYTBkNGM5N2Q2N2Y1OTI0NDJkMDlhMWM0NWFiZDA", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-25T01:03:06Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T23:57:02Z"}, "message": "migrate: `deref_into_dyn_supertrait.rs`", "tree": {"sha": "e0f9144d913157099a92c572e8767397eabeaa3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f9144d913157099a92c572e8767397eabeaa3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe09291036ca0d4c97d67f592442d09a1c45abd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe09291036ca0d4c97d67f592442d09a1c45abd0", "html_url": "https://github.com/rust-lang/rust/commit/fe09291036ca0d4c97d67f592442d09a1c45abd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe09291036ca0d4c97d67f592442d09a1c45abd0/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38db48dbd534af0ef67c39299a393e7d1fe49e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38db48dbd534af0ef67c39299a393e7d1fe49e9", "html_url": "https://github.com/rust-lang/rust/commit/f38db48dbd534af0ef67c39299a393e7d1fe49e9"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "d63ff77d8e2558bd5decf85363d07b90258c6bef", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=fe09291036ca0d4c97d67f592442d09a1c45abd0", "patch": "@@ -457,6 +457,9 @@ lint_builtin_special_module_name_used_lib = found module declaration for lib.rs\n lint_builtin_special_module_name_used_main = found module declaration for main.rs\n     .note = a binary crate cannot be used as library\n \n+lint_supertrait_as_deref_target = `{$t}` implements `Deref` with supertrait `{$target_principal}` as target\n+    .label = target type is set here\n+\n lint_overruled_attribute = {$lint_level}({$lint_source}) incompatible with previous forbid\n     .label = overruled by previous forbid\n "}, {"sha": "dff5a645c175ecf11c0d30de5917caa78148f659", "filename": "compiler/rustc_lint/src/deref_into_dyn_supertrait.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fderef_into_dyn_supertrait.rs?ref=fe09291036ca0d4c97d67f592442d09a1c45abd0", "patch": "@@ -1,6 +1,8 @@\n-use crate::{LateContext, LateLintPass, LintContext};\n+use crate::{\n+    lints::{SupertraitAsDerefTarget, SupertraitAsDerefTargetLabel},\n+    LateContext, LateLintPass, LintContext,\n+};\n \n-use rustc_errors::DelayDm;\n use rustc_hir as hir;\n use rustc_middle::{traits::util::supertraits, ty};\n use rustc_span::sym;\n@@ -71,22 +73,14 @@ impl<'tcx> LateLintPass<'tcx> for DerefIntoDynSupertrait {\n             && supertraits(cx.tcx, t_principal.with_self_ty(cx.tcx, cx.tcx.types.trait_object_dummy_self))\n                 .any(|sup| sup.map_bound(|x| ty::ExistentialTraitRef::erase_self_ty(cx.tcx, x)) == target_principal)\n         {\n-            cx.struct_span_lint(\n-                DEREF_INTO_DYN_SUPERTRAIT,\n-                cx.tcx.def_span(item.owner_id.def_id),\n-                DelayDm(|| {\n-                    format!(\n-                        \"`{t}` implements `Deref` with supertrait `{target_principal}` as target\"\n-                    )\n-                }),\n-                |lint| {\n-                    if let Some(target_span) = impl_.items.iter().find_map(|i| (i.ident.name == sym::Target).then_some(i.span)) {\n-                        lint.span_label(target_span, \"target type is set here\");\n-                    }\n-\n-                    lint\n-                },\n-            )\n+            let label = impl_.items.iter().find_map(|i| (i.ident.name == sym::Target).then_some(i.span)).map(|label| SupertraitAsDerefTargetLabel {\n+                label,\n+            });\n+            cx.emit_spanned_lint(DEREF_INTO_DYN_SUPERTRAIT, cx.tcx.def_span(item.owner_id.def_id), SupertraitAsDerefTarget {\n+                t,\n+                target_principal: target_principal.to_string(),\n+                label,\n+            });\n         }\n     }\n }"}, {"sha": "c3782a496891db3797bab13879bc32e54f024d02", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe09291036ca0d4c97d67f592442d09a1c45abd0/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=fe09291036ca0d4c97d67f592442d09a1c45abd0", "patch": "@@ -551,6 +551,24 @@ pub struct BuiltinUnexpectedCliConfigValue {\n     pub value: Symbol,\n }\n \n+// deref_into_dyn_supertrait.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_supertrait_as_deref_target)]\n+pub struct SupertraitAsDerefTarget<'a> {\n+    pub t: Ty<'a>,\n+    pub target_principal: String,\n+    // pub target_principal: Binder<'a, ExistentialTraitRef<'b>>,\n+    #[subdiagnostic]\n+    pub label: Option<SupertraitAsDerefTargetLabel>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(label)]\n+pub struct SupertraitAsDerefTargetLabel {\n+    #[primary_span]\n+    pub label: Span,\n+}\n+\n // enum_intrinsics_non_enums.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_enum_intrinsics_mem_discriminant)]"}]}