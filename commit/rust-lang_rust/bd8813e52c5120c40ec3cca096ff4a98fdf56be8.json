{"sha": "bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkODgxM2U1MmM1MTIwYzQwZWMzY2NhMDk2ZmY0YTk4ZmRmNTZiZTg=", "commit": {"author": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-07-23T23:42:39Z"}, "committer": {"name": "Ilija Tovilo", "email": "ilija.tovilo@me.com", "date": "2019-07-24T01:03:52Z"}, "message": "Add method disambiguation help for trait implementation\n\nCloses #51046\nCloses #40471", "tree": {"sha": "c4bd33dfa623017bc1a7dd543d01348f7d1c87b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4bd33dfa623017bc1a7dd543d01348f7d1c87b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEzbqtco3jAIy93eipPxI9Ct1EgZgFAl03rngACgkQPxI9Ct1E\ngZi1yQ/9HEQE/IjxRjU0XTutvJcgl/BAJp54AqSx/fbVbbCKRohkwv94DEDiOqFb\nLXgB52P7FJVEy14c6IBUPOakpzrRDgSUiuzoShW2pAe6prgpkQGZowIG40GDaO/2\nfDmbqQpHYHLXvATWjp9GtIeKSBJyrrAnl5ueDMn4bpCxN00WxIDJwzBYig7ocZNl\n9oY/c4uq/R0edq+Al/1E10uSONRnH3UfC2WwgRcGW5SkM6xe43O8UejvrP/DZamT\nznqWz5lMaUOssyxBHuKGioSkJyvSHHZDlVnNW0Zpc9FZrqBFwkwlziQty2e5iRmd\niJTf7nK847WMlDggDBKfzN1s/VBpaK7NXaw+fZIxOoRtWWYxwpb8B+Cs5Fc7DPt6\nnreu0ABmVkDLxToJWKNoaP0K0d1BwtXhfkSsU73I/8VZkED54i3iXmAjMJpOyYXL\n6Nv3cz7AicZcbcrcbpbzzdcX54BvGc2fRkt4yQmEtgQuPUmIs91/pxtN0VGxK4B2\nI9P/6I21GWUK5hOor7uk+Ohd/ZrDNTbNJErS1e9xdavOu65zbyHpcumO9+xltxlp\nzdO+EgYVAdmbaNxDz2g31ccMbbqAPYuFScwFAUiPjslcum77hz5xfJcf5tzg2V6w\n1LyKaX5tnlHpR0jZKWT81PPffltR4GSQTHDiWPpgrRTCBU7WS/k=\n=p4W2\n-----END PGP SIGNATURE-----", "payload": "tree c4bd33dfa623017bc1a7dd543d01348f7d1c87b8\nparent 299ef86e1f8b3e53154f834115752c719b611fa1\nauthor Ilija Tovilo <ilija.tovilo@me.com> 1563925359 +0200\ncommitter Ilija Tovilo <ilija.tovilo@me.com> 1563930232 +0200\n\nAdd method disambiguation help for trait implementation\n\nCloses #51046\nCloses #40471\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "html_url": "https://github.com/rust-lang/rust/commit/bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/comments", "author": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iluuu1994", "id": 1752683, "node_id": "MDQ6VXNlcjE3NTI2ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1752683?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iluuu1994", "html_url": "https://github.com/iluuu1994", "followers_url": "https://api.github.com/users/iluuu1994/followers", "following_url": "https://api.github.com/users/iluuu1994/following{/other_user}", "gists_url": "https://api.github.com/users/iluuu1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/iluuu1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iluuu1994/subscriptions", "organizations_url": "https://api.github.com/users/iluuu1994/orgs", "repos_url": "https://api.github.com/users/iluuu1994/repos", "events_url": "https://api.github.com/users/iluuu1994/events{/privacy}", "received_events_url": "https://api.github.com/users/iluuu1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299ef86e1f8b3e53154f834115752c719b611fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/299ef86e1f8b3e53154f834115752c719b611fa1", "html_url": "https://github.com/rust-lang/rust/commit/299ef86e1f8b3e53154f834115752c719b611fa1"}], "stats": {"total": 126, "additions": 107, "deletions": 19}, "files": [{"sha": "cd4c8a28dab2836772b138f384115d135bef9003", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "patch": "@@ -10,7 +10,6 @@ use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n use rustc::hir::map as hir_map;\n-use rustc::hir::print;\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc::traits::Obligation;\n use rustc::ty::{self, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n@@ -78,6 +77,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n+        let print_disambiguation_help = |\n+            err: &mut DiagnosticBuilder<'_>,\n+            trait_name: String,\n+        | {\n+            err.help(&format!(\n+                \"to disambiguate the method call, write `{}::{}({}{})` instead\",\n+                trait_name,\n+                item_name,\n+                if rcvr_ty.is_region_ptr() && args.is_some() {\n+                    if rcvr_ty.is_mutable_pointer() {\n+                        \"&mut \"\n+                    } else {\n+                        \"&\"\n+                    }\n+                } else {\n+                    \"\"\n+                },\n+                args.map(|arg| arg\n+                    .iter()\n+                    .map(|arg| self.tcx.sess.source_map().span_to_snippet(arg.span)\n+                        .unwrap_or_else(|_| \"...\".to_owned()))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \")\n+                ).unwrap_or_else(|| \"...\".to_owned())\n+            ));\n+        };\n+\n         let report_candidates = |\n             span: Span,\n             err: &mut DiagnosticBuilder<'_>,\n@@ -139,6 +165,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             err.note(&note_str);\n                         }\n+                        if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n+                            print_disambiguation_help(err, self.tcx.def_path_str(trait_ref.def_id));\n+                        }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n                         let item = match self.associated_item(\n@@ -163,24 +192,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        \"the candidate is defined in the trait `{}`\",\n                                        self.tcx.def_path_str(trait_did));\n                         }\n-                        err.help(&format!(\"to disambiguate the method call, write `{}::{}({}{})` \\\n-                                          instead\",\n-                                          self.tcx.def_path_str(trait_did),\n-                                          item_name,\n-                                          if rcvr_ty.is_region_ptr() && args.is_some() {\n-                                              if rcvr_ty.is_mutable_pointer() {\n-                                                  \"&mut \"\n-                                              } else {\n-                                                  \"&\"\n-                                              }\n-                                          } else {\n-                                              \"\"\n-                                          },\n-                                          args.map(|arg| arg.iter()\n-                                              .map(|arg| print::to_string(print::NO_ANN,\n-                                                                          |s| s.print_expr(arg)))\n-                                              .collect::<Vec<_>>()\n-                                              .join(\", \")).unwrap_or_else(|| \"...\".to_owned())));\n+                        print_disambiguation_help(err, self.tcx.def_path_str(trait_did));\n                     }\n                 }\n             }"}, {"sha": "22bf840660536c7d489cc9e12b2850b15091a191", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.rs?ref=bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "patch": "@@ -0,0 +1,16 @@\n+trait A { fn foo(self); }\n+trait B { fn foo(self); }\n+\n+struct AB {}\n+\n+impl A for AB {\n+    fn foo(self) {}\n+}\n+\n+impl B for AB {\n+    fn foo(self) {}\n+}\n+\n+fn main() {\n+    AB {}.foo();  //~ ERROR E0034\n+}"}, {"sha": "0b3724e030fa49ae986a6ef7b56ab5b25caafa3e", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr?ref=bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "patch": "@@ -0,0 +1,22 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:15:11\n+   |\n+LL |     AB {}.foo();\n+   |           ^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:7:5\n+   |\n+LL |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `A::foo(AB {})` instead\n+note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls.rs:11:5\n+   |\n+LL |     fn foo(self) {}\n+   |     ^^^^^^^^^^^^\n+   = help: to disambiguate the method call, write `B::foo(AB {})` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}, {"sha": "0a96c1223da36a475e769f0aa1880a59bd3b2227", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.rs?ref=bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "patch": "@@ -0,0 +1,16 @@\n+trait A { fn foo(); }\n+trait B { fn foo(); }\n+\n+struct AB {}\n+\n+impl A for AB {\n+    fn foo() {}\n+}\n+\n+impl B for AB {\n+    fn foo() {}\n+}\n+\n+fn main() {\n+    AB::foo();  //~ ERROR E0034\n+}"}, {"sha": "81c99b33c813e07ff30cbe4ba287372605ca8812", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd8813e52c5120c40ec3cca096ff4a98fdf56be8/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=bd8813e52c5120c40ec3cca096ff4a98fdf56be8", "patch": "@@ -0,0 +1,22 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:5\n+   |\n+LL |     AB::foo();\n+   |     ^^^^^^^ multiple `foo` found\n+   |\n+note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:7:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `A::foo(...)` instead\n+note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:11:5\n+   |\n+LL |     fn foo() {}\n+   |     ^^^^^^^^\n+   = help: to disambiguate the method call, write `B::foo(...)` instead\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}]}