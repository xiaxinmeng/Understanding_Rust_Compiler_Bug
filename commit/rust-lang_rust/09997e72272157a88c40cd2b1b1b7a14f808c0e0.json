{"sha": "09997e72272157a88c40cd2b1b1b7a14f808c0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5OTk3ZTcyMjcyMTU3YTg4YzQwY2QyYjFiMWI3YTE0ZjgwOGMwZTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T10:00:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:35:23Z"}, "message": "error_block_no_opening_brace: handle closures better", "tree": {"sha": "18b34f8c291b2ffa76f74181f645c412040c90b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b34f8c291b2ffa76f74181f645c412040c90b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09997e72272157a88c40cd2b1b1b7a14f808c0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09997e72272157a88c40cd2b1b1b7a14f808c0e0", "html_url": "https://github.com/rust-lang/rust/commit/09997e72272157a88c40cd2b1b1b7a14f808c0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09997e72272157a88c40cd2b1b1b7a14f808c0e0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c01b3e6996a803d7794546cbcbba867eff8fb6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c01b3e6996a803d7794546cbcbba867eff8fb6e2", "html_url": "https://github.com/rust-lang/rust/commit/c01b3e6996a803d7794546cbcbba867eff8fb6e2"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "fb85f54b136a76f1a40870ddc4f334e79636e62a", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=09997e72272157a88c40cd2b1b1b7a14f808c0e0", "patch": "@@ -259,16 +259,14 @@ impl<'a> Parser<'a> {\n         //\n         // which is valid in other languages, but not Rust.\n         match self.parse_stmt_without_recovery() {\n-            Ok(Some(stmt)) => {\n+            // If the next token is an open brace (e.g., `if a b {`), the place-\n+            // inside-a-block suggestion would be more likely wrong than right.\n+            Ok(Some(_))\n                 if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n-                    || do_not_suggest_help\n-                {\n-                    // If the next token is an open brace (e.g., `if a b {`), the place-\n-                    // inside-a-block suggestion would be more likely wrong than right.\n-                    e.span_label(sp, \"expected `{`\");\n-                    return Err(e);\n-                }\n-                let stmt_span = if self.eat(&token::Semi) {\n+                    || do_not_suggest_help => {}\n+            Ok(Some(stmt)) => {\n+                let stmt_own_line = self.sess.source_map().is_line_before_span_empty(sp);\n+                let stmt_span = if stmt_own_line && self.eat(&token::Semi) {\n                     // Expand the span to include the semicolon.\n                     stmt.span.with_hi(self.prev_token.span.hi())\n                 } else {"}, {"sha": "5170f69e059852e4d9524d96878cc45af72c1c9b", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=09997e72272157a88c40cd2b1b1b7a14f808c0e0", "patch": "@@ -517,6 +517,13 @@ impl SourceMap {\n         Ok((lo, hi))\n     }\n \n+    pub fn is_line_before_span_empty(&self, sp: Span) -> bool {\n+        match self.span_to_prev_source(sp) {\n+            Ok(s) => s.split('\\n').last().map(|l| l.trim_start().is_empty()).unwrap_or(false),\n+            Err(_) => false,\n+        }\n+    }\n+\n     pub fn span_to_lines(&self, sp: Span) -> FileLinesResult {\n         debug!(\"span_to_lines(sp={:?})\", sp);\n         let (lo, hi) = self.is_valid_span(sp)?;"}, {"sha": "af4901509135a53f66722c75d391668ca5c9ab7d", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=09997e72272157a88c40cd2b1b1b7a14f808c0e0", "patch": "@@ -140,7 +140,7 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n-   |                                --   ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                --   ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                |    |\n    |                                |    expected `{`\n    |                                this `if` expression has a condition, but no block\n@@ -163,7 +163,7 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n-   |                                             ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                             ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                             |\n    |                                             expected `{`\n \n@@ -179,15 +179,15 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-   |                                             ^       -------- help: try placing this code inside a block: `{ if 0 {}; }`\n+   |                                             ^       ------- help: try placing this code inside a block: `{ if 0 {} }`\n    |                                             |\n    |                                             expected `{`\n \n error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:53:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n-   |                                             --   ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                             --   ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                             |    |\n    |                                             |    expected `{`\n    |                                             this `if` expression has a condition, but no block\n@@ -204,7 +204,7 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n-   |                                --           ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                --           ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                |            |\n    |                                |            expected `{`\n    |                                this `if` expression has a condition, but no block\n@@ -227,7 +227,7 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n-   |                                                     ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                                     ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                                     |\n    |                                                     expected `{`\n \n@@ -243,15 +243,15 @@ error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-   |                                                     ^       ---------------- help: try placing this code inside a block: `{ if let _ = 0 {}; }`\n+   |                                                     ^       --------------- help: try placing this code inside a block: `{ if let _ = 0 {} }`\n    |                                                     |\n    |                                                     expected `{`\n \n error: expected `{`, found `#`\n   --> $DIR/attr-stmt-expr-attr-bad.rs:69:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n-   |                                                     --           ^       --- help: try placing this code inside a block: `{ {}; }`\n+   |                                                     --           ^       -- help: try placing this code inside a block: `{ {} }`\n    |                                                     |            |\n    |                                                     |            expected `{`\n    |                                                     this `if` expression has a condition, but no block"}, {"sha": "1ccdd977305559e318cd35b99b035fc08b9929b2", "filename": "src/test/ui/parser/closure-return-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09997e72272157a88c40cd2b1b1b7a14f808c0e0/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr?ref=09997e72272157a88c40cd2b1b1b7a14f808c0e0", "patch": "@@ -2,10 +2,10 @@ error: expected `{`, found `22`\n   --> $DIR/closure-return-syntax.rs:5:23\n    |\n LL |     let x = || -> i32 22;\n-   |                       ^^-\n+   |                       ^^\n    |                       |\n    |                       expected `{`\n-   |                       help: try placing this code inside a block: `{ 22; }`\n+   |                       help: try placing this code inside a block: `{ 22 }`\n \n error: aborting due to previous error\n "}]}