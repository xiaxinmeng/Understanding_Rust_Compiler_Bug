{"sha": "582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmEwNWZjOTVjOGFkZjZlY2Y2MzE4ZWEwOWVkNmNkNWJiZTViMzM=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-22T19:42:25Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-22T19:42:25Z"}, "message": "Moved ascii out of str\nRemoved deriving Ord, which allowed to remove the stage markers", "tree": {"sha": "dba8c41cc9d258c566ff7567d218836c31b356db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba8c41cc9d258c566ff7567d218836c31b356db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "html_url": "https://github.com/rust-lang/rust/commit/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df61ec2da6c4bb6e77ec15d0e5a60e4122b79d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/df61ec2da6c4bb6e77ec15d0e5a60e4122b79d75", "html_url": "https://github.com/rust-lang/rust/commit/df61ec2da6c4bb6e77ec15d0e5a60e4122b79d75"}], "stats": {"total": 73, "additions": 35, "deletions": 38}, "files": [{"sha": "6d38d72e3f6492a34be4bd143a19a53f70e5b2b8", "filename": "src/libcore/core.rc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "patch": "@@ -159,6 +159,9 @@ pub mod vec;\n pub mod at_vec;\n pub mod str;\n \n+#[path = \"str/ascii.rs\"]\n+pub mod ascii;\n+\n pub mod ptr;\n pub mod owned;\n pub mod managed;"}, {"sha": "fb4f9188b3bd018ca1732ac0c47a76db275f9503", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "patch": "@@ -40,11 +40,7 @@ pub use path::Path;\n pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::Ptr;\n-// NOTE: Remove markers after snapshot\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n-pub use str::{Ascii, AsciiCast, OwnedAsciiCast, ToStrAscii};\n+pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr};\n pub use str::{StrSlice, OwnedStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "dc97af22c470f21b879dc35c7de720c4cb48b004", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "patch": "@@ -17,12 +17,6 @@\n  * some heavy-duty uses, try std::rope.\n  */\n \n-// NOTE: Remove markers after snapshot\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n-pub use self::ascii::{Ascii, AsciiCast, OwnedAsciiCast, ToStrAscii};\n-\n use at_vec;\n use cast;\n use char;\n@@ -40,13 +34,6 @@ use to_str::ToStr;\n \n #[cfg(notest)] use cmp::{Eq, Ord, Equiv, TotalEq};\n \n-// NOTE: Remove markers after snapshot\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n-#[path = \"str/ascii.rs\"]\n-mod ascii;\n-\n /*\n Section: Creating a string\n */"}, {"sha": "447ca3497e8739353c3ef6770ca22cd836eaad91", "filename": "src/libcore/str/ascii.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=582a05fc95c8adf6ecf6318ea09ed6cd5bbe5b33", "patch": "@@ -12,12 +12,8 @@ use to_str::{ToStr,ToStrConsume};\n use str;\n use cast;\n \n-#[cfg(test)]\n-pub struct Ascii { priv chr: u8 }\n-\n /// Datatype to hold one ascii character. It is 8 bit long.\n-#[cfg(notest)]\n-#[deriving(Clone, Eq, Ord)]\n+#[deriving(Clone, Eq)]\n pub struct Ascii { priv chr: u8 }\n \n pub impl Ascii {\n@@ -163,18 +159,35 @@ impl OwnedAsciiCast for ~str {\n }\n \n /// Trait for converting an ascii type to a string. Needed to convert `&[Ascii]` to `~str`\n-pub trait ToStrAscii {\n+pub trait AsciiStr {\n     /// Convert to a string.\n     fn to_str_ascii(&self) -> ~str;\n+\n+    /// Convert to vector representing a lower cased ascii string.\n+    fn to_lower(&self) -> ~[Ascii];\n+\n+    /// Convert to vector representing a upper cased ascii string.\n+    fn to_upper(&self) -> ~[Ascii];\n+\n }\n \n-impl<'self> ToStrAscii for &'self [Ascii] {\n+impl<'self> AsciiStr for &'self [Ascii] {\n     #[inline(always)]\n     fn to_str_ascii(&self) -> ~str {\n         let mut cpy = self.to_owned();\n         cpy.push(0u8.to_ascii());\n         unsafe {cast::transmute(cpy)}\n     }\n+\n+    #[inline(always)]\n+    fn to_lower(&self) -> ~[Ascii] {\n+        self.map(|a| a.to_lower())\n+    }\n+\n+    #[inline(always)]\n+    fn to_upper(&self) -> ~[Ascii] {\n+        self.map(|a| a.to_upper())\n+    }\n }\n \n impl ToStrConsume for ~[Ascii] {\n@@ -186,13 +199,8 @@ impl ToStrConsume for ~[Ascii] {\n     }\n }\n \n-// NOTE: Remove stage0 marker after snapshot\n-#[cfg(and(test, not(stage0)))]\n mod tests {\n     use super::*;\n-    use to_str::{ToStr,ToStrConsume};\n-    use str;\n-    use cast;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);\n@@ -206,15 +214,15 @@ mod tests {\n         assert_eq!('A'.to_ascii().to_char(), 'A');\n         assert_eq!('A'.to_ascii().to_byte(), 65u8);\n \n-        assert_eq!('A'.to_ascii().to_lower().to_char, 'a');\n-        assert_eq!('Z'.to_ascii().to_lower().to_char, 'z');\n-        assert_eq!('a'.to_ascii().to_upper().to_char, 'A');\n-        assert_eq!('z'.to_ascii().to_upper().to_char, 'Z');\n+        assert_eq!('A'.to_ascii().to_lower().to_char(), 'a');\n+        assert_eq!('Z'.to_ascii().to_lower().to_char(), 'z');\n+        assert_eq!('a'.to_ascii().to_upper().to_char(), 'A');\n+        assert_eq!('z'.to_ascii().to_upper().to_char(), 'Z');\n \n-        assert_eq!('@'.to_ascii().to_lower().to_char, '@');\n-        assert_eq!('['.to_ascii().to_lower().to_char, '[');\n-        assert_eq!('`'.to_ascii().to_upper().to_char, '`');\n-        assert_eq!('{'.to_ascii().to_upper().to_char, '{');\n+        assert_eq!('@'.to_ascii().to_lower().to_char(), '@');\n+        assert_eq!('['.to_ascii().to_lower().to_char(), '[');\n+        assert_eq!('`'.to_ascii().to_upper().to_char(), '`');\n+        assert_eq!('{'.to_ascii().to_upper().to_char(), '{');\n     }\n \n     #[test]\n@@ -225,6 +233,9 @@ mod tests {\n         // if chained-from directly\n         let v = ~[40u8, 32u8, 59u8]; assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n         let v = ~\"( ;\";              assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n+\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_lower().to_str_ascii(), ~\"abcdef&?#\");\n+        assert_eq!(\"abCDef&?#\".to_ascii().to_upper().to_str_ascii(), ~\"ABCDEF&?#\");\n     }\n \n     #[test]"}]}