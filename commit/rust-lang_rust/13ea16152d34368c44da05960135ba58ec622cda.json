{"sha": "13ea16152d34368c44da05960135ba58ec622cda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWExNjE1MmQzNDM2OGM0NGRhMDU5NjAxMzViYTU4ZWM2MjJjZGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T02:25:09Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-10-12T02:25:09Z"}, "message": "manual: remove as many ~[] literals as possible.", "tree": {"sha": "e1bff43962fd10efa34ebabd4eb76c5922775d0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bff43962fd10efa34ebabd4eb76c5922775d0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ea16152d34368c44da05960135ba58ec622cda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ea16152d34368c44da05960135ba58ec622cda", "html_url": "https://github.com/rust-lang/rust/commit/13ea16152d34368c44da05960135ba58ec622cda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ea16152d34368c44da05960135ba58ec622cda/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81d4f1f3c94716c6dcafaf88d860aaa5d3598ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d81d4f1f3c94716c6dcafaf88d860aaa5d3598ca", "html_url": "https://github.com/rust-lang/rust/commit/d81d4f1f3c94716c6dcafaf88d860aaa5d3598ca"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "3254b3398a5fa68a0e20a55ec8d9e452e650e048", "filename": "doc/rust.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13ea16152d34368c44da05960135ba58ec622cda/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/13ea16152d34368c44da05960135ba58ec622cda/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=13ea16152d34368c44da05960135ba58ec622cda", "patch": "@@ -908,10 +908,10 @@ declared, in an angle-bracket-enclosed, comma-separated list following\n the function name.\n \n ~~~~ {.xfail-test}\n-fn iter<T>(seq: ~[T], f: fn(T)) {\n+fn iter<T>(seq: &[T], f: fn(T)) {\n     for seq.each |elt| { f(elt); }\n }\n-fn map<T, U>(seq: ~[T], f: fn(T) -> U) -> ~[U] {\n+fn map<T, U>(seq: &[T], f: fn(T) -> U) -> ~[U] {\n     let mut acc = ~[];\n     for seq.each |elt| { acc.push(f(elt)); }\n     acc\n@@ -1608,9 +1608,9 @@ indicate that the elements of the resulting vector may be mutated.\n When no mutability is specified, the vector is immutable.\n \n ~~~~\n-~[1, 2, 3, 4];\n-~[\"a\", \"b\", \"c\", \"d\"];\n-~[mut 0u8, 0u8, 0u8, 0u8];\n+[1, 2, 3, 4];\n+[\"a\", \"b\", \"c\", \"d\"];\n+[mut 0u8, 0u8, 0u8, 0u8];\n ~~~~\n \n ### Index expressions\n@@ -1631,9 +1631,9 @@ task in a _failing state_.\n ~~~~\n # do task::spawn_unlinked {\n \n-(~[1, 2, 3, 4])[0];\n-(~[mut 'x', 'y'])[1] = 'z';\n-(~[\"a\", \"b\"])[10]; // fails\n+([1, 2, 3, 4])[0];\n+([mut 'x', 'y'])[1] = 'z';\n+([\"a\", \"b\"])[10]; // fails\n \n # }\n ~~~~\n@@ -1770,10 +1770,10 @@ Any other cast is unsupported and will fail to compile.\n An example of an `as` expression:\n \n ~~~~\n-# fn sum(v: ~[float]) -> float { 0.0 }\n-# fn len(v: ~[float]) -> int { 0 }\n+# fn sum(v: &[float]) -> float { 0.0 }\n+# fn len(v: &[float]) -> int { 0 }\n \n-fn avg(v: ~[float]) -> float {\n+fn avg(v: &[float]) -> float {\n   let sum: float = sum(v);\n   let sz: float = len(v) as float;\n   return sum / sz;\n@@ -1800,8 +1800,8 @@ No allocation or destruction is entailed.\n An example of three different move expressions:\n \n ~~~~~~~~\n-# let mut x = ~[mut 0];\n-# let a = ~[mut 0];\n+# let mut x = &[mut 0];\n+# let a = &[mut 0];\n # let b = 0;\n # let y = {mut z: 0};\n # let c = 0;\n@@ -1827,8 +1827,8 @@ No allocation or destruction is entailed.\n An example of three different swap expressions:\n \n ~~~~~~~~\n-# let mut x = ~[mut 0];\n-# let mut a = ~[mut 0];\n+# let mut x = &[mut 0];\n+# let mut a = &[mut 0];\n # let i = 0;\n # let y = {mut z: 0};\n # let b = {mut c: 0};\n@@ -1929,11 +1929,11 @@ the unary copy operator is typically only used to cause an argument to a functio\n An example of a copy expression:\n \n ~~~~\n-fn mutate(vec: ~[mut int]) {\n+fn mutate(vec: &[mut int]) {\n    vec[0] = 10;\n }\n \n-let v = ~[mut 1,2,3];\n+let v = &[mut 1,2,3];\n \n mutate(copy v);   // Pass a copy\n \n@@ -2716,7 +2716,7 @@ In this example, the trait `Printable` occurs as a type in both the type signatu\n Within the body of an item that has type parameter declarations, the names of its type parameters are types:\n \n ~~~~~~~\n-fn map<A: Copy, B: Copy>(f: fn(A) -> B, xs: ~[A]) -> ~[B] {\n+fn map<A: Copy, B: Copy>(f: fn(A) -> B, xs: &[A]) -> ~[B] {\n    if xs.len() == 0 { return ~[]; }\n    let first: B = f(xs[0]);\n    let rest: ~[B] = map(f, xs.slice(1, xs.len()));"}]}