{"sha": "f2961638c8b9c4494b962236aabfa9daa531f029", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOTYxNjM4YzhiOWM0NDk0Yjk2MjIzNmFhYmZhOWRhYTUzMWYwMjk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-10-02T23:51:36Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-10-03T13:53:13Z"}, "message": "Place all-targets checking behind a flag\n\nThis matches Cargo behavior and avoids the (somewhat expensive) double checking,\nas well as the unfortunate duplicate error messages (#76822,\nrust-lang/cargo#5128).", "tree": {"sha": "958bc7dff89aed1208f7c58ce6cbd61c8edb4501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958bc7dff89aed1208f7c58ce6cbd61c8edb4501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2961638c8b9c4494b962236aabfa9daa531f029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2961638c8b9c4494b962236aabfa9daa531f029", "html_url": "https://github.com/rust-lang/rust/commit/f2961638c8b9c4494b962236aabfa9daa531f029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2961638c8b9c4494b962236aabfa9daa531f029/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "html_url": "https://github.com/rust-lang/rust/commit/8876ffc9235dade728e1fbc4be4c85415fdd0bcd"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "c9c1f90277a9e7728f8530c2f593ed4db6efed37", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=f2961638c8b9c4494b962236aabfa9daa531f029", "patch": "@@ -6,7 +6,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n \n ## [Non-breaking changes since the last major version]\n \n-None.\n+- x.py check needs opt-in to check tests (--all-targets) [#77473](https://github.com/rust-lang/rust/pull/77473)\n \n ## [Version 2] - 2020-09-25\n "}, {"sha": "6856cd338cfad83f772ade8c81add34be3f8c81a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f2961638c8b9c4494b962236aabfa9daa531f029", "patch": "@@ -532,7 +532,7 @@ impl<'a> Builder<'a> {\n     pub fn new(build: &Build) -> Builder<'_> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n-            Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n+            Subcommand::Check { ref paths, all_targets: _ } => (Kind::Check, &paths[..]),\n             Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n             Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths, .. } => (Kind::Doc, &paths[..]),"}, {"sha": "371631154f72da87ef23cf934c7501d5c597d011", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=f2961638c8b9c4494b962236aabfa9daa531f029", "patch": "@@ -1,9 +1,12 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, std_cargo};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n+use crate::{\n+    builder::{Builder, Kind, RunConfig, ShouldRun, Step},\n+    Subcommand,\n+};\n use crate::{Compiler, Mode};\n use std::path::PathBuf;\n \n@@ -74,35 +77,37 @@ impl Step for Std {\n         //\n         // Currently only the \"libtest\" tree of crates does this.\n \n-        let mut cargo = builder.cargo(\n-            compiler,\n-            Mode::Std,\n-            SourceType::InTree,\n-            target,\n-            cargo_subcommand(builder.kind),\n-        );\n-        std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            let mut cargo = builder.cargo(\n+                compiler,\n+                Mode::Std,\n+                SourceType::InTree,\n+                target,\n+                cargo_subcommand(builder.kind),\n+            );\n+            std_cargo(builder, target, compiler.stage, &mut cargo);\n+            cargo.arg(\"--all-targets\");\n+\n+            // Explicitly pass -p for all dependencies krates -- this will force cargo\n+            // to also check the tests/benches/examples for these crates, rather\n+            // than just the leaf crate.\n+            for krate in builder.in_tree_crates(\"test\") {\n+                cargo.arg(\"-p\").arg(krate.name);\n+            }\n \n-        // Explicitly pass -p for all dependencies krates -- this will force cargo\n-        // to also check the tests/benches/examples for these crates, rather\n-        // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\") {\n-            cargo.arg(\"-p\").arg(krate.name);\n+            builder.info(&format!(\n+                \"Checking std test/bench/example targets ({} -> {})\",\n+                &compiler.host, target\n+            ));\n+            run_cargo(\n+                builder,\n+                cargo,\n+                args(builder.kind),\n+                &libstd_test_stamp(builder, compiler, target),\n+                vec![],\n+                true,\n+            );\n         }\n-\n-        builder.info(&format!(\n-            \"Checking std test/bench/example targets ({} -> {})\",\n-            &compiler.host, target\n-        ));\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder.kind),\n-            &libstd_test_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n     }\n }\n \n@@ -143,7 +148,9 @@ impl Step for Rustc {\n             cargo_subcommand(builder.kind),\n         );\n         rustc_cargo(builder, &mut cargo, target);\n-        cargo.arg(\"--all-targets\");\n+        if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+            cargo.arg(\"--all-targets\");\n+        }\n \n         // Explicitly pass -p for all compiler krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n@@ -205,7 +212,9 @@ macro_rules! tool_check_step {\n                     &[],\n                 );\n \n-                cargo.arg(\"--all-targets\");\n+                if let Subcommand::Check { all_targets: true, .. } = builder.config.cmd {\n+                    cargo.arg(\"--all-targets\");\n+                }\n \n                 builder.info(&format!(\n                     \"Checking {} artifacts ({} -> {})\","}, {"sha": "c1a9d4fcd23fef732c03ed1c11ffd8e108f02e23", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2961638c8b9c4494b962236aabfa9daa531f029/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=f2961638c8b9c4494b962236aabfa9daa531f029", "patch": "@@ -47,6 +47,9 @@ pub enum Subcommand {\n         paths: Vec<PathBuf>,\n     },\n     Check {\n+        // Whether to run checking over all targets (e.g., unit / integration\n+        // tests).\n+        all_targets: bool,\n         paths: Vec<PathBuf>,\n     },\n     Clippy {\n@@ -250,6 +253,9 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                         `/<build_base>/rustfix_missing_coverage.txt`\",\n                 );\n             }\n+            \"check\" => {\n+                opts.optflag(\"\", \"all-targets\", \"Check all targets\");\n+            }\n             \"bench\" => {\n                 opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n             }\n@@ -484,7 +490,9 @@ Arguments:\n \n         let cmd = match subcommand.as_str() {\n             \"build\" | \"b\" => Subcommand::Build { paths },\n-            \"check\" | \"c\" => Subcommand::Check { paths },\n+            \"check\" | \"c\" => {\n+                Subcommand::Check { paths, all_targets: matches.opt_present(\"all-targets\") }\n+            }\n             \"clippy\" => Subcommand::Clippy { paths },\n             \"fix\" => Subcommand::Fix { paths },\n             \"test\" | \"t\" => Subcommand::Test {"}]}