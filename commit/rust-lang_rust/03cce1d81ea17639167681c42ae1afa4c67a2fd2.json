{"sha": "03cce1d81ea17639167681c42ae1afa4c67a2fd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzY2NlMWQ4MWVhMTc2MzkxNjc2ODFjNDJhZTFhZmE0YzY3YTJmZDI=", "commit": {"author": {"name": "Jad Ghalayini", "email": "jad.ghalayini@hotmail.com", "date": "2019-05-26T20:48:02Z"}, "committer": {"name": "Jad Ghalayini", "email": "jad.ghalayini@hotmail.com", "date": "2019-05-26T20:48:02Z"}, "message": "Added error message for E0284", "tree": {"sha": "330dcc2112a1b8fe34f595f4697731eb5a5520ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/330dcc2112a1b8fe34f595f4697731eb5a5520ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03cce1d81ea17639167681c42ae1afa4c67a2fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03cce1d81ea17639167681c42ae1afa4c67a2fd2", "html_url": "https://github.com/rust-lang/rust/commit/03cce1d81ea17639167681c42ae1afa4c67a2fd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03cce1d81ea17639167681c42ae1afa4c67a2fd2/comments", "author": {"login": "imbrem", "id": 44735514, "node_id": "MDQ6VXNlcjQ0NzM1NTE0", "avatar_url": "https://avatars.githubusercontent.com/u/44735514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imbrem", "html_url": "https://github.com/imbrem", "followers_url": "https://api.github.com/users/imbrem/followers", "following_url": "https://api.github.com/users/imbrem/following{/other_user}", "gists_url": "https://api.github.com/users/imbrem/gists{/gist_id}", "starred_url": "https://api.github.com/users/imbrem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imbrem/subscriptions", "organizations_url": "https://api.github.com/users/imbrem/orgs", "repos_url": "https://api.github.com/users/imbrem/repos", "events_url": "https://api.github.com/users/imbrem/events{/privacy}", "received_events_url": "https://api.github.com/users/imbrem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "imbrem", "id": 44735514, "node_id": "MDQ6VXNlcjQ0NzM1NTE0", "avatar_url": "https://avatars.githubusercontent.com/u/44735514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/imbrem", "html_url": "https://github.com/imbrem", "followers_url": "https://api.github.com/users/imbrem/followers", "following_url": "https://api.github.com/users/imbrem/following{/other_user}", "gists_url": "https://api.github.com/users/imbrem/gists{/gist_id}", "starred_url": "https://api.github.com/users/imbrem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/imbrem/subscriptions", "organizations_url": "https://api.github.com/users/imbrem/orgs", "repos_url": "https://api.github.com/users/imbrem/repos", "events_url": "https://api.github.com/users/imbrem/events{/privacy}", "received_events_url": "https://api.github.com/users/imbrem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6db14e1cd60012f25be4fd8d2eb96ea5b4bb68", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6db14e1cd60012f25be4fd8d2eb96ea5b4bb68", "html_url": "https://github.com/rust-lang/rust/commit/dc6db14e1cd60012f25be4fd8d2eb96ea5b4bb68"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "ef4d13096baaec351812ff79b0e9b30591a1b10e", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/03cce1d81ea17639167681c42ae1afa4c67a2fd2/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03cce1d81ea17639167681c42ae1afa4c67a2fd2/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=03cce1d81ea17639167681c42ae1afa4c67a2fd2", "patch": "@@ -1207,6 +1207,52 @@ fn main() {\n ```\n \"##,\n \n+E0284: r##\"\n+This error occurs when the compiler is unable to unambiguously infer the\n+return type of a function or method which is generic on return type, such\n+as the `collect` method for `Iterator`s.\n+\n+For example:\n+\n+```compile_fail,E0284\n+fn foo() -> Result<bool, ()> {\n+    let results = [Ok(true), Ok(false), Err(())].iter().cloned();\n+    let v : Vec<bool> = results.collect()?;\n+    // Do things with v...\n+    Ok(true)\n+}\n+```\n+\n+Here we have an iterator `results` over `Result<bool, ()>`.\n+Hence, `results.collect()` can return any type implementing\n+`FromIterator<Result<bool, ()>>`. On the other hand, the\n+`?` operator can accept any type implementing `Try`.\n+\n+The user of this code probably wants `collect()` to return a\n+`Result<Vec<bool>, ()>`, but the compiler can't be sure\n+that there isn't another type `T` implementing both `Try` and\n+`FromIterator<Result<bool, ()>>` in scope such that\n+`T::Ok == Vec<bool>`. Hence, this code is ambiguous and an error\n+is returned.\n+\n+To resolve this error, use a concrete type for the intermediate expression:\n+\n+```\n+fn foo() -> Result<bool, ()> {\n+    let results = [Ok(true), Ok(false), Err(())].iter().cloned();\n+    let v = {\n+        let temp : Result<Vec<bool>, ()> = results.collect();\n+        temp?\n+    };\n+    // Do things with v...\n+    Ok(true)\n+}\n+```\n+Note that the type of `v` can now be inferred from the type of `temp`\n+\n+\n+\"##,\n+\n E0308: r##\"\n This error occurs when the compiler was unable to infer the concrete type of a\n variable. It can occur for several cases, the most common of which is a\n@@ -2158,7 +2204,6 @@ register_diagnostics! {\n     E0278, // requirement is not satisfied\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n-    E0284, // cannot resolve type\n //  E0285, // overflow evaluation builtin bounds\n //  E0296, // replaced with a generic attribute input check\n //  E0300, // unexpanded macro"}]}