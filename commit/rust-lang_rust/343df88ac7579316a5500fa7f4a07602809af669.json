{"sha": "343df88ac7579316a5500fa7f4a07602809af669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0M2RmODhhYzc1NzkzMTZhNTUwMGZhN2Y0YTA3NjAyODA5YWY2Njk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T16:35:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T16:35:19Z"}, "message": "Generate default lint completions", "tree": {"sha": "09db0d170e3fa31c118e6d0dce62af98f51ac5e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09db0d170e3fa31c118e6d0dce62af98f51ac5e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/343df88ac7579316a5500fa7f4a07602809af669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/343df88ac7579316a5500fa7f4a07602809af669", "html_url": "https://github.com/rust-lang/rust/commit/343df88ac7579316a5500fa7f4a07602809af669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/343df88ac7579316a5500fa7f4a07602809af669/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d17b6a6873d530eda89d271807dcb70a811a200", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d17b6a6873d530eda89d271807dcb70a811a200", "html_url": "https://github.com/rust-lang/rust/commit/5d17b6a6873d530eda89d271807dcb70a811a200"}], "stats": {"total": 1907, "additions": 1130, "deletions": 777}, "files": [{"sha": "f3f6f749cfd81e6b2db8a66c617c17d61ca28624", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 60, "deletions": 15, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -3,11 +3,13 @@ use hir::{\n     AsAssocItem, AssocItemContainer, GenericParam, HasAttrs, HasSource, HirDisplay, InFile, Module,\n     ModuleDef, Semantics,\n };\n-use ide_completion::generated_lint_completions::{CLIPPY_LINTS, FEATURES};\n use ide_db::{\n     base_db::SourceDatabase,\n     defs::{Definition, NameClass, NameRefClass},\n-    helpers::FamousDefs,\n+    helpers::{\n+        generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES},\n+        FamousDefs,\n+    },\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -206,25 +208,36 @@ fn try_hover_for_attribute(token: &SyntaxToken) -> Option<RangeInfo<HoverResult>\n     if !tt.syntax().text_range().contains(token.text_range().start()) {\n         return None;\n     }\n-    let lints = match &*path {\n-        \"feature\" => FEATURES,\n-        \"allow\" | \"warn\" | \"forbid\" | \"error\" => {\n-            let is_clippy = algo::skip_trivia_token(token.clone(), Direction::Prev)\n-                .filter(|t| t.kind() == T![::])\n-                .and_then(|t| algo::skip_trivia_token(t, Direction::Prev))\n-                .map_or(false, |t| t.kind() == T![ident] && t.text() == \"clippy\");\n+    let (is_clippy, lints) = match &*path {\n+        \"feature\" => (false, FEATURES),\n+        \"allow\" | \"deny\" | \"forbid\" | \"warn\" => {\n+            let is_clippy = algo::non_trivia_sibling(token.clone().into(), Direction::Prev)\n+                .filter(|t| t.kind() == T![:])\n+                .and_then(|t| algo::non_trivia_sibling(t, Direction::Prev))\n+                .filter(|t| t.kind() == T![:])\n+                .and_then(|t| algo::non_trivia_sibling(t, Direction::Prev))\n+                .map_or(false, |t| {\n+                    t.kind() == T![ident] && t.into_token().map_or(false, |t| t.text() == \"clippy\")\n+                });\n             if is_clippy {\n-                CLIPPY_LINTS\n+                (true, CLIPPY_LINTS)\n             } else {\n-                &[]\n+                (false, DEFAULT_LINTS)\n             }\n         }\n         _ => return None,\n     };\n-    let lint = lints\n-        .binary_search_by_key(&token.text(), |lint| lint.label)\n-        .ok()\n-        .map(|idx| &FEATURES[idx])?;\n+\n+    let tmp;\n+    let needle = if is_clippy {\n+        tmp = format!(\"clippy::{}\", token.text());\n+        &tmp\n+    } else {\n+        &*token.text()\n+    };\n+\n+    let lint =\n+        lints.binary_search_by_key(&needle, |lint| lint.label).ok().map(|idx| &lints[idx])?;\n     Some(RangeInfo::new(\n         token.text_range(),\n         HoverResult {\n@@ -4055,4 +4068,36 @@ pub fn foo() {}\n             \"##]],\n         )\n     }\n+\n+    #[test]\n+    fn hover_lint() {\n+        check(\n+            r#\"#![allow(arithmetic_overflow$0)]\"#,\n+            expect![[r#\"\n+                *arithmetic_overflow*\n+                ```\n+                arithmetic_overflow\n+                ```\n+                ___\n+\n+                arithmetic operation overflows\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn hover_clippy_lint() {\n+        check(\n+            r#\"#![allow(clippy::almost_swapped$0)]\"#,\n+            expect![[r#\"\n+                *almost_swapped*\n+                ```\n+                clippy::almost_swapped\n+                ```\n+                ___\n+\n+                Checks for `foo = bar; bar = foo` sequences.\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "f80d7eec345c10221dc5a0521986e18e5919a29e", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -3,20 +3,19 @@\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n \n+use ide_db::helpers::generated_lints::{CLIPPY_LINTS, DEFAULT_LINTS, FEATURES};\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{algo::non_trivia_sibling, ast, AstNode, Direction, NodeOrToken, SyntaxKind, T};\n \n use crate::{\n     context::CompletionContext,\n-    generated_lint_completions::{CLIPPY_LINTS, FEATURES},\n     item::{CompletionItem, CompletionItemKind, CompletionKind},\n     Completions,\n };\n \n mod derive;\n mod lint;\n-pub(crate) use self::lint::LintCompletion;\n \n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n@@ -25,7 +24,7 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n             \"derive\" => derive::complete_derive(acc, ctx, token_tree),\n             \"feature\" => lint::complete_lint(acc, ctx, token_tree, FEATURES),\n             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                lint::complete_lint(acc, ctx, token_tree.clone(), lint::DEFAULT_LINT_COMPLETIONS);\n+                lint::complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINTS);\n                 lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n             }\n             _ => (),"}, {"sha": "b486c90938518443597293f64e84044163269ff4", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 2, "deletions": 125, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -1,4 +1,5 @@\n //! Completion for lints\n+use ide_db::helpers::generated_lints::Lint;\n use syntax::ast;\n \n use crate::{\n@@ -11,7 +12,7 @@ pub(super) fn complete_lint(\n     acc: &mut Completions,\n     ctx: &CompletionContext,\n     derive_input: ast::TokenTree,\n-    lints_completions: &[LintCompletion],\n+    lints_completions: &[Lint],\n ) {\n     if let Some(existing_lints) = super::parse_comma_sep_input(derive_input) {\n         for lint_completion in lints_completions\n@@ -29,130 +30,6 @@ pub(super) fn complete_lint(\n     }\n }\n \n-pub struct LintCompletion {\n-    pub label: &'static str,\n-    pub description: &'static str,\n-}\n-\n-#[rustfmt::skip]\n-pub const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n-    LintCompletion { label: \"absolute_paths_not_starting_with_crate\", description: r#\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"# },\n-    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n-    LintCompletion { label: \"anonymous_parameters\", description: r#\"detects anonymous parameters\"# },\n-    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n-    LintCompletion { label: \"array_into_iter\", description: r#\"detects calling `into_iter` on arrays\"# },\n-    LintCompletion { label: \"asm_sub_register\", description: r#\"using only a subset of a register for inline asm inputs\"# },\n-    LintCompletion { label: \"bare_trait_objects\", description: r#\"suggest using `dyn Trait` for trait objects\"# },\n-    LintCompletion { label: \"bindings_with_variant_name\", description: r#\"detects pattern bindings with the same name as one of the matched variants\"# },\n-    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n-    LintCompletion { label: \"cenum_impl_drop_cast\", description: r#\"a C-like enum implementing Drop is cast\"# },\n-    LintCompletion { label: \"clashing_extern_declarations\", description: r#\"detects when an extern fn has been declared with the same name but different types\"# },\n-    LintCompletion { label: \"coherence_leak_check\", description: r#\"distinct impls distinguished only by the leak-check code\"# },\n-    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"confusable_idents\", description: r#\"detects visually confusable pairs between identifiers\"# },\n-    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n-    LintCompletion { label: \"dead_code\", description: r#\"detect unused, unexported items\"# },\n-    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n-    LintCompletion { label: \"deprecated\", description: r#\"detects use of deprecated items\"# },\n-    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n-    LintCompletion { label: \"ellipsis_inclusive_range_patterns\", description: r#\"`...` range patterns are deprecated\"# },\n-    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n-    LintCompletion { label: \"exported_private_dependencies\", description: r#\"public interface leaks type from a private dependency\"# },\n-    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"illegal_floating_point_literal_pattern\", description: r#\"floating-point literals cannot be used in patterns\"# },\n-    LintCompletion { label: \"improper_ctypes_definitions\", description: r#\"proper use of libc types in foreign item definitions\"# },\n-    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n-    LintCompletion { label: \"incomplete_features\", description: r#\"incomplete features that may function improperly in some or all cases\"# },\n-    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n-    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n-    LintCompletion { label: \"inline_no_sanitize\", description: r#\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"# },\n-    LintCompletion { label: \"intra_doc_link_resolution_failure\", description: r#\"failures in resolving intra-doc link targets\"# },\n-    LintCompletion { label: \"invalid_codeblock_attributes\", description: r#\"codeblock attribute looks a lot like a known one\"# },\n-    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n-    LintCompletion { label: \"invalid_value\", description: r#\"an invalid value is being created (such as a NULL reference)\"# },\n-    LintCompletion { label: \"irrefutable_let_patterns\", description: r#\"detects irrefutable patterns in if-let and while-let statements\"# },\n-    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n-    LintCompletion { label: \"late_bound_lifetime_arguments\", description: r#\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"# },\n-    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n-    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n-    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n-    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n-    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n-    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n-    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n-    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n-    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n-    LintCompletion { label: \"mixed_script_confusables\", description: r#\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"# },\n-    LintCompletion { label: \"mutable_borrow_reservation_conflict\", description: r#\"reservation of a two-phased borrow conflicts with other shared borrows\"# },\n-    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n-    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n-    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n-    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n-    LintCompletion { label: \"non_camel_case_types\", description: r#\"types, variants, traits and type parameters should have camel case names\"# },\n-    LintCompletion { label: \"non_shorthand_field_patterns\", description: r#\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"# },\n-    LintCompletion { label: \"non_snake_case\", description: r#\"variables, methods, functions, lifetime parameters and modules should have snake case names\"# },\n-    LintCompletion { label: \"non_upper_case_globals\", description: r#\"static constants should have uppercase identifiers\"# },\n-    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n-    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n-    LintCompletion { label: \"overlapping_patterns\", description: r#\"detects overlapping patterns\"# },\n-    LintCompletion { label: \"path_statements\", description: r#\"path statements with no effect\"# },\n-    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n-    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n-    LintCompletion { label: \"private_in_public\", description: r#\"detect private items in public interfaces not caught by the old implementation\"# },\n-    LintCompletion { label: \"proc_macro_derive_resolution_fallback\", description: r#\"detects proc macro derives using inaccessible names from parent modules\"# },\n-    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n-    LintCompletion { label: \"redundant_semicolons\", description: r#\"detects unnecessary trailing semicolons\"# },\n-    LintCompletion { label: \"renamed_and_removed_lints\", description: r#\"lints that have been renamed or removed\"# },\n-    LintCompletion { label: \"safe_packed_borrows\", description: r#\"safe borrows of fields of packed structs were erroneously allowed\"# },\n-    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n-    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n-    LintCompletion { label: \"stable_features\", description: r#\"stable features found in `#[feature]` directive\"# },\n-    LintCompletion { label: \"trivial_bounds\", description: r#\"these bounds don't depend on an type parameters\"# },\n-    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n-    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n-    LintCompletion { label: \"type_alias_bounds\", description: r#\"bounds in type aliases are not enforced\"# },\n-    LintCompletion { label: \"tyvar_behind_raw_pointer\", description: r#\"raw pointer to an inference variable\"# },\n-    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n-    LintCompletion { label: \"uncommon_codepoints\", description: r#\"detects uncommon Unicode codepoints in identifiers\"# },\n-    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n-    LintCompletion { label: \"unconditional_recursion\", description: r#\"functions that cannot return without calling themselves\"# },\n-    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n-    LintCompletion { label: \"unknown_lints\", description: r#\"unrecognized lint attribute\"# },\n-    LintCompletion { label: \"unnameable_test_items\", description: r#\"detects an item that cannot be named being marked as `#[test_case]`\"# },\n-    LintCompletion { label: \"unreachable_code\", description: r#\"detects unreachable code paths\"# },\n-    LintCompletion { label: \"unreachable_patterns\", description: r#\"detects unreachable patterns\"# },\n-    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n-    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n-    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n-    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n-    LintCompletion { label: \"unstable_name_collisions\", description: r#\"detects name collision with an existing but unstable method\"# },\n-    LintCompletion { label: \"unused_allocation\", description: r#\"detects unnecessary allocations that can be eliminated\"# },\n-    LintCompletion { label: \"unused_assignments\", description: r#\"detect assignments that will never be read\"# },\n-    LintCompletion { label: \"unused_attributes\", description: r#\"detects attributes that were not used by the compiler\"# },\n-    LintCompletion { label: \"unused_braces\", description: r#\"unnecessary braces around an expression\"# },\n-    LintCompletion { label: \"unused_comparisons\", description: r#\"comparisons made useless by limits of the types involved\"# },\n-    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n-    LintCompletion { label: \"unused_doc_comments\", description: r#\"detects doc comments that aren't used by rustdoc\"# },\n-    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n-    LintCompletion { label: \"unused_features\", description: r#\"unused features found in crate-level `#[feature]` directives\"# },\n-    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n-    LintCompletion { label: \"unused_imports\", description: r#\"imports that are never used\"# },\n-    LintCompletion { label: \"unused_labels\", description: r#\"detects labels that are never used\"# },\n-    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n-    LintCompletion { label: \"unused_macros\", description: r#\"detects macros that were not used\"# },\n-    LintCompletion { label: \"unused_must_use\", description: r#\"unused result of a type flagged as `#[must_use]`\"# },\n-    LintCompletion { label: \"unused_mut\", description: r#\"detect mut variables which don't need to be mutable\"# },\n-    LintCompletion { label: \"unused_parens\", description: r#\"`if`, `match`, `while` and `return` do not need parentheses\"# },\n-    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n-    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n-    LintCompletion { label: \"unused_unsafe\", description: r#\"unnecessary use of an `unsafe` block\"# },\n-    LintCompletion { label: \"unused_variables\", description: r#\"detect variables which are not used in any way\"# },\n-    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n-    LintCompletion { label: \"warnings\", description: r#\"mass-change the level for lints which produce warnings\"# },\n-    LintCompletion { label: \"where_clauses_object_safety\", description: r#\"checks the object safety of where clauses\"# },\n-    LintCompletion { label: \"while_true\", description: r#\"suggest using `loop { }` instead of `while true { }`\"# },\n-];\n-\n #[cfg(test)]\n mod tests {\n "}, {"sha": "6fb38f50d05c1eb193d4184ae085d6aa2a0f77bf", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -10,8 +10,6 @@ mod render;\n \n mod completions;\n \n-pub mod generated_lint_completions;\n-\n use completions::flyimport::position_for_import;\n use ide_db::{\n     base_db::FilePosition,"}, {"sha": "00900cdc222960646cafabcceaf3dd29b583e6e5", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -3,6 +3,7 @@ pub mod import_assets;\n pub mod insert_use;\n pub mod merge_imports;\n pub mod rust_doc;\n+pub mod generated_lints;\n \n use std::collections::VecDeque;\n "}, {"sha": "77021bae0c56e85f3c6a4603dd800dd5f7b81e1d", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "renamed", "additions": 1024, "deletions": 621, "changes": 1645, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "previous_filename": "crates/ide_completion/src/generated_lint_completions.rs"}, {"sha": "d56b23218eb6117282d6adc7d0529ffb776021b3", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/343df88ac7579316a5500fa7f4a07602809af669/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/343df88ac7579316a5500fa7f4a07602809af669/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=343df88ac7579316a5500fa7f4a07602809af669", "patch": "@@ -12,23 +12,54 @@ pub(crate) fn generate_lint_completions() -> Result<()> {\n         cmd!(\"git clone --depth=1 https://github.com/rust-lang/rust ./target/rust\").run()?;\n     }\n \n-    let mut contents = String::from(\"use crate::completions::attribute::LintCompletion;\\n\\n\");\n-    generate_descriptor(&mut contents, \"./target/rust/src/doc/unstable-book/src\".into())?;\n+    let mut contents = String::from(\n+        r#\"pub struct Lint {\n+    pub label: &'static str,\n+    pub description: &'static str,\n+}\n+\n+\"#,\n+    );\n+    generate_lint_descriptor(&mut contents)?;\n+    contents.push('\\n');\n+\n+    generate_feature_descriptor(&mut contents, \"./target/rust/src/doc/unstable-book/src\".into())?;\n     contents.push('\\n');\n \n     cmd!(\"curl http://rust-lang.github.io/rust-clippy/master/lints.json --output ./target/clippy_lints.json\").run()?;\n     generate_descriptor_clippy(&mut contents, &Path::new(\"./target/clippy_lints.json\"))?;\n     let contents = reformat(&contents)?;\n \n-    let destination =\n-        project_root().join(\"crates/ide_completion/src/generated_lint_completions.rs\");\n+    let destination = project_root().join(\"crates/ide_db/src/helpers/generated_lints.rs\");\n     ensure_file_contents(destination.as_path(), &contents)?;\n \n     Ok(())\n }\n \n-fn generate_descriptor(buf: &mut String, src_dir: PathBuf) -> Result<()> {\n-    buf.push_str(r#\"pub const FEATURES: &[LintCompletion] = &[\"#);\n+fn generate_lint_descriptor(buf: &mut String) -> Result<()> {\n+    let stdout = cmd!(\"rustc -W help\").read()?;\n+    let start = stdout.find(\"----  -------  -------\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    let end =\n+        stdout.rfind(\"Lint groups provided by rustc:\").ok_or_else(|| anyhow::format_err!(\"\"))?;\n+    buf.push_str(r#\"pub const DEFAULT_LINTS: &[Lint] = &[\"#);\n+    buf.push('\\n');\n+    let mut lints = stdout[start..end]\n+        .lines()\n+        .filter(|l| !l.is_empty())\n+        .flat_map(|line| {\n+            let (name, rest) = line.trim().split_once(char::is_whitespace)?;\n+            let (_default_level, description) = rest.trim().split_once(char::is_whitespace)?;\n+            Some((name.trim(), description.trim()))\n+        })\n+        .collect::<Vec<_>>();\n+    lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n+    lints.into_iter().for_each(|(name, description)| push_lint_completion(buf, name, description));\n+    buf.push_str(\"];\\n\");\n+    Ok(())\n+}\n+\n+fn generate_feature_descriptor(buf: &mut String, src_dir: PathBuf) -> Result<()> {\n+    buf.push_str(r#\"pub const FEATURES: &[Lint] = &[\"#);\n     buf.push('\\n');\n     let mut vec = [\"language-features\", \"library-features\"]\n         .iter()\n@@ -46,9 +77,8 @@ fn generate_descriptor(buf: &mut String, src_dir: PathBuf) -> Result<()> {\n         })\n         .collect::<Vec<_>>();\n     vec.sort_by(|(feature_ident, _), (feature_ident2, _)| feature_ident.cmp(feature_ident2));\n-    vec.into_iter().for_each(|(feature_ident, doc)| {\n-        push_lint_completion(buf, &feature_ident, &doc);\n-    });\n+    vec.into_iter()\n+        .for_each(|(feature_ident, doc)| push_lint_completion(buf, &feature_ident, &doc));\n     buf.push_str(\"];\\n\");\n     Ok(())\n }\n@@ -90,7 +120,7 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) -> Result<()> {\n         }\n     }\n     clippy_lints.sort_by(|lint, lint2| lint.id.cmp(&lint2.id));\n-    buf.push_str(r#\"pub const CLIPPY_LINTS: &[LintCompletion] = &[\"#);\n+    buf.push_str(r#\"pub const CLIPPY_LINTS: &[Lint] = &[\"#);\n     buf.push('\\n');\n     clippy_lints.into_iter().for_each(|clippy_lint| {\n         let lint_ident = format!(\"clippy::{}\", clippy_lint.id);\n@@ -106,7 +136,7 @@ fn generate_descriptor_clippy(buf: &mut String, path: &Path) -> Result<()> {\n fn push_lint_completion(buf: &mut String, label: &str, description: &str) {\n     writeln!(\n         buf,\n-        r###\"    LintCompletion {{\n+        r###\"    Lint {{\n         label: \"{}\",\n         description: r##\"{}\"##\n     }},\"###,"}]}