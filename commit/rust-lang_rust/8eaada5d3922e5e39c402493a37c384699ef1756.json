{"sha": "8eaada5d3922e5e39c402493a37c384699ef1756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYWFkYTVkMzkyMmU1ZTM5YzQwMjQ5M2EzN2MzODQ2OTllZjE3NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-27T20:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-27T20:11:58Z"}, "message": "auto merge of #13151 : brson/rust/dist, r=alexcrichton,brson\n\nA variety of stuff here, mostly aimed at making `make install` work correctly with `--libdir` and `--mandir`. `make install` again goes through `install.sh`.", "tree": {"sha": "9165f26c35bfa943b6997e8c18edd3fe5ce55621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9165f26c35bfa943b6997e8c18edd3fe5ce55621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eaada5d3922e5e39c402493a37c384699ef1756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eaada5d3922e5e39c402493a37c384699ef1756", "html_url": "https://github.com/rust-lang/rust/commit/8eaada5d3922e5e39c402493a37c384699ef1756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eaada5d3922e5e39c402493a37c384699ef1756/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b04fba529860a30494a5acfbc8749bbb4fd414f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b04fba529860a30494a5acfbc8749bbb4fd414f", "html_url": "https://github.com/rust-lang/rust/commit/3b04fba529860a30494a5acfbc8749bbb4fd414f"}, {"sha": "0f4f786b6220968a7b29ad2e587f8d7ef70cebcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4f786b6220968a7b29ad2e587f8d7ef70cebcb", "html_url": "https://github.com/rust-lang/rust/commit/0f4f786b6220968a7b29ad2e587f8d7ef70cebcb"}], "stats": {"total": 278, "additions": 154, "deletions": 124}, "files": [{"sha": "660aeae62171328509f283cc646b42d7475782de", "filename": "Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -232,19 +232,20 @@ ifneq ($(strip $(findstring prepare,$(MAKECMDGOALS)) \\\n   include $(CFG_SRC_DIR)mk/prepare.mk\n endif\n \n-# (Unix) Installation from the build directory\n-ifneq ($(findstring install,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including install rules)\n-  include $(CFG_SRC_DIR)mk/install.mk\n-endif\n-\n # Source and binary distribution artifacts\n ifneq ($(strip $(findstring dist,$(MAKECMDGOALS)) \\\n+               $(findstring install,$(MAKECMDGOALS)) \\\n                $(findstring clean,$(MAKECMDGOALS))),)\n   CFG_INFO := $(info cfg: including dist rules)\n   include $(CFG_SRC_DIR)mk/dist.mk\n endif\n \n+# (Unix) Installation from the build directory\n+ifneq ($(findstring install,$(MAKECMDGOALS)),)\n+  CFG_INFO := $(info cfg: including install rules)\n+  include $(CFG_SRC_DIR)mk/install.mk\n+endif\n+\n # Cleaning\n ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n   CFG_INFO := $(info cfg: including clean rules)"}, {"sha": "b2b861a019aa6ab7f1b3df15f1523e163180183d", "filename": "configure", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/configure", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -383,6 +383,7 @@ opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-patched kernels)\"\n opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt rpath 1 \"build rpaths into rustc itself\"\n+opt nightly 0 \"build nightly packages\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\"\n@@ -401,7 +402,8 @@ valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n \n # On windows we just store the libraries in the bin directory because\n-# there's no rpath\n+# there's no rpath. This is where the build system itself puts libraries;\n+# --libdir is used to configure the installation directory.\n # FIXME: Thise needs to parameterized over target triples. Do it in platform.mk\n CFG_LIBDIR_RELATIVE=lib\n if [ \"$CFG_OSTYPE\" = \"pc-mingw32\" ]\n@@ -410,7 +412,6 @@ then\n fi\n \n valopt libdir \"${CFG_PREFIX}/${CFG_LIBDIR_RELATIVE}\" \"install libraries\"\n-valopt rustlibdir \"rustlib\" \"subdirectory name for rustc's libraries\"\n \n if [ $HELP -eq 1 ]\n then\n@@ -777,10 +778,10 @@ do\n             make_dir $h/stage$i/test\n \n             # target bin dir\n-            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/$CFG_RUSTLIBDIR/$t/bin\n+            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n \n             # target lib dir\n-            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/$CFG_RUSTLIBDIR/$t/lib\n+            make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n         done\n     done\n \n@@ -1039,7 +1040,6 @@ putvar CFG_HOST\n putvar CFG_TARGET\n putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n-putvar CFG_RUSTLIBDIR\n putvar CFG_LIBDIR_RELATIVE\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n putvar CFG_ANDROID_CROSS_PATH"}, {"sha": "cd6aedc6e89921fbb4f44ba6cc1c1d6b88e07dd0", "filename": "mk/dist.mk", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -22,7 +22,7 @@\n # * dist-tar-bins - Ad-hoc Unix binary installers\n # * dist-docs - Stage docs for upload\n \n-PKG_NAME = $(CFG_PACKAGE_NAME)\n+PKG_NAME := $(CFG_PACKAGE_NAME)\n \n # License suitable for displaying in a popup\n LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n@@ -199,8 +199,10 @@ dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-install-dir-$(1): PREPARE_CLEAN=true\n dist-install-dir-$(1): prepare-base-dir-$(1)\n-\t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find -type f) \\\n-      > $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/$$(CFG_RUSTLIBDIR)/manifest\n+\t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find . -type f | sed 's/^\\.\\///') \\\n+      > tmp/dist/manifest-$(1).in\n+\t$$(Q)mv tmp/dist/manifest-$(1).in $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/rustlib/manifest.in\n+# Add remaining non-installed files\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)"}, {"sha": "e360afe291b7cf63bb56a77a55a5dddc08ce7b52", "filename": "mk/install.mk", "status": "modified", "additions": 9, "deletions": 60, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -8,70 +8,19 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-# FIXME: Docs are currently not installed from the stageN dirs.\n-# For consistency it might be desirable for stageN to be an exact\n-# mirror of the installation directory structure.\n \n-# The stage we install from\n-ISTAGE = $(PREPARE_STAGE)\n+install: dist-install-dir-$(CFG_BUILD)\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n+# Remove tmp files while we can because they may have been created under sudo\n+\t$(Q)rm -R tmp/dist/$(PKG_NAME)-$(CFG_BUILD/\n \n-$(eval $(call DEF_PREPARE,mkfile-install))\n+uninstall: dist-install-dir-$(CFG_BUILD)\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n \n-install: PREPARE_HOST=$(CFG_BUILD)\n-install: PREPARE_TARGETS=$(CFG_TARGET)\n-install: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-install: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-install: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-install: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-install: PREPARE_SOURCE_DIR=$(PREPARE_HOST)/stage$(PREPARE_STAGE)\n-install: PREPARE_SOURCE_BIN_DIR=$(PREPARE_SOURCE_DIR)/bin\n-install: PREPARE_SOURCE_LIB_DIR=$(PREPARE_SOURCE_DIR)/$(CFG_LIBDIR_RELATIVE)\n-install: PREPARE_SOURCE_MAN_DIR=$(S)/man\n-install: PREPARE_DEST_BIN_DIR=$(DESTDIR)$(CFG_PREFIX)/bin\n-install: PREPARE_DEST_LIB_DIR=$(DESTDIR)$(CFG_LIBDIR)\n-install: PREPARE_DEST_MAN_DIR=$(DESTDIR)$(CFG_MANDIR)/man1\n-install: prepare-everything-mkfile-install\n-\n-\n-# Uninstall code\n-\n-PREFIX_ROOT = $(CFG_PREFIX)\n-PREFIX_BIN = $(PREFIX_ROOT)/bin\n-PREFIX_LIB = $(CFG_LIBDIR)\n-\n-INSTALL_TOOLS := $(PREPARE_TOOLS)\n-\n-# Shorthand for build/stageN/bin\n-HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD))\n-HB2 = $(HBIN2_H_$(CFG_BUILD))\n-# Shorthand for build/stageN/lib\n-HL = $(HLIB$(ISTAGE)_H_$(CFG_BUILD))\n-# Shorthand for the prefix bin directory\n-PHB = $(PREFIX_BIN)\n-# Shorthand for the prefix bin directory\n-PHL = $(PREFIX_LIB)\n-\n-HOST_LIB_FROM_HL_GLOB = \\\n-  $(patsubst $(HL)/%,$(PHL)/%,$(wildcard $(HL)/$(1)))\n-\n-uninstall: $(foreach tool,$(INSTALL_TOOLS),uninstall-tool-$(tool))\n-\t$(Q)rm -Rf $(PHL)/$(CFG_RUSTLIBDIR)\n-\n-define UNINSTALL_TOOL\n-uninstall-tool-$(1): $$(foreach dep,$$(TOOL_DEPS_$(1)),uninstall-lib-$$(dep))\n-\t$$(Q)rm -f $$(PHB)/$(1)$$(X_$$(CFG_BUILD))\n-\t$$(Q)rm -f $$(CFG_MANDIR)/man1/$(1).1\n-endef\n-\n-$(foreach tool,$(INSTALL_TOOLS),$(eval $(call UNINSTALL_TOOL,$(tool))))\n-\n-define UNINSTALL_LIB\n-uninstall-lib-$(1): $$(foreach dep,$$(RUST_DEPS_$(1)),uninstall-lib-$$(dep))\n-\t$$(Q)rm -f $$(call HOST_LIB_FROM_HL_GLOB,$$(call CFG_LIB_GLOB_$$(CFG_BUILD),$(1)))\n-endef\n-\n-$(foreach lib,$(CRATES),$(eval $(call UNINSTALL_LIB,$(lib))))\n \n+######################################################################\n+# Android remote installation\n+######################################################################\n \n # Android runtime setup\n # FIXME: This probably belongs somewhere else"}, {"sha": "f59a553d783bad58beceeac63a4c26b522148b09", "filename": "mk/main.mk", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -16,7 +16,7 @@\n CFG_RELEASE_NUM=0.10\n CFG_RELEASE_LABEL=-pre\n \n-ifndef CFG_NIGHTLY\n+ifndef CFG_ENABLE_NIGHTLY\n # This is the normal version string\n CFG_RELEASE=$(CFG_RELEASE_NUM)$(CFG_RELEASE_LABEL)\n CFG_PACKAGE_VERS=$(CFG_RELEASE)\n@@ -281,7 +281,6 @@ export CFG_LLVM_ROOT\n export CFG_ENABLE_MINGW_CROSS\n export CFG_PREFIX\n export CFG_LIBDIR\n-export CFG_RUSTLIBDIR\n export CFG_LIBDIR_RELATIVE\n export CFG_DISABLE_INJECT_STD_VERSION\n \n@@ -302,7 +301,7 @@ HBIN$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)\n \n # Destinations of artifacts for target architectures\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/$$(CFG_RUSTLIBDIR)/$(2)\n+TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustlib/$(2)\n TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n "}, {"sha": "d850aba27cd331ab597eaad00acb53828dee40a5", "filename": "mk/prepare.mk", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -86,6 +86,7 @@ PREPARE_TOOLS = $(filter-out compiletest, $(TOOLS))\n define DEF_PREPARE_HOST_TOOL\n prepare-host-tool-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n                                   $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n+                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n                                   prepare-host-dirs-$(4)\n \t$$(if $$(findstring $(2), $$(PREPARE_STAGE)),\\\n       $$(if $$(findstring $(3), $$(PREPARE_HOST)),\\\n@@ -121,8 +122,8 @@ endef\n # $(4) tag\n define DEF_PREPARE_TARGET_N\n # Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/$$(CFG_RUSTLIBDIR)/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_SOURCE_LIB_DIR=$$(PREPARE_SOURCE_LIB_DIR)/rustlib/$(2)/lib\n+prepare-target-$(2)-host-$(3)-$(1)-$(4): PREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(2)/lib\n prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n         $$(foreach crate,$$(TARGET_CRATES), \\\n           $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\"}, {"sha": "080e733724d46f4f2f7f079208deaa35eddf7c24", "filename": "mk/stage0.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -15,7 +15,7 @@ $(SNAPSHOT_RUSTC_POST_CLEANUP):\t\t\t\t\t\t\\\n #   Note: the variable \"SNAPSHOT_FILE\" is generally not set, and so\n #   we generally only pass one argument to this script.\n ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD) $(CFG_LOCAL_RUST_ROOT) $(CFG_RUSTLIBDIR)\n+\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD) $(CFG_LOCAL_RUST_ROOT) rustlib\n else\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_BUILD) $(SNAPSHOT_FILE)\n ifdef CFG_ENABLE_PAX_FLAGS"}, {"sha": "11c57ac070f39ca8c64afd42b1d056cea225173a", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -11,7 +11,7 @@\n # This is the compile-time target-triple for the compiler. For the compiler at\n # runtime, this should be considered the host-triple. More explanation for why\n # this exists can be found on issue #2400\n-export CFG_COMPILER\n+export CFG_COMPILER_HOST_TRIPLE\n \n # The standard libraries should be held up to a higher standard than any old\n # code, make sure that these common warnings are denied by default. These can\n@@ -68,7 +68,7 @@ $(foreach host,$(CFG_HOST),\t\t\t\t\t\t    \\\n # $(4) is the crate name\n define RUST_TARGET_STAGE_N\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER = $(2)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER_HOST_TRIPLE = $(2)\n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4):\t\t\t\t    \\\n \t\t$$(CRATEFILE_$(4))\t\t\t\t    \\\n \t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\t    \\"}, {"sha": "7fd6d148f3863befe79e59c0df0ccd6ee9aae9ae", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -104,7 +104,7 @@ ifdef CFG_WINDOWSY_$(1)\n                stage2/$$(CFG_LIBDIR_RELATIVE), \\\n                $$(if $$(findstring stage3,$$(1)), \\\n                     stage3/$$(CFG_LIBDIR_RELATIVE), \\\n-               )))))/$$(CFG_RUSTLIBDIR)/$$(CFG_BUILD)/lib\n+               )))))/rustlib/$$(CFG_BUILD)/lib\n   CFG_RUN_TEST_$(1)=$$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(3)),$$(1))\n endif\n \n@@ -350,7 +350,7 @@ else\n TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n endif\n \n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER = $(2)\n+$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER_HOST_TRIPLE = $(2)\n $(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)):\t\t\t\t\\\n \t\t$$(CRATEFILE_$(4)) \\\n \t\t$$(TESTDEP_$(1)_$(2)_$(3)_$(4))"}, {"sha": "3a1ba91d01f23c377c533e1c5dd387daa239e152", "filename": "src/etc/install.sh", "status": "modified", "additions": 71, "deletions": 22, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -213,6 +213,10 @@ VAL_OPTIONS=\"\"\n \n flag uninstall \"only uninstall from the installation prefix\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n+# NB This isn't quite the same definition as in `configure`.\n+# just using 'lib' instead of CFG_LIBDIR_RELATIVE\n+valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\"\n+valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n \n if [ $HELP -eq 1 ]\n then\n@@ -223,49 +227,63 @@ fi\n step_msg \"validating $CFG_SELF args\"\n validate_opt\n \n+\n+# OK, let's get installing ...\n+\n # Sanity check: can we can write to the destination?\n-umask 022 && mkdir -p \"${CFG_PREFIX}/lib\"\n-need_ok \"directory creation failed\"\n-touch \"${CFG_PREFIX}/lib/rust-install-probe\" 2> /dev/null\n+umask 022 && mkdir -p \"${CFG_LIBDIR}\"\n+need_ok \"can't write to destination. consider 'sudo'.\"\n+touch \"${CFG_LIBDIR}/rust-install-probe\" 2> /dev/null\n if [ $? -ne 0 ]\n then\n-    err \"can't write to destination. try again with 'sudo'.\"\n+    err \"can't write to destination. consider 'sudo'.\"\n fi\n-rm \"${CFG_PREFIX}/lib/rust-install-probe\"\n+rm \"${CFG_LIBDIR}/rust-install-probe\"\n need_ok \"failed to remove install probe\"\n \n+# Sanity check: don't install to the directory containing the installer.\n+# That would surely cause chaos.\n+INSTALLER_DIR=\"$(cd $(dirname $0) && pwd)\"\n+PREFIX_DIR=\"$(cd ${CFG_PREFIX} && pwd)\"\n+if [ \"${INSTALLER_DIR}\" = \"${PREFIX_DIR}\" ]\n+then\n+    err \"can't install to same directory as installer\"\n+fi\n+\n+# The file name of the manifest we're going to create during install\n+INSTALLED_MANIFEST=\"${CFG_LIBDIR}/rustlib/manifest\"\n \n # First, uninstall from the installation prefix.\n # Errors are warnings - try to rm everything in the manifest even if some fail.\n-# FIXME: Hardcoded 'rustlib' ignores CFG_RUSTLIBDIR\n-if [ -f \"${CFG_PREFIX}/lib/rustlib/manifest\" ]\n+if [ -f \"${INSTALLED_MANIFEST}\" ]\n then\n     # Iterate through installed manifest and remove files\n     while read p; do\n-        msg \"removing ${CFG_PREFIX}/$p\"\n-        if [ -f \"${CFG_PREFIX}/$p\" ]\n+        # The installed manifest contains absolute paths\n+        msg \"removing $p\"\n+        if [ -f \"$p\" ]\n         then\n-            rm \"${CFG_PREFIX}/$p\"\n+            rm \"$p\"\n             if [ $? -ne 0 ]\n             then\n-                warn \"failed to remove ${CFG_PREFIX}/$p\"\n+                warn \"failed to remove $p\"\n             fi\n         else\n-            warn \"supposedly installed file ${CFG_PREFIX}/$p does not exist!\"\n+            warn \"supposedly installed file $p does not exist!\"\n         fi\n-    done < \"${CFG_PREFIX}/lib/rustlib/manifest\"\n+    done < \"${INSTALLED_MANIFEST}\"\n \n     # Remove 'rustlib' directory\n-    msg \"removing ${CFG_PREFIX}/lib/rustlib\"\n-    rm -r \"${CFG_PREFIX}/lib/rustlib\"\n+    rm -r \"${CFG_LIBDIR}/rustlib\"\n     if [ $? -ne 0 ]\n     then\n         warn \"failed to remove rustlib\"\n     fi\n else\n+    # There's no manifest. If we were asked to uninstall, then that's a problem.\n     if [ -n \"${CFG_UNINSTALL}\" ]\n     then\n-        err \"unable to find installation manifest at ${CFG_PREFIX}/lib/rustlib\"\n+        err \"unable to find installation manifest at ${CFG_LIBDIR}/rustlib\"\n     fi\n fi\n \n@@ -278,24 +296,55 @@ then\n     exit 0\n fi\n \n+# Create the installed manifest, which we will fill in with absolute file paths\n+mkdir -p \"${CFG_LIBDIR}/rustlib\"\n+touch \"${INSTALLED_MANIFEST}\"\n \n # Now install, iterate through the new manifest and copy files\n while read p; do\n \n-    umask 022 && mkdir -p \"${CFG_PREFIX}/$(dirname $p)\"\n+    # Decide the destination of the file\n+    FILE_INSTALL_PATH=\"${CFG_PREFIX}/$p\"\n+\n+    if echo \"$p\" | grep \"^lib/\" > /dev/null\n+    then\n+        pp=`echo $p | sed 's/^lib\\///'`\n+        FILE_INSTALL_PATH=\"${CFG_LIBDIR}/$pp\"\n+    fi\n+\n+    if echo \"$p\" | grep \"^share/man/\" > /dev/null\n+    then\n+        pp=`echo $p | sed 's/^share\\/man\\///'`\n+        FILE_INSTALL_PATH=\"${CFG_MANDIR}/$pp\"\n+    fi\n+\n+    # Make sure there's a directory for it\n+    umask 022 && mkdir -p \"$(dirname ${FILE_INSTALL_PATH})\"\n     need_ok \"directory creation failed\"\n \n-    msg \"${CFG_PREFIX}/$p\"\n-    if echo \"$p\" | grep \"/bin/\" > /dev/null\n+    # Make the path absolute so we can uninstall it later without\n+    # starting from the installation cwd\n+    FILE_INSTALL_PATH_DIRNAME=\"$(dirname ${FILE_INSTALL_PATH})\"\n+    FILE_INSTALL_PATH_BASENAME=\"$(basename ${FILE_INSTALL_PATH})\"\n+    FILE_INSTALL_ABS_PATH=\"$(cd ${FILE_INSTALL_PATH_DIRNAME} && pwd)\"\n+    FILE_INSTALL_PATH=\"${FILE_INSTALL_ABS_PATH}/${FILE_INSTALL_PATH_BASENAME}\"\n+\n+    # Install the file\n+    msg \"${FILE_INSTALL_PATH}\"\n+    if echo \"$p\" | grep \"^bin/\" > /dev/null\n     then\n-        install -m755 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+        install -m755 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n     else\n-        install -m644 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+        install -m644 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n     fi\n     need_ok \"file creation failed\"\n \n+    # Update the manifest\n+    echo \"${FILE_INSTALL_PATH}\" >> \"${INSTALLED_MANIFEST}\"\n+    need_ok \"failed to update manifest\"\n+\n # The manifest lists all files to install\n-done < \"${CFG_SRC_DIR}/lib/rustlib/manifest\"\n+done < \"${CFG_SRC_DIR}/lib/rustlib/manifest.in\"\n \n echo\n echo \"    Rust is ready to roll.\""}, {"sha": "c47f9893cd2efc0aab5d12325419f9f137e5987e", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -54,8 +54,9 @@ pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> {\n }\n \n fn get_sysroot_absolute_rt_lib(sess: &Session) -> Path {\n-    let r = filesearch::relative_target_lib_path(sess.opts.target_triple);\n-    let mut p = sess.filesearch().sysroot.join(&r);\n+    let sysroot = sess.filesearch().sysroot;\n+    let r = filesearch::relative_target_lib_path(sysroot, sess.opts.target_triple);\n+    let mut p = sysroot.join(&r);\n     p.push(os::dll_filename(\"rustrt\"));\n     p\n }\n@@ -91,7 +92,7 @@ fn get_rpaths(os: abi::Os,\n     let abs_rpaths = get_absolute_rpaths(libs);\n \n     // And a final backup rpath to the global library location.\n-    let fallback_rpaths = vec!(get_install_prefix_rpath(target_triple));\n+    let fallback_rpaths = vec!(get_install_prefix_rpath(sysroot, target_triple));\n \n     fn log_rpaths(desc: &str, rpaths: &[~str]) {\n         debug!(\"{} rpaths:\", desc);\n@@ -156,10 +157,10 @@ pub fn get_absolute_rpath(lib: &Path) -> ~str {\n     p.as_str().expect(\"non-utf8 component in rpath\").to_owned()\n }\n \n-pub fn get_install_prefix_rpath(target_triple: &str) -> ~str {\n+pub fn get_install_prefix_rpath(sysroot: &Path, target_triple: &str) -> ~str {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n-    let tlib = filesearch::relative_target_lib_path(target_triple);\n+    let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);\n     let mut path = Path::new(install_prefix);\n     path.push(&tlib);\n     let path = os::make_absolute(&path);\n@@ -195,7 +196,8 @@ mod test {\n \n     #[test]\n     fn test_prefix_rpath() {\n-        let res = get_install_prefix_rpath(\"triple\");\n+        let sysroot = filesearch::get_or_default_sysroot();\n+        let res = get_install_prefix_rpath(&sysroot, \"triple\");\n         let mut d = Path::new(env!(\"CFG_PREFIX\"));\n         d.push(\"lib\");\n         d.push(filesearch::rustlibdir());\n@@ -208,7 +210,8 @@ mod test {\n \n     #[test]\n     fn test_prefix_rpath_abs() {\n-        let res = get_install_prefix_rpath(\"triple\");\n+        let sysroot = filesearch::get_or_default_sysroot();\n+        let res = get_install_prefix_rpath(&sysroot, \"triple\");\n         assert!(Path::new(res).is_absolute());\n     }\n "}, {"sha": "9ee0bb4a107cde182efdad45ff2e5faa6828f71a", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -800,7 +800,7 @@ pub fn host_triple() -> ~str {\n     // Instead of grabbing the host triple (for the current host), we grab (at\n     // compile time) the target triple that this rustc is built with and\n     // calling that (at runtime) the host triple.\n-    (env!(\"CFG_COMPILER\")).to_owned()\n+    (env!(\"CFG_COMPILER_HOST_TRIPLE\")).to_owned()\n }\n \n pub fn build_session_options(matches: &getopts::Matches) -> session::Options {"}, {"sha": "7aed0e5b7f4093ba5414be90d2ae54f1827414e8", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eaada5d3922e5e39c402493a37c384699ef1756/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=8eaada5d3922e5e39c402493a37c384699ef1756", "patch": "@@ -60,7 +60,8 @@ impl<'a> FileSearch<'a> {\n         if !found {\n             let rustpath = rust_path();\n             for path in rustpath.iter() {\n-                let tlib_path = make_rustpkg_target_lib_path(path, self.target_triple);\n+                let tlib_path = make_rustpkg_target_lib_path(\n+                    self.sysroot, path, self.target_triple);\n                 debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n                         visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n \n@@ -136,8 +137,8 @@ impl<'a> FileSearch<'a> {\n     }\n }\n \n-pub fn relative_target_lib_path(target_triple: &str) -> Path {\n-    let mut p = Path::new(libdir());\n+pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> Path {\n+    let mut p = Path::new(find_libdir(sysroot));\n     assert!(p.is_relative());\n     p.push(rustlibdir());\n     p.push(target_triple);\n@@ -147,12 +148,13 @@ pub fn relative_target_lib_path(target_triple: &str) -> Path {\n \n fn make_target_lib_path(sysroot: &Path,\n                         target_triple: &str) -> Path {\n-    sysroot.join(&relative_target_lib_path(target_triple))\n+    sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n-fn make_rustpkg_target_lib_path(dir: &Path,\n-                        target_triple: &str) -> Path {\n-    let mut p = dir.join(libdir());\n+fn make_rustpkg_target_lib_path(sysroot: &Path,\n+                                dir: &Path,\n+                                target_triple: &str) -> Path {\n+    let mut p = dir.join(find_libdir(sysroot));\n     p.push(target_triple);\n     p\n }\n@@ -235,12 +237,36 @@ pub fn rust_path() -> Vec<Path> {\n \n // The name of the directory rustc expects libraries to be located.\n // On Unix should be \"lib\", on windows \"bin\"\n-pub fn libdir() -> ~str {\n-    (env!(\"CFG_LIBDIR_RELATIVE\")).to_owned()\n+#[cfg(unix)]\n+fn find_libdir(sysroot: &Path) -> ~str {\n+    // FIXME: This is a quick hack to make the rustc binary able to locate\n+    // Rust libraries in Linux environments where libraries might be installed\n+    // to lib64/lib32. This would be more foolproof by basing the sysroot off\n+    // of the directory where librustc is located, rather than where the rustc\n+    // binary is.\n+\n+    if sysroot.join(primary_libdir_name()).join(rustlibdir()).exists() {\n+        return primary_libdir_name();\n+    } else {\n+        return secondary_libdir_name();\n+    }\n+\n+    #[cfg(target_word_size = \"64\")]\n+    fn primary_libdir_name() -> ~str { ~\"lib64\" }\n+\n+    #[cfg(target_word_size = \"32\")]\n+    fn primary_libdir_name() -> ~str { ~\"lib32\" }\n+\n+    fn secondary_libdir_name() -> ~str { ~\"lib\" }\n+}\n+\n+#[cfg(windows)]\n+fn find_libdir(_sysroot: &Path) -> ~str {\n+    ~\"bin\"\n }\n \n // The name of rustc's own place to organize libraries.\n // Used to be \"rustc\", now the default is \"rustlib\"\n pub fn rustlibdir() -> ~str {\n-    (env!(\"CFG_RUSTLIBDIR\")).to_owned()\n+    ~\"rustlib\"\n }"}]}