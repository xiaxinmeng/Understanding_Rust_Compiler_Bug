{"sha": "4a03f14b099bf19f0124872b3f6d99ef00db7902", "node_id": "C_kwDOAAsO6NoAKDRhMDNmMTRiMDk5YmYxOWYwMTI0ODcyYjNmNmQ5OWVmMDBkYjc5MDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T15:08:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T15:08:02Z"}, "message": "Auto merge of #110569 - saethlin:mir-pass-cooperation, r=cjgillot\n\nDeduplicate unreachable blocks, for real this time\n\nIn https://github.com/rust-lang/rust/pull/106428 (in particular https://github.com/rust-lang/rust/pull/106428/commits/41eda69516dd3ee217ae07c0efa369d31f630405) we noticed that inlining `unreachable_unchecked` can produce duplicate unreachable blocks. So we improved two MIR optimizations: `SimplifyCfg` was given a simplify to deduplicate unreachable blocks, then `InstCombine` was given a combiner to deduplicate switch targets that point at the same block. The problem is that change doesn't actually work.\n\nOur current pass order is\n```\nSimplifyCfg (does nothing relevant to this situation)\nInline (produces multiple unreachable blocks)\nInstCombine (doesn't do anything here, oops)\nSimplifyCfg (produces the duplicate SwitchTargets that InstCombine is looking for)\n```\n\nSo in here, I have factored out the specific function from `InstCombine` and placed it inside the simplify that produces the case it is looking for. This should ensure that it runs in the scenario it was designed for.\n\nFixes https://github.com/rust-lang/rust/issues/110551\nr? `@cjgillot`", "tree": {"sha": "5e5f9756b3a03c11ac6a62506bfcea66349a904e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5f9756b3a03c11ac6a62506bfcea66349a904e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a03f14b099bf19f0124872b3f6d99ef00db7902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a03f14b099bf19f0124872b3f6d99ef00db7902", "html_url": "https://github.com/rust-lang/rust/commit/4a03f14b099bf19f0124872b3f6d99ef00db7902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a03f14b099bf19f0124872b3f6d99ef00db7902/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "409661936f929b254ffc8adb644cf35d1f9765c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/409661936f929b254ffc8adb644cf35d1f9765c4", "html_url": "https://github.com/rust-lang/rust/commit/409661936f929b254ffc8adb644cf35d1f9765c4"}, {"sha": "8ec49ad19a0c77c438c9d3092a6ecf52d6f2cab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec49ad19a0c77c438c9d3092a6ecf52d6f2cab6", "html_url": "https://github.com/rust-lang/rust/commit/8ec49ad19a0c77c438c9d3092a6ecf52d6f2cab6"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "432852a1fddc641545b9b8ddf6082a02088ae668", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -1,11 +1,9 @@\n //! Performs various peephole optimizations.\n \n+use crate::simplify::combine_duplicate_switch_targets;\n use crate::MirPass;\n use rustc_hir::Mutability;\n-use rustc_middle::mir::{\n-    BinOp, Body, CastKind, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem,\n-    Rvalue, SourceInfo, Statement, StatementKind, SwitchTargets, Terminator, TerminatorKind, UnOp,\n-};\n+use rustc_middle::mir::*;\n use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n@@ -46,7 +44,7 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n-            ctx.combine_duplicate_switch_targets(&mut block.terminator.as_mut().unwrap());\n+            combine_duplicate_switch_targets(block.terminator.as_mut().unwrap());\n         }\n     }\n }\n@@ -264,19 +262,6 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n \n-    fn combine_duplicate_switch_targets(&self, terminator: &mut Terminator<'tcx>) {\n-        let TerminatorKind::SwitchInt { targets, .. } = &mut terminator.kind\n-        else { return };\n-\n-        let otherwise = targets.otherwise();\n-        if targets.iter().any(|t| t.1 == otherwise) {\n-            *targets = SwitchTargets::new(\n-                targets.iter().filter(|t| t.1 != otherwise),\n-                targets.otherwise(),\n-            );\n-        }\n-    }\n-\n     fn combine_intrinsic_assert(\n         &self,\n         terminator: &mut Terminator<'tcx>,"}, {"sha": "e1ca7c107b9d2bddc61ce9d81c364357abeb8da6", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -278,6 +278,18 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n+pub fn combine_duplicate_switch_targets(terminator: &mut Terminator<'_>) {\n+    if let TerminatorKind::SwitchInt { targets, .. } = &mut terminator.kind {\n+        let otherwise = targets.otherwise();\n+        if targets.iter().any(|t| t.1 == otherwise) {\n+            *targets = SwitchTargets::new(\n+                targets.iter().filter(|t| t.1 != otherwise),\n+                targets.otherwise(),\n+            );\n+        }\n+    }\n+}\n+\n pub fn remove_duplicate_unreachable_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     struct OptApplier<'tcx> {\n         tcx: TyCtxt<'tcx>,\n@@ -298,6 +310,8 @@ pub fn remove_duplicate_unreachable_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut B\n                 }\n             }\n \n+            combine_duplicate_switch_targets(terminator);\n+\n             self.super_terminator(terminator, location);\n         }\n     }"}, {"sha": "8a8cd896e85db1f2c0d3fa1f1af36077cf2d31e2", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -34,7 +34,7 @@\n -                                          // + literal: Const { ty: unsafe fn(Option<T>) -> T {Option::<T>::unwrap_unchecked}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n +         _4 = discriminant(_2);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n-+         switchInt(move _4) -> [0: bb1, 1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _4) -> [1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n       }\n   \n       bb1: {"}, {"sha": "09779d789e535e540f014d4b08d5ce6f9c0eb173", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets_e2e.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.rs?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+// ignore-debug: standard library debug assertions add a panic that breaks this optimization\n+#![crate_type = \"lib\"]\n+\n+pub enum Thing {\n+    A,\n+    B,\n+}\n+\n+// EMIT_MIR instcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir\n+pub unsafe fn ub_if_b(t: Thing) -> Thing {\n+    match t {\n+        Thing::A => t,\n+        Thing::B => std::hint::unreachable_unchecked(),\n+    }\n+}"}, {"sha": "acb7297310fb8e369a504d447e1134aa0a0744b3", "filename": "tests/mir-opt/instcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4a03f14b099bf19f0124872b3f6d99ef00db7902/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstcombine_duplicate_switch_targets_e2e.ub_if_b.PreCodegen.after.mir?ref=4a03f14b099bf19f0124872b3f6d99ef00db7902", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `ub_if_b` after PreCodegen\n+\n+fn ub_if_b(_1: Thing) -> Thing {\n+    debug t => _1;                       // in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+0:23: +0:24\n+    let mut _0: Thing;                   // return place in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+0:36: +0:41\n+    let mut _2: isize;                   // in scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+2:9: +2:17\n+    scope 1 (inlined unreachable_unchecked) { // at $DIR/instcombine_duplicate_switch_targets_e2e.rs:14:21: 14:55\n+        scope 2 {\n+            scope 3 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        _2 = discriminant(_1);           // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+1:11: +1:12\n+        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+1:5: +1:12\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 2 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = move _1;                    // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+2:21: +2:22\n+        return;                          // scope 0 at $DIR/instcombine_duplicate_switch_targets_e2e.rs:+5:2: +5:2\n+    }\n+}"}]}