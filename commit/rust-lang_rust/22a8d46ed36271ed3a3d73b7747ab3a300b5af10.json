{"sha": "22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYThkNDZlZDM2MjcxZWQzYTNkNzNiNzc0N2FiM2EzMDBiNWFmMTA=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-23T10:37:26Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-06-23T11:21:57Z"}, "message": "deny using default function in impl const Trait", "tree": {"sha": "a218d3f3a8517e928a2945d30eb51239341b7f72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a218d3f3a8517e928a2945d30eb51239341b7f72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjbeLZzPb62/vY3smZSV3NIU3bZIFAmDTGVUACgkQZSV3NIU3\nbZL9pRAAy9wUCG8xKJefN4VxYW1FgNQ+JqwH0hWmzTvX7T9z0sc2jlN1eyfSVjYj\ni6v/5ObQsEuejVV05xzs7SYd21klddH2WL2HNeOsNEYjdoJ5lqO9BOsjz4/xP9HI\njzW83iLH6tC0FLGFVzKszNWfC9WTGYrMnr1MHfBi3Tz9v5pah2AsLBJVdUrAy0ET\nFjfGK1cl1s4SDqkr43cPyijegL1v1IbY2anU0CoiycI6eWgFJ48fLcv0QHY6PwBk\nRAsFcmCKHUwHzeAfE8SCu5vYG7EIddCP9ZX3kSdQMTB023FLNXaJvmaiC18nYYdN\nUI9fuFHeXo7vdhiGuvkOkj6W6CnYMbmCDTMU41jjOH4cv1HFD1gfcMoyEF2wz18J\nqUR8r1ZJY1jPBbWNm41T+F+vHPBmFGrq0wNhSBwtrhITZc4Pg0eS60BIxu4jkAVl\nkSBLOuQlmpYOSc4gLzkHtcfP7N2JpWW3RrCpnz4w9i72bWLvceMG9BJUqaiSKvWG\neU7PmJRaqXC9bIeFxO8HOZn2fGAyOFEVmC/I2ca1JrS2v9YEc0EuuqQtXch4qqR4\nk5JlreMWZwkVbQUJgWHCgsBL4TNCvKj592WuP1DP1GKcJBgDyRGfW7D9JSw2aUDd\nGhvEL1WcfnXj3LFJc+pLsAxrqSykVEqISZR7HEgemjmnH0zRjkQ=\n=z99U\n-----END PGP SIGNATURE-----", "payload": "tree a218d3f3a8517e928a2945d30eb51239341b7f72\nparent 4573a4a879a8e1f773944a8859e4dcd136138af8\nauthor Deadbeef <ent3rm4n@gmail.com> 1624444646 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1624447317 +0800\n\ndeny using default function in impl const Trait\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "html_url": "https://github.com/rust-lang/rust/commit/22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4573a4a879a8e1f773944a8859e4dcd136138af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4573a4a879a8e1f773944a8859e4dcd136138af8", "html_url": "https://github.com/rust-lang/rust/commit/4573a4a879a8e1f773944a8859e4dcd136138af8"}], "stats": {"total": 105, "additions": 105, "deletions": 0}, "files": [{"sha": "d62f3d5e6d6d2c601ba8b0b8764ef9ab62c44858", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -13,6 +13,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n+use rustc_middle::ty;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n@@ -59,12 +60,70 @@ impl NonConstExpr {\n fn check_mod_const_bodies(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let mut vis = CheckConstVisitor::new(tcx);\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut vis.as_deep_visitor());\n+    if tcx.features().enabled(sym::const_trait_impl) {\n+        tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckConstTraitVisitor::new(tcx));\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers { check_mod_const_bodies, ..*providers };\n }\n \n+struct CheckConstTraitVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> CheckConstTraitVisitor<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>) -> Self {\n+        CheckConstTraitVisitor { tcx }\n+    }\n+}\n+\n+impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<'tcx> {\n+    fn visit_item(&mut self, item: &'hir hir::Item<'hir>) {\n+        let _: Option<_> = try {\n+            if let hir::ItemKind::Impl(ref imp) = item.kind {\n+                if let hir::Constness::Const = imp.constness {\n+                    let did = imp.of_trait.as_ref()?.trait_def_id()?;\n+                    let trait_fn_cnt = self\n+                        .tcx\n+                        .associated_item_def_ids(did)\n+                        .iter()\n+                        .filter(|did| {\n+                            matches!(\n+                                self.tcx.associated_item(**did),\n+                                ty::AssocItem { kind: ty::AssocKind::Fn, .. }\n+                            )\n+                        })\n+                        .count();\n+\n+                    let impl_fn_cnt = imp\n+                        .items\n+                        .iter()\n+                        .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n+                        .count();\n+\n+                    if trait_fn_cnt != impl_fn_cnt {\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(\n+                                item.span,\n+                                \"const trait implementations may not use default functions\",\n+                            )\n+                            .emit();\n+                    }\n+                }\n+            }\n+        };\n+    }\n+\n+    fn visit_trait_item(&mut self, _: &'hir hir::TraitItem<'hir>) {}\n+\n+    fn visit_impl_item(&mut self, _: &'hir hir::ImplItem<'hir>) {}\n+\n+    fn visit_foreign_item(&mut self, _: &'hir hir::ForeignItem<'hir>) {}\n+}\n+\n #[derive(Copy, Clone)]\n struct CheckConstVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,"}, {"sha": "cadb8d235806082692de97bf4df7d872dd1e2293", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -10,6 +10,7 @@\n #![feature(iter_zip)]\n #![feature(nll)]\n #![feature(min_specialization)]\n+#![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "95e7f9e9c837ad6abb2ffe093327d7ea576a5396", "filename": "src/test/ui/consts/const-float-classify.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-classify.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -53,6 +53,9 @@ impl const PartialEq<NonDet> for bool {\n     fn eq(&self, _: &NonDet) -> bool {\n         true\n     }\n+    fn ne(&self, _: &NonDet) -> bool {\n+        false\n+    }\n }\n \n // The result of the `is_sign` methods are not checked for correctness, since LLVM does not"}, {"sha": "44814b0654e91f12d5b868c9f016f67085fc566a", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-const-trait-method-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-const-trait-method-pass.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -17,6 +17,9 @@ impl const PartialEq for Int {\n     fn eq(&self, rhs: &Self) -> bool {\n         self.0 == rhs.0\n     }\n+    fn ne(&self, other: &Self) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n pub trait Plus {"}, {"sha": "47eed89d03d2dc81d5b35bee1df3c8e7c541a36e", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -12,6 +12,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n const fn equals_self<T: PartialEq>(t: &T) -> bool {"}, {"sha": "00a3c7f51fe90df88eeedf1b1aa9cbc2654d83db", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-dup-bound.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-dup-bound.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -11,6 +11,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n // This duplicate bound should not result in ambiguities. It should be equivalent to a single const"}, {"sha": "953a65111990e96a787214cd3300f48ca680bace", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -12,6 +12,9 @@ impl const PartialEq for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n+    fn ne(&self, other: &S) -> bool {\n+        !self.eq(other)\n+    }\n }\n \n const fn equals_self<T: PartialEq>(t: &T) -> bool {"}, {"sha": "4ff4fa0d83b2c41c92e4b13b54d1b681d131166b", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.rs?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_trait_impl)]\n+#![allow(incomplete_features)]\n+\n+trait Tr {\n+    fn req(&self);\n+\n+    fn prov(&self) {\n+        println!(\"lul\");\n+        self.req();\n+    }\n+}\n+\n+struct S;\n+\n+impl const Tr for S {\n+    fn req(&self) {}\n+}\n+//~^^^ ERROR const trait implementations may not use default functions\n+\n+fn main() {}"}, {"sha": "51a7b18fa8d550d68b2bb323590bc0a5d4c89434", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-with-default-fn.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22a8d46ed36271ed3a3d73b7747ab3a300b5af10/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-with-default-fn.stderr?ref=22a8d46ed36271ed3a3d73b7747ab3a300b5af10", "patch": "@@ -0,0 +1,10 @@\n+error: const trait implementations may not use default functions\n+  --> $DIR/impl-with-default-fn.rs:15:1\n+   |\n+LL | / impl const Tr for S {\n+LL | |     fn req(&self) {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}