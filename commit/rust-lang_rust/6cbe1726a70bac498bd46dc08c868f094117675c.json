{"sha": "6cbe1726a70bac498bd46dc08c868f094117675c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYmUxNzI2YTcwYmFjNDk4YmQ0NmRjMDhjODY4ZjA5NDExNzY3NWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-04T17:32:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-05T10:09:03Z"}, "message": "clarify safety in RawVec::into_box", "tree": {"sha": "515878fe1ed5d2762c86a6e4ea5eedeac2a6ef19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515878fe1ed5d2762c86a6e4ea5eedeac2a6ef19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cbe1726a70bac498bd46dc08c868f094117675c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbe1726a70bac498bd46dc08c868f094117675c", "html_url": "https://github.com/rust-lang/rust/commit/6cbe1726a70bac498bd46dc08c868f094117675c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cbe1726a70bac498bd46dc08c868f094117675c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b657d340d715f48449189fea9d032350323a13f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b657d340d715f48449189fea9d032350323a13f", "html_url": "https://github.com/rust-lang/rust/commit/7b657d340d715f48449189fea9d032350323a13f"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "7ac67870eb751c717dd8d91f91fffd010f2e1daf", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6cbe1726a70bac498bd46dc08c868f094117675c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cbe1726a70bac498bd46dc08c868f094117675c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=6cbe1726a70bac498bd46dc08c868f094117675c", "patch": "@@ -570,16 +570,19 @@ impl<T> RawVec<T, Global> {\n     ///\n     /// # Safety\n     ///\n-    /// `shrink_to_fit(len)` must be called immediately prior to calling this function. This\n-    /// implies, that `len` must be smaller than or equal to `self.capacity()`.\n+    /// * `len` must be greater than or equal to the most recently requested capacity, and\n+    /// * `len` must be less than or equal to `self.capacity()`.\n+    ///\n+    /// Note, that the requested capacity and `self.capacity()` could differ, as\n+    /// an allocator could overallocate and return a greater memory block than requested.\n     pub unsafe fn into_box(self, len: usize) -> Box<[MaybeUninit<T>]> {\n+        // Sanity-check one half of the safety requirement (we cannot check the other half).\n         debug_assert!(\n             len <= self.capacity(),\n             \"`len` must be smaller than or equal to `self.capacity()`\"\n         );\n \n         let me = ManuallyDrop::new(self);\n-        // NOTE: not calling `capacity()` here; actually using the real `cap` field!\n         let slice = slice::from_raw_parts_mut(me.ptr() as *mut MaybeUninit<T>, len);\n         Box::from_raw(slice)\n     }"}]}