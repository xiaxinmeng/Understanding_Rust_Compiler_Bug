{"sha": "d12135a70de99e1cf86e3147379f4eb0678cd97c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMjEzNWE3MGRlOTllMWNmODZlMzE0NzM3OWY0ZWIwNjc4Y2Q5N2M=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-02T20:59:35Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-09-04T16:14:12Z"}, "message": "Add support for pointers to generator.py.", "tree": {"sha": "a99d368c92bd131a72fee9d0945a28a507f54f64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99d368c92bd131a72fee9d0945a28a507f54f64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12135a70de99e1cf86e3147379f4eb0678cd97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12135a70de99e1cf86e3147379f4eb0678cd97c", "html_url": "https://github.com/rust-lang/rust/commit/d12135a70de99e1cf86e3147379f4eb0678cd97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12135a70de99e1cf86e3147379f4eb0678cd97c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f77a59d1611f58efa8890e935bec271032cd235", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f77a59d1611f58efa8890e935bec271032cd235", "html_url": "https://github.com/rust-lang/rust/commit/2f77a59d1611f58efa8890e935bec271032cd235"}], "stats": {"total": 142, "additions": 125, "deletions": 17}, "files": [{"sha": "bc1d428fee85696cfaf33cc296d7512fe222badc", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -18,7 +18,8 @@\n SPEC = re.compile(\n     r'^(?:(?P<id>[iusfIUSF])(?:\\((?P<start>\\d+)-(?P<end>\\d+)\\)|'\n     r'(?P<width>\\d+)(:?/(?P<llvm_width>\\d+))?)'\n-    r'|(?P<reference>\\d+)(?P<modifiers>[vShdnwus]*)(?P<force_width>x\\d+)?)$'\n+    r'|(?P<reference>\\d+)(?P<modifiers>[vShdnwusDMC]*)(?P<force_width>x\\d+)?)'\n+    r'(?:(?P<pointer>Pm|Pc)(?P<llvm_pointer>/.*)?)?$'\n )\n \n class PlatformInfo(object):\n@@ -80,6 +81,11 @@ def vectorize(self, length, width_info):\n         props.update(width_info)\n         return PlatformTypeInfo('v{}{}'.format(length, self.llvm_name), props)\n \n+    def pointer(self):\n+        return PlatformTypeInfo('p0{}'.format(self.llvm_name), self.properties)\n+\n+BITWIDTH_POINTER = '<pointer>'\n+\n class Type(object):\n     def __init__(self, bitwidth):\n         self._bitwidth = bitwidth\n@@ -193,6 +199,39 @@ def type_info(self, platform_info):\n         return elem_info.vectorize(self._length,\n                                    platform_info.width_info(self.bitwidth()))\n \n+class Pointer(Type):\n+    def __init__(self, elem, llvm_elem, const):\n+        self._elem = elem;\n+        self._llvm_elem = llvm_elem\n+        self._const = const\n+        Type.__init__(self, BITWIDTH_POINTER)\n+\n+    def modify(self, spec, width):\n+        if spec == 'D':\n+            return self._elem\n+        elif spec == 'M':\n+            return Pointer(self._elem, self._llvm_elem, False)\n+        elif spec == 'C':\n+            return Pointer(self._elem, self._llvm_elem, True)\n+        else:\n+            return Pointer(self._elem.modify(spec, width), self._llvm_elem, self._const)\n+\n+    def compiler_ctor(self):\n+        if self._llvm_elem is None:\n+            llvm_elem = 'None'\n+        else:\n+            llvm_elem = 'Some({})'.format(self._llvm_elem.compiler_ctor())\n+        return 'p({}, {}, {})'.format('true' if self._const else 'false',\n+                                      self._elem.compiler_ctor(),\n+                                      llvm_elem)\n+\n+    def rust_name(self):\n+        return '*{} {}'.format('const' if self._const else 'mut',\n+                               self._elem.rust_name())\n+\n+    def type_info(self, platform_info):\n+        return self._elem.type_info(platform_info).pointer()\n+\n class Aggregate(Type):\n     def __init__(self, flatten, elems):\n         self._flatten = flatten\n@@ -219,6 +258,22 @@ def type_info(self, platform_info):\n                   'u': [Unsigned],\n                   'f': [Float]}\n \n+def ptrify(match, elem, width):\n+    ptr = match.group('pointer')\n+    if ptr is None:\n+        return elem\n+    else:\n+        llvm_ptr = match.group('llvm_pointer')\n+        if llvm_ptr is None:\n+            llvm_elem = None\n+        else:\n+            assert llvm_ptr.startswith('/')\n+            options = list(TypeSpec(llvm_ptr[1:]).enumerate(width))\n+            assert len(options) == 1\n+            llvm_elem = options[0]\n+        assert ptr in ('Pc', 'Pm')\n+        return Pointer(elem, llvm_elem, ptr == 'Pc')\n+\n class TypeSpec(object):\n     def __init__(self, spec):\n         if not isinstance(spec, list):\n@@ -229,8 +284,10 @@ def __init__(self, spec):\n     def enumerate(self, width):\n         for spec in self.spec:\n             match = SPEC.match(spec)\n-            if match:\n+            assert match is not None\n+            if True:\n                 id = match.group('id')\n+                assert id is not None\n                 is_vector = id.islower()\n                 type_ctors = TYPE_ID_LOOKUP[id.lower()]\n \n@@ -256,19 +313,21 @@ def enumerate(self, width):\n                             scalar = ctor(bitwidth)\n \n                         if is_vector:\n-                            yield Vector(scalar, width // bitwidth)\n+                            elem = Vector(scalar, width // bitwidth)\n                         else:\n-                            yield scalar\n+                            elem = scalar\n+                        yield ptrify(match, elem, width)\n                     bitwidth *= 2\n             else:\n-                print('Failed to parse: `{}`'.format(spec), file=sys.stderr)\n+                pass\n+                #print('Failed to parse: `{}`'.format(spec), file=sys.stderr)\n \n     def resolve(self, width, zero):\n         assert len(self.spec) == 1\n         spec = self.spec[0]\n         match = SPEC.match(spec)\n         if match:\n-            id  = match.group('id')\n+            id = match.group('id')\n             if id is not None:\n                 options = list(self.enumerate(width))\n                 assert len(options) == 1\n@@ -282,7 +341,7 @@ def resolve(self, width, zero):\n             force = match.group('force_width')\n             if force is not None:\n                 ret = ret.modify(force, width)\n-            return ret\n+            return ptrify(match, ret, width)\n         elif spec.startswith('('):\n             if spec.endswith(')'):\n                 raise NotImplementedError()\n@@ -291,6 +350,8 @@ def resolve(self, width, zero):\n                 flatten = True\n             elems = [TypeSpec(subspec).resolve(width, zero) for subspec in true_spec.split(',')]\n             return Aggregate(flatten, elems)\n+        else:\n+            assert False, 'Failed to resolve: {}'.format(spec)\n \n class GenericIntrinsic(object):\n     def __init__(self, platform, intrinsic, widths, llvm_name, ret, args):\n@@ -369,7 +430,10 @@ def parse_args():\n         ## Type specifier grammar\n \n         ```\n-        type := vector | scalar | aggregate | reference\n+        type := ( vector | scalar | aggregate | reference ) pointer?\n+\n+        pointer := 'Pm' llvm_pointer? | 'Pc' llvm_pointer?\n+        llvm_pointer := '/' type\n \n         vector := vector_elem width |\n         vector_elem := 'i' | 'u' | 's' | 'f'\n@@ -390,6 +454,18 @@ def parse_args():\n         number = [0-9]+\n         ```\n \n+        ## Pointers\n+\n+        Pointers can be created to any type. The `m` vs. `c` chooses\n+        mut vs. const. e.g. `S32Pm` corresponds to `*mut i32`, and\n+        `i32Pc` corresponds (with width 128) to `*const i8x16`,\n+        `*const u32x4`, etc.\n+\n+        The type after the `/` (optional) represents the type used\n+        internally to LLVM, e.g. `S32pm/S8` is exposed as `*mut i32`\n+        in Rust, but is `i8*` in LLVM. (This defaults to the main\n+        type).\n+\n         ## Vectors\n \n         The vector grammar is a pattern describing many possibilities\n@@ -454,6 +530,9 @@ def parse_args():\n         - 'u': force an integer (vector or scalar) to be unsigned (i32x4 -> u32x4)\n         - 's': force an integer (vector or scalar) to be signed (u32x4 -> i32x4)\n         - 'x' number: force the type to be a vector of bitwidth `number`.\n+        - 'D': dereference a pointer (*mut u32 -> u32)\n+        - 'C': make a pointer const (*mut u32 -> *const u32)\n+        - 'M': make a pointer mut (*const u32 -> *mut u32)\n         '''))\n     parser.add_argument('--format', choices=FORMATS, required=True,\n                         help = 'Output format.')\n@@ -502,7 +581,7 @@ def open(self, platform):\n \n #![allow(unused_imports)]\n \n-use {{Intrinsic, i, i_, u, u_, f, v, agg}};\n+use {{Intrinsic, i, i_, u, u_, f, v, agg, p}};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "c90d6b3816ae3e95dd19ee409854643bc8583ec0", "filename": "src/librustc_platform_intrinsics/aarch64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Faarch64.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, u, f, v, agg};\n+use {Intrinsic, i, i_, u, u_, f, v, agg, p};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "89b147027b5e857b7e141f74dc49988ab3f29b4e", "filename": "src/librustc_platform_intrinsics/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Farm.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, u, f, v, agg};\n+use {Intrinsic, i, i_, u, u_, f, v, agg, p};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "8c8beb031ebad111b2756589b2557d5d71d5fff5", "filename": "src/librustc_platform_intrinsics/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Flib.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -32,7 +32,7 @@ pub struct Intrinsic {\n pub enum Type {\n     Integer(/* signed */ bool, u8, /* llvm width */ u8),\n     Float(u8),\n-    Pointer(Box<Type>),\n+    Pointer(Box<Type>, Option<Box<Type>>, /* const */ bool),\n     Vector(Box<Type>, u8),\n     Aggregate(bool, Vec<Type>),\n }\n@@ -51,6 +51,9 @@ fn v(x: Type, length: u8) -> Type { Type::Vector(Box::new(x), length) }\n fn agg(flatten: bool, types: Vec<Type>) -> Type {\n     Type::Aggregate(flatten, types)\n }\n+fn p(const_: bool, elem: Type, llvm_elem: Option<Type>) -> Type {\n+    Type::Pointer(Box::new(elem), llvm_elem.map(Box::new), const_)\n+}\n \n mod x86;\n mod arm;"}, {"sha": "661603866ae02b338bf0be7e59f4e21e427d9da1", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -13,7 +13,7 @@\n \n #![allow(unused_imports)]\n \n-use {Intrinsic, i, i_, u, u_, f, v, agg};\n+use {Intrinsic, i, i_, u, u_, f, v, agg, p};\n use IntrinsicDef::Named;\n use rustc::middle::ty;\n "}, {"sha": "c2dee20b3bb9367d270259355206b404ce8be449", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -947,7 +947,14 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                             _ => unreachable!()\n                         }\n                     }\n-                    Pointer(_) => unimplemented!(),\n+                    Pointer(ref t, ref llvm_elem, _const) => {\n+                        *any_changes_needed |= llvm_elem.is_some();\n+\n+                        let t = llvm_elem.as_ref().unwrap_or(t);\n+                        let elem = one(ty_to_type(ccx, t,\n+                                                  any_changes_needed));\n+                        vec![elem.ptr_to()]\n+                    }\n                     Vector(ref t, length) => {\n                         let elem = one(ty_to_type(ccx, t,\n                                                   any_changes_needed));\n@@ -965,8 +972,9 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             }\n \n             // This allows an argument list like `foo, (bar, baz),\n-            // qux` to be converted into `foo, bar, baz, qux`, and\n-            // integer arguments to be truncated as needed.\n+            // qux` to be converted into `foo, bar, baz, qux`, integer\n+            // arguments to be truncated as needed and pointers to be\n+            // cast.\n             fn modify_as_needed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                             t: &intrinsics::Type,\n                                             arg_type: Ty<'tcx>,\n@@ -991,6 +999,11 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                             })\n                             .collect()\n                     }\n+                    intrinsics::Type::Pointer(_, Some(ref llvm_elem), _) => {\n+                        let llvm_elem = one(ty_to_type(bcx.ccx(), llvm_elem, &mut false));\n+                        vec![PointerCast(bcx, llarg,\n+                                         llvm_elem.ptr_to())]\n+                    }\n                     intrinsics::Type::Integer(_, width, llvm_width) if width != llvm_width => {\n                         // the LLVM intrinsic uses a smaller integer\n                         // size than the C intrinsic's signature, so"}, {"sha": "54f6ec0f0eda4614e945871978d0bc9992cef1e9", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12135a70de99e1cf86e3147379f4eb0678cd97c/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=d12135a70de99e1cf86e3147379f4eb0678cd97c", "patch": "@@ -485,7 +485,20 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n             _ => simple_error(&format!(\"`{}`\", t),\n                               &format!(\"`f{n}`\", n = bits)),\n         },\n-        Pointer(_) => unimplemented!(),\n+        Pointer(ref inner_expected, ref _llvm_type, const_) => {\n+            match t.sty {\n+                ty::TyRawPtr(ty::TypeAndMut { ty, mutbl }) => {\n+                    if (mutbl == hir::MutImmutable) != const_ {\n+                        simple_error(&format!(\"`{}`\", t),\n+                                     if const_ {\"const pointer\"} else {\"mut pointer\"})\n+                    }\n+                    match_intrinsic_type_to_type(tcx, position, span, structural_to_nominal,\n+                                                 inner_expected, ty)\n+                }\n+                _ => simple_error(&format!(\"`{}`\", t),\n+                                  &format!(\"raw pointer\")),\n+            }\n+        }\n         Vector(ref inner_expected, len) => {\n             if !t.is_simd() {\n                 simple_error(&format!(\"non-simd type `{}`\", t),"}]}