{"sha": "d8a5d39c2d05fb59b6c243935111714e18334599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YTVkMzljMmQwNWZiNTliNmMyNDM5MzUxMTE3MTRlMTgzMzQ1OTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-11T09:30:06Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-11T09:30:06Z"}, "message": "Make relevant_crates return a Set", "tree": {"sha": "9fed314df9599ba26df698c1d38a4d727f21481d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fed314df9599ba26df698c1d38a4d727f21481d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8a5d39c2d05fb59b6c243935111714e18334599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a5d39c2d05fb59b6c243935111714e18334599", "html_url": "https://github.com/rust-lang/rust/commit/d8a5d39c2d05fb59b6c243935111714e18334599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8a5d39c2d05fb59b6c243935111714e18334599/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f632727b2ab985a9c5ceca781d033a08ee3822ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/f632727b2ab985a9c5ceca781d033a08ee3822ea", "html_url": "https://github.com/rust-lang/rust/commit/f632727b2ab985a9c5ceca781d033a08ee3822ea"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "22483516ad3b17febf3045ff9c11befc5acea698", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -1010,6 +1010,7 @@ dependencies = [\n  \"ra_prof\",\n  \"ra_syntax\",\n  \"ra_tt\",\n+ \"rustc-hash\",\n  \"test_utils\",\n ]\n "}, {"sha": "bf26048f2adb86dfee8c092f5ca4e8e6e86d7e78", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -15,12 +15,10 @@ use std::{\n \n use ra_cfg::CfgOptions;\n use ra_syntax::SmolStr;\n-use rustc_hash::FxHashMap;\n-use rustc_hash::FxHashSet;\n+use ra_tt::TokenExpander;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{RelativePath, RelativePathBuf};\n-use fmt::Display;\n-use ra_tt::TokenExpander;\n \n /// `FileId` is an integer which uniquely identifies a file. File paths are\n /// messy and system-dependent, so most of the code should work directly with\n@@ -111,7 +109,7 @@ impl CrateName {\n     }\n }\n \n-impl Display for CrateName {\n+impl fmt::Display for CrateName {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{}\", self.0)\n     }"}, {"sha": "80ddb6058afb06fd5b6ee8b812ab3bd677163f9d", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -7,6 +7,7 @@ use std::{panic, sync::Arc};\n \n use ra_prof::profile;\n use ra_syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n+use rustc_hash::FxHashSet;\n \n pub use crate::{\n     cancellation::Canceled,\n@@ -95,7 +96,7 @@ pub trait FileLoader {\n     /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n     /// get by with a `&str` for the time being.\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>>;\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -133,16 +134,21 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n \n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<Vec<CrateId>>;\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n }\n \n fn source_root_crates(\n     db: &(impl SourceDatabaseExt + SourceDatabase),\n     id: SourceRootId,\n-) -> Arc<Vec<CrateId>> {\n-    let root = db.source_root(id);\n+) -> Arc<FxHashSet<CrateId>> {\n     let graph = db.crate_graph();\n-    let res = root.walk().filter_map(|it| graph.crate_id_for_crate_root(it)).collect::<Vec<_>>();\n+    let res = graph\n+        .iter()\n+        .filter(|&krate| {\n+            let root_file = graph[krate].root_file_id;\n+            db.file_source_root(root_file) == id\n+        })\n+        .collect::<FxHashSet<_>>();\n     Arc::new(res)\n }\n \n@@ -156,7 +162,7 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         // FIXME: this *somehow* should be platform agnostic...\n         if std::path::Path::new(path).is_absolute() {\n-            let krate = *self.relevant_crates(anchor).get(0)?;\n+            let krate = *self.relevant_crates(anchor).iter().next()?;\n             let (extern_source_id, relative_file) =\n                 self.0.crate_graph()[krate].extern_source.extern_path(path.as_ref())?;\n \n@@ -175,7 +181,7 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         }\n     }\n \n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)\n     }"}, {"sha": "4581d87453b2ee166dea46038a42ebc0ffd3ddd5", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -7,6 +7,7 @@ use std::{\n \n use hir_expand::db::AstDatabase;\n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, Upcast};\n+use rustc_hash::FxHashSet;\n \n use crate::db::DefDatabase;\n \n@@ -59,7 +60,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "e5c9f3e997a7ee4a8221389003a6748a7f74ab02", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -10,6 +10,7 @@ doctest = false\n [dependencies]\n log = \"0.4.8\"\n either = \"1.5.3\"\n+rustc-hash = \"1.0.0\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "967d1f3a16ee4143785e67c1b22434c1649e4e12", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n };\n \n use crate::db::AstDatabase;\n-use crate::{name, quote, LazyMacroId, MacroCallId, MacroDefId, MacroDefKind};\n+use crate::{guess_crate, name, quote, LazyMacroId, MacroCallId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -160,8 +160,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n     let m: MacroCallId = id.into();\n     let file_id = m.as_file().original_file(db);\n     let cg = db.crate_graph();\n-    let krates = db.relevant_crates(file_id);\n-    let krate = match krates.get(0) {\n+    let krate = match guess_crate(db, file_id) {\n         Some(krate) => krate,\n         None => {\n             let tt = quote! { core };\n@@ -172,7 +171,7 @@ fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n     // XXX\n     //  All crates except core itself should have a dependency on core,\n     //  We detect `core` by seeing whether it doesn't have such a dependency.\n-    let tt = if cg[*krate].dependencies.iter().any(|dep| dep.name == \"core\") {\n+    let tt = if cg[krate].dependencies.iter().any(|dep| dep.name == \"core\") {\n         quote! { core }\n     } else {\n         quote! { crate }"}, {"sha": "93da3f149d27cae95625db9b50d907a41b12ad53", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -5,7 +5,7 @@ use crate::{\n     name, AstId, CrateId, MacroDefId, MacroDefKind, TextSize,\n };\n \n-use crate::{quote, EagerMacroId, LazyMacroId, MacroCallId};\n+use crate::{guess_crate, quote, EagerMacroId, LazyMacroId, MacroCallId};\n use either::Either;\n use mbe::parse_to_token_tree;\n use ra_db::FileId;\n@@ -335,8 +335,7 @@ fn include_expand(\n fn get_env_inner(db: &dyn AstDatabase, arg_id: EagerMacroId, key: &str) -> Option<String> {\n     let call_id: MacroCallId = arg_id.into();\n     let original_file = call_id.as_file().original_file(db);\n-\n-    let krate = *db.relevant_crates(original_file).get(0)?;\n+    let krate = guess_crate(db, original_file)?;\n     db.crate_graph()[krate].env.get(key)\n }\n "}, {"sha": "dc4d7f000e1eca6379f4c641463aa8d6c7545789", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -424,3 +424,8 @@ impl<N: AstNode> InFile<N> {\n         self.with_value(self.value.syntax())\n     }\n }\n+\n+// FIXME: this is obviously wrong, there shouldn't be any guesing here\n+fn guess_crate(db: &dyn db::AstDatabase, file_id: FileId) -> Option<CrateId> {\n+    db.relevant_crates(file_id).iter().next().copied()\n+}"}, {"sha": "09fc18c360f5b7edb4d3dbf3e6abb2bdfd4aa4c4", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -6,6 +6,7 @@ use std::{\n };\n \n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate};\n+use rustc_hash::FxHashSet;\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -44,7 +45,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "ad04e3e0f908511b98f5ee199e40b1f65e80926c", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -8,6 +8,7 @@ use std::{\n use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId, ModuleId};\n use hir_expand::{db::AstDatabase, diagnostics::DiagnosticSink};\n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast};\n+use rustc_hash::FxHashSet;\n use stdx::format_to;\n \n use crate::{db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator};\n@@ -73,7 +74,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "480fd45764e9dd3d24fcaab99d51c2faf7fb51e2", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8a5d39c2d05fb59b6c243935111714e18334599/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=d8a5d39c2d05fb59b6c243935111714e18334599", "patch": "@@ -19,7 +19,7 @@ use ra_db::{\n     Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase,\n     SourceRootId, Upcast,\n };\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n \n@@ -60,7 +60,7 @@ impl FileLoader for RootDatabase {\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(anchor, path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}]}