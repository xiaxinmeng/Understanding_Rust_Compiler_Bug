{"sha": "2a0fb1fb440fda9267a7d57961d16da25b03005a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMGZiMWZiNDQwZmRhOTI2N2E3ZDU3OTYxZDE2ZGEyNWIwMzAwNWE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-22T16:54:46Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-22T16:54:46Z"}, "message": "Limit `USELESS_FORMAT` with args to string args", "tree": {"sha": "847c6854864a8e9b4134fb7a9099bedde57a1b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/847c6854864a8e9b4134fb7a9099bedde57a1b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0fb1fb440fda9267a7d57961d16da25b03005a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0fb1fb440fda9267a7d57961d16da25b03005a", "html_url": "https://github.com/rust-lang/rust/commit/2a0fb1fb440fda9267a7d57961d16da25b03005a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0fb1fb440fda9267a7d57961d16da25b03005a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e9ced5cb85793c4fe1765130a5ca0e01084f2c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e9ced5cb85793c4fe1765130a5ca0e01084f2c2", "html_url": "https://github.com/rust-lang/rust/commit/0e9ced5cb85793c4fe1765130a5ca0e01084f2c2"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "f0b8485b4a44b0ce55126d925b377b1ab51e7d1c", "filename": "src/format.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a0fb1fb440fda9267a7d57961d16da25b03005a/src%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0fb1fb440fda9267a7d57961d16da25b03005a/src%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat.rs?ref=2a0fb1fb440fda9267a7d57961d16da25b03005a", "patch": "@@ -1,16 +1,17 @@\n use rustc::front::map::Node::NodeItem;\n use rustc::lint::*;\n+use rustc::middle::ty::TypeVariants;\n use rustc_front::hir::*;\n use syntax::ast::LitKind;\n-use utils::{DISPLAY_FMT_METHOD_PATH, FMT_ARGUMENTS_NEWV1_PATH};\n-use utils::{is_expn_of, match_path, span_lint};\n+use utils::{DISPLAY_FMT_METHOD_PATH, FMT_ARGUMENTS_NEWV1_PATH, STRING_PATH};\n+use utils::{is_expn_of, match_path, match_type, span_lint, walk_ptrs_ty};\n \n /// **What it does:** This lints about use of `format!(\"string literal with no argument\")` and\n-/// `format!(\"{}\", foo)`.\n+/// `format!(\"{}\", foo)` where `foo` is a string.\n ///\n-/// **Why is this bad?** There is no point of doing that. If you want a `String` you can use\n-/// `to_owned` on the string literal or expression. The even worse `&format!(\"foo\")` is often\n-/// encountered in the wild.\n+/// **Why is this bad?** There is no point of doing that. `format!(\"too\")` can be replaced by `\"foo\".to_owned()` if you really need a `String`. The even worse `&format!(\"foo\")` is often\n+/// encountered in the wild. `format!(\"{}\", foo)` can be replaced by `foo.clone()` if `foo: String`\n+/// or `foo.to_owned()` is `foo: &str`.\n ///\n /// **Known problems:** None.\n ///\n@@ -43,7 +44,7 @@ impl LateLintPass for FormatMacLint {\n                         // ensure the format string is `\"{..}\"` with only one argument and no text\n                         check_static_str(cx, &args[0]),\n                         // ensure the format argument is `{}` ie. Display with no fancy option\n-                        check_arg_is_display(&args[1])\n+                        check_arg_is_display(cx, &args[1])\n                     ], {\n                         span_lint(cx, USELESS_FORMAT, span, \"useless use of `format!`\");\n                     }}\n@@ -94,19 +95,24 @@ fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n ///     (__arg0,) => [::std::fmt::ArgumentV1::new(__arg0, ::std::fmt::Display::fmt)],\n /// })\n /// ```\n-fn check_arg_is_display(expr: &Expr) -> bool {\n+fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n     if_let_chain! {[\n         let ExprAddrOf(_, ref expr) = expr.node,\n         let ExprMatch(_, ref arms, _) = expr.node,\n         arms.len() == 1,\n+        arms[0].pats.len() == 1,\n+        let PatKind::Tup(ref pat) = arms[0].pats[0].node,\n+        pat.len() == 1,\n         let ExprVec(ref exprs) = arms[0].body.node,\n         exprs.len() == 1,\n         let ExprCall(_, ref args) = exprs[0].node,\n         args.len() == 2,\n         let ExprPath(None, ref path) = args[1].node,\n         match_path(path, &DISPLAY_FMT_METHOD_PATH)\n     ], {\n-        return true;\n+        let ty = walk_ptrs_ty(cx.tcx.pat_ty(&pat[0]));\n+\n+        return ty.sty == TypeVariants::TyStr || match_type(cx, ty, &STRING_PATH);\n     }}\n \n     false"}, {"sha": "4fff131f6e7598665ee09cb63e3d15a645101ae3", "filename": "tests/compile-fail/format.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a0fb1fb440fda9267a7d57961d16da25b03005a/tests%2Fcompile-fail%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0fb1fb440fda9267a7d57961d16da25b03005a/tests%2Fcompile-fail%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformat.rs?ref=2a0fb1fb440fda9267a7d57961d16da25b03005a", "patch": "@@ -4,12 +4,31 @@\n \n fn main() {\n     format!(\"foo\"); //~ERROR useless use of `format!`\n-    format!(\"{}\", 42); //~ERROR useless use of `format!`\n-    format!(\"{:?}\", 42); // we only want to warn about `{}`\n-    format!(\"{:+}\", 42); // we only want to warn about `{}`\n+\n+    format!(\"{}\", \"foo\"); //~ERROR useless use of `format!`\n+    format!(\"{:?}\", \"foo\"); // we only want to warn about `{}`\n+    format!(\"{:+}\", \"foo\"); // we only want to warn about `{}`\n+    format!(\"foo {}\", \"bar\");\n+    format!(\"{} bar\", \"foo\");\n+\n+    let arg: String = \"\".to_owned();\n+    format!(\"{}\", arg); //~ERROR useless use of `format!`\n+    format!(\"{:?}\", arg); // we only want to warn about `{}`\n+    format!(\"{:+}\", arg); // we only want to warn about `{}`\n+    format!(\"foo {}\", arg);\n+    format!(\"{} bar\", arg);\n+\n+    // we don\u2019t want to warn for non-string args, see #697\n+    format!(\"{}\", 42);\n+    format!(\"{:?}\", 42);\n+    format!(\"{:+}\", 42);\n     format!(\"foo {}\", 42);\n     format!(\"{} bar\", 42);\n \n+    // we only want to warn about `format!` itself\n     println!(\"foo\");\n+    println!(\"{}\", \"foo\");\n+    println!(\"foo {}\", \"foo\");\n+    println!(\"{}\", 42);\n     println!(\"foo {}\", 42);\n }"}]}