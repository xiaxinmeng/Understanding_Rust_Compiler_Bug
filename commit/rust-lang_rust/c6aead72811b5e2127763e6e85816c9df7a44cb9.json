{"sha": "c6aead72811b5e2127763e6e85816c9df7a44cb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YWVhZDcyODExYjVlMjEyNzc2M2U2ZTg1ODE2YzlkZjdhNDRjYjk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T10:04:56Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-01T11:23:13Z"}, "message": "Get rid of native types in LLVM module\n\nCode is still somewhat kludgy because we don't have 32-bit enums.\n\nIssue #1673", "tree": {"sha": "c5de44c4f04e2f928c7b5f2c794ec3bd75a3bf47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5de44c4f04e2f928c7b5f2c794ec3bd75a3bf47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6aead72811b5e2127763e6e85816c9df7a44cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aead72811b5e2127763e6e85816c9df7a44cb9", "html_url": "https://github.com/rust-lang/rust/commit/c6aead72811b5e2127763e6e85816c9df7a44cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6aead72811b5e2127763e6e85816c9df7a44cb9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f3d518e6374307361d982315bfe23055220b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f3d518e6374307361d982315bfe23055220b0d", "html_url": "https://github.com/rust-lang/rust/commit/f6f3d518e6374307361d982315bfe23055220b0d"}], "stats": {"total": 518, "additions": 250, "deletions": 268}, "files": [{"sha": "4f61ddf81786e6423217080cd17aa2c535967109", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -16,10 +16,7 @@ import option::none;\n import std::sha1::sha1;\n import syntax::ast;\n import syntax::print::pprust;\n-import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::mk_pass_manager;\n-import lib::llvm::mk_target_data;\n-import lib::llvm::False;\n+import lib::llvm::{ModuleRef, mk_pass_manager, mk_target_data, True, False};\n import util::filesearch;\n \n enum output_type {\n@@ -182,7 +179,7 @@ mod write {\n             let MPMB = llvm::LLVMPassManagerBuilderCreate();\n             llvm::LLVMPassManagerBuilderSetOptLevel(MPMB,\n                                                     opts.optimize as c_uint);\n-            llvm::LLVMPassManagerBuilderSetSizeLevel(MPMB, 0);\n+            llvm::LLVMPassManagerBuilderSetSizeLevel(MPMB, False);\n             llvm::LLVMPassManagerBuilderSetDisableUnitAtATime(MPMB, False);\n             llvm::LLVMPassManagerBuilderSetDisableUnrollLoops(MPMB, False);\n             llvm::LLVMPassManagerBuilderSetDisableSimplifyLibCalls(MPMB,"}, {"sha": "6794f3b7af0e0d85ffe6f3a6bf8eab9035cf1dd0", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -5,10 +5,7 @@ import middle::trans::common::{T_fn, T_i1, T_i8, T_i32,\n                                T_int, T_nil, T_dict,\n                                T_opaque_vec, T_ptr,\n                                T_size_t, T_void};\n-import lib::llvm::type_names;\n-import lib::llvm::llvm::ModuleRef;\n-import lib::llvm::llvm::ValueRef;\n-import lib::llvm::llvm::TypeRef;\n+import lib::llvm::{type_names, ModuleRef, ValueRef, TypeRef};\n \n type upcalls =\n     {_fail: ValueRef,"}, {"sha": "5515d740089997cd22a1e739db8501dc9f73bd9d", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 146, "deletions": 134, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -1,144 +1,149 @@\n import core::{vec, str, option};\n import str::sbuf;\n \n-import llvm::{TypeRef, MemoryBufferRef,\n-              PassManagerRef, TargetDataRef,\n-              ObjectFileRef, SectionIteratorRef};\n import ctypes::{c_int, c_uint, unsigned, longlong, ulonglong};\n \n-type Long = i32;\n-type Bool = int;\n+type Opcode = u32;\n+type Bool = unsigned;\n+const True: Bool = 1u32;\n+const False: Bool = 0u32;\n \n+// Consts for the LLVM CallConv type, pre-cast to uint.\n \n-const True: Bool = 1;\n-const False: Bool = 0;\n+enum CallConv {\n+    CCallConv = 0,\n+    FastCallConv = 8,\n+    ColdCallConv = 9,\n+    X86StdcallCallConv = 64,\n+    X86FastcallCallConv = 65,\n+}\n \n-// Consts for the LLVM CallConv type, pre-cast to uint.\n-// FIXME: figure out a way to merge these with the native\n-// typedef and/or a enum type in the native module below.\n-\n-const LLVMCCallConv: uint = 0u;\n-const LLVMFastCallConv: uint = 8u;\n-const LLVMColdCallConv: uint = 9u;\n-const LLVMX86StdcallCallConv: uint = 64u;\n-const LLVMX86FastcallCallConv: uint = 65u;\n-\n-const LLVMDefaultVisibility: uint = 0u;\n-const LLVMHiddenVisibility: uint = 1u;\n-const LLVMProtectedVisibility: uint = 2u;\n-\n-const LLVMExternalLinkage: uint = 0u;\n-const LLVMAvailableExternallyLinkage: uint = 1u;\n-const LLVMLinkOnceAnyLinkage: uint = 2u;\n-const LLVMLinkOnceODRLinkage: uint = 3u;\n-const LLVMWeakAnyLinkage: uint = 4u;\n-const LLVMWeakODRLinkage: uint = 5u;\n-const LLVMAppendingLinkage: uint = 6u;\n-const LLVMInternalLinkage: uint = 7u;\n-const LLVMPrivateLinkage: uint = 8u;\n-const LLVMDLLImportLinkage: uint = 9u;\n-const LLVMDLLExportLinkage: uint = 10u;\n-const LLVMExternalWeakLinkage: uint = 11u;\n-const LLVMGhostLinkage: uint = 12u;\n-const LLVMCommonLinkage: uint = 13u;\n-const LLVMLinkerPrivateLinkage: uint = 14u;\n-const LLVMLinkerPrivateWeakLinkage: uint = 15u;\n-const LLVMLinkerPrivateWeakDefAutoLinkage: uint = 16u;\n-\n-const LLVMZExtAttribute: uint = 1u;\n-const LLVMSExtAttribute: uint = 2u;\n-const LLVMNoReturnAttribute: uint = 4u;\n-const LLVMInRegAttribute: uint = 8u;\n-const LLVMStructRetAttribute: uint = 16u;\n-const LLVMNoUnwindAttribute: uint = 32u;\n-const LLVMNoAliasAttribute: uint = 64u;\n-const LLVMByValAttribute: uint = 128u;\n-const LLVMNestAttribute: uint = 256u;\n-const LLVMReadNoneAttribute: uint = 512u;\n-const LLVMReadOnlyAttribute: uint = 1024u;\n-const LLVMNoInlineAttribute: uint = 2048u;\n-const LLVMAlwaysInlineAttribute: uint = 4096u;\n-const LLVMOptimizeForSizeAttribute: uint = 8192u;\n-const LLVMStackProtectAttribute: uint = 16384u;\n-const LLVMStackProtectReqAttribute: uint = 32768u;\n-// 31 << 16\n-const LLVMAlignmentAttribute: uint = 2031616u;\n-const LLVMNoCaptureAttribute: uint = 2097152u;\n-const LLVMNoRedZoneAttribute: uint = 4194304u;\n-const LLVMNoImplicitFloatAttribute: uint = 8388608u;\n-const LLVMNakedAttribute: uint = 16777216u;\n-const LLVMInlineHintAttribute: uint = 33554432u;\n-// 7 << 26\n-const LLVMStackAttribute: uint = 469762048u;\n-const LLVMReturnsTwiceAttribute: uint = 536870912u;\n-// 1 << 30\n-const LLVMUWTableAttribute: uint = 1073741824u;\n-const LLVMNonLazyBindAttribute: uint = 2147483648u;\n+enum Visibility {\n+    LLVMDefaultVisibility = 0,\n+    HiddenVisibility = 1,\n+    ProtectedVisibility = 2,\n+}\n+\n+enum Linkage {\n+    ExternalLinkage = 0,\n+    AvailableExternallyLinkage = 1,\n+    LinkOnceAnyLinkage = 2,\n+    LinkOnceODRLinkage = 3,\n+    WeakAnyLinkage = 4,\n+    WeakODRLinkage = 5,\n+    AppendingLinkage = 6,\n+    InternalLinkage = 7,\n+    PrivateLinkage = 8,\n+    DLLImportLinkage = 9,\n+    DLLExportLinkage = 10,\n+    ExternalWeakLinkage = 11,\n+    GhostLinkage = 12,\n+    CommonLinkage = 13,\n+    LinkerPrivateLinkage = 14,\n+    LinkerPrivateWeakLinkage = 15,\n+    LinkerPrivateWeakDefAutoLinkage = 16,\n+}\n \n+enum Attribute {\n+    ZExtAttribute = 1,\n+    SExtAttribute = 2,\n+    NoReturnAttribute = 4,\n+    InRegAttribute = 8,\n+    StructRetAttribute = 16,\n+    NoUnwindAttribute = 32,\n+    NoAliasAttribute = 64,\n+    ByValAttribute = 128,\n+    NestAttribute = 256,\n+    ReadNoneAttribute = 512,\n+    ReadOnlyAttribute = 1024,\n+    NoInlineAttribute = 2048,\n+    AlwaysInlineAttribute = 4096,\n+    OptimizeForSizeAttribute = 8192,\n+    StackProtectAttribute = 16384,\n+    StackProtectReqAttribute = 32768,\n+    // 31 << 16\n+    AlignmentAttribute = 2031616,\n+    NoCaptureAttribute = 2097152,\n+    NoRedZoneAttribute = 4194304,\n+    NoImplicitFloatAttribute = 8388608,\n+    NakedAttribute = 16777216,\n+    InlineHintAttribute = 33554432,\n+    // 7 << 26\n+    StackAttribute = 469762048,\n+    ReturnsTwiceAttribute = 536870912,\n+    // 1 << 30\n+    UWTableAttribute = 1073741824,\n+    NonLazyBindAttribute = 2147483648,\n+}\n \n // Consts for the LLVM IntPredicate type, pre-cast to uint.\n // FIXME: as above.\n \n-\n-const LLVMIntEQ: uint = 32u;\n-const LLVMIntNE: uint = 33u;\n-const LLVMIntUGT: uint = 34u;\n-const LLVMIntUGE: uint = 35u;\n-const LLVMIntULT: uint = 36u;\n-const LLVMIntULE: uint = 37u;\n-const LLVMIntSGT: uint = 38u;\n-const LLVMIntSGE: uint = 39u;\n-const LLVMIntSLT: uint = 40u;\n-const LLVMIntSLE: uint = 41u;\n-\n+enum IntPredicate {\n+    IntEQ = 32,\n+    IntNE = 33,\n+    IntUGT = 34,\n+    IntUGE = 35,\n+    IntULT = 36,\n+    IntULE = 37,\n+    IntSGT = 38,\n+    IntSGE = 39,\n+    IntSLT = 40,\n+    IntSLE = 41,\n+}\n \n // Consts for the LLVM RealPredicate type, pre-case to uint.\n // FIXME: as above.\n \n-const LLVMRealOEQ: uint = 1u;\n-const LLVMRealOGT: uint = 2u;\n-const LLVMRealOGE: uint = 3u;\n-const LLVMRealOLT: uint = 4u;\n-const LLVMRealOLE: uint = 5u;\n-const LLVMRealONE: uint = 6u;\n-\n-const LLVMRealORD: uint = 7u;\n-const LLVMRealUNO: uint = 8u;\n-const LLVMRealUEQ: uint = 9u;\n-const LLVMRealUGT: uint = 10u;\n-const LLVMRealUGE: uint = 11u;\n-const LLVMRealULT: uint = 12u;\n-const LLVMRealULE: uint = 13u;\n-const LLVMRealUNE: uint = 14u;\n+enum RealPredicate {\n+    RealOEQ = 1,\n+    RealOGT = 2,\n+    RealOGE = 3,\n+    RealOLT = 4,\n+    RealOLE = 5,\n+    RealONE = 6,\n+    RealORD = 7,\n+    RealUNO = 8,\n+    RealUEQ = 9,\n+    RealUGT = 10,\n+    RealUGE = 11,\n+    RealULT = 12,\n+    RealULE = 13,\n+    RealUNE = 14,\n+}\n+\n+// Opaque pointer types\n+enum Module_opaque {}\n+type ModuleRef = *Module_opaque;\n+enum Context_opaque {}\n+type ContextRef = *Context_opaque;\n+enum Type_opaque {}\n+type TypeRef = *Type_opaque;\n+enum Value_opaque {}\n+type ValueRef = *Value_opaque;\n+enum BasicBlock_opaque {}\n+type BasicBlockRef = *BasicBlock_opaque;\n+enum Builder_opaque {}\n+type BuilderRef = *Builder_opaque;\n+enum MemoryBuffer_opaque {}\n+type MemoryBufferRef = *MemoryBuffer_opaque;\n+enum PassManager_opaque {}\n+type PassManagerRef = *PassManager_opaque;\n+enum PassManagerBuilder_opaque {}\n+type PassManagerBuilderRef = *PassManagerBuilder_opaque;\n+enum Use_opaque {}\n+type UseRef = *Use_opaque;\n+enum TargetData_opaque {}\n+type TargetDataRef = *TargetData_opaque;\n+enum ObjectFile_opaque {}\n+type ObjectFileRef = *ObjectFile_opaque;\n+enum SectionIterator_opaque {}\n+type SectionIteratorRef = *SectionIterator_opaque;\n \n #[link_args = \"-Lrustllvm\"]\n #[link_name = \"rustllvm\"]\n #[abi = \"cdecl\"]\n native mod llvm {\n-\n-    type ModuleRef;\n-    type ContextRef;\n-    type TypeRef;\n-    type TypeHandleRef;\n-    type ValueRef;\n-    type BasicBlockRef;\n-    type BuilderRef;\n-    type ModuleProviderRef;\n-    type MemoryBufferRef;\n-    type PassManagerRef;\n-    type PassManagerBuilderRef;\n-    type UseRef;\n-    type TargetDataRef;\n-\n-    /* FIXME: These are enums in the C header. Represent them how, in rust? */\n-    type Linkage;\n-    type Attribute;\n-    type Visibility;\n-    type CallConv;\n-    type IntPredicate;\n-    type RealPredicate;\n-    type Opcode;\n-\n     /* Create and destroy contexts. */\n     fn LLVMContextCreate() -> ContextRef;\n     fn LLVMGetGlobalContext() -> ContextRef;\n@@ -422,12 +427,12 @@ native mod llvm {\n     /* Operations on global variables, functions, and aliases (globals) */\n     fn LLVMGetGlobalParent(Global: ValueRef) -> ModuleRef;\n     fn LLVMIsDeclaration(Global: ValueRef) -> Bool;\n-    fn LLVMGetLinkage(Global: ValueRef) -> Linkage;\n-    fn LLVMSetLinkage(Global: ValueRef, Link: Linkage);\n+    fn LLVMGetLinkage(Global: ValueRef) -> unsigned;\n+    fn LLVMSetLinkage(Global: ValueRef, Link: unsigned);\n     fn LLVMGetSection(Global: ValueRef) -> sbuf;\n     fn LLVMSetSection(Global: ValueRef, Section: sbuf);\n-    fn LLVMGetVisibility(Global: ValueRef) -> Visibility;\n-    fn LLVMSetVisibility(Global: ValueRef, Viz: Visibility);\n+    fn LLVMGetVisibility(Global: ValueRef) -> unsigned;\n+    fn LLVMSetVisibility(Global: ValueRef, Viz: unsigned);\n     fn LLVMGetAlignment(Global: ValueRef) -> unsigned;\n     fn LLVMSetAlignment(Global: ValueRef, Bytes: unsigned);\n \n@@ -469,9 +474,9 @@ native mod llvm {\n     fn LLVMSetFunctionCallConv(Fn: ValueRef, CC: unsigned);\n     fn LLVMGetGC(Fn: ValueRef) -> sbuf;\n     fn LLVMSetGC(Fn: ValueRef, Name: sbuf);\n-    fn LLVMAddFunctionAttr(Fn: ValueRef, PA: Attribute, HighPA: unsigned);\n-    fn LLVMGetFunctionAttr(Fn: ValueRef) -> Attribute;\n-    fn LLVMRemoveFunctionAttr(Fn: ValueRef, PA: Attribute, HighPA: unsigned);\n+    fn LLVMAddFunctionAttr(Fn: ValueRef, PA: unsigned, HighPA: unsigned);\n+    fn LLVMGetFunctionAttr(Fn: ValueRef) -> unsigned;\n+    fn LLVMRemoveFunctionAttr(Fn: ValueRef, PA: unsigned, HighPA: unsigned);\n \n     /* Operations on parameters */\n     fn LLVMCountParams(Fn: ValueRef) -> unsigned;\n@@ -482,9 +487,9 @@ native mod llvm {\n     fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;\n     fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;\n     fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;\n-    fn LLVMAddAttribute(Arg: ValueRef, PA: Attribute);\n-    fn LLVMRemoveAttribute(Arg: ValueRef, PA: Attribute);\n-    fn LLVMGetAttribute(Arg: ValueRef) -> Attribute;\n+    fn LLVMAddAttribute(Arg: ValueRef, PA: unsigned);\n+    fn LLVMRemoveAttribute(Arg: ValueRef, PA: unsigned);\n+    fn LLVMGetAttribute(Arg: ValueRef) -> unsigned;\n     fn LLVMSetParamAlignment(Arg: ValueRef, align: unsigned);\n \n     /* Operations on basic blocks */\n@@ -520,9 +525,9 @@ native mod llvm {\n     /* Operations on call sites */\n     fn LLVMSetInstructionCallConv(Instr: ValueRef, CC: unsigned);\n     fn LLVMGetInstructionCallConv(Instr: ValueRef) -> unsigned;\n-    fn LLVMAddInstrAttribute(Instr: ValueRef, index: unsigned, IA: Attribute);\n+    fn LLVMAddInstrAttribute(Instr: ValueRef, index: unsigned, IA: unsigned);\n     fn LLVMRemoveInstrAttribute(Instr: ValueRef, index: unsigned,\n-                                IA: Attribute);\n+                                IA: unsigned);\n     fn LLVMSetInstrParamAlignment(Instr: ValueRef, index: unsigned,\n                                   align: unsigned);\n \n@@ -836,9 +841,6 @@ native mod llvm {\n \n     /* Stuff that's in rustllvm/ because it's not upstream yet. */\n \n-    type ObjectFileRef;\n-    type SectionIteratorRef;\n-\n     /** Opens an object file. */\n     fn LLVMCreateObjectFile(MemBuf: MemoryBufferRef) -> ObjectFileRef;\n     /** Closes an object file. */\n@@ -907,6 +909,16 @@ native mod llvm {\n     fn LLVMLinkModules(Dest: ModuleRef, Src: ModuleRef) -> Bool;\n }\n \n+fn SetInstructionCallConv(Instr: ValueRef, CC: CallConv) {\n+    llvm::LLVMSetInstructionCallConv(Instr, CC as unsigned);\n+}\n+fn SetFunctionCallConv(Fn: ValueRef, CC: CallConv) {\n+    llvm::LLVMSetFunctionCallConv(Fn, CC as unsigned);\n+}\n+fn SetLinkage(Global: ValueRef, Link: Linkage) {\n+    llvm::LLVMSetLinkage(Global, Link as unsigned);\n+}\n+\n /* Memory-managed object interface to type handles. */\n \n type type_names = @{type_names: std::map::hashmap<TypeRef, str>,"}, {"sha": "56a07619a4680631e9cf41490b447ff68ad02cd8", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -2,7 +2,7 @@ import core::{vec, str, option, sys, ctypes, unsafe};\n import std::fs;\n import std::map::hashmap;\n import lib::llvm::llvm;\n-import lib::llvm::llvm::ValueRef;\n+import lib::llvm::ValueRef;\n import trans::common::*;\n import trans::base;\n import trans::build::B;"}, {"sha": "7560d7b325ad04301e1519c997030c974bdec037", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -1,7 +1,6 @@\n // Routines useful for garbage collection.\n \n-import lib::llvm::True;\n-import lib::llvm::llvm::ValueRef;\n+import lib::llvm::{True, ValueRef};\n import trans::base::get_tydesc;\n import trans::common::*;\n import trans::base;"}, {"sha": "317cf1515fd95e159950ace96327bbfcd29d3343", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -2,8 +2,7 @@\n // This substitutes for the runtime tags used by e.g. MLs.\n \n import lib::llvm::llvm;\n-import lib::llvm::{True, False};\n-import lib::llvm::llvm::{ModuleRef, TypeRef, ValueRef};\n+import lib::llvm::{True, False, ModuleRef, TypeRef, ValueRef};\n import driver::session;\n import driver::session::session;\n import trans::base;\n@@ -97,9 +96,7 @@ fn mk_global(ccx: @crate_ctxt, name: str, llval: ValueRef, internal: bool) ->\n     lib::llvm::llvm::LLVMSetGlobalConstant(llglobal, True);\n \n     if internal {\n-        lib::llvm::llvm::LLVMSetLinkage(llglobal,\n-                                        lib::llvm::LLVMInternalLinkage as\n-                                            lib::llvm::llvm::Linkage);\n+        lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n     }\n \n     ret llglobal;\n@@ -606,9 +603,8 @@ fn gen_shape_tables(ccx: @crate_ctxt) {\n                        [lltagstable, llresourcestable]);\n     lib::llvm::llvm::LLVMSetInitializer(ccx.shape_cx.llshapetables, lltables);\n     lib::llvm::llvm::LLVMSetGlobalConstant(ccx.shape_cx.llshapetables, True);\n-    lib::llvm::llvm::LLVMSetLinkage(ccx.shape_cx.llshapetables,\n-                                    lib::llvm::LLVMInternalLinkage as\n-                                        lib::llvm::llvm::Linkage);\n+    lib::llvm::SetLinkage(ccx.shape_cx.llshapetables,\n+                          lib::llvm::InternalLinkage);\n }\n \n // ______________________________________________________________________"}, {"sha": "76e3baca60289c49e3ac278964299c4d5f89a671", "filename": "src/comp/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Falt.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -3,7 +3,7 @@ import option::{some, none};\n \n import driver::session::session;\n import lib::llvm::llvm;\n-import lib::llvm::llvm::{ValueRef, BasicBlockRef};\n+import lib::llvm::{ValueRef, BasicBlockRef};\n import pat_util::*;\n import build::*;\n import base::{new_sub_block_ctxt, new_scope_block_ctxt,"}, {"sha": "7cd6186331da1da65666ee01c2761f907c977600", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 63, "deletions": 85, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -32,7 +32,7 @@ import pat_util::*;\n import visit::vt;\n import util::common::*;\n import lib::llvm::{llvm, mk_target_data, mk_type_names};\n-import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n+import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n import lib::llvm::{True, False};\n import link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_seq,\n@@ -288,17 +288,17 @@ fn log_fn_time(ccx: @crate_ctxt, name: str, start: time::timeval,\n }\n \n \n-fn decl_fn(llmod: ModuleRef, name: str, cc: uint, llty: TypeRef) ->\n-    ValueRef {\n-    let llfn: ValueRef =\n-        str::as_buf(name, {|buf|\n-            llvm::LLVMGetOrInsertFunction(llmod, buf, llty) });\n-    llvm::LLVMSetFunctionCallConv(llfn, cc as c_uint);\n+fn decl_fn(llmod: ModuleRef, name: str, cc: lib::llvm::CallConv,\n+           llty: TypeRef) -> ValueRef {\n+    let llfn: ValueRef = str::as_buf(name, {|buf|\n+        llvm::LLVMGetOrInsertFunction(llmod, buf, llty)\n+    });\n+    lib::llvm::SetFunctionCallConv(llfn, cc);\n     ret llfn;\n }\n \n fn decl_cdecl_fn(llmod: ModuleRef, name: str, llty: TypeRef) -> ValueRef {\n-    ret decl_fn(llmod, name, lib::llvm::LLVMCCallConv, llty);\n+    ret decl_fn(llmod, name, lib::llvm::CCallConv, llty);\n }\n \n \n@@ -307,13 +307,12 @@ fn decl_cdecl_fn(llmod: ModuleRef, name: str, llty: TypeRef) -> ValueRef {\n fn decl_internal_cdecl_fn(llmod: ModuleRef, name: str, llty: TypeRef) ->\n    ValueRef {\n     let llfn = decl_cdecl_fn(llmod, name, llty);\n-    llvm::LLVMSetLinkage(llfn,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ret llfn;\n }\n \n fn get_extern_fn(externs: hashmap<str, ValueRef>, llmod: ModuleRef, name: str,\n-                 cc: uint, ty: TypeRef) -> ValueRef {\n+                 cc: lib::llvm::CallConv, ty: TypeRef) -> ValueRef {\n     if externs.contains_key(name) { ret externs.get(name); }\n     let f = decl_fn(llmod, name, cc, ty);\n     externs.insert(name, f);\n@@ -336,8 +335,7 @@ fn get_simple_extern_fn(cx: @block_ctxt,\n     let inputs = vec::init_elt::<TypeRef>(n_args as uint, ccx.int_type);\n     let output = ccx.int_type;\n     let t = T_fn(inputs, output);\n-    ret get_extern_fn(externs, llmod, name,\n-                      lib::llvm::LLVMCCallConv, t);\n+    ret get_extern_fn(externs, llmod, name, lib::llvm::CCallConv, t);\n }\n \n fn trans_native_call(cx: @block_ctxt, externs: hashmap<str, ValueRef>,\n@@ -370,12 +368,12 @@ fn trans_shared_free(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n }\n \n fn umax(cx: @block_ctxt, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = ICmp(cx, lib::llvm::LLVMIntULT, a, b);\n+    let cond = ICmp(cx, lib::llvm::IntULT, a, b);\n     ret Select(cx, cond, b, a);\n }\n \n fn umin(cx: @block_ctxt, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = ICmp(cx, lib::llvm::LLVMIntULT, a, b);\n+    let cond = ICmp(cx, lib::llvm::IntULT, a, b);\n     ret Select(cx, cond, a, b);\n }\n \n@@ -992,32 +990,25 @@ fn get_static_tydesc(cx: @block_ctxt, t: ty::t, ty_params: [uint])\n }\n \n fn set_no_inline(f: ValueRef) {\n-    llvm::LLVMAddFunctionAttr(f,\n-                              lib::llvm::LLVMNoInlineAttribute as\n-                                  lib::llvm::llvm::Attribute,\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::NoInlineAttribute as c_uint,\n                               0u as c_uint);\n }\n \n // Tell LLVM to emit the information necessary to unwind the stack for the\n // function f.\n fn set_uwtable(f: ValueRef) {\n-    llvm::LLVMAddFunctionAttr(f,\n-                              lib::llvm::LLVMUWTableAttribute as\n-                                  lib::llvm::llvm::Attribute,\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::UWTableAttribute as c_uint,\n                               0u as c_uint);\n }\n \n fn set_always_inline(f: ValueRef) {\n-    llvm::LLVMAddFunctionAttr(f,\n-                              lib::llvm::LLVMAlwaysInlineAttribute as\n-                                  lib::llvm::llvm::Attribute,\n+    llvm::LLVMAddFunctionAttr(f, lib::llvm::AlwaysInlineAttribute as c_uint,\n                               0u as c_uint);\n }\n \n fn set_custom_stack_growth_fn(f: ValueRef) {\n     // TODO: Remove this hack to work around the lack of u64 in the FFI.\n-    llvm::LLVMAddFunctionAttr(f, 0 as lib::llvm::llvm::Attribute,\n-                              1u as c_uint);\n+    llvm::LLVMAddFunctionAttr(f, 0u as c_uint, 1u as c_uint);\n }\n \n fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {\n@@ -1089,8 +1080,7 @@ fn make_generic_glue_inner(cx: @local_ctxt, t: ty::t,\n                            llfn: ValueRef, helper: glue_helper,\n                            ty_params: [uint]) -> ValueRef {\n     let fcx = new_fn_ctxt(cx, llfn, none);\n-    llvm::LLVMSetLinkage(llfn,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     cx.ccx.stats.n_glues_created += 1u;\n     // Any nontrivial glue is with values passed *by alias*; this is a\n     // requirement since in many contexts glue is invoked indirectly and\n@@ -1193,8 +1183,7 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n         let gvar = ti.tydesc;\n         llvm::LLVMSetInitializer(gvar, tydesc);\n         llvm::LLVMSetGlobalConstant(gvar, True);\n-        llvm::LLVMSetLinkage(gvar,\n-                             lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+        lib::llvm::SetLinkage(gvar, lib::llvm::InternalLinkage);\n     };\n }\n \n@@ -1402,7 +1391,7 @@ fn decr_refcnt_maybe_free(cx: @block_ctxt, box_ptr: ValueRef, t: ty::t)\n     let rc = Load(rc_adj_cx, rc_ptr);\n     rc = Sub(rc_adj_cx, rc, C_int(ccx, 1));\n     Store(rc_adj_cx, rc, rc_ptr);\n-    let zero_test = ICmp(rc_adj_cx, lib::llvm::LLVMIntEQ, C_int(ccx, 0), rc);\n+    let zero_test = ICmp(rc_adj_cx, lib::llvm::IntEQ, C_int(ccx, 0), rc);\n     CondBr(rc_adj_cx, zero_test, free_cx.llbb, next_cx.llbb);\n     let free_cx = free_ty(free_cx, box_ptr, t);\n     Br(free_cx, next_cx.llbb);\n@@ -1472,36 +1461,36 @@ fn compare_scalar_values(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef,\n       }\n       floating_point {\n         let cmp = alt op {\n-          ast::eq { lib::llvm::LLVMRealOEQ }\n-          ast::ne { lib::llvm::LLVMRealUNE }\n-          ast::lt { lib::llvm::LLVMRealOLT }\n-          ast::le { lib::llvm::LLVMRealOLE }\n-          ast::gt { lib::llvm::LLVMRealOGT }\n-          ast::ge { lib::llvm::LLVMRealOGE }\n+          ast::eq { lib::llvm::RealOEQ }\n+          ast::ne { lib::llvm::RealUNE }\n+          ast::lt { lib::llvm::RealOLT }\n+          ast::le { lib::llvm::RealOLE }\n+          ast::gt { lib::llvm::RealOGT }\n+          ast::ge { lib::llvm::RealOGE }\n           _ { die(); }\n         };\n         ret FCmp(cx, cmp, lhs, rhs);\n       }\n       signed_int {\n         let cmp = alt op {\n-          ast::eq { lib::llvm::LLVMIntEQ }\n-          ast::ne { lib::llvm::LLVMIntNE }\n-          ast::lt { lib::llvm::LLVMIntSLT }\n-          ast::le { lib::llvm::LLVMIntSLE }\n-          ast::gt { lib::llvm::LLVMIntSGT }\n-          ast::ge { lib::llvm::LLVMIntSGE }\n+          ast::eq { lib::llvm::IntEQ }\n+          ast::ne { lib::llvm::IntNE }\n+          ast::lt { lib::llvm::IntSLT }\n+          ast::le { lib::llvm::IntSLE }\n+          ast::gt { lib::llvm::IntSGT }\n+          ast::ge { lib::llvm::IntSGE }\n           _ { die(); }\n         };\n         ret ICmp(cx, cmp, lhs, rhs);\n       }\n       unsigned_int {\n         let cmp = alt op {\n-          ast::eq { lib::llvm::LLVMIntEQ }\n-          ast::ne { lib::llvm::LLVMIntNE }\n-          ast::lt { lib::llvm::LLVMIntULT }\n-          ast::le { lib::llvm::LLVMIntULE }\n-          ast::gt { lib::llvm::LLVMIntUGT }\n-          ast::ge { lib::llvm::LLVMIntUGE }\n+          ast::eq { lib::llvm::IntEQ }\n+          ast::ne { lib::llvm::IntNE }\n+          ast::lt { lib::llvm::IntULT }\n+          ast::le { lib::llvm::IntULE }\n+          ast::gt { lib::llvm::IntUGT }\n+          ast::ge { lib::llvm::IntUGE }\n           _ { die(); }\n         };\n         ret ICmp(cx, cmp, lhs, rhs);\n@@ -1920,7 +1909,7 @@ fn copy_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         let next_cx = new_sub_block_ctxt(cx, \"next\");\n         let dstcmp = load_if_immediate(cx, dst, t);\n         let self_assigning =\n-            ICmp(cx, lib::llvm::LLVMIntNE,\n+            ICmp(cx, lib::llvm::IntNE,\n                  PointerCast(cx, dstcmp, val_ty(src)), src);\n         CondBr(cx, self_assigning, do_copy_cx.llbb, next_cx.llbb);\n         do_copy_cx = copy_val_no_check(do_copy_cx, action, dst, src, t);\n@@ -2598,13 +2587,10 @@ fn lookup_discriminant(lcx: @local_ctxt, vid: ast::def_id) -> ValueRef {\n         // It's an external discriminant that we haven't seen yet.\n         assert (vid.crate != ast::local_crate);\n         let sym = csearch::get_symbol(lcx.ccx.sess.cstore, vid);\n-        let gvar =\n-            str::as_buf(sym,\n-                        {|buf|\n-                            llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n-                        });\n-        llvm::LLVMSetLinkage(gvar,\n-                             lib::llvm::LLVMExternalLinkage as llvm::Linkage);\n+        let gvar = str::as_buf(sym, {|buf|\n+            llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n+        });\n+        lib::llvm::SetLinkage(gvar, lib::llvm::ExternalLinkage);\n         llvm::LLVMSetGlobalConstant(gvar, True);\n         lcx.ccx.discrims.insert(vid, gvar);\n         ret gvar;\n@@ -2739,7 +2725,7 @@ fn trans_index(cx: @block_ctxt, ex: @ast::expr, base: @ast::expr,\n     maybe_name_value(bcx_ccx(cx), scaled_ix, \"scaled_ix\");\n     let lim = tvec::get_fill(bcx, v);\n     let body = tvec::get_dataptr(bcx, v, type_of_or_i8(bcx, unit_ty));\n-    let bounds_check = ICmp(bcx, lib::llvm::LLVMIntULT, scaled_ix, lim);\n+    let bounds_check = ICmp(bcx, lib::llvm::IntULT, scaled_ix, lim);\n     let fail_cx = new_sub_block_ctxt(bcx, \"fail\");\n     let next_cx = new_sub_block_ctxt(bcx, \"next\");\n     let ncx = bcx_ccx(next_cx);\n@@ -3760,8 +3746,7 @@ fn trans_log(lvl: @ast::expr, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n         });\n         llvm::LLVMSetGlobalConstant(global, False);\n         llvm::LLVMSetInitializer(global, C_null(T_i32()));\n-        llvm::LLVMSetLinkage(global,\n-                             lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+        lib::llvm::SetLinkage(global, lib::llvm::InternalLinkage);\n         lcx.ccx.module_data.insert(modname, global);\n         global\n     };\n@@ -3772,7 +3757,7 @@ fn trans_log(lvl: @ast::expr, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n \n     Br(cx, level_cx.llbb);\n     let level_res = trans_temp_expr(level_cx, lvl);\n-    let test = ICmp(level_res.bcx, lib::llvm::LLVMIntUGE,\n+    let test = ICmp(level_res.bcx, lib::llvm::IntUGE,\n                     load, level_res.val);\n \n     CondBr(level_res.bcx, test, log_cx.llbb, after_cx.llbb);\n@@ -4834,7 +4819,7 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n     fn build_shim_fn(lcx: @local_ctxt,\n                      native_item: @ast::native_item,\n                      tys: @c_stack_tys,\n-                     cc: uint) -> ValueRef {\n+                     cc: lib::llvm::CallConv) -> ValueRef {\n         let lname = link_name(native_item);\n         let ccx = lcx_ccx(lcx);\n \n@@ -4861,7 +4846,7 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n \n         // Create the call itself and store the return value:\n         let llretval = CallWithConv(bcx, llbasefn,\n-                                    llargvals, cc as c_uint); // r\n+                                    llargvals, cc); // r\n         if tys.ret_def {\n             // R** llretptr = &args->r;\n             let llretptr = GEPi(bcx, llargbundle, [0, n as int]);\n@@ -4911,11 +4896,11 @@ fn trans_native_mod(lcx: @local_ctxt, native_mod: ast::native_mod,\n     }\n \n     let ccx = lcx_ccx(lcx);\n-    let cc = lib::llvm::LLVMCCallConv;\n+    let cc = lib::llvm::CCallConv;\n     alt abi {\n       ast::native_abi_rust_intrinsic { ret; }\n-      ast::native_abi_cdecl { cc = lib::llvm::LLVMCCallConv; }\n-      ast::native_abi_stdcall { cc = lib::llvm::LLVMX86StdcallCallConv; }\n+      ast::native_abi_cdecl { cc = lib::llvm::CCallConv; }\n+      ast::native_abi_stdcall { cc = lib::llvm::X86StdcallCallConv; }\n     }\n \n     for native_item in native_mod.items {\n@@ -5076,7 +5061,7 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let nt = ty::mk_nil(ccx.tcx);\n         let llfty = type_of_fn(ccx, [vecarg_ty], nt, []);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n-                              lib::llvm::LLVMCCallConv, llfty);\n+                              lib::llvm::CCallConv, llfty);\n \n         let fcx = new_fn_ctxt(new_local_ctxt(ccx), llfdecl, none);\n \n@@ -5230,7 +5215,7 @@ fn collect_native_item(ccx: @crate_ctxt,\n             let ri_name = \"rust_intrinsic_\" + link_name(i);\n             let llnativefn = get_extern_fn(\n                 ccx.externs, ccx.llmod, ri_name,\n-                lib::llvm::LLVMCCallConv, fn_type);\n+                lib::llvm::CCallConv, fn_type);\n             ccx.item_ids.insert(id, llnativefn);\n             ccx.item_symbols.insert(id, ri_name);\n           }\n@@ -5433,11 +5418,10 @@ fn trap(bcx: @block_ctxt) {\n fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct([ccx.int_type, ccx.int_type]);\n     let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n-    let map =\n-        str::as_buf(\"_rust_mod_map\",\n-                    {|buf| llvm::LLVMAddGlobal(ccx.llmod, maptype, buf) });\n-    llvm::LLVMSetLinkage(map,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    let map = str::as_buf(\"_rust_mod_map\", {|buf|\n+        llvm::LLVMAddGlobal(ccx.llmod, maptype, buf)\n+    });\n+    lib::llvm::SetLinkage(map, lib::llvm::InternalLinkage);\n     let elts: [ValueRef] = [];\n     ccx.module_data.items {|key, val|\n         let elt = C_struct([p2i(ccx, C_cstr(ccx, key)),\n@@ -5465,8 +5449,7 @@ fn decl_crate_map(sess: session::session, mapname: str,\n     let map = str::as_buf(sym_name, {|buf|\n         llvm::LLVMAddGlobal(llmod, maptype, buf)\n     });\n-    llvm::LLVMSetLinkage(map, lib::llvm::LLVMExternalLinkage\n-                         as llvm::Linkage);\n+    lib::llvm::SetLinkage(map, lib::llvm::ExternalLinkage);\n     ret map;\n }\n \n@@ -5500,19 +5483,14 @@ fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n     str::as_buf(cx.sess.targ_cfg.target_strs.meta_sect_name, {|buf|\n         llvm::LLVMSetSection(llglobal, buf)\n     });\n-    llvm::LLVMSetLinkage(llglobal,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n \n     let t_ptr_i8 = T_ptr(T_i8());\n     llglobal = llvm::LLVMConstBitCast(llglobal, t_ptr_i8);\n-    let llvm_used =\n-        str::as_buf(\"llvm.used\",\n-                    {|buf|\n-                        llvm::LLVMAddGlobal(cx.llmod, T_array(t_ptr_i8, 1u),\n-                                            buf)\n-                    });\n-    llvm::LLVMSetLinkage(llvm_used,\n-                         lib::llvm::LLVMAppendingLinkage as llvm::Linkage);\n+    let llvm_used = str::as_buf(\"llvm.used\", {|buf|\n+        llvm::LLVMAddGlobal(cx.llmod, T_array(t_ptr_i8, 1u), buf)\n+    });\n+    lib::llvm::SetLinkage(llvm_used, lib::llvm::AppendingLinkage);\n     llvm::LLVMSetInitializer(llvm_used, C_array(t_ptr_i8, [llglobal]));\n }\n "}, {"sha": "9dcebf6401551f0596e89179e339bb408f12c404", "filename": "src/comp/middle/trans/build.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -4,8 +4,9 @@ import str::sbuf;\n import lib::llvm::llvm;\n import syntax::codemap;\n import codemap::span;\n-import llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, Opcode,\n-              ModuleRef};\n+import lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n+import lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n+                   CallConv};\n import common::{block_ctxt, T_ptr, T_nil, T_i8, T_i1, T_void,\n                 T_fn, val_ty, bcx_ccx, C_i32};\n \n@@ -110,8 +111,7 @@ fn FastInvoke(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n         let v = llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n                                       vec::len(Args) as c_uint,\n                                       Then, Catch, noname());\n-        llvm::LLVMSetInstructionCallConv(\n-            v, lib::llvm::LLVMFastCallConv as c_uint);\n+        lib::llvm::SetInstructionCallConv(v, lib::llvm::FastCallConv);\n     }\n }\n \n@@ -467,12 +467,14 @@ fn FPCast(cx: @block_ctxt, Val: ValueRef, DestTy: TypeRef) -> ValueRef {\n \n \n /* Comparisons */\n-fn ICmp(cx: @block_ctxt, Op: uint, LHS: ValueRef, RHS: ValueRef) -> ValueRef {\n+fn ICmp(cx: @block_ctxt, Op: IntPredicate, LHS: ValueRef, RHS: ValueRef)\n+    -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_i1()); }\n     ret llvm::LLVMBuildICmp(B(cx), Op as c_uint, LHS, RHS, noname());\n }\n \n-fn FCmp(cx: @block_ctxt, Op: uint, LHS: ValueRef, RHS: ValueRef) -> ValueRef {\n+fn FCmp(cx: @block_ctxt, Op: RealPredicate, LHS: ValueRef, RHS: ValueRef)\n+    -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_i1()); }\n     ret llvm::LLVMBuildFCmp(B(cx), Op as c_uint, LHS, RHS, noname());\n }\n@@ -528,9 +530,12 @@ fn add_comment(bcx: @block_ctxt, text: str) {\n         check str::is_not_empty(\"$\");\n         let sanitized = str::replace(text, \"$\", \"\");\n         let comment_text = \"; \" + sanitized;\n-        let asm = str::as_buf(comment_text, { |c|\n-            str::as_buf(\"\", { |e|\n-                llvm::LLVMConstInlineAsm(T_fn([], T_void()), c, e, 0, 0)})});\n+        let asm = str::as_buf(comment_text, {|c|\n+            str::as_buf(\"\", {|e|\n+                llvm::LLVMConstInlineAsm(T_fn([], T_void()), c, e,\n+                                         False, False)\n+            })\n+        });\n         Call(bcx, asm, []);\n     }\n }\n@@ -548,19 +553,18 @@ fn FastCall(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     unsafe {\n         let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                     vec::len(Args) as c_uint, noname());\n-        llvm::LLVMSetInstructionCallConv(\n-            v, lib::llvm::LLVMFastCallConv as c_uint);\n+        lib::llvm::SetInstructionCallConv(v, lib::llvm::FastCallConv);\n         ret v;\n     }\n }\n \n fn CallWithConv(cx: @block_ctxt, Fn: ValueRef, Args: [ValueRef],\n-                Conv: c_uint) -> ValueRef {\n+                Conv: CallConv) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {\n         let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n                                     vec::len(Args) as c_uint, noname());\n-        llvm::LLVMSetInstructionCallConv(v, Conv);\n+        lib::llvm::SetInstructionCallConv(v, Conv);\n         ret v;\n     }\n }"}, {"sha": "9a128a77f25531f8c69a8e181ed906163c8b4397", "filename": "src/comp/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -2,7 +2,7 @@ import core::ctypes::c_uint;\n import syntax::ast;\n import syntax::ast_util;\n import lib::llvm::llvm;\n-import llvm::{ValueRef, TypeRef};\n+import lib::llvm::{ValueRef, TypeRef};\n import common::*;\n import build::*;\n import base::*;"}, {"sha": "39991f92018467bcd42e6652fe111d207469ee23", "filename": "src/comp/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -17,7 +17,7 @@ import util::common::*;\n import syntax::codemap::span;\n import lib::llvm::{llvm, target_data, type_names, associate_type,\n                    name_has_type};\n-import lib::llvm::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n+import lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n import lib::llvm::{True, False, Bool};\n import metadata::{csearch};\n \n@@ -72,7 +72,7 @@ type stats =\n      mutable n_real_glues: uint,\n      fn_times: @mutable [{ident: str, time: int}]};\n \n-resource BuilderRef_res(B: llvm::BuilderRef) { llvm::LLVMDisposeBuilder(B); }\n+resource BuilderRef_res(B: BuilderRef) { llvm::LLVMDisposeBuilder(B); }\n \n // Crate context.  Every crate we compile has one of these.\n type crate_ctxt =\n@@ -788,7 +788,7 @@ fn C_cstr(cx: @crate_ctxt, s: str) -> ValueRef {\n                     {|buf| llvm::LLVMAddGlobal(cx.llmod, val_ty(sc), buf) });\n     llvm::LLVMSetInitializer(g, sc);\n     llvm::LLVMSetGlobalConstant(g, True);\n-    llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(g, lib::llvm::InternalLinkage);\n     ret g;\n }\n \n@@ -835,8 +835,7 @@ fn C_shape(ccx: @crate_ctxt, bytes: [u8]) -> ValueRef {\n     });\n     llvm::LLVMSetInitializer(llglobal, llshape);\n     llvm::LLVMSetGlobalConstant(llglobal, True);\n-    llvm::LLVMSetLinkage(llglobal,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(llglobal, lib::llvm::InternalLinkage);\n     ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n }\n \n@@ -894,12 +893,12 @@ fn hash_dict_id(&&dp: dict_id) -> uint {\n }\n \n fn umax(cx: @block_ctxt, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = build::ICmp(cx, lib::llvm::LLVMIntULT, a, b);\n+    let cond = build::ICmp(cx, lib::llvm::IntULT, a, b);\n     ret build::Select(cx, cond, b, a);\n }\n \n fn umin(cx: @block_ctxt, a: ValueRef, b: ValueRef) -> ValueRef {\n-    let cond = build::ICmp(cx, lib::llvm::LLVMIntULT, a, b);\n+    let cond = build::ICmp(cx, lib::llvm::IntULT, a, b);\n     ret build::Select(cx, cond, a, b);\n }\n "}, {"sha": "0f0573ee22fc82bdc6bc0f3971d58cb3ab679dae", "filename": "src/comp/middle/trans/impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -8,7 +8,8 @@ import syntax::{ast, ast_util};\n import metadata::csearch;\n import back::{link, abi};\n import lib::llvm::llvm;\n-import llvm::{ValueRef, TypeRef, LLVMGetParam};\n+import lib::llvm::{ValueRef, TypeRef};\n+import lib::llvm::llvm::LLVMGetParam;\n \n // Translation functionality related to impls and ifaces\n //\n@@ -384,8 +385,7 @@ fn get_static_dict(bcx: @block_ctxt, origin: typeck::dict_origin)\n     });\n     llvm::LLVMSetGlobalConstant(gvar, lib::llvm::True);\n     llvm::LLVMSetInitializer(gvar, ptrs);\n-    llvm::LLVMSetLinkage(gvar,\n-                         lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n+    lib::llvm::SetLinkage(gvar, lib::llvm::InternalLinkage);\n     let cast = llvm::LLVMConstPointerCast(gvar, T_ptr(T_dict()));\n     ccx.dicts.insert(id, cast);\n     cast"}, {"sha": "d527bbc76f2e25571dc702ea23d4add77c9ffb6f", "filename": "src/comp/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Ftvec.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -2,7 +2,7 @@ import vec;\n import option::none;\n import syntax::ast;\n import driver::session::session;\n-import lib::llvm::llvm::{ValueRef, TypeRef};\n+import lib::llvm::{ValueRef, TypeRef};\n import back::abi;\n import base::{call_memmove, trans_shared_malloc, type_of_or_i8,\n                INIT, copy_val, load_if_immediate, get_tydesc,\n@@ -170,7 +170,7 @@ fn trans_append(cx: @block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n     let llunitty = type_of_or_i8(cx, unit_ty);\n \n     let lhs = Load(bcx, lhsptr);\n-    let self_append = ICmp(bcx, lib::llvm::LLVMIntEQ, lhs, rhs);\n+    let self_append = ICmp(bcx, lib::llvm::IntEQ, lhs, rhs);\n     let lfill = get_fill(bcx, lhs);\n     let rfill = get_fill(bcx, rhs);\n     let new_fill = Add(bcx, lfill, rfill);\n@@ -295,7 +295,7 @@ fn iter_vec_raw(bcx: @block_ctxt, vptr: ValueRef, vec_ty: ty::t,\n     Br(bcx, header_cx.llbb);\n     let data_ptr = Phi(header_cx, val_ty(data_ptr), [data_ptr], [bcx.llbb]);\n     let not_yet_at_end =\n-        ICmp(header_cx, lib::llvm::LLVMIntULT, data_ptr, data_end_ptr);\n+        ICmp(header_cx, lib::llvm::IntULT, data_ptr, data_end_ptr);\n     let body_cx = new_sub_block_ctxt(header_cx, \"iter_vec_loop_body\");\n     let next_cx = new_sub_block_ctxt(header_cx, \"iter_vec_next\");\n     CondBr(header_cx, not_yet_at_end, body_cx.llbb, next_cx.llbb);"}, {"sha": "53361cbed43bbde811d701f4feea3286bdb0a501", "filename": "src/comp/middle/trans/uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aead72811b5e2127763e6e85816c9df7a44cb9/src%2Fcomp%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Funiq.rs?ref=c6aead72811b5e2127763e6e85816c9df7a44cb9", "patch": "@@ -1,5 +1,5 @@\n import syntax::ast;\n-import lib::llvm::llvm::ValueRef;\n+import lib::llvm::ValueRef;\n import common::*;\n import build::*;\n import base::{"}]}