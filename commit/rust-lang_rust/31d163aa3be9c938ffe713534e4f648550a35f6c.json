{"sha": "31d163aa3be9c938ffe713534e4f648550a35f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZDE2M2FhM2JlOWM5MzhmZmU3MTM1MzRlNGY2NDg1NTBhMzVmNmM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-11T06:53:13Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-11T06:53:13Z"}, "message": "Improve error handling", "tree": {"sha": "1dbe8dda5c13dc0a0875fb063bf3e2f1d988fb1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dbe8dda5c13dc0a0875fb063bf3e2f1d988fb1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31d163aa3be9c938ffe713534e4f648550a35f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31d163aa3be9c938ffe713534e4f648550a35f6c", "html_url": "https://github.com/rust-lang/rust/commit/31d163aa3be9c938ffe713534e4f648550a35f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31d163aa3be9c938ffe713534e4f648550a35f6c/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc8f90a216adbd557fdf7fff08de1c49d91b5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc8f90a216adbd557fdf7fff08de1c49d91b5a3", "html_url": "https://github.com/rust-lang/rust/commit/5fc8f90a216adbd557fdf7fff08de1c49d91b5a3"}], "stats": {"total": 54, "additions": 30, "deletions": 24}, "files": [{"sha": "ec63d587bb294e23ed1f795e86a9bcd1f2ca19ec", "filename": "crates/ra_proc_macro_srv/src/dylib.rs", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/31d163aa3be9c938ffe713534e4f648550a35f6c/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31d163aa3be9c938ffe713534e4f648550a35f6c/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_proc_macro_srv%2Fsrc%2Fdylib.rs?ref=31d163aa3be9c938ffe713534e4f648550a35f6c", "patch": "@@ -7,28 +7,35 @@ use goblin::{mach::Mach, Object};\n use libloading::Library;\n use ra_proc_macro::ProcMacroKind;\n \n-static NEW_REGISTRAR_SYMBOL: &str = \"_rustc_proc_macro_decls_\";\n+use std::io::Error as IoError;\n+use std::io::ErrorKind as IoErrorKind;\n \n-fn get_symbols_from_lib(file: &Path) -> Option<Vec<String>> {\n-    let buffer = std::fs::read(file).ok()?;\n-    let object = Object::parse(&buffer).ok()?;\n+const NEW_REGISTRAR_SYMBOL: &str = \"_rustc_proc_macro_decls_\";\n \n-    return match object {\n+fn invalid_data_err(e: impl Into<Box<dyn std::error::Error + Send + Sync>>) -> IoError {\n+    IoError::new(IoErrorKind::InvalidData, e)\n+}\n+\n+fn get_symbols_from_lib(file: &Path) -> Result<Vec<String>, IoError> {\n+    let buffer = std::fs::read(file)?;\n+    let object = Object::parse(&buffer).map_err(invalid_data_err)?;\n+\n+    match object {\n         Object::Elf(elf) => {\n-            let symbols = elf.dynstrtab.to_vec().ok()?;\n+            let symbols = elf.dynstrtab.to_vec().map_err(invalid_data_err)?;\n             let names = symbols.iter().map(|s| s.to_string()).collect();\n-            Some(names)\n+            Ok(names)\n         }\n         Object::PE(pe) => {\n             let symbol_names =\n                 pe.exports.iter().flat_map(|s| s.name).map(|n| n.to_string()).collect();\n-            Some(symbol_names)\n+            Ok(symbol_names)\n         }\n         Object::Mach(mach) => match mach {\n             Mach::Binary(binary) => {\n-                let exports = binary.exports().ok()?;\n+                let exports = binary.exports().map_err(invalid_data_err)?;\n                 let names = exports\n-                    .iter()\n+                    .into_iter()\n                     .map(|s| {\n                         // In macos doc:\n                         // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlsym.3.html\n@@ -37,26 +44,25 @@ fn get_symbols_from_lib(file: &Path) -> Option<Vec<String>> {\n                         if s.name.starts_with(\"_\") {\n                             s.name[1..].to_string()\n                         } else {\n-                            s.name.to_string()\n+                            s.name\n                         }\n                     })\n                     .collect();\n-                Some(names)\n+                Ok(names)\n             }\n-            Mach::Fat(_) => None,\n+            Mach::Fat(_) => Ok(vec![]),\n         },\n-        Object::Archive(_) | Object::Unknown(_) => None,\n-    };\n+        Object::Archive(_) | Object::Unknown(_) => Ok(vec![]),\n+    }\n }\n \n fn is_derive_registrar_symbol(symbol: &str) -> bool {\n     symbol.contains(NEW_REGISTRAR_SYMBOL)\n }\n \n-fn find_registrar_symbol(file: &Path) -> Option<String> {\n+fn find_registrar_symbol(file: &Path) -> Result<Option<String>, IoError> {\n     let symbols = get_symbols_from_lib(file)?;\n-\n-    symbols.iter().find(|s| is_derive_registrar_symbol(s)).map(|s| s.clone())\n+    Ok(symbols.into_iter().find(|s| is_derive_registrar_symbol(s)))\n }\n \n /// Loads dynamic library in platform dependent manner.\n@@ -92,14 +98,14 @@ struct ProcMacroLibraryLibloading {\n }\n \n impl ProcMacroLibraryLibloading {\n-    fn open(file: &Path) -> Result<Self, String> {\n-        let symbol_name = find_registrar_symbol(file)\n-            .ok_or(format!(\"Cannot find registrar symbol in file {:?}\", file))?;\n+    fn open(file: &Path) -> Result<Self, IoError> {\n+        let symbol_name = find_registrar_symbol(file)?\n+            .ok_or(invalid_data_err(format!(\"Cannot find registrar symbol in file {:?}\", file)))?;\n \n-        let lib = load_library(file).map_err(|e| e.to_string())?;\n+        let lib = load_library(file).map_err(invalid_data_err)?;\n         let exported_macros = {\n             let macros: libloading::Symbol<&&[bridge::client::ProcMacro]> =\n-                unsafe { lib.get(symbol_name.as_bytes()) }.map_err(|e| e.to_string())?;\n+                unsafe { lib.get(symbol_name.as_bytes()) }.map_err(invalid_data_err)?;\n             macros.to_vec()\n         };\n \n@@ -122,7 +128,7 @@ impl Expander {\n         let lib =\n             lib.as_ref().canonicalize().expect(&format!(\"Cannot canonicalize {:?}\", lib.as_ref()));\n \n-        let library = ProcMacroLibraryImpl::open(&lib)?;\n+        let library = ProcMacroLibraryImpl::open(&lib).map_err(|e| e.to_string())?;\n         libs.push(library);\n \n         Ok(Expander { libs })"}]}