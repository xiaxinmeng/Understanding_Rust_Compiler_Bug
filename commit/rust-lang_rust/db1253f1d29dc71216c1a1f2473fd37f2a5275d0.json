{"sha": "db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "node_id": "C_kwDOAAsO6NoAKGRiMTI1M2YxZDI5ZGM3MTIxNmMxYTFmMjQ3M2ZkMzdmMmE1Mjc1ZDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-20T16:10:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-20T16:10:35Z"}, "message": "Rollup merge of #92582 - lcnr:generic-arg-infer, r=BoxyUwU\n\nimprove `_` constants in item signature handling\n\nremoving the \"type\" from the error messages does slightly worsen the error messages for types, but figuring out whether the placeholder is for a type or a constant and correctly dealing with that seemed fairly difficult to me so I took the easy way out :sparkles: Imo the error message is still clear enough.\n\nr? `@BoxyUwU` cc `@estebank`", "tree": {"sha": "8911ca6744c9f2dead8a10ef977a022f29bfb3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8911ca6744c9f2dead8a10ef977a022f29bfb3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6Yl7CRBK7hj4Ov3rIwAAkdEIAJuaobR8Tj06Nz26T/teR97B\n6V8tkuGxsEZD8VPIgiPN3nsfTsRvdX+RmuRFNqcz6P3jVUhAEuSjo4VCDGQSx9r1\nPKmsKdOMO8Xnnc/a5hsBNfFJBeKHJM2ud9GJHc1R7Gm+cQBDwk5/iVEOWVtBt9Fm\nxBfg/GPreWmFiqmvNpEaiuW0GNWnZ3GGaQvt2hqHJhf8DESUCxRLQelwY9GOPZ1u\nXg0Ryp67ZONJsBcFlDE2xk9sozrgeUprG45GIb3tisq1N6awuSkn5uIi8s7RGMNS\n1W1eUGOERf7EgGOJVkeuxiuyPXxE7AcyfFHUMvVIs7e39o77T70TVpkdBHGEb5M=\n=l7EC\n-----END PGP SIGNATURE-----\n", "payload": "tree 8911ca6744c9f2dead8a10ef977a022f29bfb3e4\nparent 413f490677d7d58e6d3a14c9fc5d9be11e5d668d\nparent 217458b9dab4578147090203a21acde9423785e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642695035 +0100\ncommitter GitHub <noreply@github.com> 1642695035 +0100\n\nRollup merge of #92582 - lcnr:generic-arg-infer, r=BoxyUwU\n\nimprove `_` constants in item signature handling\n\nremoving the \"type\" from the error messages does slightly worsen the error messages for types, but figuring out whether the placeholder is for a type or a constant and correctly dealing with that seemed fairly difficult to me so I took the easy way out :sparkles: Imo the error message is still clear enough.\n\nr? `@BoxyUwU` cc `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "html_url": "https://github.com/rust-lang/rust/commit/db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413f490677d7d58e6d3a14c9fc5d9be11e5d668d", "url": "https://api.github.com/repos/rust-lang/rust/commits/413f490677d7d58e6d3a14c9fc5d9be11e5d668d", "html_url": "https://github.com/rust-lang/rust/commit/413f490677d7d58e6d3a14c9fc5d9be11e5d668d"}, {"sha": "217458b9dab4578147090203a21acde9423785e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/217458b9dab4578147090203a21acde9423785e7", "html_url": "https://github.com/rust-lang/rust/commit/217458b9dab4578147090203a21acde9423785e7"}], "stats": {"total": 680, "additions": 424, "deletions": 256}, "files": [{"sha": "8d591d6781235d6861ece7b63210cd0fc7073591", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1210,11 +1210,25 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Error(DelaySpanBugEmitted(())))\n     }\n \n-    /// Like `err` but for constants.\n+    /// Like [TyCtxt::ty_error] but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n-        self.sess\n-            .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n+        self.const_error_with_message(\n+            ty,\n+            DUMMY_SP,\n+            \"ty::ConstKind::Error constructed but no error reported\",\n+        )\n+    }\n+\n+    /// Like [TyCtxt::ty_error_with_message] but for constants.\n+    #[track_caller]\n+    pub fn const_error_with_message<S: Into<MultiSpan>>(\n+        self,\n+        ty: Ty<'tcx>,\n+        span: S,\n+        msg: &str,\n+    ) -> &'tcx Const<'tcx> {\n+        self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })\n     }\n "}, {"sha": "0b4579b299d099cec7e674eb2fa77fc889f03fd5", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1148,19 +1148,11 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 if self.visit(ty).is_break() {\n                     return;\n                 }\n+            } else {\n+                // We don't do anything for const infers here.\n             }\n         } else {\n-            let local_id = self.tcx.hir().local_def_id(inf.hir_id);\n-            if let Some(did) = self.tcx.opt_const_param_of(local_id) {\n-                if self.visit_def_id(did, \"inferred\", &\"\").is_break() {\n-                    return;\n-                }\n-            }\n-\n-            // FIXME see above note for same issue.\n-            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, &inf.to_ty())).is_break() {\n-                return;\n-            }\n+            bug!(\"visit_infer without typeck_results\");\n         }\n         intravisit::walk_inf(self, inf);\n     }"}, {"sha": "d9b3f51b5bd245834b86f14a69a7e6fde24e4051", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -6,7 +6,7 @@ mod errors;\n mod generics;\n \n use crate::bounds::Bounds;\n-use crate::collect::PlaceholderHirTyCollector;\n+use crate::collect::HirPlaceholderCollector;\n use crate::errors::{\n     AmbiguousLifetimeBound, MultipleRelaxedDefaultBounds, TraitObjectDeclaredWithNoTraits,\n     TypeofReservedKeywordUsed, ValueOfAssociatedStructAlreadySpecified,\n@@ -2504,7 +2504,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         debug!(?bound_vars);\n \n         // We proactively collect all the inferred type params to emit a single error per fn def.\n-        let mut visitor = PlaceholderHirTyCollector::default();\n+        let mut visitor = HirPlaceholderCollector::default();\n         for ty in decl.inputs {\n             visitor.visit_ty(ty);\n         }"}, {"sha": "cf519a9ab32747be49555c008f9f7893c10aba2d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -112,9 +112,9 @@ pub struct ItemCtxt<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n \n #[derive(Default)]\n-crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n+crate struct HirPlaceholderCollector(crate Vec<Span>);\n \n-impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n+impl<'v> Visitor<'v> for HirPlaceholderCollector {\n     fn visit_ty(&mut self, t: &'v hir::Ty<'v>) {\n         if let hir::TyKind::Infer = t.kind {\n             self.0.push(t.span);\n@@ -131,6 +131,12 @@ impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n             _ => {}\n         }\n     }\n+    fn visit_array_length(&mut self, length: &'v hir::ArrayLen) {\n+        if let &hir::ArrayLen::Infer(_, span) = length {\n+            self.0.push(span);\n+        }\n+        intravisit::walk_array_len(self, length)\n+    }\n }\n \n struct CollectItemTypesVisitor<'tcx> {\n@@ -175,7 +181,7 @@ crate fn placeholder_type_error<'tcx>(\n         sugg.push((span, format!(\", {}\", type_name)));\n     }\n \n-    let mut err = bad_placeholder(tcx, \"type\", placeholder_types, kind);\n+    let mut err = bad_placeholder(tcx, placeholder_types, kind);\n \n     // Suggest, but only if it is not a function in const or static\n     if suggest {\n@@ -233,7 +239,7 @@ fn reject_placeholder_type_signatures_in_item<'tcx>(\n         _ => return,\n     };\n \n-    let mut visitor = PlaceholderHirTyCollector::default();\n+    let mut visitor = HirPlaceholderCollector::default();\n     visitor.visit_item(item);\n \n     placeholder_type_error(\n@@ -311,7 +317,6 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n \n fn bad_placeholder<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    placeholder_kind: &'static str,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n ) -> rustc_errors::DiagnosticBuilder<'tcx> {\n@@ -322,8 +327,7 @@ fn bad_placeholder<'tcx>(\n         tcx.sess,\n         spans.clone(),\n         E0121,\n-        \"the {} placeholder `_` is not allowed within types on item signatures for {}\",\n-        placeholder_kind,\n+        \"the placeholder `_` is not allowed within types on item signatures for {}\",\n         kind\n     );\n     for span in spans {\n@@ -381,7 +385,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ty_infer(&self, _: Option<&ty::GenericParamDef>, span: Span) -> Ty<'tcx> {\n-        self.tcx().ty_error_with_message(span, \"bad_placeholder_type\")\n+        self.tcx().ty_error_with_message(span, \"bad placeholder type\")\n     }\n \n     fn ct_infer(\n@@ -390,13 +394,11 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n-        bad_placeholder(self.tcx(), \"const\", vec![span], \"generic\").emit();\n-        // Typeck doesn't expect erased regions to be returned from `type_of`.\n         let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n-        self.tcx().const_error(ty)\n+        self.tcx().const_error_with_message(ty, span, \"bad placeholder constant\")\n     }\n \n     fn projected_ty_from_poly_trait_ref(\n@@ -743,7 +745,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                 match item.kind {\n                     hir::ForeignItemKind::Fn(..) => tcx.ensure().fn_sig(item.def_id),\n                     hir::ForeignItemKind::Static(..) => {\n-                        let mut visitor = PlaceholderHirTyCollector::default();\n+                        let mut visitor = HirPlaceholderCollector::default();\n                         visitor.visit_foreign_item(item);\n                         placeholder_type_error(\n                             tcx,\n@@ -826,7 +828,7 @@ fn convert_item(tcx: TyCtxt<'_>, item_id: hir::ItemId) {\n                 hir::ItemKind::Const(ty, ..) | hir::ItemKind::Static(ty, ..) => {\n                     // (#75889): Account for `const C: dyn Fn() -> _ = \"\";`\n                     if let hir::TyKind::TraitObject(..) = ty.kind {\n-                        let mut visitor = PlaceholderHirTyCollector::default();\n+                        let mut visitor = HirPlaceholderCollector::default();\n                         visitor.visit_item(it);\n                         placeholder_type_error(\n                             tcx,\n@@ -862,7 +864,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n         hir::TraitItemKind::Const(..) => {\n             tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `const C: _;`.\n-            let mut visitor = PlaceholderHirTyCollector::default();\n+            let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_trait_item(trait_item);\n             placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"constant\");\n         }\n@@ -871,7 +873,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             tcx.ensure().item_bounds(trait_item_id.def_id);\n             tcx.ensure().type_of(trait_item_id.def_id);\n             // Account for `type T = _;`.\n-            let mut visitor = PlaceholderHirTyCollector::default();\n+            let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_trait_item(trait_item);\n             placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n         }\n@@ -880,7 +882,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::TraitItemId) {\n             tcx.ensure().item_bounds(trait_item_id.def_id);\n             // #74612: Visit and try to find bad placeholders\n             // even if there is no concrete type.\n-            let mut visitor = PlaceholderHirTyCollector::default();\n+            let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_trait_item(trait_item);\n \n             placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n@@ -902,7 +904,7 @@ fn convert_impl_item(tcx: TyCtxt<'_>, impl_item_id: hir::ImplItemId) {\n         }\n         hir::ImplItemKind::TyAlias(_) => {\n             // Account for `type T = _;`\n-            let mut visitor = PlaceholderHirTyCollector::default();\n+            let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_impl_item(impl_item);\n \n             placeholder_type_error(tcx, None, &[], visitor.0, false, None, \"associated type\");\n@@ -1822,10 +1824,14 @@ fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {\n /// Whether `ty` is a type with `_` placeholders that can be inferred. Used in diagnostics only to\n /// use inference to provide suggestions for the appropriate type if possible.\n fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+    debug!(?ty);\n     use hir::TyKind::*;\n     match &ty.kind {\n         Infer => true,\n-        Slice(ty) | Array(ty, _) => is_suggestable_infer_ty(ty),\n+        Slice(ty) => is_suggestable_infer_ty(ty),\n+        Array(ty, length) => {\n+            is_suggestable_infer_ty(ty) || matches!(length, hir::ArrayLen::Infer(_, _))\n+        }\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n         Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n         OpaqueDef(_, generic_args) => are_suggestable_generic_args(generic_args),\n@@ -1877,9 +1883,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     });\n                     let fn_sig = ty::Binder::dummy(fn_sig);\n \n-                    let mut visitor = PlaceholderHirTyCollector::default();\n+                    let mut visitor = HirPlaceholderCollector::default();\n                     visitor.visit_ty(ty);\n-                    let mut diag = bad_placeholder(tcx, \"type\", visitor.0, \"return type\");\n+                    let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n                     let ret_ty = fn_sig.skip_binder().output();\n                     if !ret_ty.references_error() {\n                         if !ret_ty.is_closure() {"}, {"sha": "63020b7f90f0abe51bd7537e7e3ddbfc3ed95d62", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -20,9 +20,6 @@ use super::{bad_placeholder, is_suggestable_infer_ty};\n /// This should be called using the query `tcx.opt_const_param_of`.\n #[instrument(level = \"debug\", skip(tcx))]\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n-    // FIXME(generic_arg_infer): allow for returning DefIds of inference of\n-    // GenericArg::Infer below. This may require a change where GenericArg::Infer has some flag\n-    // for const or type.\n     use hir::*;\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n@@ -753,7 +750,7 @@ fn infer_placeholder_type<'a>(\n             err.emit();\n         }\n         None => {\n-            let mut diag = bad_placeholder(tcx, \"type\", vec![span], kind);\n+            let mut diag = bad_placeholder(tcx, vec![span], kind);\n \n             if !ty.references_error() {\n                 let mut mk_nameable = MakeNameable::new(tcx);"}, {"sha": "56b88a426a1a8256623c64b31cd1091a7eae6c0f", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/413f490677d7d58e6d3a14c9fc5d9be11e5d668d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/413f490677d7d58e6d3a14c9fc5d9be11e5d668d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.rs?ref=413f490677d7d58e6d3a14c9fc5d9be11e5d668d", "patch": "@@ -1,12 +0,0 @@\n-// To avoid having to `or` gate `_` as an expr.\n-#![feature(generic_arg_infer)]\n-\n-fn foo() -> [u8; _] {\n-    //~^ ERROR the const placeholder `_` is not allowed within types on item signatures for generics\n-    // FIXME(generic_arg_infer): this error message should say in the return type or sth like that.\n-    [0; 3]\n-}\n-\n-fn main() {\n-    foo();\n-}"}, {"sha": "eaa12b4192dc60c4b55e68a91a274806913b01fb", "filename": "src/test/ui/const-generics/generic_arg_infer/array-in-sig.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/413f490677d7d58e6d3a14c9fc5d9be11e5d668d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/413f490677d7d58e6d3a14c9fc5d9be11e5d668d/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Farray-in-sig.stderr?ref=413f490677d7d58e6d3a14c9fc5d9be11e5d668d", "patch": "@@ -1,9 +0,0 @@\n-error[E0121]: the const placeholder `_` is not allowed within types on item signatures for generics\n-  --> $DIR/array-in-sig.rs:4:18\n-   |\n-LL | fn foo() -> [u8; _] {\n-   |                  ^ not allowed in type signatures\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0121`."}, {"sha": "1f60b2242411dd39710c1c9d520f4a7f0f0b8987", "filename": "src/test/ui/const-generics/generic_arg_infer/in-signature.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -0,0 +1,61 @@\n+#![crate_type = \"rlib\"]\n+#![feature(generic_arg_infer)]\n+\n+struct Foo<const N: usize>;\n+struct Bar<T, const N: usize>(T);\n+\n+fn arr_fn() -> [u8; _] {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    [0; 3]\n+}\n+\n+fn ty_fn() -> Bar<i32, _> {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    Bar::<i32, 3>(0)\n+}\n+\n+fn ty_fn_mixed() -> Bar<_, _> {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n+    Bar::<i32, 3>(0)\n+}\n+\n+const ARR_CT: [u8; _] = [0; 3];\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+static ARR_STATIC: [u8; _] = [0; 3];\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n+const TY_CT: Bar<i32, _> = Bar::<i32, 3>(0);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+static TY_STATIC: Bar<i32, _> = Bar::<i32, 3>(0);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n+const TY_CT_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+static TY_STATIC_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n+trait ArrAssocConst {\n+    const ARR: [u8; _];\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+}\n+trait TyAssocConst {\n+    const ARR: Bar<i32, _>;\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+}\n+trait TyAssocConstMixed {\n+    const ARR: Bar<_, _>;\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n+}\n+\n+trait AssocTy {\n+    type Assoc;\n+}\n+impl AssocTy for i8 {\n+    type Assoc = [u8; _];\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n+}\n+impl AssocTy for i16 {\n+    type Assoc = Bar<i32, _>;\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n+}\n+impl AssocTy for i32 {\n+    type Assoc = Bar<_, _>;\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n+}"}, {"sha": "7581cf4120ecf89f43194f37d5e342eed01492be", "filename": "src/test/ui/const-generics/generic_arg_infer/in-signature.stderr", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Fin-signature.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -0,0 +1,119 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/in-signature.rs:7:21\n+   |\n+LL | fn arr_fn() -> [u8; _] {\n+   |                -----^-\n+   |                |    |\n+   |                |    not allowed in type signatures\n+   |                help: replace with the correct return type: `[u8; 3]`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/in-signature.rs:12:24\n+   |\n+LL | fn ty_fn() -> Bar<i32, _> {\n+   |               ---------^-\n+   |               |        |\n+   |               |        not allowed in type signatures\n+   |               help: replace with the correct return type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/in-signature.rs:17:25\n+   |\n+LL | fn ty_fn_mixed() -> Bar<_, _> {\n+   |                     ----^--^-\n+   |                     |   |  |\n+   |                     |   |  not allowed in type signatures\n+   |                     |   not allowed in type signatures\n+   |                     help: replace with the correct return type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:22:15\n+   |\n+LL | const ARR_CT: [u8; _] = [0; 3];\n+   |               ^^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/in-signature.rs:24:20\n+   |\n+LL | static ARR_STATIC: [u8; _] = [0; 3];\n+   |                    ^^^^^^^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:26:14\n+   |\n+LL | const TY_CT: Bar<i32, _> = Bar::<i32, 3>(0);\n+   |              ^^^^^^^^^^^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace with the correct type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/in-signature.rs:28:19\n+   |\n+LL | static TY_STATIC: Bar<i32, _> = Bar::<i32, 3>(0);\n+   |                   ^^^^^^^^^^^\n+   |                   |\n+   |                   not allowed in type signatures\n+   |                   help: replace with the correct type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:30:20\n+   |\n+LL | const TY_CT_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n+   |                    ^^^^^^^^^\n+   |                    |\n+   |                    not allowed in type signatures\n+   |                    help: replace with the correct type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n+  --> $DIR/in-signature.rs:32:25\n+   |\n+LL | static TY_STATIC_MIXED: Bar<_, _> = Bar::<i32, 3>(0);\n+   |                         ^^^^^^^^^\n+   |                         |\n+   |                         not allowed in type signatures\n+   |                         help: replace with the correct type: `Bar<i32, 3_usize>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:35:21\n+   |\n+LL |     const ARR: [u8; _];\n+   |                     ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:39:25\n+   |\n+LL |     const ARR: Bar<i32, _>;\n+   |                         ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n+  --> $DIR/in-signature.rs:43:20\n+   |\n+LL |     const ARR: Bar<_, _>;\n+   |                    ^  ^ not allowed in type signatures\n+   |                    |\n+   |                    not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/in-signature.rs:51:23\n+   |\n+LL |     type Assoc = [u8; _];\n+   |                       ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/in-signature.rs:55:27\n+   |\n+LL |     type Assoc = Bar<i32, _>;\n+   |                           ^ not allowed in type signatures\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n+  --> $DIR/in-signature.rs:59:22\n+   |\n+LL |     type Assoc = Bar<_, _>;\n+   |                      ^  ^ not allowed in type signatures\n+   |                      |\n+   |                      not allowed in type signatures\n+\n+error: aborting due to 15 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "f787c416c2d63cd19c63e3295edb5eef3d4f7675", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -16,7 +16,7 @@ type D = (u8, u8)::AssocTy;\n \n type E = _::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures for type aliases\n+//~| ERROR the placeholder `_` is not allowed within types on item signatures for type aliases\n \n type F = &'static (u8)::AssocTy;\n //~^ ERROR missing angle brackets in associated item path\n@@ -49,37 +49,37 @@ type I = ty!()::AssocTy;\n \n trait K<A, B> {}\n fn foo<X: K<_, _>>(x: X) {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn bar<F>(_: F) where F: Fn() -> _ {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn baz<F: Fn() -> _>(_: F) {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n struct L<F>(F) where F: Fn() -> _;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for structs\n struct M<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for structs\n     a: F,\n }\n enum N<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for enums\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for enums\n     Foo(F),\n }\n \n union O<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for unions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for unions\n     foo: F,\n }\n \n trait P<F> where F: Fn() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for traits\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for traits\n }\n \n trait Q {\n     fn foo<F>(_: F) where F: Fn() -> _ {}\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn main() {}"}, {"sha": "2326af934d014d509809643d24a0b50f2c1df214", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -81,7 +81,7 @@ error[E0223]: ambiguous associated type\n LL | type D = (u8, u8)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<(u8, u8) as Trait>::AssocTy`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for type aliases\n   --> $DIR/bad-assoc-ty.rs:17:10\n    |\n LL | type E = _::AssocTy;\n@@ -136,7 +136,7 @@ error[E0223]: ambiguous associated type\n LL | type I = ty!()::AssocTy;\n    |          ^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<u8 as Trait>::AssocTy`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:51:13\n    |\n LL | fn foo<X: K<_, _>>(x: X) {}\n@@ -149,7 +149,7 @@ help: use type parameters instead\n LL | fn foo<X: K<T, T>, T>(x: X) {}\n    |             ~  ~ +++\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:54:34\n    |\n LL | fn bar<F>(_: F) where F: Fn() -> _ {}\n@@ -160,7 +160,7 @@ help: use type parameters instead\n LL | fn bar<F, T>(_: F) where F: Fn() -> T {}\n    |         +++                         ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:57:19\n    |\n LL | fn baz<F: Fn() -> _>(_: F) {}\n@@ -171,7 +171,7 @@ help: use type parameters instead\n LL | fn baz<F: Fn() -> T, T>(_: F) {}\n    |                   ~+++\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:60:33\n    |\n LL | struct L<F>(F) where F: Fn() -> _;\n@@ -182,7 +182,7 @@ help: use type parameters instead\n LL | struct L<F, T>(F) where F: Fn() -> T;\n    |           +++                      ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/bad-assoc-ty.rs:62:30\n    |\n LL | struct M<F> where F: Fn() -> _ {\n@@ -193,7 +193,7 @@ help: use type parameters instead\n LL | struct M<F, T> where F: Fn() -> T {\n    |           +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for enums\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for enums\n   --> $DIR/bad-assoc-ty.rs:66:28\n    |\n LL | enum N<F> where F: Fn() -> _ {\n@@ -204,7 +204,7 @@ help: use type parameters instead\n LL | enum N<F, T> where F: Fn() -> T {\n    |         +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for unions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for unions\n   --> $DIR/bad-assoc-ty.rs:71:29\n    |\n LL | union O<F> where F: Fn() -> _ {\n@@ -215,7 +215,7 @@ help: use type parameters instead\n LL | union O<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for traits\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for traits\n   --> $DIR/bad-assoc-ty.rs:76:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n@@ -226,7 +226,7 @@ help: use type parameters instead\n LL | trait P<F, T> where F: Fn() -> T {\n    |          +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/bad-assoc-ty.rs:81:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}"}, {"sha": "023d7e011bf3a0e7521495c838abcdfefabc4026", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/E0121.rs:1:13\n    |\n LL | fn foo() -> _ { 5 }\n@@ -7,7 +7,7 @@ LL | fn foo() -> _ { 5 }\n    |             not allowed in type signatures\n    |             help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/E0121.rs:3:13\n    |\n LL | static BAR: _ = \"test\";"}, {"sha": "fcef6f1b60ecf6864a930bcdd576bfacd70be504", "filename": "src/test/ui/fn/issue-80179.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -8,15 +8,15 @@ fn returns_i32() -> i32 {\n }\n \n fn returns_fn_ptr() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n //~| HELP replace with the correct return type\n //~| SUGGESTION fn() -> i32\n     returns_i32\n }\n \n fn returns_closure() -> _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n //~| HELP consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n //~| NOTE for more information on `Fn` traits and closure types, see"}, {"sha": "2ca4ae982d96f30bca872b276ae28812a37b36f7", "filename": "src/test/ui/fn/issue-80179.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80179.rs:10:24\n    |\n LL | fn returns_fn_ptr() -> _ {\n@@ -7,7 +7,7 @@ LL | fn returns_fn_ptr() -> _ {\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `fn() -> i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80179.rs:18:25\n    |\n LL | fn returns_closure() -> _ {"}, {"sha": "45a30857413b9df442e2b60a246e9e27603d923e", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -4,7 +4,7 @@ macro_rules! suite {\n             const A = \"A\".$fn();\n             //~^ ERROR the name `A` is defined multiple times\n             //~| ERROR missing type for `const` item\n-            //~| ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+            //~| ERROR the placeholder `_` is not allowed within types on item signatures for constants\n         )*\n     }\n }"}, {"sha": "e5ab65169ce3bfad4818c90857a3d7f79b640207", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -30,7 +30,7 @@ LL | | }\n    |\n    = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n    |\n LL |               const A = \"A\".$fn();"}, {"sha": "9839b8880e9e1f43a25ca014553ba0a61c8bbab9", "filename": "src/test/ui/self/self-infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fself%2Fself-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,8 +1,8 @@\n struct S;\n \n impl S {\n-    fn f(self: _) {} //~ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n-    fn g(self: &_) {} //~ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    fn f(self: _) {} //~ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+    fn g(self: &_) {} //~ERROR the placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn main() {}"}, {"sha": "4f9e3f21dca52a5ce1fbe13ff75aed4a74c82119", "filename": "src/test/ui/self/self-infer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-infer.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/self-infer.rs:4:16\n    |\n LL |     fn f(self: _) {}\n@@ -9,7 +9,7 @@ help: use type parameters instead\n LL |     fn f<T>(self: T) {}\n    |         +++       ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/self-infer.rs:5:17\n    |\n LL |     fn g(self: &_) {}"}, {"sha": "f2485041d9ba22bde817d7e284a7e07e422679c4", "filename": "src/test/ui/suggestions/unnamable-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -8,14 +8,14 @@ const A = 5;\n //~| HELP: provide a type for the constant\n \n static B: _ = \"abc\";\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for static variables\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for static variables\n //~| NOTE: not allowed in type signatures\n //~| HELP: replace with the correct type\n \n \n // FIXME: this should also suggest a function pointer, as the closure is non-capturing\n const C: _ = || 42;\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for constants\n //~| NOTE: not allowed in type signatures\n //~| NOTE: however, the inferred type\n "}, {"sha": "6127446c83e3b68e830c23d33c58e019a388b7b7", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -4,7 +4,7 @@ error: missing type for `const` item\n LL | const A = 5;\n    |       ^ help: provide a type for the constant: `A: i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/unnamable-types.rs:10:11\n    |\n LL | static B: _ = \"abc\";\n@@ -13,7 +13,7 @@ LL | static B: _ = \"abc\";\n    |           not allowed in type signatures\n    |           help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/unnamable-types.rs:17:10\n    |\n LL | const C: _ = || 42;"}, {"sha": "8d818d4a387a6fd199cdf8c33e0c5589820597ef", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -5,7 +5,7 @@\n type Pointer<T> = impl std::ops::Deref<Target=T>;\n \n fn test() -> Pointer<_> {\n-    //~^ ERROR: the type placeholder `_` is not allowed within types\n+    //~^ ERROR: the placeholder `_` is not allowed within types\n     Box::new(1)\n }\n "}, {"sha": "15205ba9b419e244513bcd6e55a84e68a60cbc49", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-77179.rs:7:22\n    |\n LL | fn test() -> Pointer<_> {"}, {"sha": "44ca256b05163c0749e256c145448393a777b4dd", "filename": "src/test/ui/typeck/issue-74086.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     static BUG: fn(_) -> u8 = |_| 8;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n }"}, {"sha": "e7aea33758cb258b5a84572c90bee0f01902c5c5", "filename": "src/test/ui/typeck/issue-74086.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-74086.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/issue-74086.rs:2:20\n    |\n LL |     static BUG: fn(_) -> u8 = |_| 8;"}, {"sha": "885acc48231b24e4435e4f7c88f1f253dc3de2fe", "filename": "src/test/ui/typeck/issue-75883.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -5,7 +5,7 @@ pub struct UI {}\n impl UI {\n     pub fn run() -> Result<_> {\n         //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n-        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n+        //~| ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n         let mut ui = UI {};\n         ui.interact();\n \n@@ -14,7 +14,7 @@ impl UI {\n \n     pub fn interact(&mut self) -> Result<_> {\n         //~^ ERROR: this enum takes 2 generic arguments but 1 generic argument was supplied\n-        //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n+        //~| ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n         unimplemented!();\n     }\n }"}, {"sha": "3861e0507f6ddeb6b8d313d76db226b38f6b601b", "filename": "src/test/ui/typeck/issue-75883.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75883.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -34,13 +34,13 @@ help: add missing generic argument\n LL |     pub fn interact(&mut self) -> Result<_, E> {\n    |                                           +++\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-75883.rs:15:42\n    |\n LL |     pub fn interact(&mut self) -> Result<_> {\n    |                                          ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-75883.rs:6:28\n    |\n LL |     pub fn run() -> Result<_> {"}, {"sha": "1438f481ec7e135245e72fbad5a679f0666f55e2", "filename": "src/test/ui/typeck/issue-75889.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-75889.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,10 +1,10 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constant items\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constant items\n   --> $DIR/issue-75889.rs:3:24\n    |\n LL | const FOO: dyn Fn() -> _ = \"\";\n    |                        ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static items\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n   --> $DIR/issue-75889.rs:4:25\n    |\n LL | static BOO: dyn Fn() -> _ = \"\";"}, {"sha": "1624f6b7742b0d88a3598f60c800eb9d9ade15b4", "filename": "src/test/ui/typeck/issue-80779.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -3,11 +3,11 @@\n pub struct T<'a>(&'a str);\n \n pub fn f<'a>(val: T<'a>) -> _ {\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n     g(val)\n }\n \n pub fn g(_: T<'static>) -> _ {}\n-//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR: the placeholder `_` is not allowed within types on item signatures for return types\n \n fn main() {}"}, {"sha": "2261ba616545fb2a167b1ff5942bc3789e2bf022", "filename": "src/test/ui/typeck/issue-80779.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-80779.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80779.rs:10:28\n    |\n LL | pub fn g(_: T<'static>) -> _ {}\n@@ -7,7 +7,7 @@ LL | pub fn g(_: T<'static>) -> _ {}\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-80779.rs:5:29\n    |\n LL | pub fn f<'a>(val: T<'a>) -> _ {"}, {"sha": "8935535fb7eb8b9b9e79ca57bdcc813d322b6348", "filename": "src/test/ui/typeck/issue-81885.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,8 +1,8 @@\n const TEST4: fn() -> _ = 42;\n-                  //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+                  //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn main() {\n     const TEST5: fn() -> _ = 42;\n-                      //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+                      //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n }"}, {"sha": "3ff4375cd8d3f1a514f48fc6accc9f37f0f2bcab", "filename": "src/test/ui/typeck/issue-81885.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81885.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,10 +1,10 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/issue-81885.rs:1:22\n    |\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/issue-81885.rs:5:26\n    |\n LL |     const TEST5: fn() -> _ = 42;"}, {"sha": "9376e8bcf80bc7d317054e1897943e70b0e675fb", "filename": "src/test/ui/typeck/issue-83621-placeholder-static-in-extern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-83621-placeholder-static-in-extern.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/issue-83621-placeholder-static-in-extern.rs:4:15\n    |\n LL |     static x: _;"}, {"sha": "3c7c990d4e27c1f002053f0a25a3cfc6080a9701", "filename": "src/test/ui/typeck/issue-91450-inner-ty-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -2,6 +2,6 @@\n // This test ensures that the compiler does not suggest `Foo<[type error]>` in diagnostic messages.\n \n fn foo() -> Option<_> {} //~ ERROR: [E0308]\n-//~^ ERROR: the type placeholder `_` is not allowed\n+//~^ ERROR: the placeholder `_` is not allowed\n \n fn main() {}"}, {"sha": "32f4c8f6fdf8255def0295c2733c2fc3ae75eb03", "filename": "src/test/ui/typeck/issue-91450-inner-ty-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91450-inner-ty-error.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -9,7 +9,7 @@ LL | fn foo() -> Option<_> {}\n    = note:   expected enum `Option<_>`\n            found unit type `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/issue-91450-inner-ty-error.rs:4:20\n    |\n LL | fn foo() -> Option<_> {}"}, {"sha": "ab2e2d8c53aa3eb2166af328d8aaff2a536a84b9", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -2,13 +2,13 @@ struct MyStruct;\n \n trait Test {\n     const TEST: fn() -> _;\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n-    //~| ERROR: the type placeholder `_` is not allowed within types on item signatures for constants [E0121]\n+    //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~| ERROR: the placeholder `_` is not allowed within types on item signatures for constants [E0121]\n }\n \n impl Test for MyStruct {\n     const TEST: fn() -> _ = 42;\n-    //~^ ERROR: the type placeholder `_` is not allowed within types on item signatures for functions [E0121]\n+    //~^ ERROR: the placeholder `_` is not allowed within types on item signatures for functions [E0121]\n }\n \n fn main() {}"}, {"sha": "e7b2e554a8d425261b3926352d2204168b6fac75", "filename": "src/test/ui/typeck/type-placeholder-fn-in-const.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftype-placeholder-fn-in-const.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,16 +1,16 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/type-placeholder-fn-in-const.rs:4:25\n    |\n LL |     const TEST: fn() -> _;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/type-placeholder-fn-in-const.rs:4:25\n    |\n LL |     const TEST: fn() -> _;\n    |                         ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/type-placeholder-fn-in-const.rs:10:25\n    |\n LL |     const TEST: fn() -> _ = 42;"}, {"sha": "ca0876be58df9909d111e16ac6cea7d8272bb3f4", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -5,218 +5,218 @@\n // inference by using the `_` type placeholder.\n \n fn test() -> _ { 5 }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n fn test2() -> (_, _) { (5, 5) }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n static TEST3: _ = \"test\";\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n static TEST4: _ = 145;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n static TEST5: (_, _) = (1, 2);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n fn test6(_: _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn test6_b<T>(_: _, _: T) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn test7(x: _) { let _x: usize = x; }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n fn test8(_f: fn() -> _) { }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n-//~^^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+//~^^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n struct Test9;\n \n impl Test9 {\n     fn test9(&self) -> _ { () }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n     fn test10(&self, _x : _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n }\n \n fn test11(x: &usize) -> &_ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n     &x\n }\n \n unsafe fn test12(x: *const usize) -> *const *const _ {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n     &x\n }\n \n impl Clone for Test9 {\n     fn clone(&self) -> _ { Test9 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n     fn clone_from(&mut self, other: _) { *self = Test9; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n }\n \n struct Test10 {\n     a: _,\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for structs\n     b: (_, _),\n }\n \n pub fn main() {\n     static A = 42;\n     //~^ ERROR missing type for `static` item\n     static B: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n     static C: Option<_> = Some(42);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n     fn fn_test() -> _ { 5 }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n     fn fn_test2() -> (_, _) { (5, 5) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n     static FN_TEST3: _ = \"test\";\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n     static FN_TEST4: _ = 145;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n     static FN_TEST5: (_, _) = (1, 2);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for static variables\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for static variables\n \n     fn fn_test6(_: _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n     fn fn_test7(x: _) { let _x: usize = x; }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n     fn fn_test8(_f: fn() -> _) { }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n-    //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n+    //~^^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n     struct FnTest9;\n \n     impl FnTest9 {\n         fn fn_test9(&self) -> _ { () }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n         fn fn_test10(&self, _x : _) { }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     }\n \n     impl Clone for FnTest9 {\n         fn clone(&self) -> _ { FnTest9 }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     }\n \n     struct FnTest10 {\n         a: _,\n-        //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+        //~^ ERROR the placeholder `_` is not allowed within types on item signatures for structs\n         b: (_, _),\n     }\n \n     fn fn_test11(_: _) -> (_, _) { panic!() }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n     //~| ERROR type annotations needed\n \n     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n }\n \n trait T {\n     fn method_test1(&self, x: _);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     fn method_test2(&self, x: _) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     fn method_test3(&self) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test1(x: _);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test2(x: _) -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n     fn assoc_fn_test3() -> _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n }\n \n struct BadStruct<_>(_);\n //~^ ERROR expected identifier, found reserved identifier `_`\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+//~| ERROR the placeholder `_` is not allowed within types on item signatures for structs\n trait BadTrait<_> {}\n //~^ ERROR expected identifier, found reserved identifier `_`\n impl BadTrait<_> for BadStruct<_> {}\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for implementations\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for implementations\n \n fn impl_trait() -> impl BadTrait<_> {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for opaque types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for opaque types\n     unimplemented!()\n }\n \n struct BadStruct1<_, _>(_);\n //~^ ERROR expected identifier, found reserved identifier `_`\n //~| ERROR expected identifier, found reserved identifier `_`\n //~| ERROR the name `_` is already used\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+//~| ERROR the placeholder `_` is not allowed within types on item signatures for structs\n struct BadStruct2<_, T>(_, T);\n //~^ ERROR expected identifier, found reserved identifier `_`\n-//~| ERROR the type placeholder `_` is not allowed within types on item signatures for structs\n+//~| ERROR the placeholder `_` is not allowed within types on item signatures for structs\n \n type X = Box<_>;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for type aliases\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for type aliases\n \n struct Struct;\n trait Trait<T> {}\n impl Trait<usize> for Struct {}\n type Y = impl Trait<_>;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for opaque types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for opaque types\n fn foo() -> Y {\n     Struct\n }\n \n trait Qux {\n     type A;\n     type B = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n     const D: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n     // type E: _; // FIXME: make the parser propagate the existence of `B`\n     type F: std::ops::Fn(_);\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n }\n impl Qux for Struct {\n     type A = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n     type B = _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for associated types\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for associated types\n     const C: _;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n     //~| ERROR associated constant in `impl` without body\n     const D: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n }\n \n fn map<T>(_: fn() -> Option<&'static T>) -> Option<T> {\n     None\n }\n \n fn value() -> Option<&'static _> {\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n     Option::<&'static u8>::None\n }\n \n const _: Option<_> = map(value);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants"}, {"sha": "c07b96f9a977ae325e2a2cc527f7719ff949d7a3", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -44,7 +44,7 @@ LL | struct BadStruct1<_, _>(_);\n    |                   |\n    |                   first use of `_`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:7:14\n    |\n LL | fn test() -> _ { 5 }\n@@ -53,7 +53,7 @@ LL | fn test() -> _ { 5 }\n    |              not allowed in type signatures\n    |              help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:10:16\n    |\n LL | fn test2() -> (_, _) { (5, 5) }\n@@ -63,7 +63,7 @@ LL | fn test2() -> (_, _) { (5, 5) }\n    |               |not allowed in type signatures\n    |               help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:13:15\n    |\n LL | static TEST3: _ = \"test\";\n@@ -72,7 +72,7 @@ LL | static TEST3: _ = \"test\";\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:16:15\n    |\n LL | static TEST4: _ = 145;\n@@ -81,13 +81,13 @@ LL | static TEST4: _ = 145;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:19:15\n    |\n LL | static TEST5: (_, _) = (1, 2);\n    |               ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:22:13\n    |\n LL | fn test6(_: _) { }\n@@ -98,7 +98,7 @@ help: use type parameters instead\n LL | fn test6<T>(_: T) { }\n    |         +++    ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:25:18\n    |\n LL | fn test6_b<T>(_: _, _: T) { }\n@@ -109,7 +109,7 @@ help: use type parameters instead\n LL | fn test6_b<T, U>(_: U, _: T) { }\n    |             +++     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:28:30\n    |\n LL | fn test6_c<T, K, L, A, B>(_: _, _: (T, K, L, A, B)) { }\n@@ -120,7 +120,7 @@ help: use type parameters instead\n LL | fn test6_c<T, K, L, A, B, U>(_: U, _: (T, K, L, A, B)) { }\n    |                         +++     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:31:13\n    |\n LL | fn test7(x: _) { let _x: usize = x; }\n@@ -131,7 +131,7 @@ help: use type parameters instead\n LL | fn test7<T>(x: T) { let _x: usize = x; }\n    |         +++    ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:34:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -140,7 +140,7 @@ LL | fn test8(_f: fn() -> _) { }\n    |                      not allowed in type signatures\n    |                      help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:34:22\n    |\n LL | fn test8(_f: fn() -> _) { }\n@@ -151,7 +151,7 @@ help: use type parameters instead\n LL | fn test8<T>(_f: fn() -> T) { }\n    |         +++             ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:48:26\n    |\n LL | fn test11(x: &usize) -> &_ {\n@@ -160,7 +160,7 @@ LL | fn test11(x: &usize) -> &_ {\n    |                         |not allowed in type signatures\n    |                         help: replace with the correct return type: `&'static &'static usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:53:52\n    |\n LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n@@ -169,7 +169,7 @@ LL | unsafe fn test12(x: *const usize) -> *const *const _ {\n    |                                      |             not allowed in type signatures\n    |                                      help: replace with the correct return type: `*const *const usize`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:67:8\n    |\n LL |     a: _,\n@@ -194,7 +194,7 @@ error: missing type for `static` item\n LL |     static A = 42;\n    |            ^ help: provide a type for the static variable: `A: i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:75:15\n    |\n LL |     static B: _ = 42;\n@@ -203,13 +203,13 @@ LL |     static B: _ = 42;\n    |               not allowed in type signatures\n    |               help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:77:15\n    |\n LL |     static C: Option<_> = Some(42);\n    |               ^^^^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:79:21\n    |\n LL |     fn fn_test() -> _ { 5 }\n@@ -218,7 +218,7 @@ LL |     fn fn_test() -> _ { 5 }\n    |                     not allowed in type signatures\n    |                     help: replace with the correct return type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:82:23\n    |\n LL |     fn fn_test2() -> (_, _) { (5, 5) }\n@@ -228,7 +228,7 @@ LL |     fn fn_test2() -> (_, _) { (5, 5) }\n    |                      |not allowed in type signatures\n    |                      help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:85:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n@@ -237,7 +237,7 @@ LL |     static FN_TEST3: _ = \"test\";\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `&str`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:88:22\n    |\n LL |     static FN_TEST4: _ = 145;\n@@ -246,13 +246,13 @@ LL |     static FN_TEST4: _ = 145;\n    |                      not allowed in type signatures\n    |                      help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for static variables\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for static variables\n   --> $DIR/typeck_type_placeholder_item.rs:91:22\n    |\n LL |     static FN_TEST5: (_, _) = (1, 2);\n    |                      ^^^^^^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:94:20\n    |\n LL |     fn fn_test6(_: _) { }\n@@ -263,7 +263,7 @@ help: use type parameters instead\n LL |     fn fn_test6<T>(_: T) { }\n    |                +++    ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:97:20\n    |\n LL |     fn fn_test7(x: _) { let _x: usize = x; }\n@@ -274,7 +274,7 @@ help: use type parameters instead\n LL |     fn fn_test7<T>(x: T) { let _x: usize = x; }\n    |                +++    ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:100:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n@@ -283,7 +283,7 @@ LL |     fn fn_test8(_f: fn() -> _) { }\n    |                             not allowed in type signatures\n    |                             help: use type parameters instead: `T`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:100:29\n    |\n LL |     fn fn_test8(_f: fn() -> _) { }\n@@ -294,7 +294,7 @@ help: use type parameters instead\n LL |     fn fn_test8<T>(_f: fn() -> T) { }\n    |                +++             ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:123:12\n    |\n LL |         a: _,\n@@ -319,15 +319,15 @@ error[E0282]: type annotations needed\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                  ^ cannot infer type\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:128:28\n    |\n LL |     fn fn_test11(_: _) -> (_, _) { panic!() }\n    |                            ^  ^ not allowed in type signatures\n    |                            |\n    |                            not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:132:30\n    |\n LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n@@ -337,7 +337,7 @@ LL |     fn fn_test12(x: i32) -> (_, _) { (x, x) }\n    |                             |not allowed in type signatures\n    |                             help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:135:33\n    |\n LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n@@ -346,7 +346,7 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           |     not allowed in type signatures\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:154:21\n    |\n LL | struct BadStruct<_>(_);\n@@ -357,7 +357,7 @@ help: use type parameters instead\n LL | struct BadStruct<T>(T);\n    |                  ~  ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for implementations\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for implementations\n   --> $DIR/typeck_type_placeholder_item.rs:159:15\n    |\n LL | impl BadTrait<_> for BadStruct<_> {}\n@@ -370,13 +370,13 @@ help: use type parameters instead\n LL | impl<T> BadTrait<T> for BadStruct<T> {}\n    |     +++          ~                ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for opaque types\n   --> $DIR/typeck_type_placeholder_item.rs:162:34\n    |\n LL | fn impl_trait() -> impl BadTrait<_> {\n    |                                  ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:167:25\n    |\n LL | struct BadStruct1<_, _>(_);\n@@ -387,7 +387,7 @@ help: use type parameters instead\n LL | struct BadStruct1<T, _>(T);\n    |                   ~     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for structs\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for structs\n   --> $DIR/typeck_type_placeholder_item.rs:172:25\n    |\n LL | struct BadStruct2<_, T>(_, T);\n@@ -398,19 +398,19 @@ help: use type parameters instead\n LL | struct BadStruct2<U, T>(U, T);\n    |                   ~     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for type aliases\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for type aliases\n   --> $DIR/typeck_type_placeholder_item.rs:176:14\n    |\n LL | type X = Box<_>;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for opaque types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for opaque types\n   --> $DIR/typeck_type_placeholder_item.rs:182:21\n    |\n LL | type Y = impl Trait<_>;\n    |                     ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:216:31\n    |\n LL | fn value() -> Option<&'static _> {\n@@ -419,7 +419,7 @@ LL | fn value() -> Option<&'static _> {\n    |               |               not allowed in type signatures\n    |               help: replace with the correct return type: `Option<&'static u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item.rs:221:10\n    |\n LL | const _: Option<_> = map(value);\n@@ -428,7 +428,7 @@ LL | const _: Option<_> = map(value);\n    |          not allowed in type signatures\n    |          help: replace with the correct type: `Option<u8>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:140:31\n    |\n LL |     fn method_test1(&self, x: _);\n@@ -439,7 +439,7 @@ help: use type parameters instead\n LL |     fn method_test1<T>(&self, x: T);\n    |                    +++           ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:142:31\n    |\n LL |     fn method_test2(&self, x: _) -> _;\n@@ -452,7 +452,7 @@ help: use type parameters instead\n LL |     fn method_test2<T>(&self, x: T) -> T;\n    |                    +++           ~     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:144:31\n    |\n LL |     fn method_test3(&self) -> _;\n@@ -463,7 +463,7 @@ help: use type parameters instead\n LL |     fn method_test3<T>(&self) -> T;\n    |                    +++           ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:146:26\n    |\n LL |     fn assoc_fn_test1(x: _);\n@@ -474,7 +474,7 @@ help: use type parameters instead\n LL |     fn assoc_fn_test1<T>(x: T);\n    |                      +++    ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:148:26\n    |\n LL |     fn assoc_fn_test2(x: _) -> _;\n@@ -487,7 +487,7 @@ help: use type parameters instead\n LL |     fn assoc_fn_test2<T>(x: T) -> T;\n    |                      +++    ~     ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:150:28\n    |\n LL |     fn assoc_fn_test3() -> _;\n@@ -498,19 +498,19 @@ help: use type parameters instead\n LL |     fn assoc_fn_test3<T>() -> T;\n    |                      +++      ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:190:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item.rs:192:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item.rs:194:14\n    |\n LL |     const D: _ = 42;\n@@ -519,13 +519,13 @@ LL |     const D: _ = 42;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:197:26\n    |\n LL |     type F: std::ops::Fn(_);\n    |                          ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:41:24\n    |\n LL |     fn test9(&self) -> _ { () }\n@@ -534,7 +534,7 @@ LL |     fn test9(&self) -> _ { () }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:44:27\n    |\n LL |     fn test10(&self, _x : _) { }\n@@ -545,7 +545,7 @@ help: use type parameters instead\n LL |     fn test10<T>(&self, _x : T) { }\n    |              +++             ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:59:24\n    |\n LL |     fn clone(&self) -> _ { Test9 }\n@@ -554,7 +554,7 @@ LL |     fn clone(&self) -> _ { Test9 }\n    |                        not allowed in type signatures\n    |                        help: replace with the correct return type: `Test9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:62:37\n    |\n LL |     fn clone_from(&mut self, other: _) { *self = Test9; }\n@@ -565,7 +565,7 @@ help: use type parameters instead\n LL |     fn clone_from<T>(&mut self, other: T) { *self = Test9; }\n    |                  +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:107:31\n    |\n LL |         fn fn_test9(&self) -> _ { () }\n@@ -574,7 +574,7 @@ LL |         fn fn_test9(&self) -> _ { () }\n    |                               not allowed in type signatures\n    |                               help: replace with the correct return type: `()`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:110:34\n    |\n LL |         fn fn_test10(&self, _x : _) { }\n@@ -585,7 +585,7 @@ help: use type parameters instead\n LL |         fn fn_test10<T>(&self, _x : T) { }\n    |                     +++             ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item.rs:115:28\n    |\n LL |         fn clone(&self) -> _ { FnTest9 }\n@@ -594,7 +594,7 @@ LL |         fn clone(&self) -> _ { FnTest9 }\n    |                            not allowed in type signatures\n    |                            help: replace with the correct return type: `FnTest9`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item.rs:118:41\n    |\n LL |         fn clone_from(&mut self, other: _) { *self = FnTest9; }\n@@ -605,25 +605,25 @@ help: use type parameters instead\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      +++                   ~\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:201:14\n    |\n LL |     type A = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for associated types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for associated types\n   --> $DIR/typeck_type_placeholder_item.rs:203:14\n    |\n LL |     type B = _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item.rs:205:14\n    |\n LL |     const C: _;\n    |              ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item.rs:208:14\n    |\n LL |     const D: _ = 42;"}, {"sha": "53f31b683c1a4c4e3d725419d76a23c0ea040a2d", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -2,27 +2,27 @@\n // using the `_` type placeholder.\n \n fn test1() -> _ { Some(42) }\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for return types\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types\n \n const TEST2: _ = 42u32;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n \n const TEST3: _ = Some(42);\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n \n const TEST4: fn() -> _ = 42;\n-//~^ ERROR the type placeholder `_` is not allowed within types on item signatures for functions\n+//~^ ERROR the placeholder `_` is not allowed within types on item signatures for functions\n \n trait Test5 {\n     const TEST5: _ = 42;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n }\n \n struct Test6;\n \n impl Test6 {\n     const TEST6: _ = 13;\n-    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures for constants\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for constants\n }\n \n pub fn main() {"}, {"sha": "e8191832318e5b7f532eed9bf875b58233fc7db6", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db1253f1d29dc71216c1a1f2473fd37f2a5275d0/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=db1253f1d29dc71216c1a1f2473fd37f2a5275d0", "patch": "@@ -1,4 +1,4 @@\n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for return types\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n   --> $DIR/typeck_type_placeholder_item_help.rs:4:15\n    |\n LL | fn test1() -> _ { Some(42) }\n@@ -7,7 +7,7 @@ LL | fn test1() -> _ { Some(42) }\n    |               not allowed in type signatures\n    |               help: replace with the correct return type: `Option<i32>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:7:14\n    |\n LL | const TEST2: _ = 42u32;\n@@ -16,7 +16,7 @@ LL | const TEST2: _ = 42u32;\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `u32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:10:14\n    |\n LL | const TEST3: _ = Some(42);\n@@ -25,13 +25,13 @@ LL | const TEST3: _ = Some(42);\n    |              not allowed in type signatures\n    |              help: replace with the correct type: `Option<i32>`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for functions\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for functions\n   --> $DIR/typeck_type_placeholder_item_help.rs:13:22\n    |\n LL | const TEST4: fn() -> _ = 42;\n    |                      ^ not allowed in type signatures\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:17:18\n    |\n LL |     const TEST5: _ = 42;\n@@ -40,7 +40,7 @@ LL |     const TEST5: _ = 42;\n    |                  not allowed in type signatures\n    |                  help: replace with the correct type: `i32`\n \n-error[E0121]: the type placeholder `_` is not allowed within types on item signatures for constants\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for constants\n   --> $DIR/typeck_type_placeholder_item_help.rs:24:18\n    |\n LL |     const TEST6: _ = 13;"}]}