{"sha": "178de46116b4fc8c1d9b30007f5e5ed24c809881", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OGRlNDYxMTZiNGZjOGMxZDliMzAwMDdmNWU1ZWQyNGM4MDk4ODE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-26T17:55:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-02-06T21:29:01Z"}, "message": "Add primitive module to libcore/std\n\nThis re-exports the primitive types from libcore at `core::primitive` to allow\nmacro authors to have a reliable location to use them from.", "tree": {"sha": "f594d63f6421e077675f42c267a76ab1bd2ef9b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f594d63f6421e077675f42c267a76ab1bd2ef9b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/178de46116b4fc8c1d9b30007f5e5ed24c809881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/178de46116b4fc8c1d9b30007f5e5ed24c809881", "html_url": "https://github.com/rust-lang/rust/commit/178de46116b4fc8c1d9b30007f5e5ed24c809881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/178de46116b4fc8c1d9b30007f5e5ed24c809881/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8df2508f2772d83011f0f651de86181123e519", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8df2508f2772d83011f0f651de86181123e519", "html_url": "https://github.com/rust-lang/rust/commit/1f8df2508f2772d83011f0f651de86181123e519"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "257a6d371b730fafeb518fa919fa2e8ff15bbcfb", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=178de46116b4fc8c1d9b30007f5e5ed24c809881", "patch": "@@ -262,6 +262,9 @@ mod bool;\n mod tuple;\n mod unit;\n \n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub mod primitive;\n+\n // Pull in the `core_arch` crate directly into libcore. The contents of\n // `core_arch` are in a different repository: rust-lang/stdarch.\n //"}, {"sha": "d37bbfaf5dfd45b8ee3d0c765a64a2388b223724", "filename": "src/libcore/primitive.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibcore%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibcore%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprimitive.rs?ref=178de46116b4fc8c1d9b30007f5e5ed24c809881", "patch": "@@ -0,0 +1,67 @@\n+//! This module reexports the primitive types to allow usage that is not\n+//! possibly shadowed by other declared types.\n+//!\n+//! This is normally only useful in macro generated code.\n+//!\n+//! An example of this is when generating a new struct and an impl for it:\n+//!\n+//! ```rust,compile_fail\n+//! pub struct bool;\n+//!\n+//! impl QueryId for bool {\n+//!     const SOME_PROPERTY: bool = true;\n+//! }\n+//!\n+//! # trait QueryId { const SOME_PROPERTY: core::primitive::bool; }\n+//! ```\n+//!\n+//! Note that the `SOME_PROPERTY` associated constant would not compile, as its\n+//! type `bool` refers to the struct, rather than to the primitive bool type.\n+//!\n+//! A correct implementation could look like:\n+//!\n+//! ```rust\n+//! # #[allow(non_camel_case_types)]\n+//! pub struct bool;\n+//!\n+//! impl QueryId for bool {\n+//!     const SOME_PROPERTY: core::primitive::bool = true;\n+//! }\n+//!\n+//! # trait QueryId { const SOME_PROPERTY: core::primitive::bool; }\n+//! ```\n+\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use bool;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use char;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use f32;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use f64;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use i128;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use i16;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use i32;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use i64;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use i8;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use isize;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use str;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use u128;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use u16;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use u32;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use u64;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use u8;\n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use usize;"}, {"sha": "2b54481ab5670ec96df1c035b53538fdb3a9d1db", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=178de46116b4fc8c1d9b30007f5e5ed24c809881", "patch": "@@ -233,12 +233,12 @@\n #![feature(allocator_internals)]\n #![feature(allow_internal_unsafe)]\n #![feature(allow_internal_unstable)]\n-#![feature(atomic_mut_ptr)]\n #![feature(arbitrary_self_types)]\n #![feature(array_error_internals)]\n #![feature(asm)]\n #![feature(assoc_int_consts)]\n #![feature(associated_type_bounds)]\n+#![feature(atomic_mut_ptr)]\n #![feature(box_syntax)]\n #![feature(c_variadic)]\n #![feature(cfg_target_has_atomic)]\n@@ -550,6 +550,9 @@ pub use core::{\n     trace_macros,\n };\n \n+#[stable(feature = \"core_primitive\", since = \"1.42.0\")]\n+pub use core::primitive;\n+\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "72a854346fad043d122ddb89a86ce1642b293994", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=178de46116b4fc8c1d9b30007f5e5ed24c809881", "patch": "@@ -9,6 +9,11 @@ error[E0412]: cannot find type `u8` in the crate root\n    |\n LL |     let _: ::u8;\n    |              ^^ not found in the crate root\n+   |\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+LL | use std::primitive::u8;\n+   |\n \n error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5"}, {"sha": "f290a329eaac298575d6981faa0ae3adbf694dcf", "filename": "src/test/ui/shadow-bool.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Ftest%2Fui%2Fshadow-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/178de46116b4fc8c1d9b30007f5e5ed24c809881/src%2Ftest%2Fui%2Fshadow-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadow-bool.rs?ref=178de46116b4fc8c1d9b30007f5e5ed24c809881", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+mod bar {\n+    pub trait QueryId {\n+        const SOME_PROPERTY: bool;\n+    }\n+}\n+\n+use bar::QueryId;\n+\n+#[allow(non_camel_case_types)]\n+pub struct bool;\n+\n+impl QueryId for bool {\n+    const SOME_PROPERTY: core::primitive::bool = true;\n+}\n+\n+fn main() {}"}]}