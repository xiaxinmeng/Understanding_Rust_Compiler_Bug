{"sha": "28a53cdb4695b71cb9ee39959df88542056479cd", "node_id": "C_kwDOAAsO6NoAKDI4YTUzY2RiNDY5NWI3MWNiOWVlMzk5NTlkZjg4NTQyMDU2NDc5Y2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T21:51:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-21T21:51:00Z"}, "message": "Auto merge of #104533 - oli-obk:method_callee, r=lcnr\n\nClean up and harden various methods around trait substs\n\nr? `@lcnr`", "tree": {"sha": "41ab127cda1633c7d08ee6ac6c53de0a4ae442cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ab127cda1633c7d08ee6ac6c53de0a4ae442cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a53cdb4695b71cb9ee39959df88542056479cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a53cdb4695b71cb9ee39959df88542056479cd", "html_url": "https://github.com/rust-lang/rust/commit/28a53cdb4695b71cb9ee39959df88542056479cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a53cdb4695b71cb9ee39959df88542056479cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7bc90fea3b441234a84b49fdafeb75815eebbab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7bc90fea3b441234a84b49fdafeb75815eebbab", "html_url": "https://github.com/rust-lang/rust/commit/b7bc90fea3b441234a84b49fdafeb75815eebbab"}, {"sha": "c2ecd8f1f6e634e08081d00cbd90e0026d81e623", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2ecd8f1f6e634e08081d00cbd90e0026d81e623", "html_url": "https://github.com/rust-lang/rust/commit/c2ecd8f1f6e634e08081d00cbd90e0026d81e623"}], "stats": {"total": 659, "additions": 309, "deletions": 350}, "files": [{"sha": "8f1ae594a9247ee3765e4b7ca690842429bf727f", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -489,12 +489,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             // but the type has region variables, so erase those.\n             tcx.infer_ctxt()\n                 .build()\n-                .type_implements_trait(\n-                    default_trait,\n-                    tcx.erase_regions(ty),\n-                    ty::List::empty(),\n-                    param_env,\n-                )\n+                .type_implements_trait(default_trait, [tcx.erase_regions(ty)], param_env)\n                 .must_apply_modulo_regions()\n         };\n \n@@ -1707,7 +1702,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             err.span_label(borrow_span, note);\n \n             let tcx = self.infcx.tcx;\n-            let ty_params = ty::List::empty();\n \n             let return_ty = self.regioncx.universal_regions().unnormalized_output_ty;\n             let return_ty = tcx.erase_regions(return_ty);\n@@ -1716,7 +1710,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             if let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator)\n                 && self\n                     .infcx\n-                    .type_implements_trait(iter_trait, return_ty, ty_params, self.param_env)\n+                    .type_implements_trait(iter_trait, [return_ty], self.param_env)\n                     .must_apply_modulo_regions()\n             {\n                 err.span_suggestion_hidden("}, {"sha": "7467212bed883aa2827db09a19c1093b9c7a97cf", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -547,10 +547,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {\n             let tcx = self.tcx();\n-            let trait_ref = ty::TraitRef {\n-                def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),\n-                substs: tcx.mk_substs_trait(place_ty.ty, &[]),\n-            };\n+            let trait_ref = tcx.at(self.last_span).mk_trait_ref(LangItem::Copy, [place_ty.ty]);\n \n             // To have a `Copy` operand, the type `T` of the\n             // value must be `Copy`. Note that we prove that `T: Copy`,\n@@ -1273,10 +1270,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                 self.check_rvalue(body, rv, location);\n                 if !self.unsized_feature_enabled() {\n-                    let trait_ref = ty::TraitRef {\n-                        def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                        substs: tcx.mk_substs_trait(place_ty, &[]),\n-                    };\n+                    let trait_ref =\n+                        tcx.at(self.last_span).mk_trait_ref(LangItem::Sized, [place_ty]);\n                     self.prove_trait_ref(\n                         trait_ref,\n                         location.to_locations(),\n@@ -1840,6 +1835,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     #[instrument(skip(self, body), level = \"debug\")]\n     fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n         let tcx = self.tcx();\n+        let span = body.source_info(location).span;\n \n         match rvalue {\n             Rvalue::Aggregate(ak, ops) => {\n@@ -1863,12 +1859,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         }\n                         Operand::Move(place) => {\n                             // Make sure that repeated elements implement `Copy`.\n-                            let span = body.source_info(location).span;\n                             let ty = place.ty(body, tcx).ty;\n-                            let trait_ref = ty::TraitRef::new(\n-                                tcx.require_lang_item(LangItem::Copy, Some(span)),\n-                                tcx.mk_substs_trait(ty, &[]),\n-                            );\n+                            let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Copy, [ty]);\n \n                             self.prove_trait_ref(\n                                 trait_ref,\n@@ -1881,10 +1873,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n \n             &Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, ty) => {\n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    substs: tcx.mk_substs_trait(ty, &[]),\n-                };\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1896,10 +1885,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Rvalue::ShallowInitBox(operand, ty) => {\n                 self.check_operand(operand, location);\n \n-                let trait_ref = ty::TraitRef {\n-                    def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),\n-                    substs: tcx.mk_substs_trait(*ty, &[]),\n-                };\n+                let trait_ref = tcx.at(span).mk_trait_ref(LangItem::Sized, [*ty]);\n \n                 self.prove_trait_ref(\n                     trait_ref,\n@@ -1996,11 +1982,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n-                        let trait_ref = ty::TraitRef {\n-                            def_id: tcx\n-                                .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),\n-                            substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),\n-                        };\n+                        let trait_ref = tcx\n+                            .at(span)\n+                            .mk_trait_ref(LangItem::CoerceUnsized, [op.ty(body, tcx), ty]);\n \n                         self.prove_trait_ref(\n                             trait_ref,"}, {"sha": "e7b3df9b7288bc7610e62977fbed7f7c8356c41a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -153,17 +153,12 @@ impl Qualif for NeedsNonConstDrop {\n             return false;\n         }\n \n-        let destruct = cx.tcx.require_lang_item(LangItem::Destruct, None);\n-\n         let obligation = Obligation::new(\n             cx.tcx,\n-            ObligationCause::dummy(),\n+            ObligationCause::dummy_with_span(cx.body.span),\n             cx.param_env,\n             ty::Binder::dummy(ty::TraitPredicate {\n-                trait_ref: ty::TraitRef {\n-                    def_id: destruct,\n-                    substs: cx.tcx.mk_substs_trait(ty, &[]),\n-                },\n+                trait_ref: cx.tcx.at(cx.body.span).mk_trait_ref(LangItem::Destruct, [ty]),\n                 constness: ty::BoundConstness::ConstIfConst,\n                 polarity: ty::ImplPolarity::Positive,\n             }),"}, {"sha": "3e3544ce666e39e6b296e4b8d9ad2ecc255288e2", "filename": "compiler/rustc_hir_analysis/src/bounds.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fbounds.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -60,13 +60,10 @@ impl<'tcx> Bounds<'tcx> {\n     {\n         // If it could be sized, and is, add the `Sized` predicate.\n         let sized_predicate = self.implicitly_sized.and_then(|span| {\n-            tcx.lang_items().sized_trait().map(move |sized| {\n-                let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-                    def_id: sized,\n-                    substs: tcx.mk_substs_trait(param_ty, &[]),\n-                });\n-                (trait_ref.without_const().to_predicate(tcx), span)\n-            })\n+            // FIXME: use tcx.at(span).mk_trait_ref(LangItem::Sized) here? This may make no-core code harder to write.\n+            let sized = tcx.lang_items().sized_trait()?;\n+            let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(sized, [param_ty]));\n+            Some((trait_ref.without_const().to_predicate(tcx), span))\n         });\n \n         let region_preds = self.region_bounds.iter().map(move |&(region_bound, span)| {"}, {"sha": "7119f3a238697b1b9a544501ffc69edfee00d375", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1722,7 +1722,7 @@ fn receiver_is_valid<'tcx>(\n     // The first type is `receiver_ty`, which we know its not equal to `self_ty`; skip it.\n     autoderef.next();\n \n-    let receiver_trait_def_id = tcx.require_lang_item(LangItem::Receiver, None);\n+    let receiver_trait_def_id = tcx.require_lang_item(LangItem::Receiver, Some(span));\n \n     // Keep dereferencing `receiver_ty` until we get to `self_ty`.\n     loop {\n@@ -1782,10 +1782,7 @@ fn receiver_is_implemented<'tcx>(\n     receiver_ty: Ty<'tcx>,\n ) -> bool {\n     let tcx = wfcx.tcx();\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-        def_id: receiver_trait_def_id,\n-        substs: tcx.mk_substs_trait(receiver_ty, &[]),\n-    });\n+    let trait_ref = ty::Binder::dummy(tcx.mk_trait_ref(receiver_trait_def_id, [receiver_ty]));\n \n     let obligation = traits::Obligation::new(tcx, cause, wfcx.param_env, trait_ref.without_const());\n "}, {"sha": "b2c9e7389b0470a6cc81be75f3323fad49b58c63", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -315,8 +315,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n                             cause.clone(),\n                             dispatch_from_dyn_trait,\n                             0,\n-                            field.ty(tcx, substs_a),\n-                            &[field.ty(tcx, substs_b).into()],\n+                            [field.ty(tcx, substs_a), field.ty(tcx, substs_b)],\n                         )\n                     }),\n                 );\n@@ -558,7 +557,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n     // Register an obligation for `A: Trait<B>`.\n     let cause = traits::ObligationCause::misc(span, impl_hir_id);\n     let predicate =\n-        predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, source, &[target.into()]);\n+        predicate_for_trait_def(tcx, param_env, cause, trait_def_id, 0, [source, target]);\n     let errors = traits::fully_solve_obligation(&infcx, predicate);\n     if !errors.is_empty() {\n         infcx.err_ctxt().report_fulfillment_errors(&errors, None);"}, {"sha": "31432bb6e417005021ce63f5c558e4d29d6ea916", "filename": "compiler/rustc_hir_typeck/src/_match.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2F_match.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -539,17 +539,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .subst_iter_copied(self.tcx, substs)\n                     {\n                         let pred = pred.kind().rebind(match pred.kind().skip_binder() {\n-                            ty::PredicateKind::Trait(mut trait_pred) => {\n+                            ty::PredicateKind::Trait(trait_pred) => {\n                                 assert_eq!(trait_pred.trait_ref.self_ty(), opaque_ty);\n-                                trait_pred.trait_ref.substs =\n-                                    self.tcx.mk_substs_trait(ty, &trait_pred.trait_ref.substs[1..]);\n-                                ty::PredicateKind::Trait(trait_pred)\n+                                ty::PredicateKind::Trait(trait_pred.with_self_type(self.tcx, ty))\n                             }\n                             ty::PredicateKind::Projection(mut proj_pred) => {\n                                 assert_eq!(proj_pred.projection_ty.self_ty(), opaque_ty);\n-                                proj_pred.projection_ty.substs = self\n-                                    .tcx\n-                                    .mk_substs_trait(ty, &proj_pred.projection_ty.substs[1..]);\n+                                proj_pred.projection_ty.substs = self.tcx.mk_substs_trait(\n+                                    ty,\n+                                    proj_pred.projection_ty.substs.iter().skip(1),\n+                                );\n                                 ty::PredicateKind::Projection(proj_pred)\n                             }\n                             _ => continue,"}, {"sha": "5e1e44dcb6d158d9d5321736ed46a1bd6ce50f24", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -498,10 +498,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                         let ty = fcx.tcx.erase_regions(ty);\n                         let expr_ty = fcx.resolve_vars_if_possible(self.expr_ty);\n                         let expr_ty = fcx.tcx.erase_regions(expr_ty);\n-                        let ty_params = fcx.tcx.mk_substs_trait(expr_ty, &[]);\n                         if fcx\n                             .infcx\n-                            .type_implements_trait(from_trait, ty, ty_params, fcx.param_env)\n+                            .type_implements_trait(from_trait, [ty, expr_ty], fcx.param_env)\n                             .must_apply_modulo_regions()\n                         {\n                             label = false;"}, {"sha": "43c7127b0d4c56b0e8495508eb2e9f51fa784d0d", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -630,8 +630,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             cause,\n             coerce_unsized_did,\n             0,\n-            coerce_source,\n-            &[coerce_target.into()]\n+            [coerce_source, coerce_target]\n         )];\n \n         let mut has_unsized_tuple_coercion = false;\n@@ -805,10 +804,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 self.tcx,\n                 self.cause.clone(),\n                 self.param_env,\n-                ty::Binder::dummy(ty::TraitRef::new(\n-                    self.tcx.require_lang_item(hir::LangItem::PointerSized, Some(self.cause.span)),\n-                    self.tcx.mk_substs_trait(a, &[]),\n-                ))\n+                ty::Binder::dummy(\n+                    self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n+                )\n                 .to_poly_trait_predicate(),\n             ));\n         }\n@@ -1086,8 +1084,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.infcx\n                 .type_implements_trait(\n                     self.tcx.lang_items().deref_mut_trait()?,\n-                    expr_ty,\n-                    ty::List::empty(),\n+                    [expr_ty],\n                     self.param_env,\n                 )\n                 .may_apply()"}, {"sha": "de30bfe6923a7cc84cf77d72c33f2dff50ec2225", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1119,8 +1119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .infcx\n                     .type_implements_trait(\n                         self.tcx.lang_items().sized_trait().unwrap(),\n-                        lhs_deref_ty,\n-                        ty::List::empty(),\n+                        [lhs_deref_ty],\n                         self.param_env,\n                     )\n                     .may_apply();"}, {"sha": "b5aa8cd6e7c5b2b8743cd2beb0ed5291a9fcfed9", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1093,10 +1093,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.tcx,\n                 self.misc(expr.span),\n                 self.param_env,\n-                ty::Binder::dummy(ty::TraitRef {\n-                    def_id: into_def_id,\n-                    substs: self.tcx.mk_substs_trait(expr_ty, &[expected_ty.into()]),\n-                })\n+                ty::Binder::dummy(self.tcx.mk_trait_ref(\n+                    into_def_id,\n+                    [expr_ty, expected_ty]\n+                ))\n                 .to_poly_trait_predicate(),\n             ))\n         {"}, {"sha": "89746ce54a643da089dca7ab161900533324127c", "filename": "compiler/rustc_hir_typeck/src/method/prelude2021.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprelude2021.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -8,7 +8,7 @@ use hir::ItemKind;\n use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::{Adt, Array, Ref, Ty};\n use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::{Empty, Underscore};\n@@ -227,14 +227,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If we know it does not, we don't need to warn.\n         if method_name.name == sym::from_iter {\n             if let Some(trait_def_id) = self.tcx.get_diagnostic_item(sym::FromIterator) {\n+                let any_type = self.infcx.next_ty_var(TypeVariableOrigin {\n+                    kind: TypeVariableOriginKind::MiscVariable,\n+                    span,\n+                });\n                 if !self\n                     .infcx\n-                    .type_implements_trait(\n-                        trait_def_id,\n-                        self_ty,\n-                        InternalSubsts::empty(),\n-                        self.param_env,\n-                    )\n+                    .type_implements_trait(trait_def_id, [self_ty, any_type], self.param_env)\n                     .may_apply()\n                 {\n                     return;"}, {"sha": "d0ea2b0e66475df861048ba32899c0e81cbaa0c3", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -68,16 +68,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n-                        let fn_once_substs = tcx.mk_substs_trait(\n-                            ty,\n-                            &[self\n-                                .next_ty_var(TypeVariableOrigin {\n+                        let trait_ref = tcx.mk_trait_ref(\n+                            fn_once,\n+                            [\n+                                ty,\n+                                self.next_ty_var(TypeVariableOrigin {\n                                     kind: TypeVariableOriginKind::MiscVariable,\n                                     span,\n-                                })\n-                                .into()],\n+                                }),\n+                            ],\n                         );\n-                        let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = ty::Binder::dummy(trait_ref);\n                         let obligation = Obligation::misc(\n                             tcx,"}, {"sha": "68f119adc7a7cb6392a1164fcb7c087ed2dda8aa", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -970,12 +970,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 check_trait\n                     .map(|check_trait| {\n                         self.infcx\n-                            .type_implements_trait(\n-                                check_trait,\n-                                ty,\n-                                self.tcx.mk_substs_trait(ty, &[]),\n-                                self.param_env,\n-                            )\n+                            .type_implements_trait(check_trait, [ty], self.param_env)\n                             .must_apply_modulo_regions()\n                     })\n                     .unwrap_or(false),\n@@ -999,12 +994,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     check_trait\n                         .map(|check_trait| {\n                             self.infcx\n-                                .type_implements_trait(\n-                                    check_trait,\n-                                    ty,\n-                                    self.tcx.mk_substs_trait(ty, &[]),\n-                                    self.param_env,\n-                                )\n+                                .type_implements_trait(check_trait, [ty], self.param_env)\n                                 .must_apply_modulo_regions()\n                         })\n                         .unwrap_or(false),\n@@ -1347,14 +1337,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let is_drop_defined_for_ty = |ty: Ty<'tcx>| {\n             let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, Some(closure_span));\n-            let ty_params = self.tcx.mk_substs_trait(base_path_ty, &[]);\n             self.infcx\n-                .type_implements_trait(\n-                    drop_trait,\n-                    ty,\n-                    ty_params,\n-                    self.tcx.param_env(closure_def_id),\n-                )\n+                .type_implements_trait(drop_trait, [ty], self.tcx.param_env(closure_def_id))\n                 .must_apply_modulo_regions()\n         };\n "}, {"sha": "54224c9b5de228d00e0b325c5d24efd575c3d89d", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -27,7 +27,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         def_id: DefId,\n         cause: ObligationCause<'tcx>,\n     ) {\n-        let trait_ref = ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = infcx.tcx.mk_trait_ref(def_id, [ty]);\n         self.register_predicate_obligation(\n             infcx,\n             Obligation {"}, {"sha": "c1820ac4d1eab61ff9ac3eb759a556cd32f4a192", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -5,7 +5,6 @@ use rustc_hir as hir;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n-use rustc_middle::ty::subst::InternalSubsts;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n use rustc_session::lint::FutureIncompatibilityReason;\n use rustc_span::edition::Edition;\n@@ -153,17 +152,17 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n             let infcx = cx.tcx.infer_ctxt().build();\n             let suggest_display = is_str\n-                || cx.tcx.get_diagnostic_item(sym::Display).map(|t| {\n-                    infcx\n-                        .type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env)\n-                        .may_apply()\n-                }) == Some(true);\n+                || cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::Display)\n+                    .map(|t| infcx.type_implements_trait(t, [ty], cx.param_env).may_apply())\n+                    == Some(true);\n             let suggest_debug = !suggest_display\n-                && cx.tcx.get_diagnostic_item(sym::Debug).map(|t| {\n-                    infcx\n-                        .type_implements_trait(t, ty, InternalSubsts::empty(), cx.param_env)\n-                        .may_apply()\n-                }) == Some(true);\n+                && cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::Debug)\n+                    .map(|t| infcx.type_implements_trait(t, [ty], cx.param_env).may_apply())\n+                    == Some(true);\n \n             let suggest_panic_any = !is_str && panic == sym::std_panic_macro;\n "}, {"sha": "8b70eabb105c80e850bb4dd8de694c4b335c4329", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1884,7 +1884,7 @@ impl<'tcx> Operand<'tcx> {\n         substs: SubstsRef<'tcx>,\n         span: Span,\n     ) -> Self {\n-        let ty = tcx.bound_type_of(def_id).subst(tcx, substs);\n+        let ty = tcx.mk_fn_def(def_id, substs);\n         Operand::Constant(Box::new(Constant {\n             span,\n             user_ty: None,"}, {"sha": "b8e6f0258d0191a7b397741b57b27d6469c644c7", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1,7 +1,5 @@\n-use crate::ty::subst::SubstsRef;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n@@ -121,7 +119,8 @@ pub struct OverloadedDeref<'tcx> {\n }\n \n impl<'tcx> OverloadedDeref<'tcx> {\n-    pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> (DefId, SubstsRef<'tcx>) {\n+    /// Get the zst function item type for this method call.\n+    pub fn method_call(&self, tcx: TyCtxt<'tcx>, source: Ty<'tcx>) -> Ty<'tcx> {\n         let trait_def_id = match self.mutbl {\n             hir::Mutability::Not => tcx.require_lang_item(LangItem::Deref, None),\n             hir::Mutability::Mut => tcx.require_lang_item(LangItem::DerefMut, None),\n@@ -132,7 +131,7 @@ impl<'tcx> OverloadedDeref<'tcx> {\n             .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n-        (method_def_id, tcx.mk_substs_trait(source, &[]))\n+        tcx.mk_fn_def(method_def_id, tcx.mk_substs_trait(source, []))\n     }\n }\n "}, {"sha": "8d6ae142314575676b5b10dcf69e6b209ee14ea2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 49, "deletions": 9, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -2516,7 +2516,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty(Tuple(self.intern_type_list(&ts)))\n     }\n \n-    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n+    pub fn mk_tup<I: InternAs<Ty<'tcx>, Ty<'tcx>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|ts| self.mk_ty(Tuple(self.intern_type_list(&ts))))\n     }\n \n@@ -2532,6 +2532,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        debug_assert_eq!(\n+            self.generics_of(def_id).count(),\n+            substs.len(),\n+            \"wrong number of generic parameters for {def_id:?}: {substs:?}\",\n+        );\n         self.mk_ty(FnDef(def_id, substs))\n     }\n \n@@ -2552,6 +2557,11 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_projection(self, item_def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {\n+        debug_assert_eq!(\n+            self.generics_of(item_def_id).count(),\n+            substs.len(),\n+            \"wrong number of generic parameters for {item_def_id:?}: {substs:?}\",\n+        );\n         self.mk_ty(Projection(ProjectionTy { item_def_id, substs }))\n     }\n \n@@ -2766,45 +2776,66 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn mk_poly_existential_predicates<\n-        I: InternAs<[PolyExistentialPredicate<'tcx>], &'tcx List<PolyExistentialPredicate<'tcx>>>,\n+        I: InternAs<PolyExistentialPredicate<'tcx>, &'tcx List<PolyExistentialPredicate<'tcx>>>,\n     >(\n         self,\n         iter: I,\n     ) -> I::Output {\n         iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))\n     }\n \n-    pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(\n+    pub fn mk_predicates<I: InternAs<Predicate<'tcx>, &'tcx List<Predicate<'tcx>>>>(\n         self,\n         iter: I,\n     ) -> I::Output {\n         iter.intern_with(|xs| self.intern_predicates(xs))\n     }\n \n-    pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {\n+    pub fn mk_type_list<I: InternAs<Ty<'tcx>, &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {\n         iter.intern_with(|xs| self.intern_type_list(xs))\n     }\n \n-    pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(\n+    pub fn mk_substs<I: InternAs<GenericArg<'tcx>, &'tcx List<GenericArg<'tcx>>>>(\n         self,\n         iter: I,\n     ) -> I::Output {\n         iter.intern_with(|xs| self.intern_substs(xs))\n     }\n \n-    pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(\n+    pub fn mk_place_elems<I: InternAs<PlaceElem<'tcx>, &'tcx List<PlaceElem<'tcx>>>>(\n         self,\n         iter: I,\n     ) -> I::Output {\n         iter.intern_with(|xs| self.intern_place_elems(xs))\n     }\n \n-    pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {\n-        self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))\n+    pub fn mk_substs_trait(\n+        self,\n+        self_ty: Ty<'tcx>,\n+        rest: impl IntoIterator<Item = GenericArg<'tcx>>,\n+    ) -> SubstsRef<'tcx> {\n+        self.mk_substs(iter::once(self_ty.into()).chain(rest))\n+    }\n+\n+    pub fn mk_trait_ref(\n+        self,\n+        trait_def_id: DefId,\n+        substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let substs = substs.into_iter().map(Into::into);\n+        let n = self.generics_of(trait_def_id).count();\n+        debug_assert_eq!(\n+            (n, Some(n)),\n+            substs.size_hint(),\n+            \"wrong number of generic parameters for {trait_def_id:?}: {:?} \\nDid you accidentally include the self-type in the params list?\",\n+            substs.collect::<Vec<_>>(),\n+        );\n+        let substs = self.mk_substs(substs);\n+        ty::TraitRef::new(trait_def_id, substs)\n     }\n \n     pub fn mk_bound_variable_kinds<\n-        I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,\n+        I: InternAs<ty::BoundVariableKind, &'tcx List<ty::BoundVariableKind>>,\n     >(\n         self,\n         iter: I,\n@@ -2959,6 +2990,15 @@ impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn ty_error_with_message(self, msg: &str) -> Ty<'tcx> {\n         self.tcx.ty_error_with_message(self.span, msg)\n     }\n+\n+    pub fn mk_trait_ref(\n+        self,\n+        trait_lang_item: LangItem,\n+        substs: impl IntoIterator<Item = impl Into<ty::GenericArg<'tcx>>>,\n+    ) -> ty::TraitRef<'tcx> {\n+        let trait_def_id = self.require_lang_item(trait_lang_item, Some(self.span));\n+        self.tcx.mk_trait_ref(trait_def_id, substs)\n+    }\n }\n \n /// Parameter attributes that can only be determined by examining the body of a function instead"}, {"sha": "586460986dd73cbad18633ee4f318a8be72e3c57", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -551,7 +551,7 @@ impl<'tcx> Instance<'tcx> {\n         let sig =\n             tcx.try_normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), sig).ok()?;\n         assert_eq!(sig.inputs().len(), 1);\n-        let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n+        let substs = tcx.mk_substs_trait(self_ty, [sig.inputs()[0].into()]);\n \n         debug!(?self_ty, ?sig);\n         Some(Instance { def, substs })"}, {"sha": "8bac76d559f24756d6479def82227dfb03d3d47f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -852,6 +852,10 @@ impl<'tcx> TraitPredicate<'tcx> {\n         }\n     }\n \n+    pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        Self { trait_ref: self.trait_ref.with_self_type(tcx, self_ty), ..self }\n+    }\n+\n     pub fn def_id(self) -> DefId {\n         self.trait_ref.def_id\n     }"}, {"sha": "db18558e947a3f7e1b61d32d34d522a1ddc72b60", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -719,10 +719,7 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)\n             }\n             ExistentialPredicate::AutoTrait(did) => {\n-                let trait_ref = self.rebind(ty::TraitRef {\n-                    def_id: did,\n-                    substs: tcx.mk_substs_trait(self_ty, &[]),\n-                });\n+                let trait_ref = self.rebind(tcx.mk_trait_ref(did, [self_ty]));\n                 trait_ref.without_const().to_predicate(tcx)\n             }\n         }\n@@ -814,6 +811,13 @@ impl<'tcx> TraitRef<'tcx> {\n         TraitRef { def_id, substs }\n     }\n \n+    pub fn with_self_type(self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> Self {\n+        tcx.mk_trait_ref(\n+            self.def_id,\n+            [self_ty.into()].into_iter().chain(self.substs.iter().skip(1)),\n+        )\n+    }\n+\n     /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`\n     /// are the parameters defined on trait.\n     pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {\n@@ -909,7 +913,7 @@ impl<'tcx> ExistentialTraitRef<'tcx> {\n         // otherwise the escaping vars would be captured by the binder\n         // debug_assert!(!self_ty.has_escaping_bound_vars());\n \n-        ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }\n+        tcx.mk_trait_ref(self.def_id, [self_ty.into()].into_iter().chain(self.substs.iter()))\n     }\n }\n "}, {"sha": "a62cfecf78b7854710a2700c85b9ccc7b562408e", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let ref_str_ty = tcx.mk_imm_ref(re_erased, tcx.types.str_);\n                     let ref_str = self.temp(ref_str_ty, test.span);\n                     let deref = tcx.require_lang_item(LangItem::Deref, None);\n-                    let method = trait_method(tcx, deref, sym::deref, ty, &[]);\n+                    let method = trait_method(tcx, deref, sym::deref, [ty]);\n                     let eq_block = self.cfg.start_new_block();\n                     self.cfg.push_assign(block, source_info, ref_string, Rvalue::Ref(re_erased, BorrowKind::Shared, place));\n                     self.cfg.terminate(\n@@ -444,8 +444,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             bug!(\"non_scalar_compare called on non-reference type: {}\", ty);\n         };\n \n-        let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, None);\n-        let method = trait_method(self.tcx, eq_def_id, sym::eq, deref_ty, &[deref_ty.into()]);\n+        let eq_def_id = self.tcx.require_lang_item(LangItem::PartialEq, Some(source_info.span));\n+        let method = trait_method(self.tcx, eq_def_id, sym::eq, [deref_ty, deref_ty]);\n \n         let bool_ty = self.tcx.types.bool;\n         let eq_result = self.temp(bool_ty, source_info.span);\n@@ -837,10 +837,9 @@ fn trait_method<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     method_name: Symbol,\n-    self_ty: Ty<'tcx>,\n-    params: &[GenericArg<'tcx>],\n+    substs: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> ConstantKind<'tcx> {\n-    let substs = tcx.mk_substs_trait(self_ty, params);\n+    let substs = tcx.mk_substs(substs.into_iter().map(Into::into));\n \n     // The unhygienic comparison here is acceptable because this is only\n     // used on known traits.\n@@ -850,8 +849,7 @@ fn trait_method<'tcx>(\n         .find(|item| item.kind == ty::AssocKind::Fn)\n         .expect(\"trait method not found\");\n \n-    let method_ty = tcx.bound_type_of(item.def_id);\n-    let method_ty = method_ty.subst(tcx, substs);\n+    let method_ty = tcx.mk_fn_def(item.def_id, substs);\n \n     ConstantKind::zero_sized(method_ty)\n }"}, {"sha": "8797529459534610bc479c57a9f8dc75cb023059", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -3,6 +3,7 @@\n //! This crate also contains the match exhaustiveness and usefulness checking.\n #![allow(rustc::potential_query_instability)]\n #![feature(assert_matches)]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]"}, {"sha": "60e64b45963c3b500e4188786fc44697590b14e3", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -14,11 +14,10 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n-use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n+use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{\n     self, AdtKind, InlineConstSubsts, InlineConstSubstsParts, ScalarInt, Ty, UpvarSubsts, UserType,\n };\n-use rustc_span::def_id::DefId;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n \n@@ -806,23 +805,25 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         expr: &hir::Expr<'_>,\n         span: Span,\n-        overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n+        overloaded_callee: Option<Ty<'tcx>>,\n     ) -> Expr<'tcx> {\n         let temp_lifetime =\n             self.rvalue_scopes.temporary_scope(self.region_scope_tree, expr.hir_id.local_id);\n-        let (def_id, substs, user_ty) = match overloaded_callee {\n-            Some((def_id, substs)) => (def_id, substs, None),\n+        let (ty, user_ty) = match overloaded_callee {\n+            Some(fn_def) => (fn_def, None),\n             None => {\n                 let (kind, def_id) =\n                     self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {\n                         span_bug!(expr.span, \"no type-dependent def for method callee\")\n                     });\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));\n                 debug!(\"method_callee: user_ty={:?}\", user_ty);\n-                (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)\n+                (\n+                    self.tcx().mk_fn_def(def_id, self.typeck_results().node_substs(expr.hir_id)),\n+                    user_ty,\n+                )\n             }\n         };\n-        let ty = self.tcx().mk_fn_def(def_id, substs);\n         Expr { temp_lifetime, ty, span, kind: ExprKind::ZstLiteral { user_ty } }\n     }\n \n@@ -957,7 +958,7 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         expr: &'tcx hir::Expr<'tcx>,\n         place_ty: Ty<'tcx>,\n-        overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,\n+        overloaded_callee: Option<Ty<'tcx>>,\n         args: Box<[ExprId]>,\n         span: Span,\n     ) -> ExprKind<'tcx> {"}, {"sha": "a21f6cd39f01442aa6b45b1d86c528571dd1d113", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -232,8 +232,7 @@ impl<'tcx> ConstToPat<'tcx> {\n             ObligationCause::misc(self.span, self.id),\n             partial_eq_trait_id,\n             0,\n-            ty,\n-            &[],\n+            [ty, ty],\n         );\n         // FIXME: should this call a `predicate_must_hold` variant instead?\n "}, {"sha": "ce87a1916b4658034ba7941ab6149b7713375ad0", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -615,7 +615,7 @@ where\n         let drop_trait = tcx.require_lang_item(LangItem::Drop, None);\n         let drop_fn = tcx.associated_item_def_ids(drop_trait)[0];\n         let ty = self.place_ty(self.place);\n-        let substs = tcx.mk_substs_trait(ty, &[]);\n+        let substs = tcx.mk_substs_trait(ty, []);\n \n         let ref_ty =\n             tcx.mk_ref(tcx.lifetimes.re_erased, ty::TypeAndMut { ty, mutbl: hir::Mutability::Mut });"}, {"sha": "68703eb0a232e781613cea056be79b8a258b5049", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -346,7 +346,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n         // we must subst the self_ty because it's\n         // otherwise going to be TySelf and we can't index\n         // or access fields of a Place of type TySelf.\n-        let substs = tcx.mk_substs_trait(self_ty, &[]);\n+        let substs = tcx.mk_substs_trait(self_ty, []);\n         let sig = tcx.bound_fn_sig(def_id).subst(tcx, substs);\n         let sig = tcx.erase_late_bound_regions(sig);\n         let span = tcx.def_span(def_id);\n@@ -427,7 +427,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n     ) {\n         let tcx = self.tcx;\n \n-        let substs = tcx.mk_substs_trait(ty, &[]);\n+        let substs = tcx.mk_substs_trait(ty, []);\n \n         // `func == Clone::clone(&ty) -> ty`\n         let func_ty = tcx.mk_fn_def(self.def_id, substs);\n@@ -586,7 +586,7 @@ fn build_call_shim<'tcx>(\n \n         // Create substitutions for the `Self` and `Args` generic parameters of the shim body.\n         let arg_tup = tcx.mk_tup(untuple_args.iter());\n-        let sig_substs = tcx.mk_substs_trait(ty, &[ty::subst::GenericArg::from(arg_tup)]);\n+        let sig_substs = tcx.mk_substs_trait(ty, [ty::subst::GenericArg::from(arg_tup)]);\n \n         (Some(sig_substs), Some(untuple_args))\n     } else {"}, {"sha": "559ce227454de49684588149fc39baa0f033b62a", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -187,6 +187,7 @@ use rustc_middle::mir::visit::Visitor as MirVisitor;\n use rustc_middle::mir::{self, Local, Location};\n use rustc_middle::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n+use rustc_middle::ty::query::TyCtxtAt;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{\n     self, GenericParamDefKind, Instance, Ty, TyCtxt, TypeFoldable, TypeVisitable, VtblEntry,\n@@ -688,7 +689,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 let source_ty = operand.ty(self.body, self.tcx);\n                 let source_ty = self.monomorphize(source_ty);\n                 let (source_ty, target_ty) =\n-                    find_vtable_types_for_unsizing(self.tcx, source_ty, target_ty);\n+                    find_vtable_types_for_unsizing(self.tcx.at(span), source_ty, target_ty);\n                 // This could also be a different Unsize instruction, like\n                 // from a fixed sized array to a slice. But we are only\n                 // interested in things that produce a vtable.\n@@ -1053,14 +1054,14 @@ fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) ->\n /// Finally, there is also the case of custom unsizing coercions, e.g., for\n /// smart pointers such as `Rc` and `Arc`.\n fn find_vtable_types_for_unsizing<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> (Ty<'tcx>, Ty<'tcx>) {\n     let ptr_vtable = |inner_source: Ty<'tcx>, inner_target: Ty<'tcx>| {\n         let param_env = ty::ParamEnv::reveal_all();\n         let type_has_metadata = |ty: Ty<'tcx>| -> bool {\n-            if ty.is_sized(tcx, param_env) {\n+            if ty.is_sized(tcx.tcx, param_env) {\n                 return false;\n             }\n             let tail = tcx.struct_tail_erasing_lifetimes(ty, param_env);\n@@ -1104,8 +1105,8 @@ fn find_vtable_types_for_unsizing<'tcx>(\n \n             find_vtable_types_for_unsizing(\n                 tcx,\n-                source_fields[coerce_index].ty(tcx, source_substs),\n-                target_fields[coerce_index].ty(tcx, target_substs),\n+                source_fields[coerce_index].ty(*tcx, source_substs),\n+                target_fields[coerce_index].ty(*tcx, target_substs),\n             )\n         }\n         _ => bug!("}, {"sha": "b616ed35d99d7f11c983d0ecebb02f2223e4b08d", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -13,8 +13,8 @@ extern crate rustc_middle;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::traits;\n use rustc_middle::ty::adjustment::CustomCoerceUnsized;\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::query::{Providers, TyCtxtAt};\n+use rustc_middle::ty::{self, Ty};\n \n mod collector;\n mod errors;\n@@ -23,16 +23,12 @@ mod polymorphize;\n mod util;\n \n fn custom_coerce_unsize_info<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    tcx: TyCtxtAt<'tcx>,\n     source_ty: Ty<'tcx>,\n     target_ty: Ty<'tcx>,\n ) -> CustomCoerceUnsized {\n-    let def_id = tcx.require_lang_item(LangItem::CoerceUnsized, None);\n-\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-        def_id,\n-        substs: tcx.mk_substs_trait(source_ty, &[target_ty.into()]),\n-    });\n+    let trait_ref =\n+        ty::Binder::dummy(tcx.mk_trait_ref(LangItem::CoerceUnsized, [source_ty, target_ty]));\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), trait_ref)) {\n         Ok(traits::ImplSource::UserDefined(traits::ImplSourceUserDefinedData {"}, {"sha": "9b39a9401149a72f8464d962ba06f794a8cbe1c4", "filename": "compiler/rustc_trait_selection/src/autoderef.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fautoderef.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -4,7 +4,7 @@ use crate::traits::{self, TraitEngine, TraitEngineExt};\n use rustc_hir as hir;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::ty::TypeVisitable;\n-use rustc_middle::ty::{self, TraitRef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::Span;\n@@ -122,10 +122,7 @@ impl<'a, 'tcx> Autoderef<'a, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // <ty as Deref>\n-        let trait_ref = TraitRef {\n-            def_id: tcx.lang_items().deref_trait()?,\n-            substs: tcx.mk_substs_trait(ty, &[]),\n-        };\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n \n         let cause = traits::ObligationCause::misc(self.span, self.body_id);\n "}, {"sha": "25a9c29caa7ab8585f3c95abd874ea3d1d12b443", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -7,9 +7,8 @@ use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n use rustc_middle::traits::query::Fallible;\n-use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::ToPredicate;\n use rustc_middle::ty::{self, Ty, TypeFoldable, TypeVisitable};\n+use rustc_middle::ty::{GenericArg, ToPredicate};\n use rustc_span::{Span, DUMMY_SP};\n \n use std::fmt::Debug;\n@@ -44,8 +43,7 @@ pub trait InferCtxtExt<'tcx> {\n     /// The inputs are:\n     ///\n     /// - the def-id of the trait\n-    /// - the self type\n-    /// - the *other* type parameters of the trait, excluding the self-type\n+    /// - the type parameters of the trait, including the self-type\n     /// - the parameter environment\n     ///\n     /// Invokes `evaluate_obligation`, so in the event that evaluating\n@@ -54,8 +52,7 @@ pub trait InferCtxtExt<'tcx> {\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        ty: Ty<'tcx>,\n-        params: SubstsRef<'tcx>,\n+        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult;\n }\n@@ -109,16 +106,14 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         InferOk { value, obligations }\n     }\n \n-    #[instrument(level = \"debug\", skip(self), ret)]\n+    #[instrument(level = \"debug\", skip(self, params), ret)]\n     fn type_implements_trait(\n         &self,\n         trait_def_id: DefId,\n-        ty: Ty<'tcx>,\n-        params: SubstsRef<'tcx>,\n+        params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> traits::EvaluationResult {\n-        let trait_ref =\n-            ty::TraitRef { def_id: trait_def_id, substs: self.tcx.mk_substs_trait(ty, params) };\n+        let trait_ref = self.tcx.mk_trait_ref(trait_def_id, params);\n \n         let obligation = traits::Obligation {\n             cause: traits::ObligationCause::dummy(),"}, {"sha": "975ff31a60788fd8eea66b85c5eff1dfc2b76c6f", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -11,6 +11,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(associated_type_bounds)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]"}, {"sha": "a057e45ad6af45c2bf716ced48a8fb1189c02e2f", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -86,7 +86,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n     ) -> AutoTraitResult<A> {\n         let tcx = self.tcx;\n \n-        let trait_ref = ty::TraitRef { def_id: trait_did, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(trait_did, [ty]);\n \n         let trait_pred = ty::Binder::dummy(trait_ref);\n \n@@ -260,10 +260,8 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n         let mut already_visited = FxHashSet::default();\n         let mut predicates = VecDeque::new();\n         predicates.push_back(ty::Binder::dummy(ty::TraitPredicate {\n-            trait_ref: ty::TraitRef {\n-                def_id: trait_did,\n-                substs: infcx.tcx.mk_substs_trait(ty, &[]),\n-            },\n+            trait_ref: infcx.tcx.mk_trait_ref(trait_did, [ty]),\n+\n             constness: ty::BoundConstness::NotConst,\n             // Auto traits are positive\n             polarity: ty::ImplPolarity::Positive,"}, {"sha": "3a05708aebc6c53c33416ea4a2e882fb503521c2", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         def_id: DefId,\n     ) {\n         let tcx = self.infcx.tcx;\n-        let trait_ref = ty::TraitRef { def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(def_id, [ty]);\n         self.register_obligation(Obligation {\n             cause,\n             recursion_depth: 0,"}, {"sha": "946e6e77a3da0061cec3815a799a95f5cd5395bd", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -347,16 +347,12 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n                     span: DUMMY_SP,\n                     kind: TypeVariableOriginKind::MiscVariable,\n                 });\n-                let substs = self.tcx.mk_substs_trait(ty.skip_binder(), &[var.into()]);\n+                let trait_ref = self.tcx.mk_trait_ref(trait_def_id, [ty.skip_binder(), var]);\n                 let obligation = Obligation::new(\n                     self.tcx,\n                     ObligationCause::dummy(),\n                     param_env,\n-                    ty.rebind(ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef::new(trait_def_id, substs),\n-                        constness,\n-                        polarity,\n-                    }),\n+                    ty.rebind(ty::TraitPredicate { trait_ref, constness, polarity }),\n                 );\n                 let mut fulfill_cx = <dyn TraitEngine<'tcx>>::new_in_snapshot(self.tcx);\n                 fulfill_cx.register_predicate_obligation(self, obligation);\n@@ -1001,12 +997,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         if trait_predicate.skip_binder().self_ty().is_never()\n                             && self.fallback_has_occurred\n                         {\n-                            let predicate = trait_predicate.map_bound(|mut trait_pred| {\n-                                trait_pred.trait_ref.substs = self.tcx.mk_substs_trait(\n-                                    self.tcx.mk_unit(),\n-                                    &trait_pred.trait_ref.substs[1..],\n-                                );\n-                                trait_pred\n+                            let predicate = trait_predicate.map_bound(|trait_pred| {\n+                                trait_pred.with_self_type(self.tcx, self.tcx.mk_unit())\n                             });\n                             let unit_obligation = obligation.with(tcx, predicate);\n                             if self.predicate_may_hold(&unit_obligation) {\n@@ -2028,13 +2020,8 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx> {\n-        let trait_pred = trait_ref_and_ty.map_bound_ref(|(tr, new_self_ty)| ty::TraitPredicate {\n-            trait_ref: ty::TraitRef {\n-                substs: self.tcx.mk_substs_trait(*new_self_ty, &tr.trait_ref.substs[1..]),\n-                ..tr.trait_ref\n-            },\n-            ..*tr\n-        });\n+        let trait_pred = trait_ref_and_ty\n+            .map_bound(|(tr, new_self_ty)| tr.with_self_type(self.tcx, new_self_ty));\n \n         Obligation::new(self.tcx, ObligationCause::dummy(), param_env, trait_pred)\n     }"}, {"sha": "8086cac0d551a42419b4f5a176d34b8804938551", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -2971,8 +2971,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 let self_ty = self.resolve_vars_if_possible(trait_pred.self_ty());\n                 let impls_future = self.type_implements_trait(\n                     future_trait,\n-                    self.tcx.erase_late_bound_regions(self_ty),\n-                    ty::List::empty(),\n+                    [self.tcx.erase_late_bound_regions(self_ty)],\n                     obligation.param_env,\n                 );\n                 if !impls_future.must_apply_modulo_regions() {\n@@ -2985,7 +2984,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.tcx.mk_projection(\n                         item_def_id,\n                         // Future::Output has no substs\n-                        self.tcx.mk_substs_trait(trait_pred.self_ty(), &[]),\n+                        self.tcx.mk_substs_trait(trait_pred.self_ty(), []),\n                     )\n                 });\n                 let projection_ty = normalize_to(\n@@ -3070,15 +3069,15 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     let field_ty = field.ty(self.tcx, substs);\n                     let trait_substs = match diagnostic_name {\n                         sym::PartialEq | sym::PartialOrd => {\n-                            self.tcx.mk_substs_trait(field_ty, &[field_ty.into()])\n+                            Some(field_ty)\n                         }\n-                        _ => self.tcx.mk_substs_trait(field_ty, &[]),\n+                        _ => None,\n                     };\n                     let trait_pred = trait_pred.map_bound_ref(|tr| ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef {\n-                            substs: trait_substs,\n-                            ..trait_pred.skip_binder().trait_ref\n-                        },\n+                        trait_ref: self.tcx.mk_trait_ref(\n+                            trait_pred.def_id(),\n+                            [field_ty].into_iter().chain(trait_substs),\n+                        ),\n                         ..*tr\n                     });\n                     let field_obl = Obligation::new("}, {"sha": "ff18aa1f9e909d1fafac9199aea8c4a227aa8127", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -136,41 +136,49 @@ pub fn predicates_for_generics<'tcx>(\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n-#[instrument(level = \"debug\", skip(infcx, param_env, span), ret)]\n pub fn type_known_to_meet_bound_modulo_regions<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     def_id: DefId,\n     span: Span,\n ) -> bool {\n-    let trait_ref =\n-        ty::Binder::dummy(ty::TraitRef { def_id, substs: infcx.tcx.mk_substs_trait(ty, &[]) });\n+    let trait_ref = ty::Binder::dummy(infcx.tcx.mk_trait_ref(def_id, [ty]));\n+    pred_known_to_hold_modulo_regions(infcx, param_env, trait_ref.without_const(), span)\n+}\n+\n+#[instrument(level = \"debug\", skip(infcx, param_env, span, pred), ret)]\n+fn pred_known_to_hold_modulo_regions<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    pred: impl ToPredicate<'tcx, ty::Predicate<'tcx>> + TypeVisitable<'tcx>,\n+    span: Span,\n+) -> bool {\n+    let has_non_region_infer = pred.has_non_region_infer();\n     let obligation = Obligation {\n         param_env,\n+        // We can use a dummy node-id here because we won't pay any mind\n+        // to region obligations that arise (there shouldn't really be any\n+        // anyhow).\n         cause: ObligationCause::misc(span, hir::CRATE_HIR_ID),\n         recursion_depth: 0,\n-        predicate: trait_ref.without_const().to_predicate(infcx.tcx),\n+        predicate: pred.to_predicate(infcx.tcx),\n     };\n \n     let result = infcx.predicate_must_hold_modulo_regions(&obligation);\n     debug!(?result);\n \n-    if result && ty.has_non_region_infer() {\n+    if result && has_non_region_infer {\n         // Because of inference \"guessing\", selection can sometimes claim\n         // to succeed while the success requires a guess. To ensure\n         // this function's result remains infallible, we must confirm\n         // that guess. While imperfect, I believe this is sound.\n \n-        // We can use a dummy node-id here because we won't pay any mind\n-        // to region obligations that arise (there shouldn't really be any\n-        // anyhow).\n-        let cause = ObligationCause::misc(span, hir::CRATE_HIR_ID);\n-\n+        // FIXME(@lcnr): this function doesn't seem right.\n         // The handling of regions in this area of the code is terrible,\n         // see issue #29149. We should be able to improve on this with\n         // NLL.\n-        let errors = fully_solve_bound(infcx, cause, param_env, ty, def_id);\n+        let errors = fully_solve_obligation(infcx, obligation);\n \n         // Note: we only assume something is `Copy` if we can\n         // *definitively* show that it implements `Copy`. Otherwise,\n@@ -895,10 +903,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot<'tcx>(\n     // this has been typecked-before, so diagnostics is not really needed.\n     let unsize_trait_did = tcx.require_lang_item(LangItem::Unsize, None);\n \n-    let trait_ref = ty::TraitRef {\n-        def_id: unsize_trait_did,\n-        substs: tcx.mk_substs_trait(source, &[target.into()]),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(unsize_trait_did, [source, target]);\n \n     match tcx.codegen_select_candidate((ty::ParamEnv::reveal_all(), ty::Binder::dummy(trait_ref))) {\n         Ok(ImplSource::TraitUpcasting(implsrc_traitcasting)) => {"}, {"sha": "90f48658113af45fd96ecb4a875e206d926caa46", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -685,10 +685,9 @@ fn receiver_is_dispatchable<'tcx>(\n         let param_env = tcx.param_env(method.def_id);\n \n         // Self: Unsize<U>\n-        let unsize_predicate = ty::Binder::dummy(ty::TraitRef {\n-            def_id: unsize_did,\n-            substs: tcx.mk_substs_trait(tcx.types.self_param, &[unsized_self_ty.into()]),\n-        })\n+        let unsize_predicate = ty::Binder::dummy(\n+            tcx.mk_trait_ref(unsize_did, [tcx.types.self_param, unsized_self_ty]),\n+        )\n         .without_const()\n         .to_predicate(tcx);\n \n@@ -720,10 +719,9 @@ fn receiver_is_dispatchable<'tcx>(\n \n     // Receiver: DispatchFromDyn<Receiver[Self => U]>\n     let obligation = {\n-        let predicate = ty::Binder::dummy(ty::TraitRef {\n-            def_id: dispatch_from_dyn_did,\n-            substs: tcx.mk_substs_trait(receiver_ty, &[unsized_receiver_ty.into()]),\n-        })\n+        let predicate = ty::Binder::dummy(\n+            tcx.mk_trait_ref(dispatch_from_dyn_did, [receiver_ty, unsized_receiver_ty]),\n+        )\n         .without_const();\n \n         Obligation::new(tcx, ObligationCause::dummy(), param_env, predicate)"}, {"sha": "9f19b0092c00f53b796e08736abbad314e902f8d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1710,9 +1710,9 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                         if selcx.infcx().predicate_must_hold_modulo_regions(\n                             &obligation.with(\n                                 selcx.tcx(),\n-                                ty::Binder::dummy(ty::TraitRef::new(\n-                                    selcx.tcx().require_lang_item(LangItem::Sized, None),\n-                                    selcx.tcx().mk_substs_trait(self_ty, &[]),\n+                                ty::Binder::dummy(selcx.tcx().at(obligation.cause.span).mk_trait_ref(\n+                                    LangItem::Sized,\n+                                    [self_ty],\n                                 ))\n                                 .without_const(),\n                             ),\n@@ -1966,16 +1966,15 @@ fn confirm_pointee_candidate<'cx, 'tcx>(\n         )\n     });\n     if check_is_sized {\n-        let sized_predicate = ty::Binder::dummy(ty::TraitRef::new(\n-            tcx.require_lang_item(LangItem::Sized, None),\n-            tcx.mk_substs_trait(self_ty, &[]),\n-        ))\n+        let sized_predicate = ty::Binder::dummy(\n+            tcx.at(obligation.cause.span).mk_trait_ref(LangItem::Sized, [self_ty]),\n+        )\n         .without_const();\n         obligations.push(obligation.with(tcx, sized_predicate));\n     }\n \n     let substs = tcx.mk_substs([self_ty.into()].iter());\n-    let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, None);\n+    let metadata_def_id = tcx.require_lang_item(LangItem::Metadata, Some(obligation.cause.span));\n \n     let predicate = ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy { substs, item_def_id: metadata_def_id },"}, {"sha": "f844da500328efafa678598aea9f69019317c55b", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -18,11 +18,6 @@ pub(crate) fn update<'tcx, T>(\n     {\n         let new_self_ty = infcx.tcx.types.unit;\n \n-        let trait_ref = ty::TraitRef {\n-            substs: infcx.tcx.mk_substs_trait(new_self_ty, &tpred.trait_ref.substs[1..]),\n-            ..tpred.trait_ref\n-        };\n-\n         // Then construct a new obligation with Self = () added\n         // to the ParamEnv, and see if it holds.\n         let o = obligation.with(infcx.tcx,\n@@ -31,11 +26,7 @@ pub(crate) fn update<'tcx, T>(\n                 .kind()\n                 .rebind(\n                     // (*) binder moved here\n-                    ty::PredicateKind::Trait(ty::TraitPredicate {\n-                        trait_ref,\n-                        constness: tpred.constness,\n-                        polarity: tpred.polarity,\n-                    })\n+                    ty::PredicateKind::Trait(tpred.with_self_type(infcx.tcx, new_self_ty))\n                 ),\n         );\n         // Don't report overflow errors. Otherwise equivalent to may_hold."}, {"sha": "99d4e47ffc16f93339eb373c049c05db536e3a77", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -714,10 +714,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // <ty as Deref>\n-        let trait_ref = ty::TraitRef {\n-            def_id: tcx.lang_items().deref_trait()?,\n-            substs: tcx.mk_substs_trait(ty, &[]),\n-        };\n+        let trait_ref = tcx.mk_trait_ref(tcx.lang_items().deref_trait()?, [ty]);\n \n         let obligation = traits::Obligation::new(\n             tcx,"}, {"sha": "2ec5d925b6900af0959b518f8379ffdd30659224", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -632,10 +632,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             output_ty,\n             &mut nested,\n         );\n-        let tr = ty::Binder::dummy(ty::TraitRef::new(\n-            self.tcx().require_lang_item(LangItem::Sized, None),\n-            self.tcx().mk_substs_trait(output_ty, &[]),\n-        ));\n+        let tr =\n+            ty::Binder::dummy(self.tcx().at(cause.span).mk_trait_ref(LangItem::Sized, [output_ty]));\n         nested.push(Obligation::new(\n             self.infcx.tcx,\n             cause,\n@@ -996,10 +994,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 );\n \n                 // We can only make objects from sized types.\n-                let tr = ty::Binder::dummy(ty::TraitRef::new(\n-                    tcx.require_lang_item(LangItem::Sized, None),\n-                    tcx.mk_substs_trait(source, &[]),\n-                ));\n+                let tr =\n+                    ty::Binder::dummy(tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [source]));\n                 nested.push(predicate_to_obligation(tr.without_const().to_predicate(tcx)));\n \n                 // If the type is `Foo + 'a`, ensure that the type\n@@ -1105,8 +1101,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     obligation.cause.clone(),\n                     obligation.predicate.def_id(),\n                     obligation.recursion_depth + 1,\n-                    source_tail,\n-                    &[target_tail.into()],\n+                    [source_tail, target_tail],\n                 ));\n             }\n \n@@ -1136,8 +1131,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         obligation.cause.clone(),\n                         obligation.predicate.def_id(),\n                         obligation.recursion_depth + 1,\n-                        a_last,\n-                        &[b_last.into()],\n+                        [a_last, b_last],\n                     )\n                 }));\n             }\n@@ -1253,10 +1247,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         cause.clone(),\n                         obligation.recursion_depth + 1,\n                         self_ty.rebind(ty::TraitPredicate {\n-                            trait_ref: ty::TraitRef {\n-                                def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                                substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                            },\n+                            trait_ref: self\n+                                .tcx()\n+                                .at(cause.span)\n+                                .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n                             constness: ty::BoundConstness::ConstIfConst,\n                             polarity: ty::ImplPolarity::Positive,\n                         }),\n@@ -1277,10 +1271,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // or it's an ADT (and we need to check for a custom impl during selection)\n                 _ => {\n                     let predicate = self_ty.rebind(ty::TraitPredicate {\n-                        trait_ref: ty::TraitRef {\n-                            def_id: self.tcx().require_lang_item(LangItem::Destruct, None),\n-                            substs: self.tcx().mk_substs_trait(nested_ty, &[]),\n-                        },\n+                        trait_ref: self\n+                            .tcx()\n+                            .at(cause.span)\n+                            .mk_trait_ref(LangItem::Destruct, [nested_ty]),\n                         constness: ty::BoundConstness::ConstIfConst,\n                         polarity: ty::ImplPolarity::Positive,\n                     });"}, {"sha": "e54e290fb4b11dafe57a73515e02ff4f36599e2a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -2100,8 +2100,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     cause.clone(),\n                     trait_def_id,\n                     recursion_depth,\n-                    normalized_ty,\n-                    &[],\n+                    [normalized_ty],\n                 );\n                 obligations.push(placeholder_obligation);\n                 obligations"}, {"sha": "895b84fd7e9dfe3095d28f9356531ec0c5f0339d", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -238,11 +238,9 @@ pub fn predicate_for_trait_def<'tcx>(\n     cause: ObligationCause<'tcx>,\n     trait_def_id: DefId,\n     recursion_depth: usize,\n-    self_ty: Ty<'tcx>,\n-    params: &[GenericArg<'tcx>],\n+    params: impl IntoIterator<Item = impl Into<GenericArg<'tcx>>>,\n ) -> PredicateObligation<'tcx> {\n-    let trait_ref =\n-        ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(self_ty, params) };\n+    let trait_ref = tcx.mk_trait_ref(trait_def_id, params);\n     predicate_for_trait_ref(tcx, cause, param_env, trait_ref, recursion_depth)\n }\n \n@@ -305,10 +303,7 @@ pub fn closure_trait_ref_and_return_type<'tcx>(\n         TupleArgumentsFlag::Yes => tcx.intern_tup(sig.skip_binder().inputs()),\n     };\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = ty::TraitRef {\n-        def_id: fn_trait_def_id,\n-        substs: tcx.mk_substs_trait(self_ty, &[arguments_tuple.into()]),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, arguments_tuple]);\n     sig.map_bound(|sig| (trait_ref, sig.output()))\n }\n \n@@ -319,10 +314,7 @@ pub fn generator_trait_ref_and_outputs<'tcx>(\n     sig: ty::PolyGenSig<'tcx>,\n ) -> ty::Binder<'tcx, (ty::TraitRef<'tcx>, Ty<'tcx>, Ty<'tcx>)> {\n     debug_assert!(!self_ty.has_escaping_bound_vars());\n-    let trait_ref = ty::TraitRef {\n-        def_id: fn_trait_def_id,\n-        substs: tcx.mk_substs_trait(self_ty, &[sig.skip_binder().resume_ty.into()]),\n-    };\n+    let trait_ref = tcx.mk_trait_ref(fn_trait_def_id, [self_ty, sig.skip_binder().resume_ty]);\n     sig.map_bound(|sig| (trait_ref, sig.yield_ty, sig.return_ty))\n }\n "}, {"sha": "53783e1bc4b2cf2adfcadaaf77f208026d8afe8b", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -421,10 +421,7 @@ impl<'tcx> WfPredicates<'tcx> {\n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_bound_vars() {\n             let cause = self.cause(cause);\n-            let trait_ref = ty::TraitRef {\n-                def_id: self.tcx.require_lang_item(LangItem::Sized, None),\n-                substs: self.tcx.mk_substs_trait(subty, &[]),\n-            };\n+            let trait_ref = self.tcx.at(cause.span).mk_trait_ref(LangItem::Sized, [subty]);\n             self.out.push(traits::Obligation::with_depth(\n                 self.tcx,\n                 cause,"}, {"sha": "06a42a95d6061d0fe501cf85a4f45e274ecd5d27", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -689,7 +689,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Binders<chalk_ir::QuantifiedWhereClauses<Ru\n                         trait_id: chalk_ir::TraitId(def_id),\n                         substitution: interner\n                             .tcx\n-                            .mk_substs_trait(self_ty, &[])\n+                            .mk_substs_trait(self_ty, [])\n                             .lower_into(interner),\n                     }),\n                 ),"}, {"sha": "5fc9bcac1b19e35bcb55098d7eb06c273dd44dc4", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -49,12 +49,9 @@ fn sized_constraint_for_ty<'tcx>(\n             // it on the impl.\n \n             let Some(sized_trait) = tcx.lang_items().sized_trait() else { return vec![ty] };\n-            let sized_predicate = ty::Binder::dummy(ty::TraitRef {\n-                def_id: sized_trait,\n-                substs: tcx.mk_substs_trait(ty, &[]),\n-            })\n-            .without_const()\n-            .to_predicate(tcx);\n+            let sized_predicate = ty::Binder::dummy(tcx.mk_trait_ref(sized_trait, [ty]))\n+                .without_const()\n+                .to_predicate(tcx);\n             let predicates = tcx.predicates_of(adtdef.did()).predicates;\n             if predicates.iter().any(|(p, _)| *p == sized_predicate) { vec![] } else { vec![ty] }\n         }"}, {"sha": "581993ba7d863eb2f22166a042764fae43e7d360", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -60,10 +60,10 @@ pub trait InternAs<T: ?Sized, R> {\n     type Output;\n     fn intern_with<F>(self, f: F) -> Self::Output\n     where\n-        F: FnOnce(&T) -> R;\n+        F: FnOnce(&[T]) -> R;\n }\n \n-impl<I, T, R, E> InternAs<[T], R> for I\n+impl<I, T, R, E> InternAs<T, R> for I\n where\n     E: InternIteratorElement<T, R>,\n     I: Iterator<Item = E>,"}, {"sha": "05607d05ecf234582aa4b7db47b312ea880d455e", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -44,7 +44,7 @@ where\n         discard_positive_impl: bool,\n     ) -> Option<Item> {\n         let tcx = self.cx.tcx;\n-        let trait_ref = ty::TraitRef { def_id: trait_def_id, substs: tcx.mk_substs_trait(ty, &[]) };\n+        let trait_ref = tcx.mk_trait_ref(trait_def_id, [ty]);\n         if !self.cx.generated_synthetics.insert((ty, trait_def_id)) {\n             debug!(\"get_auto_trait_impl_for({:?}): already generated, aborting\", trait_ref);\n             return None;"}, {"sha": "02599d7c05b593b0ad8dd8676cf9f63fad4e81d9", "filename": "src/test/ui/pattern/usefulness/const-partial_eq-fallback-ice.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -0,0 +1,18 @@\n+#![allow(warnings)]\n+\n+struct MyType;\n+\n+impl PartialEq<usize> for MyType {\n+    fn eq(&self, y: &usize) -> bool {\n+        true\n+    }\n+}\n+\n+const CONSTANT: &&MyType = &&MyType;\n+\n+fn main() {\n+    if let CONSTANT = &&MyType {\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        println!(\"did match!\");\n+    }\n+}"}, {"sha": "358421cd6d24c6bdb5f3ffd68efef89218d5fefb", "filename": "src/test/ui/pattern/usefulness/const-partial_eq-fallback-ice.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -0,0 +1,8 @@\n+error: to use a constant of type `MyType` in a pattern, `MyType` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/const-partial_eq-fallback-ice.rs:14:12\n+   |\n+LL |     if let CONSTANT = &&MyType {\n+   |            ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "82d368bb8bc2c1e127d74f8c07530e152c2ba84c", "filename": "src/tools/clippy/clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -59,7 +59,7 @@ fn is_impl_not_trait_with_bool_out(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n             )\n         })\n         .map_or(false, |assoc_item| {\n-            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let proj = cx.tcx.mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(ty, []));\n             let nty = cx.tcx.normalize_erasing_regions(cx.param_env, proj);\n \n             nty.is_bool()"}, {"sha": "c4e7f8bfe1e20409ec0ca227bf50870563aba0f7", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -842,14 +842,10 @@ fn walk_parents<'tcx>(\n                         } else if let Some(trait_id) = cx.tcx.trait_of_item(id)\n                             && let arg_ty = cx.tcx.erase_regions(cx.typeck_results().expr_ty_adjusted(e))\n                             && let ty::Ref(_, sub_ty, _) = *arg_ty.kind()\n-                            && let subs = match cx\n+                            && let subs = cx\n                                 .typeck_results()\n-                                .node_substs_opt(parent.hir_id)\n-                                .and_then(|subs| subs.get(1..))\n-                            {\n-                                Some(subs) => cx.tcx.mk_substs(subs.iter().copied()),\n-                                None => cx.tcx.mk_substs(std::iter::empty::<ty::subst::GenericArg<'_>>()),\n-                            } && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n+                                .node_substs_opt(parent.hir_id).map(|subs| &subs[1..]).unwrap_or_default()\n+                            && let impl_ty = if cx.tcx.fn_sig(id).skip_binder().inputs()[0].is_ref() {\n                                 // Trait methods taking `&self`\n                                 sub_ty\n                             } else {\n@@ -858,7 +854,7 @@ fn walk_parents<'tcx>(\n                             } && impl_ty.is_ref()\n                             && let infcx = cx.tcx.infer_ctxt().build()\n                             && infcx\n-                                .type_implements_trait(trait_id, impl_ty, subs, cx.param_env)\n+                                .type_implements_trait(trait_id, [impl_ty.into()].into_iter().chain(subs.iter().copied()), cx.param_env)\n                                 .must_apply_modulo_regions()\n                         {\n                             return Some(Position::MethodReceiverRefImpl)\n@@ -1263,7 +1259,7 @@ fn replace_types<'tcx>(\n                     let item_def_id = projection_predicate.projection_ty.item_def_id;\n                     let assoc_item = cx.tcx.associated_item(item_def_id);\n                     let projection = cx.tcx\n-                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, &[]));\n+                        .mk_projection(assoc_item.def_id, cx.tcx.mk_substs_trait(new_ty, []));\n \n                     if let Ok(projected_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, projection)\n                         && substs[term_param_ty.index as usize] != ty::GenericArg::from(projected_ty)"}, {"sha": "1d9af7cdbd358be31b8760ec4e471133ce4522eb", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -466,12 +466,12 @@ fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_r\n         if let Some(def_id) = trait_ref.trait_def_id();\n         if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n         let param_env = param_env_for_derived_eq(cx.tcx, adt.did(), eq_trait_def_id);\n-        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]);\n+        if !implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, []);\n         // If all of our fields implement `Eq`, we can implement `Eq` too\n         if adt\n             .all_fields()\n             .map(|f| f.ty(cx.tcx, substs))\n-            .all(|ty| implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, &[]));\n+            .all(|ty| implements_trait_with_env(cx.tcx, param_env, ty, eq_trait_def_id, []));\n         then {\n             span_lint_and_sugg(\n                 cx,"}, {"sha": "f34cbee03558b74d0c4babaa3a7dab979d2b6ba9", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -119,11 +119,13 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             let callee_ty_unadjusted = cx.typeck_results().expr_ty(callee).peel_refs();\n             if !is_type_diagnostic_item(cx, callee_ty_unadjusted, sym::Arc);\n             if !is_type_diagnostic_item(cx, callee_ty_unadjusted, sym::Rc);\n+            if let ty::Closure(_, substs) = *closure_ty.kind();\n             then {\n                 span_lint_and_then(cx, REDUNDANT_CLOSURE, expr.span, \"redundant closure\", |diag| {\n                     if let Some(mut snippet) = snippet_opt(cx, callee.span) {\n                         if let Some(fn_mut_id) = cx.tcx.lang_items().fn_mut_trait()\n-                            && implements_trait(cx, callee_ty.peel_refs(), fn_mut_id, &[])\n+                            && let args = cx.tcx.erase_late_bound_regions(substs.as_closure().sig()).inputs()\n+                            && implements_trait(cx, callee_ty.peel_refs(), fn_mut_id, &args.iter().copied().map(Into::into).collect::<Vec<_>>())\n                             && path_to_local(callee).map_or(false, |l| local_used_after_expr(cx, l, expr))\n                         {\n                                 // Mutable closure is used after current expr; we cannot consume it."}, {"sha": "375ebc903b4001f15d104fff2d321ad94bcaffd6", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -474,7 +474,7 @@ fn is_cow_into_owned(cx: &LateContext<'_>, method_name: Symbol, method_def_id: D\n }\n \n /// Returns true if the named method is `ToString::to_string` and it's called on a type that\n-/// is string-like i.e. implements `AsRef<str>` or `Deref<str>`.\n+/// is string-like i.e. implements `AsRef<str>` or `Deref<Target = str>`.\n fn is_to_string_on_string_like<'a>(\n     cx: &LateContext<'_>,\n     call_expr: &'a Expr<'a>,\n@@ -490,7 +490,7 @@ fn is_to_string_on_string_like<'a>(\n         && let GenericArgKind::Type(ty) = generic_arg.unpack()\n         && let Some(deref_trait_id) = cx.tcx.get_diagnostic_item(sym::Deref)\n         && let Some(as_ref_trait_id) = cx.tcx.get_diagnostic_item(sym::AsRef)\n-        && (implements_trait(cx, ty, deref_trait_id, &[cx.tcx.types.str_.into()]) ||\n+        && (get_associated_type(cx, ty, deref_trait_id, \"Target\") == Some(cx.tcx.types.str_) ||\n             implements_trait(cx, ty, as_ref_trait_id, &[cx.tcx.types.str_.into()])) {\n             true\n         } else {"}, {"sha": "eeff15bbfb422584a177b198d1c80b649f08a768", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item, is_type_lang_item};\n+use clippy_utils::ty::{implements_trait, implements_trait_with_env, is_copy, is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n@@ -185,7 +185,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                 if !ty.is_mutable_ptr();\n                 if !is_copy(cx, ty);\n                 if ty.is_sized(cx.tcx, cx.param_env);\n-                if !allowed_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !allowed_traits.iter().any(|&t| implements_trait_with_env(cx.tcx, cx.param_env, ty, t, [None]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n "}, {"sha": "a022fc156fca214cd70c60a41124684a21125bca", "filename": "src/tools/clippy/clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -65,7 +65,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n \n                 let implements_partial_ord = {\n                     if let Some(id) = cx.tcx.lang_items().partial_ord_trait() {\n-                        implements_trait(cx, ty, id, &[])\n+                        implements_trait(cx, ty, id, &[ty.into()])\n                     } else {\n                         return;\n                     }"}, {"sha": "5420a0e782ea87877cd39b5c4d4f2681df8a6816", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -692,7 +692,7 @@ fn matches_preds<'tcx>(\n     let infcx = cx.tcx.infer_ctxt().build();\n     preds.iter().all(|&p| match cx.tcx.erase_late_bound_regions(p) {\n         ExistentialPredicate::Trait(p) => infcx\n-            .type_implements_trait(p.def_id, ty, p.substs, cx.param_env)\n+            .type_implements_trait(p.def_id, [ty.into()].into_iter().chain(p.substs.iter()), cx.param_env)\n             .must_apply_modulo_regions(),\n         ExistentialPredicate::Projection(p) => infcx.predicate_must_hold_modulo_regions(&Obligation::new(\n             cx.tcx,\n@@ -704,7 +704,7 @@ fn matches_preds<'tcx>(\n             )),\n         )),\n         ExistentialPredicate::AutoTrait(p) => infcx\n-            .type_implements_trait(p, ty, List::empty(), cx.param_env)\n+            .type_implements_trait(p, [ty], cx.param_env)\n             .must_apply_modulo_regions(),\n     })\n }"}, {"sha": "5ec6f29fe9163514df4ee91642384e7da446668d", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a53cdb4695b71cb9ee39959df88542056479cd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=28a53cdb4695b71cb9ee39959df88542056479cd", "patch": "@@ -9,7 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, FnDecl, LangItem, TyKind, Unsafety};\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{TyCtxtInferExt, type_variable::{TypeVariableOrigin, TypeVariableOriginKind}};\n use rustc_lint::LateContext;\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{\n@@ -18,7 +18,7 @@ use rustc_middle::ty::{\n };\n use rustc_middle::ty::{GenericArg, GenericArgKind};\n use rustc_span::symbol::Ident;\n-use rustc_span::{sym, Span, Symbol};\n+use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Size, VariantIdx};\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n@@ -79,7 +79,7 @@ pub fn get_associated_type<'tcx>(\n         .associated_items(trait_id)\n         .find_by_name_and_kind(cx.tcx, Ident::from_str(name), ty::AssocKind::Type, trait_id)\n         .and_then(|assoc| {\n-            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, &[]));\n+            let proj = cx.tcx.mk_projection(assoc.def_id, cx.tcx.mk_substs_trait(ty, []));\n             cx.tcx.try_normalize_erasing_regions(cx.param_env, proj).ok()\n         })\n }\n@@ -153,7 +153,7 @@ pub fn implements_trait<'tcx>(\n     trait_id: DefId,\n     ty_params: &[GenericArg<'tcx>],\n ) -> bool {\n-    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params)\n+    implements_trait_with_env(cx.tcx, cx.param_env, ty, trait_id, ty_params.iter().map(|&arg| Some(arg)))\n }\n \n /// Same as `implements_trait` but allows using a `ParamEnv` different from the lint context.\n@@ -162,7 +162,7 @@ pub fn implements_trait_with_env<'tcx>(\n     param_env: ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     trait_id: DefId,\n-    ty_params: &[GenericArg<'tcx>],\n+    ty_params: impl IntoIterator<Item = Option<GenericArg<'tcx>>>,\n ) -> bool {\n     // Clippy shouldn't have infer types\n     assert!(!ty.needs_infer());\n@@ -171,10 +171,14 @@ pub fn implements_trait_with_env<'tcx>(\n     if ty.has_escaping_bound_vars() {\n         return false;\n     }\n-    let ty_params = tcx.mk_substs(ty_params.iter());\n     let infcx = tcx.infer_ctxt().build();\n+    let orig = TypeVariableOrigin {\n+        kind: TypeVariableOriginKind::MiscVariable,\n+        span: DUMMY_SP,\n+    };\n+    let ty_params = tcx.mk_substs(ty_params.into_iter().map(|arg| arg.unwrap_or_else(|| infcx.next_ty_var(orig).into())));\n     infcx\n-        .type_implements_trait(trait_id, ty, ty_params, param_env)\n+        .type_implements_trait(trait_id, [ty.into()].into_iter().chain(ty_params), param_env)\n         .must_apply_modulo_regions()\n }\n "}]}