{"sha": "d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "node_id": "C_kwDOAAsO6NoAKGQzOWQ1MjBhMjEwZTVkOTJjN2M1ZDdhZDViNmU5ZWNkMGEwYTRmMDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T16:21:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-15T16:21:21Z"}, "message": "Auto merge of #12544 - Veykril:proc-error, r=Veykril\n\nShow proc-macro loading errors in unresolved-proc-macro diagnostics\n\nThis should help out people to potentially figure out the problem without having to check the logs", "tree": {"sha": "97bb9fd1b4c0383a7ef94feb4009f0ba90dcbde2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97bb9fd1b4c0383a7ef94feb4009f0ba90dcbde2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "html_url": "https://github.com/rust-lang/rust/commit/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15c63c4119c090a310020f4b7977f3fccaa02ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15c63c4119c090a310020f4b7977f3fccaa02ba5", "html_url": "https://github.com/rust-lang/rust/commit/15c63c4119c090a310020f4b7977f3fccaa02ba5"}, {"sha": "1dd2c502989f90a3494aa9a302869bacca7f9463", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd2c502989f90a3494aa9a302869bacca7f9463", "html_url": "https://github.com/rust-lang/rust/commit/1dd2c502989f90a3494aa9a302869bacca7f9463"}], "stats": {"total": 389, "additions": 245, "deletions": 144}, "files": [{"sha": "8e6e6a11abda83b0cf2c3a92fc7207ede0704b0c", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -159,7 +159,7 @@ impl ChangeFixture {\n                     meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n-                    Default::default(),\n+                    Ok(Vec::new()),\n                     false,\n                     origin,\n                 );\n@@ -194,7 +194,7 @@ impl ChangeFixture {\n                 default_cfg.clone(),\n                 default_cfg,\n                 Env::default(),\n-                Default::default(),\n+                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None },\n             );\n@@ -231,7 +231,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                Vec::new(),\n+                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n             );\n@@ -268,7 +268,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                proc_macro,\n+                Ok(proc_macro),\n                 true,\n                 CrateOrigin::CratesIo { repo: None },\n             );"}, {"sha": "4d0a3a301230a4a8bc2d7cd8bd827debed9d372b", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -231,6 +231,8 @@ pub enum ProcMacroExpansionError {\n     System(String),\n }\n \n+pub type ProcMacroLoadResult = Result<Vec<ProcMacro>, String>;\n+\n #[derive(Debug, Clone)]\n pub struct ProcMacro {\n     pub name: SmolStr,\n@@ -254,7 +256,7 @@ pub struct CrateData {\n     pub potential_cfg_options: CfgOptions,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n-    pub proc_macro: Vec<ProcMacro>,\n+    pub proc_macro: ProcMacroLoadResult,\n     pub origin: CrateOrigin,\n     pub is_proc_macro: bool,\n }\n@@ -300,19 +302,19 @@ impl Dependency {\n impl CrateGraph {\n     pub fn add_crate_root(\n         &mut self,\n-        file_id: FileId,\n+        root_file_id: FileId,\n         edition: Edition,\n         display_name: Option<CrateDisplayName>,\n         version: Option<String>,\n         cfg_options: CfgOptions,\n         potential_cfg_options: CfgOptions,\n         env: Env,\n-        proc_macro: Vec<ProcMacro>,\n+        proc_macro: ProcMacroLoadResult,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n     ) -> CrateId {\n         let data = CrateData {\n-            root_file_id: file_id,\n+            root_file_id,\n             edition,\n             version,\n             display_name,\n@@ -628,7 +630,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -640,7 +642,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -652,7 +654,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -678,7 +680,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -690,7 +692,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -713,7 +715,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -725,7 +727,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -737,7 +739,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -760,7 +762,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -772,7 +774,7 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );"}, {"sha": "f5622ecf6070678b4bdb154f89943886bce9e3c2", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -13,7 +13,7 @@ pub use crate::{\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-        ProcMacroId, ProcMacroKind, SourceRoot, SourceRootId,\n+        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "536eecf0206f3766fb93ecfd9cb99f0b04a16091", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -103,6 +103,8 @@ pub struct DefMap {\n     /// Side table for resolving derive helpers.\n     exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n     fn_proc_macro_mapping: FxHashMap<FunctionId, ProcMacroId>,\n+    /// The error that occurred when failing to load the proc-macro dll.\n+    proc_macro_loading_error: Option<Box<str>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -273,6 +275,7 @@ impl DefMap {\n             extern_prelude: FxHashMap::default(),\n             exported_derives: FxHashMap::default(),\n             fn_proc_macro_mapping: FxHashMap::default(),\n+            proc_macro_loading_error: None,\n             prelude: None,\n             root,\n             modules,\n@@ -305,6 +308,9 @@ impl DefMap {\n     pub fn fn_as_proc_macro(&self, id: FunctionId) -> Option<ProcMacroId> {\n         self.fn_proc_macro_mapping.get(&id).copied()\n     }\n+    pub fn proc_macro_loading_error(&self) -> Option<&str> {\n+        self.proc_macro_loading_error.as_deref()\n+    }\n \n     pub(crate) fn krate(&self) -> CrateId {\n         self.krate\n@@ -460,6 +466,7 @@ impl DefMap {\n             registered_attrs,\n             registered_tools,\n             fn_proc_macro_mapping,\n+            proc_macro_loading_error: _,\n             block: _,\n             edition: _,\n             recursion_limit: _,"}, {"sha": "6a9f569ea813ecd51873f450a6388ab9ef90a144", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -74,19 +74,26 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n     }\n \n     let cfg_options = &krate.cfg_options;\n-    let proc_macros = krate\n-        .proc_macro\n-        .iter()\n-        .enumerate()\n-        .map(|(idx, it)| {\n-            // FIXME: a hacky way to create a Name from string.\n-            let name = tt::Ident { text: it.name.clone(), id: tt::TokenId::unspecified() };\n-            (\n-                name.as_name(),\n-                ProcMacroExpander::new(def_map.krate, base_db::ProcMacroId(idx as u32)),\n-            )\n-        })\n-        .collect();\n+    let proc_macros = match &krate.proc_macro {\n+        Ok(proc_macros) => {\n+            proc_macros\n+                .iter()\n+                .enumerate()\n+                .map(|(idx, it)| {\n+                    // FIXME: a hacky way to create a Name from string.\n+                    let name = tt::Ident { text: it.name.clone(), id: tt::TokenId::unspecified() };\n+                    (\n+                        name.as_name(),\n+                        ProcMacroExpander::new(def_map.krate, base_db::ProcMacroId(idx as u32)),\n+                    )\n+                })\n+                .collect()\n+        }\n+        Err(e) => {\n+            def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n+            Vec::new()\n+        }\n+    };\n     let is_proc_macro = krate.is_proc_macro;\n \n     let mut collector = DefCollector {\n@@ -1128,7 +1135,19 @@ impl DefCollector<'_> {\n \n                     let def = match resolver(path.clone()) {\n                         Some(def) if def.is_attribute() => def,\n-                        _ => return true,\n+                        _ => {\n+                            self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n+                                directive.module_id,\n+                                MacroCallKind::Attr {\n+                                    ast_id,\n+                                    attr_args: Default::default(),\n+                                    invoc_attr_index: attr.id.ast_index,\n+                                    is_derive: false,\n+                                },\n+                                None,\n+                            ));\n+                            return true;\n+                        }\n                     };\n                     if matches!(\n                         def,\n@@ -1232,6 +1251,7 @@ impl DefCollector<'_> {\n                             self.def_map.diagnostics.push(DefDiagnostic::unresolved_proc_macro(\n                                 directive.module_id,\n                                 loc.kind,\n+                                Some(loc.def.krate),\n                             ));\n \n                             return recollect_without(self);\n@@ -1283,7 +1303,11 @@ impl DefCollector<'_> {\n             let diag = match err {\n                 hir_expand::ExpandError::UnresolvedProcMacro => {\n                     // Missing proc macros are non-fatal, so they are handled specially.\n-                    DefDiagnostic::unresolved_proc_macro(module_id, loc.kind.clone())\n+                    DefDiagnostic::unresolved_proc_macro(\n+                        module_id,\n+                        loc.kind.clone(),\n+                        Some(loc.def.krate),\n+                    )\n                 }\n                 _ => DefDiagnostic::macro_error(module_id, loc.kind.clone(), err.to_string()),\n             };"}, {"sha": "3ebc5629d7c0188111f6b273d1bb61d07804b0aa", "filename": "crates/hir-def/src/nameres/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -1,5 +1,6 @@\n //! Diagnostics emitted during DefMap construction.\n \n+use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::MacroCallKind;\n use la_arena::Idx;\n@@ -23,7 +24,7 @@ pub enum DefDiagnosticKind {\n \n     UnconfiguredCode { ast: AstId<ast::Item>, cfg: CfgExpr, opts: CfgOptions },\n \n-    UnresolvedProcMacro { ast: MacroCallKind },\n+    UnresolvedProcMacro { ast: MacroCallKind, krate: Option<CrateId> },\n \n     UnresolvedMacroCall { ast: MacroCallKind, path: ModPath },\n \n@@ -81,8 +82,12 @@ impl DefDiagnostic {\n         Self { in_module: container, kind: DefDiagnosticKind::UnconfiguredCode { ast, cfg, opts } }\n     }\n \n-    pub(super) fn unresolved_proc_macro(container: LocalModuleId, ast: MacroCallKind) -> Self {\n-        Self { in_module: container, kind: DefDiagnosticKind::UnresolvedProcMacro { ast } }\n+    pub(super) fn unresolved_proc_macro(\n+        container: LocalModuleId,\n+        ast: MacroCallKind,\n+        krate: Option<CrateId>,\n+    ) -> Self {\n+        Self { in_module: container, kind: DefDiagnosticKind::UnresolvedProcMacro { ast, krate } }\n     }\n \n     pub(super) fn macro_error("}, {"sha": "b2686592a55267ef779c23ecc25eac66886d96de", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -34,7 +34,15 @@ impl ProcMacroExpander {\n         match self.proc_macro_id {\n             Some(id) => {\n                 let krate_graph = db.crate_graph();\n-                let proc_macro = match krate_graph[self.krate].proc_macro.get(id.0 as usize) {\n+                let proc_macros = match &krate_graph[self.krate].proc_macro {\n+                    Ok(proc_macros) => proc_macros,\n+                    Err(e) => {\n+                        return ExpandResult::only_err(ExpandError::Other(\n+                            e.clone().into_boxed_str(),\n+                        ))\n+                    }\n+                };\n+                let proc_macro = match proc_macros.get(id.0 as usize) {\n                     Some(proc_macro) => proc_macro,\n                     None => {\n                         return ExpandResult::only_err(ExpandError::Other("}, {"sha": "1f65c05c1eabbc54438dea43e8fc52542fdb5cc8", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -3,6 +3,7 @@\n //!\n //! This probably isn't the best way to do this -- ideally, diagnistics should\n //! be expressed in terms of hir types themselves.\n+use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n use hir_def::path::ModPath;\n@@ -87,6 +88,8 @@ pub struct UnresolvedProcMacro {\n     pub precise_location: Option<TextRange>,\n     pub macro_name: Option<String>,\n     pub kind: MacroKind,\n+    /// The crate id of the proc-macro this macro belongs to, or `None` if the proc-macro can't be found.\n+    pub krate: Option<CrateId>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]"}, {"sha": "3f0d586bf64443f163aa3148b42bd34feccf506c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -627,7 +627,7 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n             );\n         }\n \n-        DefDiagnosticKind::UnresolvedProcMacro { ast } => {\n+        DefDiagnosticKind::UnresolvedProcMacro { ast, krate } => {\n             let (node, precise_location, macro_name, kind) = match ast {\n                 MacroCallKind::FnLike { ast_id, .. } => {\n                     let node = ast_id.to_node(db.upcast());\n@@ -689,7 +689,10 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                     )\n                 }\n             };\n-            acc.push(UnresolvedProcMacro { node, precise_location, macro_name, kind }.into());\n+            acc.push(\n+                UnresolvedProcMacro { node, precise_location, macro_name, kind, krate: *krate }\n+                    .into(),\n+            );\n         }\n \n         DefDiagnosticKind::UnresolvedMacroCall { ast, path } => {\n@@ -1163,6 +1166,7 @@ impl DefWithBody {\n                         precise_location: None,\n                         macro_name: None,\n                         kind: MacroKind::ProcMacro,\n+                        krate: None,\n                     }\n                     .into(),\n                 ),"}, {"sha": "5ebfe33dab10bcd20f5980d417d70689308a3f67", "filename": "crates/ide-diagnostics/src/handlers/unresolved_proc_macro.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Funresolved_proc_macro.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -1,3 +1,5 @@\n+use hir::db::DefDatabase;\n+\n use crate::{Diagnostic, DiagnosticsContext, Severity};\n \n // Diagnostic: unresolved-proc-macro\n@@ -29,19 +31,24 @@ pub(crate) fn unresolved_proc_macro(\n         Some(name) => format!(\"proc macro `{}` not expanded\", name),\n         None => \"proc macro not expanded\".to_string(),\n     };\n-    let (message, severity) = if config_enabled {\n-        (message, Severity::Error)\n-    } else {\n-        let message = match d.kind {\n-            hir::MacroKind::Attr if proc_macros_enabled => {\n-                format!(\"{message}{}\", \" (attribute macro expansion is disabled)\")\n+    let severity = if config_enabled { Severity::Error } else { Severity::WeakWarning };\n+    let def_map = d.krate.map(|krate| ctx.sema.db.crate_def_map(krate));\n+    let message = format!(\n+        \"{message}: {}\",\n+        if config_enabled {\n+            match def_map.as_ref().and_then(|def_map| def_map.proc_macro_loading_error()) {\n+                Some(e) => e,\n+                None => \"proc macro not found\",\n             }\n-            _ => {\n-                format!(\"{message}{}\", \" (proc-macro expansion is disabled)\")\n+        } else {\n+            match d.kind {\n+                hir::MacroKind::Attr if proc_macros_enabled => {\n+                    \"attribute macro expansion is disabled\"\n+                }\n+                _ => \"proc-macro expansion is disabled\",\n             }\n-        };\n-        (message, Severity::WeakWarning)\n-    };\n+        },\n+    );\n \n     Diagnostic::new(\"unresolved-proc-macro\", message, display_range).severity(severity)\n }"}, {"sha": "07a7fbd7837c852148f95ac9f75c9f26180cda8b", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -233,7 +233,7 @@ impl Analysis {\n             cfg_options.clone(),\n             cfg_options,\n             Env::default(),\n-            Default::default(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );"}, {"sha": "4a30168ca517b57f99113662608cc8d952c2fa06", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -118,27 +118,23 @@ impl ProcMacroServer {\n         Ok(ProcMacroServer { process: Arc::new(Mutex::new(process)) })\n     }\n \n-    pub fn load_dylib(\n-        &self,\n-        dylib: MacroDylib,\n-    ) -> Result<Result<Vec<ProcMacro>, String>, ServerError> {\n+    pub fn load_dylib(&self, dylib: MacroDylib) -> Result<Vec<ProcMacro>, ServerError> {\n         let _p = profile::span(\"ProcMacroClient::by_dylib_path\");\n         let macros =\n             self.process.lock().unwrap_or_else(|e| e.into_inner()).find_proc_macros(&dylib.path)?;\n \n-        let res = macros.map(|macros| {\n-            macros\n+        match macros {\n+            Ok(macros) => Ok(macros\n                 .into_iter()\n                 .map(|(name, kind)| ProcMacro {\n                     process: self.process.clone(),\n                     name,\n                     kind,\n                     dylib_path: dylib.path.clone(),\n                 })\n-                .collect()\n-        });\n-\n-        Ok(res)\n+                .collect()),\n+            Err(message) => Err(ServerError { message, io: None }),\n+        }\n     }\n }\n "}, {"sha": "1a43935470b8b7ede86a140c6200c8482e83ce9e", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 82, "deletions": 28, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -88,7 +88,7 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n }\n \n fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n-    project_workspace.to_crate_graph(&mut |_, _| Vec::new(), &mut {\n+    project_workspace.to_crate_graph(&mut |_, _| Ok(Vec::new()), &mut {\n         let mut counter = 0;\n         move |_path| {\n             counter += 1;\n@@ -172,7 +172,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -245,7 +247,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -308,7 +312,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -383,7 +389,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -456,7 +464,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -544,7 +554,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -619,7 +631,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -682,7 +696,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -759,7 +775,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -834,7 +852,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -913,7 +933,9 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -988,7 +1010,9 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -1053,7 +1077,9 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -1130,7 +1156,9 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -1205,7 +1233,9 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -1260,7 +1290,9 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Alloc,\n                         ),\n@@ -1292,7 +1324,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1324,7 +1358,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1366,7 +1402,9 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1398,7 +1436,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Core,\n                         ),\n@@ -1467,7 +1507,9 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: false,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: CratesIo {\n                             repo: None,\n                         },\n@@ -1499,7 +1541,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1531,7 +1575,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1563,7 +1609,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1595,7 +1643,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Test,\n                         ),\n@@ -1709,7 +1759,9 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Std,\n                         ),\n@@ -1741,7 +1793,9 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: [],\n+                        proc_macro: Ok(\n+                            [],\n+                        ),\n                         origin: Lang(\n                             Other,\n                         ),"}, {"sha": "8982a9904ec1754d299631335efe176d681f28c0", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command};\n use anyhow::{format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacro,\n+    FileId, LangCrateOrigin, ProcMacroLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -389,7 +389,7 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n-        load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n+        load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     ) -> CrateGraph {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n@@ -434,7 +434,7 @@ impl ProjectWorkspace {\n \n fn project_json_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     project: &ProjectJson,\n     sysroot: &Option<Sysroot>,\n@@ -454,12 +454,13 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = krate.proc_macro_dylib_path.clone().map(|it| {\n-                load_proc_macro(\n+            let proc_macro = match krate.proc_macro_dylib_path.clone() {\n+                Some(it) => load_proc_macro(\n                     krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n                     &it,\n-                )\n-            });\n+                ),\n+                None => Ok(Vec::new()),\n+            };\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => {\n@@ -480,7 +481,7 @@ fn project_json_to_crate_graph(\n                     cfg_options.clone(),\n                     cfg_options,\n                     env,\n-                    proc_macro.unwrap_or_default(),\n+                    proc_macro,\n                     krate.is_proc_macro,\n                     if krate.display_name.is_some() {\n                         CrateOrigin::CratesIo { repo: krate.repository.clone() }\n@@ -521,7 +522,7 @@ fn project_json_to_crate_graph(\n fn cargo_to_crate_graph(\n     rustc_cfg: Vec<CfgFlag>,\n     override_cfg: &CfgOverrides,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     cargo: &CargoWorkspace,\n     build_scripts: &WorkspaceBuildScripts,\n@@ -708,7 +709,7 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             cfg_options.clone(),\n             Env::default(),\n-            Vec::new(),\n+            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None },\n         );\n@@ -724,7 +725,7 @@ fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n     cfg_options: &CfgOptions,\n     override_cfg: &CfgOverrides,\n-    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n     pkg_to_lib_crate: &mut FxHashMap<la_arena::Idx<crate::PackageData>, CrateId>,\n     public_deps: &SysrootPublicDeps,\n     cargo: &CargoWorkspace,\n@@ -840,7 +841,7 @@ fn add_target_crate_root(\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n     cfg_options: &CfgOptions,\n-    load_proc_macro: &mut dyn FnMut(&AbsPath) -> Vec<ProcMacro>,\n+    load_proc_macro: &mut dyn FnMut(&AbsPath) -> ProcMacroLoadResult,\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n@@ -866,11 +867,10 @@ fn add_target_crate_root(\n         }\n     }\n \n-    let proc_macro = build_data\n-        .as_ref()\n-        .and_then(|it| it.proc_macro_dylib_path.as_ref())\n-        .map(|it| load_proc_macro(it))\n-        .unwrap_or_default();\n+    let proc_macro = match build_data.as_ref().and_then(|it| it.proc_macro_dylib_path.as_ref()) {\n+        Some(it) => load_proc_macro(it),\n+        None => Ok(Vec::new()),\n+    };\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n     let mut potential_cfg_options = cfg_options.clone();\n@@ -922,7 +922,6 @@ fn sysroot_to_crate_graph(\n             let file_id = load(&sysroot[krate].root)?;\n \n             let env = Env::default();\n-            let proc_macro = vec![];\n             let display_name = CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n@@ -932,7 +931,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 cfg_options.clone(),\n                 env,\n-                proc_macro,\n+                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n             );"}, {"sha": "3f129efd95b18c934a7a876968baea978f7654a4", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=d39d520a210e5d92c7c5d7ad5b6e9ecd0a0a4f07", "patch": "@@ -19,7 +19,7 @@ use hir::db::DefDatabase;\n use ide::Change;\n use ide_db::base_db::{\n     CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n-    SourceRoot, VfsPath,\n+    ProcMacroLoadResult, SourceRoot, VfsPath,\n };\n use proc_macro_api::{MacroDylib, ProcMacroServer};\n use project_model::{ProjectWorkspace, WorkspaceBuildScripts};\n@@ -536,45 +536,37 @@ impl SourceRootConfig {\n /// Load the proc-macros for the given lib path, replacing all expanders whose names are in `dummy_replace`\n /// with an identity dummy expander.\n pub(crate) fn load_proc_macro(\n-    client: Option<&ProcMacroServer>,\n+    server: Option<&ProcMacroServer>,\n     path: &AbsPath,\n     dummy_replace: &[Box<str>],\n-) -> Vec<ProcMacro> {\n-    let dylib = match MacroDylib::new(path.to_path_buf()) {\n-        Ok(it) => it,\n-        Err(err) => {\n-            // FIXME: that's not really right -- we store this error in a\n-            // persistent status.\n-            tracing::warn!(\"failed to load proc macro: {}\", err);\n-            return Vec::new();\n+) -> ProcMacroLoadResult {\n+    let res: Result<_, String> = (|| {\n+        let dylib = MacroDylib::new(path.to_path_buf())\n+            .map_err(|io| format!(\"Proc-macro dylib loading failed: {io}\"))?;\n+        Ok(if let Some(it) = server {\n+            let vec = it.load_dylib(dylib).map_err(|e| format!(\"{e}\"))?;\n+            vec.into_iter()\n+                .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n+                .collect()\n+        } else {\n+            Vec::new()\n+        })\n+    })();\n+    return match res {\n+        Ok(proc_macros) => {\n+            tracing::info!(\n+                \"Loaded proc-macros for {}: {:?}\",\n+                path.display(),\n+                proc_macros.iter().map(|it| it.name.clone()).collect::<Vec<_>>()\n+            );\n+            Ok(proc_macros)\n+        }\n+        Err(e) => {\n+            tracing::warn!(\"proc-macro loading for {} failed: {e}\", path.display());\n+            Err(e)\n         }\n     };\n \n-    let proc_macros: Vec<_> = client\n-        .map(|it| it.load_dylib(dylib))\n-        .into_iter()\n-        .flat_map(|it| match it {\n-            Ok(Ok(macros)) => macros,\n-            Err(err) => {\n-                tracing::error!(\"proc macro server crashed: {}\", err);\n-                Vec::new()\n-            }\n-            Ok(Err(err)) => {\n-                // FIXME: that's not really right -- we store this error in a\n-                // persistent status.\n-                tracing::warn!(\"failed to load proc macro: {}\", err);\n-                Vec::new()\n-            }\n-        })\n-        .map(|expander| expander_to_proc_macro(expander, dummy_replace))\n-        .collect();\n-    tracing::info!(\n-        \"Loaded proc-macros for {}: {:?}\",\n-        path.display(),\n-        proc_macros.iter().map(|it| it.name.clone()).collect::<Vec<_>>()\n-    );\n-    return proc_macros;\n-\n     fn expander_to_proc_macro(\n         expander: proc_macro_api::ProcMacro,\n         dummy_replace: &[Box<str>],"}]}