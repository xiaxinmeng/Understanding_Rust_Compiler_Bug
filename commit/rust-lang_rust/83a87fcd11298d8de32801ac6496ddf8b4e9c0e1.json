{"sha": "83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTg3ZmNkMTEyOThkOGRlMzI4MDFhYzY0OTZkZGY4YjRlOWMwZTE=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-25T09:56:39Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-07-25T09:56:39Z"}, "message": "Restore line index micro-optimization", "tree": {"sha": "62608bc0ddaee4fb4b0000840f9e632397f2c78d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62608bc0ddaee4fb4b0000840f9e632397f2c78d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "html_url": "https://github.com/rust-lang/rust/commit/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48f9a05692e509c3bfd7df5b1088fe2863617714", "url": "https://api.github.com/repos/rust-lang/rust/commits/48f9a05692e509c3bfd7df5b1088fe2863617714", "html_url": "https://github.com/rust-lang/rust/commit/48f9a05692e509c3bfd7df5b1088fe2863617714"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "d4cc9dd04255da4c11dbb0b88eaa23bbfd4cf314", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "patch": "@@ -1,5 +1,5 @@\n //! Utilities for LSP-related boilerplate code.\n-use std::{error::Error, ops::Range};\n+use std::{borrow::Cow, error::Error, ops::Range};\n \n use lsp_server::Notification;\n use ra_db::Canceled;\n@@ -84,8 +84,8 @@ impl GlobalState {\n pub(crate) fn apply_document_changes(\n     old_text: &mut String,\n     content_changes: Vec<lsp_types::TextDocumentContentChangeEvent>,\n+    mut line_index: Cow<'_, LineIndex>,\n ) {\n-    let mut line_index = LineIndex::new(old_text);\n     // The changes we got must be applied sequentially, but can cross lines so we\n     // have to keep our line index updated.\n     // Some clients (e.g. Code) sort the ranges in reverse. As an optimization, we\n@@ -110,7 +110,7 @@ pub(crate) fn apply_document_changes(\n         match change.range {\n             Some(range) => {\n                 if !index_valid.covers(range.end.line) {\n-                    line_index = LineIndex::new(&old_text);\n+                    line_index = Cow::Owned(LineIndex::new(old_text));\n                 }\n                 index_valid = IndexValid::UpToLineExclusive(range.start.line);\n                 let range = from_proto::text_range(&line_index, range);\n@@ -145,10 +145,15 @@ mod tests {\n             };\n         }\n \n+        fn run(text: &mut String, changes: Vec<TextDocumentContentChangeEvent>) {\n+            let line_index = Cow::Owned(LineIndex::new(&text));\n+            super::apply_document_changes(text, changes, line_index);\n+        }\n+\n         let mut text = String::new();\n-        apply_document_changes(&mut text, vec![]);\n+        run(&mut text, vec![]);\n         assert_eq!(text, \"\");\n-        apply_document_changes(\n+        run(\n             &mut text,\n             vec![TextDocumentContentChangeEvent {\n                 range: None,\n@@ -157,39 +162,36 @@ mod tests {\n             }],\n         );\n         assert_eq!(text, \"the\");\n-        apply_document_changes(&mut text, c![0, 3; 0, 3 => \" quick\"]);\n+        run(&mut text, c![0, 3; 0, 3 => \" quick\"]);\n         assert_eq!(text, \"the quick\");\n-        apply_document_changes(&mut text, c![0, 0; 0, 4 => \"\", 0, 5; 0, 5 => \" foxes\"]);\n+        run(&mut text, c![0, 0; 0, 4 => \"\", 0, 5; 0, 5 => \" foxes\"]);\n         assert_eq!(text, \"quick foxes\");\n-        apply_document_changes(&mut text, c![0, 11; 0, 11 => \"\\ndream\"]);\n+        run(&mut text, c![0, 11; 0, 11 => \"\\ndream\"]);\n         assert_eq!(text, \"quick foxes\\ndream\");\n-        apply_document_changes(&mut text, c![1, 0; 1, 0 => \"have \"]);\n+        run(&mut text, c![1, 0; 1, 0 => \"have \"]);\n         assert_eq!(text, \"quick foxes\\nhave dream\");\n-        apply_document_changes(\n-            &mut text,\n-            c![0, 0; 0, 0 => \"the \", 1, 4; 1, 4 => \" quiet\", 1, 16; 1, 16 => \"s\\n\"],\n-        );\n+        run(&mut text, c![0, 0; 0, 0 => \"the \", 1, 4; 1, 4 => \" quiet\", 1, 16; 1, 16 => \"s\\n\"]);\n         assert_eq!(text, \"the quick foxes\\nhave quiet dreams\\n\");\n-        apply_document_changes(&mut text, c![0, 15; 0, 15 => \"\\n\", 2, 17; 2, 17 => \"\\n\"]);\n+        run(&mut text, c![0, 15; 0, 15 => \"\\n\", 2, 17; 2, 17 => \"\\n\"]);\n         assert_eq!(text, \"the quick foxes\\n\\nhave quiet dreams\\n\\n\");\n-        apply_document_changes(\n+        run(\n             &mut text,\n             c![1, 0; 1, 0 => \"DREAM\", 2, 0; 2, 0 => \"they \", 3, 0; 3, 0 => \"DON'T THEY?\"],\n         );\n         assert_eq!(text, \"the quick foxes\\nDREAM\\nthey have quiet dreams\\nDON'T THEY?\\n\");\n-        apply_document_changes(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n+        run(&mut text, c![0, 10; 1, 5 => \"\", 2, 0; 2, 12 => \"\"]);\n         assert_eq!(text, \"the quick \\nthey have quiet dreams\\n\");\n \n         text = String::from(\"\u2764\ufe0f\");\n-        apply_document_changes(&mut text, c![0, 0; 0, 0 => \"a\"]);\n+        run(&mut text, c![0, 0; 0, 0 => \"a\"]);\n         assert_eq!(text, \"a\u2764\ufe0f\");\n \n         text = String::from(\"a\\nb\");\n-        apply_document_changes(&mut text, c![0, 1; 1, 0 => \"\\n\u021bc\", 0, 1; 1, 1 => \"d\"]);\n+        run(&mut text, c![0, 1; 1, 0 => \"\\n\u021bc\", 0, 1; 1, 1 => \"d\"]);\n         assert_eq!(text, \"adcb\");\n \n         text = String::from(\"a\\nb\");\n-        apply_document_changes(&mut text, c![0, 1; 1, 0 => \"\u021b\\nc\", 0, 2; 0, 2 => \"c\"]);\n+        run(&mut text, c![0, 1; 1, 0 => \"\u021b\\nc\", 0, 2; 0, 2 => \"c\"]);\n         assert_eq!(text, \"a\u021bc\\ncb\");\n     }\n }"}, {"sha": "0ace4cb45068535a01bba954cb3d11f32162becc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a87fcd11298d8de32801ac6496ddf8b4e9c0e1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=83a87fcd11298d8de32801ac6496ddf8b4e9c0e1", "patch": "@@ -1,13 +1,14 @@\n //! The main loop of `rust-analyzer` responsible for dispatching LSP\n //! requests/replies and notifications back to the client.\n use std::{\n+    borrow::Cow,\n     env, fmt, panic,\n     time::{Duration, Instant},\n };\n \n use crossbeam_channel::{select, Receiver};\n use lsp_server::{Connection, Notification, Request, Response};\n-use lsp_types::notification::Notification as _;\n+use lsp_types::{notification::Notification as _, DidChangeTextDocumentParams};\n use ra_db::VfsPath;\n use ra_ide::{Canceled, FileId};\n use ra_prof::profile;\n@@ -421,15 +422,20 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::DidChangeTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n-                    let doc = this.mem_docs.get_mut(&path).unwrap();\n+                    let DidChangeTextDocumentParams { text_document, content_changes } = params;\n                     let vfs = &mut this.vfs.write().0;\n+                    let world = this.snapshot();\n                     let file_id = vfs.file_id(&path).unwrap();\n+\n+                    // let file_id = vfs.file_id(&path).unwrap();\n                     let mut text = String::from_utf8(vfs.file_contents(file_id).to_vec()).unwrap();\n-                    apply_document_changes(&mut text, params.content_changes);\n+                    let line_index = world.analysis.file_line_index(file_id)?;\n+                    apply_document_changes(&mut text, content_changes, Cow::Borrowed(&line_index));\n \n                     // The version passed in DidChangeTextDocument is the version after all edits are applied\n                     // so we should apply it before the vfs is notified.\n-                    doc.version = params.text_document.version;\n+                    let doc = this.mem_docs.get_mut(&path).unwrap();\n+                    doc.version = text_document.version;\n \n                     vfs.set_file_contents(path.clone(), Some(text.into_bytes()));\n                 }"}]}