{"sha": "99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZjliYjE2YWI4MzUxOWQ2N2RlYWY0Y2E4YTc4ZmVlYmE2N2ZiNTM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-10-27T20:05:23Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-10-27T21:06:37Z"}, "message": "Adjust src/grammar for the introduced <- op", "tree": {"sha": "398f1f119503f98e6d69a0a4f72793c0125465d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/398f1f119503f98e6d69a0a4f72793c0125465d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "html_url": "https://github.com/rust-lang/rust/commit/99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a238c4f53145a2fe3820d869cbdaa26a128307", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a238c4f53145a2fe3820d869cbdaa26a128307", "html_url": "https://github.com/rust-lang/rust/commit/c1a238c4f53145a2fe3820d869cbdaa26a128307"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "a63fc59e50b07145a92b4a0ef9aac1d511dd8478", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "patch": "@@ -10,7 +10,7 @@ lexer grammar RustLexer;\n tokens {\n     EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUS,\n     MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n-    BINOPEQ, AT, DOT, DOTDOT, DOTDOTDOT, COMMA, SEMI, COLON,\n+    BINOPEQ, LARROW, AT, DOT, DOTDOT, DOTDOTDOT, COMMA, SEMI, COLON,\n     MOD_SEP, RARROW, FAT_ARROW, LPAREN, RPAREN, LBRACKET, RBRACKET,\n     LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR, LIT_BYTE,\n     LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BYTE_STR,\n@@ -44,6 +44,7 @@ AND     : '&' ;\n OR      : '|' ;\n SHL     : '<<' ;\n SHR     : '>>' ;\n+LARROW  : '<-' ;\n \n BINOP\n     : PLUS\n@@ -56,6 +57,7 @@ BINOP\n     | OR\n     | SHL\n     | SHR\n+    | LARROW\n     ;\n \n BINOPEQ : BINOP EQ ;"}, {"sha": "77737c99496f34757127d29e0040da0ff7f4fa56", "filename": "src/grammar/lexer.l", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Flexer.l", "raw_url": "https://github.com/rust-lang/rust/raw/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Flexer.l", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Flexer.l?ref=99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "patch": "@@ -317,6 +317,7 @@ r/#             {\n <str>\\\\[^n\\nrt\\\\\\x27\\x220]  { return -1; }\n <str>(.|\\n)                 { yymore(); }\n \n+\\<-  { return LARROW; }\n -\\>  { return RARROW; }\n -    { return '-'; }\n -=   { return MINUSEQ; }"}, {"sha": "b310b2b3351c557d296307b0f203d4e8558219b0", "filename": "src/grammar/parser-lalr.y", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Fparser-lalr.y", "raw_url": "https://github.com/rust-lang/rust/raw/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Fparser-lalr.y", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fparser-lalr.y?ref=99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "patch": "@@ -45,6 +45,7 @@ extern char *yytext;\n %token DOTDOTDOT\n %token MOD_SEP\n %token RARROW\n+%token LARROW\n %token FAT_ARROW\n %token LIT_BYTE\n %token LIT_CHAR\n@@ -167,7 +168,8 @@ extern char *yytext;\n // prefix_exprs\n %precedence RETURN\n \n-%left '=' SHLEQ SHREQ MINUSEQ ANDEQ OREQ PLUSEQ STAREQ SLASHEQ CARETEQ PERCENTEQ\n+%right '=' SHLEQ SHREQ MINUSEQ ANDEQ OREQ PLUSEQ STAREQ SLASHEQ CARETEQ PERCENTEQ\n+%right LARROW\n %left OROR\n %left ANDAND\n %left EQEQ NE\n@@ -1316,6 +1318,7 @@ nonblock_expr\n | RETURN expr                                                   { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                                         { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK lifetime                                                { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| nonblock_expr LARROW expr                                     { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | nonblock_expr '=' expr                                        { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | nonblock_expr SHLEQ expr                                      { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n | nonblock_expr SHREQ expr                                      { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n@@ -1375,6 +1378,7 @@ expr\n | RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| expr LARROW expr                                    { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | expr '=' expr                                       { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | expr SHLEQ expr                                     { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n | expr SHREQ expr                                     { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n@@ -1435,6 +1439,7 @@ nonparen_expr\n | RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| nonparen_expr LARROW nonparen_expr                  { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | nonparen_expr '=' nonparen_expr                     { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | nonparen_expr SHLEQ nonparen_expr                   { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n | nonparen_expr SHREQ nonparen_expr                   { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n@@ -1495,6 +1500,7 @@ expr_nostruct\n | RETURN expr                                         { $$ = mk_node(\"ExprRet\", 1, $2); }\n | BREAK                                               { $$ = mk_node(\"ExprBreak\", 0); }\n | BREAK ident                                         { $$ = mk_node(\"ExprBreak\", 1, $2); }\n+| expr_nostruct LARROW expr_nostruct                  { $$ = mk_node(\"ExprInPlace\", 2, $1, $3); }\n | expr_nostruct '=' expr_nostruct                     { $$ = mk_node(\"ExprAssign\", 2, $1, $3); }\n | expr_nostruct SHLEQ expr_nostruct                   { $$ = mk_node(\"ExprAssignShl\", 2, $1, $3); }\n | expr_nostruct SHREQ expr_nostruct                   { $$ = mk_node(\"ExprAssignShr\", 2, $1, $3); }\n@@ -1794,6 +1800,7 @@ unpaired_token\n | GE                         { $$ = mk_atom(yytext); }\n | ANDAND                     { $$ = mk_atom(yytext); }\n | OROR                       { $$ = mk_atom(yytext); }\n+| LARROW                     { $$ = mk_atom(yytext); }\n | SHLEQ                      { $$ = mk_atom(yytext); }\n | SHREQ                      { $$ = mk_atom(yytext); }\n | MINUSEQ                    { $$ = mk_atom(yytext); }"}, {"sha": "fe9c5aaee4ce9bf69ddcdd7c3778c7b9e71e2173", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99f9bb16ab83519d67deaf4ca8a78feeba67fb53/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=99f9bb16ab83519d67deaf4ca8a78feeba67fb53", "patch": "@@ -35,7 +35,7 @@ use syntax::parse::lexer::TokenAndSpan;\n \n fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n     fn id() -> token::Token {\n-        token::Ident(ast::Ident::with_empty_ctxt(Name(0))), token::Plain)\n+        token::Ident(ast::Ident::with_empty_ctxt(Name(0)), token::Plain)\n     }\n \n     let mut res = HashMap::new();\n@@ -208,7 +208,7 @@ fn parse_antlr_token(s: &str, tokens: &HashMap<String, token::Token>, surrogate_\n         token::Literal(token::ByteStr(..), n)    => token::Literal(token::ByteStr(nm), n),\n         token::Literal(token::ByteStrRaw(..), n) => token::Literal(token::ByteStrRaw(fix(content),\n                                                                                 count(content)), n),\n-        token::Ident(..)           => token::Ident(ast::Ident::with_empty_ctxt(nm)),\n+        token::Ident(..)           => token::Ident(ast::Ident::with_empty_ctxt(nm),\n                                                    token::ModName),\n         token::Lifetime(..)        => token::Lifetime(ast::Ident::with_empty_ctxt(nm)),\n         ref t => t.clone()"}]}