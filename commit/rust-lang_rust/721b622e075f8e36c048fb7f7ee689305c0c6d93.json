{"sha": "721b622e075f8e36c048fb7f7ee689305c0c6d93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMWI2MjJlMDc1ZjhlMzZjMDQ4ZmI3ZjdlZTY4OTMwNWMwYzZkOTM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-01T18:26:20Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-01T18:26:20Z"}, "message": "Update cdb tests for expected output\n\nAlso an fix issue with tuple type names where we can't cast to them in\nnatvis (required by the visualizer for `HashMap`) because of\npeculiarities with the natvis expression evaluator.", "tree": {"sha": "adfbb9211e51466aa52b307de80fb1e41e1f46be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adfbb9211e51466aa52b307de80fb1e41e1f46be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/721b622e075f8e36c048fb7f7ee689305c0c6d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/721b622e075f8e36c048fb7f7ee689305c0c6d93", "html_url": "https://github.com/rust-lang/rust/commit/721b622e075f8e36c048fb7f7ee689305c0c6d93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/721b622e075f8e36c048fb7f7ee689305c0c6d93/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aac8a885520854e4b60ea5733b8b06f9e0cc1fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aac8a885520854e4b60ea5733b8b06f9e0cc1fcc", "html_url": "https://github.com/rust-lang/rust/commit/aac8a885520854e4b60ea5733b8b06f9e0cc1fcc"}], "stats": {"total": 150, "additions": 82, "deletions": 68}, "files": [{"sha": "a97c6a6b4429f7c77ac1d626fa686a2f1af95fb3", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -81,11 +81,21 @@ pub fn push_debuginfo_type_name<'tcx>(\n \n             for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n-                output.push_str(\", \");\n+                output.push(',');\n+\n+                // Natvis does not always like having spaces between parts of the type name\n+                // and this causes issues when we need to write a typename in natvis, for example\n+                // as part of a cast like the `HashMap` visualizer does.\n+                if !cpp_like_names {\n+                    output.push(' ');\n+                }\n             }\n             if !component_types.is_empty() {\n                 output.pop();\n-                output.pop();\n+\n+                if !cpp_like_names {\n+                    output.pop();\n+                }\n             }\n \n             if cpp_like_names {"}, {"sha": "57f9a8b86b693787ae25a32b74694c854edcd8a0", "filename": "src/test/debuginfo/basic-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fbasic-types.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -129,7 +129,7 @@\n // cdb-check:f64              : 3.500000 [Type: double]\n // cdb-command:.enable_unicode 1\n // cdb-command:dx  s\n-// cdb-check:s                : 72 [Type: str]\n+// cdb-check:s                : \"Hello, World!\" [Type: str]\n \n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]"}, {"sha": "cf3be2e71967402ea02991b82282ceb2e12ace23", "filename": "src/test/debuginfo/msvc-pretty-enums.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-pretty-enums.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -7,43 +7,43 @@\n //       so the best we can do is to make sure we are generating the right debuginfo\n \n // cdb-command: dx -r2 a,!\n-// cdb-check:a,!              : Some({...}) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:a,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : Low (0x2) [Type: msvc_pretty_enums::CStyleEnum]\n // cdb-check:    [+0x000] discriminant     : 0x2 [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 b,!\n-// cdb-check:b,!              : None [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n+// cdb-check:b,!              [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n // cdb-check:    [+0x000] discriminant     : None (0x11) [Type: enum$<core::option::Option<enum$<msvc_pretty_enums::CStyleEnum> >, 2, 16, Some>::Discriminant$]\n \n // cdb-command: dx -r2 c,!\n-// cdb-check:c,!              : Tag1 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:c,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x11 [Type: msvc_pretty_enums::CStyleEnum]\n // cdb-check:    [+0x000] discriminant     : Tag1 (0x11) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 d,!\n-// cdb-check:d,!              : Data({...}) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:d,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n // cdb-check:    [+0x000] discriminant     : 0x10 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 e,!\n-// cdb-check:e,!              : Tag2 [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n+// cdb-check:e,!              [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Data]\n // cdb-check:        [+0x000] my_data          : 0x13 [Type: msvc_pretty_enums::CStyleEnum]\n // cdb-check:    [+0x000] discriminant     : Tag2 (0x13) [Type: enum$<msvc_pretty_enums::NicheLayoutEnum, 2, 16, Data>::Discriminant$]\n \n // cdb-command: dx -r2 f,!\n-// cdb-check:f,!              : Some({...}) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:f,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x[...] : 0x1 [Type: unsigned int *]\n // cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n \n // cdb-command: dx -r2 g,!\n-// cdb-check:g,!              : None [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n+// cdb-check:g,!              [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              : 0x0 [Type: unsigned int *]\n // cdb-check:    [+0x000] discriminant     : None (0x0) [Type: enum$<core::option::Option<ref$<u32> >, 1, [...], Some>::Discriminant$]\n@@ -61,7 +61,7 @@\n // cdb-check:j                : High (0x10) [Type: msvc_pretty_enums::CStyleEnum]\n \n // cdb-command: dx -r2 k,!\n-// cdb-check:k,!              : Some({...}) [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n+// cdb-check:k,!              [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n // cdb-check:    [+0x000] dataful_variant  [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Some]\n // cdb-check:        [+0x000] __0              [Type: alloc::string::String]\n // cdb-check:    [+0x000] discriminant     : 0x[...] [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>::Discriminant$]"}, {"sha": "ede15578712578cd476dbf73100e473872887414", "filename": "src/test/debuginfo/pretty-std-collections-hash.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std-collections-hash.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -77,6 +77,8 @@\n // cdb-command: dx hash_map,d\n // cdb-check:    [\"0xe\"]          : 14 [Type: unsigned __int64]\n \n+// cdb-command: dx x\n+\n #![allow(unused_variables)]\n use std::collections::HashSet;\n use std::collections::HashMap;\n@@ -95,6 +97,9 @@ fn main() {\n         hash_map.insert(i as u64, i as u64);\n     }\n \n+    let x = &(123u64, 456u64);\n+    let string = \"awefawefawe\".to_string();\n+\n     zzz(); // #break\n }\n "}, {"sha": "a7f384c05007d2556ab1197a5ec4a8007e25ba04", "filename": "src/test/debuginfo/pretty-std.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fpretty-std.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -125,8 +125,7 @@\n \n // cdb-command: dx some_string\n // NOTE: cdb fails to interpret debug info of Option enums on i686.\n-// cdb-check:some_string      : Some({...}) [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n-// cdb-check:    [...] __0              : \"IAMA optional string!\" [Type: alloc::string::String]\n+// cdb-check:some_string      [Type: enum$<core::option::Option<alloc::string::String>, 1, [...], Some>]\n \n #![allow(unused_variables)]\n use std::ffi::OsString;"}, {"sha": "0807cfedce01d844522bc05b2b0dcfaf4d1346c8", "filename": "src/test/debuginfo/simple-tuple.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fsimple-tuple.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -129,38 +129,38 @@\n // cdb-command: g\n \n // cdb-command:dx noPadding8,d\n-// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple$<i8, u8>]\n+// cdb-check:noPadding8,d [...]: (-100, 100) [Type: tuple$<i8,u8>]\n // cdb-check:[...][0]              : -100 [Type: [...]]\n // cdb-check:[...][1]              : 100 [Type: [...]]\n // cdb-command:dx noPadding16,d\n-// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple$<i16, i16, u16>]\n+// cdb-check:noPadding16,d [...]: (0, 1, 2) [Type: tuple$<i16,i16,u16>]\n // cdb-check:[...][0]              : 0 [Type: [...]]\n // cdb-check:[...][1]              : 1 [Type: [...]]\n // cdb-check:[...][2]              : 2 [Type: [...]]\n // cdb-command:dx noPadding32,d\n-// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple$<i32, f32, u32>]\n+// cdb-check:noPadding32,d [...]: (3, 4.5[...], 5) [Type: tuple$<i32,f32,u32>]\n // cdb-check:[...][0]              : 3 [Type: [...]]\n // cdb-check:[...][1]              : 4.5[...] [Type: [...]]\n // cdb-check:[...][2]              : 5 [Type: [...]]\n // cdb-command:dx noPadding64,d\n-// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple$<i64, f64, u64>]\n+// cdb-check:noPadding64,d [...]: (6, 7.5[...], 8) [Type: tuple$<i64,f64,u64>]\n // cdb-check:[...][0]              : 6 [Type: [...]]\n // cdb-check:[...][1]              : 7.500000 [Type: [...]]\n // cdb-check:[...][2]              : 8 [Type: [...]]\n \n // cdb-command:dx internalPadding1,d\n-// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple$<i16, i32>]\n+// cdb-check:internalPadding1,d [...]: (9, 10) [Type: tuple$<i16,i32>]\n // cdb-check:[...][0]              : 9 [Type: short]\n // cdb-check:[...][1]              : 10 [Type: int]\n // cdb-command:dx internalPadding2,d\n-// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple$<i16, i32, u32, u64>]\n+// cdb-check:internalPadding2,d [...]: (11, 12, 13, 14) [Type: tuple$<i16,i32,u32,u64>]\n // cdb-check:[...][0]              : 11 [Type: [...]]\n // cdb-check:[...][1]              : 12 [Type: [...]]\n // cdb-check:[...][2]              : 13 [Type: [...]]\n // cdb-check:[...][3]              : 14 [Type: [...]]\n \n // cdb-command:dx paddingAtEnd,d\n-// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple$<i32, i16>]\n+// cdb-check:paddingAtEnd,d [...]: (15, 16) [Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 15 [Type: [...]]\n // cdb-check:[...][1]              : 16 [Type: [...]]\n "}, {"sha": "578db74e9eeb640b783d152ec8fa1b265660706b", "filename": "src/test/debuginfo/tuple-in-tuple.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-in-tuple.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -65,64 +65,64 @@\n // cdb-command: g\n \n // cdb-command:dx no_padding1,d\n-// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple$<tuple$<u32, u32>, u32, u32>]\n-// cdb-check:[...][0]              : (0, 1) [Type: tuple$<u32, u32>]\n+// cdb-check:no_padding1,d [...]: ((0, 1), 2, 3) [Type: tuple$<tuple$<u32,u32>,u32,u32>]\n+// cdb-check:[...][0]              : (0, 1) [Type: tuple$<u32,u32>]\n // cdb-check:[...][1]              : 2 [Type: [...]]\n // cdb-check:[...][2]              : 3 [Type: [...]]\n // cdb-command:dx no_padding1.__0,d\n-// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple$<u32, u32>]\n+// cdb-check:no_padding1.__0,d [...]: (0, 1) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 0 [Type: [...]]\n // cdb-check:[...][1]              : 1 [Type: [...]]\n // cdb-command:dx no_padding2,d\n-// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple$<u32, tuple$<u32, u32>, u32>]\n+// cdb-check:no_padding2,d [...]: (4, (5, 6), 7) [Type: tuple$<u32,tuple$<u32,u32>,u32>]\n // cdb-check:[...][0]              : 4 [Type: [...]]\n-// cdb-check:[...][1]              : (5, 6) [Type: tuple$<u32, u32>]\n+// cdb-check:[...][1]              : (5, 6) [Type: tuple$<u32,u32>]\n // cdb-check:[...][2]              : 7 [Type: [...]]\n // cdb-command:dx no_padding2.__1,d\n-// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple$<u32, u32>]\n+// cdb-check:no_padding2.__1,d [...]: (5, 6) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 5 [Type: [...]]\n // cdb-check:[...][1]              : 6 [Type: [...]]\n // cdb-command:dx no_padding3,d\n-// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple$<u32, u32, tuple$<u32, u32> >]\n+// cdb-check:no_padding3,d [...]: (8, 9, (10, 11)) [Type: tuple$<u32,u32,tuple$<u32,u32> >]\n // cdb-check:[...][0]              : 8 [Type: [...]]\n // cdb-check:[...][1]              : 9 [Type: [...]]\n-// cdb-check:[...][2]              : (10, 11) [Type: tuple$<u32, u32>]\n+// cdb-check:[...][2]              : (10, 11) [Type: tuple$<u32,u32>]\n // cdb-command:dx no_padding3.__2,d\n-// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple$<u32, u32>]\n+// cdb-check:no_padding3.__2,d [...]: (10, 11) [Type: tuple$<u32,u32>]\n // cdb-check:[...][0]              : 10 [Type: [...]]\n // cdb-check:[...][1]              : 11 [Type: [...]]\n \n // cdb-command:dx internal_padding1,d\n-// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple$<i16, tuple$<i32, i32> >]\n+// cdb-check:internal_padding1,d [...]: (12, (13, 14)) [Type: tuple$<i16,tuple$<i32,i32> >]\n // cdb-check:[...][0]              : 12 [Type: [...]]\n-// cdb-check:[...][1]              : (13, 14) [Type: tuple$<i32, i32>]\n+// cdb-check:[...][1]              : (13, 14) [Type: tuple$<i32,i32>]\n // cdb-command:dx internal_padding1.__1,d\n-// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple$<i32, i32>]\n+// cdb-check:internal_padding1.__1,d [...]: (13, 14) [Type: tuple$<i32,i32>]\n // cdb-check:[...][0]              : 13 [Type: [...]]\n // cdb-check:[...][1]              : 14 [Type: [...]]\n // cdb-command:dx internal_padding2,d\n-// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple$<i16, tuple$<i16, i32> >]\n+// cdb-check:internal_padding2,d [...]: (15, (16, 17)) [Type: tuple$<i16,tuple$<i16,i32> >]\n // cdb-check:[...][0]              : 15 [Type: [...]]\n-// cdb-check:[...][1]              : (16, 17) [Type: tuple$<i16, i32>]\n+// cdb-check:[...][1]              : (16, 17) [Type: tuple$<i16,i32>]\n // cdb-command:dx internal_padding2.__1,d\n-// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple$<i16, i32>]\n+// cdb-check:internal_padding2.__1,d [...]: (16, 17) [Type: tuple$<i16,i32>]\n // cdb-check:[...][0]              : 16 [Type: [...]]\n // cdb-check:[...][1]              : 17 [Type: [...]]\n \n // cdb-command:dx padding_at_end1,d\n-// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple$<i32, tuple$<i32, i16> >]\n+// cdb-check:padding_at_end1,d [...]: (18, (19, 20)) [Type: tuple$<i32,tuple$<i32,i16> >]\n // cdb-check:[...][0]              : 18 [Type: [...]]\n-// cdb-check:[...][1]              : (19, 20) [Type: tuple$<i32, i16>]\n+// cdb-check:[...][1]              : (19, 20) [Type: tuple$<i32,i16>]\n // cdb-command:dx padding_at_end1.__1,d\n-// cdb-check:padding_at_end1.__1,d [...][Type: tuple$<i32, i16>]\n+// cdb-check:padding_at_end1.__1,d [...][Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 19 [Type: [...]]\n // cdb-check:[...][1]              : 20 [Type: [...]]\n // cdb-command:dx padding_at_end2,d\n-// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple$<tuple$<i32, i16>, i32>]\n-// cdb-check:[...][0]              : (21, 22) [Type: tuple$<i32, i16>]\n+// cdb-check:padding_at_end2,d [...]: ((21, 22), 23) [Type: tuple$<tuple$<i32,i16>,i32>]\n+// cdb-check:[...][0]              : (21, 22) [Type: tuple$<i32,i16>]\n // cdb-check:[...][1]              : 23 [Type: [...]]\n // cdb-command:dx padding_at_end2.__0,d\n-// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple$<i32, i16>]\n+// cdb-check:padding_at_end2.__0,d [...]: (21, 22) [Type: tuple$<i32,i16>]\n // cdb-check:[...][0]              : 21 [Type: [...]]\n // cdb-check:[...][1]              : 22 [Type: [...]]\n "}, {"sha": "d1f322fa76cca23c17e0316540b32851f6161542", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/721b622e075f8e36c048fb7f7ee689305c0c6d93/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=721b622e075f8e36c048fb7f7ee689305c0c6d93", "patch": "@@ -181,34 +181,34 @@\n \n // TUPLES\n // cdb-command:dv /t tuple*\n-// cdb-check:struct tuple$<u32, type_names::Struct1, enum$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > > tuple1 = [...]\n-// cdb-check:struct tuple$<tuple$<type_names::Struct1, type_names::mod1::mod2::Struct3>, enum$<type_names::mod1::Enum2>, char> tuple2 = [...]\n+// cdb-check:struct tuple$<u32,type_names::Struct1,enum$<type_names::mod1::mod2::Enum3<type_names::mod1::Struct2> > > tuple1 = [...]\n+// cdb-check:struct tuple$<tuple$<type_names::Struct1,type_names::mod1::mod2::Struct3>,enum$<type_names::mod1::Enum2>,char> tuple2 = [...]\n \n // BOX\n // cdb-command:dv /t box*\n-// cdb-check:struct tuple$<alloc::boxed::Box<f32, alloc::alloc::Global>, i32> box1 = [...]\n-// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >, alloc::alloc::Global>, i32> box2 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<f32, alloc::alloc::Global>,i32> box1 = [...]\n+// cdb-check:struct tuple$<alloc::boxed::Box<enum$<type_names::mod1::mod2::Enum3<f32> >, alloc::alloc::Global>,i32> box2 = [...]\n \n // REFERENCES\n // cdb-command:dv /t *ref*\n-// cdb-check:struct tuple$<ref$<type_names::Struct1>, i32> ref1 = [...]\n-// cdb-check:struct tuple$<ref$<type_names::GenericStruct<char, type_names::Struct1> >, i32> ref2 = [...]\n-// cdb-check:struct tuple$<ref_mut$<type_names::Struct1>, i32> mut_ref1 = [...]\n-// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> >, i32> mut_ref2 = [...]\n+// cdb-check:struct tuple$<ref$<type_names::Struct1>,i32> ref1 = [...]\n+// cdb-check:struct tuple$<ref$<type_names::GenericStruct<char, type_names::Struct1> >,i32> ref2 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::Struct1>,i32> mut_ref1 = [...]\n+// cdb-check:struct tuple$<ref_mut$<type_names::GenericStruct<enum$<type_names::mod1::Enum2>, f64> >,i32> mut_ref2 = [...]\n \n // RAW POINTERS\n // cdb-command:dv /t *_ptr*\n-// cdb-check:struct tuple$<ptr_mut$<type_names::Struct1>, isize> mut_ptr1 = [...]\n-// cdb-check:struct tuple$<ptr_mut$<isize>, isize> mut_ptr2 = [...]\n-// cdb-check:struct tuple$<ptr_mut$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >, isize> mut_ptr3 = [...]\n-// cdb-check:struct tuple$<ptr_const$<type_names::Struct1>, isize> const_ptr1 = [...]\n-// cdb-check:struct tuple$<ptr_const$<isize>, isize> const_ptr2 = [...]\n-// cdb-check:struct tuple$<ptr_const$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >, isize> const_ptr3 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<type_names::Struct1>,isize> mut_ptr1 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<isize>,isize> mut_ptr2 = [...]\n+// cdb-check:struct tuple$<ptr_mut$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> mut_ptr3 = [...]\n+// cdb-check:struct tuple$<ptr_const$<type_names::Struct1>,isize> const_ptr1 = [...]\n+// cdb-check:struct tuple$<ptr_const$<isize>,isize> const_ptr2 = [...]\n+// cdb-check:struct tuple$<ptr_const$<enum$<type_names::mod1::mod2::Enum3<type_names::Struct1> > >,isize> const_ptr3 = [...]\n \n // VECTORS\n // cdb-command:dv /t *vec*\n-// cdb-check:struct tuple$<array$<type_names::Struct1,3>, i16> fixed_size_vec1 = [...]\n-// cdb-check:struct tuple$<array$<usize,3>, i16> fixed_size_vec2 = [...]\n+// cdb-check:struct tuple$<array$<type_names::Struct1,3>,i16> fixed_size_vec1 = [...]\n+// cdb-check:struct tuple$<array$<usize,3>,i16> fixed_size_vec2 = [...]\n // cdb-check:struct alloc::vec::Vec<usize, alloc::alloc::Global> vec1 = [...]\n // cdb-check:struct alloc::vec::Vec<enum$<type_names::mod1::Enum2>, alloc::alloc::Global> vec2 = [...]\n // cdb-command:dv /t slice*\n@@ -228,16 +228,16 @@\n \n // BARE FUNCTIONS\n // cdb-command:dv /t *_fn*\n-// cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16, u8>), usize> unsafe_fn_with_return_value = [...]\n-// cdb-check:struct tuple$<type_names::Struct1 (*)(), usize> extern_c_fn_with_return_value = [...]\n-// cdb-check:struct tuple$<usize (*)(f64), usize> rust_fn_with_return_value = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char, f64> >), usize> unsafe_fn = [...]\n-// cdb-check:struct tuple$<void (*)(isize), usize> extern_c_fn = [...]\n-// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >, enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>), usize> rust_fn = [...]\n+// cdb-check:struct tuple$<type_names::mod1::Struct2 (*)(type_names::GenericStruct<u16, u8>),usize> unsafe_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<type_names::Struct1 (*)(),usize> extern_c_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<usize (*)(f64),usize> rust_fn_with_return_value = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::result::Result<char, f64> >),usize> unsafe_fn = [...]\n+// cdb-check:struct tuple$<void (*)(isize),usize> extern_c_fn = [...]\n+// cdb-check:struct tuple$<void (*)(enum$<core::option::Option<isize> >, enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>),usize> rust_fn = [...]\n // cdb-command:dv /t *_function*\n-// cdb-check:struct tuple$<isize (*)(ptr_const$<u8>, ...), usize> variadic_function = [...]\n-// cdb-check:struct tuple$<type_names::mod1::mod2::Struct3 (*)(type_names::mod1::mod2::Struct3), usize> generic_function_struct3 = [...]\n-// cdb-check:struct tuple$<isize (*)(isize), usize> generic_function_int = [...]\n+// cdb-check:struct tuple$<isize (*)(ptr_const$<u8>, ...),usize> variadic_function = [...]\n+// cdb-check:struct tuple$<type_names::mod1::mod2::Struct3 (*)(type_names::mod1::mod2::Struct3),usize> generic_function_struct3 = [...]\n+// cdb-check:struct tuple$<isize (*)(isize),usize> generic_function_int = [...]\n // cdb-command:dx Debugger.State.Scripts.@\"type-names.cdb\".Contents.getFunctionDetails(\"rust_fn\")\n // cdb-check:Return Type: void\n // cdb-check:Parameter Types: enum$<core::option::Option<isize> >,enum$<core::option::Option<ref$<type_names::mod1::Struct2> >, 1, [...], Some>\n@@ -250,8 +250,8 @@\n \n // CLOSURES\n // cdb-command:dv /t closure*\n-// cdb-check:struct tuple$<type_names::main::closure$1, usize> closure2 = [...]\n-// cdb-check:struct tuple$<type_names::main::closure$0, usize> closure1 = [...]\n+// cdb-check:struct tuple$<type_names::main::closure$1,usize> closure2 = [...]\n+// cdb-check:struct tuple$<type_names::main::closure$0,usize> closure1 = [...]\n \n // FOREIGN TYPES\n // cdb-command:dv /t foreign*"}]}