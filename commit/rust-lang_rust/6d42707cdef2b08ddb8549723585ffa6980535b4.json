{"sha": "6d42707cdef2b08ddb8549723585ffa6980535b4", "node_id": "C_kwDOAAsO6NoAKDZkNDI3MDdjZGVmMmIwOGRkYjg1NDk3MjM1ODVmZmE2OTgwNTM1YjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T21:50:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-29T21:50:46Z"}, "message": "Auto merge of #90346 - ferrocene:pa-short-circuit, r=oli-obk\n\nReplace some operators in libcore with their short-circuiting equivalents\n\nIn libcore there are a few occurrences of bitwise operators used in boolean expressions instead of their short-circuiting equivalents. This makes it harder to perform some kinds of source code analysis over libcore, for example [MC/DC] code coverage (a requirement in safety-critical environments).\n\nThis PR aims to remove as many bitwise operators in boolean expressions from libcore as possible, without any performance regression and without other changes. This means not all bitwise operators are removed, only the ones that don't have any difference with their short-circuiting counterparts. This already simplifies achieving MC/DC coverage, and the other functions can be changed in future PRs.\n\nThe PR is best reviewed commit-by-commit, and each commit has the resulting assembly in the message.\n\n## Checked integer methods\n\nThese methods recently switched to bitwise operators in PRs https://github.com/rust-lang/rust/pull/89459 and https://github.com/rust-lang/rust/pull/89351. I confirmed bitwise operators are needed in most of the functions, except these two:\n\n* `{integer}::checked_div` ([Godbolt link (nightly)](https://rust.godbolt.org/z/17efh5jPc))\n* `{integer}::checked_rem` ([Godbolt link (nightly)](https://rust.godbolt.org/z/85qGWc94K))\n\n`@tspiteri` already mentioned this was the case in https://github.com/rust-lang/rust/pull/89459#issuecomment-932728384, but opted to also switch those two to bitwise operators for consistency. As that makes MC/DC analysis harder this PR proposes switching those two back to short-circuiting operators.\n\n## `{unsigned_ints}::carrying_add`\n\n[Godbolt link (1.56.0)](https://rust.godbolt.org/z/vG9vx8x48)\n\nIn this instance replacing the `|` with `||` produces the exact same assembly when optimizations are enabled, so switching to the short-circuiting operator shouldn't have any impact.\n\n## `{unsigned_ints}::borrowing_sub`\n\n[Godbolt link (1.56.0)](https://rust.godbolt.org/z/asEfKaGE4)\n\nIn this instance replacing the `|` with `||` produces the exact same assembly when optimizations are enabled, so switching to the short-circuiting operator shouldn't have any impact.\n\n## String UTF-8 validation\n\n[Godbolt link (1.56.0)](https://rust.godbolt.org/z/a4rEbTvvx)\n\nIn this instance replacing the `|` with `||` produces practically the same assembly, with the two operands for the \"or\" swapped:\n\n```asm\n; Old\nmov  rax, qword ptr [rdi + rdx + 8]\nor   rax, qword ptr [rdi + rdx]\ntest rax, r9\nje   .LBB0_7\n\n; New\nmov  rax, qword ptr [rdi + rdx]\nor   rax, qword ptr [rdi + rdx + 8]\ntest rax, r8\nje   .LBB0_7\n```\n\n[MC/DC]: https://en.wikipedia.org/wiki/Modified_condition/decision_coverage", "tree": {"sha": "476dad2a7216130331c1fd91e6f6ede6b0c7fab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476dad2a7216130331c1fd91e6f6ede6b0c7fab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d42707cdef2b08ddb8549723585ffa6980535b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d42707cdef2b08ddb8549723585ffa6980535b4", "html_url": "https://github.com/rust-lang/rust/commit/6d42707cdef2b08ddb8549723585ffa6980535b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d42707cdef2b08ddb8549723585ffa6980535b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e99963c554e4d12010c2dea9f46d7bbd41dc1271", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99963c554e4d12010c2dea9f46d7bbd41dc1271", "html_url": "https://github.com/rust-lang/rust/commit/e99963c554e4d12010c2dea9f46d7bbd41dc1271"}, {"sha": "68a4460b614bc925a12231d5bba04dd66cb78c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a4460b614bc925a12231d5bba04dd66cb78c6e", "html_url": "https://github.com/rust-lang/rust/commit/68a4460b614bc925a12231d5bba04dd66cb78c6e"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "052e1a21b32cbd0379424aae6672ac6bed183856", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=6d42707cdef2b08ddb8549723585ffa6980535b4", "patch": "@@ -608,8 +608,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_div(self, rhs: Self) -> Option<Self> {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) && (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above\n@@ -662,8 +661,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[inline]\n         pub const fn checked_rem(self, rhs: Self) -> Option<Self> {\n-            // Using `&` helps LLVM see that it is the same check made in division.\n-            if unlikely!(rhs == 0 || ((self == Self::MIN) & (rhs == -1))) {\n+            if unlikely!(rhs == 0 || ((self == Self::MIN) && (rhs == -1))) {\n                 None\n             } else {\n                 // SAFETY: div by zero and by INT_MIN have been checked above"}, {"sha": "691d0891b144888dc0f8d11a44f9930848977f2a", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=6d42707cdef2b08ddb8549723585ffa6980535b4", "patch": "@@ -1525,7 +1525,7 @@ macro_rules! uint_impl {\n             //   to generate optimal code for now, and LLVM doesn't have an equivalent intrinsic\n             let (a, b) = self.overflowing_add(rhs);\n             let (c, d) = a.overflowing_add(carry as $SelfT);\n-            (c, b | d)\n+            (c, b || d)\n         }\n \n         /// Calculates `self` + `rhs` with a signed `rhs`\n@@ -1606,7 +1606,7 @@ macro_rules! uint_impl {\n             //   to generate optimal code for now, and LLVM doesn't have an equivalent intrinsic\n             let (a, b) = self.overflowing_sub(rhs);\n             let (c, d) = a.overflowing_sub(borrow as $SelfT);\n-            (c, b | d)\n+            (c, b || d)\n         }\n \n         /// Computes the absolute difference between `self` and `other`."}, {"sha": "f2d1c7378088090da22c9d8f17b5becf1a640b68", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d42707cdef2b08ddb8549723585ffa6980535b4/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=6d42707cdef2b08ddb8549723585ffa6980535b4", "patch": "@@ -210,7 +210,7 @@ pub(super) fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n                         // break if there is a nonascii byte\n                         let zu = contains_nonascii(*block);\n                         let zv = contains_nonascii(*block.offset(1));\n-                        if zu | zv {\n+                        if zu || zv {\n                             break;\n                         }\n                     }"}]}