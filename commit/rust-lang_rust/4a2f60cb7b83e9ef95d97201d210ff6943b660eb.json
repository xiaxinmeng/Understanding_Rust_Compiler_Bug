{"sha": "4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMmY2MGNiN2I4M2U5ZWY5NWQ5NzIwMWQyMTBmZjY5NDNiNjYwZWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-22T18:03:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-22T18:03:51Z"}, "message": "Merge #6964\n\n6964: Add full pattern completions for Struct and Variant patterns r=matklad a=Veykril\n\n\r\nJust gonna call it full pattern completion as pattern completion is already implemented in a sense by showing idents in pattern position. What this does is basically complete struct and variant patterns where applicable(function params, let statements and refutable pattern locations).\r\n\r\nThis does not replace just completing the corresponding idents of the structs and variants, instead two completions are shown for these, a completion for the ident itself and a completion for the pattern(if the pattern make sense to be used that is). I figured in some cases one would rather type out the pattern manually if it has a lot of fields but you only care about one since this completion would cause one more work in the end since you would have to delete all the extra matched fields again.\r\n\r\nThese completions are tagged as `CompletionKind::Snippet`, not sure if that is the right one here.\r\n<details>\r\n  <summary>some gifs</summary>\r\n\r\n![dx2lxgzhj3](https://user-images.githubusercontent.com/3757771/102719967-6987ef80-42f1-11eb-8ae0-8aff53777860.gif)\r\n![EP2E7sJLkB](https://user-images.githubusercontent.com/3757771/102785777-c7264580-439e-11eb-8a64-f142e19fb65b.gif)\r\n![JMNHHWknr9](https://user-images.githubusercontent.com/3757771/102785796-d1e0da80-439e-11eb-934b-218ada31b51c.gif)\r\n</details>\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "365de67418685046fdddb1445efab6552cbeb625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365de67418685046fdddb1445efab6552cbeb625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf4jUHCRBK7hj4Ov3rIwAAdHIIAEFYaLTgaqjMXk34bP3/yTP/\nOQxgFCYDxyeC44Bret02MEeKjgk8/+sm5tPl1JE2KGXXRAuVQ+M9/prqQM8zHX2D\nPov3WDxmvEk8yvV7dieAqhmQTSKv72HXtxFvO8i3xJBBsfPKx65ETfQGdY2BflAi\nq8IeLi01VkOVd6UuTtpMwpkk6ggQ6VkRo9nMey34Bfx4rIaI7H0QmJz9jOxfdHKp\n+MzDYu24Nj80kdIpMxQZqUN4Xk/zAv27EXWmeP13pHRPkIpGGv1eJQ4Jh1w8dM3X\nuRxvAoaml8fjQIcOaZqhB7rOigVcGZeTUfCHwYer+kPijeMpVD2MiaxB8Cnj1og=\n=e0zc\n-----END PGP SIGNATURE-----\n", "payload": "tree 365de67418685046fdddb1445efab6552cbeb625\nparent 94f661c62a41674d9ee04c2f3cd030d639acc926\nparent 83121efcd577124a992dc8bd304690b36bda2931\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608660231 +0000\ncommitter GitHub <noreply@github.com> 1608660231 +0000\n\nMerge #6964\n\n6964: Add full pattern completions for Struct and Variant patterns r=matklad a=Veykril\n\n\r\nJust gonna call it full pattern completion as pattern completion is already implemented in a sense by showing idents in pattern position. What this does is basically complete struct and variant patterns where applicable(function params, let statements and refutable pattern locations).\r\n\r\nThis does not replace just completing the corresponding idents of the structs and variants, instead two completions are shown for these, a completion for the ident itself and a completion for the pattern(if the pattern make sense to be used that is). I figured in some cases one would rather type out the pattern manually if it has a lot of fields but you only care about one since this completion would cause one more work in the end since you would have to delete all the extra matched fields again.\r\n\r\nThese completions are tagged as `CompletionKind::Snippet`, not sure if that is the right one here.\r\n<details>\r\n  <summary>some gifs</summary>\r\n\r\n![dx2lxgzhj3](https://user-images.githubusercontent.com/3757771/102719967-6987ef80-42f1-11eb-8ae0-8aff53777860.gif)\r\n![EP2E7sJLkB](https://user-images.githubusercontent.com/3757771/102785777-c7264580-439e-11eb-8a64-f142e19fb65b.gif)\r\n![JMNHHWknr9](https://user-images.githubusercontent.com/3757771/102785796-d1e0da80-439e-11eb-934b-218ada31b51c.gif)\r\n</details>\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "html_url": "https://github.com/rust-lang/rust/commit/4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f661c62a41674d9ee04c2f3cd030d639acc926", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f661c62a41674d9ee04c2f3cd030d639acc926", "html_url": "https://github.com/rust-lang/rust/commit/94f661c62a41674d9ee04c2f3cd030d639acc926"}, {"sha": "83121efcd577124a992dc8bd304690b36bda2931", "url": "https://api.github.com/repos/rust-lang/rust/commits/83121efcd577124a992dc8bd304690b36bda2931", "html_url": "https://github.com/rust-lang/rust/commit/83121efcd577124a992dc8bd304690b36bda2931"}], "stats": {"total": 437, "additions": 363, "deletions": 74}, "files": [{"sha": "d9fe1348552eff448dd8ae75b84f9bd6a715fa6a", "filename": "crates/completion/src/completions.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -19,9 +19,14 @@ use hir::{ModPath, ScopeDef, Type};\n use crate::{\n     item::Builder,\n     render::{\n-        const_::render_const, enum_variant::render_variant, function::render_fn,\n-        macro_::render_macro, render_field, render_resolution, render_tuple_field,\n-        type_alias::render_type_alias, RenderContext,\n+        const_::render_const,\n+        enum_variant::render_variant,\n+        function::render_fn,\n+        macro_::render_macro,\n+        pattern::{render_struct_pat, render_variant_pat},\n+        render_field, render_resolution, render_tuple_field,\n+        type_alias::render_type_alias,\n+        RenderContext,\n     },\n     CompletionContext, CompletionItem,\n };\n@@ -105,6 +110,28 @@ impl Completions {\n         self.add(item)\n     }\n \n+    pub(crate) fn add_variant_pat(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        variant: hir::Variant,\n+        local_name: Option<hir::Name>,\n+    ) {\n+        if let Some(item) = render_variant_pat(RenderContext::new(ctx), variant, local_name) {\n+            self.add(item);\n+        }\n+    }\n+\n+    pub(crate) fn add_struct_pat(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        strukt: hir::Struct,\n+        local_name: Option<hir::Name>,\n+    ) {\n+        if let Some(item) = render_struct_pat(RenderContext::new(ctx), strukt, local_name) {\n+            self.add(item);\n+        }\n+    }\n+\n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n         if let Some(item) = render_const(RenderContext::new(ctx), constant) {\n             self.add(item);"}, {"sha": "eee31098d13cb57d4f269c0a9209d8ce1b28d17b", "filename": "crates/completion/src/completions/pattern.rs", "status": "modified", "additions": 161, "deletions": 17, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -2,9 +2,9 @@\n \n use crate::{CompletionContext, Completions};\n \n-/// Completes constats and paths in patterns.\n+/// Completes constants and paths in patterns.\n pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_pat_binding_or_const || ctx.is_irrefutable_let_pat_binding) {\n+    if !(ctx.is_pat_binding_or_const || ctx.is_irrefutable_pat_binding) {\n         return;\n     }\n     if ctx.record_pat_syntax.is_some() {\n@@ -15,20 +15,21 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     // suggest variants + auto-imports\n     ctx.scope.process_all_names(&mut |name, res| {\n         let add_resolution = match &res {\n-            hir::ScopeDef::ModuleDef(def) => {\n-                if ctx.is_irrefutable_let_pat_binding {\n-                    matches!(def, hir::ModuleDef::Adt(hir::Adt::Struct(_)))\n-                } else {\n-                    matches!(\n-                        def,\n-                        hir::ModuleDef::Adt(hir::Adt::Enum(..))\n-                            | hir::ModuleDef::Adt(hir::Adt::Struct(..))\n-                            | hir::ModuleDef::Variant(..)\n-                            | hir::ModuleDef::Const(..)\n-                            | hir::ModuleDef::Module(..)\n-                    )\n+            hir::ScopeDef::ModuleDef(def) => match def {\n+                hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n+                    acc.add_struct_pat(ctx, strukt.clone(), Some(name.clone()));\n+                    true\n                 }\n-            }\n+                hir::ModuleDef::Variant(variant) if !ctx.is_irrefutable_pat_binding => {\n+                    acc.add_variant_pat(ctx, variant.clone(), Some(name.clone()));\n+                    true\n+                }\n+                hir::ModuleDef::Adt(hir::Adt::Enum(..))\n+                | hir::ModuleDef::Variant(..)\n+                | hir::ModuleDef::Const(..)\n+                | hir::ModuleDef::Module(..) => !ctx.is_irrefutable_pat_binding,\n+                _ => false,\n+            },\n             hir::ScopeDef::MacroDef(_) => true,\n             _ => false,\n         };\n@@ -42,13 +43,21 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{\n+        test_utils::{check_edit, completion_list},\n+        CompletionKind,\n+    };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n+    fn check_snippet(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        expect.assert_eq(&actual)\n+    }\n+\n     #[test]\n     fn completes_enum_variants_and_modules() {\n         check(\n@@ -69,7 +78,7 @@ fn foo() {\n                 en E\n                 ct Z\n                 st Bar\n-                ev X   ()\n+                ev X\n                 md m\n             \"#]],\n         );\n@@ -114,4 +123,139 @@ fn foo() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_in_param() {\n+        check(\n+            r#\"\n+enum E { X }\n+\n+static FOO: E = E::X;\n+struct Bar { f: u32 }\n+\n+fn foo(<|>) {\n+}\n+\"#,\n+            expect![[r#\"\n+                st Bar\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_pat_in_let() {\n+        check_snippet(\n+            r#\"\n+struct Bar { f: u32 }\n+\n+fn foo() {\n+   let <|>\n+}\n+\"#,\n+            expect![[r#\"\n+                bn Bar Bar { f$1 }$0\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_param_pattern() {\n+        check_snippet(\n+            r#\"\n+struct Foo { bar: String, baz: String }\n+struct Bar(String, String);\n+struct Baz;\n+fn outer(<|>) {}\n+\"#,\n+            expect![[r#\"\n+                bn Foo Foo { bar$1, baz$2 }: Foo$0\n+                bn Bar Bar($1, $2): Bar$0\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_let_pattern() {\n+        check_snippet(\n+            r#\"\n+struct Foo { bar: String, baz: String }\n+struct Bar(String, String);\n+struct Baz;\n+fn outer() {\n+    let <|>\n+}\n+\"#,\n+            expect![[r#\"\n+                bn Foo Foo { bar$1, baz$2 }$0\n+                bn Bar Bar($1, $2)$0\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_refutable_pattern() {\n+        check_snippet(\n+            r#\"\n+struct Foo { bar: i32, baz: i32 }\n+struct Bar(String, String);\n+struct Baz;\n+fn outer() {\n+    match () {\n+        <|>\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                bn Foo Foo { bar$1, baz$2 }$0\n+                bn Bar Bar($1, $2)$0\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn omits_private_fields_pat() {\n+        check_snippet(\n+            r#\"\n+mod foo {\n+    pub struct Foo { pub bar: i32, baz: i32 }\n+    pub struct Bar(pub String, String);\n+    pub struct Invisible(String, String);\n+}\n+use foo::*;\n+\n+fn outer() {\n+    match () {\n+        <|>\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                bn Foo Foo { bar$1, .. }$0\n+                bn Bar Bar($1, ..)$0\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn only_shows_ident_completion() {\n+        check_edit(\n+            \"Foo\",\n+            r#\"\n+struct Foo(i32);\n+fn main() {\n+    match Foo(92) {\n+        <|>(92) => (),\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo(i32);\n+fn main() {\n+    match Foo(92) {\n+        Foo(92) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "41de324d8d9348ca4a334be2c502b9369ba69abd", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -51,7 +51,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// If a name-binding or reference to a const in a pattern.\n     /// Irrefutable patterns (like let) are excluded.\n     pub(super) is_pat_binding_or_const: bool,\n-    pub(super) is_irrefutable_let_pat_binding: bool,\n+    pub(super) is_irrefutable_pat_binding: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n@@ -147,7 +147,7 @@ impl<'a> CompletionContext<'a> {\n             active_parameter: ActiveParameter::at(db, position),\n             is_param: false,\n             is_pat_binding_or_const: false,\n-            is_irrefutable_let_pat_binding: false,\n+            is_irrefutable_pat_binding: false,\n             is_trivial_path: false,\n             path_qual: None,\n             after_if: false,\n@@ -327,14 +327,19 @@ impl<'a> CompletionContext<'a> {\n                 if bind_pat.syntax().parent().and_then(ast::RecordPatFieldList::cast).is_some() {\n                     self.is_pat_binding_or_const = false;\n                 }\n-                if let Some(let_stmt) = bind_pat.syntax().ancestors().find_map(ast::LetStmt::cast) {\n-                    if let Some(pat) = let_stmt.pat() {\n-                        if pat.syntax().text_range().contains_range(bind_pat.syntax().text_range())\n-                        {\n-                            self.is_pat_binding_or_const = false;\n-                            self.is_irrefutable_let_pat_binding = true;\n+                if let Some(Some(pat)) = bind_pat.syntax().ancestors().find_map(|node| {\n+                    match_ast! {\n+                        match node {\n+                            ast::LetStmt(it) => Some(it.pat()),\n+                            ast::Param(it) => Some(it.pat()),\n+                            _ => None,\n                         }\n                     }\n+                }) {\n+                    if pat.syntax().text_range().contains_range(bind_pat.syntax().text_range()) {\n+                        self.is_pat_binding_or_const = false;\n+                        self.is_irrefutable_pat_binding = true;\n+                    }\n                 }\n             }\n             if is_node::<ast::Param>(name.syntax()) {"}, {"sha": "1ba7201a1385a0beac26cf090cce581354b4cf8e", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -5,6 +5,7 @@ pub(crate) mod macro_;\n pub(crate) mod function;\n pub(crate) mod enum_variant;\n pub(crate) mod const_;\n+pub(crate) mod pattern;\n pub(crate) mod type_alias;\n \n mod builder_ext;\n@@ -159,6 +160,12 @@ impl<'a> Render<'a> {\n                 let item = render_fn(self.ctx, import_to_add, Some(local_name), *func);\n                 return Some(item);\n             }\n+            ScopeDef::ModuleDef(Variant(_))\n+                if self.ctx.completion.is_pat_binding_or_const\n+                    | self.ctx.completion.is_irrefutable_pat_binding =>\n+            {\n+                CompletionItemKind::EnumVariant\n+            }\n             ScopeDef::ModuleDef(Variant(var)) => {\n                 let item = render_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n                 return Some(item);"}, {"sha": "d053a988bc894e0d65c033ec87c4ed939906ba47", "filename": "crates/completion/src/render/builder_ext.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -34,7 +34,6 @@ impl Builder {\n             return false;\n         }\n         if ctx.is_pattern_call {\n-            mark::hit!(dont_duplicate_pattern_parens);\n             return false;\n         }\n         if ctx.is_call {"}, {"sha": "732e139eca25e68d19b279591221565d5c397589", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -124,51 +124,6 @@ use Option::*;\n fn main() -> Option<i32> {\n     Some($0)\n }\n-\"#,\n-        );\n-        check_edit(\n-            \"Some\",\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main(value: Option<i32>) {\n-    match value {\n-        Som<|>\n-    }\n-}\n-\"#,\n-            r#\"\n-enum Option<T> { Some(T), None }\n-use Option::*;\n-fn main(value: Option<i32>) {\n-    match value {\n-        Some($0)\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn dont_duplicate_pattern_parens() {\n-        mark::check!(dont_duplicate_pattern_parens);\n-        check_edit(\n-            \"Var\",\n-            r#\"\n-enum E { Var(i32) }\n-fn main() {\n-    match E::Var(92) {\n-        E::<|>(92) => (),\n-    }\n-}\n-\"#,\n-            r#\"\n-enum E { Var(i32) }\n-fn main() {\n-    match E::Var(92) {\n-        E::Var(92) => (),\n-    }\n-}\n \"#,\n         );\n     }"}, {"sha": "a3b6a3cac7ab45163d1ca38e2c1a213ae53f37b9", "filename": "crates/completion/src/render/pattern.rs", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fpattern.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -0,0 +1,148 @@\n+//! Renderer for patterns.\n+\n+use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n+use itertools::Itertools;\n+\n+use crate::{\n+    config::SnippetCap, item::CompletionKind, render::RenderContext, CompletionItem,\n+    CompletionItemKind,\n+};\n+\n+fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.scope.module()?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .into_iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}\n+\n+pub(crate) fn render_struct_pat(\n+    ctx: RenderContext<'_>,\n+    strukt: hir::Struct,\n+    local_name: Option<Name>,\n+) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_struct_pat\");\n+\n+    let fields = strukt.fields(ctx.db());\n+    let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, strukt)?;\n+\n+    if visible_fields.is_empty() {\n+        // Matching a struct without matching its fields is pointless, unlike matching a Variant without its fields\n+        return None;\n+    }\n+\n+    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_string();\n+    let pat = render_pat(&ctx, &name, strukt.kind(ctx.db()), &visible_fields, fields_omitted)?;\n+\n+    Some(build_completion(ctx, name, pat, strukt))\n+}\n+\n+pub(crate) fn render_variant_pat(\n+    ctx: RenderContext<'_>,\n+    variant: hir::Variant,\n+    local_name: Option<Name>,\n+) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_variant_pat\");\n+\n+    let fields = variant.fields(ctx.db());\n+    let (visible_fields, fields_omitted) = visible_fields(&ctx, &fields, variant)?;\n+\n+    let name = local_name.unwrap_or_else(|| variant.name(ctx.db())).to_string();\n+    let pat = render_pat(&ctx, &name, variant.kind(ctx.db()), &visible_fields, fields_omitted)?;\n+\n+    Some(build_completion(ctx, name, pat, variant))\n+}\n+\n+fn build_completion(\n+    ctx: RenderContext<'_>,\n+    name: String,\n+    pat: String,\n+    item: impl HasAttrs + Copy,\n+) -> CompletionItem {\n+    let completion = CompletionItem::new(CompletionKind::Snippet, ctx.source_range(), name)\n+        .kind(CompletionItemKind::Binding)\n+        .set_documentation(ctx.docs(item))\n+        .set_deprecated(ctx.is_deprecated(item))\n+        .detail(&pat);\n+    let completion = if let Some(snippet_cap) = ctx.snippet_cap() {\n+        completion.insert_snippet(snippet_cap, pat)\n+    } else {\n+        completion.insert_text(pat)\n+    };\n+    completion.build()\n+}\n+\n+fn render_pat(\n+    ctx: &RenderContext<'_>,\n+    name: &str,\n+    kind: StructKind,\n+    fields: &[hir::Field],\n+    fields_omitted: bool,\n+) -> Option<String> {\n+    let mut pat = match kind {\n+        StructKind::Tuple if ctx.snippet_cap().is_some() => {\n+            render_tuple_as_pat(&fields, &name, fields_omitted)\n+        }\n+        StructKind::Record => {\n+            render_record_as_pat(ctx.db(), ctx.snippet_cap(), &fields, &name, fields_omitted)\n+        }\n+        _ => return None,\n+    };\n+\n+    if ctx.completion.is_param {\n+        pat.push(':');\n+        pat.push(' ');\n+        pat.push_str(&name);\n+    }\n+    if ctx.snippet_cap().is_some() {\n+        pat.push_str(\"$0\");\n+    }\n+    Some(pat)\n+}\n+\n+fn render_record_as_pat(\n+    db: &dyn HirDatabase,\n+    snippet_cap: Option<SnippetCap>,\n+    fields: &[hir::Field],\n+    name: &str,\n+    fields_omitted: bool,\n+) -> String {\n+    let fields = fields.iter();\n+    if snippet_cap.is_some() {\n+        format!(\n+            \"{name} {{ {}{} }}\",\n+            fields\n+                .enumerate()\n+                .map(|(idx, field)| format!(\"{}${}\", field.name(db), idx + 1))\n+                .format(\", \"),\n+            if fields_omitted { \", ..\" } else { \"\" },\n+            name = name\n+        )\n+    } else {\n+        format!(\n+            \"{name} {{ {}{} }}\",\n+            fields.map(|field| field.name(db)).format(\", \"),\n+            if fields_omitted { \", ..\" } else { \"\" },\n+            name = name\n+        )\n+    }\n+}\n+\n+fn render_tuple_as_pat(fields: &[hir::Field], name: &str, fields_omitted: bool) -> String {\n+    format!(\n+        \"{name}({}{})\",\n+        fields.iter().enumerate().map(|(idx, _)| format!(\"${}\", idx + 1)).format(\", \"),\n+        if fields_omitted { \", ..\" } else { \"\" },\n+        name = name\n+    )\n+}"}, {"sha": "1d7e5ddd7f6a9aa9710aa36c94fe2391de8abffe", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2f60cb7b83e9ef95d97201d210ff6943b660eb/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=4a2f60cb7b83e9ef95d97201d210ff6943b660eb", "patch": "@@ -511,6 +511,10 @@ impl Struct {\n         db.struct_data(self.id).repr.clone()\n     }\n \n+    pub fn kind(self, db: &dyn HirDatabase) -> StructKind {\n+        self.variant_data(db).kind()\n+    }\n+\n     fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {\n         db.struct_data(self.id).variant_data.clone()\n     }"}]}