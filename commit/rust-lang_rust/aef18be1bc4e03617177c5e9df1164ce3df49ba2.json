{"sha": "aef18be1bc4e03617177c5e9df1164ce3df49ba2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZjE4YmUxYmM0ZTAzNjE3MTc3YzVlOWRmMTE2NGNlM2RmNDliYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-25T19:37:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-25T19:37:43Z"}, "message": "Auto merge of #37111 - TimNN:sized-enums, r=nikomatsakis\n\nDisallow Unsized Enums\n\nFixes #16812.\n\nThis PR is a potential fix for #16812, an issue which is reported [again](https://github.com/rust-lang/rust/issues/36801) and [again](https://github.com/rust-lang/rust/issues/36975), with over a dozen duplicates by now.\n\nThis PR is mainly meant to promoted discussion about the issue and the correct way to fix it.\n\nThis is a [breaking-change] since the error is now reported during wfchecking, so that even the definition of a (potentially) unsized enum will cause an error (whereas it would previously cause an ICE at trans time if the enum was used in an unsized manner).", "tree": {"sha": "07a5992f3609c7392152b34df4126e7d04f524ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a5992f3609c7392152b34df4126e7d04f524ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef18be1bc4e03617177c5e9df1164ce3df49ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef18be1bc4e03617177c5e9df1164ce3df49ba2", "html_url": "https://github.com/rust-lang/rust/commit/aef18be1bc4e03617177c5e9df1164ce3df49ba2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef18be1bc4e03617177c5e9df1164ce3df49ba2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf", "html_url": "https://github.com/rust-lang/rust/commit/67f26f7e0c23b6dcd00f21eae66d7a302cfa17bf"}, {"sha": "db032578a436df5974be8bf9404b26d7661008e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/db032578a436df5974be8bf9404b26d7661008e3", "html_url": "https://github.com/rust-lang/rust/commit/db032578a436df5974be8bf9404b26d7661008e3"}], "stats": {"total": 109, "additions": 76, "deletions": 33}, "files": [{"sha": "9435f96c08a220c2afe2899fa2df97b1d224e08a", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -858,8 +858,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                              trait_name));\n             }\n             ObligationCauseCode::FieldSized => {\n-                err.note(\"only the last field of a struct or enum variant \\\n-                          may have a dynamically sized type\");\n+                err.note(\"only the last field of a struct may have a dynamically sized type\");\n             }\n             ObligationCauseCode::ConstSized => {\n                 err.note(\"constant expressions must have a statically known size\");"}, {"sha": "e3634cfe5f5e3212367992da1e7bc0991ddcdf1c", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -150,7 +150,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n             hir::ItemEnum(ref enum_def, ref ast_generics) => {\n-                self.check_type_defn(item, false, |fcx| {\n+                self.check_type_defn(item, true, |fcx| {\n                     fcx.enum_variants(enum_def)\n                 });\n "}, {"sha": "f250103b1440755da5ae1192fe09cc45c65456bd", "filename": "src/test/compile-fail/issue-17025.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17025.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-test the unsized enum no longer compiles\n+\n enum A {\n     B(char),\n     C([Box<A>]),"}, {"sha": "e14d9f3a35c84ff0fda9e7f8eeca93feb2eb796a", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -20,6 +20,4 @@ fn new_struct(r: A+'static)\n     Struct { r: r }\n }\n \n-trait Curve {}\n-enum E {X(Curve+'static)}\n fn main() {}"}, {"sha": "5d791215f36c60108c3819e98d69d498b252a7b5", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -19,11 +19,4 @@ fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n //\n // Not OK: `T` is not sized.\n \n-enum Bar<U: ?Sized> { BarSome(U), BarNone }\n-fn bar1<T: ?Sized>() { not_sized::<Bar<T>>() }\n-fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n-//~^ ERROR `T: std::marker::Sized` is not satisfied\n-//\n-// Not OK: `Bar<T>` is not sized, but it should be.\n-\n fn main() { }"}, {"sha": "95fc3243fbed34629eb516bc9f6799b4c32cef1b", "filename": "src/test/compile-fail/unsized-enum2.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 206 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+// Due to aggressive error message deduplication, we require 20 *different*\n+// unsized types (even Path and [u8] are considered the \"same\").\n+\n+trait Foo {}\n+trait Bar {}\n+trait FooBar {}\n+trait BarFoo {}\n+\n+trait PathHelper1 {}\n+trait PathHelper2 {}\n+trait PathHelper3 {}\n+trait PathHelper4 {}\n+\n+struct Path1(PathHelper1);\n+struct Path2(PathHelper2);\n+struct Path3(PathHelper3);\n+struct Path4(PathHelper4);\n+\n+enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+    // parameter\n+    VA(W), //~ ERROR `W: std::marker::Sized` is not satisfied\n+    VB{x: X}, //~ ERROR `X: std::marker::Sized` is not satisfied\n+    VC(isize, Y), //~ ERROR `Y: std::marker::Sized` is not satisfied\n+    VD{u: isize, x: Z}, //~ ERROR `Z: std::marker::Sized` is not satisfied\n+\n+    // slice / str\n+    VE([u8]), //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n+    VF{x: str}, //~ ERROR `str: std::marker::Sized` is not satisfied\n+    VG(isize, [f32]), //~ ERROR `[f32]: std::marker::Sized` is not satisfied\n+    VH{u: isize, x: [u32]}, //~ ERROR `[u32]: std::marker::Sized` is not satisfied\n+\n+    // unsized struct\n+    VI(Path1), //~ ERROR `PathHelper1 + 'static: std::marker::Sized` is not satisfied\n+    VJ{x: Path2}, //~ ERROR `PathHelper2 + 'static: std::marker::Sized` is not satisfied\n+    VK(isize, Path3), //~ ERROR `PathHelper3 + 'static: std::marker::Sized` is not satisfied\n+    VL{u: isize, x: Path4}, //~ ERROR `PathHelper4 + 'static: std::marker::Sized` is not satisfied\n+\n+    // plain trait\n+    VM(Foo),  //~ ERROR `Foo + 'static: std::marker::Sized` is not satisfied\n+    VN{x: Bar}, //~ ERROR `Bar + 'static: std::marker::Sized` is not satisfied\n+    VO(isize, FooBar), //~ ERROR `FooBar + 'static: std::marker::Sized` is not satisfied\n+    VP{u: isize, x: BarFoo}, //~ ERROR `BarFoo + 'static: std::marker::Sized` is not satisfied\n+\n+    // projected\n+    VQ(<&'static [i8] as Deref>::Target), //~ ERROR `[i8]: std::marker::Sized` is not satisfied\n+    VR{x: <&'static [char] as Deref>::Target},\n+    //~^ ERROR `[char]: std::marker::Sized` is not satisfied\n+    VS(isize, <&'static [f64] as Deref>::Target),\n+    //~^ ERROR `[f64]: std::marker::Sized` is not satisfied\n+    VT{u: isize, x: <&'static [i32] as Deref>::Target},\n+    //~^ ERROR `[i32]: std::marker::Sized` is not satisfied\n+}\n+\n+\n+fn main() { }\n+"}, {"sha": "9b6ccf22c8da5b9679611366f411a42e83ee0db9", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -31,19 +31,8 @@ fn f3<X: ?Sized + T>(x: &X) {\n fn f4<X: T>(x: &X) {\n }\n \n-// Test with unsized enum.\n-enum E<X: ?Sized> {\n-    V(X),\n-}\n-\n fn f5<Y>(x: &Y) {}\n fn f6<X: ?Sized>(x: &X) {}\n-fn f7<X: ?Sized>(x1: &E<X>, x2: &E<X>) {\n-    f5(x1);\n-    //~^ ERROR `X: std::marker::Sized` is not satisfied\n-    f6(x2); // ok\n-}\n-\n \n // Test with unsized struct.\n struct S<X: ?Sized> {\n@@ -57,13 +46,13 @@ fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n }\n \n // Test some tuples.\n-fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n+fn f9<X: ?Sized>(x1: Box<S<X>>) {\n     f5(&(*x1, 34));\n     //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n \n-fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(32, *x2));\n+fn f10<X: ?Sized>(x1: Box<S<X>>) {\n+    f5(&(32, *x1));\n     //~^ ERROR `X: std::marker::Sized` is not satisfied\n }\n "}, {"sha": "50d8d3d27f27b35d12b8135edbf597a82c76dd83", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef18be1bc4e03617177c5e9df1164ce3df49ba2/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=aef18be1bc4e03617177c5e9df1164ce3df49ba2", "patch": "@@ -89,20 +89,14 @@ trait T7<X: ?Sized+T> {\n     fn m2(&self, x: &T5<X>);\n }\n \n-// The last field in a struct or variant may be unsized\n+// The last field in a struct may be unsized\n struct S2<X: ?Sized> {\n     f: X,\n }\n struct S3<X: ?Sized> {\n     f1: isize,\n     f2: X,\n }\n-enum E<X: ?Sized> {\n-    V1(X),\n-    V2{x: X},\n-    V3(isize, X),\n-    V4{u: isize, x: X},\n-}\n \n pub fn main() {\n }"}]}