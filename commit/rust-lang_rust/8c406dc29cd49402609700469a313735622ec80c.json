{"sha": "8c406dc29cd49402609700469a313735622ec80c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNDA2ZGMyOWNkNDk0MDI2MDk3MDA0NjlhMzEzNzM1NjIyZWM4MGM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-10-27T18:58:00Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-23T01:42:25Z"}, "message": "Allow miri allocation interning to work im generic Machines\n\nThis is necessary so that the `ComstPropMachine` can intern allocations.", "tree": {"sha": "4da987bb283587757b6f0e69fe52f5d17c170d84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da987bb283587757b6f0e69fe52f5d17c170d84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c406dc29cd49402609700469a313735622ec80c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c406dc29cd49402609700469a313735622ec80c", "html_url": "https://github.com/rust-lang/rust/commit/8c406dc29cd49402609700469a313735622ec80c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c406dc29cd49402609700469a313735622ec80c/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "html_url": "https://github.com/rust-lang/rust/commit/f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}], "stats": {"total": 114, "additions": 87, "deletions": 27}, "files": [{"sha": "f82af62c5f39d40845e17fc6f10d80c79c292b41", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=8c406dc29cd49402609700469a313735622ec80c", "patch": "@@ -458,7 +458,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable, Hash)]\n pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,"}, {"sha": "f3c503b2970ab21af0017cc818e3bf6476b66acd", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=8c406dc29cd49402609700469a313735622ec80c", "patch": "@@ -3,22 +3,34 @@\n //! After a const evaluation has computed a value, before we destroy the const evaluator's session\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n \n-use rustc::ty::{Ty, self};\n-use rustc::mir::interpret::{InterpResult, ErrorHandled};\n-use rustc::hir;\n use super::validity::RefTracking;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc::hir;\n+use rustc::mir::interpret::{ErrorHandled, InterpResult};\n+use rustc::ty::{self, Ty};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use syntax::ast::Mutability;\n \n use super::{\n-    ValueVisitor, MemoryKind, AllocId, MPlaceTy, Scalar,\n+    AllocId, Allocation, InterpCx, Machine, MemoryKind, MPlaceTy, Scalar, ValueVisitor,\n };\n-use crate::const_eval::{CompileTimeInterpreter, CompileTimeEvalContext};\n \n-struct InternVisitor<'rt, 'mir, 'tcx> {\n+struct InternVisitor<'rt, 'mir, 'tcx, M>\n+where\n+    M: Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >,\n+{\n     /// The ectx from which we intern.\n-    ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,\n+    ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     /// Previously encountered safe references.\n     ref_tracking: &'rt mut RefTracking<(MPlaceTy<'tcx>, Mutability, InternMode)>,\n     /// A list of all encountered allocations. After type-based interning, we traverse this list to\n@@ -58,18 +70,28 @@ struct IsStaticOrFn;\n /// `immutable` things might become mutable if `ty` is not frozen.\n /// `ty` can be `None` if there is no potential interior mutability\n /// to account for (e.g. for vtables).\n-fn intern_shallow<'rt, 'mir, 'tcx>(\n-    ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,\n+fn intern_shallow<'rt, 'mir, 'tcx, M>(\n+    ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     leftover_allocations: &'rt mut FxHashSet<AllocId>,\n     mode: InternMode,\n     alloc_id: AllocId,\n     mutability: Mutability,\n     ty: Option<Ty<'tcx>>,\n-) -> InterpResult<'tcx, Option<IsStaticOrFn>> {\n-    trace!(\n-        \"InternVisitor::intern {:?} with {:?}\",\n-        alloc_id, mutability,\n-    );\n+) -> InterpResult<'tcx, Option<IsStaticOrFn>>\n+where\n+    M: Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >,\n+{\n+    trace!(\"InternVisitor::intern {:?} with {:?}\", alloc_id, mutability,);\n     // remove allocation\n     let tcx = ecx.tcx;\n     let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {\n@@ -130,7 +152,20 @@ fn intern_shallow<'rt, 'mir, 'tcx>(\n     Ok(None)\n }\n \n-impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n+impl<'rt, 'mir, 'tcx, M> InternVisitor<'rt, 'mir, 'tcx, M>\n+where\n+    M: Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >,\n+{\n     fn intern_shallow(\n         &mut self,\n         alloc_id: AllocId,\n@@ -148,15 +183,27 @@ impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n     }\n }\n \n-impl<'rt, 'mir, 'tcx>\n-    ValueVisitor<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>\n+impl<'rt, 'mir, 'tcx, M>\n+    ValueVisitor<'mir, 'tcx, M>\n for\n-    InternVisitor<'rt, 'mir, 'tcx>\n+    InternVisitor<'rt, 'mir, 'tcx, M>\n+where\n+    M: Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >,\n {\n     type V = MPlaceTy<'tcx>;\n \n     #[inline(always)]\n-    fn ecx(&self) -> &CompileTimeEvalContext<'mir, 'tcx> {\n+    fn ecx(&self) -> &InterpCx<'mir, 'tcx, M> {\n         &self.ecx\n     }\n \n@@ -265,12 +312,25 @@ for\n     }\n }\n \n-pub fn intern_const_alloc_recursive(\n-    ecx: &mut CompileTimeEvalContext<'mir, 'tcx>,\n+pub fn intern_const_alloc_recursive<M>(\n+    ecx: &mut InterpCx<'mir, 'tcx, M>,\n     // The `mutability` of the place, ignoring the type.\n     place_mut: Option<hir::Mutability>,\n     ret: MPlaceTy<'tcx>,\n-) -> InterpResult<'tcx> {\n+) -> InterpResult<'tcx>\n+where\n+    M: Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >,\n+{\n     let tcx = ecx.tcx;\n     let (base_mutability, base_intern_mode) = match place_mut {\n         Some(hir::Mutability::Immutable) => (Mutability::Immutable, InternMode::Static),"}, {"sha": "1a01baccabf7a4b9b8f4e354b57d87c18877e7b3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c406dc29cd49402609700469a313735622ec80c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=8c406dc29cd49402609700469a313735622ec80c", "patch": "@@ -27,7 +27,7 @@ use rustc_macros::HashStable;\n /// operations and fat pointers. This idea was taken from rustc's codegen.\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n pub enum Immediate<Tag=(), Id=AllocId> {\n     Scalar(ScalarMaybeUndef<Tag, Id>),\n     ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n@@ -104,7 +104,7 @@ impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n pub enum Operand<Tag=(), Id=AllocId> {\n     Immediate(Immediate<Tag, Id>),\n     Indirect(MemPlace<Tag, Id>),\n@@ -134,7 +134,7 @@ impl<Tag> Operand<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct OpTy<'tcx, Tag=()> {\n     op: Operand<Tag>, // Keep this private, it helps enforce invariants\n     pub layout: TyLayout<'tcx>,"}]}