{"sha": "6d2080c44878924bdcde57ec7735327af0ee267d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjA4MGM0NDg3ODkyNGJkY2RlNTdlYzc3MzUzMjdhZjBlZTI2N2Q=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-28T17:32:05Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-10-28T17:33:38Z"}, "message": "Address review comments", "tree": {"sha": "e9c77ae45793827074a1200c7d54c893190a3cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9c77ae45793827074a1200c7d54c893190a3cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2080c44878924bdcde57ec7735327af0ee267d", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2080c44878924bdcde57ec7735327af0ee267d", "html_url": "https://github.com/rust-lang/rust/commit/6d2080c44878924bdcde57ec7735327af0ee267d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2080c44878924bdcde57ec7735327af0ee267d/comments", "author": null, "committer": null, "parents": [{"sha": "7f523e72522901d3a0e2666031ec363f5729181a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f523e72522901d3a0e2666031ec363f5729181a", "html_url": "https://github.com/rust-lang/rust/commit/7f523e72522901d3a0e2666031ec363f5729181a"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "4e2ee03877c1e30b87725210dab2a9fee16feab8", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=6d2080c44878924bdcde57ec7735327af0ee267d", "patch": "@@ -104,6 +104,8 @@\n  *   fallthrough node.  It is only live if the function could converge\n  *   via means other than an explicit `return` expression. That is, it is\n  *   only dead if the end of the function's block can never be reached.\n+ *   It is the responsibility of typeck to ensure that there are no\n+ *   `return` expressions in a function declared as diverging.\n  */\n \n use middle::def::*;"}, {"sha": "54f41b79b01307542594e468a34598b3f1a006f5", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=6d2080c44878924bdcde57ec7735327af0ee267d", "patch": "@@ -876,11 +876,8 @@ pub fn trans_call_inner<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         _ => {}\n     }\n \n-    match ret_ty {\n-        ty::FnConverging(_) => {},\n-        ty::FnDiverging => {\n-            Unreachable(bcx);\n-        }\n+    if ret_ty == ty::FnDiverging {\n+        Unreachable(bcx);\n     }\n \n     Result::new(bcx, llresult)"}, {"sha": "0ddd4894cfa28201055a890c938e4ca4bfb5692e", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=6d2080c44878924bdcde57ec7735327af0ee267d", "patch": "@@ -204,7 +204,7 @@ pub fn trans_intrinsic_call<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>, node: ast::N\n \n     fcx.pop_custom_cleanup_scope(cleanup_scope);\n \n-    // The only intrinsic function that diverges.\n+    // These are the only intrinsic functions that diverge.\n     if name.get() == \"abort\" {\n         let llfn = ccx.get_intrinsic(&(\"llvm.trap\"));\n         Call(bcx, llfn, [], None);"}, {"sha": "296158dd4a868e74b104d2f92abd6ce1c4691a23", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2080c44878924bdcde57ec7735327af0ee267d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6d2080c44878924bdcde57ec7735327af0ee267d", "patch": "@@ -957,12 +957,10 @@ impl Repr for ty::FnSig {\n impl Repr for ty::FnOutput {\n     fn repr(&self, tcx: &ctxt) -> String {\n         match *self {\n-          ty::FnConverging(ty) => {\n-            format!(\"FnConverging({0})\", ty.repr(tcx))\n-          }\n-          ty::FnDiverging => {\n-            \"FnDiverging\".to_string()\n-          }\n+            ty::FnConverging(ty) =>\n+                format!(\"FnConverging({0})\", ty.repr(tcx)),\n+            ty::FnDiverging =>\n+                \"FnDiverging\".to_string()\n         }\n     }\n }"}]}