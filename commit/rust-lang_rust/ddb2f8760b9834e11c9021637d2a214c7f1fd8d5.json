{"sha": "ddb2f8760b9834e11c9021637d2a214c7f1fd8d5", "node_id": "C_kwDOAAsO6NoAKGRkYjJmODc2MGI5ODM0ZTExYzkwMjE2MzdkMmEyMTRjN2YxZmQ4ZDU", "commit": {"author": {"name": "Alex Vasilev", "email": "vaspiring@gmail.com", "date": "2023-01-20T19:00:38Z"}, "committer": {"name": "Alex Vasilev", "email": "vaspiring@gmail.com", "date": "2023-01-20T19:00:38Z"}, "message": "typo fix", "tree": {"sha": "2a0cf90910282d6b3506892f92a580d97f700d79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a0cf90910282d6b3506892f92a580d97f700d79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5", "html_url": "https://github.com/rust-lang/rust/commit/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5/comments", "author": {"login": "vasilev-alex", "id": 4973437, "node_id": "MDQ6VXNlcjQ5NzM0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4973437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasilev-alex", "html_url": "https://github.com/vasilev-alex", "followers_url": "https://api.github.com/users/vasilev-alex/followers", "following_url": "https://api.github.com/users/vasilev-alex/following{/other_user}", "gists_url": "https://api.github.com/users/vasilev-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasilev-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasilev-alex/subscriptions", "organizations_url": "https://api.github.com/users/vasilev-alex/orgs", "repos_url": "https://api.github.com/users/vasilev-alex/repos", "events_url": "https://api.github.com/users/vasilev-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/vasilev-alex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vasilev-alex", "id": 4973437, "node_id": "MDQ6VXNlcjQ5NzM0Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4973437?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vasilev-alex", "html_url": "https://github.com/vasilev-alex", "followers_url": "https://api.github.com/users/vasilev-alex/followers", "following_url": "https://api.github.com/users/vasilev-alex/following{/other_user}", "gists_url": "https://api.github.com/users/vasilev-alex/gists{/gist_id}", "starred_url": "https://api.github.com/users/vasilev-alex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vasilev-alex/subscriptions", "organizations_url": "https://api.github.com/users/vasilev-alex/orgs", "repos_url": "https://api.github.com/users/vasilev-alex/repos", "events_url": "https://api.github.com/users/vasilev-alex/events{/privacy}", "received_events_url": "https://api.github.com/users/vasilev-alex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69ffbe25a1ed473678ac142ad5ce852f82d041c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/69ffbe25a1ed473678ac142ad5ce852f82d041c6", "html_url": "https://github.com/rust-lang/rust/commit/69ffbe25a1ed473678ac142ad5ce852f82d041c6"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "f6213a6a88ece54225d441114f839a1f3ce20cd1", "filename": "crates/ide-assists/src/handlers/add_braces.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb2f8760b9834e11c9021637d2a214c7f1fd8d5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_braces.rs?ref=ddb2f8760b9834e11c9021637d2a214c7f1fd8d5", "patch": "@@ -5,36 +5,9 @@ use syntax::{\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-enum ParentType {\n-    MatchArmExpr,\n-    ClosureExpr,\n-}\n-\n-fn get_replacement_node(ctx: &AssistContext<'_>) -> Option<(ParentType, ast::Expr)> {\n-    if let Some(match_arm) = ctx.find_node_at_offset::<ast::MatchArm>() {\n-        let match_arm_expr = match_arm.syntax().children().find_map(ast::Expr::cast)?;\n-\n-        if matches!(match_arm_expr, ast::Expr::BlockExpr(_)) {\n-            return None;\n-        }\n-\n-        return Some((ParentType::MatchArmExpr, match_arm_expr));\n-    } else if let Some(closure_expr) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n-        let body = closure_expr.body()?;\n-\n-        if matches!(body, ast::Expr::BlockExpr(_)) {\n-            return None;\n-        }\n-\n-        return Some((ParentType::ClosureExpr, body));\n-    }\n-\n-    None\n-}\n-\n // Assist: add_braces\n //\n-// Adds braces to lamda and match arm expressions\n+// Adds braces to lambda and match arm expressions.\n //\n // ```\n // fn foo(n: i32) -> i32 {\n@@ -61,7 +34,7 @@ pub(crate) fn add_braces(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n     acc.add(\n         AssistId(\"wrap_with_braces\", AssistKind::RefactorRewrite),\n         match expr_type {\n-            ParentType::ClosureExpr => \"Add braces to lamda expression\",\n+            ParentType::ClosureExpr => \"Add braces to lambda expression\",\n             ParentType::MatchArmExpr => \"Add braces to arm expression\",\n         },\n         expr.syntax().text_range(),\n@@ -78,6 +51,33 @@ pub(crate) fn add_braces(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n     Some(())\n }\n \n+enum ParentType {\n+    MatchArmExpr,\n+    ClosureExpr,\n+}\n+\n+fn get_replacement_node(ctx: &AssistContext<'_>) -> Option<(ParentType, ast::Expr)> {\n+    if let Some(match_arm) = ctx.find_node_at_offset::<ast::MatchArm>() {\n+        let match_arm_expr = match_arm.syntax().children().find_map(ast::Expr::cast)?;\n+\n+        if matches!(match_arm_expr, ast::Expr::BlockExpr(_)) {\n+            return None;\n+        }\n+\n+        return Some((ParentType::MatchArmExpr, match_arm_expr));\n+    } else if let Some(closure_expr) = ctx.find_node_at_offset::<ast::ClosureExpr>() {\n+        let body = closure_expr.body()?;\n+\n+        if matches!(body, ast::Expr::BlockExpr(_)) {\n+            return None;\n+        }\n+\n+        return Some((ParentType::ClosureExpr, body));\n+    }\n+\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};"}]}