{"sha": "417168587beda80b97e9de83b61cbb8517a61dbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzE2ODU4N2JlZGE4MGI5N2U5ZGU4M2I2MWNiYjg1MTdhNjFkYmM=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-01T21:52:56Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:28:29Z"}, "message": "Fixed bug with Self type param coming before lifetimes.", "tree": {"sha": "13b8a1b1fff49905f2abd8a5dabffd5b100f2506", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13b8a1b1fff49905f2abd8a5dabffd5b100f2506"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417168587beda80b97e9de83b61cbb8517a61dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417168587beda80b97e9de83b61cbb8517a61dbc", "html_url": "https://github.com/rust-lang/rust/commit/417168587beda80b97e9de83b61cbb8517a61dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417168587beda80b97e9de83b61cbb8517a61dbc/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "url": "https://api.github.com/repos/rust-lang/rust/commits/c04559fe9eb14e59cfe35c2676cd5d93a5eab326", "html_url": "https://github.com/rust-lang/rust/commit/c04559fe9eb14e59cfe35c2676cd5d93a5eab326"}], "stats": {"total": 82, "additions": 52, "deletions": 30}, "files": [{"sha": "a387765085a29c940362c952c719d12a8214f17f", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=417168587beda80b97e9de83b61cbb8517a61dbc", "patch": "@@ -447,6 +447,17 @@ fn krate<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) -> NamedRegionMap {\n     map\n }\n \n+/// In traits, there is an implicit `Self` type parameter which comes before the generics.\n+/// We have to account for this when computing the index of the other generic parameters.\n+/// This function returns whether there is such an implicit parameter defined on the given item.\n+fn sub_items_have_self_param(node: &hir::ItemKind) -> bool {\n+    match *node {\n+        hir::ItemKind::Trait(..) |\n+        hir::ItemKind::TraitAlias(..) => true,\n+        _ => false,\n+    }\n+}\n+\n impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::All(&self.tcx.hir)\n@@ -522,8 +533,8 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     hir::ItemKind::Impl(..) => true,\n                     _ => false,\n                 };\n-                // These kinds of items have only early bound lifetime parameters.\n-                let mut index = if let hir::ItemKind::Trait(..) = item.node {\n+                // These kinds of items have only early-bound lifetime parameters.\n+                let mut index = if sub_items_have_self_param(&item.node) {\n                     1 // Self comes before lifetimes\n                 } else {\n                     0\n@@ -1602,8 +1613,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut index = 0;\n         if let Some(parent_id) = parent_id {\n             let parent = self.tcx.hir.expect_item(parent_id);\n-            if let hir::ItemKind::Trait(..) = parent.node {\n-                index += 1; // Self comes first.\n+            if sub_items_have_self_param(&parent.node) {\n+                index += 1; // Self comes before lifetimes\n             }\n             match parent.node {\n                 hir::ItemKind::Trait(_, _, ref generics, ..)"}, {"sha": "c136d76e358d38b54309450a41c5b8d0597ca20d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=417168587beda80b97e9de83b61cbb8517a61dbc", "patch": "@@ -357,14 +357,12 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n             .flat_map(|bp| {\n                 let bt = if is_param(self.tcx, &bp.bounded_ty, param_id) {\n                     Some(ty)\n-                } else if only_self_bounds.0 {\n-                    None\n-                } else {\n+                } else if !only_self_bounds.0 {\n                     Some(self.to_ty(&bp.bounded_ty))\n+                } else {\n+                    None\n                 };\n-                bp.bounds.iter().filter_map(move |b| {\n-                    if let Some(bt) = bt { Some((bt, b)) } else { None }\n-                })\n+                bp.bounds.iter().filter_map(move |b| bt.map(|bt| (bt, b)))\n             })\n             .flat_map(|(bt, b)| predicates_from_bound(self, bt, b));\n "}, {"sha": "d8ac1a8c63464025cfcf01e467b6096ec4bd490c", "filename": "src/test/run-pass/traits/trait-alias-bounds.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-bounds.rs?ref=417168587beda80b97e9de83b61cbb8517a61dbc", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017-2018 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,25 +12,6 @@\n \n use std::marker::PhantomData;\n \n-trait SimpleAlias = Default;\n-trait GenericAlias<T> = Iterator<Item = T>;\n-trait Partial<T> = IntoIterator<Item = T>;\n-trait SpecificAlias = GenericAlias<i32>;\n-trait PartialEqRef<'a, T> = PartialEq<&'a T>;\n-trait StaticAlias = 'static;\n-\n-trait Things<T> {}\n-trait Romeo {}\n-#[allow(dead_code)]\n-struct The<T>(T);\n-#[allow(dead_code)]\n-struct Fore<T>(T);\n-impl<T, U> Things<T> for The<U> {}\n-impl<T> Romeo for Fore<T> {}\n-\n-trait WithWhere<Art, Thou> = Romeo + Romeo where Fore<(Art, Thou)>: Romeo;\n-trait BareWhere<Wild, Are> = where The<Wild>: Things<Are>;\n-\n trait Empty {}\n trait EmptyAlias = Empty;\n trait CloneDefault = Clone + Default;"}, {"sha": "a9b7afb0ea343b3d6d114c726dc6dcf80dd13cea", "filename": "src/test/run-pass/traits/trait-alias-syntax.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417168587beda80b97e9de83b61cbb8517a61dbc/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias-syntax.rs?ref=417168587beda80b97e9de83b61cbb8517a61dbc", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait SimpleAlias = Default;\n+trait GenericAlias<T> = Iterator<Item = T>;\n+trait Partial<T> = IntoIterator<Item = T>;\n+trait SpecificAlias = GenericAlias<i32>;\n+trait PartialEqRef<'a, T: 'a> = PartialEq<&'a T>;\n+trait StaticAlias = 'static;\n+\n+trait Things<T> {}\n+trait Romeo {}\n+#[allow(dead_code)]\n+struct The<T>(T);\n+#[allow(dead_code)]\n+struct Fore<T>(T);\n+impl<T, U> Things<T> for The<U> {}\n+impl<T> Romeo for Fore<T> {}\n+\n+trait WithWhere<Art, Thou> = Romeo + Romeo where Fore<(Art, Thou)>: Romeo;\n+trait BareWhere<Wild, Are> = where The<Wild>: Things<Are>;\n+\n+fn main() {}"}]}