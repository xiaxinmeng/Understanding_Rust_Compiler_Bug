{"sha": "290c638b5f8f03704744351fa3aa02fb04b00ffc", "node_id": "C_kwDOAAsO6NoAKDI5MGM2MzhiNWY4ZjAzNzA0NzQ0MzUxZmEzYWEwMmZiMDRiMDBmZmM", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-03T15:36:44Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-03-06T17:49:48Z"}, "message": "Implement type_of for RPITITs assoc type", "tree": {"sha": "3054903eba11d736a76059afa92015a66d0d6400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3054903eba11d736a76059afa92015a66d0d6400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/290c638b5f8f03704744351fa3aa02fb04b00ffc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmQGJ7wACgkQgTGiTgx5\n768Ivg//VCObyeq1t19DfiwDcv0AK4q9/eEFekObc01TuO1BIwtW5fSRr9B8FVNS\nU1At55IkXStaV2lKbgCxZpl3i0237LbisquCKa0Z1783mAGRjtSmEW4+p1jtJhyw\n8SvJWSNc4u9IUSZ2drffeedT2IRnWkLPC44/3b/RfPeoFR3A3r86s//9Cn5TpYMx\nt4Ffk2yfPN1Bg3f6eTdc4bksFsb2HvJ9TOVlD7CZOF4VhwdonWnRN7bI7g6LpQWC\nrFlBc+qeOzhRH/iZg6zfWYPCkWW/47JQDa86uypRqqykorwGQgCUKTKLiOpDQ573\n8OUWDxOtsqhJ9Ubnc4iaWuLf2LC3GyJatnTB9OImAbT7O7tVXrEmRldzwaCaQ2YA\ni3+vt3pkG4x88CQQLjsaUwylMOlaqweQMfJ1V0mQ2ZK45P1J0K+byHpnFQxu9ZCp\nqOagUJ6snTAnxr9rLHwFnc2aCvpR1J91gCC3ucZo/Z1Y1k5OTh2RcvchGNbFU5gf\nuNezfg7w3ZUZZya9HBFWb3NmGlKHu1TqAvKEorNS0T9B+wMr2UKpfi8htG8yXsX8\nqBOpXTAohM+gTHW+VIuz9g/ETs63vsAE0X9jReLNc8jq+VVQQWnITWr4bMc/zatx\n4bWXdzhTg4+h7im1CDO1tKXt7u2HiuZY/vxgR/5j9zGLxEkoK7c=\n=SSIj\n-----END PGP SIGNATURE-----", "payload": "tree 3054903eba11d736a76059afa92015a66d0d6400\nparent e10034c6360916c0fdddf092bb3b7db3c98e436f\nauthor Santiago Pastorino <spastorino@gmail.com> 1677857804 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1678124988 -0300\n\nImplement type_of for RPITITs assoc type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/290c638b5f8f03704744351fa3aa02fb04b00ffc", "html_url": "https://github.com/rust-lang/rust/commit/290c638b5f8f03704744351fa3aa02fb04b00ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/290c638b5f8f03704744351fa3aa02fb04b00ffc/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e10034c6360916c0fdddf092bb3b7db3c98e436f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e10034c6360916c0fdddf092bb3b7db3c98e436f", "html_url": "https://github.com/rust-lang/rust/commit/e10034c6360916c0fdddf092bb3b7db3c98e436f"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "045a8a57186d7fcf9aa07d9d6c4a2cad0ac6f8b6", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/290c638b5f8f03704744351fa3aa02fb04b00ffc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/290c638b5f8f03704744351fa3aa02fb04b00ffc/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=290c638b5f8f03704744351fa3aa02fb04b00ffc", "patch": "@@ -9,7 +9,8 @@ use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{\n-    self, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n+    self, ImplTraitInTraitData, IsSuggestable, Ty, TyCtxt, TypeFolder, TypeSuperFoldable,\n+    TypeVisitableExt,\n };\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, DUMMY_SP};\n@@ -244,6 +245,24 @@ fn get_path_containing_arg_in_pat<'hir>(\n }\n \n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::EarlyBinder<Ty<'_>> {\n+    // If we are computing `type_of` the synthesized associated type for an RPITIT in the impl\n+    // side, use `collect_return_position_impl_trait_in_trait_tys` to infer the value of the\n+    // associated type in the impl.\n+    if let Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        match tcx.collect_return_position_impl_trait_in_trait_tys(fn_def_id) {\n+            Ok(map) => {\n+                let assoc_item = tcx.associated_item(def_id);\n+                return ty::EarlyBinder(map[&assoc_item.trait_item_def_id.unwrap()]);\n+            }\n+            Err(_) => {\n+                return ty::EarlyBinder(tcx.ty_error_with_message(\n+                    DUMMY_SP,\n+                    \"Could not collect return position impl trait in trait tys\",\n+                ));\n+            }\n+        }\n+    }\n+\n     let def_id = def_id.expect_local();\n     use rustc_hir::*;\n "}]}