{"sha": "0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmY2FkOWNkMjk4NmI3ZTMzZWZkZTNmMzljN2YxY2FkYTI4YzNiOTk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-07-25T09:30:32Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-22T21:31:47Z"}, "message": "Add backwards-compat hack for certain '$name' tokens\n\nSee issue #74616", "tree": {"sha": "d7a0869141eb56d1130e809e520b5a537ee36c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7a0869141eb56d1130e809e520b5a537ee36c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9BjsQACgkQtAh+UQ6Y\nsWRtAw//e1jB69wrgtA5t7AK50L0ow7ZFepm9Nopoiz24hCcCTgV2kQkKHsLQesi\nFM7Sq4LV9XlVQDheyGCWa3SNOO/ynDy1S74Vx/GIWiTleecClumyZ+nB4RSJm47a\nJ69HOVDREm6xk6j9EeSuM41yoJXKLGz0G6oez9IG++T7Dwojq4aGy0aIrWbO98z8\nsnNMLW+WRPzPUQtZFbcdZ9v7dtgAuramVAYW/6Ar0tzjwAJ6OKwBhszbxpZEZ/x0\nBinq2MUhda9XGGQPfRkLS4f/JLUNaEQpK8nRsPj45TngUshwMOb8ivSh+Qq88dMJ\n7dfBPeV36Rm7zOHvjRExx9zryos+HsE2TKxYvYBz1VxPw0nJVd3ZyzkwHgKXHm33\neG74xd0ccCuMpLzxenq26G7YxZ0fm3I1PJKng55ghS7r4X51aoRhI0lfv4U5mAPd\nVH6KSdoBOuoJus0ZhN4MVmIiT2Ytz3Lt8l/1TcrPKe6Uvsf9akYhA6FZE1iNwA33\nhaip+Ux6PcGTInQFk+m6fEcme9H/s/2FKsIaKyfzVlVJHC4hiJ96mLtn4JSnWSMO\nDDBBSjsCr+Mt7jTUjsLz+8gFTPR0qLuxO10n7pnjdR4ap1A4wf1U6kvuZ0621oqs\nBAgLV9oww23jlVfFIeI0lztxq2/24Miws7zhmNjQ7ZvEJ8Zj1UQ=\n=SsLJ\n-----END PGP SIGNATURE-----", "payload": "tree d7a0869141eb56d1130e809e520b5a537ee36c7e\nparent cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6\nauthor Aaron Hill <aa1ronham@gmail.com> 1595669432 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1598131907 -0400\n\nAdd backwards-compat hack for certain '$name' tokens\n\nSee issue #74616\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "html_url": "https://github.com/rust-lang/rust/commit/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6", "html_url": "https://github.com/rust-lang/rust/commit/cd24aee8e6dbbb394a58ab4c9871b66ee1ab17a6"}], "stats": {"total": 111, "additions": 103, "deletions": 8}, "files": [{"sha": "4a8bf6b4f19b604bc815c12cc869db8cce47d3a9", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -11,9 +11,11 @@ use crate::tokenstream::TokenTree;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n+use rustc_span::hygiene::ExpnKind;\n+use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::{self, Span, DUMMY_SP};\n+use rustc_span::{self, FileName, RealFileName, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n \n@@ -808,6 +810,31 @@ impl Nonterminal {\n         }\n         false\n     }\n+\n+    // See issue #74616 for details\n+    pub fn ident_name_compatibility_hack(\n+        &self,\n+        orig_span: Span,\n+        source_map: &SourceMap,\n+    ) -> Option<(Ident, bool)> {\n+        if let NtIdent(ident, is_raw) = self {\n+            if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n+                let filename = source_map.span_to_filename(orig_span);\n+                if let FileName::Real(RealFileName::Named(path)) = filename {\n+                    if (path.ends_with(\"time-macros-impl/src/lib.rs\")\n+                        && macro_name == sym::impl_macros)\n+                        || (path.ends_with(\"js-sys/src/lib.rs\") && macro_name == sym::arrays)\n+                    {\n+                        let snippet = source_map.span_to_snippet(orig_span);\n+                        if snippet.as_deref() == Ok(\"$name\") {\n+                            return Some((*ident, *is_raw));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        None\n+    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "409784812f58f46e213989a4ca8163b752c80a90", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -173,13 +173,19 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                let stream = nt_to_tokenstream(&nt, sess, span);\n-                TokenTree::Group(Group {\n-                    delimiter: Delimiter::None,\n-                    stream,\n-                    span: DelimSpan::from_single(span),\n-                    flatten: nt.pretty_printing_compatibility_hack(),\n-                })\n+                if let Some((name, is_raw)) =\n+                    nt.ident_name_compatibility_hack(span, sess.source_map())\n+                {\n+                    TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n+                } else {\n+                    let stream = nt_to_tokenstream(&nt, sess, span);\n+                    TokenTree::Group(Group {\n+                        delimiter: Delimiter::None,\n+                        stream,\n+                        span: DelimSpan::from_single(span),\n+                        flatten: nt.pretty_printing_compatibility_hack(),\n+                    })\n+                }\n             }\n \n             OpenDelim(..) | CloseDelim(..) => unreachable!(),"}, {"sha": "e8067ddc7786b64ce71e3263d51433066ba53a99", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -258,6 +258,7 @@ symbols! {\n         arith_offset,\n         arm_target_feature,\n         array,\n+        arrays,\n         as_str,\n         asm,\n         assert,\n@@ -571,6 +572,7 @@ symbols! {\n         ignore,\n         impl_header_lifetime_elision,\n         impl_lint_pass,\n+        impl_macros,\n         impl_trait_in_bindings,\n         import_shadowing,\n         in_band_lifetimes,"}, {"sha": "5cd3b40a2e42a149920e891b7e181ce7e68c2168", "filename": "src/test/ui/proc-macro/group-compat-hack/auxiliary/group-compat-hack.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fauxiliary%2Fgroup-compat-hack.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -0,0 +1,13 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn my_macro(_attr: TokenStream, input: TokenStream) -> TokenStream {\n+    println!(\"Called proc_macro_hack with {:?}\", input);\n+    input\n+}"}, {"sha": "35c101587de05d6329db2812a92879eab4e08ab9", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+// aux-build:group-compat-hack.rs\n+// compile-flags: -Z span-debug\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use] extern crate group_compat_hack;\n+\n+// Tests the backwards compatibility hack added for certain macros\n+// When an attribute macro named `proc_macro_hack` or `wasm_bindgen`\n+// has an `NtIdent` named `$name`, we pass a plain `Ident` token in\n+// place of a `None`-delimited group. This allows us to maintain\n+// backwards compatibility for older versions of these crates.\n+\n+include!(\"js-sys/src/lib.rs\");\n+include!(\"time-macros-impl/src/lib.rs\");\n+\n+macro_rules! other {\n+    ($name:ident) => {\n+        #[my_macro] struct Three($name);\n+    }\n+}\n+\n+fn main() {\n+    struct Foo;\n+    impl_macros!(Foo);\n+    arrays!(Foo);\n+    other!(Foo);\n+}"}, {"sha": "d519daab1f287478fb8c9906dea18773bfdd9d18", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -0,0 +1,3 @@\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#5) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#5) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#5) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#5) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#9) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#9) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#9) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#9) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:21:21: 21:27 (#13) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:21:28: 21:33 (#13) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:21:34: 21:39 (#13) }], span: $DIR/group-compat-hack.rs:21:33: 21:40 (#13) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:21:40: 21:41 (#13) }]"}, {"sha": "d1a66940ebf3cfba4ce0b79eee84a10063c03b3c", "filename": "src/test/ui/proc-macro/group-compat-hack/js-sys/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fjs-sys%2Fsrc%2Flib.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! arrays {\n+    ($name:ident) => {\n+        #[my_macro] struct Two($name);\n+    }\n+}"}, {"sha": "c94c357920974b1e3e6c8f45fb1cc5f06a63cf3e", "filename": "src/test/ui/proc-macro/group-compat-hack/time-macros-impl/src/lib.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcad9cd2986b7e33efde3f39c7f1cada28c3b99/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Ftime-macros-impl%2Fsrc%2Flib.rs?ref=0fcad9cd2986b7e33efde3f39c7f1cada28c3b99", "patch": "@@ -0,0 +1,7 @@\n+// ignore-test this is not a test\n+\n+macro_rules! impl_macros {\n+    ($name:ident) => {\n+        #[my_macro] struct One($name);\n+    }\n+}"}]}