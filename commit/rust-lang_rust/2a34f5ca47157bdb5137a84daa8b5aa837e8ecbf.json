{"sha": "2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzRmNWNhNDcxNTdiZGI1MTM3YTg0ZGFhOGI1YWE4MzdlOGVjYmY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-19T10:17:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-19T10:17:23Z"}, "message": "Merge #1698\n\n1698: use derive(Debug) for SyntaxKind r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fa5d522b8c4767c324da6c192cb9665349f58ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa5d522b8c4767c324da6c192cb9665349f58ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdWnczCRBK7hj4Ov3rIwAAdHIIADpae2AqTT59R2Qen0pZICD2\nkdDOt1Yp8ucz+RzQ4SlqQLkl559GAtlILxfSqgwui/rcExee54JnHMYh8XUbmj0Q\nmwC/VKdH8MtL7Qdqy5M6NwQmV6IcsZJVNxh5n2Z1e2pVt/14n0AFTmI0tgHucJ9B\nQmFVTMxOB/Zy8UHJAbDOUFVDE1aW2AK2/jARMlvenoQmiJCc7Y9kIE4dtQ2rUcS/\nh9G5z88yK1gxLekdTk8hvghrWSXR7MpjEFaK7JiKcMIjO52Ukk2JRrihw/aTDVA3\ndpFghh8oxTRirZFkJiDAEp9AKvwt3Av0jCcBosyC5tfMdA7VbQnU8u21RrwmtcM=\n=5Sjv\n-----END PGP SIGNATURE-----\n", "payload": "tree fa5d522b8c4767c324da6c192cb9665349f58ea5\nparent 53241928e5866b5aa501710e59b264905beeca1a\nparent 00ccc6c292ded3bd79df7daa24c3fe8ab02dcd83\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566209843 +0000\ncommitter GitHub <noreply@github.com> 1566209843 +0000\n\nMerge #1698\n\n1698: use derive(Debug) for SyntaxKind r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "html_url": "https://github.com/rust-lang/rust/commit/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53241928e5866b5aa501710e59b264905beeca1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/53241928e5866b5aa501710e59b264905beeca1a", "html_url": "https://github.com/rust-lang/rust/commit/53241928e5866b5aa501710e59b264905beeca1a"}, {"sha": "00ccc6c292ded3bd79df7daa24c3fe8ab02dcd83", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ccc6c292ded3bd79df7daa24c3fe8ab02dcd83", "html_url": "https://github.com/rust-lang/rust/commit/00ccc6c292ded3bd79df7daa24c3fe8ab02dcd83"}], "stats": {"total": 294, "additions": 10, "deletions": 284}, "files": [{"sha": "3efcfa4030306e1ffdf3b0d1f70b887d9b628068", "filename": "crates/ra_parser/src/syntax_kind.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind.rs?ref=2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "patch": "@@ -1,19 +1,19 @@\n #[macro_use]\n mod generated;\n \n-use std::fmt;\n-\n pub use self::generated::SyntaxKind;\n \n-impl fmt::Debug for SyntaxKind {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let name = self.info().name;\n-        f.write_str(name)\n+impl From<u16> for SyntaxKind {\n+    fn from(d: u16) -> SyntaxKind {\n+        assert!(d <= (SyntaxKind::__LAST as u16));\n+        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n     }\n }\n \n-pub(crate) struct SyntaxInfo {\n-    pub name: &'static str,\n+impl From<SyntaxKind> for u16 {\n+    fn from(k: SyntaxKind) -> u16 {\n+        k as u16\n+    }\n }\n \n impl SyntaxKind {"}, {"sha": "3a67d7dddd92cfec4339f56dcfbc532003abeda2", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 247, "changes": 248, "blob_url": "https://github.com/rust-lang/rust/blob/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "patch": "@@ -1,9 +1,8 @@\n // Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n-use super::SyntaxInfo;\n #[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[repr(u16)]\n pub enum SyntaxKind {\n     #[doc(hidden)]\n@@ -241,17 +240,6 @@ pub enum SyntaxKind {\n     __LAST,\n }\n use self::SyntaxKind::*;\n-impl From<u16> for SyntaxKind {\n-    fn from(d: u16) -> SyntaxKind {\n-        assert!(d <= (__LAST as u16));\n-        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n-    }\n-}\n-impl From<SyntaxKind> for u16 {\n-    fn from(k: SyntaxKind) -> u16 {\n-        k as u16\n-    }\n-}\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n@@ -282,240 +270,6 @@ impl SyntaxKind {\n             _ => false,\n         }\n     }\n-    pub(crate) fn info(self) -> &'static SyntaxInfo {\n-        match self {\n-            SEMI => &SyntaxInfo { name: stringify!(SEMI) },\n-            COMMA => &SyntaxInfo { name: stringify!(COMMA) },\n-            L_PAREN => &SyntaxInfo { name: stringify!(L_PAREN) },\n-            R_PAREN => &SyntaxInfo { name: stringify!(R_PAREN) },\n-            L_CURLY => &SyntaxInfo { name: stringify!(L_CURLY) },\n-            R_CURLY => &SyntaxInfo { name: stringify!(R_CURLY) },\n-            L_BRACK => &SyntaxInfo { name: stringify!(L_BRACK) },\n-            R_BRACK => &SyntaxInfo { name: stringify!(R_BRACK) },\n-            L_ANGLE => &SyntaxInfo { name: stringify!(L_ANGLE) },\n-            R_ANGLE => &SyntaxInfo { name: stringify!(R_ANGLE) },\n-            AT => &SyntaxInfo { name: stringify!(AT) },\n-            POUND => &SyntaxInfo { name: stringify!(POUND) },\n-            TILDE => &SyntaxInfo { name: stringify!(TILDE) },\n-            QUESTION => &SyntaxInfo { name: stringify!(QUESTION) },\n-            DOLLAR => &SyntaxInfo { name: stringify!(DOLLAR) },\n-            AMP => &SyntaxInfo { name: stringify!(AMP) },\n-            PIPE => &SyntaxInfo { name: stringify!(PIPE) },\n-            PLUS => &SyntaxInfo { name: stringify!(PLUS) },\n-            STAR => &SyntaxInfo { name: stringify!(STAR) },\n-            SLASH => &SyntaxInfo { name: stringify!(SLASH) },\n-            CARET => &SyntaxInfo { name: stringify!(CARET) },\n-            PERCENT => &SyntaxInfo { name: stringify!(PERCENT) },\n-            UNDERSCORE => &SyntaxInfo { name: stringify!(UNDERSCORE) },\n-            DOT => &SyntaxInfo { name: stringify!(DOT) },\n-            DOTDOT => &SyntaxInfo { name: stringify!(DOTDOT) },\n-            DOTDOTDOT => &SyntaxInfo { name: stringify!(DOTDOTDOT) },\n-            DOTDOTEQ => &SyntaxInfo { name: stringify!(DOTDOTEQ) },\n-            COLON => &SyntaxInfo { name: stringify!(COLON) },\n-            COLONCOLON => &SyntaxInfo { name: stringify!(COLONCOLON) },\n-            EQ => &SyntaxInfo { name: stringify!(EQ) },\n-            EQEQ => &SyntaxInfo { name: stringify!(EQEQ) },\n-            FAT_ARROW => &SyntaxInfo { name: stringify!(FAT_ARROW) },\n-            EXCL => &SyntaxInfo { name: stringify!(EXCL) },\n-            NEQ => &SyntaxInfo { name: stringify!(NEQ) },\n-            MINUS => &SyntaxInfo { name: stringify!(MINUS) },\n-            THIN_ARROW => &SyntaxInfo { name: stringify!(THIN_ARROW) },\n-            LTEQ => &SyntaxInfo { name: stringify!(LTEQ) },\n-            GTEQ => &SyntaxInfo { name: stringify!(GTEQ) },\n-            PLUSEQ => &SyntaxInfo { name: stringify!(PLUSEQ) },\n-            MINUSEQ => &SyntaxInfo { name: stringify!(MINUSEQ) },\n-            PIPEEQ => &SyntaxInfo { name: stringify!(PIPEEQ) },\n-            AMPEQ => &SyntaxInfo { name: stringify!(AMPEQ) },\n-            CARETEQ => &SyntaxInfo { name: stringify!(CARETEQ) },\n-            SLASHEQ => &SyntaxInfo { name: stringify!(SLASHEQ) },\n-            STAREQ => &SyntaxInfo { name: stringify!(STAREQ) },\n-            PERCENTEQ => &SyntaxInfo { name: stringify!(PERCENTEQ) },\n-            AMPAMP => &SyntaxInfo { name: stringify!(AMPAMP) },\n-            PIPEPIPE => &SyntaxInfo { name: stringify!(PIPEPIPE) },\n-            SHL => &SyntaxInfo { name: stringify!(SHL) },\n-            SHR => &SyntaxInfo { name: stringify!(SHR) },\n-            SHLEQ => &SyntaxInfo { name: stringify!(SHLEQ) },\n-            SHREQ => &SyntaxInfo { name: stringify!(SHREQ) },\n-            ASYNC_KW => &SyntaxInfo { name: stringify!(ASYNC_KW) },\n-            USE_KW => &SyntaxInfo { name: stringify!(USE_KW) },\n-            FN_KW => &SyntaxInfo { name: stringify!(FN_KW) },\n-            STRUCT_KW => &SyntaxInfo { name: stringify!(STRUCT_KW) },\n-            ENUM_KW => &SyntaxInfo { name: stringify!(ENUM_KW) },\n-            TRAIT_KW => &SyntaxInfo { name: stringify!(TRAIT_KW) },\n-            IMPL_KW => &SyntaxInfo { name: stringify!(IMPL_KW) },\n-            DYN_KW => &SyntaxInfo { name: stringify!(DYN_KW) },\n-            TRUE_KW => &SyntaxInfo { name: stringify!(TRUE_KW) },\n-            FALSE_KW => &SyntaxInfo { name: stringify!(FALSE_KW) },\n-            AS_KW => &SyntaxInfo { name: stringify!(AS_KW) },\n-            EXTERN_KW => &SyntaxInfo { name: stringify!(EXTERN_KW) },\n-            CRATE_KW => &SyntaxInfo { name: stringify!(CRATE_KW) },\n-            MOD_KW => &SyntaxInfo { name: stringify!(MOD_KW) },\n-            PUB_KW => &SyntaxInfo { name: stringify!(PUB_KW) },\n-            SELF_KW => &SyntaxInfo { name: stringify!(SELF_KW) },\n-            SUPER_KW => &SyntaxInfo { name: stringify!(SUPER_KW) },\n-            IN_KW => &SyntaxInfo { name: stringify!(IN_KW) },\n-            WHERE_KW => &SyntaxInfo { name: stringify!(WHERE_KW) },\n-            FOR_KW => &SyntaxInfo { name: stringify!(FOR_KW) },\n-            LOOP_KW => &SyntaxInfo { name: stringify!(LOOP_KW) },\n-            WHILE_KW => &SyntaxInfo { name: stringify!(WHILE_KW) },\n-            CONTINUE_KW => &SyntaxInfo { name: stringify!(CONTINUE_KW) },\n-            BREAK_KW => &SyntaxInfo { name: stringify!(BREAK_KW) },\n-            IF_KW => &SyntaxInfo { name: stringify!(IF_KW) },\n-            ELSE_KW => &SyntaxInfo { name: stringify!(ELSE_KW) },\n-            MATCH_KW => &SyntaxInfo { name: stringify!(MATCH_KW) },\n-            CONST_KW => &SyntaxInfo { name: stringify!(CONST_KW) },\n-            STATIC_KW => &SyntaxInfo { name: stringify!(STATIC_KW) },\n-            MUT_KW => &SyntaxInfo { name: stringify!(MUT_KW) },\n-            UNSAFE_KW => &SyntaxInfo { name: stringify!(UNSAFE_KW) },\n-            TYPE_KW => &SyntaxInfo { name: stringify!(TYPE_KW) },\n-            REF_KW => &SyntaxInfo { name: stringify!(REF_KW) },\n-            LET_KW => &SyntaxInfo { name: stringify!(LET_KW) },\n-            MOVE_KW => &SyntaxInfo { name: stringify!(MOVE_KW) },\n-            RETURN_KW => &SyntaxInfo { name: stringify!(RETURN_KW) },\n-            TRY_KW => &SyntaxInfo { name: stringify!(TRY_KW) },\n-            BOX_KW => &SyntaxInfo { name: stringify!(BOX_KW) },\n-            AWAIT_KW => &SyntaxInfo { name: stringify!(AWAIT_KW) },\n-            AUTO_KW => &SyntaxInfo { name: stringify!(AUTO_KW) },\n-            DEFAULT_KW => &SyntaxInfo { name: stringify!(DEFAULT_KW) },\n-            EXISTENTIAL_KW => &SyntaxInfo { name: stringify!(EXISTENTIAL_KW) },\n-            UNION_KW => &SyntaxInfo { name: stringify!(UNION_KW) },\n-            INT_NUMBER => &SyntaxInfo { name: stringify!(INT_NUMBER) },\n-            FLOAT_NUMBER => &SyntaxInfo { name: stringify!(FLOAT_NUMBER) },\n-            CHAR => &SyntaxInfo { name: stringify!(CHAR) },\n-            BYTE => &SyntaxInfo { name: stringify!(BYTE) },\n-            STRING => &SyntaxInfo { name: stringify!(STRING) },\n-            RAW_STRING => &SyntaxInfo { name: stringify!(RAW_STRING) },\n-            BYTE_STRING => &SyntaxInfo { name: stringify!(BYTE_STRING) },\n-            RAW_BYTE_STRING => &SyntaxInfo { name: stringify!(RAW_BYTE_STRING) },\n-            ERROR => &SyntaxInfo { name: stringify!(ERROR) },\n-            IDENT => &SyntaxInfo { name: stringify!(IDENT) },\n-            WHITESPACE => &SyntaxInfo { name: stringify!(WHITESPACE) },\n-            LIFETIME => &SyntaxInfo { name: stringify!(LIFETIME) },\n-            COMMENT => &SyntaxInfo { name: stringify!(COMMENT) },\n-            SHEBANG => &SyntaxInfo { name: stringify!(SHEBANG) },\n-            L_DOLLAR => &SyntaxInfo { name: stringify!(L_DOLLAR) },\n-            R_DOLLAR => &SyntaxInfo { name: stringify!(R_DOLLAR) },\n-            SOURCE_FILE => &SyntaxInfo { name: stringify!(SOURCE_FILE) },\n-            STRUCT_DEF => &SyntaxInfo { name: stringify!(STRUCT_DEF) },\n-            ENUM_DEF => &SyntaxInfo { name: stringify!(ENUM_DEF) },\n-            FN_DEF => &SyntaxInfo { name: stringify!(FN_DEF) },\n-            RET_TYPE => &SyntaxInfo { name: stringify!(RET_TYPE) },\n-            EXTERN_CRATE_ITEM => &SyntaxInfo { name: stringify!(EXTERN_CRATE_ITEM) },\n-            MODULE => &SyntaxInfo { name: stringify!(MODULE) },\n-            USE_ITEM => &SyntaxInfo { name: stringify!(USE_ITEM) },\n-            STATIC_DEF => &SyntaxInfo { name: stringify!(STATIC_DEF) },\n-            CONST_DEF => &SyntaxInfo { name: stringify!(CONST_DEF) },\n-            TRAIT_DEF => &SyntaxInfo { name: stringify!(TRAIT_DEF) },\n-            IMPL_BLOCK => &SyntaxInfo { name: stringify!(IMPL_BLOCK) },\n-            TYPE_ALIAS_DEF => &SyntaxInfo { name: stringify!(TYPE_ALIAS_DEF) },\n-            MACRO_CALL => &SyntaxInfo { name: stringify!(MACRO_CALL) },\n-            TOKEN_TREE => &SyntaxInfo { name: stringify!(TOKEN_TREE) },\n-            PAREN_TYPE => &SyntaxInfo { name: stringify!(PAREN_TYPE) },\n-            TUPLE_TYPE => &SyntaxInfo { name: stringify!(TUPLE_TYPE) },\n-            NEVER_TYPE => &SyntaxInfo { name: stringify!(NEVER_TYPE) },\n-            PATH_TYPE => &SyntaxInfo { name: stringify!(PATH_TYPE) },\n-            POINTER_TYPE => &SyntaxInfo { name: stringify!(POINTER_TYPE) },\n-            ARRAY_TYPE => &SyntaxInfo { name: stringify!(ARRAY_TYPE) },\n-            SLICE_TYPE => &SyntaxInfo { name: stringify!(SLICE_TYPE) },\n-            REFERENCE_TYPE => &SyntaxInfo { name: stringify!(REFERENCE_TYPE) },\n-            PLACEHOLDER_TYPE => &SyntaxInfo { name: stringify!(PLACEHOLDER_TYPE) },\n-            FN_POINTER_TYPE => &SyntaxInfo { name: stringify!(FN_POINTER_TYPE) },\n-            FOR_TYPE => &SyntaxInfo { name: stringify!(FOR_TYPE) },\n-            IMPL_TRAIT_TYPE => &SyntaxInfo { name: stringify!(IMPL_TRAIT_TYPE) },\n-            DYN_TRAIT_TYPE => &SyntaxInfo { name: stringify!(DYN_TRAIT_TYPE) },\n-            REF_PAT => &SyntaxInfo { name: stringify!(REF_PAT) },\n-            BIND_PAT => &SyntaxInfo { name: stringify!(BIND_PAT) },\n-            PLACEHOLDER_PAT => &SyntaxInfo { name: stringify!(PLACEHOLDER_PAT) },\n-            PATH_PAT => &SyntaxInfo { name: stringify!(PATH_PAT) },\n-            STRUCT_PAT => &SyntaxInfo { name: stringify!(STRUCT_PAT) },\n-            FIELD_PAT_LIST => &SyntaxInfo { name: stringify!(FIELD_PAT_LIST) },\n-            FIELD_PAT => &SyntaxInfo { name: stringify!(FIELD_PAT) },\n-            TUPLE_STRUCT_PAT => &SyntaxInfo { name: stringify!(TUPLE_STRUCT_PAT) },\n-            TUPLE_PAT => &SyntaxInfo { name: stringify!(TUPLE_PAT) },\n-            SLICE_PAT => &SyntaxInfo { name: stringify!(SLICE_PAT) },\n-            RANGE_PAT => &SyntaxInfo { name: stringify!(RANGE_PAT) },\n-            LITERAL_PAT => &SyntaxInfo { name: stringify!(LITERAL_PAT) },\n-            TUPLE_EXPR => &SyntaxInfo { name: stringify!(TUPLE_EXPR) },\n-            ARRAY_EXPR => &SyntaxInfo { name: stringify!(ARRAY_EXPR) },\n-            PAREN_EXPR => &SyntaxInfo { name: stringify!(PAREN_EXPR) },\n-            PATH_EXPR => &SyntaxInfo { name: stringify!(PATH_EXPR) },\n-            LAMBDA_EXPR => &SyntaxInfo { name: stringify!(LAMBDA_EXPR) },\n-            IF_EXPR => &SyntaxInfo { name: stringify!(IF_EXPR) },\n-            WHILE_EXPR => &SyntaxInfo { name: stringify!(WHILE_EXPR) },\n-            CONDITION => &SyntaxInfo { name: stringify!(CONDITION) },\n-            LOOP_EXPR => &SyntaxInfo { name: stringify!(LOOP_EXPR) },\n-            FOR_EXPR => &SyntaxInfo { name: stringify!(FOR_EXPR) },\n-            CONTINUE_EXPR => &SyntaxInfo { name: stringify!(CONTINUE_EXPR) },\n-            BREAK_EXPR => &SyntaxInfo { name: stringify!(BREAK_EXPR) },\n-            LABEL => &SyntaxInfo { name: stringify!(LABEL) },\n-            BLOCK_EXPR => &SyntaxInfo { name: stringify!(BLOCK_EXPR) },\n-            RETURN_EXPR => &SyntaxInfo { name: stringify!(RETURN_EXPR) },\n-            MATCH_EXPR => &SyntaxInfo { name: stringify!(MATCH_EXPR) },\n-            MATCH_ARM_LIST => &SyntaxInfo { name: stringify!(MATCH_ARM_LIST) },\n-            MATCH_ARM => &SyntaxInfo { name: stringify!(MATCH_ARM) },\n-            MATCH_GUARD => &SyntaxInfo { name: stringify!(MATCH_GUARD) },\n-            STRUCT_LIT => &SyntaxInfo { name: stringify!(STRUCT_LIT) },\n-            NAMED_FIELD_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_LIST) },\n-            NAMED_FIELD => &SyntaxInfo { name: stringify!(NAMED_FIELD) },\n-            TRY_BLOCK_EXPR => &SyntaxInfo { name: stringify!(TRY_BLOCK_EXPR) },\n-            BOX_EXPR => &SyntaxInfo { name: stringify!(BOX_EXPR) },\n-            CALL_EXPR => &SyntaxInfo { name: stringify!(CALL_EXPR) },\n-            INDEX_EXPR => &SyntaxInfo { name: stringify!(INDEX_EXPR) },\n-            METHOD_CALL_EXPR => &SyntaxInfo { name: stringify!(METHOD_CALL_EXPR) },\n-            FIELD_EXPR => &SyntaxInfo { name: stringify!(FIELD_EXPR) },\n-            AWAIT_EXPR => &SyntaxInfo { name: stringify!(AWAIT_EXPR) },\n-            TRY_EXPR => &SyntaxInfo { name: stringify!(TRY_EXPR) },\n-            CAST_EXPR => &SyntaxInfo { name: stringify!(CAST_EXPR) },\n-            REF_EXPR => &SyntaxInfo { name: stringify!(REF_EXPR) },\n-            PREFIX_EXPR => &SyntaxInfo { name: stringify!(PREFIX_EXPR) },\n-            RANGE_EXPR => &SyntaxInfo { name: stringify!(RANGE_EXPR) },\n-            BIN_EXPR => &SyntaxInfo { name: stringify!(BIN_EXPR) },\n-            BLOCK => &SyntaxInfo { name: stringify!(BLOCK) },\n-            EXTERN_BLOCK => &SyntaxInfo { name: stringify!(EXTERN_BLOCK) },\n-            EXTERN_ITEM_LIST => &SyntaxInfo { name: stringify!(EXTERN_ITEM_LIST) },\n-            ENUM_VARIANT => &SyntaxInfo { name: stringify!(ENUM_VARIANT) },\n-            NAMED_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF_LIST) },\n-            NAMED_FIELD_DEF => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF) },\n-            POS_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(POS_FIELD_DEF_LIST) },\n-            POS_FIELD_DEF => &SyntaxInfo { name: stringify!(POS_FIELD_DEF) },\n-            ENUM_VARIANT_LIST => &SyntaxInfo { name: stringify!(ENUM_VARIANT_LIST) },\n-            ITEM_LIST => &SyntaxInfo { name: stringify!(ITEM_LIST) },\n-            ATTR => &SyntaxInfo { name: stringify!(ATTR) },\n-            META_ITEM => &SyntaxInfo { name: stringify!(META_ITEM) },\n-            USE_TREE => &SyntaxInfo { name: stringify!(USE_TREE) },\n-            USE_TREE_LIST => &SyntaxInfo { name: stringify!(USE_TREE_LIST) },\n-            PATH => &SyntaxInfo { name: stringify!(PATH) },\n-            PATH_SEGMENT => &SyntaxInfo { name: stringify!(PATH_SEGMENT) },\n-            LITERAL => &SyntaxInfo { name: stringify!(LITERAL) },\n-            ALIAS => &SyntaxInfo { name: stringify!(ALIAS) },\n-            VISIBILITY => &SyntaxInfo { name: stringify!(VISIBILITY) },\n-            WHERE_CLAUSE => &SyntaxInfo { name: stringify!(WHERE_CLAUSE) },\n-            WHERE_PRED => &SyntaxInfo { name: stringify!(WHERE_PRED) },\n-            ABI => &SyntaxInfo { name: stringify!(ABI) },\n-            NAME => &SyntaxInfo { name: stringify!(NAME) },\n-            NAME_REF => &SyntaxInfo { name: stringify!(NAME_REF) },\n-            LET_STMT => &SyntaxInfo { name: stringify!(LET_STMT) },\n-            EXPR_STMT => &SyntaxInfo { name: stringify!(EXPR_STMT) },\n-            TYPE_PARAM_LIST => &SyntaxInfo { name: stringify!(TYPE_PARAM_LIST) },\n-            LIFETIME_PARAM => &SyntaxInfo { name: stringify!(LIFETIME_PARAM) },\n-            TYPE_PARAM => &SyntaxInfo { name: stringify!(TYPE_PARAM) },\n-            TYPE_ARG_LIST => &SyntaxInfo { name: stringify!(TYPE_ARG_LIST) },\n-            LIFETIME_ARG => &SyntaxInfo { name: stringify!(LIFETIME_ARG) },\n-            TYPE_ARG => &SyntaxInfo { name: stringify!(TYPE_ARG) },\n-            ASSOC_TYPE_ARG => &SyntaxInfo { name: stringify!(ASSOC_TYPE_ARG) },\n-            PARAM_LIST => &SyntaxInfo { name: stringify!(PARAM_LIST) },\n-            PARAM => &SyntaxInfo { name: stringify!(PARAM) },\n-            SELF_PARAM => &SyntaxInfo { name: stringify!(SELF_PARAM) },\n-            ARG_LIST => &SyntaxInfo { name: stringify!(ARG_LIST) },\n-            TYPE_BOUND => &SyntaxInfo { name: stringify!(TYPE_BOUND) },\n-            TYPE_BOUND_LIST => &SyntaxInfo { name: stringify!(TYPE_BOUND_LIST) },\n-            MACRO_ITEMS => &SyntaxInfo { name: stringify!(MACRO_ITEMS) },\n-            MACRO_STMTS => &SyntaxInfo { name: stringify!(MACRO_STMTS) },\n-            TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n-            EOF => &SyntaxInfo { name: \"EOF\" },\n-            __LAST => &SyntaxInfo { name: \"__LAST\" },\n-        }\n-    }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {\n             \"async\" => ASYNC_KW,"}, {"sha": "486a3fdec452fa81d25fb38bc2b2623cf1880c4f", "filename": "crates/ra_tools/src/boilerplate_gen.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs?ref=2a34f5ca47157bdb5137a84daa8b5aa837e8ecbf", "patch": "@@ -195,10 +195,8 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n \n     let ast = quote! {\n         #![allow(bad_style, missing_docs, unreachable_pub)]\n-        use super::SyntaxInfo;\n-\n         /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n-        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+        #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n         #[repr(u16)]\n         pub enum SyntaxKind {\n             // Technical SyntaxKinds: they appear temporally during parsing,\n@@ -219,19 +217,6 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n         }\n         use self::SyntaxKind::*;\n \n-        impl From<u16> for SyntaxKind {\n-            fn from(d: u16) -> SyntaxKind {\n-                assert!(d <= (__LAST as u16));\n-                unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n-            }\n-        }\n-\n-        impl From<SyntaxKind> for u16 {\n-            fn from(k: SyntaxKind) -> u16 {\n-                k as u16\n-            }\n-        }\n-\n         impl SyntaxKind {\n             pub fn is_keyword(self) -> bool {\n                 match self {\n@@ -254,19 +239,6 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n                 }\n             }\n \n-            pub(crate) fn info(self) -> &'static SyntaxInfo {\n-                match self {\n-                    #(#punctuation => &SyntaxInfo { name: stringify!(#punctuation) },)*\n-                    #(#all_keywords => &SyntaxInfo { name: stringify!(#all_keywords) },)*\n-                    #(#literals => &SyntaxInfo { name: stringify!(#literals) },)*\n-                    #(#tokens => &SyntaxInfo { name: stringify!(#tokens) },)*\n-                    #(#nodes => &SyntaxInfo { name: stringify!(#nodes) },)*\n-                    TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n-                    EOF => &SyntaxInfo { name: \"EOF\" },\n-                    __LAST => &SyntaxInfo { name: \"__LAST\" },\n-                }\n-            }\n-\n             pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n                 let kw = match ident {\n                     #(#full_keywords_values => #full_keywords,)*"}]}