{"sha": "e14cd392a4278223d858451a7b5cae327f76707c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNGNkMzkyYTQyNzgyMjNkODU4NDUxYTdiNWNhZTMyN2Y3NjcwN2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-06T07:44:40Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-11T20:15:52Z"}, "message": "initial sketch of codegen mode for compiletest; doesn't measure / compare / ratchet the disassembly yet", "tree": {"sha": "e4a82f71c3a43db88b03e23bad8d645f936d7403", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a82f71c3a43db88b03e23bad8d645f936d7403"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e14cd392a4278223d858451a7b5cae327f76707c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e14cd392a4278223d858451a7b5cae327f76707c", "html_url": "https://github.com/rust-lang/rust/commit/e14cd392a4278223d858451a7b5cae327f76707c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e14cd392a4278223d858451a7b5cae327f76707c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "278ed50e0a66f4c549e43c82e4a545890091e9ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/278ed50e0a66f4c549e43c82e4a545890091e9ba", "html_url": "https://github.com/rust-lang/rust/commit/278ed50e0a66f4c549e43c82e4a545890091e9ba"}], "stats": {"total": 186, "additions": 169, "deletions": 17}, "files": [{"sha": "df00286c87f2504943308d139497ad5e2ca3a25c", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=e14cd392a4278223d858451a7b5cae327f76707c", "patch": "@@ -15,6 +15,7 @@ pub enum mode {\n     mode_run_pass,\n     mode_pretty,\n     mode_debug_info,\n+    mode_codegen\n }\n \n pub struct config {\n@@ -27,6 +28,12 @@ pub struct config {\n     // The rustc executable\n     rustc_path: Path,\n \n+    // The clang executable\n+    clang_path: Option<Path>,\n+\n+    // The llvm binaries path\n+    llvm_bin_path: Option<Path>,\n+\n     // The directory containing the tests to run\n     src_base: Path,\n "}, {"sha": "5d3f81fd884566eceb6472fa9db69b1374086058", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=e14cd392a4278223d858451a7b5cae327f76707c", "patch": "@@ -19,6 +19,7 @@ extern mod extra;\n use std::os;\n \n use extra::getopts;\n+use extra::getopts::groups::{optopt, optflag, reqopt};\n use extra::test;\n \n use common::config;\n@@ -27,6 +28,7 @@ use common::mode_run_fail;\n use common::mode_compile_fail;\n use common::mode_pretty;\n use common::mode_debug_info;\n+use common::mode_codegen;\n use common::mode;\n use util::logv;\n \n@@ -45,31 +47,54 @@ pub fn main() {\n }\n \n pub fn parse_config(args: ~[~str]) -> config {\n-    let opts =\n-        ~[getopts::reqopt(\"compile-lib-path\"),\n-          getopts::reqopt(\"run-lib-path\"),\n-          getopts::reqopt(\"rustc-path\"), getopts::reqopt(\"src-base\"),\n-          getopts::reqopt(\"build-base\"), getopts::reqopt(\"aux-base\"),\n-          getopts::reqopt(\"stage-id\"),\n-          getopts::reqopt(\"mode\"), getopts::optflag(\"ignored\"),\n-          getopts::optopt(\"runtool\"), getopts::optopt(\"rustcflags\"),\n-          getopts::optflag(\"verbose\"),\n-          getopts::optopt(\"logfile\"),\n-          getopts::optflag(\"jit\"),\n-          getopts::optflag(\"newrt\"),\n-          getopts::optopt(\"target\"),\n-          getopts::optopt(\"adb-path\"),\n-          getopts::optopt(\"adb-test-dir\")\n+\n+    let groups : ~[getopts::groups::OptGroup] =\n+        ~[reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\"),\n+          reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\"),\n+          reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\"),\n+          optopt(\"\", \"clang-path\", \"path to  executable for codegen tests\", \"PATH\"),\n+          optopt(\"\", \"llvm-bin-path\", \"path to directory holding llvm binaries\", \"DIR\"),\n+          reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\"),\n+          reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\"),\n+          reqopt(\"\", \"aux-base\", \"directory to find auxiliary test files\", \"PATH\"),\n+          reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\"),\n+          reqopt(\"\", \"mode\", \"which sort of compile tests to run\",\n+                 \"(compile-fail|run-fail|run-pass|pretty|debug-info)\"),\n+          optflag(\"\", \"ignored\", \"run tests marked as ignored / xfailed\"),\n+          optopt(\"\", \"runtool\", \"supervisor program to run tests under \\\n+                                 (eg. emulator, valgrind)\", \"PROGRAM\"),\n+          optopt(\"\", \"rustcflags\", \"flags to pass to rustc\", \"FLAGS\"),\n+          optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\"),\n+          optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n+          optflag(\"\", \"jit\", \"run tests under the JIT\"),\n+          optflag(\"\", \"newrt\", \"run tests on the new runtime / scheduler\"),\n+          optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n+          optopt(\"\", \"adb-path\", \"path to the android debugger\", \"PATH\"),\n+          optopt(\"\", \"adb-test-dir\", \"path to tests for the android debugger\", \"PATH\"),\n+          optflag(\"h\", \"help\", \"show this message\"),\n          ];\n \n     assert!(!args.is_empty());\n+    let argv0 = copy args[0];\n     let args_ = args.tail();\n+    if args[1] == ~\"-h\" || args[1] == ~\"--help\" {\n+        let message = fmt!(\"Usage: %s [OPTIONS] [TESTNAME...]\", argv0);\n+        io::println(getopts::groups::usage(message, groups));\n+        fail!()\n+    }\n+\n     let matches =\n-        &match getopts::getopts(args_, opts) {\n+        &match getopts::groups::getopts(args_, groups) {\n           Ok(m) => m,\n           Err(f) => fail!(getopts::fail_str(f))\n         };\n \n+    if getopts::opt_present(matches, \"h\") || getopts::opt_present(matches, \"help\") {\n+        let message = fmt!(\"Usage: %s [OPTIONS]  [TESTNAME...]\", argv0);\n+        io::println(getopts::groups::usage(message, groups));\n+        fail!()\n+    }\n+\n     fn opt_path(m: &getopts::Matches, nm: &str) -> Path {\n         Path(getopts::opt_str(m, nm))\n     }\n@@ -78,6 +103,8 @@ pub fn parse_config(args: ~[~str]) -> config {\n         compile_lib_path: getopts::opt_str(matches, \"compile-lib-path\"),\n         run_lib_path: getopts::opt_str(matches, \"run-lib-path\"),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n+        clang_path: getopts::opt_maybe_str(matches, \"clang-path\").map(|s| Path(*s)),\n+        llvm_bin_path: getopts::opt_maybe_str(matches, \"llvm-bin-path\").map(|s| Path(*s)),\n         src_base: opt_path(matches, \"src-base\"),\n         build_base: opt_path(matches, \"build-base\"),\n         aux_base: opt_path(matches, \"aux-base\"),\n@@ -159,6 +186,7 @@ pub fn str_mode(s: ~str) -> mode {\n       ~\"run-pass\" => mode_run_pass,\n       ~\"pretty\" => mode_pretty,\n       ~\"debug-info\" => mode_debug_info,\n+      ~\"codegen\" => mode_codegen,\n       _ => fail!(\"invalid mode\")\n     }\n }\n@@ -170,6 +198,7 @@ pub fn mode_str(mode: mode) -> ~str {\n       mode_run_pass => ~\"run-pass\",\n       mode_pretty => ~\"pretty\",\n       mode_debug_info => ~\"debug-info\",\n+      mode_codegen => ~\"codegen\",\n     }\n }\n "}, {"sha": "dee07c6de495df1345a7193eaab60044795c26f9", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14cd392a4278223d858451a7b5cae327f76707c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=e14cd392a4278223d858451a7b5cae327f76707c", "patch": "@@ -39,7 +39,8 @@ pub fn run(config: config, testfile: ~str) {\n       mode_run_fail => run_rfail_test(&config, &props, &testfile),\n       mode_run_pass => run_rpass_test(&config, &props, &testfile),\n       mode_pretty => run_pretty_test(&config, &props, &testfile),\n-      mode_debug_info => run_debuginfo_test(&config, &props, &testfile)\n+      mode_debug_info => run_debuginfo_test(&config, &props, &testfile),\n+      mode_codegen => run_codegen_test(&config, &props, &testfile)\n     }\n }\n \n@@ -835,3 +836,118 @@ fn _arm_push_aux_shared_library(config: &config, testfile: &Path) {\n         }\n     }\n }\n+\n+// codegen tests (vs. clang)\n+\n+fn make_o_name(config: &config, testfile: &Path) -> Path {\n+    output_base_name(config, testfile).with_filetype(\"o\")\n+}\n+\n+fn append_suffix_to_stem(p: &Path, suffix: &str) -> Path {\n+    if suffix.len() == 0 {\n+        copy *p\n+    } else {\n+        let stem = p.filestem().get();\n+        p.with_filestem(stem + \"-\" + suffix)\n+    }\n+}\n+\n+fn compile_test_and_save_bitcode(config: &config, props: &TestProps,\n+                                 testfile: &Path) -> ProcRes {\n+    let link_args = ~[~\"-L\", aux_output_dir_name(config, testfile).to_str()];\n+    let llvm_args = ~[~\"-c\", ~\"--lib\", ~\"--save-temps\"];\n+    let args = make_compile_args(config, props,\n+                                 link_args + llvm_args,\n+                                 make_o_name, testfile);\n+    compose_and_run_compiler(config, props, testfile, args, None)\n+}\n+\n+fn compile_cc_with_clang_and_save_bitcode(config: &config, _props: &TestProps,\n+                                          testfile: &Path) -> ProcRes {\n+    let bitcodefile = output_base_name(config, testfile).with_filetype(\"bc\");\n+    let bitcodefile = append_suffix_to_stem(&bitcodefile, \"clang\");\n+    let ProcArgs = ProcArgs {\n+        prog: config.clang_path.get_ref().to_str(),\n+        args: ~[~\"-c\",\n+                ~\"-emit-llvm\",\n+                ~\"-o\", bitcodefile.to_str(),\n+                testfile.with_filetype(\"cc\").to_str() ]\n+    };\n+    compose_and_run(config, testfile, ProcArgs, ~[], \"\", None)\n+}\n+\n+fn extract_function_from_bitcode(config: &config, _props: &TestProps,\n+                                 fname: &str, testfile: &Path,\n+                                 suffix: &str) -> ProcRes {\n+    let bitcodefile = output_base_name(config, testfile).with_filetype(\"bc\");\n+    let bitcodefile = append_suffix_to_stem(&bitcodefile, suffix);\n+    let extracted_bc = append_suffix_to_stem(&bitcodefile, \"extract\");\n+    let ProcArgs = ProcArgs {\n+        prog: config.llvm_bin_path.get_ref().push(\"llvm-extract\").to_str(),\n+        args: ~[~\"-func=\" + fname,\n+                ~\"-o=\" + extracted_bc.to_str(),\n+                bitcodefile.to_str() ]\n+    };\n+    compose_and_run(config, testfile, ProcArgs, ~[], \"\", None)\n+}\n+\n+fn disassemble_extract(config: &config, _props: &TestProps,\n+                       testfile: &Path, suffix: &str) -> ProcRes {\n+    let bitcodefile = output_base_name(config, testfile).with_filetype(\"bc\");\n+    let bitcodefile = append_suffix_to_stem(&bitcodefile, suffix);\n+    let extracted_bc = append_suffix_to_stem(&bitcodefile, \"extract\");\n+    let extracted_ll = extracted_bc.with_filetype(\"ll\");\n+    let ProcArgs = ProcArgs {\n+        prog: config.llvm_bin_path.get_ref().push(\"llvm-dis\").to_str(),\n+        args: ~[~\"-o=\" + extracted_ll.to_str(),\n+                extracted_bc.to_str() ]\n+    };\n+    compose_and_run(config, testfile, ProcArgs, ~[], \"\", None)\n+}\n+\n+\n+fn run_codegen_test(config: &config, props: &TestProps, testfile: &Path) {\n+\n+    if config.llvm_bin_path.is_none() {\n+        fatal(~\"missing --llvm-bin-path\");\n+    }\n+\n+    if config.clang_path.is_none() {\n+        fatal(~\"missing --clang-path\");\n+    }\n+\n+    let mut ProcRes = compile_test_and_save_bitcode(config, props, testfile);\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"compilation failed!\", &ProcRes);\n+    }\n+\n+    ProcRes = extract_function_from_bitcode(config, props, \"test\", testfile, \"\");\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"extracting 'test' function failed\", &ProcRes);\n+    }\n+\n+    ProcRes = disassemble_extract(config, props, testfile, \"\");\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"disassembling extract failed\", &ProcRes);\n+    }\n+\n+\n+    let mut ProcRes = compile_cc_with_clang_and_save_bitcode(config, props, testfile);\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"compilation failed!\", &ProcRes);\n+    }\n+\n+    ProcRes = extract_function_from_bitcode(config, props, \"test\", testfile, \"clang\");\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"extracting 'test' function failed\", &ProcRes);\n+    }\n+\n+    ProcRes = disassemble_extract(config, props, testfile, \"clang\");\n+    if ProcRes.status != 0 {\n+        fatal_ProcRes(~\"disassembling extract failed\", &ProcRes);\n+    }\n+\n+\n+\n+}\n+"}]}