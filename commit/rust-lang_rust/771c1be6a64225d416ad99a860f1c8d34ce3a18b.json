{"sha": "771c1be6a64225d416ad99a860f1c8d34ce3a18b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWMxYmU2YTY0MjI1ZDQxNmFkOTlhODYwZjFjOGQzNGNlM2ExOGI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-30T00:07:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T02:51:29Z"}, "message": "rt: Refactor the scheduler loop so that it can be driven from without", "tree": {"sha": "707af1e6c74a8434f9500f040dade8e9a1fb83b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/707af1e6c74a8434f9500f040dade8e9a1fb83b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771c1be6a64225d416ad99a860f1c8d34ce3a18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771c1be6a64225d416ad99a860f1c8d34ce3a18b", "html_url": "https://github.com/rust-lang/rust/commit/771c1be6a64225d416ad99a860f1c8d34ce3a18b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771c1be6a64225d416ad99a860f1c8d34ce3a18b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243790836a40fd3f23d8bd16d8f45430d19aae61", "url": "https://api.github.com/repos/rust-lang/rust/commits/243790836a40fd3f23d8bd16d8f45430d19aae61", "html_url": "https://github.com/rust-lang/rust/commit/243790836a40fd3f23d8bd16d8f45430d19aae61"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "3ddf23cd9a1ceb8a3fb66ba65ac4a32c6b90f583", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/771c1be6a64225d416ad99a860f1c8d34ce3a18b/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/771c1be6a64225d416ad99a860f1c8d34ce3a18b/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=771c1be6a64225d416ad99a860f1c8d34ce3a18b", "patch": "@@ -182,6 +182,7 @@ rust_sched_loop::log_state() {\n         }\n     }\n }\n+\n /**\n  * Starts the main scheduler loop which performs task scheduling for this\n  * domain.\n@@ -191,11 +192,29 @@ rust_sched_loop::log_state() {\n  */\n void\n rust_sched_loop::start_main_loop() {\n+    DLOG(this, dom, \"started domain loop %d\", id);\n+\n+    rust_sched_loop_state state = sched_loop_state_keep_going;\n+    while (state != sched_loop_state_exit) {\n+        state = run_single_turn();\n+\n+        scoped_lock with(lock);\n+        if (!should_exit && running_tasks.length() == 0) {\n+            lock.wait();\n+        }\n+        DLOG(this, task,\n+             \"scheduler %d resuming ...\", id);\n+    }\n+}\n+\n+rust_sched_loop_state\n+rust_sched_loop::run_single_turn() {\n     lock.lock();\n \n-    DLOG(this, dom, \"started domain loop %d\", id);\n+    if (!should_exit) {\n+        A(this, dead_task == NULL,\n+          \"Tasks should only die after running\");\n \n-    while (!should_exit) {\n         DLOG(this, dom, \"worker %d, number_of_live_tasks = %d\",\n              id, number_of_live_tasks());\n \n@@ -206,12 +225,9 @@ rust_sched_loop::start_main_loop() {\n             DLOG(this, task,\n                  \"all tasks are blocked, scheduler id %d yielding ...\",\n                  id);\n-            lock.wait();\n-            A(this, dead_task == NULL,\n-              \"Tasks should only die after running\");\n-            DLOG(this, task,\n-                 \"scheduler %d resuming ...\", id);\n-            continue;\n+\n+            lock.unlock();\n+            return sched_loop_state_block;\n         }\n \n         I(this, scheduled_task->running());\n@@ -239,23 +255,27 @@ rust_sched_loop::start_main_loop() {\n              id);\n \n         reap_dead_tasks();\n-    }\n \n-    A(this, running_tasks.is_empty(), \"Should have no running tasks\");\n-    A(this, blocked_tasks.is_empty(), \"Should have no blocked tasks\");\n-    A(this, dead_task == NULL, \"Should have no dead tasks\");\n+        lock.unlock();\n+        return sched_loop_state_keep_going;\n+    } else {\n+        A(this, running_tasks.is_empty(), \"Should have no running tasks\");\n+        A(this, blocked_tasks.is_empty(), \"Should have no blocked tasks\");\n+        A(this, dead_task == NULL, \"Should have no dead tasks\");\n \n-    DLOG(this, dom, \"finished main-loop %d\", id);\n+        DLOG(this, dom, \"finished main-loop %d\", id);\n \n-    lock.unlock();\n+        lock.unlock();\n \n-    I(this, !extra_c_stack);\n-    if (cached_c_stack) {\n-        destroy_stack(kernel->region(), cached_c_stack);\n-        cached_c_stack = NULL;\n-    }\n+        I(this, !extra_c_stack);\n+        if (cached_c_stack) {\n+            destroy_stack(kernel->region(), cached_c_stack);\n+            cached_c_stack = NULL;\n+        }\n \n-    sched->release_task_thread();\n+        sched->release_task_thread();\n+        return sched_loop_state_exit;\n+    }\n }\n \n rust_task *\n@@ -360,6 +380,7 @@ rust_sched_loop::place_task_in_tls(rust_task *task) {\n void\n rust_sched_loop::exit() {\n     scoped_lock with(lock);\n+    DLOG(this, dom, \"Requesting exit for thread %d\", id);\n     should_exit = true;\n     lock.signal();\n }"}, {"sha": "c21dc9b0c3422f9eda93fb20bd27fda9fc06419c", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/771c1be6a64225d416ad99a860f1c8d34ce3a18b/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/771c1be6a64225d416ad99a860f1c8d34ce3a18b/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=771c1be6a64225d416ad99a860f1c8d34ce3a18b", "patch": "@@ -12,6 +12,16 @@ enum rust_task_state {\n     task_state_dead\n };\n \n+/*\n+The result of every turn of the scheduler loop. Instructs the loop\n+driver how to proceed.\n+ */\n+enum rust_sched_loop_state {\n+    sched_loop_state_keep_going,\n+    sched_loop_state_block,\n+    sched_loop_state_exit\n+};\n+\n typedef indexed_list<rust_task> rust_task_list;\n \n struct rust_sched_loop\n@@ -49,6 +59,8 @@ struct rust_sched_loop\n     rust_task_list *state_list(rust_task_state state);\n     const char *state_name(rust_task_state state);\n \n+    rust_sched_loop_state run_single_turn();\n+\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;"}]}