{"sha": "203fcbd0f360fdae9db551bf63e14fe152150cc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2ZjYmQwZjM2MGZkYWU5ZGI1NTFiZjYzZTE0ZmUxNTIxNTBjYzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T16:08:33Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T19:25:06Z"}, "message": "rename hashmap find/get -> find_copy/get_copy", "tree": {"sha": "6dc731f43ab9f703e52bdb6091e0c859e1569689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dc731f43ab9f703e52bdb6091e0c859e1569689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203fcbd0f360fdae9db551bf63e14fe152150cc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203fcbd0f360fdae9db551bf63e14fe152150cc9", "html_url": "https://github.com/rust-lang/rust/commit/203fcbd0f360fdae9db551bf63e14fe152150cc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203fcbd0f360fdae9db551bf63e14fe152150cc9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4", "html_url": "https://github.com/rust-lang/rust/commit/bc96fe9c4995bcf28e084e3a84293ebbf47f84d4"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "5d55d2bc7a8ae2c21172642985cb5345763ba511", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=203fcbd0f360fdae9db551bf63e14fe152150cc9", "patch": "@@ -465,19 +465,19 @@ fn parse_source(name: ~str, j: &json::Json) -> @Source {\n \n     match *j {\n         json::Object(j) => {\n-            let mut url = match j.find(&~\"url\") {\n+            let mut url = match j.find_copy(&~\"url\") {\n                 Some(json::String(u)) => u,\n                 _ => fail ~\"needed 'url' field in source\"\n             };\n-            let method = match j.find(&~\"method\") {\n+            let method = match j.find_copy(&~\"method\") {\n                 Some(json::String(u)) => u,\n                 _ => assume_source_method(url)\n             };\n-            let key = match j.find(&~\"key\") {\n+            let key = match j.find_copy(&~\"key\") {\n                 Some(json::String(u)) => Some(u),\n                 _ => None\n             };\n-            let keyfp = match j.find(&~\"keyfp\") {\n+            let keyfp = match j.find_copy(&~\"keyfp\") {\n                 Some(json::String(u)) => Some(u),\n                 _ => None\n             };\n@@ -512,7 +512,7 @@ fn try_parse_sources(filename: &Path, sources: map::HashMap<~str, @Source>) {\n }\n \n fn load_one_source_package(src: @Source, p: &json::Object) {\n-    let name = match p.find(&~\"name\") {\n+    let name = match p.find_copy(&~\"name\") {\n         Some(json::String(n)) => {\n             if !valid_pkg_name(n) {\n                 warn(~\"malformed source json: \"\n@@ -529,7 +529,7 @@ fn load_one_source_package(src: @Source, p: &json::Object) {\n         }\n     };\n \n-    let uuid = match p.find(&~\"uuid\") {\n+    let uuid = match p.find_copy(&~\"uuid\") {\n         Some(json::String(n)) => {\n             if !is_uuid(n) {\n                 warn(~\"malformed source json: \"\n@@ -545,15 +545,15 @@ fn load_one_source_package(src: @Source, p: &json::Object) {\n         }\n     };\n \n-    let url = match p.find(&~\"url\") {\n+    let url = match p.find_copy(&~\"url\") {\n         Some(json::String(n)) => n,\n         _ => {\n             warn(~\"malformed source json: \" + src.name + ~\" (missing url)\");\n             return;\n         }\n     };\n \n-    let method = match p.find(&~\"method\") {\n+    let method = match p.find_copy(&~\"method\") {\n         Some(json::String(n)) => n,\n         _ => {\n             warn(~\"malformed source json: \"\n@@ -562,13 +562,13 @@ fn load_one_source_package(src: @Source, p: &json::Object) {\n         }\n     };\n \n-    let reference = match p.find(&~\"ref\") {\n+    let reference = match p.find_copy(&~\"ref\") {\n         Some(json::String(n)) => Some(n),\n         _ => None\n     };\n \n     let mut tags = ~[];\n-    match p.find(&~\"tags\") {\n+    match p.find_copy(&~\"tags\") {\n         Some(json::List(js)) => {\n           for js.each |j| {\n                 match *j {\n@@ -580,7 +580,7 @@ fn load_one_source_package(src: @Source, p: &json::Object) {\n         _ => ()\n     }\n \n-    let description = match p.find(&~\"description\") {\n+    let description = match p.find_copy(&~\"description\") {\n         Some(json::String(n)) => n,\n         _ => {\n             warn(~\"malformed source json: \" + src.name"}, {"sha": "78306b500ffa1dc3c885897681c283946ef8bda2", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=203fcbd0f360fdae9db551bf63e14fe152150cc9", "patch": "@@ -398,7 +398,7 @@ pub mod linear {\n     }\n \n     impl<K:Hash IterBytes Eq, V: Copy> LinearMap<K,V> {\n-        pure fn find(&const self, k: &K) -> Option<V> {\n+        pure fn find_copy(&const self, k: &K) -> Option<V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n                     // FIXME (#3148): Once we rewrite found_entry, this\n@@ -414,8 +414,8 @@ pub mod linear {\n             }\n         }\n \n-        pure fn get(&const self, k: &K) -> V {\n-            let value = self.find(k);\n+        pure fn get_copy(&const self, k: &K) -> V {\n+            let value = self.find_copy(k);\n             if value.is_none() {\n                 fail fmt!(\"No entry found for key: %?\", k);\n             }\n@@ -503,17 +503,17 @@ pub mod test {\n         let mut m = ~LinearMap();\n         assert m.insert(1, 2);\n         assert m.insert(2, 4);\n-        assert m.get(&1) == 2;\n-        assert m.get(&2) == 4;\n+        assert m.get_copy(&1) == 2;\n+        assert m.get_copy(&2) == 4;\n     }\n \n     #[test]\n     pub fn overwrite() {\n         let mut m = ~LinearMap();\n         assert m.insert(1, 2);\n-        assert m.get(&1) == 2;\n+        assert m.get_copy(&1) == 2;\n         assert !m.insert(1, 3);\n-        assert m.get(&1) == 3;\n+        assert m.get_copy(&1) == 3;\n     }\n \n     #[test]\n@@ -522,9 +522,9 @@ pub mod test {\n         assert m.insert(1, 2);\n         assert m.insert(5, 3);\n         assert m.insert(9, 4);\n-        assert m.get(&9) == 4;\n-        assert m.get(&5) == 3;\n-        assert m.get(&1) == 2;\n+        assert m.get_copy(&9) == 4;\n+        assert m.get_copy(&5) == 3;\n+        assert m.get_copy(&1) == 2;\n     }\n \n     #[test]\n@@ -534,8 +534,8 @@ pub mod test {\n         assert m.insert(5, 3);\n         assert m.insert(9, 4);\n         assert m.remove(&1);\n-        assert m.get(&9) == 4;\n-        assert m.get(&5) == 3;\n+        assert m.get_copy(&9) == 4;\n+        assert m.get_copy(&5) == 3;\n     }\n \n     #[test]\n@@ -574,8 +574,8 @@ pub mod test {\n         }\n         assert m.len() == 0;\n         assert m2.len() == 2;\n-        assert m2.find(&1) == Some(2);\n-        assert m2.find(&2) == Some(3);\n+        assert m2.find_copy(&1) == Some(2);\n+        assert m2.find_copy(&2) == Some(3);\n     }\n \n     #[test]"}, {"sha": "97ab5c139c19a80e21a34d434ce9250954474006", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=203fcbd0f360fdae9db551bf63e14fe152150cc9", "patch": "@@ -11,17 +11,13 @@\n //! Types/fns concerning URLs (see RFC 3986)\n #[forbid(deprecated_mode)];\n \n-use map;\n-use map::HashMap;\n-\n use core::cmp::Eq;\n use core::dvec::DVec;\n use core::from_str::FromStr;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n use core::prelude::*;\n use core::hashmap::linear::LinearMap;\n-use core::hashmap;\n use core::str;\n use core::to_bytes::IterBytes;\n use core::to_bytes;\n@@ -244,9 +240,7 @@ pub fn encode_form_urlencoded(m: &LinearMap<~str, ~[~str]>) -> ~str {\n  * Decode a string encoded with the 'application/x-www-form-urlencoded' media\n  * type into a hashmap.\n  */\n-pub fn decode_form_urlencoded(\n-    s: &[u8]\n-) -> hashmap::linear::LinearMap<~str, ~[~str]> {\n+pub fn decode_form_urlencoded(s: &[u8]) -> LinearMap<~str, ~[~str]> {\n     do io::with_bytes_reader(s) |rdr| {\n         let mut m = LinearMap();\n         let mut key = ~\"\";"}, {"sha": "18b30f72ef0ba89e4ab4e4d65b9d577dd34829bb", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203fcbd0f360fdae9db551bf63e14fe152150cc9/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=203fcbd0f360fdae9db551bf63e14fe152150cc9", "patch": "@@ -173,7 +173,7 @@ impl Database {\n                declared_inputs: &WorkMap) ->\n         Option<(WorkMap, WorkMap, ~str)> {\n         let k = json_encode(&(fn_name, declared_inputs));\n-        match self.db_cache.find(&k) {\n+        match self.db_cache.find_copy(&k) {\n             None => None,\n             Some(v) => Some(json_decode(v))\n         }\n@@ -297,7 +297,7 @@ impl @Mut<Prep> : TPrep {\n                 name: &str, val: &str) -> bool {\n         do self.borrow_imm |p| {\n             let k = kind.to_owned();\n-            let f = (p.ctxt.freshness.get(&k))(name, val);\n+            let f = (*p.ctxt.freshness.get_ref(&k))(name, val);\n             do p.ctxt.logger.borrow_imm |lg| {\n                 if f {\n                     lg.info(fmt!(\"%s %s:%s is fresh\","}]}