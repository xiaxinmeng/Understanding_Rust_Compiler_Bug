{"sha": "78b38c84c620a3019473463a5ff9120941604ec2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YjM4Yzg0YzYyMGEzMDE5NDczNDYzYTVmZjkxMjA5NDE2MDRlYzI=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-08-14T09:58:30Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-08-14T09:58:30Z"}, "message": "Merge pull request #159 from marcusklaas/explicit-self\n\nCorrectly format typed self in function arguments", "tree": {"sha": "500e007b92fd0628045e6226cb62976b24eaac3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/500e007b92fd0628045e6226cb62976b24eaac3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b38c84c620a3019473463a5ff9120941604ec2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b38c84c620a3019473463a5ff9120941604ec2", "html_url": "https://github.com/rust-lang/rust/commit/78b38c84c620a3019473463a5ff9120941604ec2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b38c84c620a3019473463a5ff9120941604ec2/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d07eb2815026bac79ce665884770bb50a78a6eae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d07eb2815026bac79ce665884770bb50a78a6eae", "html_url": "https://github.com/rust-lang/rust/commit/d07eb2815026bac79ce665884770bb50a78a6eae"}, {"sha": "82b27fc4ab604f71e87accc0c7dc8fb6f30e19eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/82b27fc4ab604f71e87accc0c7dc8fb6f30e19eb", "html_url": "https://github.com/rust-lang/rust/commit/82b27fc4ab604f71e87accc0c7dc8fb6f30e19eb"}], "stats": {"total": 94, "additions": 53, "deletions": 41}, "files": [{"sha": "55b55918131a11c6cd81e1db0e0fb73aef3d6f74", "filename": "src/items.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/78b38c84c620a3019473463a5ff9120941604ec2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b38c84c620a3019473463a5ff9120941604ec2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=78b38c84c620a3019473463a5ff9120941604ec2", "patch": "@@ -11,7 +11,8 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use {ReturnIndent, BraceStyle};\n-use utils::{format_visibility, make_indent, contains_skip, span_after, end_typaram};\n+use utils::{format_mutability, format_visibility, make_indent, contains_skip, span_after,\n+            end_typaram};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n use comment::FindUncommented;\n use visitor::FmtVisitor;\n@@ -230,46 +231,14 @@ impl<'a> FmtVisitor<'a> {\n                     -> String {\n         let mut arg_item_strs: Vec<_> = args.iter().map(|a| self.rewrite_fn_input(a)).collect();\n         // Account for sugary self.\n-        let mut min_args = 1;\n-        if let Some(explicit_self) = explicit_self {\n-            match explicit_self.node {\n-                ast::ExplicitSelf_::SelfRegion(ref lt, ref m, _) => {\n-                    let lt_str = match lt {\n-                        &Some(ref l) => format!(\"{} \", pprust::lifetime_to_string(l)),\n-                        &None => String::new(),\n-                    };\n-                    let mut_str = match m {\n-                        &ast::Mutability::MutMutable => \"mut \".to_owned(),\n-                        &ast::Mutability::MutImmutable => String::new(),\n-                    };\n-                    arg_item_strs[0] = format!(\"&{}{}self\", lt_str, mut_str);\n-                    min_args = 2;\n-                }\n-                ast::ExplicitSelf_::SelfExplicit(ref ty, _) => {\n-                    arg_item_strs[0] = format!(\"self: {}\", pprust::ty_to_string(ty));\n-                }\n-                ast::ExplicitSelf_::SelfValue(_) => {\n-                    assert!(args.len() >= 1, \"&[ast::Arg] shouldn't be empty.\");\n-\n-                    // this hacky solution caused by absence of `Mutability` in `SelfValue`.\n-                    let mut_str = {\n-                        if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _)\n-                                = args[0].pat.node {\n-                            match mutability {\n-                                ast::Mutability::MutMutable => \"mut \",\n-                                ast::Mutability::MutImmutable => \"\",\n-                            }\n-                        } else {\n-                            panic!(\"there is a bug or change in structure of AST, aborting.\");\n-                        }\n-                    };\n-\n-                    arg_item_strs[0] = format!(\"{}self\", mut_str);\n-                    min_args = 2;\n-                }\n-                _ => {}\n-            }\n-        }\n+        // FIXME: the comment for the self argument is dropped. This is blocked\n+        // on rust issue #27522.\n+        let min_args = explicit_self.and_then(|explicit_self| {\n+                           rewrite_explicit_self(explicit_self, args)\n+                       }).map(|self_str| {\n+                           arg_item_strs[0] = self_str;\n+                           2\n+                       }).unwrap_or(1);\n \n         // Comments between args\n         let mut arg_items = Vec::new();\n@@ -802,6 +771,37 @@ impl<'a> FmtVisitor<'a> {\n     }\n }\n \n+fn rewrite_explicit_self(explicit_self: &ast::ExplicitSelf, args: &[ast::Arg]) -> Option<String> {\n+    match explicit_self.node {\n+        ast::ExplicitSelf_::SelfRegion(lt, m, _) => {\n+            let mut_str = format_mutability(m);\n+            match lt {\n+                Some(ref l) => Some(format!(\"&{} {}self\", pprust::lifetime_to_string(l), mut_str)),\n+                None => Some(format!(\"&{}self\", mut_str)),\n+            }\n+        }\n+        ast::ExplicitSelf_::SelfExplicit(ref ty, _) => {\n+            Some(format!(\"self: {}\", pprust::ty_to_string(ty)))\n+        }\n+        ast::ExplicitSelf_::SelfValue(_) => {\n+            assert!(args.len() >= 1, \"&[ast::Arg] shouldn't be empty.\");\n+\n+            // this hacky solution caused by absence of `Mutability` in `SelfValue`.\n+            let mut_str = {\n+                if let ast::Pat_::PatIdent(ast::BindingMode::BindByValue(mutability), _, _)\n+                        = args[0].pat.node {\n+                    format_mutability(mutability)\n+                } else {\n+                    panic!(\"there is a bug or change in structure of AST, aborting.\");\n+                }\n+            };\n+\n+            Some(format!(\"{}self\", mut_str))\n+        }\n+        _ => None\n+    }\n+}\n+\n fn span_lo_for_arg(arg: &ast::Arg) -> BytePos {\n     if is_named_arg(arg) {\n         arg.pat.span.lo"}, {"sha": "3ff30da9784079e1ae1deb091438c1c1d13e8aaf", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78b38c84c620a3019473463a5ff9120941604ec2/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b38c84c620a3019473463a5ff9120941604ec2/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=78b38c84c620a3019473463a5ff9120941604ec2", "patch": "@@ -64,6 +64,14 @@ pub fn format_visibility(vis: Visibility) -> &'static str {\n     }\n }\n \n+#[inline]\n+pub fn format_mutability(mutability: ast::Mutability) -> &'static str {\n+    match mutability {\n+        ast::Mutability::MutMutable => \"mut \",\n+        ast::Mutability::MutImmutable => \"\"\n+    }\n+}\n+\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n         MetaItem_::MetaWord(ref s) => *s == SKIP_ANNOTATION,"}, {"sha": "5b69c46b18d39f1f519985ece5107feab7449508", "filename": "tests/target/trait.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78b38c84c620a3019473463a5ff9120941604ec2/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b38c84c620a3019473463a5ff9120941604ec2/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=78b38c84c620a3019473463a5ff9120941604ec2", "patch": "@@ -22,3 +22,7 @@ trait Foo {\n pub trait WriteMessage {\n     fn write_message(&mut self, &FrontendMessage) -> io::Result<()>;\n }\n+\n+trait Runnable {\n+    fn handler(self: &Runnable);\n+}"}]}