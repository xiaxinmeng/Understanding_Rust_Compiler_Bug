{"sha": "4117e8c2d328a7615c2dc294d939b610d4e22dca", "node_id": "C_kwDOAAsO6NoAKDQxMTdlOGMyZDMyOGE3NjE1YzJkYzI5NGQ5MzliNjEwZDRlMjJkY2E", "commit": {"author": {"name": "Keita Nonaka", "email": "iKonnyaku40@gmail.com", "date": "2022-04-15T06:40:05Z"}, "committer": {"name": "Keita Nonaka", "email": "iKonnyaku40@gmail.com", "date": "2022-04-15T06:40:05Z"}, "message": "test: add pop_first() pop_last() test cases for BTreeSet", "tree": {"sha": "6df73699f32e7142deb431516d95fae55c9fe0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df73699f32e7142deb431516d95fae55c9fe0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4117e8c2d328a7615c2dc294d939b610d4e22dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4117e8c2d328a7615c2dc294d939b610d4e22dca", "html_url": "https://github.com/rust-lang/rust/commit/4117e8c2d328a7615c2dc294d939b610d4e22dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4117e8c2d328a7615c2dc294d939b610d4e22dca/comments", "author": {"login": "Gumichocopengin8", "id": 34010665, "node_id": "MDQ6VXNlcjM0MDEwNjY1", "avatar_url": "https://avatars.githubusercontent.com/u/34010665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gumichocopengin8", "html_url": "https://github.com/Gumichocopengin8", "followers_url": "https://api.github.com/users/Gumichocopengin8/followers", "following_url": "https://api.github.com/users/Gumichocopengin8/following{/other_user}", "gists_url": "https://api.github.com/users/Gumichocopengin8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gumichocopengin8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gumichocopengin8/subscriptions", "organizations_url": "https://api.github.com/users/Gumichocopengin8/orgs", "repos_url": "https://api.github.com/users/Gumichocopengin8/repos", "events_url": "https://api.github.com/users/Gumichocopengin8/events{/privacy}", "received_events_url": "https://api.github.com/users/Gumichocopengin8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gumichocopengin8", "id": 34010665, "node_id": "MDQ6VXNlcjM0MDEwNjY1", "avatar_url": "https://avatars.githubusercontent.com/u/34010665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gumichocopengin8", "html_url": "https://github.com/Gumichocopengin8", "followers_url": "https://api.github.com/users/Gumichocopengin8/followers", "following_url": "https://api.github.com/users/Gumichocopengin8/following{/other_user}", "gists_url": "https://api.github.com/users/Gumichocopengin8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gumichocopengin8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gumichocopengin8/subscriptions", "organizations_url": "https://api.github.com/users/Gumichocopengin8/orgs", "repos_url": "https://api.github.com/users/Gumichocopengin8/repos", "events_url": "https://api.github.com/users/Gumichocopengin8/events{/privacy}", "received_events_url": "https://api.github.com/users/Gumichocopengin8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f387c930ee7c84357f8fa9f4c38903c00404ac46", "url": "https://api.github.com/repos/rust-lang/rust/commits/f387c930ee7c84357f8fa9f4c38903c00404ac46", "html_url": "https://github.com/rust-lang/rust/commit/f387c930ee7c84357f8fa9f4c38903c00404ac46"}], "stats": {"total": 86, "additions": 77, "deletions": 9}, "files": [{"sha": "acc49799a73fc23e985cf7f3c1455eb004583abc", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 77, "deletions": 9, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4117e8c2d328a7615c2dc294d939b610d4e22dca/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4117e8c2d328a7615c2dc294d939b610d4e22dca/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=4117e8c2d328a7615c2dc294d939b610d4e22dca", "patch": "@@ -791,7 +791,11 @@ fn test_range_finding_ill_order_in_range_ord() {\n     impl Ord for EvilTwin {\n         fn cmp(&self, other: &Self) -> Ordering {\n             let ord = self.0.cmp(&other.0);\n-            if COMPARES.fetch_add(1, SeqCst) > 0 { ord.reverse() } else { ord }\n+            if COMPARES.fetch_add(1, SeqCst) > 0 {\n+                ord.reverse()\n+            } else {\n+                ord\n+            }\n         }\n     }\n \n@@ -943,13 +947,12 @@ mod test_drain_filter {\n     fn mutating_and_keeping() {\n         let pairs = (0..3).map(|i| (i, i));\n         let mut map = BTreeMap::from_iter(pairs);\n-        assert!(\n-            map.drain_filter(|_, v| {\n+        assert!(map\n+            .drain_filter(|_, v| {\n                 *v += 6;\n                 false\n             })\n-            .eq(iter::empty())\n-        );\n+            .eq(iter::empty()));\n         assert!(map.keys().copied().eq(0..3));\n         assert!(map.values().copied().eq(6..9));\n         map.check();\n@@ -960,13 +963,12 @@ mod test_drain_filter {\n     fn mutating_and_removing() {\n         let pairs = (0..3).map(|i| (i, i));\n         let mut map = BTreeMap::from_iter(pairs);\n-        assert!(\n-            map.drain_filter(|_, v| {\n+        assert!(map\n+            .drain_filter(|_, v| {\n                 *v += 6;\n                 true\n             })\n-            .eq((0..3).map(|i| (i, i + 6)))\n-        );\n+            .eq((0..3).map(|i| (i, i + 6))));\n         assert!(map.is_empty());\n         map.check();\n     }\n@@ -1878,6 +1880,72 @@ fn test_first_last_entry() {\n     a.check();\n }\n \n+#[test]\n+fn test_pop_first_last() {\n+    let mut map = BTreeMap::new();\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+\n+    map.insert(1, 10);\n+    map.insert(2, 20);\n+    map.insert(3, 30);\n+    map.insert(4, 40);\n+\n+    assert_eq!(map.len(), 4);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 1);\n+    assert_eq!(val, 10);\n+    assert_eq!(map.len(), 3);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 2);\n+    assert_eq!(val, 20);\n+    assert_eq!(map.len(), 2);\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 4);\n+    assert_eq!(val, 40);\n+    assert_eq!(map.len(), 1);\n+\n+    map.insert(5, 50);\n+    map.insert(6, 60);\n+    assert_eq!(map.len(), 3);\n+\n+    let (key, val) = map.pop_first().unwrap();\n+    assert_eq!(key, 3);\n+    assert_eq!(val, 30);\n+    assert_eq!(map.len(), 2);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 6);\n+    assert_eq!(val, 60);\n+    assert_eq!(map.len(), 1);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 5);\n+    assert_eq!(val, 50);\n+    assert_eq!(map.len(), 0);\n+\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+\n+    map.insert(7, 70);\n+    map.insert(8, 80);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 8);\n+    assert_eq!(val, 80);\n+    assert_eq!(map.len(), 1);\n+\n+    let (key, val) = map.pop_last().unwrap();\n+    assert_eq!(key, 7);\n+    assert_eq!(val, 70);\n+    assert_eq!(map.len(), 0);\n+\n+    assert_eq!(map.pop_first(), None);\n+    assert_eq!(map.pop_last(), None);\n+}\n+\n #[test]\n fn test_insert_into_full_height_0() {\n     let size = node::CAPACITY;"}]}