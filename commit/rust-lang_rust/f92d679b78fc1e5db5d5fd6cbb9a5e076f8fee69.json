{"sha": "f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MmQ2NzliNzhmYzFlNWRiNWQ1ZmQ2Y2JiOWE1ZTA3NmY4ZmVlNjk=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-20T02:15:57Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-27T13:33:10Z"}, "message": "Encompassed error deduplication of some existing sets in the ctxt.", "tree": {"sha": "7926d0fe117ff2f926872a447d9ee3bb89eb63c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7926d0fe117ff2f926872a447d9ee3bb89eb63c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlpsf5cACgkQAXYLT59T\n8VRprw/9GhvN1nfwkvzo+dwFT0TfQvp8VUW1VKBs00075rNnbc3EZwFE3lqiAssF\nO5QM53YYBpCt7Xvnnn+39uYWUuv/I9xs1f/kRrnLkOr2p4F+C4HzctSr8LMv25c/\nYhPGCNqQdPg6zC3cT0ZX7BU1pDuwlHyEHnJO3QeLhLIItXwvwb/znKkYGGi1e9nV\nESRV3qfLy4RZK7xBKYDtjx1GlkkojJNuXjO6F++sAS1HYpcaQV3Rf7yxJtn1h1OF\ngj0c32wXzfpirZTa+sQ3374ZIkfSGGR9M6BNmzWj9T0UMw4yjopWIXz0KgGYpMWJ\nimMEVYlxWw/BXqLu9+MXGHdaHwYe/+8KjXcYChyWBgt4IJx4MpnAKVw1j31K5iok\nDo2IdF34VXIsAlRa8d6PvPqXkfX0a4zp4bgmr0NI2SZu29l6hmIuX+pXROpJYyki\nqK3TAY4Zg1XKEz33VzoTsf0cXIpOtfWw2y7qVxYiK4nzOM6yYdafeHYXxJbo7d8I\n0SRYW4DwSqG84reNizSfTL5Kkm9H3R7a2E1m+4WFRGHzlwRBPaQ3q4OYCipzlmlt\nuAV7huc1E/dLamQDKHgbjRsUL97GOE9ED7U21loNLtvVUy5A+MkrvGNdEJlnRiKN\n+iEXpVHzX59fF6oTGtq1Ee7Yw/a8pt/dCqsjq5vDLuySBPMKds0=\n=BLHZ\n-----END PGP SIGNATURE-----", "payload": "tree 7926d0fe117ff2f926872a447d9ee3bb89eb63c9\nparent 3daa4d255f1ecc9d0a28deb9ca3d6da79f1df438\nauthor David Wood <david@davidtw.co> 1516414557 +0000\ncommitter David Wood <david@davidtw.co> 1517059990 +0000\n\nEncompassed error deduplication of some existing sets in the ctxt.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "html_url": "https://github.com/rust-lang/rust/commit/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3daa4d255f1ecc9d0a28deb9ca3d6da79f1df438", "url": "https://api.github.com/repos/rust-lang/rust/commits/3daa4d255f1ecc9d0a28deb9ca3d6da79f1df438", "html_url": "https://github.com/rust-lang/rust/commit/3daa4d255f1ecc9d0a28deb9ca3d6da79f1df438"}], "stats": {"total": 72, "additions": 25, "deletions": 47}, "files": [{"sha": "8ded245e13ff513eff88ce8c631d6a8250de3030", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "patch": "@@ -362,33 +362,20 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let scope_tree = borrows.0.scope_tree();\n         let root_place = self.prefixes(&borrow.borrowed_place, PrefixSet::All).last().unwrap();\n \n-        match root_place {\n-            &Place::Local(local) => {\n-                if let Some(_) = self.storage_dead_or_drop_error_reported_l.replace(local) {\n-                    debug!(\"report_does_not_live_long_enough({:?}): <suppressed>\",\n-                           (borrow, drop_span));\n-                    return\n-                }\n-            }\n-            &Place::Static(ref statik) => {\n-                if let Some(_) = self.storage_dead_or_drop_error_reported_s\n-                    .replace(statik.def_id)\n-                {\n-                    debug!(\"report_does_not_live_long_enough({:?}): <suppressed>\",\n-                           (borrow, drop_span));\n-                    return\n-                }\n-            },\n-            &Place::Projection(_) =>\n-                unreachable!(\"root_place is an unreachable???\")\n-        };\n-\n         let borrow_span = self.mir.source_info(borrow.location).span;\n         let proper_span = match *root_place {\n             Place::Local(local) => self.mir.local_decls[local].source_info.span,\n             _ => drop_span,\n         };\n \n+        if self.access_place_error_reported.contains(&(root_place.clone(), borrow_span)) {\n+            debug!(\"suppressing access_place error when borrow doesn't live long enough for {:?}\",\n+                   borrow_span);\n+            return;\n+        }\n+\n+        self.access_place_error_reported.insert((root_place.clone(), borrow_span));\n+\n         match (borrow.region, &self.describe_place(&borrow.borrowed_place)) {\n             (RegionKind::ReScope(_), Some(name)) => {\n                 self.report_scoped_local_value_does_not_live_long_enough("}, {"sha": "6b84abbe266fa8bbfbb2e46bd7bd78c40e583d14", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 17, "deletions": 26, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f92d679b78fc1e5db5d5fd6cbb9a5e076f8fee69", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Local, Location, Place};\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Place};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n use rustc::mir::ClosureRegionRequirements;\n@@ -228,9 +228,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n             hir::BodyOwnerKind::Fn => true,\n         },\n-        storage_dead_or_drop_error_reported_l: FxHashSet(),\n-        storage_dead_or_drop_error_reported_s: FxHashSet(),\n-        read_or_write_error_reported: FxHashSet(),\n+        access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n         nonlexical_regioncx: opt_regioncx.clone(),\n     };\n@@ -295,15 +293,12 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     /// I'm not sure this is the right approach - @eddyb could you try and\n     /// figure this out?\n     locals_are_invalidated_at_exit: bool,\n-    /// This field keeps track of when storage dead or drop errors are reported\n-    /// in order to stop duplicate error reporting and identify the conditions required\n-    /// for a \"temporary value dropped here while still borrowed\" error. See #45360.\n-    storage_dead_or_drop_error_reported_l: FxHashSet<Local>,\n-    /// Same as the above, but for statics (thread-locals)\n-    storage_dead_or_drop_error_reported_s: FxHashSet<DefId>,\n-    /// This field keeps track of when borrow errors are reported in read or write passes\n-    /// so that an error is not reported in both.\n-    read_or_write_error_reported: FxHashSet<(Place<'tcx>, Span)>,\n+    /// This field keeps track of when borrow errors are reported in the access_place function\n+    /// so that there is no duplicate reporting. This field cannot also be used for the conflicting\n+    /// borrow errors that is handled by the `reservation_error_reported` field as the inclusion\n+    /// of the `Span` type (while required to mute some errors) stops the muting of the reservation\n+    /// errors.\n+    access_place_error_reported: FxHashSet<(Place<'tcx>, Span)>,\n     /// This field keeps track of when borrow conflict errors are reported\n     /// for reservations, so that we don't report seemingly duplicate\n     /// errors for corresponding activations\n@@ -730,21 +725,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         if let Activation(_, borrow_index) = rw {\n             if self.reservation_error_reported.contains(&place_span.0) {\n-                debug!(\n-                    \"skipping access_place for activation of invalid reservation \\\n-                     place: {:?} borrow_index: {:?}\",\n-                    place_span.0,\n-                    borrow_index\n-                );\n+                debug!(\"skipping access_place for activation of invalid reservation \\\n+                     place: {:?} borrow_index: {:?}\", place_span.0, borrow_index);\n                 return AccessErrorsReported {\n                     mutability_error: false,\n                     conflict_error: true,\n                 };\n             }\n         }\n \n-        if self.read_or_write_error_reported.contains(&(place_span.0.clone(), place_span.1)) {\n-            debug!(\"suppressing access_place write for {:?}\", place_span);\n+        if self.access_place_error_reported.contains(&(place_span.0.clone(), place_span.1)) {\n+            debug!(\"suppressing access_place error for {:?}\", place_span);\n             return AccessErrorsReported {\n                 mutability_error: false,\n                 conflict_error: true,\n@@ -756,8 +747,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let conflict_error =\n             self.check_access_for_conflict(context, place_span, sd, rw, flow_state);\n \n-        if conflict_error {\n-            self.read_or_write_error_reported.insert((place_span.0.clone(), place_span.1));\n+        if conflict_error || mutability_error {\n+            self.access_place_error_reported.insert((place_span.0.clone(), place_span.1));\n         }\n \n         AccessErrorsReported {\n@@ -845,15 +836,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                                 place_span.0\n                             );\n                             this.reservation_error_reported.insert(place_span.0.clone());\n-                        }\n+                        },\n                         Activation(_, activating) => {\n                             debug!(\n                                 \"observing check_place for activation of \\\n                                  borrow_index: {:?}\",\n                                 activating\n                             );\n-                        }\n-                        Read(..) | Write(..) => {}\n+                        },\n+                        Read(..) | Write(..) => {},\n                     }\n \n                     match kind {"}]}