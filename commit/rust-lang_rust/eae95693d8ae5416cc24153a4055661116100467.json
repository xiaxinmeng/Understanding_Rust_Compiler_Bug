{"sha": "eae95693d8ae5416cc24153a4055661116100467", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZTk1NjkzZDhhZTU0MTZjYzI0MTUzYTQwNTU2NjExMTYxMDA0Njc=", "commit": {"author": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-01-18T10:17:25Z"}, "committer": {"name": "hyd-dev", "email": "yd-huang@outlook.com", "date": "2021-01-18T17:18:45Z"}, "message": "Add `ArgFlagValueIter`", "tree": {"sha": "d9badb35e0351d396dde1e5a3374434b59161d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9badb35e0351d396dde1e5a3374434b59161d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae95693d8ae5416cc24153a4055661116100467", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIsEABYIADMWIQRJ2jPMDdiQ+U4U42Z0+n/VuNoUuAUCYAXC9RUceWQtaHVhbmdA\nb3V0bG9vay5jb20ACgkQdPp/1bjaFLgZKAD+NeFRfNAba7f9pTJl+xeO4mCP87Bs\n5WsrPkDXbyRWQTwBAK28YI1kcsaQWUpBedZN81gLe9eqEMw6GZzzOq8/kzEF\n=Go6w\n-----END PGP SIGNATURE-----", "payload": "tree d9badb35e0351d396dde1e5a3374434b59161d5e\nparent 903bfd82bfe4fca0b85c8b7eb01b5841eac45f8c\nauthor hyd-dev <yd-huang@outlook.com> 1610965045 +0800\ncommitter hyd-dev <yd-huang@outlook.com> 1610990325 +0800\n\nAdd `ArgFlagValueIter`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae95693d8ae5416cc24153a4055661116100467", "html_url": "https://github.com/rust-lang/rust/commit/eae95693d8ae5416cc24153a4055661116100467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae95693d8ae5416cc24153a4055661116100467/comments", "author": null, "committer": null, "parents": [{"sha": "903bfd82bfe4fca0b85c8b7eb01b5841eac45f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/903bfd82bfe4fca0b85c8b7eb01b5841eac45f8c", "html_url": "https://github.com/rust-lang/rust/commit/903bfd82bfe4fca0b85c8b7eb01b5841eac45f8c"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "c312a581621a96a0ecd551a07e9b147b63a5ab29", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 39, "deletions": 20, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/eae95693d8ae5416cc24153a4055661116100467/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae95693d8ae5416cc24153a4055661116100467/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=eae95693d8ae5416cc24153a4055661116100467", "patch": "@@ -2,6 +2,7 @@ use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n use std::io::{self, BufRead, BufReader, BufWriter, Write};\n+use std::iter::TakeWhile;\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n@@ -89,31 +90,49 @@ fn has_arg_flag(name: &str) -> bool {\n     args.any(|val| val == name)\n }\n \n-/// Gets the value of a `--flag`.\n-fn get_arg_flag_value(name: &str) -> Option<String> {\n-    // Stop searching at `--`.\n-    let mut args = std::env::args().take_while(|val| val != \"--\");\n-    loop {\n-        let arg = match args.next() {\n-            Some(arg) => arg,\n-            None => return None,\n-        };\n-        if !arg.starts_with(name) {\n-            continue;\n+struct ArgFlagValueIter<'a> {\n+    args: TakeWhile<env::Args, fn(&String) -> bool>,\n+    name: &'a str,\n+}\n+\n+impl<'a> ArgFlagValueIter<'a> {\n+    fn new(name: &'a str) -> Self {\n+        Self {\n+            // Stop searching at `--`.\n+            args: env::args().take_while(|val| val != \"--\"),\n+            name,\n         }\n-        // Strip leading `name`.\n-        let suffix = &arg[name.len()..];\n-        if suffix.is_empty() {\n-            // This argument is exactly `name`; the next one is the value.\n-            return args.next();\n-        } else if suffix.starts_with('=') {\n-            // This argument is `name=value`; get the value.\n-            // Strip leading `=`.\n-            return Some(suffix[1..].to_owned());\n+    }\n+}\n+\n+impl Iterator for ArgFlagValueIter<'_> {\n+    type Item = String;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        loop {\n+            let arg = self.args.next()?;\n+            if !arg.starts_with(self.name) {\n+                continue;\n+            }\n+            // Strip leading `name`.\n+            let suffix = &arg[self.name.len()..];\n+            if suffix.is_empty() {\n+                // This argument is exactly `name`; the next one is the value.\n+                return self.args.next();\n+            } else if suffix.starts_with('=') {\n+                // This argument is `name=value`; get the value.\n+                // Strip leading `=`.\n+                return Some(suffix[1..].to_owned());\n+            }\n         }\n     }\n }\n \n+/// Gets the value of a `--flag`.\n+fn get_arg_flag_value(name: &str) -> Option<String> {\n+    ArgFlagValueIter::new(name).next()\n+}\n+\n /// Returns the path to the `miri` binary\n fn find_miri() -> PathBuf {\n     if let Some(path) = env::var_os(\"MIRI\") {"}]}