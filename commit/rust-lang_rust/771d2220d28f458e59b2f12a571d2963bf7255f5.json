{"sha": "771d2220d28f458e59b2f12a571d2963bf7255f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MWQyMjIwZDI4ZjQ1OGU1OWIyZjEyYTU3MWQyOTYzYmY3MjU1ZjU=", "commit": {"author": {"name": "sinkuu", "email": "sinkuupump@gmail.com", "date": "2017-02-05T04:41:09Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-04T13:16:16Z"}, "message": "Add identity_conversion lint (fixes #1051)", "tree": {"sha": "35cb8e9205ffaed9a859a2bf47671b7db5051bfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35cb8e9205ffaed9a859a2bf47671b7db5051bfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/771d2220d28f458e59b2f12a571d2963bf7255f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/771d2220d28f458e59b2f12a571d2963bf7255f5", "html_url": "https://github.com/rust-lang/rust/commit/771d2220d28f458e59b2f12a571d2963bf7255f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/771d2220d28f458e59b2f12a571d2963bf7255f5/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab7f36e14674dc9aa2ccf2f2da133b053e9431c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab7f36e14674dc9aa2ccf2f2da133b053e9431c", "html_url": "https://github.com/rust-lang/rust/commit/1ab7f36e14674dc9aa2ccf2f2da133b053e9431c"}], "stats": {"total": 182, "additions": 180, "deletions": 2}, "files": [{"sha": "d64f352d7f16ca0640188569c6cd2002a3c98afe", "filename": "clippy_lints/src/identity_conversion.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -0,0 +1,96 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use syntax::ast::NodeId;\n+use utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n+use utils::{opt_def_id, paths, resolve_node};\n+\n+/// **What it does:** Checks for always-identical `Into`/`From` conversions.\n+///\n+/// **Why is this bad?** Redundant code.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // format!() returns a `String`\n+/// let s: String = format!(\"hello\").into();\n+/// ```\n+declare_lint! {\n+    pub IDENTITY_CONVERSION,\n+    Warn,\n+    \"using always-identical `Into`/`From` conversions\"\n+}\n+\n+#[derive(Default)]\n+pub struct IdentityConversion {\n+    try_desugar_arm: Vec<NodeId>,\n+}\n+\n+impl LintPass for IdentityConversion {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IDENTITY_CONVERSION)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityConversion {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if in_macro(e.span) {\n+            return;\n+        }\n+\n+        if Some(&e.id) == self.try_desugar_arm.last() {\n+            return;\n+        }\n+\n+        match e.node {\n+            ExprMatch(_, ref arms, MatchSource::TryDesugar) => {\n+                let e = match arms[0].body.node {\n+                    ExprRet(Some(ref e)) | ExprBreak(_, Some(ref e)) => e,\n+                    _ => return,\n+                };\n+                if let ExprCall(_, ref args) = e.node {\n+                    self.try_desugar_arm.push(args[0].id);\n+                } else {\n+                    return;\n+                }\n+            },\n+\n+            ExprMethodCall(ref name, .., ref args) => {\n+                if match_trait_method(cx, e, &paths::INTO[..]) && &*name.name.as_str() == \"into\" {\n+                    let a = cx.tables.expr_ty(e);\n+                    let b = cx.tables.expr_ty(&args[0]);\n+                    if same_tys(cx, a, b) {\n+                        let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                        span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n+                            db.span_suggestion(e.span, \"consider removing `.into()`\", sugg);\n+                        });\n+                    }\n+                }\n+            },\n+\n+            ExprCall(ref path, ref args) => if let ExprPath(ref qpath) = path.node {\n+                if let Some(def_id) = opt_def_id(resolve_node(cx, qpath, path.hir_id)) {\n+                    if match_def_path(cx.tcx, def_id, &paths::FROM_FROM[..]) {\n+                        let a = cx.tables.expr_ty(e);\n+                        let b = cx.tables.expr_ty(&args[0]);\n+                        if same_tys(cx, a, b) {\n+                            let sugg = snippet(cx, args[0].span, \"<expr>\").into_owned();\n+                            let sugg_msg = format!(\"consider removing `{}()`\", snippet(cx, path.span, \"From::from\"));\n+                            span_lint_and_then(cx, IDENTITY_CONVERSION, e.span, \"identical conversion\", |db| {\n+                                db.span_suggestion(e.span, &sugg_msg, sugg);\n+                            });\n+                        }\n+                    }\n+                }\n+            },\n+\n+            _ => {},\n+        }\n+    }\n+\n+    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n+        if Some(&e.id) == self.try_desugar_arm.last() {\n+            self.try_desugar_arm.pop();\n+        }\n+    }\n+}"}, {"sha": "d4af88d5fede0896a443f1b837b8342f63dc963c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -93,6 +93,7 @@ pub mod eval_order_dependence;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n+pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n@@ -331,6 +332,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box bytecount::ByteCount);\n     reg.register_late_lint_pass(box infinite_iter::Pass);\n     reg.register_late_lint_pass(box invalid_ref::InvalidRef);\n+    reg.register_late_lint_pass(box identity_conversion::IdentityConversion::default());\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -431,6 +433,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n         functions::NOT_UNSAFE_PTR_ARG_DEREF,\n         functions::TOO_MANY_ARGUMENTS,\n+        identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infinite_iter::INFINITE_ITER,"}, {"sha": "d517d32b64caf41d987c963bab667c040bd9ddab", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -26,11 +26,13 @@ pub const DOUBLE_ENDED_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\",\n pub const DROP: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n pub const FMT_ARGUMENTS_NEWV1: [&'static str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTV1_NEW: [&'static str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FROM_FROM: [&'static str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const HASH: [&'static str; 2] = [\"hash\", \"Hash\"];\n pub const HASHMAP: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];\n pub const HASHMAP_ENTRY: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHSET: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\"];\n pub const INIT: [&'static str; 4] = [\"core\", \"intrinsics\", \"\", \"init\"];\n+pub const INTO: [&'static str; 3] = [\"core\", \"convert\", \"Into\"];\n pub const INTO_ITERATOR: [&'static str; 4] = [\"core\", \"iter\", \"traits\", \"IntoIterator\"];\n pub const IO_PRINT: [&'static str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n pub const IO_READ: [&'static str; 3] = [\"std\", \"io\", \"Read\"];"}, {"sha": "6044eaac3769ee7350a006911197ca7e3bbb4e53", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -67,15 +67,15 @@ fn check_vec_macro<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, vec_args: &higher::VecA\n                 .eval(len)\n                 .is_ok()\n             {\n-                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n+                format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\"))\n             } else {\n                 return;\n             }\n         },\n         higher::VecArgs::Vec(args) => if let Some(last) = args.iter().last() {\n             let span = args[0].span.to(last.span);\n \n-            format!(\"&[{}]\", snippet(cx, span, \"..\")).into()\n+            format!(\"&[{}]\", snippet(cx, span, \"..\"))\n         } else {\n             \"&[]\".into()\n         },"}, {"sha": "81cbdd9643a46bf5702f5b78a5edb166b8f109f1", "filename": "tests/ui/identity_conversion.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/tests%2Fui%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/tests%2Fui%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.rs?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -0,0 +1,35 @@\n+#![deny(identity_conversion)]\n+\n+fn test_generic<T: Copy>(val: T) -> T {\n+    let _ = T::from(val);\n+    val.into()\n+}\n+\n+fn test_generic2<T: Copy + Into<i32> + Into<U>, U: From<T>>(val: T) {\n+    // ok\n+    let _: i32 = val.into();\n+    let _: U = val.into();\n+    let _ = U::from(val);\n+}\n+\n+fn test_questionmark() -> Result<(), ()> {\n+    {\n+        let _: i32 = 0i32.into();\n+        Ok(Ok(()))\n+    }??;\n+    Ok(())\n+}\n+\n+fn main() {\n+    test_generic(10i32);\n+    test_generic2::<i32, i32>(10i32);\n+    test_questionmark().unwrap();\n+\n+    let _: String = \"foo\".into();\n+    let _: String = From::from(\"foo\");\n+    let _ = String::from(\"foo\");\n+\n+    let _: String = \"foo\".to_string().into();\n+    let _: String = From::from(\"foo\".to_string());\n+    let _ = String::from(\"foo\".to_string());\n+}"}, {"sha": "8e8d8a701249ef502b4e9d08a42e2c039fc7445d", "filename": "tests/ui/identity_conversion.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/771d2220d28f458e59b2f12a571d2963bf7255f5/tests%2Fui%2Fidentity_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/771d2220d28f458e59b2f12a571d2963bf7255f5/tests%2Fui%2Fidentity_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_conversion.stderr?ref=771d2220d28f458e59b2f12a571d2963bf7255f5", "patch": "@@ -0,0 +1,42 @@\n+error: identical conversion\n+ --> $DIR/identity_conversion.rs:4:13\n+  |\n+4 |     let _ = T::from(val);\n+  |             ^^^^^^^^^^^^ help: consider removing `T::from()`: `val`\n+  |\n+note: lint level defined here\n+ --> $DIR/identity_conversion.rs:1:9\n+  |\n+1 | #![deny(identity_conversion)]\n+  |         ^^^^^^^^^^^^^^^^^^^\n+\n+error: identical conversion\n+ --> $DIR/identity_conversion.rs:5:5\n+  |\n+5 |     val.into()\n+  |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:17:22\n+   |\n+17 |         let _: i32 = 0i32.into();\n+   |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:32:21\n+   |\n+32 |     let _: String = \"foo\".to_string().into();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:33:21\n+   |\n+33 |     let _: String = From::from(\"foo\".to_string());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n+\n+error: identical conversion\n+  --> $DIR/identity_conversion.rs:34:13\n+   |\n+34 |     let _ = String::from(\"foo\".to_string());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n+"}]}