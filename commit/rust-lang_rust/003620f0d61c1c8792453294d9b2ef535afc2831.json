{"sha": "003620f0d61c1c8792453294d9b2ef535afc2831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzYyMGYwZDYxYzFjODc5MjQ1MzI5NGQ5YjJlZjUzNWFmYzI4MzE=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-08T13:04:47Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2020-01-08T13:06:08Z"}, "message": "Use downcasting for CargoTomlNotFoundError", "tree": {"sha": "37f5d4ab7f215e2ff775ac632a8f6d4be89f994e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37f5d4ab7f215e2ff775ac632a8f6d4be89f994e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003620f0d61c1c8792453294d9b2ef535afc2831", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJeFdPCAAoJENWyu1zcMzS8PQgH+wXwLwzEfS9GxuRHwc3MY8UI\n1YwS6M51zU7gsWRmJOq71ELTSOoFXiIlhs9d7ninJhBQrr+ozPPUmpGruuKHJ5uF\nLzdQNy/D8RkTKHjhJOtX5ghtMgIr/6jI/WS5/6WN1iBC7ZRqRMmO49DW/3MY5Wx4\nlg4Q4yeY+GA4iwuiPTIsMxRdiyGob4McPkFgnw7mL27bzWz/3BWnvZMpF4y1cNyY\n2dfQZxE0LeVw9v8XdmirsWhE3e+cOf8pIYTyYp0DiU3jaHZ1FkQimFwGU1zONFFK\nEmNn6mNLSLADTSWCifrCRA1Ek/GZpHiRg37Q78I8zgytCn3KOZTj2UL7vT/X1qU=\n=U6m6\n-----END PGP SIGNATURE-----", "payload": "tree 37f5d4ab7f215e2ff775ac632a8f6d4be89f994e\nparent e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3\nauthor Wilco Kusee <wilcokusee@gmail.com> 1578488687 +0100\ncommitter Wilco Kusee <wilcokusee@gmail.com> 1578488768 +0100\n\nUse downcasting for CargoTomlNotFoundError\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003620f0d61c1c8792453294d9b2ef535afc2831", "html_url": "https://github.com/rust-lang/rust/commit/003620f0d61c1c8792453294d9b2ef535afc2831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003620f0d61c1c8792453294d9b2ef535afc2831/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "html_url": "https://github.com/rust-lang/rust/commit/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3"}], "stats": {"total": 145, "additions": 48, "deletions": 97}, "files": [{"sha": "21341b7697d6d0e2bb5e8b48449f39b09588cfec", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=003620f0d61c1c8792453294d9b2ef535afc2831", "patch": "@@ -10,10 +10,7 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n \n pub use crate::{\n     cancellation::Canceled,\n-    input::{\n-        CrateGraph, CrateId, Dependency, Edition, Env, FileId, ParseEditionError, SourceRoot,\n-        SourceRootId,\n-    },\n+    input::{CrateGraph, CrateId, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId},\n };\n pub use relative_path::{RelativePath, RelativePathBuf};\n pub use salsa;"}, {"sha": "53c6834d04b7537f699224e5cea878b44f3f2769", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=003620f0d61c1c8792453294d9b2ef535afc2831", "patch": "@@ -13,7 +13,6 @@ use lsp_types::{ClientCapabilities, NumberOrString};\n use ra_cargo_watch::{CheckOptions, CheckTask};\n use ra_ide::{Canceled, FeatureFlags, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n-use ra_project_model::WorkspaceError;\n use ra_vfs::{VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashSet;\n@@ -92,7 +91,8 @@ pub fn main_loop(\n                     Ok(workspace) => loaded_workspaces.push(workspace),\n                     Err(e) => {\n                         log::error!(\"loading workspace failed: {}\", e);\n-                        if let WorkspaceError::CargoTomlNotFound(_) = e {\n+                        if let Some(ra_project_model::CargoTomlNotFoundError(_)) = e.downcast_ref()\n+                        {\n                             if !feature_flags.get(\"notifications.cargo-toml-not-found\") {\n                                 continue;\n                             }"}, {"sha": "1b3c246c7e1f91ab0ef78ec9a30381ec81db20ad", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=003620f0d61c1c8792453294d9b2ef535afc2831", "patch": "@@ -8,7 +8,7 @@ use ra_db::Edition;\n use rustc_hash::FxHashMap;\n use serde::Deserialize;\n \n-use crate::WorkspaceError;\n+use crate::Result;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -156,7 +156,7 @@ impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &Path,\n         cargo_features: &CargoFeatures,\n-    ) -> Result<CargoWorkspace, WorkspaceError> {\n+    ) -> Result<CargoWorkspace> {\n         let mut meta = MetadataCommand::new();\n         meta.manifest_path(cargo_toml);\n         if cargo_features.all_features {\n@@ -171,7 +171,7 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n-        let meta = meta.exec().map_err(|e| WorkspaceError::CargoMetadataFailed(e))?;\n+        let meta = meta.exec().map_err(|e| format!(\"cargo metadata failed: {}\", e))?;\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();"}, {"sha": "e3633886014c0d1b4f464144cfafe5cd54d3b05d", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=003620f0d61c1c8792453294d9b2ef535afc2831", "patch": "@@ -3,9 +3,9 @@\n mod cargo_workspace;\n mod json_project;\n mod sysroot;\n-mod workspace_error;\n \n use std::{\n+    error::Error,\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n@@ -21,9 +21,27 @@ pub use crate::{\n     cargo_workspace::{CargoFeatures, CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n     sysroot::Sysroot,\n-    workspace_error::WorkspaceError,\n };\n \n+pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n+\n+#[derive(Clone, PartialEq, Eq, Hash)]\n+pub struct CargoTomlNotFoundError(pub PathBuf);\n+\n+impl std::fmt::Display for CargoTomlNotFoundError {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(fmt, \"can't find Cargo.toml at {}\", self.0.display())\n+    }\n+}\n+\n+impl std::fmt::Debug for CargoTomlNotFoundError {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(fmt, \"can't find Cargo.toml at {}\", self.0.display())\n+    }\n+}\n+\n+impl Error for CargoTomlNotFoundError {}\n+\n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n@@ -58,27 +76,20 @@ impl PackageRoot {\n }\n \n impl ProjectWorkspace {\n-    pub fn discover(\n-        path: &Path,\n-        cargo_features: &CargoFeatures,\n-    ) -> Result<ProjectWorkspace, WorkspaceError> {\n+    pub fn discover(path: &Path, cargo_features: &CargoFeatures) -> Result<ProjectWorkspace> {\n         ProjectWorkspace::discover_with_sysroot(path, true, cargo_features)\n     }\n \n     pub fn discover_with_sysroot(\n         path: &Path,\n         with_sysroot: bool,\n         cargo_features: &CargoFeatures,\n-    ) -> Result<ProjectWorkspace, WorkspaceError> {\n+    ) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {\n-                let file =\n-                    File::open(json_path).map_err(|err| WorkspaceError::OpenWorkspaceError(err))?;\n+                let file = File::open(json_path)?;\n                 let reader = BufReader::new(file);\n-                Ok(ProjectWorkspace::Json {\n-                    project: from_reader(reader)\n-                        .map_err(|err| WorkspaceError::ReadWorkspaceError(err))?,\n-                })\n+                Ok(ProjectWorkspace::Json { project: from_reader(reader)? })\n             }\n             None => {\n                 let cargo_toml = find_cargo_toml(path)?;\n@@ -355,7 +366,7 @@ fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n     None\n }\n \n-fn find_cargo_toml(path: &Path) -> Result<PathBuf, WorkspaceError> {\n+fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n     if path.ends_with(\"Cargo.toml\") {\n         return Ok(path.to_path_buf());\n     }\n@@ -367,7 +378,7 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf, WorkspaceError> {\n         }\n         curr = path.parent();\n     }\n-    Err(WorkspaceError::CargoTomlNotFound(path.to_path_buf()))\n+    Err(Box::new(CargoTomlNotFoundError(path.to_path_buf())))\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {\n@@ -381,16 +392,13 @@ pub fn get_rustc_cfg_options() -> CfgOptions {\n         }\n     }\n \n-    match (|| -> Result<_, WorkspaceError> {\n+    match (|| -> Result<_> {\n         // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n-        let output = Command::new(\"rustc\")\n-            .args(&[\"--print\", \"cfg\", \"-O\"])\n-            .output()\n-            .map_err(|err| WorkspaceError::RustcError(err))?;\n+        let output = Command::new(\"rustc\").args(&[\"--print\", \"cfg\", \"-O\"]).output()?;\n         if !output.status.success() {\n-            Err(WorkspaceError::RustcCfgError)?;\n+            Err(\"failed to get rustc cfgs\")?;\n         }\n-        Ok(String::from_utf8(output.stdout).map_err(|err| WorkspaceError::RustcOutputError(err))?)\n+        Ok(String::from_utf8(output.stdout)?)\n     })() {\n         Ok(rustc_cfgs) => {\n             for line in rustc_cfgs.lines() {"}, {"sha": "10ca391b6aa947ae22180f15fd1b30d9cae7d443", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003620f0d61c1c8792453294d9b2ef535afc2831/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=003620f0d61c1c8792453294d9b2ef535afc2831", "patch": "@@ -8,7 +8,7 @@ use std::{\n \n use ra_arena::{impl_arena_id, Arena, RawId};\n \n-use crate::WorkspaceError;\n+use crate::Result;\n \n #[derive(Default, Debug, Clone)]\n pub struct Sysroot {\n@@ -47,11 +47,16 @@ impl Sysroot {\n         self.crates.iter().map(|(id, _data)| id)\n     }\n \n-    pub fn discover(cargo_toml: &Path) -> Result<Sysroot, WorkspaceError> {\n+    pub fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n         let src = try_find_src_path(cargo_toml)?;\n \n         if !src.exists() {\n-            return Err(WorkspaceError::NoStdLib(src));\n+            Err(format!(\n+                \"can't load standard library from sysroot\\n\\\n+                 {:?}\\n\\\n+                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n+                src,\n+            ))?;\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };\n@@ -85,21 +90,19 @@ impl Sysroot {\n     }\n }\n \n-fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf, WorkspaceError> {\n+fn try_find_src_path(cargo_toml: &Path) -> Result<PathBuf> {\n     if let Ok(path) = env::var(\"RUST_SRC_PATH\") {\n         return Ok(path.into());\n     }\n \n     let rustc_output = Command::new(\"rustc\")\n         .current_dir(cargo_toml.parent().unwrap())\n         .args(&[\"--print\", \"sysroot\"])\n-        .output()\n-        .map_err(|err| WorkspaceError::RustcError(err))?;\n+        .output()?;\n     if !rustc_output.status.success() {\n-        Err(WorkspaceError::SysrootNotFound)?;\n+        Err(\"failed to locate sysroot\")?;\n     }\n-    let stdout = String::from_utf8(rustc_output.stdout)\n-        .map_err(|err| WorkspaceError::RustcOutputError(err))?;\n+    let stdout = String::from_utf8(rustc_output.stdout)?;\n     let sysroot_path = Path::new(stdout.trim());\n     Ok(sysroot_path.join(\"lib/rustlib/src/rust/src\"))\n }"}, {"sha": "5f7384968101eb7340266eaa30b9ba7b9b734f71", "filename": "crates/ra_project_model/src/workspace_error.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fworkspace_error.rs?ref=e7bb82c3a494e08cbcd283b8292579a9cf0bb1a3", "patch": "@@ -1,57 +0,0 @@\n-//! Workspace-related errors\n-\n-use std::{error::Error, fmt, io, path::PathBuf, string::FromUtf8Error};\n-\n-use ra_db::ParseEditionError;\n-\n-#[derive(Debug)]\n-pub enum WorkspaceError {\n-    CargoMetadataFailed(cargo_metadata::Error),\n-    CargoTomlNotFound(PathBuf),\n-    NoStdLib(PathBuf),\n-    OpenWorkspaceError(io::Error),\n-    ParseEditionError(ParseEditionError),\n-    ReadWorkspaceError(serde_json::Error),\n-    RustcCfgError,\n-    RustcError(io::Error),\n-    RustcOutputError(FromUtf8Error),\n-    SysrootNotFound,\n-}\n-\n-impl fmt::Display for WorkspaceError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Self::OpenWorkspaceError(err) | Self::RustcError(err) => write!(f, \"{}\", err),\n-            Self::ParseEditionError(err) => write!(f, \"{}\", err),\n-            Self::ReadWorkspaceError(err) => write!(f, \"{}\", err),\n-            Self::RustcOutputError(err) => write!(f, \"{}\", err),\n-            Self::CargoMetadataFailed(err) => write!(f, \"cargo metadata failed: {}\", err),\n-            Self::RustcCfgError => write!(f, \"failed to get rustc cfgs\"),\n-            Self::SysrootNotFound => write!(f, \"failed to locate sysroot\"),\n-            Self::CargoTomlNotFound(path) => {\n-                write!(f, \"can't find Cargo.toml at {}\", path.display())\n-            }\n-            Self::NoStdLib(sysroot) => write!(\n-                f,\n-                \"can't load standard library from sysroot\\n\\\n-                 {:?}\\n\\\n-                 try running `rustup component add rust-src` or set `RUST_SRC_PATH`\",\n-                sysroot,\n-            ),\n-        }\n-    }\n-}\n-\n-impl From<ParseEditionError> for WorkspaceError {\n-    fn from(err: ParseEditionError) -> Self {\n-        Self::ParseEditionError(err.into())\n-    }\n-}\n-\n-impl From<cargo_metadata::Error> for WorkspaceError {\n-    fn from(err: cargo_metadata::Error) -> Self {\n-        Self::CargoMetadataFailed(err.into())\n-    }\n-}\n-\n-impl Error for WorkspaceError {}"}]}