{"sha": "89e6a81ef9831810a8e68189c6137040f76fb6b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTZhODFlZjk4MzE4MTBhOGU2ODE4OWM2MTM3MDQwZjc2ZmI2YjU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-27T18:27:19Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T00:05:58Z"}, "message": "libregex: remove unnecessary `as_slice` calls", "tree": {"sha": "1c182c12b408e65027a79cf4c8dc9716442dcdb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c182c12b408e65027a79cf4c8dc9716442dcdb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e6a81ef9831810a8e68189c6137040f76fb6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e6a81ef9831810a8e68189c6137040f76fb6b5", "html_url": "https://github.com/rust-lang/rust/commit/89e6a81ef9831810a8e68189c6137040f76fb6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e6a81ef9831810a8e68189c6137040f76fb6b5/comments", "author": null, "committer": null, "parents": [{"sha": "0ea31348d90d24c7a36d0543833b1174083bc7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ea31348d90d24c7a36d0543833b1174083bc7cb", "html_url": "https://github.com/rust-lang/rust/commit/0ea31348d90d24c7a36d0543833b1174083bc7cb"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5cd833e2797919b70046038c12c2fe8ea005dbcd", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=89e6a81ef9831810a8e68189c6137040f76fb6b5", "patch": "@@ -523,11 +523,11 @@ impl<'a> Parser<'a> {\n \n         // Parse the min and max values from the regex.\n         let (mut min, mut max): (uint, Option<uint>);\n-        if !inner.as_slice().contains(\",\") {\n+        if !inner.contains(\",\") {\n             min = try!(self.parse_uint(inner.as_slice()));\n             max = Some(min);\n         } else {\n-            let pieces: Vec<&str> = inner.as_slice().splitn(1, ',').collect();\n+            let pieces: Vec<&str> = inner.splitn(1, ',').collect();\n             let (smin, smax) = (pieces[0], pieces[1]);\n             if smin.len() == 0 {\n                 return self.err(\"Max repetitions cannot be specified \\\n@@ -751,7 +751,7 @@ impl<'a> Parser<'a> {\n             return self.err(\"Capture names must have at least 1 character.\")\n         }\n         let name = self.slice(self.chari, closer);\n-        if !name.as_slice().chars().all(is_valid_cap) {\n+        if !name.chars().all(is_valid_cap) {\n             return self.err(\n                 \"Capture names can only have underscores, letters and digits.\")\n         }"}, {"sha": "27091b6ef4b4dd162ab542ee700ce2a1ce38f2b6", "filename": "src/libregex/test/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Ftest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Ftest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Ftests.rs?ref=89e6a81ef9831810a8e68189c6137040f76fb6b5", "patch": "@@ -156,13 +156,13 @@ macro_rules! mat(\n             };\n             // The test set sometimes leave out capture groups, so truncate\n             // actual capture groups to match test set.\n-            let (sexpect, mut sgot) = (expected.as_slice(), got.as_slice());\n-            if sgot.len() > sexpect.len() {\n-                sgot = sgot[0..sexpect.len()]\n+            let mut sgot = got.as_slice();\n+            if sgot.len() > expected.len() {\n+                sgot = sgot[0..expected.len()]\n             }\n-            if sexpect != sgot {\n+            if expected != sgot {\n                 panic!(\"For RE '{}' against '{}', expected '{}' but got '{}'\",\n-                      $re, text, sexpect, sgot);\n+                      $re, text, expected, sgot);\n             }\n         }\n     );"}, {"sha": "4315c0f7b404022cd65dcbfa38dea8d113497525", "filename": "src/libregex/vm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Fvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e6a81ef9831810a8e68189c6137040f76fb6b5/src%2Flibregex%2Fvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fvm.rs?ref=89e6a81ef9831810a8e68189c6137040f76fb6b5", "patch": "@@ -147,7 +147,7 @@ impl<'r, 't> Nfa<'r, 't> {\n                 // jump ahead quickly. If it can't be found, then we can bail\n                 // out early.\n                 if self.prog.prefix.len() > 0 && clist.size == 0 {\n-                    let needle = self.prog.prefix.as_slice().as_bytes();\n+                    let needle = self.prog.prefix.as_bytes();\n                     let haystack = self.input.as_bytes()[self.ic..];\n                     match find_prefix(needle, haystack) {\n                         None => break,"}]}