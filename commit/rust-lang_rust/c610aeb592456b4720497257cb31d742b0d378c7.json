{"sha": "c610aeb592456b4720497257cb31d742b0d378c7", "node_id": "C_kwDOAAsO6NoAKGM2MTBhZWI1OTI0NTZiNDcyMDQ5NzI1N2NiMzFkNzQyYjBkMzc4Yzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-29T12:16:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-29T12:16:04Z"}, "message": "Rollup merge of #106221 - Nilstrieb:rptr-more-like-ref-actually, r=compiler-errors\n\nRename `Rptr` to `Ref` in AST and HIR\n\nThe name makes a lot more sense, and `ty::TyKind` calls it `Ref` already as well.", "tree": {"sha": "db2a6c0cca9c2280045d48659e6c343e889cc229", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db2a6c0cca9c2280045d48659e6c343e889cc229"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c610aeb592456b4720497257cb31d742b0d378c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjrYUECRBK7hj4Ov3rIwAAk0IIAGlkd+1ldsCZ7/iEhsRnLfSd\n6LFMC4B9NvIFpx2uZkGzGOMxPxHGOOw5DVqirfJbGd5uYeC86hehMguA8kUanuAx\n+iQnEI/091ddB4pmQduxPjopUg1CHdNXRIGBpqCFk7UFpeSvlzNRlZ3V0mmMf3JN\nvDmfR2E6hNlgz1+2L7/2z8Q2JF1e0B1koF7mfriowKZdV/jX88rMxyi7EHdDgqvf\nxpyCdl86aeLjgJExNWWxIY3JR8IZ7n0zJsEQBe8M/kuVzkeWwp+gB3NGRZr9ZkyU\n9N+XEz28Xz5MWzcGrk6aYxQN2QRsqDhyQpfJYKPgzFsAU07UJAjdmO3QTxv0x8w=\n=2qIM\n-----END PGP SIGNATURE-----\n", "payload": "tree db2a6c0cca9c2280045d48659e6c343e889cc229\nparent 2c4560cb1229d2edb07ed045003fbdb4cb955ac0\nparent 9067e4417e52643596ae8dbc4ec6369a0d856b45\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1672316164 +0100\ncommitter GitHub <noreply@github.com> 1672316164 +0100\n\nRollup merge of #106221 - Nilstrieb:rptr-more-like-ref-actually, r=compiler-errors\n\nRename `Rptr` to `Ref` in AST and HIR\n\nThe name makes a lot more sense, and `ty::TyKind` calls it `Ref` already as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c610aeb592456b4720497257cb31d742b0d378c7", "html_url": "https://github.com/rust-lang/rust/commit/c610aeb592456b4720497257cb31d742b0d378c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c610aeb592456b4720497257cb31d742b0d378c7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4560cb1229d2edb07ed045003fbdb4cb955ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4560cb1229d2edb07ed045003fbdb4cb955ac0", "html_url": "https://github.com/rust-lang/rust/commit/2c4560cb1229d2edb07ed045003fbdb4cb955ac0"}, {"sha": "9067e4417e52643596ae8dbc4ec6369a0d856b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/9067e4417e52643596ae8dbc4ec6369a0d856b45", "html_url": "https://github.com/rust-lang/rust/commit/9067e4417e52643596ae8dbc4ec6369a0d856b45"}], "stats": {"total": 190, "additions": 93, "deletions": 97}, "files": [{"sha": "9cc81f391672e8b8dc561068f536c427b04e6a1a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -572,7 +572,7 @@ impl Pat {\n             PatKind::MacCall(mac) => TyKind::MacCall(mac.clone()),\n             // `&mut? P` can be reinterpreted as `&mut? T` where `T` is `P` reparsed as a type.\n             PatKind::Ref(pat, mutbl) => {\n-                pat.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?\n+                pat.to_ty().map(|ty| TyKind::Ref(None, MutTy { ty, mutbl: *mutbl }))?\n             }\n             // A slice/array pattern `[P]` can be reparsed as `[T]`, an unsized array,\n             // when `P` can be reparsed as a type `T`.\n@@ -1193,7 +1193,7 @@ impl Expr {\n             ExprKind::Paren(expr) => expr.to_ty().map(TyKind::Paren)?,\n \n             ExprKind::AddrOf(BorrowKind::Ref, mutbl, expr) => {\n-                expr.to_ty().map(|ty| TyKind::Rptr(None, MutTy { ty, mutbl: *mutbl }))?\n+                expr.to_ty().map(|ty| TyKind::Ref(None, MutTy { ty, mutbl: *mutbl }))?\n             }\n \n             ExprKind::Repeat(expr, expr_len) => {\n@@ -2031,7 +2031,7 @@ impl Clone for Ty {\n impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n             final_ty = ty;\n         }\n         final_ty\n@@ -2058,7 +2058,7 @@ pub enum TyKind {\n     /// A raw pointer (`*const T` or `*mut T`).\n     Ptr(MutTy),\n     /// A reference (`&'a T` or `&'a mut T`).\n-    Rptr(Option<Lifetime>, MutTy),\n+    Ref(Option<Lifetime>, MutTy),\n     /// A bare function (e.g., `fn(usize) -> bool`).\n     BareFn(P<BareFnTy>),\n     /// The never type (`!`).\n@@ -2286,7 +2286,7 @@ impl Param {\n             if ident.name == kw::SelfLower {\n                 return match self.ty.kind {\n                     TyKind::ImplicitSelf => Some(respan(self.pat.span, SelfKind::Value(mutbl))),\n-                    TyKind::Rptr(lt, MutTy { ref ty, mutbl }) if ty.kind.is_implicit_self() => {\n+                    TyKind::Ref(lt, MutTy { ref ty, mutbl }) if ty.kind.is_implicit_self() => {\n                         Some(respan(self.pat.span, SelfKind::Region(lt, mutbl)))\n                     }\n                     _ => Some(respan(\n@@ -2319,7 +2319,7 @@ impl Param {\n                 Mutability::Not,\n                 P(Ty {\n                     id: DUMMY_NODE_ID,\n-                    kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),\n+                    kind: TyKind::Ref(lt, MutTy { ty: infer_ty, mutbl }),\n                     span,\n                     tokens: None,\n                 }),"}, {"sha": "c572171e8f44393c65f7eba5ce499cd2e8286672", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -459,7 +459,7 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err | TyKind::Never | TyKind::CVarArgs => {}\n         TyKind::Slice(ty) => vis.visit_ty(ty),\n         TyKind::Ptr(mt) => vis.visit_mt(mt),\n-        TyKind::Rptr(lt, mt) => {\n+        TyKind::Ref(lt, mt) => {\n             visit_opt(lt, |lt| noop_visit_lifetime(lt, vis));\n             vis.visit_mt(mt);\n         }"}, {"sha": "df7145a722a46e52c9de6072d6467d7a525f0b09", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -92,7 +92,7 @@ impl<'a> FnKind<'a> {\n #[derive(Copy, Clone, Debug)]\n pub enum LifetimeCtxt {\n     /// Appears in a reference type.\n-    Rptr,\n+    Ref,\n     /// Appears as a bound on a type or another lifetime.\n     Bound,\n     /// Appears as a generic argument.\n@@ -396,8 +396,8 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n     match &typ.kind {\n         TyKind::Slice(ty) | TyKind::Paren(ty) => visitor.visit_ty(ty),\n         TyKind::Ptr(mutable_type) => visitor.visit_ty(&mutable_type.ty),\n-        TyKind::Rptr(opt_lifetime, mutable_type) => {\n-            walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Rptr);\n+        TyKind::Ref(opt_lifetime, mutable_type) => {\n+            walk_list!(visitor, visit_lifetime, opt_lifetime, LifetimeCtxt::Ref);\n             visitor.visit_ty(&mutable_type.ty)\n         }\n         TyKind::Tup(tuple_element_types) => {"}, {"sha": "c9d7477b5283670d3bd91caf8970383266b85e3b", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1238,7 +1238,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             TyKind::Err => hir::TyKind::Err,\n             TyKind::Slice(ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n-            TyKind::Rptr(region, mt) => {\n+            TyKind::Ref(region, mt) => {\n                 let region = region.unwrap_or_else(|| {\n                     let id = if let Some(LifetimeRes::ElidedAnchor { start, end }) =\n                         self.resolver.get_lifetime_res(t.id)\n@@ -1252,7 +1252,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     Lifetime { ident: Ident::new(kw::UnderscoreLifetime, span), id }\n                 });\n                 let lifetime = self.lower_lifetime(&region);\n-                hir::TyKind::Rptr(lifetime, self.lower_mt(mt, itctx))\n+                hir::TyKind::Ref(lifetime, self.lower_mt(mt, itctx))\n             }\n             TyKind::BareFn(f) => {\n                 let generic_params = self.lower_lifetime_binder(t.id, &f.generic_params);\n@@ -1771,7 +1771,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Given we are only considering `ImplicitSelf` types, we needn't consider\n                     // the case where we have a mutable pattern to a reference as that would\n                     // no longer be an `ImplicitSelf`.\n-                    TyKind::Rptr(_, mt) if mt.ty.kind.is_implicit_self() => match mt.mutbl {\n+                    TyKind::Ref(_, mt) if mt.ty.kind.is_implicit_self() => match mt.mutbl {\n                         hir::Mutability::Not => hir::ImplicitSelfKind::ImmRef,\n                         hir::Mutability::Mut => hir::ImplicitSelfKind::MutRef,\n                     },"}, {"sha": "3989fc486193e6d25922c6100b0ba91917f17e6d", "filename": "compiler/rustc_ast_lowering/src/lifetime_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flifetime_collector.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -83,7 +83,7 @@ impl<'ast> Visitor<'ast> for LifetimeCollectVisitor<'ast> {\n                 visit::walk_ty(self, t);\n                 self.current_binders.pop();\n             }\n-            TyKind::Rptr(None, _) => {\n+            TyKind::Ref(None, _) => {\n                 self.record_elided_anchor(t.id, t.span);\n                 visit::walk_ty(self, t);\n             }"}, {"sha": "104cdd3a8e119476c4a6f527e9f5dcd21eb9fe20", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1025,7 +1025,7 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n                 self.print_mt(mt, true);\n             }\n-            ast::TyKind::Rptr(lifetime, mt) => {\n+            ast::TyKind::Ref(lifetime, mt) => {\n                 self.word(\"&\");\n                 self.print_opt_lifetime(lifetime);\n                 self.print_mt(mt, false);"}, {"sha": "3c3cb8c6b9c2ac4fa1eaeebdff4fc9f64dce5805", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -2681,7 +2681,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             // Need to use the `rustc_middle::ty` types to compare against the\n                             // `return_region`. Then use the `rustc_hir` type to get only\n                             // the lifetime span.\n-                            if let hir::TyKind::Rptr(lifetime, _) = &fn_decl.inputs[index].kind {\n+                            if let hir::TyKind::Ref(lifetime, _) = &fn_decl.inputs[index].kind {\n                                 // With access to the lifetime, we can get\n                                 // the span of it.\n                                 arguments.push((*argument, lifetime.ident.span));\n@@ -2702,7 +2702,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let return_ty = sig.output().skip_binder();\n                 let mut return_span = fn_decl.output.span();\n                 if let hir::FnRetTy::Return(ty) = &fn_decl.output {\n-                    if let hir::TyKind::Rptr(lifetime, _) = ty.kind {\n+                    if let hir::TyKind::Ref(lifetime, _) = ty.kind {\n                         return_span = lifetime.ident.span;\n                     }\n                 }"}, {"sha": "f13fb842bb601f75f447a2e8afbd4be2cb2aebff", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1209,7 +1209,7 @@ fn get_mut_span_in_struct_field<'tcx>(\n         // Now we're dealing with the actual struct that we're going to suggest a change to,\n         // we can expect a field that is an immutable reference to a type.\n         && let hir::Node::Field(field) = node\n-        && let hir::TyKind::Rptr(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n+        && let hir::TyKind::Ref(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n     {\n         return Some(lt.ident.span.between(ty.span));\n     }"}, {"sha": "dbd4cac7b1432f2e3785838144f09e49a41a4c2b", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -493,10 +493,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                 //\n                 //     &\n                 //     - let's call the lifetime of this reference `'1`\n-                (\n-                    ty::Ref(region, referent_ty, _),\n-                    hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n-                ) => {\n+                (ty::Ref(region, referent_ty, _), hir::TyKind::Ref(_lifetime, referent_hir_ty)) => {\n                     if region.to_region_vid() == needle_fr {\n                         // Just grab the first character, the `&`.\n                         let source_map = self.infcx.tcx.sess.source_map();"}, {"sha": "5b1b7e6804c86d7235d0597e074901dba8fa0b37", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -117,8 +117,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         // `let names: &'static _ = &[\"field1\", \"field2\"];`\n         let names_let = if is_struct {\n             let lt_static = Some(cx.lifetime_static(span));\n-            let ty_static_ref =\n-                cx.ty_rptr(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n+            let ty_static_ref = cx.ty_ref(span, cx.ty_infer(span), lt_static, ast::Mutability::Not);\n             Some(cx.stmt_let_ty(\n                 span,\n                 false,\n@@ -138,13 +137,13 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         );\n         let ty_slice = cx.ty(\n             span,\n-            ast::TyKind::Slice(cx.ty_rptr(span, ty_dyn_debug, None, ast::Mutability::Not)),\n+            ast::TyKind::Slice(cx.ty_ref(span, ty_dyn_debug, None, ast::Mutability::Not)),\n         );\n         let values_let = cx.stmt_let_ty(\n             span,\n             false,\n             Ident::new(sym::values, span),\n-            Some(cx.ty_rptr(span, ty_slice, None, ast::Mutability::Not)),\n+            Some(cx.ty_ref(span, ty_slice, None, ast::Mutability::Not)),\n             cx.expr_array_ref(span, value_exprs),\n         );\n "}, {"sha": "c6f5f5d080706be7d41c7c52d8840edf6b545b42", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -97,7 +97,7 @@ impl Ty {\n         match self {\n             Ref(ty, mutbl) => {\n                 let raw_ty = ty.to_ty(cx, span, self_ty, self_generics);\n-                cx.ty_rptr(span, raw_ty, None, *mutbl)\n+                cx.ty_ref(span, raw_ty, None, *mutbl)\n             }\n             Path(p) => p.to_ty(cx, span, self_ty, self_generics),\n             Self_ => cx.ty_path(self.to_path(cx, span, self_ty, self_generics)),"}, {"sha": "84d06b69a9d976c3d7c260dfe723693139dfe80b", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -30,7 +30,7 @@ pub fn expand_option_env<'cx>(\n                 sp,\n                 true,\n                 cx.std_path(&[sym::option, sym::Option, sym::None]),\n-                vec![GenericArg::Type(cx.ty_rptr(\n+                vec![GenericArg::Type(cx.ty_ref(\n                     sp,\n                     cx.ty_ident(sp, Ident::new(sym::str, sp)),\n                     Some(lt),"}, {"sha": "21c8caa658f24422567d56bf8474f5b9c6104d22", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -349,7 +349,7 @@ fn mk_decls(cx: &mut ExtCtxt<'_>, macros: &[ProcMacro]) -> P<ast::Item> {\n         .item_static(\n             span,\n             Ident::new(sym::_DECLS, span),\n-            cx.ty_rptr(\n+            cx.ty_ref(\n                 span,\n                 cx.ty(\n                     span,"}, {"sha": "93b3af4ab973df72f3577c846ab34511cec49adf", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -87,14 +87,14 @@ impl<'a> ExtCtxt<'a> {\n         self.anon_const(span, ast::ExprKind::Path(None, self.path_ident(span, ident)))\n     }\n \n-    pub fn ty_rptr(\n+    pub fn ty_ref(\n         &self,\n         span: Span,\n         ty: P<ast::Ty>,\n         lifetime: Option<ast::Lifetime>,\n         mutbl: ast::Mutability,\n     ) -> P<ast::Ty> {\n-        self.ty(span, ast::TyKind::Rptr(lifetime, self.ty_mt(ty, mutbl)))\n+        self.ty(span, ast::TyKind::Ref(lifetime, self.ty_mt(ty, mutbl)))\n     }\n \n     pub fn ty_ptr(&self, span: Span, ty: P<ast::Ty>, mutbl: ast::Mutability) -> P<ast::Ty> {"}, {"sha": "e923ec26a488fda25f34d200c305d9cded23a676", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -2431,7 +2431,7 @@ impl<'hir> Ty<'hir> {\n \n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n             final_ty = ty;\n         }\n         final_ty\n@@ -2588,7 +2588,7 @@ pub enum TyKind<'hir> {\n     /// A raw pointer (i.e., `*const T` or `*mut T`).\n     Ptr(MutTy<'hir>),\n     /// A reference (i.e., `&'a T` or `&'a mut T`).\n-    Rptr(&'hir Lifetime, MutTy<'hir>),\n+    Ref(&'hir Lifetime, MutTy<'hir>),\n     /// A bare function (e.g., `fn(usize) -> bool`).\n     BareFn(&'hir BareFnTy<'hir>),\n     /// The never type (`!`)."}, {"sha": "6c475b659eba0a87aaf65d8959dae479bbcac42c", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -809,7 +809,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n     match typ.kind {\n         TyKind::Slice(ref ty) => visitor.visit_ty(ty),\n         TyKind::Ptr(ref mutable_type) => visitor.visit_ty(mutable_type.ty),\n-        TyKind::Rptr(ref lifetime, ref mutable_type) => {\n+        TyKind::Ref(ref lifetime, ref mutable_type) => {\n             visitor.visit_lifetime(lifetime);\n             visitor.visit_ty(mutable_type.ty)\n         }"}, {"sha": "d7ab942665b33aa032a7137efb4392f55d763f98", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -2657,7 +2657,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             hir::TyKind::Ptr(ref mt) => {\n                 tcx.mk_ptr(ty::TypeAndMut { ty: self.ast_ty_to_ty(mt.ty), mutbl: mt.mutbl })\n             }\n-            hir::TyKind::Rptr(ref region, ref mt) => {\n+            hir::TyKind::Ref(ref region, ref mt) => {\n                 let r = self.ast_region_to_region(region, None);\n                 debug!(?r);\n                 let t = self.ast_ty_to_ty_inner(mt.ty, true, false);"}, {"sha": "0d1aa39c5d956bdb5d423780f5883f8a846326d3", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -291,7 +291,7 @@ fn check_trait_item(tcx: TyCtxt<'_>, trait_item: &hir::TraitItem<'_>) {\n         // Do some rudimentary sanity checking to avoid an ICE later (issue #83471).\n         if let Some(hir::FnSig { decl, span, .. }) = method_sig {\n             if let [self_ty, _] = decl.inputs {\n-                if !matches!(self_ty.kind, hir::TyKind::Rptr(_, _)) {\n+                if !matches!(self_ty.kind, hir::TyKind::Ref(_, _)) {\n                     tcx.sess\n                         .struct_span_err(\n                             self_ty.span,"}, {"sha": "1ff7429e415f89f8bac36cabf1064f2e20f61466", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1063,7 +1063,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n             is_suggestable_infer_ty(ty) || matches!(length, hir::ArrayLen::Infer(_, _))\n         }\n         Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n-        Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n+        Ptr(mut_ty) | Ref(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n         OpaqueDef(_, generic_args, _) => are_suggestable_generic_args(generic_args),\n         Path(hir::QPath::TypeRelative(ty, segment)) => {\n             is_suggestable_infer_ty(ty) || are_suggestable_generic_args(segment.args().args)"}, {"sha": "fb519d6731df929f7a875c92e2a212ceb7ea3c0d", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -617,7 +617,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     LifetimeName::Error => {}\n                 }\n             }\n-            hir::TyKind::Rptr(ref lifetime_ref, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime_ref, ref mt) => {\n                 self.visit_lifetime(lifetime_ref);\n                 let scope = Scope::ObjectLifetimeDefault {\n                     lifetime: self.map.defs.get(&lifetime_ref.hir_id).cloned(),"}, {"sha": "24a67cc14c4fed5e4af9fda9e817aa67a42af97e", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -307,7 +307,7 @@ impl<'a> State<'a> {\n                 self.word(\"*\");\n                 self.print_mt(mt, true);\n             }\n-            hir::TyKind::Rptr(ref lifetime, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime, ref mt) => {\n                 self.word(\"&\");\n                 self.print_opt_lifetime(lifetime);\n                 self.print_mt(mt, false);"}, {"sha": "28e959b7c6a193e03340c766aa530daad2e762d8", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1921,7 +1921,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let expected = self.shallow_resolve(expected);\n-        let (rptr_ty, inner_ty) = if self.check_dereferenceable(pat.span, expected, inner) {\n+        let (ref_ty, inner_ty) = if self.check_dereferenceable(pat.span, expected, inner) {\n             // `demand::subtype` would be good enough, but using `eqtype` turns\n             // out to be equally general. See (note_1) for details.\n \n@@ -1936,25 +1936,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         kind: TypeVariableOriginKind::TypeInference,\n                         span: inner.span,\n                     });\n-                    let rptr_ty = self.new_ref_ty(pat.span, mutbl, inner_ty);\n-                    debug!(\"check_pat_ref: demanding {:?} = {:?}\", expected, rptr_ty);\n-                    let err = self.demand_eqtype_pat_diag(pat.span, expected, rptr_ty, ti);\n+                    let ref_ty = self.new_ref_ty(pat.span, mutbl, inner_ty);\n+                    debug!(\"check_pat_ref: demanding {:?} = {:?}\", expected, ref_ty);\n+                    let err = self.demand_eqtype_pat_diag(pat.span, expected, ref_ty, ti);\n \n                     // Look for a case like `fn foo(&foo: u32)` and suggest\n                     // `fn foo(foo: &u32)`\n                     if let Some(mut err) = err {\n                         self.borrow_pat_suggestion(&mut err, pat);\n                         err.emit();\n                     }\n-                    (rptr_ty, inner_ty)\n+                    (ref_ty, inner_ty)\n                 }\n             }\n         } else {\n             let err = tcx.ty_error();\n             (err, err)\n         };\n         self.check_pat(inner, inner_ty, def_bm, ti);\n-        rptr_ty\n+        ref_ty\n     }\n \n     /// Create a reference type with a fresh region variable."}, {"sha": "4430acf34db9ac1549eaeea8bd916ca4d5aede45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -369,8 +369,8 @@ impl AddToDiagnostic for AddLifetimeParamsSuggestion<'_> {\n     {\n         let mut mk_suggestion = || {\n             let (\n-                hir::Ty { kind: hir::TyKind::Rptr(lifetime_sub, _), .. },\n-                hir::Ty { kind: hir::TyKind::Rptr(lifetime_sup, _), .. },\n+                hir::Ty { kind: hir::TyKind::Ref(lifetime_sub, _), .. },\n+                hir::Ty { kind: hir::TyKind::Ref(lifetime_sup, _), .. },\n             ) = (self.ty_sub, self.ty_sup) else {\n                 return false;\n             };"}, {"sha": "39f4d5022598d05acfd70ba263fb04c2c239826c", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -96,8 +96,8 @@ impl<'tcx> Visitor<'tcx> for FindNestedTypeVisitor<'tcx> {\n                 }\n             }\n \n-            hir::TyKind::Rptr(ref lifetime, _) => {\n-                // the lifetime of the TyRptr\n+            hir::TyKind::Ref(ref lifetime, _) => {\n+                // the lifetime of the Ref\n                 let hir_id = lifetime.hir_id;\n                 match (self.tcx.named_region(hir_id), self.bound_region) {\n                     // Find the index of the named region that was part of the"}, {"sha": "dc1dc8989221cf969c79ecbd0b904ee1d99aba6b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n \n     fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n         match arg.kind {\n-            hir::TyKind::Rptr(_, ref mut_ty) => {\n+            hir::TyKind::Ref(_, ref mut_ty) => {\n                 // We don't want to suggest looking into borrowing `&T` or `&Self`.\n                 hir::intravisit::walk_ty(self, mut_ty.ty);\n                 return;"}, {"sha": "22caadfab177d40b087c2ecee4433eaa078809a8", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -22,7 +22,7 @@ declare_lint_pass!(PassByValue => [PASS_BY_VALUE]);\n impl<'tcx> LateLintPass<'tcx> for PassByValue {\n     fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n         match &ty.kind {\n-            TyKind::Rptr(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n+            TyKind::Ref(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n                 if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n                     if cx.tcx.impl_trait_ref(impl_did).is_some() {\n                         return;"}, {"sha": "67e701b00ea6f4e0be4d61208f44381ed6308f47", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1229,7 +1229,7 @@ impl<'a> Parser<'a> {\n         let sum_span = ty.span.to(self.prev_token.span);\n \n         let sub = match &ty.kind {\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 let sum_with_parens = pprust::to_string(|s| {\n                     s.s.word(\"&\");\n                     s.print_opt_lifetime(lifetime);"}, {"sha": "c50b2877bab3ebb2c6f25413ba9bb376351247af", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -504,7 +504,7 @@ impl<'a> Parser<'a> {\n             self.bump_with((dyn_tok, dyn_tok_sp));\n         }\n         let ty = self.parse_ty_no_plus()?;\n-        Ok(TyKind::Rptr(opt_lifetime, MutTy { ty, mutbl }))\n+        Ok(TyKind::Ref(opt_lifetime, MutTy { ty, mutbl }))\n     }\n \n     // Parses the `typeof(EXPR)`."}, {"sha": "b86d2316820cec75ab3fa744079775fa22151d6c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -324,7 +324,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n                 Slice,\n                 Array,\n                 Ptr,\n-                Rptr,\n+                Ref,\n                 BareFn,\n                 Never,\n                 Tup,\n@@ -580,7 +580,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n                 Slice,\n                 Array,\n                 Ptr,\n-                Rptr,\n+                Ref,\n                 BareFn,\n                 Never,\n                 Tup,"}, {"sha": "c44635b85f8f0b82bc5e52a66c50f6d747f4388b", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -651,7 +651,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let prev = self.diagnostic_metadata.current_trait_object;\n         let prev_ty = self.diagnostic_metadata.current_type_path;\n         match ty.kind {\n-            TyKind::Rptr(None, _) => {\n+            TyKind::Ref(None, _) => {\n                 // Elided lifetime in reference: we resolve as if there was some lifetime `'_` with\n                 // NodeId `ty.id`.\n                 // This span will be used in case of elision failure.\n@@ -2004,7 +2004,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         impl<'a> Visitor<'a> for SelfVisitor<'_, '_> {\n             fn visit_ty(&mut self, ty: &'a Ty) {\n                 trace!(\"SelfVisitor considering ty={:?}\", ty);\n-                if let TyKind::Rptr(lt, ref mt) = ty.kind && self.is_self_ty(&mt.ty) {\n+                if let TyKind::Ref(lt, ref mt) = ty.kind && self.is_self_ty(&mt.ty) {\n                     let lt_id = if let Some(lt) = lt {\n                         lt.id\n                     } else {"}, {"sha": "74522f185422d45eb948d01335284ff0e457427b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1554,7 +1554,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         fn extract_node_id(t: &Ty) -> Option<NodeId> {\n             match t.kind {\n                 TyKind::Path(None, _) => Some(t.id),\n-                TyKind::Rptr(_, ref mut_ty) => extract_node_id(&mut_ty.ty),\n+                TyKind::Ref(_, ref mut_ty) => extract_node_id(&mut_ty.ty),\n                 // This doesn't handle the remaining `Ty` variants as they are not\n                 // that commonly the self_type, it might be interesting to provide\n                 // support for those in future.\n@@ -2189,7 +2189,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 Some(LifetimeUseSet::One { use_span, use_ctxt }) => {\n                     debug!(?param.ident, ?param.ident.span, ?use_span);\n \n-                    let elidable = matches!(use_ctxt, LifetimeCtxt::Rptr);\n+                    let elidable = matches!(use_ctxt, LifetimeCtxt::Ref);\n \n                     let deletion_span = deletion_span();\n                     self.r.lint_buffer.buffer_lint_with_diagnostic("}, {"sha": "5a1bcb8fdc87be9a82047dbed9040ee4e3c17afd", "filename": "compiler/rustc_save_analysis/src/sig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fsig.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -165,7 +165,7 @@ impl<'hir> Sig for hir::Ty<'hir> {\n                 let text = format!(\"{}{}\", prefix, nested.text);\n                 Ok(replace_text(nested, text))\n             }\n-            hir::TyKind::Rptr(ref lifetime, ref mt) => {\n+            hir::TyKind::Ref(ref lifetime, ref mt) => {\n                 let mut prefix = \"&\".to_owned();\n                 prefix.push_str(&lifetime.ident.to_string());\n                 prefix.push(' ');"}, {"sha": "8a08c7533aa1e16eaf4d8cdfb2f439b27a146c5d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -2771,7 +2771,7 @@ impl<'v> Visitor<'v> for FindTypeParam {\n         // and suggest `T: ?Sized` regardless of their obligations. This is fine because the errors\n         // in that case should make what happened clear enough.\n         match ty.kind {\n-            hir::TyKind::Ptr(_) | hir::TyKind::Rptr(..) | hir::TyKind::TraitObject(..) => {}\n+            hir::TyKind::Ptr(_) | hir::TyKind::Ref(..) | hir::TyKind::TraitObject(..) => {}\n             hir::TyKind::Path(hir::QPath::Resolved(None, path))\n                 if path.segments.len() == 1 && path.segments[0].ident.name == self.param =>\n             {"}, {"sha": "8f4099653562e040b9d753563f9de583fad8fbc5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -1612,7 +1612,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n     match ty.kind {\n         TyKind::Never => Primitive(PrimitiveType::Never),\n         TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(clean_ty(m.ty, cx))),\n-        TyKind::Rptr(ref l, ref m) => {\n+        TyKind::Ref(ref l, ref m) => {\n             let lifetime = if l.is_anonymous() { None } else { Some(clean_lifetime(*l, cx)) };\n             BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(clean_ty(m.ty, cx)) }\n         }"}, {"sha": "af765c51ace391da7ea7608e5d85b46f9d9939af", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -59,7 +59,7 @@ pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n-// See `impl Clean for TyKind::Rptr`.\n+// See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}"}, {"sha": "5cd217df6fc2ff91c814e5c6abb980571141b802", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -801,7 +801,7 @@ fn test_ty() {\n     assert_eq!(stringify_ty!(*const T), \"*const T\");\n     assert_eq!(stringify_ty!(*mut T), \"*mut T\");\n \n-    // TyKind::Rptr\n+    // TyKind::Ref\n     assert_eq!(stringify_ty!(&T), \"&T\");\n     assert_eq!(stringify_ty!(&mut T), \"&mut T\");\n     assert_eq!(stringify_ty!(&'a T), \"&'a T\");"}, {"sha": "7d9ff2dfb4d986213baa9c344a6787c15abc95e0", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -41,8 +41,8 @@ ast-stats-1 - Wild                      88 ( 1.2%)             1\n ast-stats-1 - Ident                    440 ( 5.9%)             5\n ast-stats-1 PathSegment              720 ( 9.7%)            30            24\n ast-stats-1 Ty                       896 (12.1%)            14            64\n-ast-stats-1 - Rptr                      64 ( 0.9%)             1\n ast-stats-1 - Ptr                       64 ( 0.9%)             1\n+ast-stats-1 - Ref                       64 ( 0.9%)             1\n ast-stats-1 - ImplicitSelf             128 ( 1.7%)             2\n ast-stats-1 - Path                     640 ( 8.6%)            10\n ast-stats-1 Item                   1_656 (22.3%)             9           184\n@@ -100,8 +100,8 @@ ast-stats-2 - Lit                      144 ( 1.8%)             2\n ast-stats-2 - Block                    216 ( 2.7%)             3\n ast-stats-2 PathSegment              792 ( 9.8%)            33            24\n ast-stats-2 Ty                       896 (11.0%)            14            64\n-ast-stats-2 - Rptr                      64 ( 0.8%)             1\n ast-stats-2 - Ptr                       64 ( 0.8%)             1\n+ast-stats-2 - Ref                       64 ( 0.8%)             1\n ast-stats-2 - ImplicitSelf             128 ( 1.6%)             2\n ast-stats-2 - Path                     640 ( 7.9%)            10\n ast-stats-2 Item                   2_024 (25.0%)            11           184\n@@ -154,7 +154,7 @@ hir-stats GenericParam             400 ( 4.4%)             5            80\n hir-stats Generics                 560 ( 6.2%)            10            56\n hir-stats Ty                       720 ( 8.0%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n-hir-stats - Rptr                      48 ( 0.5%)             1\n+hir-stats - Ref                       48 ( 0.5%)             1\n hir-stats - Path                     624 ( 6.9%)            13\n hir-stats Expr                     768 ( 8.5%)            12            64\n hir-stats - Path                      64 ( 0.7%)             1"}, {"sha": "05f2b92c037093affa39e21fe5ac1dc058528cb6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -969,14 +969,14 @@ fn binding_ty_auto_deref_stability<'tcx>(\n     precedence: i8,\n     binder_args: &'tcx List<BoundVariableKind>,\n ) -> Position {\n-    let TyKind::Rptr(_, ty) = &ty.kind else {\n+    let TyKind::Ref(_, ty) = &ty.kind else {\n         return Position::Other(precedence);\n     };\n     let mut ty = ty;\n \n     loop {\n         break match ty.ty.kind {\n-            TyKind::Rptr(_, ref ref_ty) => {\n+            TyKind::Ref(_, ref ref_ty) => {\n                 ty = ref_ty;\n                 continue;\n             },"}, {"sha": "676a37e04f60269aeb16352f9e1818d70fe28975", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -152,7 +152,7 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n     let input_lifetimes: Vec<LifetimeName> = inputs\n         .iter()\n         .filter_map(|ty| {\n-            if let TyKind::Rptr(lt, _) = ty.kind {\n+            if let TyKind::Ref(lt, _) = ty.kind {\n                 Some(lt.res)\n             } else {\n                 None"}, {"sha": "77be61b4793403d2a9ba489df6daab12103b8841", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -3986,7 +3986,7 @@ impl OutType {\n             (Self::Unit, &hir::FnRetTy::Return(ty)) if is_unit(ty) => true,\n             (Self::Bool, &hir::FnRetTy::Return(ty)) if is_bool(ty) => true,\n             (Self::Any, &hir::FnRetTy::Return(ty)) if !is_unit(ty) => true,\n-            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Rptr(_, _)),\n+            (Self::Ref, &hir::FnRetTy::Return(ty)) => matches!(ty.kind, hir::TyKind::Ref(_, _)),\n             _ => false,\n         }\n     }"}, {"sha": "64d8333a093b1143047981a19414a00cb4c33dd5", "filename": "src/tools/clippy/clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_mut.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -86,15 +86,15 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             return;\n         }\n \n-        if let hir::TyKind::Rptr(\n+        if let hir::TyKind::Ref(\n             _,\n             hir::MutTy {\n                 ty: pty,\n                 mutbl: hir::Mutability::Mut,\n             },\n         ) = ty.kind\n         {\n-            if let hir::TyKind::Rptr(\n+            if let hir::TyKind::Ref(\n                 _,\n                 hir::MutTy {\n                     mutbl: hir::Mutability::Mut,"}, {"sha": "5457eeec4eacf249c2b1fef96d88f3e7a62da831", "filename": "src/tools/clippy/clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -124,7 +124,7 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n                     check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n-            TyKind::Rptr(lifetime, mut_ty) => {\n+            TyKind::Ref(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n                 if let PatKind::Ident(BindingAnnotation::NONE, _, _) = p.pat.kind;"}, {"sha": "75add4ee4aadedb8747a09ff1f45c434b6c4782d", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> PassByRefOrValue {\n                     if is_copy(cx, ty)\n                         && let Some(size) = cx.layout_of(ty).ok().map(|l| l.size.bytes())\n                         && size <= self.ref_min_size\n-                        && let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind\n+                        && let hir::TyKind::Ref(_, MutTy { ty: decl_ty, .. }) = input.kind\n                     {\n                         if let Some(typeck) = cx.maybe_typeck_results() {\n                             // Don't lint if an unsafe pointer is created."}, {"sha": "262953042581ab5269cb97221a946830c14059ef", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -421,7 +421,7 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n                 if let ty::Ref(_, ty, mutability) = *ty.kind();\n                 if let ty::Adt(adt, substs) = *ty.kind();\n \n-                if let TyKind::Rptr(lt, ref ty) = hir_ty.kind;\n+                if let TyKind::Ref(lt, ref ty) = hir_ty.kind;\n                 if let TyKind::Path(QPath::Resolved(None, path)) = ty.ty.kind;\n \n                 // Check that the name as typed matches the actual name of the type.\n@@ -503,14 +503,14 @@ fn check_fn_args<'cx, 'tcx: 'cx>(\n \n fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Option<&'tcx Body<'_>>) {\n     if let FnRetTy::Return(ty) = sig.decl.output\n-        && let Some((out, Mutability::Mut, _)) = get_rptr_lm(ty)\n+        && let Some((out, Mutability::Mut, _)) = get_ref_lm(ty)\n     {\n         let out_region = cx.tcx.named_region(out.hir_id);\n         let args: Option<Vec<_>> = sig\n             .decl\n             .inputs\n             .iter()\n-            .filter_map(get_rptr_lm)\n+            .filter_map(get_ref_lm)\n             .filter(|&(lt, _, _)| cx.tcx.named_region(lt.hir_id) == out_region)\n             .map(|(_, mutability, span)| (mutability == Mutability::Not).then_some(span))\n             .collect();\n@@ -704,8 +704,8 @@ fn matches_preds<'tcx>(\n     })\n }\n \n-fn get_rptr_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n-    if let TyKind::Rptr(lt, ref m) = ty.kind {\n+fn get_ref_lm<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability, Span)> {\n+    if let TyKind::Ref(lt, ref m) = ty.kind {\n         Some((lt, m.mutbl, ty.span))\n     } else {\n         None"}, {"sha": "44bf824aa0e2d432688e90827af89090640484dc", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -59,7 +59,7 @@ impl RedundantStaticLifetimes {\n                 }\n             },\n             // This is what we are looking for !\n-            TyKind::Rptr(ref optional_lifetime, ref borrow_type) => {\n+            TyKind::Ref(ref optional_lifetime, ref borrow_type) => {\n                 // Match the 'static lifetime\n                 if let Some(lifetime) = *optional_lifetime {\n                     match borrow_type.ty.kind {"}, {"sha": "448a32b77c036d92d2d5768db876c95c9317cbb6", "filename": "src/tools/clippy/clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fref_option_ref.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -39,7 +39,7 @@ declare_lint_pass!(RefOptionRef => [REF_OPTION_REF]);\n impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n     fn check_ty(&mut self, cx: &LateContext<'tcx>, ty: &'tcx Ty<'tcx>) {\n         if_chain! {\n-            if let TyKind::Rptr(_, ref mut_ty) = ty.kind;\n+            if let TyKind::Ref(_, ref mut_ty) = ty.kind;\n             if mut_ty.mutbl == Mutability::Not;\n             if let TyKind::Path(ref qpath) = &mut_ty.ty.kind;\n             let last = last_path_segment(qpath);\n@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,\n             });\n-            if let TyKind::Rptr(_, ref inner_mut_ty) = inner_ty.kind;\n+            if let TyKind::Ref(_, ref inner_mut_ty) = inner_ty.kind;\n             if inner_mut_ty.mutbl == Mutability::Not;\n \n             then {"}, {"sha": "54ac04df1c12ab9bc96a5f1e8edf7aeb80ff60b5", "filename": "src/tools/clippy/clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -71,7 +71,7 @@ pub(super) fn check<'tcx>(\n /// Gets the type `Bar` in `\u2026::transmute<Foo, &Bar>`.\n fn get_explicit_type<'tcx>(path: &'tcx Path<'tcx>) -> Option<&'tcx hir::Ty<'tcx>> {\n     if let GenericArg::Type(ty) = path.segments.last()?.args?.args.get(1)?\n-        && let TyKind::Rptr(_, ty) = &ty.kind\n+        && let TyKind::Ref(_, ty) = &ty.kind\n     {\n         Some(ty.ty)\n     } else {"}, {"sha": "c14f056a1f2de181d41e47a99bdcbc2c09338ac1", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -539,7 +539,7 @@ impl Types {\n                     QPath::LangItem(..) => {},\n                 }\n             },\n-            TyKind::Rptr(lt, ref mut_ty) => {\n+            TyKind::Ref(lt, ref mut_ty) => {\n                 context.is_nested_call = true;\n                 if !borrowed_box::check(cx, hir_ty, lt, mut_ty) {\n                     self.check_ty(cx, mut_ty.ty, context);"}, {"sha": "0aa50c99c16904abed7bfd0c3ddb278a11877264", "filename": "src/tools/clippy/clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level\n-            TyKind::Infer | TyKind::Ptr(..) | TyKind::Rptr(..) => (1, 0),\n+            TyKind::Infer | TyKind::Ptr(..) | TyKind::Ref(..) => (1, 0),\n \n             // the \"normal\" components of a type: named types, arrays/tuples\n             TyKind::Path(..) | TyKind::Slice(..) | TyKind::Tup(..) | TyKind::Array(..) => (10 * self.nest, 1),"}, {"sha": "7f43b7841ff33d887668c2b321e686db081d9d76", "filename": "src/tools/clippy/clippy_lints/src/types/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -13,7 +13,7 @@ pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>)\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,\n         });\n-        if let TyKind::Rptr(..) = ty.kind;\n+        if let TyKind::Ref(..) = ty.kind;\n         then {\n             return Some(ty.span);\n         }"}, {"sha": "4c3b1b131fd4caeea3f8d3951382f1a02defd374", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -257,7 +257,7 @@ impl<'tcx> LateLintPass<'tcx> for LintWithoutLintPass {\n }\n \n pub(super) fn is_lint_ref_type(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if let TyKind::Rptr(\n+    if let TyKind::Ref(\n         _,\n         MutTy {\n             ty: inner,"}, {"sha": "9d0263e93be756939d9e7df6c36f50e7169f6d8e", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -625,7 +625,7 @@ pub fn eq_ty(l: &Ty, r: &Ty) -> bool {\n         (Slice(l), Slice(r)) => eq_ty(l, r),\n         (Array(le, ls), Array(re, rs)) => eq_ty(le, re) && eq_expr(&ls.value, &rs.value),\n         (Ptr(l), Ptr(r)) => l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty),\n-        (Rptr(ll, l), Rptr(rl, r)) => {\n+        (Ref(ll, l), Ref(rl, r)) => {\n             both(ll, rl, |l, r| eq_id(l.ident, r.ident)) && l.mutbl == r.mutbl && eq_ty(&l.ty, &r.ty)\n         },\n         (BareFn(l), BareFn(r)) => {"}, {"sha": "2bbe1a19b625a7e7eb19c77e88a8a8f2c8e566a5", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -430,7 +430,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n             (&TyKind::Array(lt, ll), &TyKind::Array(rt, rl)) => self.eq_ty(lt, rt) && self.eq_array_length(ll, rl),\n             (TyKind::Ptr(l_mut), TyKind::Ptr(r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(l_mut.ty, r_mut.ty),\n-            (TyKind::Rptr(_, l_rmut), TyKind::Rptr(_, r_rmut)) => {\n+            (TyKind::Ref(_, l_rmut), TyKind::Ref(_, r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(l_rmut.ty, r_rmut.ty)\n             },\n             (TyKind::Path(l), TyKind::Path(r)) => self.eq_qpath(l, r),\n@@ -950,7 +950,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            TyKind::Rptr(lifetime, ref mut_ty) => {\n+            TyKind::Ref(lifetime, ref mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);"}, {"sha": "d863609b6a72688ac8cf171c38e9405edaa55a1a", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -2264,7 +2264,7 @@ pub fn peel_hir_ty_refs<'a>(mut ty: &'a hir::Ty<'a>) -> (&'a hir::Ty<'a>, usize)\n     let mut count = 0;\n     loop {\n         match &ty.kind {\n-            TyKind::Rptr(_, ref_ty) => {\n+            TyKind::Ref(_, ref_ty) => {\n                 ty = ref_ty.ty;\n                 count += 1;\n             },"}, {"sha": "a203a7afddf88bfef885aa6ba0f952c25414deda", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -813,9 +813,9 @@ pub fn deref_closure_args(cx: &LateContext<'_>, closure: &hir::Expr<'_>) -> Opti\n         let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n-        let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n+        let closure_arg_is_type_annotated_double_ref = if let TyKind::Ref(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind\n         {\n-            matches!(ty.kind, TyKind::Rptr(_, MutTy { .. }))\n+            matches!(ty.kind, TyKind::Ref(_, MutTy { .. }))\n         } else {\n             false\n         };"}, {"sha": "c8d56a3be5cf356ca7c3723dd8cb29fbed2fbf79", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -496,7 +496,7 @@ pub fn type_is_unsafe_function<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bo\n /// Returns the base type for HIR references and pointers.\n pub fn walk_ptrs_hir_ty<'tcx>(ty: &'tcx hir::Ty<'tcx>) -> &'tcx hir::Ty<'tcx> {\n     match ty.kind {\n-        TyKind::Ptr(ref mut_ty) | TyKind::Rptr(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n+        TyKind::Ptr(ref mut_ty) | TyKind::Ref(_, ref mut_ty) => walk_ptrs_hir_ty(mut_ty.ty),\n         _ => ty,\n     }\n }"}, {"sha": "c1991e8d2c80800ef354d7ccc5554928349450be", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c610aeb592456b4720497257cb31d742b0d378c7/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=c610aeb592456b4720497257cb31d742b0d378c7", "patch": "@@ -688,7 +688,7 @@ impl Rewrite for ast::Ty {\n \n                 rewrite_unary_prefix(context, prefix, &*mt.ty, shape)\n             }\n-            ast::TyKind::Rptr(ref lifetime, ref mt) => {\n+            ast::TyKind::Ref(ref lifetime, ref mt) => {\n                 let mut_str = format_mutability(mt.mutbl);\n                 let mut_len = mut_str.len();\n                 let mut result = String::with_capacity(128);\n@@ -1059,7 +1059,7 @@ pub(crate) fn can_be_overflowed_type(\n ) -> bool {\n     match ty.kind {\n         ast::TyKind::Tup(..) => context.use_block_indent() && len == 1,\n-        ast::TyKind::Rptr(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n+        ast::TyKind::Ref(_, ref mutty) | ast::TyKind::Ptr(ref mutty) => {\n             can_be_overflowed_type(context, &*mutty.ty, len)\n         }\n         _ => false,"}]}