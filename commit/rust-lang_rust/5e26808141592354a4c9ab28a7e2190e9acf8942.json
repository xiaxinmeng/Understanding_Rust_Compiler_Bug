{"sha": "5e26808141592354a4c9ab28a7e2190e9acf8942", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjY4MDgxNDE1OTIzNTRhNGM5YWIyOGE3ZTIxOTBlOWFjZjg5NDI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-19T19:50:12Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-06-25T17:17:33Z"}, "message": "Get rid of terrible way for iterating over provided methods.", "tree": {"sha": "31fe85a6a8c8664a3136c2cd0976228ce9b8c43a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31fe85a6a8c8664a3136c2cd0976228ce9b8c43a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e26808141592354a4c9ab28a7e2190e9acf8942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e26808141592354a4c9ab28a7e2190e9acf8942", "html_url": "https://github.com/rust-lang/rust/commit/5e26808141592354a4c9ab28a7e2190e9acf8942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e26808141592354a4c9ab28a7e2190e9acf8942/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d161e630d8378e9705987e0b746d8dbf0da48842", "url": "https://api.github.com/repos/rust-lang/rust/commits/d161e630d8378e9705987e0b746d8dbf0da48842", "html_url": "https://github.com/rust-lang/rust/commit/d161e630d8378e9705987e0b746d8dbf0da48842"}], "stats": {"total": 60, "additions": 14, "deletions": 46}, "files": [{"sha": "bfc5d512b3702dfe4fbbd4c549c741f89feff550", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=5e26808141592354a4c9ab28a7e2190e9acf8942", "patch": "@@ -24,11 +24,6 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::diagnostic::expect;\n \n-pub struct ProvidedTraitMethodInfo {\n-    ty: ty::Method,\n-    def_id: ast::def_id\n-}\n-\n pub struct StaticMethodInfo {\n     ident: ast::ident,\n     def_id: ast::def_id,\n@@ -134,7 +129,7 @@ pub fn get_trait_method_def_ids(cstore: @mut cstore::CStore,\n \n pub fn get_provided_trait_methods(tcx: ty::ctxt,\n                                   def: ast::def_id)\n-                               -> ~[ProvidedTraitMethodInfo] {\n+                               -> ~[@ty::Method] {\n     let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_provided_trait_methods(cstore.intr, cdata, def.node, tcx)"}, {"sha": "824f67b074c290e22847b26e3fd181b1c026fb83", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5e26808141592354a4c9ab28a7e2190e9acf8942", "patch": "@@ -14,7 +14,7 @@ use core::prelude::*;\n \n use metadata::cstore::crate_metadata;\n use metadata::common::*;\n-use metadata::csearch::{ProvidedTraitMethodInfo, StaticMethodInfo};\n+use metadata::csearch::StaticMethodInfo;\n use metadata::csearch;\n use metadata::cstore;\n use metadata::decoder;\n@@ -752,7 +752,7 @@ pub fn get_trait_method_def_ids(cdata: cmd,\n \n pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n                                   id: ast::node_id, tcx: ty::ctxt) ->\n-        ~[ProvidedTraitMethodInfo] {\n+        ~[@ty::Method] {\n     let data = cdata.data;\n     let item = lookup_item(id, data);\n     let mut result = ~[];\n@@ -763,13 +763,8 @@ pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n \n         if item_method_sort(mth) != 'p' { loop; }\n \n-        let ty_method = get_method(intr, cdata, did.node, tcx);\n-        let provided_trait_method_info = ProvidedTraitMethodInfo {\n-            ty: ty_method,\n-            def_id: did\n-        };\n-\n-        vec::push(&mut result, provided_trait_method_info);\n+        vec::push(&mut result,\n+                  @get_method(intr, cdata, did.node, tcx));\n     }\n \n     return result;"}, {"sha": "a7a69d51de265cb8803439ec1873f0afd06d0b6c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5e26808141592354a4c9ab28a7e2190e9acf8942", "patch": "@@ -3649,21 +3649,21 @@ pub fn def_has_ty_params(def: ast::def) -> bool {\n     }\n }\n \n-pub fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[ast::ident] {\n+pub fn provided_trait_methods(cx: ctxt, id: ast::def_id) -> ~[@Method] {\n     if is_local(id) {\n         match cx.items.find(&id.node) {\n             Some(&ast_map::node_item(@ast::item {\n                         node: item_trait(_, _, ref ms),\n                         _\n                     }, _)) =>\n                 match ast_util::split_trait_methods(*ms) {\n-                   (_, p) => p.map(|method| method.ident)\n+                   (_, p) => p.map(|m| method(cx, ast_util::local_def(m.id)))\n                 },\n             _ => cx.sess.bug(fmt!(\"provided_trait_methods: %? is not a trait\",\n                                   id))\n         }\n     } else {\n-        csearch::get_provided_trait_methods(cx, id).map(|ifo| ifo.ty.ident)\n+        csearch::get_provided_trait_methods(cx, id)\n     }\n }\n "}, {"sha": "bd99a8e150b7ca42f5e5fe39fddc25150151d82b", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e26808141592354a4c9ab28a7e2190e9acf8942/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=5e26808141592354a4c9ab28a7e2190e9acf8942", "patch": "@@ -333,7 +333,8 @@ impl CoherenceChecker {\n \n         let impl_poly_type = ty::lookup_item_type(tcx, impl_id);\n \n-        for self.each_provided_trait_method(trait_ref.def_id) |trait_method| {\n+        let provided = ty::provided_trait_methods(tcx, trait_ref.def_id);\n+        for provided.iter().advance |trait_method| {\n             // Synthesize an ID.\n             let new_id = parse::next_node_id(tcx.sess.parse_sess);\n             let new_did = local_def(new_id);\n@@ -347,7 +348,7 @@ impl CoherenceChecker {\n                     impl_id,\n                     trait_ref,\n                     new_did,\n-                    trait_method);\n+                    *trait_method);\n \n             debug!(\"new_method_ty=%s\", new_method_ty.repr(tcx));\n \n@@ -526,29 +527,6 @@ impl CoherenceChecker {\n         }\n     }\n \n-    pub fn each_provided_trait_method(&self,\n-                                      trait_did: ast::def_id,\n-                                      f: &fn(x: @ty::Method) -> bool)\n-                                      -> bool {\n-        // Make a list of all the names of the provided methods.\n-        // XXX: This is horrible.\n-        let mut provided_method_idents = HashSet::new();\n-        let tcx = self.crate_context.tcx;\n-        let r = ty::provided_trait_methods(tcx, trait_did);\n-        for r.iter().advance |ident| {\n-            provided_method_idents.insert(*ident);\n-        }\n-\n-        for ty::trait_methods(tcx, trait_did).iter().advance |&method| {\n-            if provided_method_idents.contains(&method.ident) {\n-                if !f(method) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n     pub fn polytypes_unify(&self,\n                            polytype_a: ty_param_bounds_and_ty,\n                            polytype_b: ty_param_bounds_and_ty)\n@@ -729,9 +707,9 @@ impl CoherenceChecker {\n         }\n         // Default methods\n         let r = ty::provided_trait_methods(tcx, trait_did);\n-        for r.iter().advance |ident| {\n-            debug!(\"inserting provided method %s\", ident.repr(tcx));\n-            provided_names.insert(*ident);\n+        for r.iter().advance |method| {\n+            debug!(\"inserting provided method %s\", method.ident.repr(tcx));\n+            provided_names.insert(method.ident);\n         }\n \n         let r = ty::trait_methods(tcx, trait_did);"}]}