{"sha": "6a2a56da451a357141bc8c929045ec2aafa3421f", "node_id": "C_kwDOAAsO6NoAKDZhMmE1NmRhNDUxYTM1NzE0MWJjOGM5MjkwNDVlYzJhYWZhMzQyMWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-19T13:26:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-19T13:26:31Z"}, "message": "Rollup merge of #98233 - RalfJung:ref-alloc, r=thomcc\n\nRemove accidental uses of `&A: Allocator`\n\nCc https://github.com/rust-lang/rust/issues/98232\n\nFixes https://github.com/rust-lang/rust/issues/98176 (for real this time)", "tree": {"sha": "8ef7ef2b7265fb625bb2568974623b176f784cb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef7ef2b7265fb625bb2568974623b176f784cb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a2a56da451a357141bc8c929045ec2aafa3421f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiryQHCRBK7hj4Ov3rIwAApaIIALLnpK6fF2FeLMbAQHqjY/T9\nTS628PIRfHUErSZQUaQJlfetNF7er4qQG8il71sJk18lwBeDqXdV8RNxBq6d8L4G\npcQrTjXcwF3K/S+dUfXMTRAcD3UxGA/TgW3cnzBkDdcNRTeqKicIHwTkPrYKruIb\niYpi51Ul3Y7auj3InhJEXcEKTPOx5AYE/moodUmWUAAloqc4WeWNVsocku2AgygI\nrblTWXPOZct61ONfn+dgkcm5ukPXJwGiknSIWm4fveJIOiO5Nd63WIKnuvyQYTAV\nG6Ilnn1T2mhaCM6BN7DjApkGdRJLMByS6ZBob0LGzK2AnChHa2DqoLWM2Z6CC8c=\n=smFd\n-----END PGP SIGNATURE-----\n", "payload": "tree 8ef7ef2b7265fb625bb2568974623b176f784cb1\nparent cf3245e7c3ffc48338c5434a1f565182ed549c49\nparent b05d71f880b77b4c9202b73dd9f6127409452f19\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655645191 +0200\ncommitter GitHub <noreply@github.com> 1655645191 +0200\n\nRollup merge of #98233 - RalfJung:ref-alloc, r=thomcc\n\nRemove accidental uses of `&A: Allocator`\n\nCc https://github.com/rust-lang/rust/issues/98232\n\nFixes https://github.com/rust-lang/rust/issues/98176 (for real this time)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a56da451a357141bc8c929045ec2aafa3421f", "html_url": "https://github.com/rust-lang/rust/commit/6a2a56da451a357141bc8c929045ec2aafa3421f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a2a56da451a357141bc8c929045ec2aafa3421f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf3245e7c3ffc48338c5434a1f565182ed549c49", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3245e7c3ffc48338c5434a1f565182ed549c49", "html_url": "https://github.com/rust-lang/rust/commit/cf3245e7c3ffc48338c5434a1f565182ed549c49"}, {"sha": "b05d71f880b77b4c9202b73dd9f6127409452f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/b05d71f880b77b4c9202b73dd9f6127409452f19", "html_url": "https://github.com/rust-lang/rust/commit/b05d71f880b77b4c9202b73dd9f6127409452f19"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "28068a880609619c1a0d9192764c30b58a8b0e93", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6a2a56da451a357141bc8c929045ec2aafa3421f", "patch": "@@ -1644,11 +1644,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_unchecked(self.alloc.clone()) })\n         }\n     }\n \n@@ -1658,11 +1658,11 @@ impl<K, V, A: Allocator + Clone> IntoIter<K, V, A> {\n         &mut self,\n     ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::LeafOrInternal>, marker::KV>> {\n         if self.length == 0 {\n-            self.range.deallocating_end(&self.alloc);\n+            self.range.deallocating_end(self.alloc.clone());\n             None\n         } else {\n             self.length -= 1;\n-            Some(unsafe { self.range.deallocating_next_back_unchecked(&self.alloc) })\n+            Some(unsafe { self.range.deallocating_next_back_unchecked(self.alloc.clone()) })\n         }\n     }\n }\n@@ -1849,7 +1849,7 @@ where\n     type Item = (K, V);\n \n     fn next(&mut self) -> Option<(K, V)> {\n-        self.inner.next(&mut self.pred, &self.alloc)\n+        self.inner.next(&mut self.pred, self.alloc.clone())\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "0d3fdc9019efd792668ecb166a43d065f2b15d16", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=6a2a56da451a357141bc8c929045ec2aafa3421f", "patch": "@@ -1320,7 +1320,7 @@ where\n     fn next(&mut self) -> Option<T> {\n         let pred = &mut self.pred;\n         let mut mapped_pred = |k: &T, _v: &mut ()| pred(k);\n-        self.inner.next(&mut mapped_pred, &self.alloc).map(|(k, _)| k)\n+        self.inner.next(&mut mapped_pred, self.alloc.clone()).map(|(k, _)| k)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "d554ec590358fd6f37d7745fbb18ba8dfd794961", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a2a56da451a357141bc8c929045ec2aafa3421f/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=6a2a56da451a357141bc8c929045ec2aafa3421f", "patch": "@@ -187,7 +187,7 @@ impl System {\n             old_size => unsafe {\n                 let new_ptr = self.alloc_impl(new_layout, zeroed)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }\n@@ -254,7 +254,7 @@ unsafe impl Allocator for System {\n         match new_layout.size() {\n             // SAFETY: conditions must be upheld by the caller\n             0 => unsafe {\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(NonNull::slice_from_raw_parts(new_layout.dangling(), 0))\n             },\n \n@@ -274,9 +274,9 @@ unsafe impl Allocator for System {\n             // `new_ptr`. Thus, the call to `copy_nonoverlapping` is safe. The safety contract\n             // for `dealloc` must be upheld by the caller.\n             new_size => unsafe {\n-                let new_ptr = Allocator::allocate(&self, new_layout)?;\n+                let new_ptr = Allocator::allocate(self, new_layout)?;\n                 ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), new_size);\n-                Allocator::deallocate(&self, ptr, old_layout);\n+                Allocator::deallocate(self, ptr, old_layout);\n                 Ok(new_ptr)\n             },\n         }"}]}