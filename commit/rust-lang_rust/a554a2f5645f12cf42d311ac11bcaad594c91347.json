{"sha": "a554a2f5645f12cf42d311ac11bcaad594c91347", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NTRhMmY1NjQ1ZjEyY2Y0MmQzMTFhYzExYmNhYWQ1OTRjOTEzNDc=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-02-19T13:45:45Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-02-25T13:54:08Z"}, "message": "Return error if timeout is zero-Duration on Redox.", "tree": {"sha": "e59df0a5a91a587a5472f531eb55371baeb3ee2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e59df0a5a91a587a5472f531eb55371baeb3ee2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a554a2f5645f12cf42d311ac11bcaad594c91347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a554a2f5645f12cf42d311ac11bcaad594c91347", "html_url": "https://github.com/rust-lang/rust/commit/a554a2f5645f12cf42d311ac11bcaad594c91347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a554a2f5645f12cf42d311ac11bcaad594c91347/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17d645ad75c797a293ccf1fa3881853617f292c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d17d645ad75c797a293ccf1fa3881853617f292c", "html_url": "https://github.com/rust-lang/rust/commit/d17d645ad75c797a293ccf1fa3881853617f292c"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "b5664908479cfbc342cb3a0dcceeeaa3bc1d581e", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a554a2f5645f12cf42d311ac11bcaad594c91347/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a554a2f5645f12cf42d311ac11bcaad594c91347/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=a554a2f5645f12cf42d311ac11bcaad594c91347", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use cmp;\n-use io::{Error, ErrorKind, Result};\n+use io::{self, Error, ErrorKind, Result};\n use mem;\n use net::{SocketAddr, Shutdown};\n use path::Path;\n@@ -130,6 +130,10 @@ impl TcpStream {\n     pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"read_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32\n@@ -143,6 +147,10 @@ impl TcpStream {\n     pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"write_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32"}, {"sha": "2ed67bd2836f26fde2dc9006b799c776df7ab3f8", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a554a2f5645f12cf42d311ac11bcaad594c91347/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a554a2f5645f12cf42d311ac11bcaad594c91347/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=a554a2f5645f12cf42d311ac11bcaad594c91347", "patch": "@@ -10,7 +10,7 @@\n \n use cell::UnsafeCell;\n use cmp;\n-use io::{Error, ErrorKind, Result};\n+use io::{self, Error, ErrorKind, Result};\n use mem;\n use net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use path::Path;\n@@ -179,6 +179,10 @@ impl UdpSocket {\n     pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"read_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32\n@@ -192,6 +196,10 @@ impl UdpSocket {\n     pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n         let file = self.0.dup(b\"write_timeout\")?;\n         if let Some(duration) = duration_option {\n+            if duration.as_secs() == 0 && duration.subsec_nanos() == 0 {\n+                return Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                          \"cannot set a 0 duration timeout\"));\n+            }\n             file.write(&TimeSpec {\n                 tv_sec: duration.as_secs() as i64,\n                 tv_nsec: duration.subsec_nanos() as i32"}]}