{"sha": "de195f2d3d3a2039cb8c4141aa37d060780beaa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMTk1ZjJkM2QzYTIwMzljYjhjNDE0MWFhMzdkMDYwNzgwYmVhYTc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-09T15:59:13Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-09T15:59:13Z"}, "message": "print the unit type `()` in related lint messages.", "tree": {"sha": "8fb36f162ae61ca4e36ee9b080fb0299efaedd72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fb36f162ae61ca4e36ee9b080fb0299efaedd72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de195f2d3d3a2039cb8c4141aa37d060780beaa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de195f2d3d3a2039cb8c4141aa37d060780beaa7", "html_url": "https://github.com/rust-lang/rust/commit/de195f2d3d3a2039cb8c4141aa37d060780beaa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de195f2d3d3a2039cb8c4141aa37d060780beaa7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6", "html_url": "https://github.com/rust-lang/rust/commit/8b54f1e2d93c1dc43853578387fe1e1b7d58a3e6"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "076ef235b8bd80cc7d0cbada94d2b2d217ad3a10", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de195f2d3d3a2039cb8c4141aa37d060780beaa7/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de195f2d3d3a2039cb8c4141aa37d060780beaa7/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=de195f2d3d3a2039cb8c4141aa37d060780beaa7", "patch": "@@ -9,7 +9,7 @@ use rustc_span::source_map::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `option.map(f)` where f is a function\n-    /// or closure that returns the unit type.\n+    /// or closure that returns the unit type `()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more clearly with\n     /// an if let statement\n@@ -51,7 +51,7 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `result.map(f)` where f is a function\n-    /// or closure that returns the unit type.\n+    /// or closure that returns the unit type `()`.\n     ///\n     /// **Why is this bad?** Readability, this can be written more clearly with\n     /// an if let statement\n@@ -197,7 +197,7 @@ fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n     format!(\n-        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type\",\n+        \"called `map(f)` on an `{0}` value where `f` is a {1} that returns the unit type `()`\",\n         map_type, function_type\n     )\n }"}, {"sha": "d7d45ef9b0b334dd92827e6b92ce32f0e1c864b6", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=de195f2d3d3a2039cb8c4141aa37d060780beaa7", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,135 +8,135 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:40:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:42:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:48:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:57:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:66:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:68:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:75:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:80:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(ref value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Option` value where `f` is a function that returns the unit type `()`\n   --> $DIR/option_map_unit_fn_fixable.rs:82:5\n    |\n LL |     option().map(do_nothing);}"}, {"sha": "4f3a8c6b7923986359d770df58bdc6e530410983", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=de195f2d3d3a2039cb8c4141aa37d060780beaa7", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:35:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:37:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:45:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:47:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:52:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:61:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:70:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:72:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });"}, {"sha": "88e4efdb0f054dcf372f31e207f3ae3122ed8f2b", "filename": "tests/ui/result_map_unit_fn_unfixable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de195f2d3d3a2039cb8c4141aa37d060780beaa7/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_unfixable.stderr?ref=de195f2d3d3a2039cb8c4141aa37d060780beaa7", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:23:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n@@ -8,15 +8,15 @@ LL |     x.field.map(|value| { do_nothing(value); do_nothing(value) });\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:25:5\n    |\n LL |     x.field.map(|value| if value > 0 { do_nothing(value); do_nothing(value) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { ... }`\n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:29:5\n    |\n LL |        x.field.map(|value| {\n@@ -30,23 +30,23 @@ LL | ||     });\n    | |_______|\n    | \n \n-error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a closure that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:33:5\n    |\n LL |     x.field.map(|value| { do_nothing(value); do_nothing(value); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { ... }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:37:5\n    |\n LL |     \"12\".parse::<i32>().map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(a) = \"12\".parse::<i32>() { diverge(a) }`\n \n-error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type\n+error: called `map(f)` on an `Result` value where `f` is a function that returns the unit type `()`\n   --> $DIR/result_map_unit_fn_unfixable.rs:43:5\n    |\n LL |     y.map(do_nothing);"}]}