{"sha": "8d67f576b56e8fc98a31123e5963f8d00e40611c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNjdmNTc2YjU2ZThmYzk4YTMxMTIzZTU5NjNmOGQwMGU0MDYxMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T11:52:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T11:52:01Z"}, "message": "Auto merge of #71049 - eddyb:const-err, r=oli-obk\n\nAdd `ConstKind::Error` and convert `ErrorHandled::Reported` to it.\n\nBy replicating the `ty::Error` approach to encoding \"an error has occurred\", all of the mechanisms that skip redundant/downstream errors are engaged and help out (see the reduction in test output).\n\nThis PR also adds `ErrorHandled::Linted` for the lint case because using `ErrorHandled::Reported` *without* having emitted an error that is *guaranteed* to stop compilation, is incorrect now.\n\nr? @oli-obk cc @rust-lang/wg-const-eval @varkor @yodaldevoid", "tree": {"sha": "41ca42929c30c4fe7da7021b9f4dc7355e7ffe47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ca42929c30c4fe7da7021b9f4dc7355e7ffe47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c", "html_url": "https://github.com/rust-lang/rust/commit/8d67f576b56e8fc98a31123e5963f8d00e40611c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d67f576b56e8fc98a31123e5963f8d00e40611c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "html_url": "https://github.com/rust-lang/rust/commit/b2c1a606feb1fbdb0ac0acba76f881ef172ed474"}, {"sha": "77f38dc284c3adab8c529e478fe8b2fa5e4a82d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f38dc284c3adab8c529e478fe8b2fa5e4a82d3", "html_url": "https://github.com/rust-lang/rust/commit/77f38dc284c3adab8c529e478fe8b2fa5e4a82d3"}], "stats": {"total": 601, "additions": 193, "deletions": 408}, "files": [{"sha": "7d0e6998db48ebf5aa263f1186f665125e3329cc", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -6,6 +6,7 @@ use crate::glue;\n use crate::traits::*;\n use crate::MemFlags;\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled, Pointer, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -447,8 +448,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.eval_mir_constant_to_operand(bx, constant).unwrap_or_else(|err| {\n                     match err {\n                         // errored or at least linted\n-                        ErrorHandled::Reported => {}\n-                        ErrorHandled::TooGeneric => bug!(\"codgen encountered polymorphic constant\"),\n+                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n+                        ErrorHandled::TooGeneric => {\n+                            bug!(\"codegen encountered polymorphic constant\")\n+                        }\n                     }\n                     // Allow RalfJ to sleep soundly knowing that even refactorings that remove\n                     // the above error (or silence it under some conditions) will not cause UB."}, {"sha": "3711d848d814018d92908a120cc40bde6418541e", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -304,8 +304,8 @@ pub fn unexpected_hidden_region_diagnostic(\n         // down this path which gives a decent human readable\n         // explanation.\n         //\n-        // (*) if not, the `tainted_by_errors` flag would be set to\n-        // true in any case, so we wouldn't be here at all.\n+        // (*) if not, the `tainted_by_errors` field would be set to\n+        // `Some(ErrorReported)` in any case, so we wouldn't be here at all.\n         note_and_explain_free_region(\n             tcx,\n             &mut err,"}, {"sha": "a95d276f4a8b8cc901b016e145373e1c7e2f229b", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -251,7 +251,10 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n                 bug!(\"unexpected const {:?}\", ct)\n             }\n \n-            ty::ConstKind::Param(_) | ty::ConstKind::Value(_) | ty::ConstKind::Unevaluated(..) => {}\n+            ty::ConstKind::Param(_)\n+            | ty::ConstKind::Value(_)\n+            | ty::ConstKind::Unevaluated(..)\n+            | ty::ConstKind::Error => {}\n         }\n \n         ct.super_fold_with(self)"}, {"sha": "bd9d108cfe871278ad7920bf6221ef1b352345c6", "filename": "src/librustc_infer/infer/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_infer%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fresolve.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n             match c.val {\n                 ty::ConstKind::Infer(InferConst::Var(vid)) => {\n                     self.err = Some(FixupError::UnresolvedConst(vid));\n-                    return self.tcx().consts.err;\n+                    return self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: c.ty });\n                 }\n                 ty::ConstKind::Infer(InferConst::Fresh(_)) => {\n                     bug!(\"Unexpected const in full const resolver: {:?}\", c);"}, {"sha": "c56dc5196c6c2e457df5436f22b551cfd0e3a5a3", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n use rustc_data_structures::sync::Lock;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n@@ -19,25 +19,16 @@ use std::{any::Any, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n-    /// Already reported a lint or an error for this evaluation.\n-    Reported,\n+    /// Already reported an error for this evaluation, and the compilation is\n+    /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n+    Reported(ErrorReported),\n+    /// Already emitted a lint for this evaluation.\n+    Linted,\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n-impl ErrorHandled {\n-    pub fn assert_reported(self) {\n-        match self {\n-            ErrorHandled::Reported => {}\n-            ErrorHandled::TooGeneric => bug!(\n-                \"MIR interpretation failed without reporting an error \\\n-                 even though it was fully monomorphized\"\n-            ),\n-        }\n-    }\n-}\n-\n CloneTypeFoldableImpls! {\n     ErrorHandled,\n }\n@@ -84,15 +75,12 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-    ) -> Result<(), ErrorHandled> {\n+    ) -> ErrorHandled {\n         self.struct_generic(tcx, message, emit, None)\n     }\n \n     pub fn report_as_error(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n-        match self.struct_error(tcx, message, |mut e| e.emit()) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(x) => x,\n-        }\n+        self.struct_error(tcx, message, |mut e| e.emit())\n     }\n \n     pub fn report_as_lint(\n@@ -102,7 +90,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         lint_root: hir::HirId,\n         span: Option<Span>,\n     ) -> ErrorHandled {\n-        match self.struct_generic(\n+        self.struct_generic(\n             tcx,\n             message,\n             |mut lint: DiagnosticBuilder<'_>| {\n@@ -122,10 +110,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 lint.emit();\n             },\n             Some(lint_root),\n-        ) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(err) => err,\n-        }\n+        )\n     }\n \n     /// Create a diagnostic for this const eval error.\n@@ -143,12 +128,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n         lint_root: Option<hir::HirId>,\n-    ) -> Result<(), ErrorHandled> {\n+    ) -> ErrorHandled {\n         let must_error = match self.error {\n             err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n-                return Err(ErrorHandled::TooGeneric);\n+                return ErrorHandled::TooGeneric;\n+            }\n+            err_inval!(TypeckError(error_reported)) => {\n+                return ErrorHandled::Reported(error_reported);\n             }\n-            err_inval!(TypeckError) => return Err(ErrorHandled::Reported),\n             // We must *always* hard error on these, even if the caller wants just a lint.\n             err_inval!(Layout(LayoutError::SizeOverflow(_))) => true,\n             _ => false,\n@@ -183,6 +170,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             // caller thinks anyway.\n             // See <https://github.com/rust-lang/rust/pull/63152>.\n             finish(struct_error(tcx, &err_msg), None);\n+            ErrorHandled::Reported(ErrorReported)\n         } else {\n             // Regular case.\n             if let Some(lint_root) = lint_root {\n@@ -200,12 +188,13 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                     tcx.span,\n                     |lint| finish(lint.build(message), Some(err_msg)),\n                 );\n+                ErrorHandled::Linted\n             } else {\n                 // Report as hard error.\n                 finish(struct_error(tcx, message), Some(err_msg));\n+                ErrorHandled::Reported(ErrorReported)\n             }\n         }\n-        Ok(())\n     }\n }\n \n@@ -246,7 +235,9 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     fn from(err: ErrorHandled) -> Self {\n         match err {\n-            ErrorHandled::Reported => err_inval!(ReferencedConstant),\n+            ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                err_inval!(ReferencedConstant)\n+            }\n             ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n         }\n         .into()\n@@ -288,7 +279,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// which already produced an error.\n     ReferencedConstant,\n     /// Abort in case type errors are reached.\n-    TypeckError,\n+    TypeckError(ErrorReported),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An invalid transmute happened.\n@@ -301,7 +292,9 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            TypeckError => write!(f, \"encountered constants with type errors, stopping evaluation\"),\n+            TypeckError(ErrorReported) => {\n+                write!(f, \"encountered constants with type errors, stopping evaluation\")\n+            }\n             Layout(ref err) => write!(f, \"{}\", err),\n             TransmuteSizeDiff(from_ty, to_ty) => write!(\n                 f,"}, {"sha": "3eec58251a0e6375daabc5e30aac637f74cd21ee", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -182,7 +182,7 @@ pub struct CommonLifetimes<'tcx> {\n }\n \n pub struct CommonConsts<'tcx> {\n-    pub err: &'tcx Const<'tcx>,\n+    pub unit: &'tcx Const<'tcx>,\n }\n \n pub struct LocalTableInContext<'a, V> {\n@@ -410,8 +410,8 @@ pub struct TypeckTables<'tcx> {\n     pub used_trait_imports: Lrc<DefIdSet>,\n \n     /// If any errors occurred while type-checking this body,\n-    /// this field will be set to `true`.\n-    pub tainted_by_errors: bool,\n+    /// this field will be set to `Some(ErrorReported)`.\n+    pub tainted_by_errors: Option<ErrorReported>,\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n@@ -447,7 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             fru_field_types: Default::default(),\n             coercion_casts: Default::default(),\n             used_trait_imports: Lrc::new(Default::default()),\n-            tainted_by_errors: false,\n+            tainted_by_errors: None,\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),\n@@ -858,9 +858,9 @@ impl<'tcx> CommonConsts<'tcx> {\n         let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;\n \n         CommonConsts {\n-            err: mk_const(ty::Const {\n+            unit: mk_const(ty::Const {\n                 val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::zst())),\n-                ty: types.err,\n+                ty: types.unit,\n             }),\n         }\n     }"}, {"sha": "a88f362810995761eadc0c2ab5a7dedfb2b59fb2", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -70,14 +70,7 @@ impl FlagComputation {\n             | &ty::Str\n             | &ty::Foreign(..) => {}\n \n-            // You might think that we could just return Error for\n-            // any type containing Error as a component, and get\n-            // rid of the TypeFlags::HAS_TY_ERR flag -- likewise for ty_bot (with\n-            // the exception of function types that return bot).\n-            // But doing so caused sporadic memory corruption, and\n-            // neither I (tjc) nor nmatsakis could figure out why,\n-            // so we're doing it this way.\n-            &ty::Error => self.add_flags(TypeFlags::HAS_TY_ERR),\n+            &ty::Error => self.add_flags(TypeFlags::HAS_ERROR),\n \n             &ty::Param(_) => {\n                 self.add_flags(TypeFlags::HAS_TY_PARAM);\n@@ -239,6 +232,7 @@ impl FlagComputation {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n             }\n             ty::ConstKind::Value(_) => {}\n+            ty::ConstKind::Error => self.add_flags(TypeFlags::HAS_ERROR),\n         }\n     }\n "}, {"sha": "248dd00ef47be562095414b57508811038a03433", "filename": "src/librustc_middle/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffold.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -82,7 +82,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.has_type_flags(TypeFlags::HAS_TY_OPAQUE)\n     }\n     fn references_error(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_ERR)\n+        self.has_type_flags(TypeFlags::HAS_ERROR)\n     }\n     fn has_param_types_or_consts(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)"}, {"sha": "9f095847099f8f09a1b90d7ec37fd62f81952cde", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -27,6 +27,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -567,8 +568,8 @@ bitflags! {\n                                           | TypeFlags::HAS_TY_OPAQUE.bits\n                                           | TypeFlags::HAS_CT_PROJECTION.bits;\n \n-        /// Is an error type reachable?\n-        const HAS_TY_ERR                  = 1 << 13;\n+        /// Is an error type/const reachable?\n+        const HAS_ERROR                   = 1 << 13;\n \n         /// Does this have any region that \"appears free\" in the type?\n         /// Basically anything but [ReLateBound] and [ReErased].\n@@ -2388,7 +2389,7 @@ impl<'tcx> AdtDef {\n                     None\n                 }\n             }\n-            Err(ErrorHandled::Reported) => {\n+            Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {\n                 if !expr_did.is_local() {\n                     span_bug!(\n                         tcx.def_span(expr_did),"}, {"sha": "2aa849f89c4f9d52c8c11bc0f4d50c3ce426f15a", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -938,6 +938,7 @@ pub trait PrettyPrinter<'tcx>:\n                 self.pretty_print_bound_var(debruijn, bound_var)?\n             }\n             ty::ConstKind::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n+            ty::ConstKind::Error => p!(write(\"[const error]\")),\n         };\n         Ok(self)\n     }"}, {"sha": "f4f0b6c41b92f678c00772cfb2e9b8dfaf729e60", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -510,12 +510,21 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     let tcx = relation.tcx();\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| {\n+        // FIXME(eddyb) this doesn't account for lifetime inference variables\n+        // being erased by `eval`, *nor* for the polymorphic aspect of `eval`.\n+        // That is, we could always use `eval` and it will just return the\n+        // old value back if it doesn't succeed.\n         if !x.val.needs_infer() {\n             return x.eval(tcx, relation.param_env()).val;\n         }\n         x.val\n     };\n \n+    // FIXME(eddyb) doesn't look like everything below checks that `a.ty == b.ty`.\n+    // We could probably always assert it early, as `const` generic parameters\n+    // are not allowed to depend on other generic parameters, i.e. are concrete.\n+    // (although there could be normalization differences)\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types.\n@@ -524,6 +533,9 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n             // The caller should handle these cases!\n             bug!(\"var types encountered in super_relate_consts: {:?} {:?}\", a, b)\n         }\n+\n+        (ty::ConstKind::Error, _) | (_, ty::ConstKind::Error) => Ok(ty::ConstKind::Error),\n+\n         (ty::ConstKind::Param(a_p), ty::ConstKind::Param(b_p)) if a_p.index == b_p.index => {\n             return Ok(a);\n         }"}, {"sha": "1c0ffe12314b31218efd3ac61ad8f69b20763583", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -1022,9 +1022,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Unevaluated(did, substs, promoted) => {\n                 ty::ConstKind::Unevaluated(did, substs.fold_with(folder), promoted)\n             }\n-            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(..) => {\n-                *self\n-            }\n+            ty::ConstKind::Value(_)\n+            | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(..)\n+            | ty::ConstKind::Error => *self,\n         }\n     }\n \n@@ -1033,9 +1034,10 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n             ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n-            ty::ConstKind::Value(_) | ty::ConstKind::Bound(..) | ty::ConstKind::Placeholder(_) => {\n-                false\n-            }\n+            ty::ConstKind::Value(_)\n+            | ty::ConstKind::Bound(..)\n+            | ty::ConstKind::Placeholder(_)\n+            | ty::ConstKind::Error => false,\n         }\n     }\n }"}, {"sha": "c80d4fb99b52534870db922852827299211d65ba", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -18,6 +18,7 @@ use crate::ty::{List, ParamEnv, ParamEnvAnd, TyS};\n use polonius_engine::Atom;\n use rustc_ast::ast::{self, Ident};\n use rustc_data_structures::captures::Captures;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::vec::Idx;\n@@ -2340,6 +2341,8 @@ impl<'tcx> Const<'tcx> {\n     /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n         if let ConstKind::Unevaluated(did, substs, promoted) = self.val {\n+            use crate::mir::interpret::ErrorHandled;\n+\n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n \n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n@@ -2369,8 +2372,10 @@ impl<'tcx> Const<'tcx> {\n                 // (which may be identity substs, see above),\n                 // can leak through `val` into the const we return.\n                 Ok(val) => Const::from_value(tcx, val, self.ty),\n-\n-                Err(_) => self,\n+                Err(ErrorHandled::TooGeneric | ErrorHandled::Linted) => self,\n+                Err(ErrorHandled::Reported(ErrorReported)) => {\n+                    tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty: self.ty })\n+                }\n             }\n         } else {\n             self\n@@ -2429,6 +2434,10 @@ pub enum ConstKind<'tcx> {\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),\n+\n+    /// A placeholder for a const which could not be computed; this is\n+    /// propagated to avoid useless error messages.\n+    Error,\n }\n \n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "b6cadd009965660ce1ac8ab3f3800e9110750757", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -170,7 +170,8 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Param(_)\n                 | ty::ConstKind::Placeholder(_)\n                 | ty::ConstKind::Bound(..)\n-                | ty::ConstKind::Value(_) => {}\n+                | ty::ConstKind::Value(_)\n+                | ty::ConstKind::Error => {}\n \n                 ty::ConstKind::Unevaluated(_, substs, _) => {\n                     stack.extend(substs.iter().copied().rev());"}, {"sha": "d525e7fe46fc2994c061cd45bf6b4a99f17279e2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -3,7 +3,7 @@\n use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::{def_id::DefId, HirId, Node};\n use rustc_index::bit_set::BitSet;\n@@ -135,7 +135,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_tables_of(def_id);\n-    if tables.tainted_by_errors {\n+    if let Some(ErrorReported) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables"}, {"sha": "8cb0ea91bc25fb9a1603b030b68e3f071d9dbddc", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -213,13 +213,10 @@ fn validate_and_turn_into_const<'tcx>(\n \n     val.map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n-        match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n+        err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n             diag.note(note_on_undefined_behavior_error());\n             diag.emit();\n-        }) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(err) => err,\n-        }\n+        })\n     })\n }\n \n@@ -292,11 +289,10 @@ pub fn const_eval_raw_provider<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n \n-    if def_id.is_local()\n-        && tcx.has_typeck_tables(def_id)\n-        && tcx.typeck_tables_of(def_id).tainted_by_errors\n-    {\n-        return Err(ErrorHandled::Reported);\n+    if def_id.is_local() && tcx.has_typeck_tables(def_id) {\n+        if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n+            return Err(ErrorHandled::Reported(error_reported));\n+        }\n     }\n \n     let is_static = tcx.is_static(def_id);"}, {"sha": "fcbb25357972846a78738146b82c9ede62485f9a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -400,11 +400,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, mir::ReadOnlyBodyAndCache<'tcx, 'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n-        if did.is_local()\n-            && self.tcx.has_typeck_tables(did)\n-            && self.tcx.typeck_tables_of(did).tainted_by_errors\n-        {\n-            throw_inval!(TypeckError)\n+        if did.is_local() && self.tcx.has_typeck_tables(did) {\n+            if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n+                throw_inval!(TypeckError(error_reported))\n+            }\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {"}, {"sha": "480415676f6d89b3e9fe0437b71d9d0a430fd0f7", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -5,6 +5,7 @@\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::{ErrorHandled, InterpResult};\n use rustc_middle::ty::{self, Ty};\n@@ -337,7 +338,9 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n                         diag.emit();\n                     },\n                 ) {\n-                    Ok(()) | Err(ErrorHandled::TooGeneric) | Err(ErrorHandled::Reported) => {}\n+                    ErrorHandled::TooGeneric\n+                    | ErrorHandled::Reported(ErrorReported)\n+                    | ErrorHandled::Linted => {}\n                 }\n             }\n         }"}, {"sha": "efc43afd0f0fa24047b470fe9151520f7574ca67", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -18,8 +18,8 @@ use rustc_middle::ty::{self, query::TyCtxtAt, Instance, ParamEnv};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, ErrorHandled, GlobalAlloc,\n-    GlobalId, InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n+    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, GlobalId,\n+    InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n };\n use crate::util::pretty;\n \n@@ -462,10 +462,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         // no need to report anything, the const_eval call takes care of that\n                         // for statics\n                         assert!(tcx.is_static(def_id));\n-                        match err {\n-                            ErrorHandled::Reported => err_inval!(ReferencedConstant),\n-                            ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n-                        }\n+                        err\n                     })?;\n                 // Make sure we use the ID of the resolved memory, not the lazy one!\n                 let id = raw_const.alloc_id;"}, {"sha": "2317a1fea079299f64e93f143e74d5960ee9af2b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -4,6 +4,7 @@\n use std::convert::TryFrom;\n use std::fmt::Write;\n \n+use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n@@ -518,6 +519,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n+            ty::ConstKind::Error => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation."}, {"sha": "32d28bb0d1362d1fa4d89953c0c0a4b270a09a2b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -178,6 +178,7 @@ use crate::monomorphize;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -602,7 +603,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 match self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n-                    Err(ErrorHandled::Reported) => {}\n+                    Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.tcx.def_span(def_id),\n                         \"collection encountered polymorphic constant\","}, {"sha": "6911c09c518cd02ec0cbac547591b59ad5a297e3", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -3,6 +3,7 @@ use crate::build::scope::DropKind;\n use crate::hair::cx::Cx;\n use crate::hair::{BindingMode, LintLevel, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n@@ -59,7 +60,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let cx = Cx::new(&infcx, id);\n-        let body = if cx.tables().tainted_by_errors {\n+        let body = if let Some(ErrorReported) = cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n         } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound"}, {"sha": "21d632b9f6b831ae320223cfcb94a68f95bd6b67", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n use rustc_middle::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{self, AdtKind, Ty, TypeFoldable};\n+use rustc_middle::ty::{self, AdtKind, Ty};\n use rustc_span::Span;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr<'tcx> {\n@@ -718,7 +718,8 @@ fn convert_path_expr<'a, 'tcx>(\n \n         Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n             let user_provided_types = cx.tables.user_provided_types();\n-            let user_ty = user_provided_types.get(expr.hir_id).copied();\n+            let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n+            debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n             let ty = cx.tables().node_type(expr.hir_id);\n             match ty.kind {\n                 // A unit struct/variant which is used as a value.\n@@ -727,17 +728,10 @@ fn convert_path_expr<'a, 'tcx>(\n                     adt_def,\n                     variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                     substs,\n-                    user_ty,\n+                    user_ty: user_provided_type,\n                     fields: vec![],\n                     base: None,\n                 },\n-                _ if ty.references_error() => {\n-                    // Handle degenerate input without ICE (#67377).\n-                    ExprKind::Literal {\n-                        literal: ty::Const::zero_sized(cx.tcx, cx.tcx.types.err),\n-                        user_ty: None,\n-                    }\n-                }\n                 _ => bug!(\"unexpected ty: {:?}\", ty),\n             }\n         }"}, {"sha": "f67b8b87ced5f33968a39d93829ac3206877d248", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -972,7 +972,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                             )\n                             .emit();\n \n-                        self.tcx().consts.err\n+                        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n                     }\n                 }\n             }"}, {"sha": "8a9017960fb235494462e6f27b1b04415f1ac755", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -12,7 +12,7 @@ use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCod\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n@@ -674,8 +674,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             // Already reported in the query.\n-            ConstEvalFailure(ErrorHandled::Reported) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n+            ConstEvalFailure(ErrorHandled::Reported(ErrorReported)) => {\n+                // FIXME(eddyb) remove this once `ErrorReported` becomes a proof token.\n+                self.tcx.sess.delay_span_bug(span, \"`ErrorReported` without an error\");\n+                return;\n+            }\n+\n+            // Already reported in the query, but only as a lint.\n+            // This shouldn't actually happen for constants used in types, modulo\n+            // bugs. The `delay_span_bug` here ensures it won't be ignored.\n+            ConstEvalFailure(ErrorHandled::Linted) => {\n+                self.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n                 return;\n             }\n "}, {"sha": "4a8cd9e91e2786ab3bc193fe5dbf7f3067f1b399", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -826,14 +826,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const => {\n+                        let ty = tcx.at(span).type_of(param.def_id);\n                         // FIXME(const_generics:defaults)\n                         if infer_args {\n                             // No const parameters were provided, we can infer all.\n-                            let ty = tcx.at(span).type_of(param.def_id);\n                             self.ct_infer(ty, Some(param), span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n-                            tcx.consts.err.into()\n+                            tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty }).into()\n                         }\n                     }\n                 }"}, {"sha": "7b66743b098d8b0f79e06e7306380f617a2b2c44", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -5,6 +5,7 @@\n use crate::check::FnCtxt;\n \n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -75,7 +76,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.tables.upvar_list =\n             mem::replace(&mut self.tables.borrow_mut().upvar_list, Default::default());\n \n-        wbcx.tables.tainted_by_errors |= self.is_tainted_by_errors();\n+        if self.is_tainted_by_errors() {\n+            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n+            wbcx.tables.tainted_by_errors = Some(ErrorReported);\n+        }\n \n         debug!(\"writeback: tables for {:?} are {:#?}\", item_def_id, wbcx.tables);\n \n@@ -591,7 +595,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n         // to mark the `TypeckTables` as tainted in that case, so that downstream\n         // users of the tables don't produce extra errors, or worse, ICEs.\n-        self.tables.tainted_by_errors |= resolver.replaced_with_error;\n+        if resolver.replaced_with_error {\n+            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n+            self.tables.tainted_by_errors = Some(ErrorReported);\n+        }\n \n         x\n     }\n@@ -673,7 +680,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n                 // accept a &'tcx ty::Const.\n                 self.replaced_with_error = true;\n-                self.tcx().consts.err\n+                self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty: ct.ty })\n             }\n         }\n     }"}, {"sha": "7794f62efb71f32fab2e7683f844c48d63db7904", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -316,13 +316,13 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n \n     fn ct_infer(\n         &self,\n-        _: Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         _: Option<&ty::GenericParamDef>,\n         span: Span,\n     ) -> &'tcx Const<'tcx> {\n         bad_placeholder_type(self.tcx(), vec![span]).emit();\n \n-        self.tcx().consts.err\n+        self.tcx().mk_const(ty::Const { val: ty::ConstKind::Error, ty })\n     }\n \n     fn projected_ty_from_poly_trait_ref(\n@@ -2037,7 +2037,8 @@ fn associated_item_predicates(\n             }\n             ty::GenericParamDefKind::Const => {\n                 unimplemented_error(\"const\");\n-                tcx.consts.err.into()\n+                tcx.mk_const(ty::Const { val: ty::ConstKind::Error, ty: tcx.type_of(param.def_id) })\n+                    .into()\n             }\n         }\n     };"}, {"sha": "e17b736058f0267d9bf1f276181b323944fd05b7", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -125,7 +125,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     owner, def_id,\n                                 ),\n                             );\n-                            if tcx.typeck_tables_of(owner).tainted_by_errors {\n+                            if let Some(ErrorReported) =\n+                                tcx.typeck_tables_of(owner).tainted_by_errors\n+                            {\n                                 // Some error in the\n                                 // owner fn prevented us from populating\n                                 // the `concrete_opaque_types` table."}, {"sha": "60589f7c264a612fe771d66ae61bb25c2055aeb3", "filename": "src/test/ui/array-break-length.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Farray-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Farray-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -1,11 +1,9 @@\n fn main() {\n     loop {\n         |_: [_; break]| {} //~ ERROR: `break` outside of a loop\n-        //~^ ERROR mismatched types\n     }\n \n     loop {\n         |_: [_; continue]| {} //~ ERROR: `continue` outside of a loop\n-        //~^ ERROR mismatched types\n     }\n }"}, {"sha": "93f1c238bcc47c4a0a25f37d69e64a974fe02fe9", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -5,30 +5,11 @@ LL |         |_: [_; break]| {}\n    |                 ^^^^^ cannot `break` outside of a loop\n \n error[E0268]: `continue` outside of a loop\n-  --> $DIR/array-break-length.rs:8:17\n+  --> $DIR/array-break-length.rs:7:17\n    |\n LL |         |_: [_; continue]| {}\n    |                 ^^^^^^^^ cannot `continue` outside of a loop\n \n-error[E0308]: mismatched types\n-  --> $DIR/array-break-length.rs:3:9\n-   |\n-LL |         |_: [_; break]| {}\n-   |         ^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n-   |\n-   = note: expected unit type `()`\n-                found closure `[closure@$DIR/array-break-length.rs:3:9: 3:27]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/array-break-length.rs:8:9\n-   |\n-LL |         |_: [_; continue]| {}\n-   |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n-   |\n-   = note: expected unit type `()`\n-                found closure `[closure@$DIR/array-break-length.rs:8:9: 8:30]`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0268, E0308.\n-For more information about an error, try `rustc --explain E0268`.\n+For more information about this error, try `rustc --explain E0268`."}, {"sha": "fda590fda022c442a8bcf4e2cd347669dbf5c7d9", "filename": "src/test/ui/closures/closure-array-break-length.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -2,8 +2,6 @@ fn main() {\n     |_: [_; continue]| {}; //~ ERROR: `continue` outside of a loop\n \n     while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of a loop\n-    //~^ ERROR mismatched types\n \n     while |_: [_; break]| {} {} //~ ERROR: `break` outside of a loop\n-    //~^ ERROR mismatched types\n }"}, {"sha": "2b8ab9bfc4414938d21f0e0679369feefd3067a9", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -11,30 +11,11 @@ LL |     while |_: [_; continue]| {} {}\n    |                   ^^^^^^^^ cannot `continue` outside of a loop\n \n error[E0268]: `break` outside of a loop\n-  --> $DIR/closure-array-break-length.rs:7:19\n+  --> $DIR/closure-array-break-length.rs:6:19\n    |\n LL |     while |_: [_; break]| {} {}\n    |                   ^^^^^ cannot `break` outside of a loop\n \n-error[E0308]: mismatched types\n-  --> $DIR/closure-array-break-length.rs:4:11\n-   |\n-LL |     while |_: [_; continue]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n-   |\n-   = note: expected type `bool`\n-           found closure `[closure@$DIR/closure-array-break-length.rs:4:11: 4:32]`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/closure-array-break-length.rs:7:11\n-   |\n-LL |     while |_: [_; break]| {} {}\n-   |           ^^^^^^^^^^^^^^^^^^ expected `bool`, found closure\n-   |\n-   = note: expected type `bool`\n-           found closure `[closure@$DIR/closure-array-break-length.rs:7:11: 7:29]`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0268, E0308.\n-For more information about an error, try `rustc --explain E0268`.\n+For more information about this error, try `rustc --explain E0268`."}, {"sha": "6fd8e9cbc806b17c872bcc12c77623134faa428a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -19,7 +19,6 @@ const A_I8_I\n     : [u32; (i8::MAX as usize) + 1]\n     = [0; (i8::MAX + 1) as usize];\n //~^ ERROR evaluation of constant value failed\n-//~| ERROR mismatched types\n \n fn main() {\n     foo(&A_I8_I[..]);"}, {"sha": "2c5b4607aa4d3ca802d13aa78f3f1b69437f46d4", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -4,16 +4,6 @@ error[E0080]: evaluation of constant value failed\n LL |     = [0; (i8::MAX + 1) as usize];\n    |           ^^^^^^^^^^^^^ attempt to add with overflow\n \n-error[E0308]: mismatched types\n-  --> $DIR/const-eval-overflow-3.rs:20:7\n-   |\n-LL |     = [0; (i8::MAX + 1) as usize];\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `128usize`, found `(i8::MAX + 1) as usize`\n-   |\n-   = note: expected array `[u32; 128]`\n-              found array `[u32; _]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "db6f17a671aea5b71db75f41abe6837018d67ef4", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -18,7 +18,6 @@ const A_I8_I\n     = [0; (i8::MAX + 1u8) as usize];\n //~^ ERROR mismatched types\n //~| ERROR cannot add `u8` to `i8`\n-//~| ERROR mismatched types\n \n fn main() {\n     foo(&A_I8_I[..]);"}, {"sha": "3da34fe9af7ecbe8ba069bd644be8d4a769630b5", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3b.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3b.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -12,16 +12,7 @@ LL |     = [0; (i8::MAX + 1u8) as usize];\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i8`\n \n-error[E0308]: mismatched types\n-  --> $DIR/const-eval-overflow-3b.rs:18:7\n-   |\n-LL |     = [0; (i8::MAX + 1u8) as usize];\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `128usize`, found `(i8::MAX + 1u8) as usize`\n-   |\n-   = note: expected array `[u32; 128]`\n-              found array `[u32; _]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "80494d1662987e98efbf5bf12896aeafe35a5887", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     // Make sure match uses the usual pointer comparison code path -- i.e., it should complain\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n     // bytes.\n-    let _: [u8; 0] = [4; { //~ ERROR mismatched types\n+    let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize {\n             //~^ ERROR casting pointers to integers in constants\n             //~| ERROR `match` is not allowed in a `const`"}, {"sha": "b47f6d5f845feeab0e81fbd237a557ebbfbf939f", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -28,30 +28,7 @@ error[E0080]: evaluation of constant value failed\n LL |         match &1 as *const i32 as usize {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n \n-error[E0308]: mismatched types\n-  --> $DIR/match-test-ptr-null.rs:5:22\n-   |\n-LL |       let _: [u8; 0] = [4; {\n-   |  ____________-------___^\n-   | |            |\n-   | |            expected due to this\n-LL | |         match &1 as *const i32 as usize {\n-LL | |\n-LL | |\n-...  |\n-LL | |         }\n-LL | |     }];\n-   | |______^ expected `0usize`, found `{\n-        match &1 as *const i32 as usize {\n-            0 => 42,\n-            n => n,\n-        }\n-    }`\n-   |\n-   = note: expected array `[u8; 0]`\n-              found array `[u8; _]`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0080, E0308, E0658.\n+Some errors have detailed explanations: E0080, E0658.\n For more information about an error, try `rustc --explain E0080`."}, {"sha": "35915a7a606a4ddee8e5b93493b1227d97e03d0c", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -6,7 +6,6 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR: [i32; X] = [99; 34];\n-//~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -16,7 +15,6 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR1: [i32; X1] = [99; 47];\n-//~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -26,7 +24,6 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n-//~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -36,43 +33,36 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARR3: [i32; X3] = [99; 6];\n-//~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR: [i32; Y] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR1: [i32; Y1] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR2: [i32; Y2] = [99; 1];\n-//~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR3: [i32; Y3] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR4: [i32; Y4] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected `usize`, found `bool`\n const ARRR5: [i32; Y5] = [99; 0];\n-//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = ARR;"}, {"sha": "4e503e5a5c0a4df39a204d7e5e31c4679f620d8a", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 17, "deletions": 78, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -16,157 +16,96 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:8:18\n-   |\n-LL | const ARR: [i32; X] = [99; 34];\n-   |                  ^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:25\n+  --> $DIR/const-integer-bool-ops.rs:10:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:11:19\n+  --> $DIR/const-integer-bool-ops.rs:10:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:18:19\n-   |\n-LL | const ARR1: [i32; X1] = [99; 47];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:26\n+  --> $DIR/const-integer-bool-ops.rs:19:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:21:19\n+  --> $DIR/const-integer-bool-ops.rs:19:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:28:19\n-   |\n-LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:26\n+  --> $DIR/const-integer-bool-ops.rs:28:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected `bool`, found integer\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:31:19\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n-   |\n-LL | const ARR3: [i32; X3] = [99; 6];\n-   |                   ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:41:18\n+  --> $DIR/const-integer-bool-ops.rs:37:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:44:19\n-   |\n-LL | const ARRR: [i32; Y] = [99; 1];\n-   |                   ^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:19\n+  --> $DIR/const-integer-bool-ops.rs:42:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:50:20\n-   |\n-LL | const ARRR1: [i32; Y1] = [99; 1];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:53:19\n+  --> $DIR/const-integer-bool-ops.rs:47:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:56:20\n-   |\n-LL | const ARRR2: [i32; Y2] = [99; 1];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:59:19\n+  --> $DIR/const-integer-bool-ops.rs:52:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:62:20\n-   |\n-LL | const ARRR3: [i32; Y3] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:65:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:68:20\n-   |\n-LL | const ARRR4: [i32; Y4] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:71:19\n+  --> $DIR/const-integer-bool-ops.rs:62:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected `usize`, found `bool`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-integer-bool-ops.rs:74:20\n-   |\n-LL | const ARRR5: [i32; Y5] = [99; 0];\n-   |                    ^^ referenced constant has errors\n-\n-error: aborting due to 28 previous errors\n+error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "8057d64369a23e553ba21dcb181203e10c97d4db", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -4,7 +4,6 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found `usize`\n const ARR: [i32; TUP.0] = [];\n-//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "6724984d8d7ac1f26f023cecc3e3bed91dc9488f", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -7,13 +7,6 @@ LL | const TUP: (usize,) = 5usize << 64;\n    = note: expected tuple `(usize,)`\n                found type `usize`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-tup-index-span.rs:6:18\n-   |\n-LL | const ARR: [i32; TUP.0] = [];\n-   |                  ^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0308.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3a52e4d6216a5e30b944953c1210c8b410265212", "filename": "src/test/ui/issues/issue-39559-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -17,5 +17,4 @@ fn main() {\n         = [0; Dim3::dim()];\n         //~^ ERROR E0015\n         //~| ERROR E0080\n-        //~| ERROR mismatched types\n }"}, {"sha": "586debbbe535348fc2bcd9e9566194be05df8ed7", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -22,19 +22,7 @@ error[E0080]: evaluation of constant value failed\n LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^ calling non-const function `<Dim3 as Dim>::dim`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-39559-2.rs:17:11\n-   |\n-LL |     let array: [usize; Dim3::dim()]\n-   |                -------------------- expected due to this\n-...\n-LL |         = [0; Dim3::dim()];\n-   |           ^^^^^^^^^^^^^^^^ expected `Dim3::dim()`, found `Dim3::dim()`\n-   |\n-   = note: expected array `[usize; _]`\n-              found array `[usize; _]`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0015, E0080, E0308.\n+Some errors have detailed explanations: E0015, E0080.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "06a330813406a9fe0f5a61de534e8e403854181c", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -5,7 +5,6 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n-    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "fa95ca9c18a1004a049da6e67152c0e40be605a0", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -6,13 +6,6 @@ LL |     A = \"\" + 1\n    |         |\n    |         &str\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-41394.rs:7:9\n-   |\n-LL |     A = Foo::A as isize\n-   |         ^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0369.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "00588735b9a5932c78fdfb9b3d3b9057d8492541", "filename": "src/test/ui/issues/issue-50599.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -2,5 +2,4 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n-    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "378c57011ac506c9d3666008895ebfb6b45ef017", "filename": "src/test/ui/issues/issue-50599.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -11,13 +11,6 @@ LL | use std::f32::consts::LOG10_2;\n LL | use std::f64::consts::LOG10_2;\n    |\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-50599.rs:4:29\n-   |\n-LL |     let mut digits = [0u32; M];\n-   |                             ^ referenced constant has errors\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0425.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "fed08902c8b9d35def06f90722a25d06b55a4bdc", "filename": "src/test/ui/issues/issue-52060.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -4,6 +4,5 @@ static A: &'static [u32] = &[1];\n static B: [u32; 1] = [0; A.len()];\n //~^ ERROR [E0013]\n //~| ERROR evaluation of constant value failed\n-//~| ERROR mismatched types\n \n fn main() {}"}, {"sha": "502825e9766e3d90af04bd09c311cdfccecbdc26", "filename": "src/test/ui/issues/issue-52060.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52060.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -12,16 +12,7 @@ error[E0080]: evaluation of constant value failed\n LL | static B: [u32; 1] = [0; A.len()];\n    |                          ^ constant accesses static\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-52060.rs:4:22\n-   |\n-LL | static B: [u32; 1] = [0; A.len()];\n-   |                      ^^^^^^^^^^^^ expected `1usize`, found `A.len()`\n-   |\n-   = note: expected array `[u32; 1]`\n-              found array `[u32; _]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0013, E0080, E0308.\n+Some errors have detailed explanations: E0013, E0080.\n For more information about an error, try `rustc --explain E0013`."}, {"sha": "00805eb5dc90d041c1d5aae815b9034e03ee56cf", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -11,8 +11,6 @@ trait Tt {\n }\n \n fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-    //~^ ERROR evaluation of constant value failed\n-    //~| ERROR evaluation of constant value failed\n     z\n }\n "}, {"sha": "29d439b457ff64ecc2d3e5891911317c8da1c581", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -15,19 +15,7 @@ LL |     const fn const_val<T: Sized>() -> usize {\n    |\n    = note: cannot satisfy `_: Tt`\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-54954.rs:13:15\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |               ^^^^^^^ referenced constant has errors\n-\n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-54954.rs:13:34\n-   |\n-LL | fn f(z: [f32; ARR_LEN]) -> [f32; ARR_LEN] {\n-   |                                  ^^^^^^^ referenced constant has errors\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0080, E0283, E0379.\n-For more information about an error, try `rustc --explain E0080`.\n+Some errors have detailed explanations: E0283, E0379.\n+For more information about an error, try `rustc --explain E0283`."}, {"sha": "b6a083516093bfb00aef33e5e0d1158653feb15e", "filename": "src/test/ui/resolve/issue-65035-static-with-parent-generics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -23,8 +23,7 @@ fn h<const N: usize>() {\n fn i<const N: usize>() {\n     static a: [u8; N] = [0; N];\n     //~^ ERROR can't use generic parameters from outer function\n-    //~^^ ERROR can't use generic parameters from outer function\n-    //~| ERROR mismatched types\n+    //~| ERROR can't use generic parameters from outer function\n }\n \n fn main() {}"}, {"sha": "6076328b12f736cadb933fc1613dd7de4a0badce", "filename": "src/test/ui/resolve/issue-65035-static-with-parent-generics.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-65035-static-with-parent-generics.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -48,16 +48,6 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-65035-static-with-parent-generics.rs:24:25\n-   |\n-LL |     static a: [u8; N] = [0; N];\n-   |                         ^^^^^^ expected `N`, found `N`\n-   |\n-   = note: expected array `[u8; _]`\n-              found array `[u8; _]`\n-\n-error: aborting due to 6 previous errors; 1 warning emitted\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n-Some errors have detailed explanations: E0308, E0401.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0401`."}, {"sha": "4b6bc6124dbf301e232d640498f539cfde51fbba", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -2,6 +2,4 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR attempt to use a non-constant value in a constant\n     let s: [u32; l] = v.into_iter().collect();\n-    //~^ ERROR evaluation of constant value failed\n-    //~^^ ERROR a value of type\n }"}, {"sha": "c5dcfa7a4313324c498db6236001fdde3bda0687", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d67f576b56e8fc98a31123e5963f8d00e40611c/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=8d67f576b56e8fc98a31123e5963f8d00e40611c", "patch": "@@ -4,21 +4,6 @@ error[E0435]: attempt to use a non-constant value in a constant\n LL |     const l: usize = v.count();\n    |                      ^ non-constant value\n \n-error[E0080]: evaluation of constant value failed\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:18\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                  ^ referenced constant has errors\n-\n-error[E0277]: a value of type `[u32; _]` cannot be built from an iterator over elements of type `{integer}`\n-  --> $DIR/type-dependent-def-issue-49241.rs:4:37\n-   |\n-LL |     let s: [u32; l] = v.into_iter().collect();\n-   |                                     ^^^^^^^ value of type `[u32; _]` cannot be built from `std::iter::Iterator<Item={integer}>`\n-   |\n-   = help: the trait `std::iter::FromIterator<{integer}>` is not implemented for `[u32; _]`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0080, E0277, E0435.\n-For more information about an error, try `rustc --explain E0080`.\n+For more information about this error, try `rustc --explain E0435`."}]}