{"sha": "a960f8304cee9af374aae7bade15554734f37480", "node_id": "C_kwDOAAsO6NoAKGE5NjBmODMwNGNlZTlhZjM3NGFhZTdiYWRlMTU1NTQ3MzRmMzc0ODA", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-19T13:02:10Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-21T07:17:43Z"}, "message": "Make derived SessionDiagnostics generic on diagnostic level\n\nDeriving SessionDiagnostic on a type no longer forces that diagnostic to\nbe one of warning, error, or fatal. The level is instead decided when\nthe struct is passed to the respective Handler::emit_*() method.", "tree": {"sha": "ebeae37fbf28a5735cb96eca6c9eedc0c9e83f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebeae37fbf28a5735cb96eca6c9eedc0c9e83f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a960f8304cee9af374aae7bade15554734f37480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a960f8304cee9af374aae7bade15554734f37480", "html_url": "https://github.com/rust-lang/rust/commit/a960f8304cee9af374aae7bade15554734f37480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a960f8304cee9af374aae7bade15554734f37480/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ad4e38f53ce1ef8783233bde36a81cd8177981", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ad4e38f53ce1ef8783233bde36a81cd8177981", "html_url": "https://github.com/rust-lang/rust/commit/91ad4e38f53ce1ef8783233bde36a81cd8177981"}], "stats": {"total": 291, "additions": 107, "deletions": 184}, "files": [{"sha": "244edec2841591260cfef4c53bfc807851a13880", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 20, "deletions": 62, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=a960f8304cee9af374aae7bade15554734f37480", "patch": "@@ -21,7 +21,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: None,\n+                kind: DiagnosticDeriveKind::SessionDiagnostic,\n                 code: None,\n                 slug: None,\n             },\n@@ -34,49 +34,31 @@ impl<'a> SessionDiagnosticDerive<'a> {\n         let SessionDiagnosticDerive { mut structure, sess, mut builder } = self;\n \n         let ast = structure.ast();\n-        let (implementation, param_ty) = {\n+        let implementation = {\n             if let syn::Data::Struct(..) = ast.data {\n                 let preamble = builder.preamble(&structure);\n                 let (attrs, args) = builder.body(&mut structure);\n \n                 let span = ast.span().unwrap();\n                 let diag = &builder.diag;\n-                let init = match (builder.kind.value(), builder.slug.value()) {\n-                    (None, _) => {\n-                        span_err(span, \"diagnostic kind not specified\")\n-                            .help(\"use the `#[error(...)]` attribute to create an error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(kind), None) => {\n+                let init = match builder.slug.value() {\n+                    None => {\n                         span_err(span, \"diagnostic slug not specified\")\n                             .help(&format!(\n-                                \"specify the slug as the first argument to the attribute, such as \\\n-                                 `#[{}(typeck::example_error)]`\",\n-                                kind.descr()\n+                                \"specify the slug as the first argument to the `#[diag(...)]` attribute, \\\n+                                such as `#[diag(typeck::example_error)]`\",\n                             ))\n                             .emit();\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some(DiagnosticDeriveKind::Lint), _) => {\n-                        span_err(span, \"only `#[error(..)]` and `#[warning(..)]` are supported\")\n-                            .help(\"use the `#[error(...)]` attribute to create a error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(DiagnosticDeriveKind::Error), Some(slug)) => {\n-                        quote! {\n-                            let mut #diag = #sess.struct_err(rustc_errors::fluent::#slug);\n-                        }\n-                    }\n-                    (Some(DiagnosticDeriveKind::Warn), Some(slug)) => {\n+                    Some(slug) => {\n                         quote! {\n-                            let mut #diag = #sess.struct_warn(rustc_errors::fluent::#slug);\n+                            let mut #diag = #sess.struct_diagnostic(rustc_errors::fluent::#slug);\n                         }\n                     }\n                 };\n \n-                let implementation = quote! {\n+                quote! {\n                     #init\n                     #preamble\n                     match self {\n@@ -86,39 +68,28 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                         #args\n                     }\n                     #diag\n-                };\n-                let param_ty = match builder.kind {\n-                    Some((DiagnosticDeriveKind::Error, _)) => {\n-                        quote! { rustc_errors::ErrorGuaranteed }\n-                    }\n-                    Some((DiagnosticDeriveKind::Lint | DiagnosticDeriveKind::Warn, _)) => {\n-                        quote! { () }\n-                    }\n-                    _ => unreachable!(),\n-                };\n-\n-                (implementation, param_ty)\n+                }\n             } else {\n                 span_err(\n                     ast.span().unwrap(),\n                     \"`#[derive(SessionDiagnostic)]` can only be used on structs\",\n                 )\n                 .emit();\n \n-                let implementation = DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                let param_ty = quote! { rustc_errors::ErrorGuaranteed };\n-                (implementation, param_ty)\n+                DiagnosticDeriveError::ErrorHandled.to_compile_error()\n             }\n         };\n \n         structure.gen_impl(quote! {\n-            gen impl<'__session_diagnostic_sess> rustc_session::SessionDiagnostic<'__session_diagnostic_sess, #param_ty>\n+            gen impl<'__session_diagnostic_sess, G>\n+                    rustc_session::SessionDiagnostic<'__session_diagnostic_sess, G>\n                     for @Self\n+                where G: rustc_errors::EmissionGuarantee\n             {\n                 fn into_diagnostic(\n                     self,\n                     #sess: &'__session_diagnostic_sess rustc_session::parse::ParseSess\n-                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, #param_ty> {\n+                ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, G> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }\n@@ -139,7 +110,7 @@ impl<'a> LintDiagnosticDerive<'a> {\n             builder: DiagnosticDeriveBuilder {\n                 diag,\n                 fields: build_field_mapping(&structure),\n-                kind: None,\n+                kind: DiagnosticDeriveKind::LintDiagnostic,\n                 code: None,\n                 slug: None,\n             },\n@@ -158,30 +129,17 @@ impl<'a> LintDiagnosticDerive<'a> {\n \n                 let diag = &builder.diag;\n                 let span = ast.span().unwrap();\n-                let init = match (builder.kind.value(), builder.slug.value()) {\n-                    (None, _) => {\n-                        span_err(span, \"diagnostic kind not specified\")\n-                            .help(\"use the `#[error(...)]` attribute to create an error\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(kind), None) => {\n+                let init = match builder.slug.value() {\n+                    None => {\n                         span_err(span, \"diagnostic slug not specified\")\n                             .help(&format!(\n                                 \"specify the slug as the first argument to the attribute, such as \\\n-                                 `#[{}(typeck::example_error)]`\",\n-                                kind.descr()\n+                                 `#[diag(typeck::example_error)]`\",\n                             ))\n                             .emit();\n                         return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n                     }\n-                    (Some(DiagnosticDeriveKind::Error | DiagnosticDeriveKind::Warn), _) => {\n-                        span_err(span, \"only `#[lint(..)]` is supported\")\n-                            .help(\"use the `#[lint(...)]` attribute to create a lint\")\n-                            .emit();\n-                        return DiagnosticDeriveError::ErrorHandled.to_compile_error();\n-                    }\n-                    (Some(DiagnosticDeriveKind::Lint), Some(slug)) => {\n+                    Some(slug) => {\n                         quote! {\n                             let mut #diag = #diag.build(rustc_errors::fluent::#slug);\n                         }"}, {"sha": "6a5997512bd3fae1265f46e2a337525b4f9d24dd", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=a960f8304cee9af374aae7bade15554734f37480", "patch": "@@ -18,30 +18,15 @@ use syn::{\n };\n use synstructure::{BindingInfo, Structure};\n \n-/// What kind of diagnostic is being derived - an error, a warning or a lint?\n-#[derive(Copy, Clone)]\n+/// What kind of diagnostic is being derived - a fatal/error/warning or a lint?\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub(crate) enum DiagnosticDeriveKind {\n-    /// `#[error(..)]`\n-    Error,\n-    /// `#[warn(..)]`\n-    Warn,\n-    /// `#[lint(..)]`\n-    Lint,\n-}\n-\n-impl DiagnosticDeriveKind {\n-    /// Returns human-readable string corresponding to the kind.\n-    pub fn descr(&self) -> &'static str {\n-        match self {\n-            DiagnosticDeriveKind::Error => \"error\",\n-            DiagnosticDeriveKind::Warn => \"warning\",\n-            DiagnosticDeriveKind::Lint => \"lint\",\n-        }\n-    }\n+    SessionDiagnostic,\n+    LintDiagnostic,\n }\n \n /// Tracks persistent information required for building up individual calls to diagnostic methods\n-/// for generated diagnostic derives - both `SessionDiagnostic` for errors/warnings and\n+/// for generated diagnostic derives - both `SessionDiagnostic` for fatal/errors/warnings and\n /// `LintDiagnostic` for lints.\n pub(crate) struct DiagnosticDeriveBuilder {\n     /// The identifier to use for the generated `DiagnosticBuilder` instance.\n@@ -51,8 +36,8 @@ pub(crate) struct DiagnosticDeriveBuilder {\n     /// derive builder.\n     pub fields: HashMap<String, TokenStream>,\n \n-    /// Kind of diagnostic requested via the struct attribute.\n-    pub kind: Option<(DiagnosticDeriveKind, proc_macro::Span)>,\n+    /// Kind of diagnostic that should be derived.\n+    pub kind: DiagnosticDeriveKind,\n     /// Slug is a mandatory part of the struct attribute as corresponds to the Fluent message that\n     /// has the actual diagnostic message.\n     pub slug: Option<(Path, proc_macro::Span)>,\n@@ -143,7 +128,7 @@ impl DiagnosticDeriveBuilder {\n     }\n \n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n-    /// attributes like `#[error(..)`, such as the diagnostic kind and slug. Generates\n+    /// attributes like `#[diag(..)]`, such as the slug and error code. Generates\n     /// diagnostic builder calls for setting error code and creating note/help messages.\n     fn generate_structure_code_for_attr(\n         &mut self,\n@@ -156,15 +141,15 @@ impl DiagnosticDeriveBuilder {\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n \n-        let is_help_note_or_warn = matches!(name, \"help\" | \"note\" | \"warn_\");\n+        let is_diag = matches!(name, \"error\" | \"warning\" | \"lint\" | \"diag\");\n \n         let nested = match meta {\n-            // Most attributes are lists, like `#[error(..)]`/`#[warning(..)]` for most cases or\n+            // Most attributes are lists, like `#[diag(..)]` for most cases or\n             // `#[help(..)]`/`#[note(..)]` when the user is specifying a alternative slug.\n             Meta::List(MetaList { ref nested, .. }) => nested,\n             // Subdiagnostics without spans can be applied to the type too, and these are just\n-            // paths: `#[help]` and `#[note]`\n-            Meta::Path(_) if is_help_note_or_warn => {\n+            // paths: `#[help]`, `#[note]` and `#[warn_]`\n+            Meta::Path(_) if !is_diag => {\n                 let fn_name = if name == \"warn_\" {\n                     Ident::new(\"warn\", attr.span())\n                 } else {\n@@ -178,23 +163,32 @@ impl DiagnosticDeriveBuilder {\n         // Check the kind before doing any further processing so that there aren't misleading\n         // \"no kind specified\" errors if there are failures later.\n         match name {\n-            \"error\" => self.kind.set_once((DiagnosticDeriveKind::Error, span)),\n-            \"warning\" => self.kind.set_once((DiagnosticDeriveKind::Warn, span)),\n-            \"lint\" => self.kind.set_once((DiagnosticDeriveKind::Lint, span)),\n-            \"help\" | \"note\" | \"warn_\" => (),\n+            \"error\" | \"warning\" => {\n+                if self.kind == DiagnosticDeriveKind::LintDiagnostic {\n+                    span_err(span, \"only `#[lint(..)]` is supported\")\n+                        .help(\"use the `#[lint(...)]` attribute to create a lint\")\n+                        .emit();\n+                }\n+            }\n+            \"lint\" => {\n+                if self.kind == DiagnosticDeriveKind::SessionDiagnostic {\n+                    span_err(span, \"only `#[error(..)]` and `#[warning(..)]` are supported\")\n+                        .help(\"use the `#[error(...)]` attribute to create a error\")\n+                        .emit();\n+                }\n+            }\n+            \"diag\" | \"help\" | \"note\" | \"warn_\" => (),\n             _ => throw_invalid_attr!(attr, &meta, |diag| {\n-                diag.help(\n-                    \"only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\",\n-                )\n+                diag.help(\"only `diag`, `help`, `note` and `warn_` are valid attributes\")\n             }),\n         }\n \n-        // First nested element should always be the path, e.g. `#[error(typeck::invalid)]` or\n+        // First nested element should always be the path, e.g. `#[diag(typeck::invalid)]` or\n         // `#[help(typeck::another_help)]`.\n         let mut nested_iter = nested.into_iter();\n         if let Some(nested_attr) = nested_iter.next() {\n             // Report an error if there are any other list items after the path.\n-            if is_help_note_or_warn && nested_iter.next().is_some() {\n+            if !is_diag && nested_iter.next().is_some() {\n                 throw_invalid_nested_attr!(attr, &nested_attr, |diag| {\n                     diag.help(\n                         \"`help`, `note` and `warn_` struct attributes can only have one argument\",\n@@ -203,16 +197,16 @@ impl DiagnosticDeriveBuilder {\n             }\n \n             match nested_attr {\n-                NestedMeta::Meta(Meta::Path(path)) if is_help_note_or_warn => {\n-                    let fn_name = proc_macro2::Ident::new(name, attr.span());\n-                    return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n-                }\n                 NestedMeta::Meta(Meta::Path(path)) => {\n-                    self.slug.set_once((path.clone(), span));\n+                    if is_diag {\n+                        self.slug.set_once((path.clone(), span));\n+                    } else {\n+                        let fn_name = proc_macro2::Ident::new(name, attr.span());\n+                        return Ok(quote! { #diag.#fn_name(rustc_errors::fluent::#path); });\n+                    }\n                 }\n                 NestedMeta::Meta(meta @ Meta::NameValue(_))\n-                    if !is_help_note_or_warn\n-                        && meta.path().segments.last().unwrap().ident == \"code\" =>\n+                    if is_diag && meta.path().segments.last().unwrap().ident == \"code\" =>\n                 {\n                     // don't error for valid follow-up attributes\n                 }\n@@ -347,6 +341,7 @@ impl DiagnosticDeriveBuilder {\n             }\n             \"primary_span\" => {\n                 report_error_if_not_applied_to_span(attr, &info)?;\n+\n                 Ok(quote! {\n                     #diag.set_span(#binding);\n                 })"}, {"sha": "fe4ff2fb6aa20775031117d9329dad7bf0ff412c", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a960f8304cee9af374aae7bade15554734f37480/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=a960f8304cee9af374aae7bade15554734f37480", "patch": "@@ -132,6 +132,7 @@ decl_derive!(\n         warning,\n         error,\n         lint,\n+        diag,\n         help,\n         note,\n         warn_,\n@@ -151,6 +152,7 @@ decl_derive!(\n         warning,\n         error,\n         lint,\n+        diag,\n         help,\n         note,\n         warn_,"}, {"sha": "8634fbc7aca675dfccf47d2aee28731fc239ccd5", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a960f8304cee9af374aae7bade15554734f37480/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a960f8304cee9af374aae7bade15554734f37480/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=a960f8304cee9af374aae7bade15554734f37480", "patch": "@@ -52,7 +52,7 @@ struct WrongStructAttrStyle {}\n #[derive(SessionDiagnostic)]\n #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n //~^ ERROR `#[nonsense(...)]` is not a valid attribute\n-//~^^ ERROR diagnostic kind not specified\n+//~^^ ERROR diagnostic slug not specified\n //~^^^ ERROR cannot find attribute `nonsense` in this scope\n struct InvalidStructAttr {}\n \n@@ -103,15 +103,13 @@ struct WrongPlaceField {\n #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n-//~^^^ ERROR specified multiple times\n struct ErrorSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n //~^ ERROR specified multiple times\n //~^^ ERROR specified multiple times\n-//~^^^ ERROR specified multiple times\n struct WarnSpecifiedAfterError {}\n \n #[derive(SessionDiagnostic)]\n@@ -125,7 +123,7 @@ struct CodeSpecifiedTwice {}\n struct SlugSpecifiedTwice {}\n \n #[derive(SessionDiagnostic)]\n-struct KindNotProvided {} //~ ERROR diagnostic kind not specified\n+struct KindNotProvided {} //~ ERROR diagnostic slug not specified\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0456\")]"}, {"sha": "8c826c9a2845422a3530e7f7839ea148e839ca26", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 45, "deletions": 75, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/a960f8304cee9af374aae7bade15554734f37480/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a960f8304cee9af374aae7bade15554734f37480/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=a960f8304cee9af374aae7bade15554734f37480", "patch": "@@ -21,9 +21,9 @@ error: `#[nonsense(...)]` is not a valid attribute\n LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: only `error`, `warning`, `help`, `note` and `warn_` are valid attributes\n+   = help: only `diag`, `help`, `note` and `warn_` are valid attributes\n \n-error: diagnostic kind not specified\n+error: diagnostic slug not specified\n   --> $DIR/diagnostic-derive.rs:53:1\n    |\n LL | / #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n@@ -33,7 +33,7 @@ LL | |\n LL | | struct InvalidStructAttr {}\n    | |___________________________^\n    |\n-   = help: use the `#[error(...)]` attribute to create an error\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[error(\"...\")]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:60:9\n@@ -52,7 +52,7 @@ LL | |\n LL | | struct InvalidLitNestedAttr {}\n    | |______________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[error(nonsense(...))]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:71:9\n@@ -71,7 +71,7 @@ LL | |\n LL | | struct InvalidNestedStructAttr1 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:77:9\n@@ -90,7 +90,7 @@ LL | |\n LL | | struct InvalidNestedStructAttr2 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[error(nonsense = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:83:9\n@@ -109,7 +109,7 @@ LL | |\n LL | | struct InvalidNestedStructAttr3 {}\n    | |__________________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: `#[error(slug = ...)]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:89:59\n@@ -137,18 +137,6 @@ note: previously specified here\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:103:1\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:102:1\n-   |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: specified multiple times\n   --> $DIR/diagnostic-derive.rs:103:50\n    |\n@@ -162,105 +150,93 @@ LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:1\n-   |\n-LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: previously specified here\n   --> $DIR/diagnostic-derive.rs:110:1\n    |\n-LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:1\n-   |\n LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:110:1\n+  --> $DIR/diagnostic-derive.rs:109:1\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:111:52\n+  --> $DIR/diagnostic-derive.rs:110:52\n    |\n LL | #[warning(typeck::ambiguous_lifetime_bound, code = \"E0293\")]\n    |                                                    ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:110:50\n+  --> $DIR/diagnostic-derive.rs:109:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |                                                  ^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/diagnostic-derive.rs:118:66\n+  --> $DIR/diagnostic-derive.rs:116:66\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                                  ^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/diagnostic-derive.rs:118:50\n+  --> $DIR/diagnostic-derive.rs:116:50\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, code = \"E0456\", code = \"E0457\")]\n    |                                                  ^^^^^^^\n \n error: `#[error(typeck::ambiguous_lifetime_bound)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:123:43\n+  --> $DIR/diagnostic-derive.rs:121:43\n    |\n LL | #[error(typeck::ambiguous_lifetime_bound, typeck::ambiguous_lifetime_bound, code = \"E0456\")]\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: diagnostic kind not specified\n-  --> $DIR/diagnostic-derive.rs:128:1\n+error: diagnostic slug not specified\n+  --> $DIR/diagnostic-derive.rs:126:1\n    |\n LL | struct KindNotProvided {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: use the `#[error(...)]` attribute to create an error\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: diagnostic slug not specified\n-  --> $DIR/diagnostic-derive.rs:131:1\n+  --> $DIR/diagnostic-derive.rs:129:1\n    |\n LL | / #[error(code = \"E0456\")]\n LL | |\n LL | | struct SlugNotProvided {}\n    | |_________________________^\n    |\n-   = help: specify the slug as the first argument to the attribute, such as `#[error(typeck::example_error)]`\n+   = help: specify the slug as the first argument to the `#[diag(...)]` attribute, such as `#[diag(typeck::example_error)]`\n \n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:142:5\n+  --> $DIR/diagnostic-derive.rs:140:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: `#[nonsense]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:150:5\n+  --> $DIR/diagnostic-derive.rs:148:5\n    |\n LL |     #[nonsense]\n    |     ^^^^^^^^^^^\n    |\n    = help: only `skip_arg`, `primary_span`, `label`, `note`, `help` and `subdiagnostic` are valid field attributes\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:167:5\n+  --> $DIR/diagnostic-derive.rs:165:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `name` doesn't refer to a field on this type\n-  --> $DIR/diagnostic-derive.rs:175:45\n+  --> $DIR/diagnostic-derive.rs:173:45\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"{name}\")]\n    |                                             ^^^^^^^^\n \n error: invalid format string: expected `'}'` but string was terminated\n-  --> $DIR/diagnostic-derive.rs:180:16\n+  --> $DIR/diagnostic-derive.rs:178:16\n    |\n LL | #[derive(SessionDiagnostic)]\n    |           -    ^ expected `'}'` in format string\n@@ -271,7 +247,7 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n-  --> $DIR/diagnostic-derive.rs:190:15\n+  --> $DIR/diagnostic-derive.rs:188:15\n    |\n LL | #[derive(SessionDiagnostic)]\n    |               ^ unmatched `}` in format string\n@@ -280,29 +256,29 @@ LL | #[derive(SessionDiagnostic)]\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `#[label(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/diagnostic-derive.rs:210:5\n+  --> $DIR/diagnostic-derive.rs:208:5\n    |\n LL |     #[label(typeck::label)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion(nonsense = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:235:18\n+  --> $DIR/diagnostic-derive.rs:233:18\n    |\n LL |     #[suggestion(nonsense = \"bar\")]\n    |                  ^^^^^^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: `#[suggestion(msg = ...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:243:18\n+  --> $DIR/diagnostic-derive.rs:241:18\n    |\n LL |     #[suggestion(msg = \"bar\")]\n    |                  ^^^^^^^^^^^\n    |\n    = help: only `message`, `code` and `applicability` are valid field attributes\n \n error: wrong field type for suggestion\n-  --> $DIR/diagnostic-derive.rs:265:5\n+  --> $DIR/diagnostic-derive.rs:263:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n@@ -312,76 +288,70 @@ LL | |     suggestion: Applicability,\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:280:5\n+  --> $DIR/diagnostic-derive.rs:278:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Span, Span, Applicability),\n    | |___________________________________________^\n \n error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:288:5\n+  --> $DIR/diagnostic-derive.rs:286:5\n    |\n LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n LL | |\n LL | |     suggestion: (Applicability, Applicability, Span),\n    | |____________________________________________________^\n \n error: `#[label = ...]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:296:5\n+  --> $DIR/diagnostic-derive.rs:294:5\n    |\n LL |     #[label = \"bar\"]\n    |     ^^^^^^^^^^^^^^^^\n \n error: applicability cannot be set in both the field and attribute\n-  --> $DIR/diagnostic-derive.rs:447:52\n+  --> $DIR/diagnostic-derive.rs:445:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"maybe-incorrect\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/diagnostic-derive.rs:455:52\n+  --> $DIR/diagnostic-derive.rs:453:52\n    |\n LL |     #[suggestion(typeck::suggestion, code = \"...\", applicability = \"batman\")]\n    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:518:5\n+  --> $DIR/diagnostic-derive.rs:516:5\n    |\n LL |     #[label(typeck::label, foo)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:526:5\n+  --> $DIR/diagnostic-derive.rs:524:5\n    |\n LL |     #[label(typeck::label, foo = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[label(...)]` is not a valid attribute\n-  --> $DIR/diagnostic-derive.rs:534:5\n+  --> $DIR/diagnostic-derive.rs:532:5\n    |\n LL |     #[label(typeck::label, foo(\"...\"))]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: only `#[error(..)]` and `#[warning(..)]` are supported\n-  --> $DIR/diagnostic-derive.rs:540:1\n+  --> $DIR/diagnostic-derive.rs:538:1\n    |\n-LL | / #[lint(typeck::ambiguous_lifetime_bound)]\n-LL | |\n-LL | | struct LintsBad {\n-LL | | }\n-   | |_^\n+LL | #[lint(typeck::ambiguous_lifetime_bound)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the `#[error(...)]` attribute to create a error\n \n error: only `#[lint(..)]` is supported\n-  --> $DIR/diagnostic-derive.rs:551:1\n+  --> $DIR/diagnostic-derive.rs:549:1\n    |\n-LL | / #[error(typeck::ambiguous_lifetime_bound)]\n-LL | |\n-LL | | struct ErrorsBad {\n-LL | | }\n-   | |_^\n+LL | #[error(typeck::ambiguous_lifetime_bound)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use the `#[lint(...)]` attribute to create a lint\n \n@@ -392,7 +362,7 @@ LL | #[nonsense(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n    |   ^^^^^^^^\n \n error: cannot find attribute `nonsense` in this scope\n-  --> $DIR/diagnostic-derive.rs:150:7\n+  --> $DIR/diagnostic-derive.rs:148:7\n    |\n LL |     #[nonsense]\n    |       ^^^^^^^^\n@@ -404,7 +374,7 @@ LL | #[error(nonsense, code = \"E0123\")]\n    |         ^^^^^^^^ not found in `rustc_errors::fluent`\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:340:10\n+  --> $DIR/diagnostic-derive.rs:338:10\n    |\n LL | #[derive(SessionDiagnostic)]\n    |          ^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n@@ -417,7 +387,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 46 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}