{"sha": "c6ed447221303be59381f91852e0fcd50f60be06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZWQ0NDcyMjEzMDNiZTU5MzgxZjkxODUyZTBmY2Q1MGY2MGJlMDY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T21:37:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T22:32:43Z"}, "message": "rustdoc: Begin support for structs", "tree": {"sha": "7646e356ebd3efef98e755fcec6f713e7a93c204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7646e356ebd3efef98e755fcec6f713e7a93c204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6ed447221303be59381f91852e0fcd50f60be06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed447221303be59381f91852e0fcd50f60be06", "html_url": "https://github.com/rust-lang/rust/commit/c6ed447221303be59381f91852e0fcd50f60be06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6ed447221303be59381f91852e0fcd50f60be06/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd4365f15b8518e2ccaad53d8d8c5be909189512", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4365f15b8518e2ccaad53d8d8c5be909189512", "html_url": "https://github.com/rust-lang/rust/commit/bd4365f15b8518e2ccaad53d8d8c5be909189512"}], "stats": {"total": 179, "additions": 159, "deletions": 20}, "files": [{"sha": "5d758fd061249a2d97fec5f522879f558ad7aabd", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -98,7 +98,8 @@ enum ItemTag {\n     EnumTag(EnumDoc),\n     TraitTag(TraitDoc),\n     ImplTag(ImplDoc),\n-    TyTag(TyDoc)\n+    TyTag(TyDoc),\n+    StructTag(StructDoc)\n }\n \n impl ItemTag : cmp::Eq {\n@@ -152,6 +153,12 @@ impl ItemTag : cmp::Eq {\n                     _ => false\n                 }\n             }\n+            StructTag(e0a) => {\n+                match other {\n+                    StructTag(e0b) => e0a == e0b,\n+                    _ => false\n+                }\n+            }\n         }\n     }\n     pure fn ne(&&other: ItemTag) -> bool { !self.eq(other) }\n@@ -315,6 +322,21 @@ impl ImplDoc : cmp::Eq {\n \n type TyDoc = SimpleItemDoc;\n \n+type StructDoc = {\n+    item: ItemDoc,\n+    fields: ~[~str],\n+    sig: Option<~str>\n+};\n+\n+impl StructDoc : cmp::Eq {\n+    pure fn eq(&&other: StructDoc) -> bool {\n+        return self.item == other.item\n+            && self.fields == other.fields\n+            && self.sig == other.sig;\n+    }\n+    pure fn ne(&&other: StructDoc) -> bool { !self.eq(other) }\n+}\n+\n type Index = {\n     entries: ~[IndexEntry]\n };\n@@ -442,6 +464,15 @@ impl ModDoc {\n             }\n         }\n     }\n+\n+    fn structs() -> ~[StructDoc] {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n+                StructTag(StructDoc) => Some(StructDoc),\n+                _ => None\n+            }\n+        }\n+    }\n }\n \n trait PageUtils {\n@@ -544,7 +575,8 @@ impl ItemTag: Item {\n           doc::EnumTag(doc) => doc.item,\n           doc::TraitTag(doc) => doc.item,\n           doc::ImplTag(doc) => doc.item,\n-          doc::TyTag(doc) => doc.item\n+          doc::TyTag(doc) => doc.item,\n+          doc::StructTag(doc) => doc.item\n         }\n     }\n }\n@@ -573,6 +605,10 @@ impl ImplDoc: Item {\n     pure fn item() -> ItemDoc { self.item }\n }\n \n+impl StructDoc: Item {\n+    pure fn item() -> ItemDoc { self.item }\n+}\n+\n trait ItemUtils {\n     pure fn id() -> AstId;\n     pure fn name() -> ~str;"}, {"sha": "c35f59864f6ded6190803b5706a360369a37e85a", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -119,6 +119,11 @@ fn moddoc_from_mod(\n                     tydoc_from_ty(ItemDoc)\n                 ))\n               }\n+              ast::item_class(def, _) => {\n+                Some(doc::StructTag(\n+                    structdoc_from_struct(ItemDoc, def)\n+                ))\n+              }\n               _ => None\n             }\n         },\n@@ -293,6 +298,34 @@ fn should_extract_tys() {\n     assert doc.cratemod().types()[0].name() == ~\"a\";\n }\n \n+fn structdoc_from_struct(\n+    itemdoc: doc::ItemDoc,\n+    struct_def: @ast::struct_def\n+) -> doc::StructDoc {\n+    {\n+        item: itemdoc,\n+        fields: do struct_def.fields.map |field| {\n+            match field.node.kind {\n+                ast::named_field(ident, _, _) => to_str(ident),\n+                ast::unnamed_field => fail ~\"what is an unnamed struct field?\"\n+            }\n+        },\n+        sig: None\n+    }\n+}\n+\n+#[test]\n+fn should_extract_structs() {\n+    let doc = test::mk_doc(~\"struct Foo { field: () }\");\n+    assert doc.cratemod().structs()[0].name() == ~\"Foo\";\n+}\n+\n+#[test]\n+fn should_extract_struct_fields() {\n+    let doc = test::mk_doc(~\"struct Foo { field: () }\");\n+    assert doc.cratemod().structs()[0].fields[0] == ~\"field\";\n+}\n+\n #[cfg(test)]\n mod test {\n "}, {"sha": "42347b9a34b3415ee0c268928bcf498c8ebc62dd", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -11,6 +11,7 @@ export default_seq_fold_enum;\n export default_seq_fold_trait;\n export default_seq_fold_impl;\n export default_seq_fold_type;\n+export default_seq_fold_struct;\n export default_par_fold;\n export default_par_fold_mod;\n export default_par_fold_nmod;\n@@ -31,6 +32,8 @@ type FoldEnum<T> = fn~(fold: Fold<T>, doc: doc::EnumDoc) -> doc::EnumDoc;\n type FoldTrait<T> = fn~(fold: Fold<T>, doc: doc::TraitDoc) -> doc::TraitDoc;\n type FoldImpl<T> = fn~(fold: Fold<T>, doc: doc::ImplDoc) -> doc::ImplDoc;\n type FoldType<T> = fn~(fold: Fold<T>, doc: doc::TyDoc) -> doc::TyDoc;\n+type FoldStruct<T> = fn~(fold: Fold<T>,\n+                         doc: doc::StructDoc) -> doc::StructDoc;\n \n type Fold_<T> = {\n     ctxt: T,\n@@ -44,7 +47,8 @@ type Fold_<T> = {\n     fold_enum: FoldEnum<T>,\n     fold_trait: FoldTrait<T>,\n     fold_impl: FoldImpl<T>,\n-    fold_type: FoldType<T>\n+    fold_type: FoldType<T>,\n+    fold_struct: FoldStruct<T>\n };\n \n \n@@ -62,7 +66,8 @@ fn mk_fold<T:Copy>(\n     +fold_enum: FoldEnum<T>,\n     +fold_trait: FoldTrait<T>,\n     +fold_impl: FoldImpl<T>,\n-    +fold_type: FoldType<T>\n+    +fold_type: FoldType<T>,\n+    +fold_struct: FoldStruct<T>\n ) -> Fold<T> {\n     Fold({\n         ctxt: ctxt,\n@@ -76,7 +81,8 @@ fn mk_fold<T:Copy>(\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n-        fold_type: fold_type\n+        fold_type: fold_type,\n+        fold_struct: fold_struct,\n     })\n }\n \n@@ -93,7 +99,8 @@ fn default_any_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n-        |f, d| default_seq_fold_type(f, d)\n+        |f, d| default_seq_fold_type(f, d),\n+        |f, d| default_seq_fold_struct(f, d)\n     )\n }\n \n@@ -110,7 +117,8 @@ fn default_seq_fold<T:Copy>(ctxt: T) -> Fold<T> {\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n-        |f, d| default_seq_fold_type(f, d)\n+        |f, d| default_seq_fold_type(f, d),\n+        |f, d| default_seq_fold_struct(f, d)\n     )\n }\n \n@@ -127,7 +135,8 @@ fn default_par_fold<T:Send Copy>(ctxt: T) -> Fold<T> {\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n-        |f, d| default_seq_fold_type(f, d)\n+        |f, d| default_seq_fold_type(f, d),\n+        |f, d| default_seq_fold_struct(f, d)\n     )\n }\n \n@@ -267,6 +276,9 @@ fn fold_ItemTag<T>(fold: Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n       doc::TyTag(TyDoc) => {\n         doc::TyTag(fold.fold_type(fold, TyDoc))\n       }\n+      doc::StructTag(StructDoc) => {\n+        doc::StructTag(fold.fold_struct(fold, StructDoc))\n+      }\n     }\n }\n \n@@ -330,6 +342,16 @@ fn default_seq_fold_type<T>(\n     }\n }\n \n+fn default_seq_fold_struct<T>(\n+    fold: Fold<T>,\n+    doc: doc::StructDoc\n+) -> doc::StructDoc {\n+    {\n+        item: fold.fold_item(fold, doc.item),\n+        .. doc\n+    }\n+}\n+\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = ~\"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "c53d7e4c89c623dc06644350a8582b7efb7c975b", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -210,6 +210,9 @@ fn header_kind(doc: doc::ItemTag) -> ~str {\n       doc::TyTag(_) => {\n         ~\"Type\"\n       }\n+      doc::StructTag(_) => {\n+        ~\"Struct\"\n+      }\n     }\n }\n \n@@ -370,7 +373,8 @@ fn write_item_(ctxt: Ctxt, doc: doc::ItemTag, write_header: bool) {\n       doc::EnumTag(EnumDoc) => write_enum(ctxt, EnumDoc),\n       doc::TraitTag(TraitDoc) => write_trait(ctxt, TraitDoc),\n       doc::ImplTag(ImplDoc) => write_impl(ctxt, ImplDoc),\n-      doc::TyTag(TyDoc) => write_type(ctxt, TyDoc)\n+      doc::TyTag(TyDoc) => write_type(ctxt, TyDoc),\n+      doc::StructTag(StructDoc) => write_struct(ctxt, StructDoc),\n     }\n }\n \n@@ -775,6 +779,20 @@ fn should_write_type_signature() {\n     assert str::contains(markdown, ~\"\\n\\n    type t = int\\n\\n\");\n }\n \n+fn write_struct(\n+    ctxt: Ctxt,\n+    doc: doc::StructDoc\n+) {\n+    write_sig(ctxt, doc.sig);\n+    write_common(ctxt, doc.desc(), doc.sections());\n+}\n+\n+#[test]\n+fn should_write_struct_header() {\n+    let markdown = test::render(~\"struct S { field: () }\");\n+    assert str::contains(markdown, ~\"## Struct `S`\\n\\n\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn render(source: ~str) -> ~str {"}, {"sha": "70ad14e1efd506996223f65631c8defaacdcf132", "filename": "src/rustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_item_type_pass.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -11,11 +11,12 @@ fn mk_pass() -> Pass {\n               doc::ConstTag(_) => 0,\n               doc::TyTag(_) => 1,\n               doc::EnumTag(_) => 2,\n-              doc::TraitTag(_) => 3,\n-              doc::ImplTag(_) => 4,\n-              doc::FnTag(_) => 5,\n-              doc::ModTag(_) => 6,\n-              doc::NmodTag(_) => 7\n+              doc::StructTag(_) => 3,\n+              doc::TraitTag(_) => 4,\n+              doc::ImplTag(_) => 5,\n+              doc::FnTag(_) => 6,\n+              doc::ModTag(_) => 7,\n+              doc::NmodTag(_) => 8\n             }\n         }\n \n@@ -35,17 +36,19 @@ fn test() {\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\\n          impl int { fn a() { } } \\\n-         type itype = int;\";\n+         type itype = int; \\\n+         struct istruct { f: () }\";\n     do astsrv::from_str(source) |srv| {\n         let doc = extract::from_srv(srv, ~\"\");\n         let doc = mk_pass().f(srv, doc);\n         assert doc.cratemod().items[0].name() == ~\"iconst\";\n         assert doc.cratemod().items[1].name() == ~\"itype\";\n         assert doc.cratemod().items[2].name() == ~\"ienum\";\n-        assert doc.cratemod().items[3].name() == ~\"itrait\";\n-        assert doc.cratemod().items[4].name() == ~\"__extensions__\";\n-        assert doc.cratemod().items[5].name() == ~\"ifn\";\n-        assert doc.cratemod().items[6].name() == ~\"imod\";\n-        assert doc.cratemod().items[7].name() == ~\"inmod\";\n+        assert doc.cratemod().items[3].name() == ~\"istruct\";\n+        assert doc.cratemod().items[4].name() == ~\"itrait\";\n+        assert doc.cratemod().items[5].name() == ~\"__extensions__\";\n+        assert doc.cratemod().items[6].name() == ~\"ifn\";\n+        assert doc.cratemod().items[7].name() == ~\"imod\";\n+        assert doc.cratemod().items[8].name() == ~\"inmod\";\n     }\n }"}, {"sha": "64c99e7abd273a94085af4c42333ad2961bab182", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6ed447221303be59381f91852e0fcd50f60be06/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=c6ed447221303be59381f91852e0fcd50f60be06", "patch": "@@ -27,6 +27,7 @@ fn run(\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n         fold_type: fold_type,\n+        fold_struct: fold_struct,\n         .. *fold::default_any_fold(srv)\n     });\n     fold.fold_doc(fold, doc)\n@@ -322,6 +323,32 @@ fn should_add_type_signatures() {\n     assert doc.cratemod().types()[0].sig == Some(~\"type t<T> = int\");\n }\n \n+fn fold_struct(\n+    fold: fold::Fold<astsrv::Srv>,\n+    doc: doc::StructDoc\n+) -> doc::StructDoc {\n+    let srv = fold.ctxt;\n+\n+    {\n+        sig: do astsrv::exec(srv) |ctxt| {\n+            match ctxt.ast_map.get(doc.id()) {\n+                ast_map::node_item(item, _) => {\n+                    Some(pprust::item_to_str(item,\n+                                             extract::interner()))\n+                }\n+                _ => fail ~\"not an item\"\n+            }\n+        },\n+        .. doc\n+    }\n+}\n+\n+#[test]\n+fn should_add_struct_defs() {\n+    let doc = test::mk_doc(~\"struct S { field: () }\");\n+    assert doc.cratemod().structs()[0].sig.get().contains(\"struct S {\");\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(source: ~str) -> doc::Doc {"}]}