{"sha": "9b91bef78b15dfecc5144b0575f40a2d84ea795a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliOTFiZWY3OGIxNWRmZWNjNTE0NGIwNTc1ZjQwYTJkODRlYTc5NWE=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-26T17:30:44Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-10-03T11:24:59Z"}, "message": "generate ClosureSubsts from SubstsRef", "tree": {"sha": "688ca27861a17a0ec4c8418383bc6cdcabfe356c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/688ca27861a17a0ec4c8418383bc6cdcabfe356c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b91bef78b15dfecc5144b0575f40a2d84ea795a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b91bef78b15dfecc5144b0575f40a2d84ea795a", "html_url": "https://github.com/rust-lang/rust/commit/9b91bef78b15dfecc5144b0575f40a2d84ea795a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b91bef78b15dfecc5144b0575f40a2d84ea795a/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d", "html_url": "https://github.com/rust-lang/rust/commit/1f8e1d8aea495ec22fa33cefcfacbcb6ba3bad1d"}], "stats": {"total": 355, "additions": 139, "deletions": 216}, "files": [{"sha": "b89731273f7e22465ef00dc17e361a563d3970b8", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let ty_msg = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = ty::ClosureSubsts::from_ref(substs).closure_sig(*def_id, self.tcx);\n+                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n                 format!(\" for the closure `fn({}) -> {}`\", args, ret)\n@@ -255,7 +255,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let suffix = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.closure_sig(*def_id, self.tcx);\n+                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n                 let ret = fn_sig.output().skip_binder().to_string();\n \n                 if let Some(ExprKind::Closure(_, decl, body_id, ..)) = local_visitor.found_closure {"}, {"sha": "c918df18b2d869fbd0ede94aa557793a5e537c39", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1481,9 +1481,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn closure_kind(\n         &self,\n         closure_def_id: DefId,\n-        closure_substs: ty::ClosureSubsts<'tcx>,\n+        closure_substs: SubstsRef<'tcx>,\n     ) -> Option<ty::ClosureKind> {\n-        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self.tcx);\n         let closure_kind_ty = self.shallow_resolve(closure_kind_ty);\n         closure_kind_ty.to_opt_closure_kind()\n     }\n@@ -1495,9 +1495,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn closure_sig(\n         &self,\n         def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyFnSig<'tcx> {\n-        let closure_sig_ty = substs.closure_sig_ty(def_id, self.tcx);\n+        let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n         let closure_sig_ty = self.shallow_resolve(closure_sig_ty);\n         closure_sig_ty.fn_sig(self.tcx)\n     }"}, {"sha": "e7205dd47a6172c657913b72673d90e1c34ca56c", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -722,11 +722,11 @@ where\n             ty::Closure(def_id, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                for upvar_ty in ty::ClosureSubsts::from_ref(substs).upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_closure().upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.closure_sig_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_closure().sig_ty(def_id, self.tcx).visit_with(self);\n             }\n \n             ty::Generator(def_id, ref substs, _) => {"}, {"sha": "355bf97e6ed6920ca5a02d79983f282b7bbe767e", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -740,17 +740,18 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n         let ty = self.node_ty(fn_hir_id)?;\n         let kind = match ty.kind {\n             ty::Generator(..) => ty::ClosureKind::FnOnce,\n-            ty::Closure(closure_def_id, closure_substs) => {\n+            ty::Closure(closure_def_id, substs) => {\n                 match self.infcx {\n                     // During upvar inference we may not know the\n                     // closure kind, just use the LATTICE_BOTTOM value.\n                     Some(infcx) =>\n-                        infcx.closure_kind(closure_def_id,\n-                            ty::ClosureSubsts::from_ref(closure_substs))\n-                             .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n+                        infcx.closure_kind(\n+                            closure_def_id,\n+                            substs\n+                        ).unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>\n-                        closure_substs.closure_kind(closure_def_id, self.tcx),\n+                        substs.as_closure().kind(closure_def_id, self.tcx),\n                 }\n             }\n             _ => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", ty),"}, {"sha": "74a042d606ec9da0af7499d2336c4c8a1e6ca634", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -15,7 +15,7 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{\n-    self, AdtDef, CanonicalUserTypeAnnotations, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt,\n+    self, AdtDef, CanonicalUserTypeAnnotations, GeneratorSubsts, Region, Ty, TyCtxt,\n     UserTypeAnnotationIndex,\n };\n \n@@ -2188,7 +2188,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field index would identity the field `c`\n     Adt(&'tcx AdtDef, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n \n-    Closure(DefId, ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n     Generator(DefId, GeneratorSubsts<'tcx>, hir::GeneratorMovability),\n }\n "}, {"sha": "26f718e858da8ea85b2c52bb935a280692b6ca91", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> Rvalue<'tcx> {\n                         tcx.type_of(def.did).subst(tcx, substs)\n                     }\n                     AggregateKind::Closure(did, substs) => {\n-                        tcx.mk_closure(did, &substs.substs)\n+                        tcx.mk_closure(did, substs)\n                     }\n                     AggregateKind::Generator(did, substs, movability) => {\n                         tcx.mk_generator(did, substs, movability)"}, {"sha": "8e68952fc706f4371663147681ee7b577ace1d81", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1,5 +1,5 @@\n use crate::ty::subst::SubstsRef;\n-use crate::ty::{CanonicalUserTypeAnnotation, ClosureSubsts, GeneratorSubsts, Ty};\n+use crate::ty::{CanonicalUserTypeAnnotation, GeneratorSubsts, Ty};\n use crate::mir::*;\n use syntax_pos::Span;\n \n@@ -221,12 +221,6 @@ macro_rules! make_mir_visitor {\n                 self.super_substs(substs);\n             }\n \n-            fn visit_closure_substs(&mut self,\n-                                    substs: & $($mutability)? ClosureSubsts<'tcx>,\n-                                    _: Location) {\n-                self.super_closure_substs(substs);\n-            }\n-\n             fn visit_generator_substs(&mut self,\n                                       substs: & $($mutability)? GeneratorSubsts<'tcx>,\n                                     _: Location) {\n@@ -618,7 +612,7 @@ macro_rules! make_mir_visitor {\n                                 _,\n                                 closure_substs\n                             ) => {\n-                                self.visit_closure_substs(closure_substs, location);\n+                                self.visit_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(\n                                 _,\n@@ -838,10 +832,6 @@ macro_rules! make_mir_visitor {\n                                       _substs: & $($mutability)? GeneratorSubsts<'tcx>) {\n             }\n \n-            fn super_closure_substs(&mut self,\n-                                    _substs: & $($mutability)? ClosureSubsts<'tcx>) {\n-            }\n-\n             // Convenience methods\n \n             fn visit_location(&mut self, body: & $($mutability)? Body<'tcx>, location: Location) {"}, {"sha": "7f194c2fbbc0f1b6099d3d68aa1dd1108d73b44c", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -619,7 +619,7 @@ pub struct VtableGeneratorData<'tcx, N> {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub struct VtableClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n-    pub substs: ty::ClosureSubsts<'tcx>,\n+    pub substs: SubstsRef<'tcx>,\n     /// Nested obligations. This can be non-empty if the closure\n     /// signature contains associated types.\n     pub nested: Vec<N>"}, {"sha": "a7bb29c699e0e59c7a50589806ef2577adba53b9", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1334,7 +1334,8 @@ fn confirm_closure_candidate<'cx, 'tcx>(\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n     let infcx = selcx.infcx();\n-    let closure_sig_ty = vtable.substs.closure_sig_ty(vtable.closure_def_id, tcx);\n+    let closure_sig_ty = vtable.substs\n+        .as_closure().sig_ty(vtable.closure_def_id, tcx);\n     let closure_sig = infcx.shallow_resolve(closure_sig_ty).fn_sig(tcx);\n     let Normalized {\n         value: closure_sig,"}, {"sha": "eaf5971e4592f32044765236d47701f36a4e49a6", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -213,6 +213,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         // check if *any* of those are trivial.\n         ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n         ty::Closure(def_id, ref substs) => substs\n+            .as_closure()\n             .upvar_tys(def_id, tcx)\n             .all(|t| trivial_dropck_outlives(tcx, t)),\n "}, {"sha": "9434412b020e9325a587af5fee987300a81ce084", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -2051,8 +2051,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     \"assemble_unboxed_candidates: kind={:?} obligation={:?}\",\n                     kind, obligation\n                 );\n-                match self.infcx.closure_kind(closure_def_id,\n-                    ty::ClosureSubsts::from_ref(closure_substs)) {\n+                match self.infcx.closure_kind(\n+                    closure_def_id,\n+                    closure_substs\n+                ) {\n                     Some(closure_kind) => {\n                         debug!(\n                             \"assemble_unboxed_candidates: closure_kind = {:?}\",\n@@ -2670,7 +2672,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Closure(def_id, substs) => {\n                 // (*) binder moved here\n                 Where(ty::Binder::bind(\n-                    substs.upvar_tys(def_id, self.tcx()).collect(),\n+                    substs.as_closure().upvar_tys(def_id, self.tcx()).collect(),\n                 ))\n             }\n \n@@ -2754,7 +2756,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 tys.iter().map(|k| k.expect_ty()).collect()\n             }\n \n-            ty::Closure(def_id, ref substs) => substs.upvar_tys(def_id, self.tcx()).collect(),\n+            ty::Closure(def_id, ref substs) => substs.as_closure()\n+                .upvar_tys(def_id, self.tcx())\n+                .collect(),\n \n             ty::Generator(def_id, ref substs, _) => {\n                 let witness = substs.witness(def_id, self.tcx());\n@@ -3376,14 +3380,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::Predicate::ClosureKind(closure_def_id,\n-                    ty::ClosureSubsts::from_ref(substs.clone()), kind),\n+                ty::Predicate::ClosureKind(\n+                    closure_def_id,\n+                    substs,\n+                    kind\n+                ),\n             ));\n         }\n \n         Ok(VtableClosureData {\n             closure_def_id,\n-            substs: ty::ClosureSubsts::from_ref(substs),\n+            substs: substs,\n             nested: obligations,\n         })\n     }\n@@ -3878,8 +3885,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n             obligation, closure_def_id, substs,\n         );\n-        let closure_type = self.infcx.closure_sig(closure_def_id,\n-            ty::ClosureSubsts::from_ref(substs));\n+        let closure_type = self.infcx.closure_sig(closure_def_id, substs);\n \n         debug!(\n             \"closure_trait_ref_unnormalized: closure_type = {:?}\","}, {"sha": "34f806b15c0c6c32defa00f6855279fbab99eb36", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> Instance<'tcx> {\n             // Shims currently have type FnPtr. Not sure this should remain.\n             ty::FnPtr(_) => ty.fn_sig(tcx),\n             ty::Closure(def_id, substs) => {\n-                let sig = substs.closure_sig(def_id, tcx);\n+                let sig = substs.as_closure().sig(def_id, tcx);\n \n                 let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 sig.map_bound(|sig| tcx.mk_fn_sig(\n@@ -315,14 +315,14 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_closure(\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: ty::SubstsRef<'tcx>,\n         requested_kind: ty::ClosureKind,\n     ) -> Instance<'tcx> {\n-        let actual_kind = substs.closure_kind(def_id, tcx);\n+        let actual_kind = substs.as_closure().kind(def_id, tcx);\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs.substs),\n-            _ => Instance::new(def_id, substs.substs)\n+            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n+            _ => Instance::new(def_id, substs)\n         }\n     }\n \n@@ -348,7 +348,7 @@ impl<'tcx> Instance<'tcx> {\n \n         let self_ty = tcx.mk_closure(closure_did, substs);\n \n-        let sig = substs.closure_sig(closure_did, tcx);\n+        let sig = substs.as_closure().sig(closure_did, tcx);\n         let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);"}, {"sha": "d142aaeaf833ed19c53ebef8279c9b37fce66a16", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -674,7 +674,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, &substs)?,\n \n             ty::Closure(def_id, ref substs) => {\n-                let tys = substs.upvar_tys(def_id, tcx);\n+                let tys = substs.as_closure().upvar_tys(def_id, tcx);\n                 univariant(&tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n                     &ReprOptions::default(),\n                     StructKind::AlwaysSized)?\n@@ -2147,7 +2147,7 @@ where\n \n             // Tuples, generators and closures.\n             ty::Closure(def_id, ref substs) => {\n-                substs.upvar_tys(def_id, tcx).nth(i).unwrap()\n+                substs.as_closure().upvar_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n             ty::Generator(def_id, ref substs, _) => {"}, {"sha": "20c18c14ead458626d81a8b5efcb365ef3a52bd0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1110,7 +1110,7 @@ pub enum Predicate<'tcx> {\n     /// No direct syntax. May be thought of as `where T: FnFoo<...>`\n     /// for some substitutions `...` and `T` being a closure type.\n     /// Satisfied (or refuted) once we know the closure's kind.\n-    ClosureKind(DefId, ClosureSubsts<'tcx>, ClosureKind),\n+    ClosureKind(DefId, SubstsRef<'tcx>, ClosureKind),\n \n     /// `T1 <: T2`\n     Subtype(PolySubtypePredicate<'tcx>),\n@@ -1457,7 +1457,7 @@ impl<'tcx> Predicate<'tcx> {\n                 WalkTysIter::None\n             }\n             ty::Predicate::ClosureKind(_closure_def_id, closure_substs, _kind) => {\n-                WalkTysIter::Types(closure_substs.substs.types())\n+                WalkTysIter::Types(closure_substs.types())\n             }\n             ty::Predicate::ConstEvaluatable(_, substs) => {\n                 WalkTysIter::Types(substs.types())"}, {"sha": "3ea767d5115984e067baf243e82c2d2bb95abb25", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // projection).\n         match ty.kind {\n             ty::Closure(def_id, ref substs) => {\n-                for upvar_ty in substs.upvar_tys(def_id, *self) {\n+                for upvar_ty in substs.as_closure().upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);\n                 }\n             }"}, {"sha": "21c018d9ee6de5a3e2719f52ceacd8221be5beda", "filename": "src/librustc/ty/print/obsolete.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -154,13 +154,8 @@ impl DefPathBasedNames<'tcx> {\n                     self.push_type_name(sig.output(), output, debug);\n                 }\n             }\n-            ty::Generator(def_id, GeneratorSubsts { ref substs }, _) => {\n-                self.push_def_path(def_id, output);\n-                let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n-                let substs = substs.truncate_to(self.tcx, generics);\n-                self.push_generic_params(substs, iter::empty(), output, debug);\n-            }\n-            ty::Closure(def_id, substs) => {\n+            ty::Generator(def_id, GeneratorSubsts { substs }, _)\n+            | ty::Closure(def_id, substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n                 let substs = substs.truncate_to(self.tcx, generics);"}, {"sha": "ad4be788dae4e49cdde02124c17b5381d8b9c7a0", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -649,7 +649,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n-                let upvar_tys = substs.upvar_tys(did, self.tcx());\n+                let upvar_tys = substs.as_closure().upvar_tys(did, self.tcx());\n                 p!(write(\"[closure\"));\n \n                 // FIXME(eddyb) should use `def_span`.\n@@ -689,8 +689,8 @@ pub trait PrettyPrinter<'tcx>:\n                 if self.tcx().sess.verbose() {\n                     p!(write(\n                         \" closure_kind_ty={:?} closure_sig_ty={:?}\",\n-                        substs.closure_kind_ty(did, self.tcx()),\n-                        substs.closure_sig_ty(did, self.tcx())\n+                        substs.as_closure().kind(did, self.tcx()),\n+                        substs.as_closure().sig_ty(did, self.tcx())\n                     ));\n                 }\n "}, {"sha": "c3c48c4d876d36be2a9d5e22e5bf71448a03f46c", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -304,8 +304,8 @@ static_assert_size!(TyKind<'_>, 24);\n /// type parameters is similar, but the role of CK and CS are\n /// different. CK represents the \"yield type\" and CS represents the\n /// \"return type\" of the generator.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n-         Debug, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n+         RustcEncodable, RustcDecodable, HashStable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with the types of the upvars.\n@@ -317,18 +317,13 @@ pub struct ClosureSubsts<'tcx> {\n \n /// Struct returned by `split()`. Note that these are subslices of the\n /// parent slice and not canonical substs themselves.\n-pub(crate) struct SplitClosureSubsts<'tcx> {\n-    pub(crate) closure_kind_ty: Ty<'tcx>,\n-    pub(crate) closure_sig_ty: Ty<'tcx>,\n-    pub(crate) upvar_kinds: &'tcx [GenericArg<'tcx>],\n+struct SplitClosureSubsts<'tcx> {\n+    closure_kind_ty: Ty<'tcx>,\n+    closure_sig_ty: Ty<'tcx>,\n+    upvar_kinds: &'tcx [GenericArg<'tcx>],\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {\n-    // FIXME(csmoe): remove this method once the migration is done.\n-    pub fn from_ref(substs: SubstsRef<'tcx>) -> Self {\n-        Self { substs }\n-    }\n-\n     /// Divides the closure substs into their respective\n     /// components. Single source of truth with respect to the\n     /// ordering.\n@@ -361,15 +356,15 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// Returns the closure kind for this closure; may return a type\n     /// variable during inference. To get the closure kind during\n     /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n \n     /// Returns the type representing the closure signature for this\n     /// closure; may contain type variables during inference. To get\n     /// the closure signature during inference, use\n     /// `infcx.fn_sig(def_id)`.\n-    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+    pub fn sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_sig_ty\n     }\n \n@@ -378,7 +373,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n+    pub fn kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n         self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n     }\n \n@@ -387,8 +382,8 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_sig()`.\n-    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.closure_sig_ty(def_id, tcx);\n+    pub fn sig(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let ty = self.sig_ty(def_id, tcx);\n         match ty.kind {\n             ty::FnPtr(sig) => sig,\n             _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n@@ -573,7 +568,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n \n #[derive(Debug, Copy, Clone)]\n pub enum UpvarSubsts<'tcx> {\n-    Closure(ClosureSubsts<'tcx>),\n+    Closure(SubstsRef<'tcx>),\n     Generator(GeneratorSubsts<'tcx>),\n }\n \n@@ -582,10 +577,10 @@ impl<'tcx> UpvarSubsts<'tcx> {\n     pub fn upvar_tys(\n         self,\n         def_id: DefId,\n-        tcx: TyCtxt<'_>,\n+        tcx: TyCtxt<'tcx>,\n     ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         let upvar_kinds = match self {\n-            UpvarSubsts::Closure(substs) => substs.split(def_id, tcx).upvar_kinds,\n+            UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n             UpvarSubsts::Generator(substs) => substs.split(def_id, tcx).upvar_kinds,\n         };\n         upvar_kinds.iter().map(|t| {"}, {"sha": "537192b0a2e58dccf61c50aaa0a09a033b97ac46", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 11, "deletions": 67, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -5,7 +5,7 @@ use crate::infer::canonical::Canonical;\n use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n-use crate::ty::sty::SplitClosureSubsts;\n+use crate::ty::sty::ClosureSubsts;\n \n use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -184,6 +184,16 @@ pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;\n pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n \n impl<'a, 'tcx> InternalSubsts<'tcx> {\n+    /// Interpret these substitutions as the substitutions of a closure type.\n+    /// Closure substitutions have a particular structure controlled by the\n+    /// compiler that encodes information like the signature and closure kind;\n+    /// see `ty::ClosureSubsts` struct for more comments.\n+    pub fn as_closure(&'a self) -> ClosureSubsts<'a> {\n+        ClosureSubsts {\n+            substs: self,\n+        }\n+    }\n+\n     /// Creates a `InternalSubsts` that maps each generic parameter to itself.\n     pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {\n         Self::for_item(tcx, def_id, |param, _| {\n@@ -380,72 +390,6 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {\n         tcx.mk_substs(self.iter().take(generics.count()).cloned())\n     }\n-\n-    /// Divides the closure substs into their respective\n-    /// components. Single source of truth with respect to the\n-    /// ordering.\n-    fn split(&self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitClosureSubsts<'_> {\n-        let generics = tcx.generics_of(def_id);\n-        let parent_len = generics.parent_count;\n-        SplitClosureSubsts {\n-            closure_kind_ty: self.type_at(parent_len),\n-            closure_sig_ty: self.type_at(parent_len + 1),\n-            upvar_kinds: &self[parent_len + 2..],\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn upvar_tys(\n-        &'a self,\n-        def_id: DefId,\n-        tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'a>> + 'a {\n-        let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n-        upvar_kinds.iter().map(|t| {\n-            if let GenericArgKind::Type(ty) = t.unpack() {\n-                ty\n-            } else {\n-                bug!(\"upvar should be type\")\n-            }\n-        })\n-    }\n-\n-    /// Returns the closure kind for this closure; may return a type\n-    /// variable during inference. To get the closure kind during\n-    /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn closure_kind_ty(&'a self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'a> {\n-        self.split(def_id, tcx).closure_kind_ty\n-    }\n-\n-    /// Returns the type representing the closure signature for this\n-    /// closure; may contain type variables during inference. To get\n-    /// the closure signature during inference, use\n-    /// `infcx.fn_sig(def_id)`.\n-    pub fn closure_sig_ty(&'a self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'a> {\n-        self.split(def_id, tcx).closure_sig_ty\n-    }\n-\n-    /// Returns the closure kind for this closure; only usable outside\n-    /// of an inference context, because in that context we know that\n-    /// there are no type variables.\n-    ///\n-    /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn closure_kind(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n-        self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n-    }\n-\n-    /// Extracts the signature from the closure; only usable outside\n-    /// of an inference context, because in that context we know that\n-    /// there are no type variables.\n-    ///\n-    /// If you have an inference context, use `infcx.closure_sig()`.\n-    pub fn closure_sig(&'a self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'a> {\n-        let ty = self.closure_sig_ty(def_id, tcx);\n-        match ty.kind {\n-            ty::FnPtr(sig) => sig,\n-            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n-        }\n-    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {"}, {"sha": "d0e95a18c59fcb046656a17cbe36d376b25530a0", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -647,7 +647,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n         let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-        let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self);\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {\n             ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),\n@@ -1108,7 +1108,9 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n         // Structural recursion.\n         ty::Array(ty, _) | ty::Slice(ty) => needs_drop(ty),\n \n-        ty::Closure(def_id, ref substs) => substs.upvar_tys(def_id, tcx).any(needs_drop),\n+        ty::Closure(def_id, ref substs) => {\n+            substs.as_closure().upvar_tys(def_id, tcx).any(needs_drop)\n+        }\n \n         // Pessimistically assume that all generators will require destructors\n         // as we don't know if a destructor is a noop or not until after the MIR"}, {"sha": "ecb075e30b14d11508499b0196fd5b43764071fe", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -347,7 +347,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // anyway, except via auto trait matching (which\n                     // only inspects the upvar types).\n                     subtys.skip_current_subtree(); // subtree handled by compute_projection\n-                    for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n+                    for upvar_ty in substs.as_closure().upvar_tys(def_id, self.infcx.tcx) {\n                         self.compute(upvar_ty);\n                     }\n                 }"}, {"sha": "e69f4b6aca19a9e9d45b596e44966fe5dc25858b", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -6,7 +6,7 @@ use super::utils::{debug_context, DIB, span_start,\n                    get_namespace_for_item, create_DIArray, is_node_local_to_unit};\n use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n-use super::{CrateDebugContext};\n+use super::CrateDebugContext;\n use crate::abi;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n@@ -682,7 +682,7 @@ pub fn type_metadata(\n \n         }\n         ty::Closure(def_id, substs) => {\n-            let upvar_tys : Vec<_> = substs.upvar_tys(def_id, cx.tcx).collect();\n+            let upvar_tys : Vec<_> = substs.as_closure().upvar_tys(def_id, cx.tcx).collect();\n             let containing_scope = get_namespace_for_item(cx, def_id);\n             prepare_tuple_metadata(cx,\n                                    t,"}, {"sha": "378bbd0cc385649741ef88d47c0eac6803ae2dc0", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -616,7 +616,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n             let (def_id, upvar_substs) = match closure_layout.ty.kind {\n                 ty::Closure(def_id, substs) => (def_id,\n-                    UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs))),\n+                    UpvarSubsts::Closure(substs)),\n                 ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n                 _ => bug!(\"upvar debuginfo with non-closure arg0 type `{}`\", closure_layout.ty)\n             };"}, {"sha": "6ffa561f3fecf456627d8b29474e15cd26c45d33", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -201,8 +201,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         match operand.layout.ty.kind {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = Instance::resolve_closure(\n-                                    bx.cx().tcx(), def_id,\n-                                    rustc::ty::ClosureSubsts::from_ref(substs),\n+                                    bx.cx().tcx(),\n+                                    def_id,\n+                                    substs,\n                                     ty::ClosureKind::FnOnce);\n                                 OperandValue::Immediate(bx.cx().get_fn(instance))\n                             }"}, {"sha": "598f7dcf17d313d66bdd412c3da7c27f16466088", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1437,7 +1437,7 @@ impl EncodeContext<'tcx> {\n             }\n \n             ty::Closure(def_id, substs) => {\n-                let sig = substs.closure_sig(def_id, self.tcx);\n+                let sig = substs.as_closure().sig(def_id, self.tcx);\n                 let data = ClosureData { sig: self.lazy(sig) };\n                 EntryKind::Closure(self.lazy(data))\n             }"}, {"sha": "431361fa5a87b09a984415d8ac764184a48aeebe", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -341,7 +341,8 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             ty::Closure(def_id, closure_substs)\n                 if def_id == self.mir_def_id && upvar_field.is_some()\n             => {\n-                let closure_kind_ty = closure_substs.closure_kind_ty(def_id, self.infcx.tcx);\n+                let closure_kind_ty = closure_substs\n+                    .as_closure().kind_ty(def_id, self.infcx.tcx);\n                 let closure_kind = closure_kind_ty.to_opt_closure_kind();\n                 let capture_description = match closure_kind {\n                     Some(ty::ClosureKind::Fn) => {"}, {"sha": "0e22ead62d1c0b747b6976e71b77ffab2ecd65b7", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n+use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'tcx>(\n@@ -98,13 +98,6 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n         self.super_generator_substs(substs);\n     }\n \n-    /// We sometimes have `closure_substs` within an rvalue, or within a\n-    /// call. Make them live at the location where they appear.\n-    fn visit_closure_substs(&mut self, substs: &ClosureSubsts<'tcx>, location: Location) {\n-        self.add_regular_live_constraint(*substs, location);\n-        self.super_closure_substs(substs);\n-    }\n-\n     fn visit_statement(\n         &mut self,\n         statement: &Statement<'tcx>,"}, {"sha": "a386d15c94284c7dcde5baadf6049a626628b360", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -800,7 +800,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n             if let ty::BoundRegion::BrEnv = free_region.bound_region {\n                 if let DefiningTy::Closure(def_id, substs) = self.universal_regions.defining_ty {\n-                    let closure_kind_ty = substs.closure_kind_ty(def_id, infcx.tcx);\n+                    let closure_kind_ty = substs.as_closure().kind_ty(def_id, infcx.tcx);\n                     return Some(ty::ClosureKind::FnMut) == closure_kind_ty.to_opt_closure_kind();\n                 }\n             }"}, {"sha": "6fb976e0d84b291f9a584454a5afb53ae0f33a92", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -300,7 +300,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         };\n                         let region_name = self.synthesize_region_name(renctx);\n \n-                        let closure_kind_ty = substs.closure_kind_ty(def_id, tcx);\n+                        let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n                             Some(ty::ClosureKind::Fn) => {\n                                 \"closure implements `Fn`, so references to captured variables \\"}, {"sha": "48c08da76982fbbd78012d6c3a95fd4cd82a26ab", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1,5 +1,5 @@\n use rustc::ty::subst::SubstsRef;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, Ty, TypeFoldable};\n+use rustc::ty::{self, GeneratorSubsts, Ty, TypeFoldable};\n use rustc::mir::{Location, Body, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n@@ -96,16 +96,4 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n \n         debug!(\"visit_generator_substs: substs={:?}\", substs);\n     }\n-\n-    fn visit_closure_substs(&mut self, substs: &mut ClosureSubsts<'tcx>, location: Location) {\n-        debug!(\n-            \"visit_closure_substs(substs={:?}, location={:?})\",\n-            substs,\n-            location\n-        );\n-\n-        *substs = self.renumber_regions(substs);\n-\n-        debug!(\"visit_closure_substs: substs={:?}\", substs);\n-    }\n }"}, {"sha": "698dd6d6522bf359068bd4bd78c866e5c8ebc3a9", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -763,10 +763,10 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 ty::Adt(adt_def, substs) if !adt_def.is_enum() =>\n                     (&adt_def.variants[VariantIdx::new(0)], substs),\n                 ty::Closure(def_id, substs) => {\n-                    return match substs.upvar_tys(def_id, tcx).nth(field.index()) {\n+                    return match substs.as_closure().upvar_tys(def_id, tcx).nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.upvar_tys(def_id, tcx).count(),\n+                            field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n                         }),\n                     }\n                 }\n@@ -1934,10 +1934,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             AggregateKind::Closure(def_id, substs) => {\n-                match substs.upvar_tys(def_id, tcx).nth(field_index) {\n+                match substs.as_closure().upvar_tys(def_id, tcx).nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.upvar_tys(def_id, tcx).count(),\n+                        field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n                     }),\n                 }\n             }\n@@ -2050,7 +2050,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(body, tcx).kind {\n                             ty::Closure(def_id, substs) => {\n-                                substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n+                                substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx)\n                             }\n                             _ => bug!(),\n                         };\n@@ -2522,7 +2522,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // desugaring. A closure gets desugared to a struct, and\n             // these extra requirements are basically like where\n             // clauses on the struct.\n-            AggregateKind::Closure(def_id, ty::ClosureSubsts { substs })\n+            AggregateKind::Closure(def_id, substs)\n             | AggregateKind::Generator(def_id, ty::GeneratorSubsts { substs }, _) => {\n                 self.prove_closure_bounds(tcx, *def_id, substs, location)\n             }"}, {"sha": "1fa19a2f9f08043669bf97760c72e44f7b1159e8", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -19,7 +19,7 @@ use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::middle::lang_items;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{InternalSubsts, SubstsRef, Subst};\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, GeneratorSubsts, RegionVid, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_errors::DiagnosticBuilder;\n@@ -85,7 +85,7 @@ pub struct UniversalRegions<'tcx> {\n pub enum DefiningTy<'tcx> {\n     /// The MIR is a closure. The signature is found via\n     /// `ClosureSubsts::closure_sig_ty`.\n-    Closure(DefId, ty::ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n \n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n@@ -109,7 +109,9 @@ impl<'tcx> DefiningTy<'tcx> {\n     /// match up with the upvar order in the HIR, typesystem, and MIR.\n     pub fn upvar_tys(self, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self {\n-            DefiningTy::Closure(def_id, substs) => Either::Left(substs.upvar_tys(def_id, tcx)),\n+            DefiningTy::Closure(def_id, substs) => Either::Left(\n+                substs.as_closure().upvar_tys(def_id, tcx)\n+            ),\n             DefiningTy::Generator(def_id, substs, _) => {\n                 Either::Right(Either::Left(substs.upvar_tys(def_id, tcx)))\n             }\n@@ -312,7 +314,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n                 err.note(&format!(\n                     \"defining type: {:?} with closure substs {:#?}\",\n                     def_id,\n-                    &substs.substs[..]\n+                    &substs[..]\n                 ));\n \n                 // FIXME: It'd be nice to print the late-bound regions\n@@ -509,8 +511,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     .replace_free_regions_with_nll_infer_vars(FR, &defining_ty);\n \n                 match defining_ty.kind {\n-                    ty::Closure(def_id, substs) => DefiningTy::Closure(def_id,\n-                        rustc::ty::ClosureSubsts::from_ref(substs)),\n+                    ty::Closure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n                     ty::Generator(def_id, substs, movability) => {\n                         DefiningTy::Generator(def_id, substs, movability)\n                     }\n@@ -547,7 +548,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, ClosureSubsts { ref substs })\n+            DefiningTy::Closure(_, ref substs)\n             | DefiningTy::Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n@@ -583,9 +584,9 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let closure_sig = substs.closure_sig_ty(def_id, tcx).fn_sig(tcx);\n+                let closure_sig = substs.as_closure().sig_ty(def_id, tcx).fn_sig(tcx);\n                 let inputs_and_output = closure_sig.inputs_and_output();\n-                let closure_ty = tcx.closure_env_ty(def_id, substs.substs).unwrap();\n+                let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 ty::Binder::fuse(\n                     closure_ty,\n                     inputs_and_output,"}, {"sha": "461cc063a475ba0b9f2961838c12a446f2d26fda", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -507,7 +507,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             let closure_ty = cx.tables().expr_ty(expr);\n             let (def_id, substs, movability) = match closure_ty.kind {\n                 ty::Closure(def_id, substs) => (def_id,\n-                    UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs)), None),\n+                    UpvarSubsts::Closure(substs), None),\n                 ty::Generator(def_id, substs, movability) => {\n                     (def_id, UpvarSubsts::Generator(substs), Some(movability))\n                 }\n@@ -1003,8 +1003,7 @@ fn convert_var(\n             let region = cx.tcx.mk_region(region);\n \n             let self_expr = if let ty::Closure(_, closure_substs) = closure_ty.kind {\n-                match cx.infcx.closure_kind(closure_def_id,\n-                    rustc::ty::ClosureSubsts::from_ref(closure_substs)).unwrap() {\n+                match cx.infcx.closure_kind(closure_def_id, closure_substs).unwrap() {\n                     ty::ClosureKind::Fn => {\n                         let ref_closure_ty = cx.tcx.mk_ref(region,\n                                                            ty::TypeAndMut {"}, {"sha": "d120412c901a692d3d3d8c8bf026ea27c73ce9c9", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -75,7 +75,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,\n-                            rustc::ty::ClosureSubsts::from_ref(substs),\n+                            substs,\n                             ty::ClosureKind::FnOnce,\n                         );\n                         let fn_ptr = self.memory.create_fn_alloc(FnVal::Instance(instance));"}, {"sha": "79403e3a7e85ab10dbd267f9438d0cd09978d0a3", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -582,7 +582,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                     ty::Closure(def_id, substs) => {\n                         let instance = Instance::resolve_closure(\n                             self.tcx, def_id,\n-                            rustc::ty::ClosureSubsts::from_ref(substs), ty::ClosureKind::FnOnce);\n+                            substs, ty::ClosureKind::FnOnce);\n                         if should_monomorphize_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance));\n                         }"}, {"sha": "28ff1e59d5b110a664e29eb73436ddcc91e3173e", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -320,7 +320,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n         ty::Closure(def_id, substs) => {\n             builder.tuple_like_shim(\n                 dest, src,\n-                substs.upvar_tys(def_id, tcx)\n+                substs.as_closure().upvar_tys(def_id, tcx)\n             )\n         }\n         ty::Tuple(..) => builder.tuple_like_shim(dest, src, self_ty.tuple_fields()),"}, {"sha": "0f7199f1c4ec2eed1d3c325f7ff0c9f6ff5fec40", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -788,7 +788,7 @@ where\n         let ty = self.place_ty(self.place);\n         match ty.kind {\n             ty::Closure(def_id, substs) => {\n-                let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n+                let tys : Vec<_> = substs.as_closure().upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             // Note that `elaborate_drops` only drops the upvars of a generator,"}, {"sha": "13bbe021ccf34417e89f74300a5dfd7fd4e31017", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -266,7 +266,10 @@ crate fn assemble_builtin_copy_clone_impls<'tcx>(\n             let closure_ty = generic_types::closure(tcx, def_id);\n             let upvar_tys: Vec<_> = match &closure_ty.kind {\n                 ty::Closure(_, substs) => {\n-                    substs.upvar_tys(def_id, tcx).map(|ty| GenericArg::from(ty)).collect()\n+                    substs.as_closure()\n+                          .upvar_tys(def_id, tcx)\n+                          .map(|ty| GenericArg::from(ty))\n+                          .collect()\n                 },\n                 _ => bug!(),\n             };"}, {"sha": "7db1a7413c7be27351560ea7a5555cdeda478388", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -193,7 +193,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty.expect_ty()))\n             .collect(),\n \n-        ty::Closure(def_id, substs) => substs\n+        ty::Closure(def_id, substs) => substs.as_closure()\n             .upvar_tys(def_id, tcx)\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),"}, {"sha": "300b730b5bbfad920eb9e02dcf475e3c06d95c12", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -7,6 +7,7 @@ use hir::def::Res;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::subst::SubstsRef;\n use rustc::{infer, traits};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_target::spec::abi;\n@@ -103,7 +104,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check whether this is a call to a closure where we\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n-                let substs = rustc::ty::ClosureSubsts::from_ref(substs);\n                 if self.closure_kind(def_id, substs).is_none() {\n                     let closure_ty = self.closure_sig(def_id, substs);\n                     let fn_sig = self\n@@ -481,7 +481,7 @@ pub struct DeferredCallResolution<'tcx> {\n     adjustments: Vec<Adjustment<'tcx>>,\n     fn_sig: ty::FnSig<'tcx>,\n     closure_def_id: DefId,\n-    closure_substs: ty::ClosureSubsts<'tcx>,\n+    closure_substs: SubstsRef<'tcx>,\n }\n \n impl<'a, 'tcx> DeferredCallResolution<'tcx> {"}, {"sha": "76c9bec1db60023b3db5ddfdc16671f8f14b9e57", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -160,14 +160,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.demand_eqtype(\n             expr.span,\n             sig_fn_ptr_ty,\n-            substs.closure_sig_ty(expr_def_id, self.tcx),\n+            substs.as_closure().sig_ty(expr_def_id, self.tcx),\n         );\n \n         if let Some(kind) = opt_kind {\n             self.demand_eqtype(\n                 expr.span,\n                 kind.to_ty(self.tcx),\n-                substs.closure_kind_ty(expr_def_id, self.tcx),\n+                substs.as_closure().kind_ty(expr_def_id, self.tcx),\n             );\n         }\n "}, {"sha": "1f8c25ae4e0599099519f079c6fb42844a90a2fa", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -61,7 +61,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{\n     Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast\n };\n-use rustc::ty::{self, TypeAndMut, Ty, ClosureSubsts};\n+use rustc::ty::{self, TypeAndMut, Ty, subst::SubstsRef};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::error::TypeError;\n use rustc::ty::relate::RelateResult;\n@@ -237,8 +237,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // Non-capturing closures are coercible to\n                 // function pointers or unsafe function pointers.\n                 // It cannot convert closures that require unsafe.\n-                self.coerce_closure_to_fn(a, def_id_a,\n-                    rustc::ty::ClosureSubsts::from_ref(substs_a), b)\n+                self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n             }\n             _ => {\n                 // Otherwise, just use unification rules.\n@@ -728,7 +727,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn coerce_closure_to_fn(&self,\n                            a: Ty<'tcx>,\n                            def_id_a: DefId,\n-                           substs_a: ClosureSubsts<'tcx>,\n+                           substs_a: SubstsRef<'tcx>,\n                            b: Ty<'tcx>)\n                            -> CoerceResult<'tcx> {\n         //! Attempts to coerce from the type of a non-capturing closure"}, {"sha": "c17659647207a0462313015587960e1fbc4edac5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -4191,7 +4191,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Closure(def_id, substs) => {\n                 // We don't use `closure_sig` to account for malformed closures like\n                 // `|_: [_; continue]| {}` and instead we don't suggest anything.\n-                let closure_sig_ty = substs.closure_sig_ty(def_id, self.tcx);\n+                let closure_sig_ty = substs.as_closure().sig_ty(def_id, self.tcx);\n                 (def_id, match closure_sig_ty.kind {\n                     ty::FnPtr(sig) => sig,\n                     _ => return false,"}, {"sha": "3f218e1d9fab1ee730c7299be294b8ef999f8d1b", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -96,8 +96,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Extract the type of the closure.\n         let ty = self.node_ty(closure_hir_id);\n         let (closure_def_id, substs) = match ty.kind {\n-            ty::Closure(def_id, substs) => (def_id,\n-                UpvarSubsts::Closure(rustc::ty::ClosureSubsts::from_ref(substs))),\n+            ty::Closure(def_id, substs) => (\n+                def_id,\n+                UpvarSubsts::Closure(substs)\n+            ),\n             ty::Generator(def_id, substs, _) => (def_id, UpvarSubsts::Generator(substs)),\n             ty::Error => {\n                 // #51714: skip analysis when we have already encountered type errors\n@@ -191,7 +193,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred.\n             let inferred_kind = delegate.current_closure_kind;\n-            let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self.tcx);\n+            let closure_kind_ty = closure_substs\n+                .as_closure().kind_ty(closure_def_id, self.tcx);\n             self.demand_eqtype(span, inferred_kind.to_ty(self.tcx), closure_kind_ty);\n \n             // If we have an origin, store it."}, {"sha": "d973106058eafc37b5bc2ffe5ef615bf59780294", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b91bef78b15dfecc5144b0575f40a2d84ea795a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9b91bef78b15dfecc5144b0575f40a2d84ea795a", "patch": "@@ -1855,7 +1855,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             // the signature of a closure, you should use the\n             // `closure_sig` method on the `ClosureSubsts`:\n             //\n-            //    closure_substs.closure_sig(def_id, tcx)\n+            //    closure_substs.sig(def_id, tcx)\n             //\n             // or, inside of an inference context, you can use\n             //"}]}