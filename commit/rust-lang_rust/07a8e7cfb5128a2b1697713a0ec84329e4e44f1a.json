{"sha": "07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YThlN2NmYjUxMjhhMmIxNjk3NzEzYTBlYzg0MzI5ZTRlNDRmMWE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-01T23:32:49Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-05T22:22:12Z"}, "message": "syntax: remove remaining boxed closures", "tree": {"sha": "b189289dcf712385138d752b6625fcb4547a8cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b189289dcf712385138d752b6625fcb4547a8cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "html_url": "https://github.com/rust-lang/rust/commit/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/comments", "author": null, "committer": null, "parents": [{"sha": "37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e", "html_url": "https://github.com/rust-lang/rust/commit/37f62ae1c0ee44cb6ca563c18da19b8d5be58c0e"}], "stats": {"total": 62, "additions": 29, "deletions": 33}, "files": [{"sha": "3c74a9f4431df52d94844d2c656c5d9d0efbdd75", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_clone<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_clone(\"Clone\", c, s, sub)\n                 }),\n             }"}, {"sha": "84d30a99004a46f9f9a10fbfb041fd08989d1320", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiAnd, subexpr, eq)\n             },\n             cx.expr_bool(span, true),\n-            |cx, span, _, _| cx.expr_bool(span, false),\n+            box |cx, span, _, _| cx.expr_bool(span, false),\n             cx, span, substr)\n     }\n     fn cs_ne(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n@@ -57,7 +57,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 cx.expr_binary(span, ast::BiOr, subexpr, eq)\n             },\n             cx.expr_bool(span, false),\n-            |cx, span, _, _| cx.expr_bool(span, true),\n+            box |cx, span, _, _| cx.expr_bool(span, true),\n             cx, span, substr)\n     }\n \n@@ -72,7 +72,7 @@ pub fn expand_deriving_eq<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     $f(a, b, c)\n                 })\n             }"}, {"sha": "f9c8d95b3084840bcafced9e9594fc059e89f9f6", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -38,7 +38,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|cx, span, substr| {\n+                combine_substructure: combine_substructure(box |cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n                 })\n             }\n@@ -61,7 +61,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n         args: vec![borrowed_self()],\n         ret_ty: ret_ty,\n         attributes: attrs,\n-        combine_substructure: combine_substructure(|cx, span, substr| {\n+        combine_substructure: combine_substructure(box |cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n         })\n     };\n@@ -174,7 +174,7 @@ pub fn cs_partial_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         equals_expr.clone(),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {\n@@ -222,7 +222,7 @@ fn cs_op(less: bool, equal: bool, cx: &mut ExtCtxt,\n             cx.expr_binary(span, ast::BiOr, cmp, and)\n         },\n         cx.expr_bool(span, equal),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(PartialOrd)`\")\n             } else {"}, {"sha": "cdb36ede65da9e8a9dda5d858c0a6e5855d14151", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -32,7 +32,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n             let block = cx.block(span, stmts, None);\n             cx.expr_block(block)\n         },\n-                       |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n+                       box |cx, sp, _, _| cx.span_bug(sp, \"non matching enums in deriving(Eq)?\"),\n                        cx,\n                        span,\n                        substr)\n@@ -57,7 +57,7 @@ pub fn expand_deriving_totaleq<F>(cx: &mut ExtCtxt,\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n                 })\n             }"}, {"sha": "10ecc86bda530838016a9950ba01065e1cb10681", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -41,7 +41,7 @@ pub fn expand_deriving_totalord<F>(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     cs_cmp(a, b, c)\n                 }),\n             }\n@@ -130,7 +130,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt, span: Span,\n             cx.expr_block(cx.block(span, vec!(assign), Some(if_)))\n         },\n         cx.expr_path(equals_path.clone()),\n-        |cx, span, (self_args, tag_tuple), _non_self_args| {\n+        box |cx, span, (self_args, tag_tuple), _non_self_args| {\n             if self_args.len() != 2 {\n                 cx.span_bug(span, \"not exactly 2 arguments in `deriving(Ord)`\")\n             } else {"}, {"sha": "8094f0d3de8ccedeb30c92967b1761c69c808be7", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -76,7 +76,7 @@ fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     decodable_substructure(a, b, c, krate)\n                 }),\n             })"}, {"sha": "047c4fef3c4f185e95973b7535c25ca0ff13c786", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -40,7 +40,7 @@ pub fn expand_deriving_default<F>(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     default_substructure(a, b, c)\n                 })\n             })"}, {"sha": "0fceb0fbfdac4774dc0e6d489b9b4f877bd63eeb", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -152,7 +152,7 @@ fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n                     true\n                 )),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     encodable_substructure(a, b, c)\n                 }),\n             })"}, {"sha": "1fb8189c63c818769a7a0b9c2df02e264f10b86d", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -312,19 +312,15 @@ pub enum SubstructureFields<'a> {\n /// Combine the values of all the fields together. The last argument is\n /// all the fields of all the structures.\n pub type CombineSubstructureFunc<'a> =\n-    |&mut ExtCtxt, Span, &Substructure|: 'a -> P<Expr>;\n+    Box<FnMut(&mut ExtCtxt, Span, &Substructure) -> P<Expr> + 'a>;\n \n /// Deal with non-matching enum variants.  The tuple is a list of\n /// identifiers (one for each `Self` argument, which could be any of the\n /// variants since they have been collapsed together) and the identifiers\n /// holding the variant index value for each of the `Self` arguments.  The\n /// last argument is all the non-`Self` args of the method being derived.\n pub type EnumNonMatchCollapsedFunc<'a> =\n-    |&mut ExtCtxt,\n-     Span,\n-     (&[Ident], &[Ident]),\n-     &[P<Expr>]|: 'a\n-     -> P<Expr>;\n+    Box<FnMut(&mut ExtCtxt, Span, (&[Ident], &[Ident]), &[P<Expr>]) -> P<Expr> + 'a>;\n \n pub fn combine_substructure<'a>(f: CombineSubstructureFunc<'a>)\n     -> RefCell<CombineSubstructureFunc<'a>> {\n@@ -606,7 +602,7 @@ impl<'a> MethodDef<'a> {\n         };\n         let mut f = self.combine_substructure.borrow_mut();\n         let f: &mut CombineSubstructureFunc = &mut *f;\n-        (*f)(cx, trait_.span, &substructure)\n+        f.call_mut((cx, trait_.span, &substructure))\n     }\n \n     fn get_ret_ty(&self,\n@@ -1341,7 +1337,7 @@ impl<'a> TraitDef<'a> {\n pub fn cs_fold<F>(use_foldl: bool,\n                   mut f: F,\n                   base: P<Expr>,\n-                  enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n+                  mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n                   cx: &mut ExtCtxt,\n                   trait_span: Span,\n                   substructure: &Substructure)\n@@ -1369,8 +1365,8 @@ pub fn cs_fold<F>(use_foldl: bool,\n             }\n         },\n         EnumNonMatchingCollapsed(ref all_args, _, tuple) =>\n-            enum_nonmatch_f(cx, trait_span, (all_args[], tuple),\n-                            substructure.nonself_args),\n+            enum_nonmatch_f.call_mut((cx, trait_span, (all_args[], tuple),\n+                                      substructure.nonself_args)),\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n@@ -1387,7 +1383,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n /// ```\n #[inline]\n pub fn cs_same_method<F>(f: F,\n-                         enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n+                         mut enum_nonmatch_f: EnumNonMatchCollapsedFunc,\n                          cx: &mut ExtCtxt,\n                          trait_span: Span,\n                          substructure: &Substructure)\n@@ -1409,8 +1405,8 @@ pub fn cs_same_method<F>(f: F,\n             f(cx, trait_span, called)\n         },\n         EnumNonMatchingCollapsed(ref all_self_args, _, tuple) =>\n-            enum_nonmatch_f(cx, trait_span, (all_self_args[], tuple),\n-                            substructure.nonself_args),\n+            enum_nonmatch_f.call_mut((cx, trait_span, (all_self_args[], tuple),\n+                                     substructure.nonself_args)),\n         StaticEnum(..) | StaticStruct(..) => {\n             cx.span_bug(trait_span, \"static function in `derive`\")\n         }"}, {"sha": "b9acde4bf6be9ac21195a30d6b3ce454fe9fdc7f", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -55,7 +55,7 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(args), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     hash_substructure(a, b, c)\n                 })\n             }"}, {"sha": "d36bb2cd1c2aaab29866a3798ce96fb3101bcbbb", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_from(\"i64\", c, s, sub)\n                 }),\n             },\n@@ -62,7 +62,7 @@ pub fn expand_deriving_from_primitive<F>(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,\n-                combine_substructure: combine_substructure(|c, s, sub| {\n+                combine_substructure: combine_substructure(box |c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n                 }),\n             })"}, {"sha": "5517019f804cebde728cb77cfd2b5f17f98b8219", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_rand<F>(cx: &mut ExtCtxt,\n                 ),\n                 ret_ty: Self,\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     rand_substructure(a, b, c)\n                 })\n             }"}, {"sha": "eceac4e9a8368ff38af02b125baaa07a05b5bb92", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07a8e7cfb5128a2b1697713a0ec84329e4e44f1a/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=07a8e7cfb5128a2b1697713a0ec84329e4e44f1a", "patch": "@@ -46,7 +46,7 @@ pub fn expand_deriving_show<F>(cx: &mut ExtCtxt,\n                 args: vec!(fmtr),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n                 attributes: Vec::new(),\n-                combine_substructure: combine_substructure(|a, b, c| {\n+                combine_substructure: combine_substructure(box |a, b, c| {\n                     show_substructure(a, b, c)\n                 })\n             }"}]}