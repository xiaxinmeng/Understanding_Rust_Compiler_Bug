{"sha": "389dda149c0524c7d5b8d2020ace3cbc97bda60b", "node_id": "C_kwDOAAsO6NoAKDM4OWRkYTE0OWMwNTI0YzdkNWI4ZDIwMjBhY2UzY2JjOTdiZGE2MGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-26T22:56:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T22:56:25Z"}, "message": "Rollup merge of #100776 - Rejyr:diagnostic-migration-rustc-lint, r=davidtwco\n\nMigrate `rustc_lint` errors to `SessionDiagnostic`\n\nDraft PR for migrating `rustc_lint` to `SessionDiagnostic`, as part of the [recent blog post](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html)", "tree": {"sha": "1e7beb3f7a652cbbdac4bd283020c16bdc348e87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e7beb3f7a652cbbdac4bd283020c16bdc348e87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389dda149c0524c7d5b8d2020ace3cbc97bda60b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCU+ZCRBK7hj4Ov3rIwAAFzsIAF8mfdnTw+9Xgo1dHPabgJ4U\nxzSDN2GfXplmVhd4UE6kwiQ7fev9XqLpXVEjqByUo6pdlKiiFW6efXNCSzpOkDz9\nA4NPxTuxkGDd+nfTeOHW6fgAorwyENw36xrpibrzbbNzkEClc0P66mg/ydpccFVq\napDxPguYq7DdZ8bDecSxpH+gHdAvPFuZ9is0s86OiW3VObCWdyxvb6kcnGdfqR5j\nzNDeMItXYjcI+QWmHFHiRpnC81NUs27n1GVT2WCxoYiRmcGA/1w1lXmQ3NP/J1m7\nan+41J5u/5Yqq6K9XPqw+hbDaEUnawL3EnmeNV1lLbEaClgUjMQON6vvQSBOAlM=\n=oHBj\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e7beb3f7a652cbbdac4bd283020c16bdc348e87\nparent 93b2acd88ace5ab89fdf8c73ac99b7031db6151d\nparent 1693993d8ff16b1a5d288bc858db052902126053\nauthor Michael Goulet <michael@errs.io> 1661554585 -0700\ncommitter GitHub <noreply@github.com> 1661554585 -0700\n\nRollup merge of #100776 - Rejyr:diagnostic-migration-rustc-lint, r=davidtwco\n\nMigrate `rustc_lint` errors to `SessionDiagnostic`\n\nDraft PR for migrating `rustc_lint` to `SessionDiagnostic`, as part of the [recent blog post](https://blog.rust-lang.org/inside-rust/2022/08/16/diagnostic-effort.html)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389dda149c0524c7d5b8d2020ace3cbc97bda60b", "html_url": "https://github.com/rust-lang/rust/commit/389dda149c0524c7d5b8d2020ace3cbc97bda60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389dda149c0524c7d5b8d2020ace3cbc97bda60b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93b2acd88ace5ab89fdf8c73ac99b7031db6151d", "url": "https://api.github.com/repos/rust-lang/rust/commits/93b2acd88ace5ab89fdf8c73ac99b7031db6151d", "html_url": "https://github.com/rust-lang/rust/commit/93b2acd88ace5ab89fdf8c73ac99b7031db6151d"}, {"sha": "1693993d8ff16b1a5d288bc858db052902126053", "url": "https://api.github.com/repos/rust-lang/rust/commits/1693993d8ff16b1a5d288bc858db052902126053", "html_url": "https://github.com/rust-lang/rust/commit/1693993d8ff16b1a5d288bc858db052902126053"}], "stats": {"total": 421, "additions": 297, "deletions": 124}, "files": [{"sha": "27ad3e453660188727a674a59593a4cf71d39397", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -393,3 +393,37 @@ lint_builtin_deref_nullptr = dereferencing a null pointer\n     .label = this code causes undefined behavior when executed\n \n lint_builtin_asm_labels = avoid using named labels in inline assembly\n+\n+lint_overruled_attribute = {$lint_level}({$lint_source}) incompatible with previous forbid\n+    .label = overruled by previous forbid\n+\n+lint_default_source = `forbid` lint level is the default for {$id}\n+\n+lint_node_source = `forbid` level set here\n+    .note = {$reason}\n+\n+lint_command_line_source = `forbid` lint level was set on command line\n+\n+lint_malformed_attribute = malformed lint attribute input\n+\n+lint_bad_attribute_argument = bad attribute argument\n+\n+lint_reason_must_be_string_literal = reason must be a string literal\n+\n+lint_reason_must_come_last = reason in lint attribute must come last\n+\n+lint_unknown_tool_in_scoped_lint = unknown tool name `{$tool_name}` found in scoped lint: `{$tool_name}::{$lint_name}`\n+    .help = add `#![register_tool({$tool_name})]` to the crate root\n+\n+lint_unsupported_group = `{$lint_group}` lint group is not supported with \u00b4--force-warn\u00b4\n+\n+lint_requested_level = requested on the command line with `{$level} {$lint_name}`\n+\n+lint_check_name_unknown = unknown lint: `{$lint_name}`\n+    .help = did you mean: `{$suggestion}`\n+\n+lint_check_name_unknown_tool = unknown lint tool: `{$tool_name}`\n+\n+lint_check_name_warning = {$msg}\n+\n+lint_check_name_deprecated = lint name `{$lint_name}` is deprecated and does not have an effect anymore. Use: {$new_name}"}, {"sha": "af7ef96e485b5c9af313ecc990ef878fed14b239", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 23, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -21,6 +21,7 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{\n+    errors::BuiltinEllpisisInclusiveRangePatterns,\n     types::{transparent_newtype_field, CItemKind},\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext,\n };\n@@ -1760,18 +1761,11 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n                     None => format!(\"&(..={})\", end),\n                 };\n                 if join.edition() >= Edition::Edition2021 {\n-                    let mut err = cx.sess().struct_span_err_with_code(\n-                        pat.span,\n-                        msg,\n-                        rustc_errors::error_code!(E0783),\n-                    );\n-                    err.span_suggestion(\n-                        pat.span,\n-                        suggestion,\n+                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                        span: pat.span,\n+                        suggestion: pat.span,\n                         replace,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                    });\n                 } else {\n                     cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, pat.span, |lint| {\n                         lint.build(msg)\n@@ -1787,18 +1781,11 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             } else {\n                 let replace = \"..=\";\n                 if join.edition() >= Edition::Edition2021 {\n-                    let mut err = cx.sess().struct_span_err_with_code(\n-                        pat.span,\n-                        msg,\n-                        rustc_errors::error_code!(E0783),\n-                    );\n-                    err.span_suggestion_short(\n-                        join,\n-                        suggestion,\n-                        replace,\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n+                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                        span: pat.span,\n+                        suggestion: join,\n+                        replace: replace.to_string(),\n+                    });\n                 } else {\n                     cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {\n                         lint.build(msg)"}, {"sha": "002bba4759be820ace8e656cd52a36f9fe52edca", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 35, "deletions": 58, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -16,12 +16,16 @@\n \n use self::TargetLint::*;\n \n+use crate::errors::{\n+    CheckNameDeprecated, CheckNameUnknown, CheckNameUnknownTool, CheckNameWarning, RequestedLevel,\n+    UnsupportedGroup,\n+};\n use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n-use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err};\n+use rustc_errors::add_elided_lifetime_in_path_suggestion;\n use rustc_errors::{\n     Applicability, DecorateLint, LintDiagnosticBuilder, MultiSpan, SuggestionStyle,\n };\n@@ -39,7 +43,7 @@ use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintI\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{BytePos, Span, DUMMY_SP};\n+use rustc_span::{BytePos, Span};\n use rustc_target::abi;\n use tracing::debug;\n \n@@ -326,68 +330,41 @@ impl LintStore {\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n         if lint_name_only == crate::WARNINGS.name_lower() && matches!(level, Level::ForceWarn(_)) {\n-            struct_span_err!(\n-                sess,\n-                DUMMY_SP,\n-                E0602,\n-                \"`{}` lint group is not supported with \u00b4--force-warn\u00b4\",\n-                crate::WARNINGS.name_lower()\n-            )\n-            .emit();\n+            sess.emit_err(UnsupportedGroup { lint_group: crate::WARNINGS.name_lower() });\n             return;\n         }\n-        let db = match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n-            CheckLintNameResult::Ok(_) => None,\n-            CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n+        let lint_name = lint_name.to_string();\n+        match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n+            CheckLintNameResult::Warning(msg, _) => {\n+                sess.emit_warning(CheckNameWarning {\n+                    msg,\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n             CheckLintNameResult::NoLint(suggestion) => {\n-                let mut err =\n-                    struct_span_err!(sess, DUMMY_SP, E0602, \"unknown lint: `{}`\", lint_name);\n-\n-                if let Some(suggestion) = suggestion {\n-                    err.help(&format!(\"did you mean: `{}`\", suggestion));\n+                sess.emit_err(CheckNameUnknown {\n+                    lint_name: lint_name.clone(),\n+                    suggestion,\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n+            CheckLintNameResult::Tool(result) => {\n+                if let Err((Some(_), new_name)) = result {\n+                    sess.emit_warning(CheckNameDeprecated {\n+                        lint_name: lint_name.clone(),\n+                        new_name,\n+                        sub: RequestedLevel { level, lint_name },\n+                    });\n                 }\n-\n-                Some(err.forget_guarantee())\n             }\n-            CheckLintNameResult::Tool(result) => match result {\n-                Err((Some(_), new_name)) => Some(sess.struct_warn(&format!(\n-                    \"lint name `{}` is deprecated \\\n-                     and does not have an effect anymore. \\\n-                     Use: {}\",\n-                    lint_name, new_name\n-                ))),\n-                _ => None,\n-            },\n-            CheckLintNameResult::NoTool => Some(\n-                struct_span_err!(\n-                    sess,\n-                    DUMMY_SP,\n-                    E0602,\n-                    \"unknown lint tool: `{}`\",\n-                    tool_name.unwrap()\n-                )\n-                .forget_guarantee(),\n-            ),\n+            CheckLintNameResult::NoTool => {\n+                sess.emit_err(CheckNameUnknownTool {\n+                    tool_name: tool_name.unwrap(),\n+                    sub: RequestedLevel { level, lint_name },\n+                });\n+            }\n+            _ => {}\n         };\n-\n-        if let Some(mut db) = db {\n-            let msg = format!(\n-                \"requested on the command line with `{} {}`\",\n-                match level {\n-                    Level::Allow => \"-A\",\n-                    Level::Warn => \"-W\",\n-                    Level::ForceWarn(_) => \"--force-warn\",\n-                    Level::Deny => \"-D\",\n-                    Level::Forbid => \"-F\",\n-                    Level::Expect(_) => {\n-                        unreachable!(\"lints with the level of `expect` should not run this code\");\n-                    }\n-                },\n-                lint_name\n-            );\n-            db.note(&msg);\n-            db.emit();\n-        }\n     }\n \n     /// True if this symbol represents a lint group name."}, {"sha": "606d8bda8aafe6c7548731caaacdb9d75ca1c44c", "filename": "compiler/rustc_lint/src/errors.rs", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -0,0 +1,162 @@\n+use rustc_errors::{fluent, AddSubdiagnostic, ErrorGuaranteed};\n+use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_session::{lint::Level, parse::ParseSess, SessionDiagnostic};\n+use rustc_span::{Span, Symbol};\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::overruled_attribute, code = \"E0453\")]\n+pub struct OverruledAttribute {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub overruled: Span,\n+    pub lint_level: String,\n+    pub lint_source: Symbol,\n+    #[subdiagnostic]\n+    pub sub: OverruledAttributeSub,\n+}\n+//\n+pub enum OverruledAttributeSub {\n+    DefaultSource { id: String },\n+    NodeSource { span: Span, reason: Option<Symbol> },\n+    CommandLineSource,\n+}\n+\n+impl AddSubdiagnostic for OverruledAttributeSub {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        match self {\n+            OverruledAttributeSub::DefaultSource { id } => {\n+                diag.note(fluent::lint::default_source);\n+                diag.set_arg(\"id\", id);\n+            }\n+            OverruledAttributeSub::NodeSource { span, reason } => {\n+                diag.span_label(span, fluent::lint::node_source);\n+                if let Some(rationale) = reason {\n+                    diag.note(rationale.as_str());\n+                }\n+            }\n+            OverruledAttributeSub::CommandLineSource => {\n+                diag.note(fluent::lint::command_line_source);\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::malformed_attribute, code = \"E0452\")]\n+pub struct MalformedAttribute {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sub: MalformedAttributeSub,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub enum MalformedAttributeSub {\n+    #[label(lint::bad_attribute_argument)]\n+    BadAttributeArgument(#[primary_span] Span),\n+    #[label(lint::reason_must_be_string_literal)]\n+    ReasonMustBeStringLiteral(#[primary_span] Span),\n+    #[label(lint::reason_must_come_last)]\n+    ReasonMustComeLast(#[primary_span] Span),\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::unknown_tool_in_scoped_lint, code = \"E0710\")]\n+pub struct UnknownToolInScopedLint {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+    pub tool_name: Symbol,\n+    pub lint_name: String,\n+    #[help]\n+    pub is_nightly_build: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::builtin_ellipsis_inclusive_range_patterns, code = \"E0783\")]\n+pub struct BuiltinEllpisisInclusiveRangePatterns {\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion_short(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    pub suggestion: Span,\n+    pub replace: String,\n+}\n+\n+pub struct RequestedLevel {\n+    pub level: Level,\n+    pub lint_name: String,\n+}\n+\n+impl AddSubdiagnostic for RequestedLevel {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        diag.note(fluent::lint::requested_level);\n+        diag.set_arg(\n+            \"level\",\n+            match self.level {\n+                Level::Allow => \"-A\",\n+                Level::Warn => \"-W\",\n+                Level::ForceWarn(_) => \"--force-warn\",\n+                Level::Deny => \"-D\",\n+                Level::Forbid => \"-F\",\n+                Level::Expect(_) => {\n+                    unreachable!(\"lints with the level of `expect` should not run this code\");\n+                }\n+            },\n+        );\n+        diag.set_arg(\"lint_name\", self.lint_name);\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::unsupported_group, code = \"E0602\")]\n+pub struct UnsupportedGroup {\n+    pub lint_group: String,\n+}\n+\n+pub struct CheckNameUnknown {\n+    pub lint_name: String,\n+    pub suggestion: Option<Symbol>,\n+    pub sub: RequestedLevel,\n+}\n+\n+impl SessionDiagnostic<'_> for CheckNameUnknown {\n+    fn into_diagnostic(\n+        self,\n+        sess: &ParseSess,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::lint::check_name_unknown);\n+        diag.code(rustc_errors::error_code!(E0602));\n+        if let Some(suggestion) = self.suggestion {\n+            diag.help(fluent::lint::help);\n+            diag.set_arg(\"suggestion\", suggestion);\n+        }\n+        diag.set_arg(\"lint_name\", self.lint_name);\n+        diag.subdiagnostic(self.sub);\n+        diag\n+    }\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::check_name_unknown_tool, code = \"E0602\")]\n+pub struct CheckNameUnknownTool {\n+    pub tool_name: Symbol,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::check_name_warning)]\n+pub struct CheckNameWarning {\n+    pub msg: String,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(lint::check_name_deprecated)]\n+pub struct CheckNameDeprecated {\n+    pub lint_name: String,\n+    pub new_name: String,\n+    #[subdiagnostic]\n+    pub sub: RequestedLevel,\n+}"}, {"sha": "89409b58f88b90af3d5762e537c33ac986f7c131", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 55, "deletions": 43, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -3,7 +3,7 @@ use crate::late::unerased_lint_store;\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, LintDiagnosticBuilder, MultiSpan};\n+use rustc_errors::{Applicability, Diagnostic, LintDiagnosticBuilder, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::nested_filter;\n@@ -23,6 +23,11 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use tracing::debug;\n \n+use crate::errors::{\n+    MalformedAttribute, MalformedAttributeSub, OverruledAttribute, OverruledAttributeSub,\n+    UnknownToolInScopedLint,\n+};\n+\n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n     let levels =\n@@ -186,16 +191,26 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n                 };\n                 if !fcw_warning {\n-                    let mut diag_builder = struct_span_err!(\n-                        self.sess,\n-                        src.span(),\n-                        E0453,\n-                        \"{}({}) incompatible with previous forbid\",\n-                        level.as_str(),\n-                        src.name(),\n-                    );\n-                    decorate_diag(&mut diag_builder);\n-                    diag_builder.emit();\n+                    self.sess.emit_err(OverruledAttribute {\n+                        span: src.span(),\n+                        overruled: src.span(),\n+                        lint_level: level.as_str().to_string(),\n+                        lint_source: src.name(),\n+                        sub: match old_src {\n+                            LintLevelSource::Default => {\n+                                OverruledAttributeSub::DefaultSource { id: id.to_string() }\n+                            }\n+                            LintLevelSource::Node(_, forbid_source_span, reason) => {\n+                                OverruledAttributeSub::NodeSource {\n+                                    span: forbid_source_span,\n+                                    reason,\n+                                }\n+                            }\n+                            LintLevelSource::CommandLine(_, _) => {\n+                                OverruledAttributeSub::CommandLineSource\n+                            }\n+                        },\n+                    });\n                 } else {\n                     self.struct_lint(\n                         FORBIDDEN_LINT_GROUPS,\n@@ -266,7 +281,6 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.cur = self.sets.list.push(LintSet { specs: FxHashMap::default(), parent: prev });\n \n         let sess = self.sess;\n-        let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n             if attr.has_name(sym::automatically_derived) {\n                 self.current_specs_mut().insert(\n@@ -317,20 +331,27 @@ impl<'s> LintLevelsBuilder<'s> {\n                                 }\n                                 reason = Some(rationale);\n                             } else {\n-                                bad_attr(name_value.span)\n-                                    .span_label(name_value.span, \"reason must be a string literal\")\n-                                    .emit();\n+                                sess.emit_err(MalformedAttribute {\n+                                    span: name_value.span,\n+                                    sub: MalformedAttributeSub::ReasonMustBeStringLiteral(\n+                                        name_value.span,\n+                                    ),\n+                                });\n                             }\n                             // found reason, reslice meta list to exclude it\n                             metas.pop().unwrap();\n                         } else {\n-                            bad_attr(item.span)\n-                                .span_label(item.span, \"bad attribute argument\")\n-                                .emit();\n+                            sess.emit_err(MalformedAttribute {\n+                                span: item.span,\n+                                sub: MalformedAttributeSub::BadAttributeArgument(item.span),\n+                            });\n                         }\n                     }\n                     ast::MetaItemKind::List(_) => {\n-                        bad_attr(item.span).span_label(item.span, \"bad attribute argument\").emit();\n+                        sess.emit_err(MalformedAttribute {\n+                            span: item.span,\n+                            sub: MalformedAttributeSub::BadAttributeArgument(item.span),\n+                        });\n                     }\n                 }\n             }\n@@ -348,20 +369,21 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let meta_item = match li {\n                     ast::NestedMetaItem::MetaItem(meta_item) if meta_item.is_word() => meta_item,\n                     _ => {\n-                        let mut err = bad_attr(sp);\n-                        let mut add_label = true;\n                         if let Some(item) = li.meta_item() {\n                             if let ast::MetaItemKind::NameValue(_) = item.kind {\n                                 if item.path == sym::reason {\n-                                    err.span_label(sp, \"reason in lint attribute must come last\");\n-                                    add_label = false;\n+                                    sess.emit_err(MalformedAttribute {\n+                                        span: sp,\n+                                        sub: MalformedAttributeSub::ReasonMustComeLast(sp),\n+                                    });\n+                                    continue;\n                                 }\n                             }\n                         }\n-                        if add_label {\n-                            err.span_label(sp, \"bad attribute argument\");\n-                        }\n-                        err.emit();\n+                        sess.emit_err(MalformedAttribute {\n+                            span: sp,\n+                            sub: MalformedAttributeSub::BadAttributeArgument(sp),\n+                        });\n                         continue;\n                     }\n                 };\n@@ -485,22 +507,12 @@ impl<'s> LintLevelsBuilder<'s> {\n                     }\n \n                     &CheckLintNameResult::NoTool => {\n-                        let mut err = struct_span_err!(\n-                            sess,\n-                            tool_ident.map_or(DUMMY_SP, |ident| ident.span),\n-                            E0710,\n-                            \"unknown tool name `{}` found in scoped lint: `{}::{}`\",\n-                            tool_name.unwrap(),\n-                            tool_name.unwrap(),\n-                            pprust::path_to_string(&meta_item.path),\n-                        );\n-                        if sess.is_nightly_build() {\n-                            err.help(&format!(\n-                                \"add `#![register_tool({})]` to the crate root\",\n-                                tool_name.unwrap()\n-                            ));\n-                        }\n-                        err.emit();\n+                        sess.emit_err(UnknownToolInScopedLint {\n+                            span: tool_ident.map(|ident| ident.span),\n+                            tool_name: tool_name.unwrap(),\n+                            lint_name: pprust::path_to_string(&meta_item.path),\n+                            is_nightly_build: sess.is_nightly_build().then_some(()),\n+                        });\n                         continue;\n                     }\n "}, {"sha": "f34e062fd12a9791acf87b5e571a6e2dd958c643", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389dda149c0524c7d5b8d2020ace3cbc97bda60b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=389dda149c0524c7d5b8d2020ace3cbc97bda60b", "patch": "@@ -47,6 +47,7 @@ pub mod builtin;\n mod context;\n mod early;\n mod enum_intrinsics_non_enums;\n+mod errors;\n mod expect;\n pub mod hidden_unicode_codepoints;\n mod internal;"}]}