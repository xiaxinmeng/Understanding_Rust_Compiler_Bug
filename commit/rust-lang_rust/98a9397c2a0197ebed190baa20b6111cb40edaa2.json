{"sha": "98a9397c2a0197ebed190baa20b6111cb40edaa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTkzOTdjMmEwMTk3ZWJlZDE5MGJhYTIwYjYxMTFjYjQwZWRhYTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-08-02T00:42:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T00:42:15Z"}, "message": "Rollup merge of #74992 - lcnr:fix-generic-param-order, r=GuillaumeGomez\n\nfix rustdoc generic param order\n\nfixes #61292\n\nr? @varkor cc @GuillaumeGomez", "tree": {"sha": "d3266ac7c472691ce8c43772f8ff3a907df2b617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3266ac7c472691ce8c43772f8ff3a907df2b617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a9397c2a0197ebed190baa20b6111cb40edaa2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJgvnCRBK7hj4Ov3rIwAAdHIIAH4bbrNOpL0xZ62k44yJKC/q\n1RXsWuMymbZXiNzUKy6sLZwxI1AeUJwtnSZ4iPqz/Fs1W9NQkTOgvV3Um7FT02bV\n+CYaxd7ekpuRZeU3IG6HAIL5dYjBHfFYbqhvxjHo/KNsGoqGOPybsQd8BJKTp/ss\njw3CH0jPUDhzSHGJpXRFyfnMK7kjYwR54oIroFFJy+goETCQsE8gXun14WL8y+bY\n789n5h2f9fDZCc+RKfts1GNmKCjVdIG/uxqDa6o2iB9Lup1dCcsle2ZCyrvmAIya\nV/u7gFFb6i08eprcKBmLuQBa0DEOuQ/Ra6v5/1LjH0qV82vk+mCHBhW/4B+HoYA=\n=XnWC\n-----END PGP SIGNATURE-----\n", "payload": "tree d3266ac7c472691ce8c43772f8ff3a907df2b617\nparent fac959b5705e955372a1d32d1757c22c4d3ad53a\nparent b90bc8d70b4f2b5562314b457284e9ee9dfc89bc\nauthor Manish Goregaokar <manishsmail@gmail.com> 1596328935 -0700\ncommitter GitHub <noreply@github.com> 1596328935 -0700\n\nRollup merge of #74992 - lcnr:fix-generic-param-order, r=GuillaumeGomez\n\nfix rustdoc generic param order\n\nfixes #61292\n\nr? @varkor cc @GuillaumeGomez\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a9397c2a0197ebed190baa20b6111cb40edaa2", "html_url": "https://github.com/rust-lang/rust/commit/98a9397c2a0197ebed190baa20b6111cb40edaa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a9397c2a0197ebed190baa20b6111cb40edaa2/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fac959b5705e955372a1d32d1757c22c4d3ad53a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fac959b5705e955372a1d32d1757c22c4d3ad53a", "html_url": "https://github.com/rust-lang/rust/commit/fac959b5705e955372a1d32d1757c22c4d3ad53a"}, {"sha": "b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc", "html_url": "https://github.com/rust-lang/rust/commit/b90bc8d70b4f2b5562314b457284e9ee9dfc89bc"}], "stats": {"total": 45, "additions": 15, "deletions": 30}, "files": [{"sha": "9c44d27447db8614445e2073acb3a640db25f426", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=98a9397c2a0197ebed190baa20b6111cb40edaa2", "patch": "@@ -480,6 +480,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 .clean(self.cx)\n                 .params;\n \n+        debug!(\n+            \"param_env_to_generics({:?}): generic_params={:?}\",\n+            param_env_def_id, generic_params\n+        );\n+\n         let mut has_sized = FxHashSet::default();\n         let mut ty_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();\n         let mut lifetime_to_bounds: FxHashMap<_, FxHashSet<_>> = Default::default();"}, {"sha": "5b048372624a4a9ff399d552cac939cc5350804f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=98a9397c2a0197ebed190baa20b6111cb40edaa2", "patch": "@@ -716,11 +716,11 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // Bounds in the type_params and lifetimes fields are repeated in the\n         // predicates field (see rustc_typeck::collect::ty_generics), so remove\n         // them.\n-        let stripped_typarams = gens\n+        let stripped_params = gens\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => None,\n+                ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n                 ty::GenericParamDefKind::Type { synthetic, .. } => {\n                     if param.name == kw::SelfUpper {\n                         assert_eq!(param.index, 0);\n@@ -732,7 +732,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                     }\n                     Some(param.clean(cx))\n                 }\n-                ty::GenericParamDefKind::Const { .. } => None,\n+                ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n             })\n             .collect::<Vec<GenericParamDef>>();\n \n@@ -844,8 +844,10 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n \n         // Run through the type parameters again and insert a ?Sized\n         // unbound for any we didn't find to be Sized.\n-        for tp in &stripped_typarams {\n-            if !sized_params.contains(&tp.name) {\n+        for tp in &stripped_params {\n+            if matches!(tp.kind, types::GenericParamDefKind::Type { .. })\n+                && !sized_params.contains(&tp.name)\n+            {\n                 where_predicates.push(WP::BoundPredicate {\n                     ty: Type::Generic(tp.name.clone()),\n                     bounds: vec![GenericBound::maybe_sized(cx)],\n@@ -858,16 +860,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            params: gens\n-                .params\n-                .iter()\n-                .flat_map(|param| match param.kind {\n-                    ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n-                    ty::GenericParamDefKind::Type { .. } => None,\n-                    ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n-                })\n-                .chain(simplify::ty_params(stripped_typarams).into_iter())\n-                .collect(),\n+            params: stripped_params,\n             where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }"}, {"sha": "990189f6ea04dd54da709737eaa198fdab113635", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=98a9397c2a0197ebed190baa20b6111cb40edaa2", "patch": "@@ -12,7 +12,6 @@\n //! bounds by special casing scenarios such as these. Fun!\n \n use std::collections::BTreeMap;\n-use std::mem;\n \n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n@@ -118,18 +117,6 @@ pub fn merge_bounds(\n     })\n }\n \n-pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericParamDef> {\n-    for param in &mut params {\n-        match param.kind {\n-            clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = mem::take(bounds);\n-            }\n-            _ => panic!(\"expected only type parameters\"),\n-        }\n-    }\n-    params\n-}\n-\n fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId, trait_: DefId) -> bool {\n     if child == trait_ {\n         return true;"}, {"sha": "03f5bb2ca4374784065e047691780d914f9b4720", "filename": "src/test/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a9397c2a0197ebed190baa20b6111cb40edaa2/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=98a9397c2a0197ebed190baa20b6111cb40edaa2", "patch": "@@ -11,8 +11,8 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<const ORDER: Order, T> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<const ORDER: Order, T> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Send\"]/code' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//h3[@id=\"impl-Sync\"]/code' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }"}]}