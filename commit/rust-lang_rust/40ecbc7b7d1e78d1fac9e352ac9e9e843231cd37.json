{"sha": "40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZWNiYzdiN2QxZTc4ZDFmYWM5ZTM1MmFjOWU5ZTg0MzIzMWNkMzc=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-07-11T20:14:09Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-08-12T22:03:44Z"}, "message": "Avoid closures in OnceWith and Successors", "tree": {"sha": "0728787d7fc853f56d59f23cb14d53bee50183b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0728787d7fc853f56d59f23cb14d53bee50183b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37", "html_url": "https://github.com/rust-lang/rust/commit/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7539fc69d5b75f35d97fe98ba02b8a52f5617088", "url": "https://api.github.com/repos/rust-lang/rust/commits/7539fc69d5b75f35d97fe98ba02b8a52f5617088", "html_url": "https://github.com/rust-lang/rust/commit/7539fc69d5b75f35d97fe98ba02b8a52f5617088"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "183176005ede9605ba289c018d6adbe18f6d69c5", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=40ecbc7b7d1e78d1fac9e352ac9e9e843231cd37", "patch": "@@ -394,7 +394,8 @@ impl<A, F: FnOnce() -> A> Iterator for OnceWith<F> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        self.gen.take().map(|f| f())\n+        let f = self.gen.take()?;\n+        Some(f())\n     }\n \n     #[inline]\n@@ -608,10 +609,9 @@ impl<T, F> Iterator for Successors<T, F>\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        self.next.take().map(|item| {\n-            self.next = (self.succ)(&item);\n-            item\n-        })\n+        let item = self.next.take()?;\n+        self.next = (self.succ)(&item);\n+        Some(item)\n     }\n \n     #[inline]"}]}