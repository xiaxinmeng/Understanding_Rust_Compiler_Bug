{"sha": "ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "node_id": "C_kwDOAAsO6NoAKGVjNGJjYWFjNDUwMjc5YjAyOWYzNDgwYjhiOGYxYjgyYWIzNmE1ZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T14:43:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T14:43:45Z"}, "message": "Auto merge of #92441 - cjgillot:resolve-trait-impl-item, r=matthewjasper\n\nLink impl items to corresponding trait items in late resolver.\n\nHygienically linking trait impl items to declarations in the trait can be done directly by the late resolver. In fact, it is already done to diagnose unknown items.\n\nThis PR uses this resolution work and stores the `DefId` of the trait item in the HIR. This avoids having to do this resolution manually later.\n\nr? `@matthewjasper`\nRelated to #90639. The added `trait_item_id` field can be moved to `ImplItemRef` to be used directly by your PR.", "tree": {"sha": "7868ce973b848dee601867b72239114eb6225c22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7868ce973b848dee601867b72239114eb6225c22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "html_url": "https://github.com/rust-lang/rust/commit/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b13a5bf3c4d66ce375f5978c2c2233f9714b721e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b13a5bf3c4d66ce375f5978c2c2233f9714b721e", "html_url": "https://github.com/rust-lang/rust/commit/b13a5bf3c4d66ce375f5978c2c2233f9714b721e"}, {"sha": "441c1a6c50cab4b010d03ceb9a7b616487720b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/441c1a6c50cab4b010d03ceb9a7b616487720b1f", "html_url": "https://github.com/rust-lang/rust/commit/441c1a6c50cab4b010d03ceb9a7b616487720b1f"}], "stats": {"total": 985, "additions": 474, "deletions": 511}, "files": [{"sha": "39a8cd405de33a81f765fcdd1bc295f4d242eed9", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -335,7 +335,8 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_impl_item_ref(&mut self, ii: &'hir ImplItemRef) {\n         // Do not visit the duplicate information in ImplItemRef. We want to\n         // map the actual nodes, not the duplicate ones in the *Ref.\n-        let ImplItemRef { id, ident: _, kind: _, span: _, defaultness: _ } = *ii;\n+        let ImplItemRef { id, ident: _, kind: _, span: _, defaultness: _, trait_item_def_id: _ } =\n+            *ii;\n \n         self.visit_nested_impl_item(id);\n     }"}, {"sha": "ed3abbd5b4d3dfce4874811252bc5c2cacfa70e1", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -925,6 +925,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 AssocItemKind::MacCall(..) => unimplemented!(),\n             },\n+            trait_item_def_id: self.resolver.get_partial_res(i.id).map(|r| r.base_res().def_id()),\n         }\n     }\n "}, {"sha": "76d94fe7dbcd2cbb6bf00e37afb27be49c8c5eb0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -2881,6 +2881,8 @@ pub struct ImplItemRef {\n     pub kind: AssocItemKind,\n     pub span: Span,\n     pub defaultness: Defaultness,\n+    /// When we are in a trait impl, link to the trait-item's id.\n+    pub trait_item_def_id: Option<DefId>,\n }\n \n #[derive(Copy, Clone, PartialEq, Encodable, Debug, HashStable_Generic)]"}, {"sha": "7c77930193c0b2818ac1e097abd56d756443f68a", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1088,7 +1088,8 @@ pub fn walk_foreign_item_ref<'v, V: Visitor<'v>>(\n \n pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) {\n     // N.B., deliberately force a compilation error if/when new fields are added.\n-    let ImplItemRef { id, ident, ref kind, span: _, ref defaultness } = *impl_item_ref;\n+    let ImplItemRef { id, ident, ref kind, span: _, ref defaultness, trait_item_def_id: _ } =\n+        *impl_item_ref;\n     visitor.visit_nested_impl_item(id);\n     visitor.visit_ident(ident);\n     visitor.visit_associated_item_kind(kind);"}, {"sha": "8563bac0bbf8740b7e268f9e4582a519e4eba19a", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -139,21 +139,6 @@ impl<'tcx> AssocItems<'tcx> {\n         self.items.get_by_key(name).copied()\n     }\n \n-    /// Returns an iterator over all associated items with the given name.\n-    ///\n-    /// Multiple items may have the same name if they are in different `Namespace`s. For example,\n-    /// an associated type can have the same name as a method. Use one of the `find_by_name_and_*`\n-    /// methods below if you know which item you are looking for.\n-    pub fn filter_by_name<'a>(\n-        &'a self,\n-        tcx: TyCtxt<'a>,\n-        ident: Ident,\n-        parent_def_id: DefId,\n-    ) -> impl 'a + Iterator<Item = &'a ty::AssocItem> {\n-        self.filter_by_name_unhygienic(ident.name)\n-            .filter(move |item| tcx.hygienic_eq(ident, item.ident, parent_def_id))\n-    }\n-\n     /// Returns the associated item with the given name and `AssocKind`, if one exists.\n     pub fn find_by_name_and_kind(\n         &self,"}, {"sha": "941c2a70d11ef91b34f25bd74dcf1e0bdfb0f27b", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -602,6 +602,25 @@ impl<'a> Resolver<'a> {\n \n                 err\n             }\n+            ResolutionError::TraitImplMismatch {\n+                name,\n+                kind,\n+                code,\n+                trait_item_span,\n+                trait_path,\n+            } => {\n+                let mut err = self.session.struct_span_err_with_code(\n+                    span,\n+                    &format!(\n+                        \"item `{}` is an associated {}, which doesn't match its trait `{}`\",\n+                        name, kind, trait_path,\n+                    ),\n+                    code,\n+                );\n+                err.span_label(span, \"does not match trait\");\n+                err.span_label(trait_item_span, \"item in trait\");\n+                err\n+            }\n         }\n     }\n "}, {"sha": "ccaaa2eaf4672d71f719b468017aad57ee00ac65", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 62, "deletions": 23, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1247,15 +1247,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             );\n             let res = res.base_res();\n             if res != Res::Err {\n-                new_id = Some(res.def_id());\n-                let span = trait_ref.path.span;\n                 if let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(\n                     &path,\n                     Some(TypeNS),\n-                    false,\n-                    span,\n+                    true,\n+                    trait_ref.path.span,\n                     CrateLint::SimplePath(trait_ref.ref_id),\n                 ) {\n+                    new_id = Some(res.def_id());\n                     new_val = Some((module, trait_ref.clone()));\n                 }\n             }\n@@ -1324,6 +1323,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(\n+                                                item.id,\n                                                 item.ident,\n                                                 &item.kind,\n                                                 ValueNS,\n@@ -1359,6 +1359,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // If this is a trait impl, ensure the method\n                                                     // exists in trait\n                                                     this.check_trait_item(\n+                                                        item.id,\n                                                         item.ident,\n                                                         &item.kind,\n                                                         ValueNS,\n@@ -1386,6 +1387,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                     // If this is a trait impl, ensure the type\n                                                     // exists in trait\n                                                     this.check_trait_item(\n+                                                        item.id,\n                                                         item.ident,\n                                                         &item.kind,\n                                                         TypeNS,\n@@ -1416,34 +1418,71 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n     fn check_trait_item<F>(\n         &mut self,\n-        ident: Ident,\n+        id: NodeId,\n+        mut ident: Ident,\n         kind: &AssocItemKind,\n         ns: Namespace,\n         span: Span,\n         err: F,\n     ) where\n         F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,\n     {\n-        // If there is a TraitRef in scope for an impl, then the method must be in the\n-        // trait.\n-        if let Some((module, _)) = self.current_trait_ref {\n-            if self\n-                .r\n-                .resolve_ident_in_module(\n-                    ModuleOrUniformRoot::Module(module),\n-                    ident,\n-                    ns,\n-                    &self.parent_scope,\n-                    false,\n-                    span,\n-                )\n-                .is_err()\n-            {\n-                let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n-                let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n-                self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n+        // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n+        let Some((module, _)) = &self.current_trait_ref else { return; };\n+        ident.span.normalize_to_macros_2_0_and_adjust(module.expansion);\n+        let key = self.r.new_key(ident, ns);\n+        let mut binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n+        debug!(?binding);\n+        if binding.is_none() {\n+            // We could not find the trait item in the correct namespace.\n+            // Check the other namespace to report an error.\n+            let ns = match ns {\n+                ValueNS => TypeNS,\n+                TypeNS => ValueNS,\n+                _ => ns,\n+            };\n+            let key = self.r.new_key(ident, ns);\n+            binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);\n+            debug!(?binding);\n+        }\n+        let Some(binding) = binding else {\n+            // We could not find the method: report an error.\n+            let candidate = self.find_similarly_named_assoc_item(ident.name, kind);\n+            let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n+            self.report_error(span, err(ident, &path_names_to_string(path), candidate));\n+            return;\n+        };\n+\n+        let res = binding.res();\n+        let Res::Def(def_kind, _) = res else { bug!() };\n+        match (def_kind, kind) {\n+            (DefKind::AssocTy, AssocItemKind::TyAlias(..))\n+            | (DefKind::AssocFn, AssocItemKind::Fn(..))\n+            | (DefKind::AssocConst, AssocItemKind::Const(..)) => {\n+                self.r.record_partial_res(id, PartialRes::new(res));\n+                return;\n             }\n+            _ => {}\n         }\n+\n+        // The method kind does not correspond to what appeared in the trait, report.\n+        let path = &self.current_trait_ref.as_ref().unwrap().1.path;\n+        let (code, kind) = match kind {\n+            AssocItemKind::Const(..) => (rustc_errors::error_code!(E0323), \"const\"),\n+            AssocItemKind::Fn(..) => (rustc_errors::error_code!(E0324), \"method\"),\n+            AssocItemKind::TyAlias(..) => (rustc_errors::error_code!(E0325), \"type\"),\n+            AssocItemKind::MacCall(..) => span_bug!(span, \"unexpanded macro\"),\n+        };\n+        self.report_error(\n+            span,\n+            ResolutionError::TraitImplMismatch {\n+                name: ident.name,\n+                kind,\n+                code,\n+                trait_path: path_names_to_string(path),\n+                trait_item_span: binding.span,\n+            },\n+        );\n     }\n \n     fn resolve_params(&mut self, params: &'ast [Param]) {"}, {"sha": "25137c6eda763e7c94767e827b66c536970442e0", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -262,6 +262,14 @@ enum ResolutionError<'a> {\n     SelfInGenericParamDefault,\n     /// Error E0767: use of unreachable label\n     UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },\n+    /// Error E0323, E0324, E0325: mismatch between trait item and impl item.\n+    TraitImplMismatch {\n+        name: Symbol,\n+        kind: &'static str,\n+        trait_path: String,\n+        trait_item_span: Span,\n+        code: rustc_errors::DiagnosticId,\n+    },\n }\n \n enum VisResolutionError<'a> {"}, {"sha": "6e2ef27f10817621bedf80f197b35d1ef712762e", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 2, "deletions": 104, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1,8 +1,7 @@\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, TyCtxt};\n \n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n@@ -125,115 +124,14 @@ fn associated_item_from_impl_item_ref(\n         hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n     };\n \n-    let trait_item_def_id = impl_item_base_id(tcx, parent_def_id, impl_item_ref);\n-\n     ty::AssocItem {\n         ident: impl_item_ref.ident,\n         kind,\n         vis: tcx.visibility(def_id),\n         defaultness: impl_item_ref.defaultness,\n         def_id: def_id.to_def_id(),\n-        trait_item_def_id,\n+        trait_item_def_id: impl_item_ref.trait_item_def_id,\n         container: ty::ImplContainer(parent_def_id.to_def_id()),\n         fn_has_self_parameter: has_self,\n     }\n }\n-\n-fn impl_item_base_id<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    parent_def_id: LocalDefId,\n-    impl_item: &hir::ImplItemRef,\n-) -> Option<DefId> {\n-    let impl_trait_ref = tcx.impl_trait_ref(parent_def_id)?;\n-\n-    // If the trait reference itself is erroneous (so the compilation is going\n-    // to fail), skip checking the items here -- the `impl_item` table in `tcx`\n-    // isn't populated for such impls.\n-    if impl_trait_ref.references_error() {\n-        return None;\n-    }\n-\n-    // Locate trait items\n-    let associated_items = tcx.associated_items(impl_trait_ref.def_id);\n-\n-    // Match item against trait\n-    let mut items = associated_items.filter_by_name(tcx, impl_item.ident, impl_trait_ref.def_id);\n-\n-    let mut trait_item = items.next()?;\n-\n-    let is_compatible = |ty: &&ty::AssocItem| match (ty.kind, &impl_item.kind) {\n-        (ty::AssocKind::Const, hir::AssocItemKind::Const) => true,\n-        (ty::AssocKind::Fn, hir::AssocItemKind::Fn { .. }) => true,\n-        (ty::AssocKind::Type, hir::AssocItemKind::Type) => true,\n-        _ => false,\n-    };\n-\n-    // If we don't have a compatible item, we'll use the first one whose name matches\n-    // to report an error.\n-    let mut compatible_kind = is_compatible(&trait_item);\n-\n-    if !compatible_kind {\n-        if let Some(ty_trait_item) = items.find(is_compatible) {\n-            compatible_kind = true;\n-            trait_item = ty_trait_item;\n-        }\n-    }\n-\n-    if compatible_kind {\n-        Some(trait_item.def_id)\n-    } else {\n-        report_mismatch_error(tcx, trait_item.def_id, impl_trait_ref, impl_item);\n-        None\n-    }\n-}\n-\n-#[inline(never)]\n-#[cold]\n-fn report_mismatch_error<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    trait_item_def_id: DefId,\n-    impl_trait_ref: ty::TraitRef<'tcx>,\n-    impl_item: &hir::ImplItemRef,\n-) {\n-    let mut err = match impl_item.kind {\n-        hir::AssocItemKind::Const => {\n-            // Find associated const definition.\n-            struct_span_err!(\n-                tcx.sess,\n-                impl_item.span,\n-                E0323,\n-                \"item `{}` is an associated const, which doesn't match its trait `{}`\",\n-                impl_item.ident,\n-                impl_trait_ref.print_only_trait_path()\n-            )\n-        }\n-\n-        hir::AssocItemKind::Fn { .. } => {\n-            struct_span_err!(\n-                tcx.sess,\n-                impl_item.span,\n-                E0324,\n-                \"item `{}` is an associated method, which doesn't match its trait `{}`\",\n-                impl_item.ident,\n-                impl_trait_ref.print_only_trait_path()\n-            )\n-        }\n-\n-        hir::AssocItemKind::Type => {\n-            struct_span_err!(\n-                tcx.sess,\n-                impl_item.span,\n-                E0325,\n-                \"item `{}` is an associated type, which doesn't match its trait `{}`\",\n-                impl_item.ident,\n-                impl_trait_ref.print_only_trait_path()\n-            )\n-        }\n-    };\n-\n-    err.span_label(impl_item.span, \"does not match trait\");\n-    if let Some(trait_span) = tcx.hir().span_if_local(trait_item_def_id) {\n-        err.span_label(trait_span, \"item in trait\");\n-    }\n-    err.emit();\n-}"}, {"sha": "1f99a9b0536d0e967a54d17ddcef6d170d387162", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 83, "deletions": 49, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -93,62 +93,96 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         span: Span,\n         trait_def_id: DefId,\n         trait_segment: &'_ hir::PathSegment<'_>,\n+        is_impl: bool,\n     ) {\n+        if self.tcx().features().unboxed_closures {\n+            return;\n+        }\n+\n         let trait_def = self.tcx().trait_def(trait_def_id);\n+        if !trait_def.paren_sugar {\n+            if trait_segment.args().parenthesized {\n+                // For now, require that parenthetical notation be used only with `Fn()` etc.\n+                let mut err = feature_err(\n+                    &self.tcx().sess.parse_sess,\n+                    sym::unboxed_closures,\n+                    span,\n+                    \"parenthetical notation is only stable when used with `Fn`-family traits\",\n+                );\n+                err.emit();\n+            }\n \n-        if !self.tcx().features().unboxed_closures\n-            && trait_segment.args().parenthesized != trait_def.paren_sugar\n-        {\n-            let sess = &self.tcx().sess.parse_sess;\n+            return;\n+        }\n+\n+        let sess = self.tcx().sess;\n+\n+        if !trait_segment.args().parenthesized {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n-            let (msg, sugg) = if trait_def.paren_sugar {\n-                (\n-                    \"the precise format of `Fn`-family traits' type parameters is subject to \\\n-                     change\",\n-                    Some(format!(\n-                        \"{}{} -> {}\",\n-                        trait_segment.ident,\n-                        trait_segment\n-                            .args\n-                            .as_ref()\n-                            .and_then(|args| args.args.get(0))\n-                            .and_then(|arg| match arg {\n-                                hir::GenericArg::Type(ty) => match ty.kind {\n-                                    hir::TyKind::Tup(t) => t\n-                                        .iter()\n-                                        .map(|e| sess.source_map().span_to_snippet(e.span))\n-                                        .collect::<Result<Vec<_>, _>>()\n-                                        .map(|a| a.join(\", \")),\n-                                    _ => sess.source_map().span_to_snippet(ty.span),\n-                                }\n-                                .map(|s| format!(\"({})\", s))\n-                                .ok(),\n-                                _ => None,\n-                            })\n-                            .unwrap_or_else(|| \"()\".to_string()),\n-                        trait_segment\n-                            .args()\n-                            .bindings\n-                            .iter()\n-                            .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {\n-                                (true, hir::TypeBindingKind::Equality { ty }) => {\n-                                    sess.source_map().span_to_snippet(ty.span).ok()\n-                                }\n-                                _ => None,\n-                            })\n-                            .unwrap_or_else(|| \"()\".to_string()),\n-                    )),\n-                )\n-            } else {\n-                (\"parenthetical notation is only stable when used with `Fn`-family traits\", None)\n-            };\n-            let mut err = feature_err(sess, sym::unboxed_closures, span, msg);\n-            if let Some(sugg) = sugg {\n-                let msg = \"use parenthetical notation instead\";\n-                err.span_suggestion(span, msg, sugg, Applicability::MaybeIncorrect);\n+            let mut err = feature_err(\n+                &sess.parse_sess,\n+                sym::unboxed_closures,\n+                span,\n+                \"the precise format of `Fn`-family traits' type parameters is subject to change\",\n+            );\n+            // Do not suggest the other syntax if we are in trait impl:\n+            // the desugaring would contain an associated type constrait.\n+            if !is_impl {\n+                let args = trait_segment\n+                    .args\n+                    .as_ref()\n+                    .and_then(|args| args.args.get(0))\n+                    .and_then(|arg| match arg {\n+                        hir::GenericArg::Type(ty) => match ty.kind {\n+                            hir::TyKind::Tup(t) => t\n+                                .iter()\n+                                .map(|e| sess.source_map().span_to_snippet(e.span))\n+                                .collect::<Result<Vec<_>, _>>()\n+                                .map(|a| a.join(\", \")),\n+                            _ => sess.source_map().span_to_snippet(ty.span),\n+                        }\n+                        .map(|s| format!(\"({})\", s))\n+                        .ok(),\n+                        _ => None,\n+                    })\n+                    .unwrap_or_else(|| \"()\".to_string());\n+                let ret = trait_segment\n+                    .args()\n+                    .bindings\n+                    .iter()\n+                    .find_map(|b| match (b.ident.name == sym::Output, &b.kind) {\n+                        (true, hir::TypeBindingKind::Equality { ty }) => {\n+                            sess.source_map().span_to_snippet(ty.span).ok()\n+                        }\n+                        _ => None,\n+                    })\n+                    .unwrap_or_else(|| \"()\".to_string());\n+                err.span_suggestion(\n+                    span,\n+                    \"use parenthetical notation instead\",\n+                    format!(\"{}{} -> {}\", trait_segment.ident, args, ret),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n             err.emit();\n         }\n+\n+        if is_impl {\n+            let trait_name = self.tcx().def_path_str(trait_def_id);\n+            struct_span_err!(\n+                self.tcx().sess,\n+                span,\n+                E0183,\n+                \"manual implementations of `{}` are experimental\",\n+                trait_name,\n+            )\n+            .span_label(\n+                span,\n+                format!(\"manual implementations of `{}` are experimental\", trait_name),\n+            )\n+            .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to enable\")\n+            .emit();\n+        }\n     }\n \n     pub(crate) fn complain_about_assoc_type_not_found<I>("}, {"sha": "63d69d32c197e7982ae590ca997c2472b2bc5c47", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -669,6 +669,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_ref.trait_def_id().unwrap_or_else(|| FatalError.raise()),\n             self_ty,\n             trait_ref.path.segments.last().unwrap(),\n+            true,\n         )\n     }\n \n@@ -765,7 +766,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let infer_args = trait_segment.infer_args;\n \n         self.prohibit_generics(trait_ref.path.segments.split_last().unwrap().1);\n-        self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment);\n+        self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment, false);\n \n         self.instantiate_poly_trait_ref_inner(\n             hir_id,\n@@ -822,9 +823,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         trait_segment: &hir::PathSegment<'_>,\n+        is_impl: bool,\n     ) -> ty::TraitRef<'tcx> {\n-        let (substs, _) =\n-            self.create_substs_for_ast_trait_ref(span, trait_def_id, self_ty, trait_segment);\n+        let (substs, _) = self.create_substs_for_ast_trait_ref(\n+            span,\n+            trait_def_id,\n+            self_ty,\n+            trait_segment,\n+            is_impl,\n+        );\n         let assoc_bindings = self.create_assoc_bindings_for_generic_args(trait_segment.args());\n         if let Some(b) = assoc_bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n@@ -839,8 +846,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         trait_def_id: DefId,\n         self_ty: Ty<'tcx>,\n         trait_segment: &'a hir::PathSegment<'a>,\n+        is_impl: bool,\n     ) -> (SubstsRef<'tcx>, GenericArgCountResult) {\n-        self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment);\n+        self.complain_about_internal_fn_trait(span, trait_def_id, trait_segment, is_impl);\n \n         self.create_substs_for_ast_path(\n             span,\n@@ -1932,7 +1940,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(\"qpath_to_ty: self_type={:?}\", self_ty);\n \n-        let trait_ref = self.ast_path_to_mono_trait_ref(span, trait_def_id, self_ty, trait_segment);\n+        let trait_ref =\n+            self.ast_path_to_mono_trait_ref(span, trait_def_id, self_ty, trait_segment, false);\n \n         let item_substs = self.create_substs_for_associated_item(\n             tcx,"}, {"sha": "d2dc21d84f6f112e125f90b301b7e803508c4934", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -371,7 +371,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Trait must have a method named `m_name` and it should not have\n         // type parameters or early-bound regions.\n         let tcx = self.tcx;\n-        let method_item = match self.associated_item(trait_def_id, m_name, Namespace::ValueNS) {\n+        let method_item = match self.associated_value(trait_def_id, m_name) {\n             Some(method_item) => method_item,\n             None => {\n                 tcx.sess.delay_span_bug(\n@@ -540,15 +540,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Finds item with name `item_name` defined in impl/trait `def_id`\n     /// and return it, or `None`, if no such item was defined there.\n-    pub fn associated_item(\n-        &self,\n-        def_id: DefId,\n-        item_name: Ident,\n-        ns: Namespace,\n-    ) -> Option<ty::AssocItem> {\n+    pub fn associated_value(&self, def_id: DefId, item_name: Ident) -> Option<ty::AssocItem> {\n         self.tcx\n             .associated_items(def_id)\n-            .find_by_name_and_namespace(self.tcx, item_name, ns, def_id)\n+            .find_by_name_and_namespace(self.tcx, item_name, Namespace::ValueNS, def_id)\n             .copied()\n     }\n }"}, {"sha": "b704ff8c7cb2a2546dfa35918602589e5850cd6b", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1915,7 +1915,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .collect()\n             } else {\n                 self.fcx\n-                    .associated_item(def_id, name, Namespace::ValueNS)\n+                    .associated_value(def_id, name)\n                     .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {"}, {"sha": "f2fe4403d558ccab3d6284e93b65e97bd3f12465", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -5,7 +5,6 @@ use crate::check::FnCtxt;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n@@ -99,16 +98,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     CandidateSource::ImplSource(impl_did) => {\n                         // Provide the best span we can. Use the item, if local to crate, else\n                         // the impl, if local to crate (item may be defaulted), else nothing.\n-                        let item = match self\n-                            .associated_item(impl_did, item_name, Namespace::ValueNS)\n-                            .or_else(|| {\n-                                let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n-                                self.associated_item(\n-                                    impl_trait_ref.def_id,\n-                                    item_name,\n-                                    Namespace::ValueNS,\n-                                )\n-                            }) {\n+                        let item = match self.associated_value(impl_did, item_name).or_else(|| {\n+                            let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n+                            self.associated_value(impl_trait_ref.def_id, item_name)\n+                        }) {\n                             Some(item) => item,\n                             None => continue,\n                         };\n@@ -187,11 +180,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n-                        let item =\n-                            match self.associated_item(trait_did, item_name, Namespace::ValueNS) {\n-                                Some(item) => item,\n-                                None => continue,\n-                            };\n+                        let item = match self.associated_value(trait_did, item_name) {\n+                            Some(item) => item,\n+                            None => continue,\n+                        };\n                         let item_span = self\n                             .tcx\n                             .sess\n@@ -271,16 +263,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // Suggest clamping down the type if the method that is being attempted to\n                     // be used exists at all, and the type is an ambiguous numeric type\n                     // ({integer}/{float}).\n-                    let mut candidates = all_traits(self.tcx).into_iter().filter_map(|info| {\n-                        self.associated_item(info.def_id, item_name, Namespace::ValueNS)\n-                    });\n+                    let mut candidates = all_traits(self.tcx)\n+                        .into_iter()\n+                        .filter_map(|info| self.associated_value(info.def_id, item_name));\n                     // There are methods that are defined on the primitive types and won't be\n                     // found when exploring `all_traits`, but we also need them to be acurate on\n                     // our suggestions (#47759).\n                     let fund_assoc = |opt_def_id: Option<DefId>| {\n-                        opt_def_id\n-                            .and_then(|id| self.associated_item(id, item_name, Namespace::ValueNS))\n-                            .is_some()\n+                        opt_def_id.and_then(|id| self.associated_value(id, item_name)).is_some()\n                     };\n                     let lang_items = tcx.lang_items();\n                     let found_candidate = candidates.next().is_some()\n@@ -398,11 +388,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                             .inherent_impls(adt_deref.did)\n                                             .iter()\n                                             .filter_map(|def_id| {\n-                                                self.associated_item(\n-                                                    *def_id,\n-                                                    item_name,\n-                                                    Namespace::ValueNS,\n-                                                )\n+                                                self.associated_value(*def_id, item_name)\n                                             })\n                                             .count()\n                                             >= 1\n@@ -515,9 +501,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 .iter()\n                                 .copied()\n                                 .filter(|def_id| {\n-                                    if let Some(assoc) =\n-                                        self.associated_item(*def_id, item_name, Namespace::ValueNS)\n-                                    {\n+                                    if let Some(assoc) = self.associated_value(*def_id, item_name) {\n                                         // Check for both mode is the same so we avoid suggesting\n                                         // incorrect associated item.\n                                         match (mode, assoc.fn_has_self_parameter, source) {\n@@ -1587,7 +1571,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }) && (type_is_local || info.def_id.is_local())\n                     && self\n-                        .associated_item(info.def_id, item_name, Namespace::ValueNS)\n+                        .associated_value(info.def_id, item_name)\n                         .filter(|item| {\n                             if let ty::AssocKind::Fn = item.kind {\n                                 let id = item"}, {"sha": "055818f55f0c8f6a84dd476db41bbca640a4f0b3", "filename": "compiler/rustc_typeck/src/coherence/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fmod.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -121,28 +121,6 @@ fn enforce_trait_manually_implementable(\n             return;\n         }\n     }\n-\n-    let trait_name = if did == li.fn_trait() {\n-        \"Fn\"\n-    } else if did == li.fn_mut_trait() {\n-        \"FnMut\"\n-    } else if did == li.fn_once_trait() {\n-        \"FnOnce\"\n-    } else {\n-        return; // everything OK\n-    };\n-\n-    let span = impl_header_span(tcx, impl_def_id);\n-    struct_span_err!(\n-        tcx.sess,\n-        span,\n-        E0183,\n-        \"manual implementations of `{}` are experimental\",\n-        trait_name\n-    )\n-    .span_label(span, format!(\"manual implementations of `{}` are experimental\", trait_name))\n-    .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to enable\")\n-    .emit();\n }\n \n /// We allow impls of marker traits to overlap, so they can't override impls"}, {"sha": "41fb1456f869e7f68ef344f6f9cf73b0b045e180", "filename": "src/test/ui/feature-gates/feature-gate-in_band_lifetimes.stderr", "status": "modified", "additions": 84, "deletions": 84, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-in_band_lifetimes.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1,87 +1,3 @@\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:50:14\n-   |\n-LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |     -        ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n-   |\n-LL | impl MyTrait<'a> for Y<&'a u8> {\n-   |     -                   ^^ undeclared lifetime\n-   |     |\n-   |     help: consider introducing lifetime `'a` here: `<'a>`\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-\n-error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n-   |\n-LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n-   |                               ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'a` here\n-   |\n-LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'a` here\n-   |\n-LL |     fn my_lifetime<'a>(&self) -> &'a u8 { self.0 }\n-   |                   ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n-   |\n-LL |     fn any_lifetime() -> &'b u8 { &0 }\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn any_lifetime<'b>() -> &'b u8 { &0 }\n-   |                    ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:57:27\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-   |                           ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ++++\n-\n-error[E0261]: use of undeclared lifetime name `'b`\n-  --> $DIR/feature-gate-in_band_lifetimes.rs:57:40\n-   |\n-LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n-   |                                        ^^ undeclared lifetime\n-   |\n-   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n-help: consider introducing lifetime `'b` here\n-   |\n-LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n-   |     ++++\n-help: consider introducing lifetime `'b` here\n-   |\n-LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n-   |                         ++++\n-\n error[E0261]: use of undeclared lifetime name `'x`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:3:12\n    |\n@@ -178,6 +94,90 @@ help: consider introducing lifetime `'a` here\n LL |     fn inner<'a>(&self) -> &'a u8 {\n    |             ++++\n \n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:50:14\n+   |\n+LL | impl MyTrait<'a> for Y<&'a u8> {\n+   |     -        ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:50:25\n+   |\n+LL | impl MyTrait<'a> for Y<&'a u8> {\n+   |     -                   ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:53:31\n+   |\n+LL |     fn my_lifetime(&self) -> &'a u8 { self.0 }\n+   |                               ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+help: consider introducing lifetime `'a` here\n+   |\n+LL | impl<'a> MyTrait<'a> for Y<&'a u8> {\n+   |     ++++\n+help: consider introducing lifetime `'a` here\n+   |\n+LL |     fn my_lifetime<'a>(&self) -> &'a u8 { self.0 }\n+   |                   ++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:55:27\n+   |\n+LL |     fn any_lifetime() -> &'b u8 { &0 }\n+   |                           ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn any_lifetime<'b>() -> &'b u8 { &0 }\n+   |                    ++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:57:27\n+   |\n+LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n+   |                           ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n+   |                         ++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/feature-gate-in_band_lifetimes.rs:57:40\n+   |\n+LL |     fn borrowed_lifetime(&'b self) -> &'b u8 { &*self.0 }\n+   |                                        ^^ undeclared lifetime\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+help: consider introducing lifetime `'b` here\n+   |\n+LL | impl<'b> MyTrait<'a> for Y<&'a u8> {\n+   |     ++++\n+help: consider introducing lifetime `'b` here\n+   |\n+LL |     fn borrowed_lifetime<'b>(&'b self) -> &'b u8 { &*self.0 }\n+   |                         ++++\n+\n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/feature-gate-in_band_lifetimes.rs:43:27\n    |"}, {"sha": "f647380ef9bc4dd7182fb2638ac7ca8ad87abfca", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures-manual-impls.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures-manual-impls.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -38,11 +38,27 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6\n    |\n LL | impl Fn<()> for Foo {\n-   |      ^^^^^^ help: use parenthetical notation instead: `Fn() -> ()`\n+   |      ^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n+error[E0183]: manual implementations of `Fn` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:6\n+   |\n+LL | impl Fn<()> for Foo {\n+   |      ^^^^^^ manual implementations of `Fn` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n+error[E0183]: manual implementations of `FnOnce` are experimental\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6\n+   |\n+LL | impl FnOnce() for Foo1 {\n+   |      ^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |\n+   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n+\n error[E0229]: associated type bindings are not allowed here\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:6\n    |\n@@ -53,49 +69,33 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n   --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6\n    |\n LL | impl FnMut<()> for Bar {\n-   |      ^^^^^^^^^ help: use parenthetical notation instead: `FnMut() -> ()`\n-   |\n-   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n-   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n-\n-error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6\n-   |\n-LL | impl FnOnce<()> for Baz {\n-   |      ^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce() -> ()`\n+   |      ^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0183]: manual implementations of `Fn` are experimental\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:9:1\n-   |\n-LL | impl Fn<()> for Foo {\n-   | ^^^^^^^^^^^^^^^^^^^ manual implementations of `Fn` are experimental\n-   |\n-   = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n-\n error[E0183]: manual implementations of `FnMut` are experimental\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:1\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:23:6\n    |\n LL | impl FnMut<()> for Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnMut` are experimental\n+   |      ^^^^^^^^^ manual implementations of `FnMut` are experimental\n    |\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n-error[E0183]: manual implementations of `FnOnce` are experimental\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:16:1\n+error[E0658]: the precise format of `Fn`-family traits' type parameters is subject to change\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6\n    |\n-LL | impl FnOnce() for Foo1 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+LL | impl FnOnce<()> for Baz {\n+   |      ^^^^^^^^^^\n    |\n+   = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0183]: manual implementations of `FnOnce` are experimental\n-  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:1\n+  --> $DIR/feature-gate-unboxed-closures-manual-impls.rs:30:6\n    |\n LL | impl FnOnce<()> for Baz {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |      ^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n    |\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n "}, {"sha": "a763c28de602b65931251f923dad642119057d14", "filename": "src/test/ui/feature-gates/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unboxed-closures.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -11,16 +11,16 @@ error[E0658]: the precise format of `Fn`-family traits' type parameters is subje\n   --> $DIR/feature-gate-unboxed-closures.rs:5:6\n    |\n LL | impl FnOnce<(u32, u32)> for Test {\n-   |      ^^^^^^^^^^^^^^^^^^ help: use parenthetical notation instead: `FnOnce(u32, u32) -> ()`\n+   |      ^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0183]: manual implementations of `FnOnce` are experimental\n-  --> $DIR/feature-gate-unboxed-closures.rs:5:1\n+  --> $DIR/feature-gate-unboxed-closures.rs:5:6\n    |\n LL | impl FnOnce<(u32, u32)> for Test {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n+   |      ^^^^^^^^^^^^^^^^^^ manual implementations of `FnOnce` are experimental\n    |\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n "}, {"sha": "928a65938b7cee539a25b1aa31f9ecc0ab76a7d1", "filename": "src/test/ui/issues/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -5,8 +5,7 @@ fn foo<T>() {\n \n     impl<T> Drop for Foo<T> {\n         //~^ ERROR this struct takes 0 generic arguments but 1 generic argument\n-        //~| ERROR the type parameter `T` is not constrained by the impl trait, self type, or predicates\n         fn drop(&mut self) {}\n     }\n }\n-fn main() { }\n+fn main() {}"}, {"sha": "4d8eb6360e640f4e0c77e599d720c7194024c067", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -23,13 +23,7 @@ note: struct defined here, with 0 generic parameters\n LL |     struct Foo {\n    |            ^^^\n \n-error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-3214.rs:6:10\n-   |\n-LL |     impl<T> Drop for Foo<T> {\n-   |          ^ unconstrained type parameter\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0107, E0207, E0401.\n+Some errors have detailed explanations: E0107, E0401.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "bf335868643ca25b03b5862f43689eaf1d74c4d1", "filename": "src/test/ui/span/impl-wrong-item-for-trait.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -29,12 +29,10 @@ impl Foo for FooTypeForMethod {\n     //~^ ERROR E0046\n     type bar = u64;\n     //~^ ERROR E0325\n-    //~| ERROR E0437\n     const MY_CONST: u32 = 1;\n }\n \n-impl Debug for FooTypeForMethod {\n-}\n-//~^^ ERROR E0046\n+impl Debug for FooTypeForMethod {}\n+//~^ ERROR E0046\n \n-fn main () {}\n+fn main() {}"}, {"sha": "82ef13f3362d461a9eeee3f3c542059a2e9f4921", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1,8 +1,11 @@\n-error[E0437]: type `bar` is not a member of trait `Foo`\n-  --> $DIR/impl-wrong-item-for-trait.rs:30:5\n+error[E0323]: item `bar` is an associated const, which doesn't match its trait `Foo`\n+  --> $DIR/impl-wrong-item-for-trait.rs:12:5\n    |\n-LL |     type bar = u64;\n-   |     ^^^^^^^^^^^^^^^ not a member of trait `Foo`\n+LL |     fn bar(&self);\n+   |     -------------- item in trait\n+...\n+LL |     const bar: u64 = 1;\n+   |     ^^^^^^^^^^^^^^^^^^^ does not match trait\n \n error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:22:5\n@@ -13,15 +16,6 @@ LL |     const MY_CONST: u32;\n LL |     fn MY_CONST() {}\n    |     ^^^^^^^^^^^^^^^^ does not match trait\n \n-error[E0323]: item `bar` is an associated const, which doesn't match its trait `Foo`\n-  --> $DIR/impl-wrong-item-for-trait.rs:12:5\n-   |\n-LL |     fn bar(&self);\n-   |     -------------- item in trait\n-...\n-LL |     const bar: u64 = 1;\n-   |     ^^^^^^^^^^^^^^^^^^^ does not match trait\n-\n error[E0325]: item `bar` is an associated type, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:30:5\n    |\n@@ -59,14 +53,14 @@ LL | impl Foo for FooTypeForMethod {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `bar` in implementation\n \n error[E0046]: not all trait items implemented, missing: `fmt`\n-  --> $DIR/impl-wrong-item-for-trait.rs:36:1\n+  --> $DIR/impl-wrong-item-for-trait.rs:35:1\n    |\n-LL | impl Debug for FooTypeForMethod {\n+LL | impl Debug for FooTypeForMethod {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n    = help: implement the missing item: `fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> { todo!() }`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0046, E0323, E0324, E0325, E0437.\n+Some errors have detailed explanations: E0046, E0323, E0324, E0325.\n For more information about an error, try `rustc --explain E0046`."}, {"sha": "d436088e4265338d598c79c4b55114ed2d4fba5f", "filename": "src/test/ui/stability-attribute/generics-default-stability-trait.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -0,0 +1,33 @@\n+// aux-build:unstable_generic_param.rs\n+#![feature(unstable_default6)]\n+\n+extern crate unstable_generic_param;\n+\n+use unstable_generic_param::*;\n+\n+struct R;\n+\n+impl Trait1 for S {\n+    fn foo() -> () { () } // ok\n+}\n+\n+struct S;\n+\n+impl Trait1<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait1<isize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> isize { 0 }\n+}\n+\n+impl Trait2<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n+    fn foo() -> usize { 0 }\n+}\n+\n+impl Trait3<usize> for S {\n+    fn foo() -> usize { 0 } // ok\n+}\n+\n+fn main() {\n+}"}, {"sha": "03e61b78e060f3d5dd627616b10b48ee4c72a26d", "filename": "src/test/ui/stability-attribute/generics-default-stability-trait.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability-trait.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -0,0 +1,27 @@\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability-trait.rs:16:13\n+   |\n+LL | impl Trait1<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability-trait.rs:20:13\n+   |\n+LL | impl Trait1<isize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'unstable_default'\n+  --> $DIR/generics-default-stability-trait.rs:24:13\n+   |\n+LL | impl Trait2<usize> for S {\n+   |             ^^^^^\n+   |\n+   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "c5132861f855c07463965259b8e8eb7739cd9acd", "filename": "src/test/ui/stability-attribute/generics-default-stability.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.rs?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -13,18 +13,6 @@ impl Trait1 for S {\n \n struct S;\n \n-impl Trait1<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n-    fn foo() -> usize { 0 }\n-}\n-\n-impl Trait1<isize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n-    fn foo() -> isize { 0 }\n-}\n-\n-impl Trait2<usize> for S { //~ ERROR use of unstable library feature 'unstable_default'\n-    fn foo() -> usize { 0 }\n-}\n-\n impl Trait3<usize> for S {\n     fn foo() -> usize { 0 } // ok\n }"}, {"sha": "2a9d34a15c4924cba69ddc9c8e616f69d06721eb", "filename": "src/test/ui/stability-attribute/generics-default-stability.stderr", "status": "modified", "additions": 69, "deletions": 93, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec4bcaac450279b029f3480b8b8f1b82ab36a5eb/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fgenerics-default-stability.stderr?ref=ec4bcaac450279b029f3480b8b8f1b82ab36a5eb", "patch": "@@ -1,493 +1,469 @@\n-error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:16:13\n-   |\n-LL | impl Trait1<usize> for S {\n-   |             ^^^^^\n-   |\n-   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n-\n-error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:20:13\n-   |\n-LL | impl Trait1<isize> for S {\n-   |             ^^^^^\n-   |\n-   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n-\n-error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:24:13\n-   |\n-LL | impl Trait2<usize> for S {\n-   |             ^^^^^\n-   |\n-   = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n-\n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:83:29\n+  --> $DIR/generics-default-stability.rs:71:29\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n    |                             ^^^^^^^\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:83:12\n+  --> $DIR/generics-default-stability.rs:71:12\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:88:12\n+  --> $DIR/generics-default-stability.rs:76:12\n    |\n LL |     let _: Struct4 = STRUCT4;\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:89:12\n+  --> $DIR/generics-default-stability.rs:77:12\n    |\n LL |     let _: Struct4<usize> = STRUCT4;\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:90:29\n+  --> $DIR/generics-default-stability.rs:78:29\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n    |                             ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct4`: test\n-  --> $DIR/generics-default-stability.rs:90:12\n+  --> $DIR/generics-default-stability.rs:78:12\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:96:29\n+  --> $DIR/generics-default-stability.rs:84:29\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n    |                             ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:96:12\n+  --> $DIR/generics-default-stability.rs:84:12\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:101:12\n+  --> $DIR/generics-default-stability.rs:89:12\n    |\n LL |     let _: Struct5 = STRUCT5;\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:102:12\n+  --> $DIR/generics-default-stability.rs:90:12\n    |\n LL |     let _: Struct5<usize> = STRUCT5;\n    |            ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:104:29\n+  --> $DIR/generics-default-stability.rs:92:29\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n    |                             ^^^^^^^\n \n warning: use of deprecated struct `unstable_generic_param::Struct5`: test\n-  --> $DIR/generics-default-stability.rs:104:12\n+  --> $DIR/generics-default-stability.rs:92:12\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n    |            ^^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:159:28\n+  --> $DIR/generics-default-stability.rs:147:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(1);\n    |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:159:12\n+  --> $DIR/generics-default-stability.rs:147:12\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(1);\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:163:12\n+  --> $DIR/generics-default-stability.rs:151:12\n    |\n LL |     let _: Alias4 = ALIAS4;\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:164:12\n+  --> $DIR/generics-default-stability.rs:152:12\n    |\n LL |     let _: Alias4<usize> = ALIAS4;\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:165:28\n+  --> $DIR/generics-default-stability.rs:153:28\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(0);\n    |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias4`: test\n-  --> $DIR/generics-default-stability.rs:165:12\n+  --> $DIR/generics-default-stability.rs:153:12\n    |\n LL |     let _: Alias4<isize> = Alias4::Some(0);\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:170:28\n+  --> $DIR/generics-default-stability.rs:158:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(1);\n    |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:170:12\n+  --> $DIR/generics-default-stability.rs:158:12\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(1);\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:174:12\n+  --> $DIR/generics-default-stability.rs:162:12\n    |\n LL |     let _: Alias5 = ALIAS5;\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:175:12\n+  --> $DIR/generics-default-stability.rs:163:12\n    |\n LL |     let _: Alias5<usize> = ALIAS5;\n    |            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:177:28\n+  --> $DIR/generics-default-stability.rs:165:28\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n    |                            ^^^^^^\n \n warning: use of deprecated type alias `unstable_generic_param::Alias5`: test\n-  --> $DIR/generics-default-stability.rs:177:12\n+  --> $DIR/generics-default-stability.rs:165:12\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n    |            ^^^^^^\n \n warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n-  --> $DIR/generics-default-stability.rs:231:34\n+  --> $DIR/generics-default-stability.rs:219:34\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(1);\n    |                                  ^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n-  --> $DIR/generics-default-stability.rs:231:12\n+  --> $DIR/generics-default-stability.rs:219:12\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(1);\n    |            ^^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n-  --> $DIR/generics-default-stability.rs:235:12\n+  --> $DIR/generics-default-stability.rs:223:12\n    |\n LL |     let _: Enum4 = ENUM4;\n    |            ^^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n-  --> $DIR/generics-default-stability.rs:236:12\n+  --> $DIR/generics-default-stability.rs:224:12\n    |\n LL |     let _: Enum4<usize> = ENUM4;\n    |            ^^^^^\n \n warning: use of deprecated variant `unstable_generic_param::Enum4::Some`: test\n-  --> $DIR/generics-default-stability.rs:237:34\n+  --> $DIR/generics-default-stability.rs:225:34\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(0);\n    |                                  ^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum4`: test\n-  --> $DIR/generics-default-stability.rs:237:12\n+  --> $DIR/generics-default-stability.rs:225:12\n    |\n LL |     let _: Enum4<isize> = Enum4::Some(0);\n    |            ^^^^^\n \n warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n-  --> $DIR/generics-default-stability.rs:242:34\n+  --> $DIR/generics-default-stability.rs:230:34\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(1);\n    |                                  ^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n-  --> $DIR/generics-default-stability.rs:242:12\n+  --> $DIR/generics-default-stability.rs:230:12\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(1);\n    |            ^^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n-  --> $DIR/generics-default-stability.rs:246:12\n+  --> $DIR/generics-default-stability.rs:234:12\n    |\n LL |     let _: Enum5 = ENUM5;\n    |            ^^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n-  --> $DIR/generics-default-stability.rs:247:12\n+  --> $DIR/generics-default-stability.rs:235:12\n    |\n LL |     let _: Enum5<usize> = ENUM5;\n    |            ^^^^^\n \n warning: use of deprecated variant `unstable_generic_param::Enum5::Some`: test\n-  --> $DIR/generics-default-stability.rs:249:34\n+  --> $DIR/generics-default-stability.rs:237:34\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(0);\n    |                                  ^^^^\n \n warning: use of deprecated enum `unstable_generic_param::Enum5`: test\n-  --> $DIR/generics-default-stability.rs:249:12\n+  --> $DIR/generics-default-stability.rs:237:12\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(0);\n    |            ^^^^^\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:35:20\n+  --> $DIR/generics-default-stability.rs:23:20\n    |\n LL |     let _: Struct1<isize> = Struct1 { field: 1 };\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:39:20\n+  --> $DIR/generics-default-stability.rs:27:20\n    |\n LL |     let _: Struct1<usize> = STRUCT1;\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:40:20\n+  --> $DIR/generics-default-stability.rs:28:20\n    |\n LL |     let _: Struct1<isize> = Struct1 { field: 0 };\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:69:27\n+  --> $DIR/generics-default-stability.rs:57:27\n    |\n LL |     let _: Struct3<isize, usize> = STRUCT3;\n    |                           ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:71:27\n+  --> $DIR/generics-default-stability.rs:59:27\n    |\n LL |     let _: Struct3<isize, isize> = Struct3 { field1: 0, field2: 0 };\n    |                           ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:72:27\n+  --> $DIR/generics-default-stability.rs:60:27\n    |\n LL |     let _: Struct3<usize, usize> = Struct3 { field1: 0, field2: 0 };\n    |                           ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:96:20\n+  --> $DIR/generics-default-stability.rs:84:20\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:102:20\n+  --> $DIR/generics-default-stability.rs:90:20\n    |\n LL |     let _: Struct5<usize> = STRUCT5;\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:104:20\n+  --> $DIR/generics-default-stability.rs:92:20\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n    |                    ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:112:19\n+  --> $DIR/generics-default-stability.rs:100:19\n    |\n LL |     let _: Alias1<isize> = Alias1::Some(1);\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:116:19\n+  --> $DIR/generics-default-stability.rs:104:19\n    |\n LL |     let _: Alias1<usize> = ALIAS1;\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:117:19\n+  --> $DIR/generics-default-stability.rs:105:19\n    |\n LL |     let _: Alias1<isize> = Alias1::Some(0);\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:145:26\n+  --> $DIR/generics-default-stability.rs:133:26\n    |\n LL |     let _: Alias3<isize, usize> = ALIAS3;\n    |                          ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:147:26\n+  --> $DIR/generics-default-stability.rs:135:26\n    |\n LL |     let _: Alias3<isize, isize> = Alias3::Ok(0);\n    |                          ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:148:26\n+  --> $DIR/generics-default-stability.rs:136:26\n    |\n LL |     let _: Alias3<usize, usize> = Alias3::Ok(0);\n    |                          ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:170:19\n+  --> $DIR/generics-default-stability.rs:158:19\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(1);\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:175:19\n+  --> $DIR/generics-default-stability.rs:163:19\n    |\n LL |     let _: Alias5<usize> = ALIAS5;\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:177:19\n+  --> $DIR/generics-default-stability.rs:165:19\n    |\n LL |     let _: Alias5<isize> = Alias5::Some(0);\n    |                   ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:184:18\n+  --> $DIR/generics-default-stability.rs:172:18\n    |\n LL |     let _: Enum1<isize> = Enum1::Some(1);\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:188:18\n+  --> $DIR/generics-default-stability.rs:176:18\n    |\n LL |     let _: Enum1<usize> = ENUM1;\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:189:18\n+  --> $DIR/generics-default-stability.rs:177:18\n    |\n LL |     let _: Enum1<isize> = Enum1::Some(0);\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:217:25\n+  --> $DIR/generics-default-stability.rs:205:25\n    |\n LL |     let _: Enum3<isize, usize> = ENUM3;\n    |                         ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:219:25\n+  --> $DIR/generics-default-stability.rs:207:25\n    |\n LL |     let _: Enum3<isize, isize> = Enum3::Ok(0);\n    |                         ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:220:25\n+  --> $DIR/generics-default-stability.rs:208:25\n    |\n LL |     let _: Enum3<usize, usize> = Enum3::Ok(0);\n    |                         ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:242:18\n+  --> $DIR/generics-default-stability.rs:230:18\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(1);\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:247:18\n+  --> $DIR/generics-default-stability.rs:235:18\n    |\n LL |     let _: Enum5<usize> = ENUM5;\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'unstable_default'\n-  --> $DIR/generics-default-stability.rs:249:18\n+  --> $DIR/generics-default-stability.rs:237:18\n    |\n LL |     let _: Enum5<isize> = Enum5::Some(0);\n    |                  ^^^^^\n    |\n    = help: add `#![feature(unstable_default)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'box_alloc_param'\n-  --> $DIR/generics-default-stability.rs:256:24\n+  --> $DIR/generics-default-stability.rs:244:24\n    |\n LL |     let _: Box1<isize, System> = Box1::new(1);\n    |                        ^^^^^^\n    |\n    = help: add `#![feature(box_alloc_param)]` to the crate attributes to enable\n \n warning: use of deprecated field `unstable_generic_param::Struct4::field`: test\n-  --> $DIR/generics-default-stability.rs:83:39\n+  --> $DIR/generics-default-stability.rs:71:39\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 1 };\n    |                                       ^^^^^^^^\n \n warning: use of deprecated field `unstable_generic_param::Struct4::field`: test\n-  --> $DIR/generics-default-stability.rs:90:39\n+  --> $DIR/generics-default-stability.rs:78:39\n    |\n LL |     let _: Struct4<isize> = Struct4 { field: 0 };\n    |                                       ^^^^^^^^\n \n warning: use of deprecated field `unstable_generic_param::Struct5::field`: test\n-  --> $DIR/generics-default-stability.rs:96:39\n+  --> $DIR/generics-default-stability.rs:84:39\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 1 };\n    |                                       ^^^^^^^^\n \n warning: use of deprecated field `unstable_generic_param::Struct5::field`: test\n-  --> $DIR/generics-default-stability.rs:104:39\n+  --> $DIR/generics-default-stability.rs:92:39\n    |\n LL |     let _: Struct5<isize> = Struct5 { field: 0 };\n    |                                       ^^^^^^^^\n \n-error: aborting due to 31 previous errors; 40 warnings emitted\n+error: aborting due to 28 previous errors; 40 warnings emitted\n \n For more information about this error, try `rustc --explain E0658`."}]}