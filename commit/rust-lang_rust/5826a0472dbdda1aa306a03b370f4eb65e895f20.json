{"sha": "5826a0472dbdda1aa306a03b370f4eb65e895f20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MjZhMDQ3MmRiZGRhMWFhMzA2YTAzYjM3MGY0ZWI2NWU4OTVmMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T17:05:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-31T17:05:35Z"}, "message": "Auto merge of #5106 - flip1995:dbg_assert_mut_async, r=oli-obk\n\nDon't trigger [debug_assert_with_mut_call] on debug_assert!(_.await)\n\nFixes #5105\n\ncc #5112\n\nchangelog: Don't trigger [`debug_assert_with_mut_call`] on `debug_assert!(_.await)` and move it to nursery.", "tree": {"sha": "4772d79f2e2308e07035e5690ef606a00eec216f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4772d79f2e2308e07035e5690ef606a00eec216f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5826a0472dbdda1aa306a03b370f4eb65e895f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5826a0472dbdda1aa306a03b370f4eb65e895f20", "html_url": "https://github.com/rust-lang/rust/commit/5826a0472dbdda1aa306a03b370f4eb65e895f20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5826a0472dbdda1aa306a03b370f4eb65e895f20/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90101251f19760f0841daa4ad8b2978a50bafb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90101251f19760f0841daa4ad8b2978a50bafb8", "html_url": "https://github.com/rust-lang/rust/commit/b90101251f19760f0841daa4ad8b2978a50bafb8"}, {"sha": "5ba4aa8ebab79ffff4cb621fa22a07d32ea41b1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba4aa8ebab79ffff4cb621fa22a07d32ea41b1f", "html_url": "https://github.com/rust-lang/rust/commit/5ba4aa8ebab79ffff4cb621fa22a07d32ea41b1f"}], "stats": {"total": 126, "additions": 68, "deletions": 58}, "files": [{"sha": "04239b797e3b217b9c7b034008e76690c343feda", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5826a0472dbdda1aa306a03b370f4eb65e895f20/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5826a0472dbdda1aa306a03b370f4eb65e895f20/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5826a0472dbdda1aa306a03b370f4eb65e895f20", "patch": "@@ -1261,7 +1261,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n-        LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n@@ -1578,7 +1577,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n-        LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n         LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n@@ -1632,6 +1630,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n         LintId::of(&mul_add::MANUAL_MUL_ADD),\n+        LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),"}, {"sha": "f0c5c95b1d49951655fde2b8ebf187267ec96e74", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5826a0472dbdda1aa306a03b370f4eb65e895f20/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5826a0472dbdda1aa306a03b370f4eb65e895f20/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=5826a0472dbdda1aa306a03b370f4eb65e895f20", "patch": "@@ -4,7 +4,7 @@ use matches::matches;\n use rustc::hir::map::Map;\n use rustc::ty;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, StmtKind, UnOp};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability, StmtKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n@@ -28,7 +28,7 @@ declare_clippy_lint! {\n     /// debug_assert!(take_a_mut_parameter(&mut 5));\n     /// ```\n     pub DEBUG_ASSERT_WITH_MUT_CALL,\n-    correctness,\n+    nursery,\n     \"mutable arguments in `debug_assert{,_ne,_eq}!`\"\n }\n \n@@ -61,38 +61,38 @@ fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) -> O\n         if block.stmts.len() == 1;\n         if let StmtKind::Semi(ref matchexpr) = block.stmts[0].kind;\n         then {\n+            // debug_assert\n             if_chain! {\n                 if let ExprKind::Match(ref ifclause, _, _) = matchexpr.kind;\n                 if let ExprKind::DropTemps(ref droptmp) = ifclause.kind;\n                 if let ExprKind::Unary(UnOp::UnNot, ref condition) = droptmp.kind;\n                 then {\n-                    // debug_assert\n                     let mut visitor = MutArgVisitor::new(cx);\n                     visitor.visit_expr(condition);\n                     return visitor.expr_span();\n-                } else {\n-                    // debug_assert_{eq,ne}\n-                    if_chain! {\n-                        if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n-                        if let Some(ref matchheader) = matchblock.expr;\n-                        if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n-                        if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n-                        if conditions.len() == 2;\n-                        then {\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(lhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n-                            if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n-                                let mut visitor = MutArgVisitor::new(cx);\n-                                visitor.visit_expr(rhs);\n-                                if let Some(span) = visitor.expr_span() {\n-                                    return Some(span);\n-                                }\n-                            }\n+                }\n+            }\n+\n+            // debug_assert_{eq,ne}\n+            if_chain! {\n+                if let ExprKind::Block(ref matchblock, _) = matchexpr.kind;\n+                if let Some(ref matchheader) = matchblock.expr;\n+                if let ExprKind::Match(ref headerexpr, _, _) = matchheader.kind;\n+                if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n+                if conditions.len() == 2;\n+                then {\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref lhs) = conditions[0].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(lhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n+                        }\n+                    }\n+                    if let ExprKind::AddrOf(BorrowKind::Ref, _, ref rhs) = conditions[1].kind {\n+                        let mut visitor = MutArgVisitor::new(cx);\n+                        visitor.visit_expr(rhs);\n+                        if let Some(span) = visitor.expr_span() {\n+                            return Some(span);\n                         }\n                     }\n                 }\n@@ -147,6 +147,8 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n                     }\n                 }\n             },\n+            // Don't check await desugars\n+            ExprKind::Match(_, _, MatchSource::AwaitDesugar) => return,\n             _ if !self.found => self.expr_span = Some(expr.span),\n             _ => return,\n         }"}, {"sha": "eaada9961b0c4ca207aaf2884578981422736bf4", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5826a0472dbdda1aa306a03b370f4eb65e895f20/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5826a0472dbdda1aa306a03b370f4eb65e895f20/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=5826a0472dbdda1aa306a03b370f4eb65e895f20", "patch": "@@ -289,7 +289,7 @@ pub const ALL_LINTS: [Lint; 351] = [\n     },\n     Lint {\n         name: \"debug_assert_with_mut_call\",\n-        group: \"correctness\",\n+        group: \"nursery\",\n         desc: \"mutable arguments in `debug_assert{,_ne,_eq}!`\",\n         deprecation: None,\n         module: \"mutable_debug_assertion\","}, {"sha": "3db7e0164fa417cdbe01bd28ce4c090b839a7244", "filename": "tests/ui/debug_assert_with_mut_call.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5826a0472dbdda1aa306a03b370f4eb65e895f20/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5826a0472dbdda1aa306a03b370f4eb65e895f20/tests%2Fui%2Fdebug_assert_with_mut_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.rs?ref=5826a0472dbdda1aa306a03b370f4eb65e895f20", "patch": "@@ -1,5 +1,7 @@\n+// compile-flags: --edition=2018\n #![feature(custom_inner_attributes)]\n #![rustfmt::skip]\n+#![warn(clippy::debug_assert_with_mut_call)]\n #![allow(clippy::trivially_copy_pass_by_ref, clippy::cognitive_complexity, clippy::redundant_closure_call)]\n \n struct S;\n@@ -114,11 +116,18 @@ fn misc() {\n     })());\n }\n \n+async fn debug_await() {\n+    debug_assert!(async {\n+        true\n+    }.await);\n+}\n+\n fn main() {\n     func_non_mutable();\n     func_mutable();\n     method_non_mutable();\n     method_mutable();\n \n     misc();\n+    debug_await();\n }"}, {"sha": "a2ca71b57a6fdf029db0662acdca29fcbcabb9bb", "filename": "tests/ui/debug_assert_with_mut_call.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5826a0472dbdda1aa306a03b370f4eb65e895f20/tests%2Fui%2Fdebug_assert_with_mut_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5826a0472dbdda1aa306a03b370f4eb65e895f20/tests%2Fui%2Fdebug_assert_with_mut_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdebug_assert_with_mut_call.stderr?ref=5826a0472dbdda1aa306a03b370f4eb65e895f20", "patch": "@@ -1,169 +1,169 @@\n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:40:19\n+  --> $DIR/debug_assert_with_mut_call.rs:42:19\n    |\n LL |     debug_assert!(bool_mut(&mut 3));\n    |                   ^^^^^^^^^^^^^^^^\n    |\n-   = note: `#[deny(clippy::debug_assert_with_mut_call)]` on by default\n+   = note: `-D clippy::debug-assert-with-mut-call` implied by `-D warnings`\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:41:20\n+  --> $DIR/debug_assert_with_mut_call.rs:43:20\n    |\n LL |     debug_assert!(!bool_mut(&mut 3));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:43:25\n+  --> $DIR/debug_assert_with_mut_call.rs:45:25\n    |\n LL |     debug_assert_eq!(0, u32_mut(&mut 3));\n    |                         ^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:44:22\n+  --> $DIR/debug_assert_with_mut_call.rs:46:22\n    |\n LL |     debug_assert_eq!(u32_mut(&mut 3), 0);\n    |                      ^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:46:25\n+  --> $DIR/debug_assert_with_mut_call.rs:48:25\n    |\n LL |     debug_assert_ne!(1, u32_mut(&mut 3));\n    |                         ^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:47:22\n+  --> $DIR/debug_assert_with_mut_call.rs:49:22\n    |\n LL |     debug_assert_ne!(u32_mut(&mut 3), 1);\n    |                      ^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:62:19\n+  --> $DIR/debug_assert_with_mut_call.rs:64:19\n    |\n LL |     debug_assert!(S.bool_self_mut());\n    |                   ^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:63:20\n+  --> $DIR/debug_assert_with_mut_call.rs:65:20\n    |\n LL |     debug_assert!(!S.bool_self_mut());\n    |                    ^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:64:19\n+  --> $DIR/debug_assert_with_mut_call.rs:66:19\n    |\n LL |     debug_assert!(S.bool_self_ref_arg_mut(&mut 3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:65:19\n+  --> $DIR/debug_assert_with_mut_call.rs:67:19\n    |\n LL |     debug_assert!(S.bool_self_mut_arg_ref(&3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:66:19\n+  --> $DIR/debug_assert_with_mut_call.rs:68:19\n    |\n LL |     debug_assert!(S.bool_self_mut_arg_mut(&mut 3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:68:22\n+  --> $DIR/debug_assert_with_mut_call.rs:70:22\n    |\n LL |     debug_assert_eq!(S.u32_self_mut(), 0);\n    |                      ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:69:22\n+  --> $DIR/debug_assert_with_mut_call.rs:71:22\n    |\n LL |     debug_assert_eq!(S.u32_self_mut_arg_ref(&3), 0);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:70:22\n+  --> $DIR/debug_assert_with_mut_call.rs:72:22\n    |\n LL |     debug_assert_eq!(S.u32_self_ref_arg_mut(&mut 3), 0);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:71:22\n+  --> $DIR/debug_assert_with_mut_call.rs:73:22\n    |\n LL |     debug_assert_eq!(S.u32_self_mut_arg_mut(&mut 3), 0);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:73:22\n+  --> $DIR/debug_assert_with_mut_call.rs:75:22\n    |\n LL |     debug_assert_ne!(S.u32_self_mut(), 1);\n    |                      ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:74:22\n+  --> $DIR/debug_assert_with_mut_call.rs:76:22\n    |\n LL |     debug_assert_ne!(S.u32_self_mut_arg_ref(&3), 1);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:75:22\n+  --> $DIR/debug_assert_with_mut_call.rs:77:22\n    |\n LL |     debug_assert_ne!(S.u32_self_ref_arg_mut(&mut 3), 1);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:76:22\n+  --> $DIR/debug_assert_with_mut_call.rs:78:22\n    |\n LL |     debug_assert_ne!(S.u32_self_mut_arg_mut(&mut 3), 1);\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:84:22\n+  --> $DIR/debug_assert_with_mut_call.rs:86:22\n    |\n LL |     debug_assert_eq!(v.pop(), Some(1));\n    |                      ^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_ne!`\n-  --> $DIR/debug_assert_with_mut_call.rs:85:31\n+  --> $DIR/debug_assert_with_mut_call.rs:87:31\n    |\n LL |     debug_assert_ne!(Some(3), v.pop());\n    |                               ^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:88:19\n+  --> $DIR/debug_assert_with_mut_call.rs:90:19\n    |\n LL |     debug_assert!(bool_mut(a));\n    |                   ^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:91:31\n+  --> $DIR/debug_assert_with_mut_call.rs:93:31\n    |\n LL |     debug_assert!(!(bool_ref(&u32_mut(&mut 3))));\n    |                               ^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert_eq!`\n-  --> $DIR/debug_assert_with_mut_call.rs:94:22\n+  --> $DIR/debug_assert_with_mut_call.rs:96:22\n    |\n LL |     debug_assert_eq!(v.pop().unwrap(), 3);\n    |                      ^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:98:19\n+  --> $DIR/debug_assert_with_mut_call.rs:100:19\n    |\n LL |     debug_assert!(bool_mut(&mut 3), \"w/o format\");\n    |                   ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:100:19\n+  --> $DIR/debug_assert_with_mut_call.rs:102:19\n    |\n LL |     debug_assert!(bool_mut(&mut 3), \"{} format\", \"w/\");\n    |                   ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:105:9\n+  --> $DIR/debug_assert_with_mut_call.rs:107:9\n    |\n LL |         bool_mut(&mut x);\n    |         ^^^^^^^^^^^^^^^^\n \n error: do not call a function with mutable arguments inside of `debug_assert!`\n-  --> $DIR/debug_assert_with_mut_call.rs:112:9\n+  --> $DIR/debug_assert_with_mut_call.rs:114:9\n    |\n LL |         bool_mut(&mut x);\n    |         ^^^^^^^^^^^^^^^^"}]}