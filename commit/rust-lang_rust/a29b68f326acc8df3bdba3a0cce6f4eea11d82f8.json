{"sha": "a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOWI2OGYzMjZhY2M4ZGYzYmRiYTNhMGNjZTZmNGVlYTExZDgyZjg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-15T02:02:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-15T02:02:40Z"}, "message": "Rollup merge of #78856 - mark-i-m:fix-or-pat-ice, r=matthewjasper\n\nExplicitly checking for or-pattern before test\n\nFixes https://github.com/rust-lang/rust/issues/72680\n\ncc https://github.com/rust-lang/rust/issues/54883\n\nr? ````@varkor````", "tree": {"sha": "5e2ca41fa1c834d24505de89783a18b479436688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e2ca41fa1c834d24505de89783a18b479436688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfsIxBCRBK7hj4Ov3rIwAAdHIIACwFxlLdTozvoewZjfW5vvIK\niD0ifBksy64C97ui4dnIyaT4Xe5PitOvNx2ryGTSm8Uim2/NwxWuwJtPUfAds/b1\nT/UG3RK0yIWkuRz7chV1bcH/RxxT6R7rsmupHrQqDcKnZbduuCmGW0zrKnPHOb+U\nEEu0EQ+3SkKAHtYUMmxNB/6vqFmUtzOIFbyGZD1Of8YvGe39YvRwQUaka8g7Y0se\n9SVxIDXFaaqVLtwRLlMb/OAUXMU2DW8QCPt1+8tru/RwFO3tcU4k5Wlj+XdOJr7B\n/anVCWtJX13+0EXHwVwQ1dbxKbBTRwQbzH+LEO8AjIe6Akw0KoiogArdyeYqN8s=\n=W4dA\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e2ca41fa1c834d24505de89783a18b479436688\nparent ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7\nparent b825ae7d28294de48297cb2e426f68c2331b3fdc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605405760 +0100\ncommitter GitHub <noreply@github.com> 1605405760 +0100\n\nRollup merge of #78856 - mark-i-m:fix-or-pat-ice, r=matthewjasper\n\nExplicitly checking for or-pattern before test\n\nFixes https://github.com/rust-lang/rust/issues/72680\n\ncc https://github.com/rust-lang/rust/issues/54883\n\nr? ````@varkor````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "html_url": "https://github.com/rust-lang/rust/commit/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7", "html_url": "https://github.com/rust-lang/rust/commit/ae7020fcb4254714d8dbe6246cc0a11fdf9c9de7"}, {"sha": "b825ae7d28294de48297cb2e426f68c2331b3fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b825ae7d28294de48297cb2e426f68c2331b3fdc", "html_url": "https://github.com/rust-lang/rust/commit/b825ae7d28294de48297cb2e426f68c2331b3fdc"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "07173f41cd6db84fbea6be47ccf3d7f9d74b7809", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "patch": "@@ -671,6 +671,17 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             (&TestKind::Range { .. }, _) => None,\n \n             (&TestKind::Eq { .. } | &TestKind::Len { .. }, _) => {\n+                // The call to `self.test(&match_pair)` below is not actually used to generate any\n+                // MIR. Instead, we just want to compare with `test` (the parameter of the method)\n+                // to see if it is the same.\n+                //\n+                // However, at this point we can still encounter or-patterns that were extracted\n+                // from previous calls to `sort_candidate`, so we need to manually address that\n+                // case to avoid panicking in `self.test()`.\n+                if let PatKind::Or { .. } = &*match_pair.pattern.kind {\n+                    return None;\n+                }\n+\n                 // These are all binary tests.\n                 //\n                 // FIXME(#29623) we can be more clever here"}, {"sha": "5b933edc8205ed414cc53136b0a0a7829a0d8a5f", "filename": "src/test/ui/match/issue-72680.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29b68f326acc8df3bdba3a0cce6f4eea11d82f8/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-72680.rs?ref=a29b68f326acc8df3bdba3a0cce6f4eea11d82f8", "patch": "@@ -0,0 +1,65 @@\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    assert!(f(\"\", 0));\n+    assert!(f(\"a\", 1));\n+    assert!(f(\"b\", 1));\n+\n+    assert!(!f(\"\", 1));\n+    assert!(!f(\"a\", 0));\n+    assert!(!f(\"b\", 0));\n+\n+    assert!(!f(\"asdf\", 32));\n+\n+    ////\n+\n+    assert!(!g(true, true, true));\n+    assert!(!g(false, true, true));\n+    assert!(!g(true, false, true));\n+    assert!(!g(false, false, true));\n+    assert!(!g(true, true, false));\n+\n+    assert!(g(false, true, false));\n+    assert!(g(true, false, false));\n+    assert!(g(false, false, false));\n+\n+    ////\n+\n+    assert!(!h(true, true, true));\n+    assert!(!h(false, true, true));\n+    assert!(!h(true, false, true));\n+    assert!(!h(false, false, true));\n+    assert!(!h(true, true, false));\n+\n+    assert!(h(false, true, false));\n+    assert!(h(true, false, false));\n+    assert!(h(false, false, false));\n+}\n+\n+fn f(s: &str, num: usize) -> bool {\n+    match (s, num) {\n+        (\"\", 0) | (\"a\" | \"b\", 1) => true,\n+\n+        _ => false,\n+    }\n+}\n+\n+fn g(x: bool, y: bool, z: bool) -> bool {\n+    match (x, y, x, z) {\n+        (true | false, false, true, false) => true,\n+        (false, true | false, true | false, false) => true,\n+        (true | false, true | false, true | false, true) => false,\n+        (true, true | false, true | false, false) => false,\n+    }\n+}\n+\n+fn h(x: bool, y: bool, z: bool) -> bool {\n+    match (x, (y, (x, (z,)))) {\n+        (true | false, (false, (true, (false,)))) => true,\n+        (false, (true | false, (true | false, (false,)))) => true,\n+        (true | false, (true | false, (true | false, (true,)))) => false,\n+        (true, (true | false, (true | false, (false,)))) => false,\n+    }\n+}"}]}