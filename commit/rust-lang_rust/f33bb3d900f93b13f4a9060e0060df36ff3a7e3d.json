{"sha": "f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzM2JiM2Q5MDBmOTNiMTNmNGE5MDYwZTAwNjBkZjM2ZmYzYTdlM2Q=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:22:21Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T08:24:29Z"}, "message": "Move cast_ref_to_mut to its own module", "tree": {"sha": "67a5d73317a6d58cb82e48db6505c2461dc115ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67a5d73317a6d58cb82e48db6505c2461dc115ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "html_url": "https://github.com/rust-lang/rust/commit/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebd1ec0e40739d8b968c2b9bfd249485cec866ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd1ec0e40739d8b968c2b9bfd249485cec866ab", "html_url": "https://github.com/rust-lang/rust/commit/ebd1ec0e40739d8b968c2b9bfd249485cec866ab"}], "stats": {"total": 128, "additions": 68, "deletions": 60}, "files": [{"sha": "3fdc1c6168ba9b05d75080a2045effdf1e6aa56a", "filename": "clippy_lints/src/casts/cast_ref_to_mut.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs?ref=f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "patch": "@@ -0,0 +1,28 @@\n+use rustc_hir::{Expr, ExprKind, MutTy, Mutability, TyKind, UnOp};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+\n+use if_chain::if_chain;\n+\n+use crate::utils::span_lint;\n+\n+use super::CAST_REF_TO_MUT;\n+\n+pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+    if_chain! {\n+        if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n+        if let ExprKind::Cast(e, t) = &e.kind;\n+        if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n+        if let ExprKind::Cast(e, t) = &e.kind;\n+        if let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind;\n+        if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind();\n+        then {\n+            span_lint(\n+                cx,\n+                CAST_REF_TO_MUT,\n+                expr.span,\n+                \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "7d5ada18be3bbd221519196c26095e8d94423afc", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 40, "deletions": 59, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "patch": "@@ -3,6 +3,7 @@ mod cast_possible_truncation;\n mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_ptr_alignment;\n+mod cast_ref_to_mut;\n mod cast_sign_loss;\n mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_with_truncation;\n@@ -14,7 +15,7 @@ use std::borrow::Cow;\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, MutTy, Mutability, TyKind, UnOp};\n+use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TypeAndMut, UintTy};\n@@ -23,7 +24,7 @@ use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    is_hir_ty_cfg_dependant, meets_msrv, snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    is_hir_ty_cfg_dependant, meets_msrv, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then,\n };\n \n declare_clippy_lint! {\n@@ -255,12 +256,47 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type not wide enough to store the address\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n+    ///\n+    /// **Why is this bad?** It\u2019s basically guaranteed to be undefined behaviour.\n+    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n+    /// mutable.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// fn x(r: &i32) {\n+    ///     unsafe {\n+    ///         *(r as *const _ as *mut _) += 1;\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Instead consider using interior mutability types.\n+    ///\n+    /// ```rust\n+    /// use std::cell::UnsafeCell;\n+    ///\n+    /// fn x(r: &UnsafeCell<i32>) {\n+    ///     unsafe {\n+    ///         *r.get() += 1;\n+    ///     }\n+    /// }\n+    /// ```\n+    pub CAST_REF_TO_MUT,\n+    correctness,\n+    \"a cast of reference to a mutable pointer\"\n+}\n+\n declare_lint_pass!(Casts => [\n     CAST_PRECISION_LOSS,\n     CAST_SIGN_LOSS,\n     CAST_POSSIBLE_TRUNCATION,\n     CAST_POSSIBLE_WRAP,\n     CAST_LOSSLESS,\n+    CAST_REF_TO_MUT,\n     UNNECESSARY_CAST,\n     CAST_PTR_ALIGNMENT,\n     FN_TO_NUMERIC_CAST,\n@@ -269,6 +305,8 @@ declare_lint_pass!(Casts => [\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        cast_ref_to_mut::check(cx, expr);\n+\n         if expr.span.from_expansion() {\n             return;\n         }\n@@ -300,63 +338,6 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n     }\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for casts of `&T` to `&mut T` anywhere in the code.\n-    ///\n-    /// **Why is this bad?** It\u2019s basically guaranteed to be undefined behaviour.\n-    /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n-    /// mutable.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// fn x(r: &i32) {\n-    ///     unsafe {\n-    ///         *(r as *const _ as *mut _) += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    ///\n-    /// Instead consider using interior mutability types.\n-    ///\n-    /// ```rust\n-    /// use std::cell::UnsafeCell;\n-    ///\n-    /// fn x(r: &UnsafeCell<i32>) {\n-    ///     unsafe {\n-    ///         *r.get() += 1;\n-    ///     }\n-    /// }\n-    /// ```\n-    pub CAST_REF_TO_MUT,\n-    correctness,\n-    \"a cast of reference to a mutable pointer\"\n-}\n-\n-declare_lint_pass!(RefToMut => [CAST_REF_TO_MUT]);\n-\n-impl<'tcx> LateLintPass<'tcx> for RefToMut {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n-            if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n-            if let ExprKind::Cast(e, t) = &e.kind;\n-            if let TyKind::Ptr(MutTy { mutbl: Mutability::Not, .. }) = t.kind;\n-            if let ty::Ref(..) = cx.typeck_results().node_type(e.hir_id).kind();\n-            then {\n-                span_lint(\n-                    cx,\n-                    CAST_REF_TO_MUT,\n-                    expr.span,\n-                    \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n-                );\n-            }\n-        }\n-    }\n-}\n-\n const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);\n \n declare_clippy_lint! {"}, {"sha": "47afd7beb74112f5149e6ea631b02e567295c16d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33bb3d900f93b13f4a9060e0060df36ff3a7e3d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f33bb3d900f93b13f4a9060e0060df36ff3a7e3d", "patch": "@@ -1176,7 +1176,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box slow_vector_initialization::SlowVectorInit);\n     store.register_late_pass(|| box unnecessary_sort_by::UnnecessarySortBy);\n     store.register_late_pass(|| box unnecessary_wraps::UnnecessaryWraps);\n-    store.register_late_pass(|| box casts::RefToMut);\n     store.register_late_pass(|| box assertions_on_constants::AssertionsOnConstants);\n     store.register_late_pass(|| box transmuting_null::TransmutingNull);\n     store.register_late_pass(|| box path_buf_push_overwrite::PathBufPushOverwrite);"}]}