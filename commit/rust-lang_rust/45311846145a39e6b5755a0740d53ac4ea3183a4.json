{"sha": "45311846145a39e6b5755a0740d53ac4ea3183a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzExODQ2MTQ1YTM5ZTZiNTc1NWEwNzQwZDUzYWM0ZWEzMTgzYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T07:55:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-25T07:55:53Z"}, "message": "auto merge of #9432 : alexcrichton/rust/correct-item-visibility, r=pcwalton\n\nThis fixes private statics and functions from being usable cross-crates, along\r\nwith some bad privacy error messages. This is a reopening of #8365 with all the\r\nprivacy checks in privacy.rs instead of resolve.rs (where they should be\r\nanyway).\r\n\r\nThese maps of exported items will hopefully get used for generating\r\ndocumentation by rustdoc\r\n\r\nCloses #8592", "tree": {"sha": "0014edaa67fb5571cf4230df161807908c71d9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0014edaa67fb5571cf4230df161807908c71d9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45311846145a39e6b5755a0740d53ac4ea3183a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45311846145a39e6b5755a0740d53ac4ea3183a4", "html_url": "https://github.com/rust-lang/rust/commit/45311846145a39e6b5755a0740d53ac4ea3183a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45311846145a39e6b5755a0740d53ac4ea3183a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66", "html_url": "https://github.com/rust-lang/rust/commit/dad32f703d3df22f4d6b021c23cf2c08ae0f3d66"}, {"sha": "30862a64c29985b044d9bf6f74fcf1394bc145c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/30862a64c29985b044d9bf6f74fcf1394bc145c7", "html_url": "https://github.com/rust-lang/rust/commit/30862a64c29985b044d9bf6f74fcf1394bc145c7"}], "stats": {"total": 943, "additions": 639, "deletions": 304}, "files": [{"sha": "692aa6871e604df285767b058514cedefb2ce16f", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -29,6 +29,8 @@ def scrub(b):\n         if not (\"xfail-test\" in s or\n                 \"xfail-fast\" in s or\n                 \"xfail-win32\" in s):\n+            if not \"pub fn main\" in s and \"fn main\" in s:\n+                print(\"Warning: no public entry point in \" + t)\n             stage2_tests.append(t)\n         f.close()\n "}, {"sha": "28a067a782bc400976ef038c36da70bac94fcee8", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -162,7 +162,7 @@ struct MutexArcInner<T> { priv lock: Mutex, priv failed: bool, priv data: T }\n \n /// An Arc with mutable data protected by a blocking mutex.\n #[no_freeze]\n-struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n+pub struct MutexArc<T> { priv x: UnsafeArc<MutexArcInner<T>> }\n \n \n impl<T:Send> Clone for MutexArc<T> {\n@@ -343,7 +343,7 @@ struct RWArcInner<T> { priv lock: RWLock, priv failed: bool, priv data: T }\n  * Unlike mutex_arcs, rw_arcs are safe, because they cannot be nested.\n  */\n #[no_freeze]\n-struct RWArc<T> {\n+pub struct RWArc<T> {\n     priv x: UnsafeArc<RWArcInner<T>>,\n }\n "}, {"sha": "e24fe3eb8c25e6608cbb415bbaaba1e70141e48e", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -127,7 +127,7 @@ impl WorkMap {\n     }\n }\n \n-struct Database {\n+pub struct Database {\n     db_filename: Path,\n     db_cache: TreeMap<~str, ~str>,\n     db_dirty: bool\n@@ -207,7 +207,7 @@ impl Drop for Database {\n     }\n }\n \n-struct Logger {\n+pub struct Logger {\n     // FIXME #4432: Fill in\n     a: ()\n }\n@@ -223,10 +223,10 @@ impl Logger {\n     }\n }\n \n-type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n+pub type FreshnessMap = TreeMap<~str,extern fn(&str,&str)->bool>;\n \n #[deriving(Clone)]\n-struct Context {\n+pub struct Context {\n     db: RWArc<Database>,\n     logger: RWArc<Logger>,\n     cfg: Arc<json::Object>,\n@@ -239,13 +239,13 @@ struct Context {\n     freshness: Arc<FreshnessMap>\n }\n \n-struct Prep<'self> {\n+pub struct Prep<'self> {\n     ctxt: &'self Context,\n     fn_name: &'self str,\n     declared_inputs: WorkMap,\n }\n \n-struct Exec {\n+pub struct Exec {\n     discovered_inputs: WorkMap,\n     discovered_outputs: WorkMap\n }"}, {"sha": "5518dde0ee979921b337062769b7c7d1b06aa916", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -197,6 +197,7 @@ pub fn phase_2_configure_and_expand(sess: Session,\n \n pub struct CrateAnalysis {\n     exp_map2: middle::resolve::ExportMap2,\n+    exported_items: @middle::privacy::ExportedItems,\n     ty_cx: ty::ctxt,\n     maps: astencode::Maps,\n     reachable: @mut HashSet<ast::NodeId>\n@@ -258,8 +259,9 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n          middle::check_const::check_crate(sess, crate, ast_map, def_map,\n                                           method_map, ty_cx));\n \n-    time(time_passes, ~\"privacy checking\", ||\n-         middle::privacy::check_crate(ty_cx, &method_map, crate));\n+    let exported_items =\n+        time(time_passes, ~\"privacy checking\", ||\n+             middle::privacy::check_crate(ty_cx, &method_map, &exp_map2, crate));\n \n     time(time_passes, ~\"effect checking\", ||\n          middle::effect::check_crate(ty_cx, method_map, crate));\n@@ -301,6 +303,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n \n     CrateAnalysis {\n         exp_map2: exp_map2,\n+        exported_items: @exported_items,\n         ty_cx: ty_cx,\n         maps: astencode::Maps {\n             root_map: root_map,"}, {"sha": "841142ee62fe8a069183f2e660c303b37e4dfa26", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -27,7 +27,8 @@ use syntax::diagnostic::expect;\n pub struct StaticMethodInfo {\n     ident: ast::Ident,\n     def_id: ast::DefId,\n-    purity: ast::purity\n+    purity: ast::purity,\n+    vis: ast::visibility,\n }\n \n pub fn get_symbol(cstore: @mut cstore::CStore, def: ast::DefId) -> ~str {\n@@ -52,7 +53,8 @@ pub fn each_lang_item(cstore: @mut cstore::CStore,\n /// Iterates over each child of the given item.\n pub fn each_child_of_item(cstore: @mut cstore::CStore,\n                           def_id: ast::DefId,\n-                          callback: &fn(decoder::DefLike, ast::Ident)) {\n+                          callback: &fn(decoder::DefLike, ast::Ident,\n+                                        ast::visibility)) {\n     let crate_data = cstore::get_crate_data(cstore, def_id.crate);\n     let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n         cstore::get_crate_data(cstore, cnum)\n@@ -68,7 +70,8 @@ pub fn each_child_of_item(cstore: @mut cstore::CStore,\n pub fn each_top_level_item_of_crate(cstore: @mut cstore::CStore,\n                                     cnum: ast::CrateNum,\n                                     callback: &fn(decoder::DefLike,\n-                                                  ast::Ident)) {\n+                                                  ast::Ident,\n+                                                  ast::visibility)) {\n     let crate_data = cstore::get_crate_data(cstore, cnum);\n     let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n         cstore::get_crate_data(cstore, cnum)"}, {"sha": "fe7309d4467fa8eae3b067c446f086502a20c0ec", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -96,7 +96,7 @@ fn find_item(item_id: int, items: ebml::Doc) -> ebml::Doc {\n \n // Looks up an item in the given metadata and returns an ebml doc pointing\n // to the item data.\n-fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n+pub fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     let items = reader::get_doc(reader::Doc(data), tag_items);\n     find_item(item_id, items)\n }\n@@ -291,7 +291,7 @@ fn enum_variant_ids(item: ebml::Doc, cdata: Cmd) -> ~[ast::DefId] {\n     return ids;\n }\n \n-fn item_path(item_doc: ebml::Doc) -> ast_map::path {\n+pub fn item_path(item_doc: ebml::Doc) -> ast_map::path {\n     let path_doc = reader::get_doc(item_doc, tag_path);\n \n     let len_doc = reader::get_doc(path_doc, tag_path_len);\n@@ -332,7 +332,7 @@ fn item_name(intr: @ident_interner, item: ebml::Doc) -> ast::Ident {\n     }\n }\n \n-fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n+pub fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n     -> DefLike {\n     let fam = item_family(item);\n     match fam {\n@@ -491,7 +491,7 @@ pub enum DefLike {\n     DlField\n }\n \n-fn def_like_to_def(def_like: DefLike) -> ast::Def {\n+pub fn def_like_to_def(def_like: DefLike) -> ast::Def {\n     match def_like {\n         DlDef(def) => return def,\n         DlImpl(*) => fail!(\"found impl in def_like_to_def\"),\n@@ -544,7 +544,8 @@ impl<'self> EachItemContext<'self> {\n     fn process_item_and_pop_name(&mut self,\n                                  doc: ebml::Doc,\n                                  def_id: ast::DefId,\n-                                 old_len: uint)\n+                                 old_len: uint,\n+                                 vis: ast::visibility)\n                                  -> bool {\n         let def_like = item_to_def_like(doc, def_id, self.cdata.cnum);\n         match def_like {\n@@ -563,8 +564,6 @@ impl<'self> EachItemContext<'self> {\n             }\n         }\n \n-        let vis = item_visibility(doc);\n-\n         let mut continue = (self.callback)(*self.path_builder, def_like, vis);\n \n         let family = item_family(doc);\n@@ -653,9 +652,12 @@ impl<'self> EachItemContext<'self> {\n                         self.push_name(token::ident_to_str(&child_name));\n \n                     // Process this item.\n+\n+                    let vis = item_visibility(child_item_doc);\n                     continue = self.process_item_and_pop_name(child_item_doc,\n                                                               child_def_id,\n-                                                              old_len);\n+                                                              old_len,\n+                                                              vis);\n                 }\n             }\n             continue\n@@ -701,12 +703,13 @@ impl<'self> EachItemContext<'self> {\n \n             // Get the item.\n             match maybe_find_item(def_id.node, other_crates_items) {\n-                None => {}\n+                None => { self.pop_name(old_len); }\n                 Some(reexported_item_doc) => {\n                     continue = self.process_item_and_pop_name(\n                         reexported_item_doc,\n                         def_id,\n-                        old_len);\n+                        old_len,\n+                        ast::public);\n                 }\n             }\n \n@@ -721,7 +724,8 @@ fn each_child_of_item_or_crate(intr: @ident_interner,\n                                cdata: Cmd,\n                                item_doc: ebml::Doc,\n                                get_crate_data: GetCrateDataCb,\n-                               callback: &fn(DefLike, ast::Ident)) {\n+                               callback: &fn(DefLike, ast::Ident,\n+                                             ast::visibility)) {\n     // Iterate over all children.\n     let _ = do reader::tagged_docs(item_doc, tag_mod_child) |child_info_doc| {\n         let child_def_id = reader::with_doc_data(child_info_doc,\n@@ -746,7 +750,8 @@ fn each_child_of_item_or_crate(intr: @ident_interner,\n                 let def_like = item_to_def_like(child_item_doc,\n                                                 child_def_id,\n                                                 cdata.cnum);\n-                callback(def_like, child_name);\n+                let visibility = item_visibility(child_item_doc);\n+                callback(def_like, child_name, visibility);\n \n             }\n         }\n@@ -788,7 +793,8 @@ fn each_child_of_item_or_crate(intr: @ident_interner,\n                                                          impl_method_def_id,\n                                                          cdata.cnum);\n                                     callback(static_method_def_like,\n-                                             static_method_name);\n+                                             static_method_name,\n+                                             item_visibility(impl_method_doc));\n                                 }\n                                 _ => {}\n                             }\n@@ -831,7 +837,8 @@ fn each_child_of_item_or_crate(intr: @ident_interner,\n                 let def_like = item_to_def_like(child_item_doc,\n                                                 child_def_id,\n                                                 cdata.cnum);\n-                callback(def_like, token::str_to_ident(name));\n+                callback(def_like, token::str_to_ident(name),\n+                         item_visibility(child_item_doc));\n             }\n         }\n \n@@ -844,7 +851,7 @@ pub fn each_child_of_item(intr: @ident_interner,\n                           cdata: Cmd,\n                           id: ast::NodeId,\n                           get_crate_data: GetCrateDataCb,\n-                          callback: &fn(DefLike, ast::Ident)) {\n+                          callback: &fn(DefLike, ast::Ident, ast::visibility)) {\n     // Find the item.\n     let root_doc = reader::Doc(cdata.data);\n     let items = reader::get_doc(root_doc, tag_items);\n@@ -864,7 +871,8 @@ pub fn each_child_of_item(intr: @ident_interner,\n pub fn each_top_level_item_of_crate(intr: @ident_interner,\n                                     cdata: Cmd,\n                                     get_crate_data: GetCrateDataCb,\n-                                    callback: &fn(DefLike, ast::Ident)) {\n+                                    callback: &fn(DefLike, ast::Ident,\n+                                                  ast::visibility)) {\n     let root_doc = reader::Doc(cdata.data);\n     let misc_info_doc = reader::get_doc(root_doc, tag_misc_info);\n     let crate_items_doc = reader::get_doc(misc_info_doc,\n@@ -1161,7 +1169,8 @@ pub fn get_static_methods_if_impl(intr: @ident_interner,\n                 static_impl_methods.push(StaticMethodInfo {\n                     ident: item_name(intr, impl_method_doc),\n                     def_id: item_def_id(impl_method_doc, cdata),\n-                    purity: purity\n+                    purity: purity,\n+                    vis: item_visibility(impl_method_doc),\n                 });\n             }\n             _ => {}"}, {"sha": "de60927f2a29d09fcda18b960adbbe342297cb71", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -16,9 +16,9 @@ use metadata::cstore;\n use metadata::decoder;\n use metadata::tyencode;\n use middle::ty::{node_id_to_type, lookup_item_type};\n+use middle::astencode;\n use middle::ty;\n use middle::typeck;\n-use middle::astencode;\n use middle;\n \n use std::hashmap::{HashMap, HashSet};\n@@ -58,6 +58,7 @@ pub struct EncodeParams<'self> {\n     diag: @mut span_handler,\n     tcx: ty::ctxt,\n     reexports2: middle::resolve::ExportMap2,\n+    exported_items: @middle::privacy::ExportedItems,\n     item_symbols: &'self HashMap<ast::NodeId, ~str>,\n     discrim_symbols: &'self HashMap<ast::NodeId, @str>,\n     non_inlineable_statics: &'self HashSet<ast::NodeId>,\n@@ -88,6 +89,7 @@ pub struct EncodeContext<'self> {\n     tcx: ty::ctxt,\n     stats: @mut Stats,\n     reexports2: middle::resolve::ExportMap2,\n+    exported_items: @middle::privacy::ExportedItems,\n     item_symbols: &'self HashMap<ast::NodeId, ~str>,\n     discrim_symbols: &'self HashMap<ast::NodeId, @str>,\n     non_inlineable_statics: &'self HashSet<ast::NodeId>,\n@@ -881,7 +883,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                         ebml_w: &mut writer::Encoder,\n                         item: @item,\n                         index: @mut ~[entry<i64>],\n-                        path: &[ast_map::path_elt]) {\n+                        path: &[ast_map::path_elt],\n+                        vis: ast::visibility) {\n     let tcx = ecx.tcx;\n \n     fn add_to_index_(item: @item, ebml_w: &writer::Encoder,\n@@ -912,6 +915,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         if !ecx.non_inlineable_statics.contains(&item.id) {\n             (ecx.encode_inlined_item)(ecx, ebml_w, path, ii_item(item));\n         }\n+        encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n       }\n       item_fn(_, purity, _, ref generics, _) => {\n@@ -929,6 +933,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         } else {\n             encode_symbol(ecx, ebml_w, item.id);\n         }\n+        encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n       }\n       item_mod(ref m) => {\n@@ -955,7 +960,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             ebml_w.wr_str(def_to_str(local_def(foreign_item.id)));\n             ebml_w.end_tag();\n         }\n-\n+        encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n       }\n       item_ty(*) => {\n@@ -967,6 +972,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(ecx, ebml_w, item.ident);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         encode_region_param(ecx, ebml_w, item);\n+        encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n       }\n       item_enum(ref enum_definition, ref generics) => {\n@@ -987,6 +993,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         // Encode inherent implementations for this enumeration.\n         encode_inherent_implementations(ecx, ebml_w, def_id);\n \n+        encode_visibility(ebml_w, vis);\n         ebml_w.end_tag();\n \n         encode_enum_variant_info(ecx,\n@@ -1018,6 +1025,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_attributes(ebml_w, item.attrs);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         encode_region_param(ecx, ebml_w, item);\n+        encode_visibility(ebml_w, vis);\n \n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_trait_method\n@@ -1264,7 +1272,12 @@ fn my_visit_item(i:@item, items: ast_map::map, ebml_w:&writer::Encoder,\n             let mut ebml_w = ebml_w.clone();\n             // See above\n             let ecx : &EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n-            encode_info_for_item(ecx, &mut ebml_w, i, index, *pt);\n+            let vis = if ecx.exported_items.contains(&i.id) {\n+                ast::public\n+            } else {\n+                ast::inherited\n+            };\n+            encode_info_for_item(ecx, &mut ebml_w, i, index, *pt, vis);\n         }\n         _ => fail!(\"bad item\")\n     }\n@@ -1727,6 +1740,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         diag,\n         tcx,\n         reexports2,\n+        exported_items,\n         discrim_symbols,\n         cstore,\n         encode_inlined_item,\n@@ -1742,6 +1756,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         tcx: tcx,\n         stats: stats,\n         reexports2: reexports2,\n+        exported_items: exported_items,\n         item_symbols: item_symbols,\n         discrim_symbols: discrim_symbols,\n         non_inlineable_statics: non_inlineable_statics,"}, {"sha": "c719146c99995fcd0da3201ee1df7b24de01dab3", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -150,7 +150,7 @@ fn make_rustpkg_target_lib_path(dir: &Path,\n     dir.push_rel(&Path(libdir()).push(target_triple.to_owned()))\n }\n \n-fn get_or_default_sysroot() -> Path {\n+pub fn get_or_default_sysroot() -> Path {\n     match os::self_exe_path() {\n       option::Some(ref p) => (*p).pop(),\n       option::None => fail!(\"can't determine value for sysroot\")"}, {"sha": "3c60bd67362f7213302a883f013867a7c6c09cd8", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 144, "deletions": 46, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -9,9 +9,13 @@\n // except according to those terms.\n \n //! A pass that checks to make sure private fields and methods aren't used\n-//! outside their scopes.\n+//! outside their scopes. This pass will also generate a set of exported items\n+//! which are available for use externally when compiled as a library.\n+\n+use std::hashmap::HashSet;\n \n use metadata::csearch;\n+use middle::resolve::ExportMap2;\n use middle::ty::{ty_struct, ty_enum};\n use middle::ty;\n use middle::typeck::{method_map, method_origin, method_param};\n@@ -37,9 +41,23 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use syntax::ast::{_mod,Expr,item,Block,Pat};\n \n+// This set is a set of all item nodes which can be used by external crates if\n+// we're building a library. The necessary qualifications for this are that all\n+// items leading down to the current item (excluding an `impl`) must be `pub`.\n+pub type ExportedItems = HashSet<NodeId>;\n+\n+type Context<'self> = (&'self method_map, &'self ExportMap2);\n+\n struct PrivacyVisitor {\n     tcx: ty::ctxt,\n     privileged_items: @mut ~[NodeId],\n+\n+    // A set of all items which are re-exported to be used across crates\n+    exported_items: ExportedItems,\n+\n+    // A flag as to whether the current path is public all the way down to the\n+    // current point or not\n+    path_all_public: bool,\n }\n \n impl PrivacyVisitor {\n@@ -265,15 +283,20 @@ impl PrivacyVisitor {\n                                                      .last()\n                                                      .identifier)));\n                     }\n-                } else if csearch::get_item_visibility(self.tcx.sess.cstore,\n-                                                       def_id) != public {\n-                    self.tcx.sess.span_err(span,\n-                                      fmt!(\"function `%s` is private\",\n-                                           token::ident_to_str(\n-                                                &path.segments\n-                                                     .last()\n-                                                     .identifier)));\n+                //} else if csearch::get_item_visibility(self.tcx.sess.cstore,\n+                //                                       def_id) != public {\n+                //    self.tcx.sess.span_err(span,\n+                //                      fmt!(\"function `%s` is private\",\n+                //                           token::ident_to_str(\n+                //                                &path.segments\n+                //                                     .last()\n+                //                                     .identifier)));\n                 }\n+                // If this is a function from a non-local crate, then the\n+                // privacy check is enforced during resolve. All public items\n+                // will be tagged as such in the crate metadata and then usage\n+                // of the private items will be blocked during resolve. Hence,\n+                // if this isn't from the local crate, nothing to check.\n             }\n             _ => {}\n         }\n@@ -341,31 +364,78 @@ impl PrivacyVisitor {\n     }\n }\n \n-impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n+impl<'self> Visitor<Context<'self>> for PrivacyVisitor {\n \n-    fn visit_mod<'mm>(&mut self, the_module:&_mod, _:Span, _:NodeId,\n-                      method_map:&'mm method_map) {\n+    fn visit_mod(&mut self, the_module:&_mod, _:Span, _:NodeId,\n+                 cx: Context<'self>) {\n \n             let n_added = self.add_privileged_items(the_module.items);\n \n-            visit::walk_mod(self, the_module, method_map);\n+            visit::walk_mod(self, the_module, cx);\n \n             do n_added.times {\n                 ignore(self.privileged_items.pop());\n             }\n     }\n \n-    fn visit_item<'mm>(&mut self, item:@item, method_map:&'mm method_map) {\n+    fn visit_item(&mut self, item:@item, cx: Context<'self>) {\n+\n+        // Do not check privacy inside items with the resolve_unexported\n+        // attribute. This is used for the test runner.\n+        if attr::contains_name(item.attrs, \"!resolve_unexported\") {\n+            return;\n+        }\n+\n+        // Disallow unnecessary visibility qualifiers\n+        check_sane_privacy(self.tcx, item);\n \n-            // Do not check privacy inside items with the resolve_unexported\n-            // attribute. This is used for the test runner.\n-            if !attr::contains_name(item.attrs, \"!resolve_unexported\") {\n-                check_sane_privacy(self.tcx, item);\n-                visit::walk_item(self, item, method_map);\n+        // Keep track of whether this item is available for export or not.\n+        let orig_all_pub = self.path_all_public;\n+        match item.node {\n+            // impls/extern blocks do not break the \"public chain\" because they\n+            // cannot have visibility qualifiers on them anyway\n+            ast::item_impl(*) | ast::item_foreign_mod(*) => {}\n+\n+            // Private by default, hence we only retain the \"public chain\" if\n+            // `pub` is explicitly listed.\n+            _ => {\n+                self.path_all_public = orig_all_pub && item.vis == ast::public;\n+            }\n+        }\n+        debug2!(\"public path at {}: {}\", item.id, self.path_all_public);\n+\n+        if self.path_all_public {\n+            debug2!(\"all the way public {}\", item.id);\n+            self.exported_items.insert(item.id);\n+\n+            // All re-exported items in a module which is public should also be\n+            // public (in terms of how they should get encoded)\n+            match item.node {\n+                ast::item_mod(*) => {\n+                    let (_, exp_map2) = cx;\n+                    match exp_map2.find(&item.id) {\n+                        Some(exports) => {\n+                            for export in exports.iter() {\n+                                if export.reexport && is_local(export.def_id) {\n+                                    debug2!(\"found reexported {:?}\", export);\n+                                    let id = export.def_id.node;\n+                                    self.exported_items.insert(id);\n+                                }\n+                            }\n+                        }\n+                        None => {}\n+                    }\n+                }\n+                _ => {}\n             }\n+        }\n+\n+        visit::walk_item(self, item, cx);\n+\n+        self.path_all_public = orig_all_pub;\n     }\n \n-    fn visit_block<'mm>(&mut self, block:&Block, method_map:&'mm method_map) {\n+    fn visit_block(&mut self, block:&Block, cx: Context<'self>) {\n \n             // Gather up all the privileged items.\n             let mut n_added = 0;\n@@ -383,16 +453,16 @@ impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n                 }\n             }\n \n-            visit::walk_block(self, block, method_map);\n+            visit::walk_block(self, block, cx);\n \n             do n_added.times {\n                 ignore(self.privileged_items.pop());\n             }\n \n     }\n \n-    fn visit_expr<'mm>(&mut self, expr:@Expr, method_map:&'mm method_map) {\n-\n+    fn visit_expr(&mut self, expr:@Expr, cx: Context<'self>) {\n+        let (method_map, _) = cx;\n             match expr.node {\n                 ExprField(base, ident, _) => {\n                     // Method calls are now a special syntactic form,\n@@ -499,11 +569,11 @@ impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n                 _ => {}\n             }\n \n-            visit::walk_expr(self, expr, method_map);\n+            visit::walk_expr(self, expr, cx);\n \n     }\n \n-    fn visit_pat<'mm>(&mut self, pattern:@Pat, method_map:&'mm method_map) {\n+    fn visit_pat(&mut self, pattern:@Pat, cx: Context<'self>) {\n \n             match pattern.node {\n                 PatStruct(_, ref fields, _) => {\n@@ -550,38 +620,70 @@ impl<'self> Visitor<&'self method_map> for PrivacyVisitor {\n                 _ => {}\n             }\n \n-            visit::walk_pat(self, pattern, method_map);\n+            visit::walk_pat(self, pattern, cx);\n     }\n }\n \n-pub fn check_crate<'mm>(tcx: ty::ctxt,\n-                        method_map: &'mm method_map,\n-                        crate: &ast::Crate) {\n+pub fn check_crate(tcx: ty::ctxt,\n+                   method_map: &method_map,\n+                   exp_map2: &ExportMap2,\n+                   crate: &ast::Crate) -> ExportedItems {\n     let privileged_items = @mut ~[];\n \n     let mut visitor = PrivacyVisitor {\n         tcx: tcx,\n         privileged_items: privileged_items,\n+        exported_items: HashSet::new(),\n+        path_all_public: true, // start out as public\n     };\n-    visit::walk_crate(&mut visitor, crate, method_map);\n+    visit::walk_crate(&mut visitor, crate, (method_map, exp_map2));\n+    return visitor.exported_items;\n }\n \n /// Validates all of the visibility qualifers placed on the item given. This\n /// ensures that there are no extraneous qualifiers that don't actually do\n /// anything. In theory these qualifiers wouldn't parse, but that may happen\n /// later on down the road...\n fn check_sane_privacy(tcx: ty::ctxt, item: @ast::item) {\n+    let check_inherited = |sp: Span, vis: ast::visibility, note: &str| {\n+        if vis != ast::inherited {\n+            tcx.sess.span_err(sp, \"unnecessary visibility qualifier\");\n+            if note.len() > 0 {\n+                tcx.sess.span_note(sp, note);\n+            }\n+        }\n+    };\n+    let check_not_priv = |sp: Span, vis: ast::visibility, note: &str| {\n+        if vis == ast::private {\n+            tcx.sess.span_err(sp, \"unnecessary `priv` qualifier\");\n+            if note.len() > 0 {\n+                tcx.sess.span_note(sp, note);\n+            }\n+        }\n+    };\n     match item.node {\n         // implementations of traits don't need visibility qualifiers because\n         // that's controlled by having the trait in scope.\n         ast::item_impl(_, Some(*), _, ref methods) => {\n+            check_inherited(item.span, item.vis,\n+                            \"visibility qualifiers have no effect on trait impls\");\n             for m in methods.iter() {\n-                match m.vis {\n-                    ast::private | ast::public => {\n-                        tcx.sess.span_err(m.span, \"unnecessary visibility\")\n-                    }\n-                    ast::inherited => {}\n-                }\n+                check_inherited(m.span, m.vis, \"\");\n+            }\n+        }\n+\n+        ast::item_impl(_, _, _, ref methods) => {\n+            check_inherited(item.span, item.vis,\n+                            \"place qualifiers on individual methods instead\");\n+            for i in methods.iter() {\n+                check_not_priv(i.span, i.vis, \"functions are private by default\");\n+            }\n+        }\n+        ast::item_foreign_mod(ref fm) => {\n+            check_inherited(item.span, item.vis,\n+                            \"place qualifiers on individual functions instead\");\n+            for i in fm.items.iter() {\n+                check_not_priv(i.span, i.vis, \"functions are private by default\");\n             }\n         }\n \n@@ -624,22 +726,18 @@ fn check_sane_privacy(tcx: ty::ctxt, item: @ast::item) {\n             for m in methods.iter() {\n                 match *m {\n                     ast::provided(ref m) => {\n-                        match m.vis {\n-                            ast::private | ast::public => {\n-                                tcx.sess.span_err(m.span, \"unnecessary \\\n-                                                           visibility\");\n-                            }\n-                            ast::inherited => {}\n-                        }\n+                        check_inherited(m.span, m.vis,\n+                                        \"unnecessary visibility\");\n                     }\n-                    // this is warned about in the parser\n                     ast::required(*) => {}\n                 }\n             }\n         }\n \n-        ast::item_impl(*) | ast::item_static(*) | ast::item_foreign_mod(*) |\n+        ast::item_static(*) |\n         ast::item_fn(*) | ast::item_mod(*) | ast::item_ty(*) |\n-        ast::item_mac(*) => {}\n+        ast::item_mac(*) => {\n+            check_not_priv(item.span, item.vis, \"items are private by default\");\n+        }\n     }\n }"}, {"sha": "320baf3318164c5bfeb3113762fb8615fe82b344", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1661,6 +1661,9 @@ impl Resolver {\n                            ident: Ident,\n                            new_parent: ReducedGraphParent) {\n         let privacy = visibility_to_privacy(visibility);\n+        debug!(\"(building reduced graph for \\\n+                external crate) building external def, priv %?\",\n+               privacy);\n         match def {\n           DefMod(def_id) | DefForeignMod(def_id) | DefStruct(def_id) |\n           DefTy(def_id) => {\n@@ -1788,7 +1791,8 @@ impl Resolver {\n     fn build_reduced_graph_for_external_crate_def(@mut self,\n                                                   root: @mut Module,\n                                                   def_like: DefLike,\n-                                                  ident: Ident) {\n+                                                  ident: Ident,\n+                                                  visibility: visibility) {\n         match def_like {\n             DlDef(def) => {\n                 // Add the new child item, if necessary.\n@@ -1798,11 +1802,12 @@ impl Resolver {\n                         // eagerly.\n                         do csearch::each_child_of_item(self.session.cstore,\n                                                        def_id)\n-                                |def_like, child_ident| {\n+                                |def_like, child_ident, vis| {\n                             self.build_reduced_graph_for_external_crate_def(\n                                 root,\n                                 def_like,\n-                                child_ident)\n+                                child_ident,\n+                                vis)\n                         }\n                     }\n                     _ => {\n@@ -1813,7 +1818,7 @@ impl Resolver {\n                                            dummy_sp());\n \n                         self.handle_external_def(def,\n-                                                 public,\n+                                                 visibility,\n                                                  child_name_bindings,\n                                                  self.session.str_of(ident),\n                                                  ident,\n@@ -1897,10 +1902,11 @@ impl Resolver {\n                                     let def = DefFn(\n                                         static_method_info.def_id,\n                                         static_method_info.purity);\n+\n+                                    let p = visibility_to_privacy(\n+                                        static_method_info.vis);\n                                     method_name_bindings.define_value(\n-                                        Public,\n-                                        def,\n-                                        dummy_sp());\n+                                        p, def, dummy_sp());\n                                 }\n                             }\n \n@@ -1931,12 +1937,13 @@ impl Resolver {\n         };\n \n         do csearch::each_child_of_item(self.session.cstore, def_id)\n-                |def_like, child_ident| {\n+                |def_like, child_ident, visibility| {\n             debug!(\"(populating external module) ... found ident: %s\",\n                    token::ident_to_str(&child_ident));\n             self.build_reduced_graph_for_external_crate_def(module,\n                                                             def_like,\n-                                                            child_ident)\n+                                                            child_ident,\n+                                                            visibility)\n         }\n         module.populated = true\n     }\n@@ -1956,10 +1963,11 @@ impl Resolver {\n                                                   root: @mut Module) {\n         do csearch::each_top_level_item_of_crate(self.session.cstore,\n                                                  root.def_id.unwrap().crate)\n-                |def_like, ident| {\n+                |def_like, ident, visibility| {\n             self.build_reduced_graph_for_external_crate_def(root,\n                                                             def_like,\n-                                                            ident)\n+                                                            ident,\n+                                                            visibility)\n         }\n     }\n "}, {"sha": "36904a1ba9bd39bff522815b9a93149e071abcdd", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -3007,6 +3007,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n             diag: diag,\n             tcx: cx.tcx,\n             reexports2: cx.exp_map2,\n+            exported_items: cx.exported_items,\n             item_symbols: item_symbols,\n             discrim_symbols: discrim_symbols,\n             non_inlineable_statics: &cx.non_inlineable_statics,\n@@ -3100,6 +3101,7 @@ pub fn trans_crate(sess: session::Session,\n                                      llmod_id,\n                                      analysis.ty_cx,\n                                      analysis.exp_map2,\n+                                     analysis.exported_items,\n                                      analysis.maps,\n                                      symbol_hasher,\n                                      link_meta,"}, {"sha": "134db45be43cb328ca80cee04c3f08828d63309c", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -16,6 +16,7 @@ use lib::llvm::{llvm, TargetData, TypeNames};\n use lib::llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::astencode;\n+use middle::privacy;\n use middle::resolve;\n use middle::trans::adt;\n use middle::trans::base;\n@@ -49,6 +50,7 @@ pub struct CrateContext {\n      intrinsics: HashMap<&'static str, ValueRef>,\n      item_vals: HashMap<ast::NodeId, ValueRef>,\n      exp_map2: resolve::ExportMap2,\n+     exported_items: @privacy::ExportedItems,\n      reachable: @mut HashSet<ast::NodeId>,\n      item_symbols: HashMap<ast::NodeId, ~str>,\n      link_meta: LinkMeta,\n@@ -127,6 +129,7 @@ impl CrateContext {\n                name: &str,\n                tcx: ty::ctxt,\n                emap2: resolve::ExportMap2,\n+               exported_items: @privacy::ExportedItems,\n                maps: astencode::Maps,\n                symbol_hasher: hash::State,\n                link_meta: LinkMeta,\n@@ -187,6 +190,7 @@ impl CrateContext {\n                   intrinsics: intrinsics,\n                   item_vals: HashMap::new(),\n                   exp_map2: emap2,\n+                  exported_items: exported_items,\n                   reachable: reachable,\n                   item_symbols: HashMap::new(),\n                   link_meta: link_meta,"}, {"sha": "5111682f6d061e0bed20ab9b33038e0cb5f7b627", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -702,7 +702,7 @@ impl AstBuilder for @ExtCtxt {\n                     attrs: attrs,\n                     id: ast::DUMMY_NODE_ID,\n                     node: node,\n-                    vis: ast::public,\n+                    vis: ast::inherited,\n                     span: span }\n     }\n "}, {"sha": "66774cb275bdd3e3b2b16d7e18a33a8d2421cbbd", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -44,7 +44,6 @@ pub enum ObsoleteSyntax {\n     ObsoleteImplSyntax,\n     ObsoleteMutOwnedPointer,\n     ObsoleteMutVector,\n-    ObsoleteImplVisibility,\n     ObsoleteRecordType,\n     ObsoleteRecordPattern,\n     ObsoletePostFnTySigil,\n@@ -60,9 +59,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteNamedExternModule,\n     ObsoleteMultipleLocalDecl,\n     ObsoleteMutWithMultipleBindings,\n-    ObsoleteExternVisibility,\n     ObsoleteUnsafeExternFn,\n-    ObsoletePrivVisibility,\n     ObsoleteTraitFuncVisibility,\n     ObsoleteConstPointer,\n     ObsoleteEmptyImpl,\n@@ -162,11 +159,6 @@ impl ParserObsoleteMethods for Parser {\n                  in a mutable location, like a mutable local variable or an \\\n                  `@mut` box\"\n             ),\n-            ObsoleteImplVisibility => (\n-                \"visibility-qualified implementation\",\n-                \"`pub` or `priv` goes on individual functions; remove the \\\n-                 `pub` or `priv`\"\n-            ),\n             ObsoleteRecordType => (\n                 \"structural record type\",\n                 \"use a structure instead\"\n@@ -234,20 +226,11 @@ impl ParserObsoleteMethods for Parser {\n                 \"use multiple local declarations instead of e.g. `let mut \\\n                  (x, y) = ...`.\"\n             ),\n-            ObsoleteExternVisibility => (\n-                \"`pub extern` or `priv extern`\",\n-                \"place the `pub` or `priv` on the individual external items \\\n-                 instead\"\n-            ),\n             ObsoleteUnsafeExternFn => (\n                 \"unsafe external function\",\n                 \"external functions are always unsafe; remove the `unsafe` \\\n                  keyword\"\n             ),\n-            ObsoletePrivVisibility => (\n-                \"`priv` not necessary\",\n-                \"an item without a visibility qualifier is private by default\"\n-            ),\n             ObsoleteTraitFuncVisibility => (\n                 \"visibility not necessary\",\n                 \"trait functions inherit the visibility of the trait itself\""}, {"sha": "72e70e11bcbb68ab02218a04a03f241d4f5f1a84", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -922,7 +922,7 @@ impl Parser {\n             let attrs = p.parse_outer_attributes();\n             let lo = p.span.lo;\n \n-            let vis = p.parse_non_priv_visibility();\n+            let vis = p.parse_visibility();\n             let pur = p.parse_fn_purity();\n             // NB: at the moment, trait methods are public by default; this\n             // could change.\n@@ -3753,7 +3753,7 @@ impl Parser {\n         let attrs = self.parse_outer_attributes();\n         let lo = self.span.lo;\n \n-        let visa = self.parse_non_priv_visibility();\n+        let visa = self.parse_visibility();\n         let pur = self.parse_fn_purity();\n         let ident = self.parse_ident();\n         let generics = self.parse_generics();\n@@ -3801,7 +3801,7 @@ impl Parser {\n     // Parses two variants (with the region/type params always optional):\n     //    impl<T> Foo { ... }\n     //    impl<T> ToStr for ~[T] { ... }\n-    fn parse_item_impl(&self, visibility: ast::visibility) -> item_info {\n+    fn parse_item_impl(&self) -> item_info {\n         // First, parse type parameters if necessary.\n         let generics = self.parse_generics();\n \n@@ -3846,11 +3846,6 @@ impl Parser {\n             None\n         };\n \n-        // Do not allow visibility to be specified.\n-        if visibility != ast::inherited {\n-            self.obsolete(*self.span, ObsoleteImplVisibility);\n-        }\n-\n         let mut meths = ~[];\n         if self.eat(&token::SEMI) {\n             self.obsolete(*self.span, ObsoleteEmptyImpl);\n@@ -4014,18 +4009,6 @@ impl Parser {\n         else { inherited }\n     }\n \n-    // parse visibility, but emits an obsolete error if it's private\n-    fn parse_non_priv_visibility(&self) -> visibility {\n-        match self.parse_visibility() {\n-            public => public,\n-            inherited => inherited,\n-            private => {\n-                self.obsolete(*self.last_span, ObsoletePrivVisibility);\n-                inherited\n-            }\n-        }\n-    }\n-\n     fn parse_staticness(&self) -> bool {\n         if self.eat_keyword(keywords::Static) {\n             self.obsolete(*self.last_span, ObsoleteStaticMethod);\n@@ -4218,7 +4201,7 @@ impl Parser {\n     // parse a function declaration from a foreign module\n     fn parse_item_foreign_fn(&self,  attrs: ~[Attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n-        let vis = self.parse_non_priv_visibility();\n+        let vis = self.parse_visibility();\n \n         // Parse obsolete purity.\n         let purity = self.parse_fn_purity();\n@@ -4354,11 +4337,6 @@ impl Parser {\n                 self.obsolete(*self.last_span, ObsoleteNamedExternModule);\n             }\n \n-            // Do not allow visibility to be specified.\n-            if visibility != ast::inherited {\n-                self.obsolete(*self.last_span, ObsoleteExternVisibility);\n-            }\n-\n             let abis = opt_abis.unwrap_or(AbiSet::C());\n \n             let (inner, next) = self.parse_inner_attrs_and_next();\n@@ -4369,7 +4347,7 @@ impl Parser {\n                                           self.last_span.hi,\n                                           ident,\n                                           item_foreign_mod(m),\n-                                          public,\n+                                          visibility,\n                                           maybe_append(attrs, Some(inner))));\n         }\n \n@@ -4616,7 +4594,7 @@ impl Parser {\n \n         let lo = self.span.lo;\n \n-        let visibility = self.parse_non_priv_visibility();\n+        let visibility = self.parse_visibility();\n \n         // must be a view item:\n         if self.eat_keyword(keywords::Use) {\n@@ -4724,8 +4702,7 @@ impl Parser {\n         }\n         if self.eat_keyword(keywords::Impl) {\n             // IMPL ITEM\n-            let (ident, item_, extra_attrs) =\n-                self.parse_item_impl(visibility);\n+            let (ident, item_, extra_attrs) = self.parse_item_impl();\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n@@ -4748,7 +4725,7 @@ impl Parser {\n         maybe_whole!(iovi self, nt_item);\n         let lo = self.span.lo;\n \n-        let visibility = self.parse_non_priv_visibility();\n+        let visibility = self.parse_visibility();\n \n         if (self.is_keyword(keywords::Const) || self.is_keyword(keywords::Static)) {\n             // FOREIGN CONST ITEM"}, {"sha": "ea14229cc48a7520683d3871a3652581f86776ae", "filename": "src/test/auxiliary/issue2378a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fissue2378a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378a.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -11,7 +11,7 @@\n #[link (name = \"issue2378a\")];\n #[crate_type = \"lib\"];\n \n-enum maybe<T> { just(T), nothing }\n+pub enum maybe<T> { just(T), nothing }\n \n impl <T:Clone> Index<uint,T> for maybe<T> {\n     fn index(&self, _idx: &uint) -> T {"}, {"sha": "71c0bab138f46ec2437d2740306487c18789cac9", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,7 +15,7 @@ extern mod issue2378a;\n \n use issue2378a::maybe;\n \n-struct two_maybes<T> {a: maybe<T>, b: maybe<T>}\n+pub struct two_maybes<T> {a: maybe<T>, b: maybe<T>}\n \n impl<T:Clone> Index<uint,(T,T)> for two_maybes<T> {\n     fn index(&self, idx: &uint) -> (T, T) {"}, {"sha": "96bae65639073de25c00b22890712223a740fd74", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // original problem\n-fn foo<T>() -> int {\n+pub fn foo<T>() -> int {\n     {\n         static foo: int = 2;\n         foo"}, {"sha": "150de8d314d8f769d9ed1de9675f6eea98d73d1a", "filename": "src/test/auxiliary/packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fpacked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fpacked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpacked.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,5 +1,5 @@\n #[packed]\n-struct S {\n+pub struct S {\n     a: u8,\n     b: u32\n }"}, {"sha": "d46ccf299e822550294f2008ba1e6fcff3cd7dff", "filename": "src/test/auxiliary/static_priv_by_default.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type = \"lib\"];\n+#[no_std];\n+\n+static private: int = 0;\n+pub static public: int = 0;\n+\n+pub struct A(());\n+\n+impl A {\n+    fn foo() {}\n+}\n+\n+mod foo {\n+    pub static a: int = 0;\n+    pub fn b() {}\n+    pub struct c;\n+    pub enum d {}\n+\n+    pub struct A(());\n+\n+    impl A {\n+        fn foo() {}\n+    }\n+\n+    // these are public so the parent can reexport them.\n+    pub static reexported_a: int = 0;\n+    pub fn reexported_b() {}\n+    pub struct reexported_c;\n+    pub enum reexported_d {}\n+}\n+\n+pub mod bar {\n+    pub use e = foo::reexported_a;\n+    pub use f = foo::reexported_b;\n+    pub use g = foo::reexported_c;\n+    pub use h = foo::reexported_d;\n+}\n+\n+pub static a: int = 0;\n+pub fn b() {}\n+pub struct c;\n+pub enum d {}\n+\n+static i: int = 0;\n+fn j() {}\n+struct k;\n+enum l {}"}, {"sha": "872f3b1010e2af2673e69b7c4b6e393e7058b1e3", "filename": "src/test/compile-fail/obsolete-syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-syntax.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -54,9 +54,9 @@ extern mod obsolete_name {\n     fn bar();\n }\n \n-pub extern {\n-    //~^ ERROR obsolete syntax: `pub extern`\n-    pub fn bar();\n+trait A {\n+    pub fn foo(); //~ ERROR: visibility not necessary\n+    pub fn bar(); //~ ERROR: visibility not necessary\n }\n \n fn main() { }"}, {"sha": "db649ed0cc60632cbbbe59f49b624ed56b3d5b43", "filename": "src/test/compile-fail/priv-in-bad-locations.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpriv-in-bad-locations.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub extern {\n+    //~^ ERROR unnecessary visibility\n+    pub fn bar();\n+}\n+\n+trait A {\n+    fn foo() {}\n+}\n+\n+struct B;\n+\n+pub impl B {} //~ ERROR: unnecessary visibility\n+\n+pub impl A for B { //~ ERROR: unnecessary visibility\n+    pub fn foo() {} //~ ERROR: unnecessary visibility\n+}\n+\n+pub fn main() {}"}, {"sha": "59d7e23855c18dd7a4b09408bfb06ab89b13b639", "filename": "src/test/compile-fail/static-priv-by-default.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:static_priv_by_default.rs\n+\n+#[no_std];\n+\n+extern mod static_priv_by_default;\n+\n+mod child {\n+    pub mod childs_child {\n+        static private: int = 0;\n+        pub static public: int = 0;\n+    }\n+}\n+\n+fn foo(_: int) {}\n+\n+fn full_ref() {\n+    foo(static_priv_by_default::private); //~ ERROR: unresolved name\n+    foo(static_priv_by_default::public);\n+    foo(child::childs_child::private); //~ ERROR: unresolved name\n+    foo(child::childs_child::public);\n+}\n+\n+fn medium_ref() {\n+    use child::childs_child;\n+    foo(childs_child::private); //~ ERROR: unresolved name\n+    foo(childs_child::public);\n+}\n+\n+fn main() {}"}, {"sha": "28a17cf5e1c5ce214e0dc61ea6943d6bdd2927cd", "filename": "src/test/compile-fail/static-priv-by-default2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:static_priv_by_default.rs\n+\n+extern mod static_priv_by_default;\n+\n+mod child {\n+    pub mod childs_child {\n+        static private: int = 0;\n+        pub static public: int = 0;\n+    }\n+}\n+\n+fn main() {\n+    use static_priv_by_default::private; //~ ERROR: unresolved import\n+    //~^ ERROR: failed to resolve\n+    use static_priv_by_default::public;\n+    use child::childs_child::private; //~ ERROR: unresolved import\n+    //~^ ERROR: failed to resolve\n+    use child::childs_child::public;\n+}"}, {"sha": "29c87e77ac02b309d156d2e5b7c7b62f8edf7337", "filename": "src/test/compile-fail/useless-priv2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv2.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,8 +12,3 @@ pub trait E {\n     pub fn foo();               //~ ERROR: obsolete syntax\n }\n trait F { pub fn foo(); }       //~ ERROR: obsolete syntax\n-\n-struct B;\n-impl E for B {\n-    priv fn foo() {}             //~ ERROR: obsolete syntax\n-}"}, {"sha": "b4a999766b541c4aa35aa1375e114aeb19c7fca9", "filename": "src/test/compile-fail/xc-private-method.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,16 +1,22 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n // xfail-fast\n // aux-build:xc_private_method_lib.rs\n \n extern mod xc_private_method_lib;\n \n fn main() {\n-    // normal method on struct\n-    let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();  //~ ERROR method `meth_struct` is private\n-    // static method on struct\n-    let _ = xc_private_method_lib::Struct::static_meth_struct();  //~ ERROR method `static_meth_struct` is private\n+    let _ = xc_private_method_lib::Struct::static_meth_struct();\n+    //~^ ERROR: unresolved name\n \n-    // normal method on enum\n-    let _ = xc_private_method_lib::Variant1(20).meth_enum();  //~ ERROR method `meth_enum` is private\n-    // static method on enum\n-    let _ = xc_private_method_lib::Enum::static_meth_enum();  //~ ERROR method `static_meth_enum` is private\n+    let _ = xc_private_method_lib::Enum::static_meth_enum();\n+    //~^ ERROR: unresolved name\n }"}, {"sha": "c2eaa9287f495ba26ef8323c75d63ba89d83398f", "filename": "src/test/compile-fail/xc-private-method2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xc_private_method_lib.rs\n+\n+extern mod xc_private_method_lib;\n+\n+fn main() {\n+    let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();  //~ ERROR method `meth_struct` is private\n+\n+    let _ = xc_private_method_lib::Variant1(20).meth_enum();  //~ ERROR method `meth_enum` is private\n+}"}, {"sha": "38649981f939ca38cd0e59ab76626d90ac45b1f6", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:static_priv_by_default.rs\n+\n+#[allow(unused_imports)];\n+#[no_std];\n+\n+extern mod static_priv_by_default;\n+\n+fn foo<T>() {}\n+\n+#[start]\n+fn main(_: int, _: **u8, _: *u8) -> int {\n+    // Actual public items should be public\n+    static_priv_by_default::a;\n+    static_priv_by_default::b;\n+    static_priv_by_default::c;\n+    foo::<static_priv_by_default::d>();\n+\n+    // publicly re-exported items should be available\n+    static_priv_by_default::bar::e;\n+    static_priv_by_default::bar::f;\n+    static_priv_by_default::bar::g;\n+    foo::<static_priv_by_default::bar::h>();\n+\n+    // private items at the top should be inaccessible\n+    static_priv_by_default::i;\n+    //~^ ERROR: unresolved name\n+    static_priv_by_default::j;\n+    //~^ ERROR: unresolved name\n+    static_priv_by_default::k;\n+    //~^ ERROR: unresolved name\n+    foo::<static_priv_by_default::l>();\n+    //~^ ERROR: use of undeclared type name\n+    //~^^ ERROR: use of undeclared type name\n+\n+    // public items in a private mod should be inaccessible\n+    static_priv_by_default::foo::a;\n+    //~^ ERROR: unresolved name\n+    static_priv_by_default::foo::b;\n+    //~^ ERROR: unresolved name\n+    static_priv_by_default::foo::c;\n+    //~^ ERROR: unresolved name\n+    foo::<static_priv_by_default::foo::d>();\n+    //~^ ERROR: use of undeclared type name\n+    //~^^ ERROR: use of undeclared type name\n+\n+    3\n+}"}, {"sha": "bbc6501bc774cbdfe49ea933f2c4158909f0f300", "filename": "src/test/run-pass/attr-no-drop-flag-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-no-drop-flag-size.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ impl<T> Drop for Test<T> {\n     fn drop(&mut self) { }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(size_of::<int>(), size_of::<Test<int>>());\n }"}, {"sha": "4e79013de833edead735e950c638e4c3576e8b9b", "filename": "src/test/run-pass/borrowck-macro-interaction-issue-6304.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-macro-interaction-issue-6304.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -26,4 +26,4 @@ impl Foo {\n   fn check_id(&mut self, s: int) { fail!() }\n }\n  \n-fn main() { }\n+pub fn main() { }"}, {"sha": "79cad643dfd867baaef79030cc1072a7e2ab5aca", "filename": "src/test/run-pass/borrowck-pat-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-enum.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -43,5 +43,5 @@ fn match_mut_reg(v: &mut Option<int>) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "366752f46b003e7ad22e45ee7b634b49b0c7f977", "filename": "src/test/run-pass/borrowck-static-item-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-static-item-in-fn.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,6 +10,6 @@\n \n // Regression test for issue #7740\n \n-fn main() {\n+pub fn main() {\n     static A: &'static char = &'A';\n }"}, {"sha": "87d42943fac97862f2c30c51cbabe9e8a1cc5d0a", "filename": "src/test/run-pass/borrowck-unary-move-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-unary-move-2.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -26,7 +26,7 @@ fn noncopyable() -> noncopyable {\n \n struct wrapper(noncopyable);\n \n-fn main() {\n+pub fn main() {\n     let x1 = wrapper(noncopyable());\n     let _x2 = *x1;\n }"}, {"sha": "d50b4f15f4efe5afb53dcf1915f295b7a198fea9", "filename": "src/test/run-pass/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -50,5 +50,5 @@ fn box_imm_recs(v: &Outer) {\n     borrow(v.f.g.h); // OK\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "4ee0d42ae1315c5d0763ec69fc43806d4a565180", "filename": "src/test/run-pass/borrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-autoderef-and-autoborrowvec-combined-issue-6272.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -27,7 +27,7 @@\n // run-fail/borrowck-wg-autoderef-and-autoborrowvec-combined-fail-issue-6272.rs\n \n \n-fn main() {\n+pub fn main() {\n     let a = @mut 3i;\n     let b = @mut [a];\n     let c = @mut [3];"}, {"sha": "45f4302a5afe35924cf2c8e1efbe2f552ddb4dfc", "filename": "src/test/run-pass/bug-7183-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-7183-generics.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -33,7 +33,7 @@ impl<T: Speak> Speak for Option<T> {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(3.hi(), ~\"hello: 3\");\n     assert_eq!(Some(Some(3)).hi(), ~\"something!something!hello: 3\");\n     assert_eq!(None::<int>.hi(), ~\"hello - none\");"}, {"sha": "ec5af6929763f607754462af0dd139c4cbb2cf44", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -26,7 +26,7 @@ fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);"}, {"sha": "148fb5a340f15850211e2d4bb04d9196d7bd95e2", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,7 +22,7 @@ fn foo<T: Foo>(val: T, chan: comm::Chan<T>) {\n     chan.send(val);\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     foo(31337, c);\n     assert!(p.recv() == 31337);"}, {"sha": "740b8c2016a88f5c5a0ba378a48450945005ea73", "filename": "src/test/run-pass/builtin-superkinds-phantom-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-phantom-typaram.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -18,4 +18,4 @@ struct X<T>(());\n \n impl <T> Foo for X<T> { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "a8f5f27b4d9a332cfbd14f8a1bf994e35194a6c5", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,7 +21,7 @@ trait Foo : Send {\n \n impl <T: Send> Foo for T { }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     1193182.foo(c);\n     assert!(p.recv() == 1193182);"}, {"sha": "9643e2986d2e59e26028c8603e1d6acab29496e8", "filename": "src/test/run-pass/builtin-superkinds-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-simple.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,4 +14,4 @@ trait Foo : Send { }\n \n impl Foo for int { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "d96679c69fd1b14fb87e4bdd8f6e54379608bd52", "filename": "src/test/run-pass/builtin-superkinds-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-typaram.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,4 +15,4 @@ trait Foo : Send { }\n \n impl <T: Send> Foo for T { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "ce026d3e2e02664a8e0edbecb832f5af4a59c414", "filename": "src/test/run-pass/cast-mutable-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-mutable-trait.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -25,10 +25,10 @@ fn bar(t: @mut T) {\n     t.foo();\n }\n \n-fn main() {\n+pub fn main() {\n     let s = @mut S { unused: 0 };\n     let s2 = s as @mut T;\n     s2.foo();\n     bar(s2);\n     bar(s as @mut T);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "d35d6d9f07e4e627aeeb14d2ff729c9ea597ac2c", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@ fn foo(blk: ~fn:Send()) {\n     blk();\n }\n \n-fn main() {\n+pub fn main() {\n     let (p,c) = comm::stream();\n     do foo {\n         c.send(());"}, {"sha": "b3cb8580f7d64df7b4cf45d0a90c228963f53413", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -56,7 +56,7 @@ static am: bool = 2 > 1;\n static an: bool = 2 > -2;\n static ao: bool = 1.0 > -2.0;\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(a, -1);\n     assert_eq!(a2, 6);\n     assert_approx_eq!(b, 5.7);"}, {"sha": "2bb0516cad449ce63aedaadc606bd33e813eadfc", "filename": "src/test/run-pass/const-struct-offsets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct-offsets.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,4 +10,4 @@ struct Bar {\n \n static bar: Bar = Bar { i: 0, v: IntVal(0) };\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "639ea59585efaf1e17161b5d4661a5c2c62a5d44", "filename": "src/test/run-pass/default-method-parsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-parsing.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,4 +12,4 @@ trait Foo {\n     fn m(&self, _:int) { }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "2bcf264bb1f14c20b38b2f73ec7e879bfcaa2c0f", "filename": "src/test/run-pass/default-method-supertrait-vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-supertrait-vtable.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -31,6 +31,6 @@ impl Y for int {\n \n impl Z for int {}\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(12.x(), 12);\n }"}, {"sha": "61696c2eeac755f21ea8287c26f5027c176ffa8f", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,7 +15,7 @@ enum E<T,U> {\n     C\n }\n \n-fn main() {\n+pub fn main() {\n     let _ = A::<int, int>(1i).clone();\n     let _ = B(1i, 1.234).deep_clone();\n }"}, {"sha": "02043b524a9ce9258ca293b20b5a8b374cda4ece", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -11,6 +11,6 @@\n #[deriving(Clone, DeepClone)]\n struct S<T>(T, ());\n \n-fn main() {\n+pub fn main() {\n     let _ = S(1i, ()).clone().deep_clone();\n }"}, {"sha": "412cc3b3a858cfc5c728ce0a85c77d10688f91c5", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -31,4 +31,4 @@ struct S {\n     _nil: ()\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "431c856ee88a59927f455e9d2f62e79c43050c47", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -35,7 +35,7 @@ struct ShortCircuit {\n     y: FailCmp\n }\n \n-fn main() {\n+pub fn main() {\n     let a = ShortCircuit { x: 1, y: FailCmp };\n     let b = ShortCircuit { x: 2, y: FailCmp };\n "}, {"sha": "2b0245fa5d286aa5b06f31321ab48b577c8bff2b", "filename": "src/test/run-pass/deriving-self-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ struct A<'self> {\n     x: &'self int\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: &1 };\n     let b = A { x: &2 };\n "}, {"sha": "a6068b52740d0a645845a66f2f16c029ac3e5680", "filename": "src/test/run-pass/deriving-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-to-str.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -34,7 +34,7 @@ impl ToStr for Custom {\n     fn to_str(&self) -> ~str { ~\"yay\" }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(B1.to_str(), ~\"B1\");\n     assert_eq!(B2.to_str(), ~\"B2\");\n     assert_eq!(C1(3).to_str(), ~\"C1(3)\");"}, {"sha": "59acc353fed60218be8bee3bf0151d6ef0e6e3d0", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -33,7 +33,7 @@ struct Lots {\n     j: (),\n }\n \n-fn main() {\n+pub fn main() {\n     let lots: Lots = Zero::zero();\n     assert!(lots.is_zero());\n }"}, {"sha": "28f38829167bbf6d21ead5dbe06420d994c197a2", "filename": "src/test/run-pass/enum-discr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fenum-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discr.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,7 +12,7 @@ enum Hero {\n     Spiderman = -4\n }\n \n-fn main() {\n+pub fn main() {\n     let pet: Animal = Snake;\n     let hero: Hero = Superman;\n     assert!(pet as uint == 3);"}, {"sha": "a55b5eebefbaee8a8d066d203b600cc2c3562c4b", "filename": "src/test/run-pass/enum-vec-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-vec-initializer.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,7 +15,7 @@ enum Flopsy {\n static BAR:uint = Bunny as uint;\n static BAR2:uint = BAR;\n \n-fn main() {\n+pub fn main() {\n     let _v = [0, .. Bunny as uint];\n     let _v = [0, .. BAR];\n     let _v = [0, .. BAR2];"}, {"sha": "48bce39970f98613dcad9e431d187d613d8495d4", "filename": "src/test/run-pass/expr-repeat-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-repeat-vstore.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,6 +1,6 @@\n use std::io::println;\n \n-fn main() {\n+pub fn main() {\n     let v: ~[int] = ~[ 1, ..5 ];\n     println(v[0].to_str());\n     println(v[1].to_str());"}, {"sha": "925ec8e7ff72040253e863e6e3bb57947af3e7cb", "filename": "src/test/run-pass/extern-call-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-direct.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,7 +12,7 @@\n \n extern fn f(x: uint) -> uint { x * 2 }\n \n-fn main() {\n+pub fn main() {\n     #[fixed_stack_segment];\n \n     let x = f(22);"}, {"sha": "53a5d3e962118762d959841ae02c3354f2ff4f1a", "filename": "src/test/run-pass/extern-compare-with-return-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-compare-with-return-type.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,7 +19,7 @@ extern fn uintvoidret(_x: uint) {}\n \n extern fn uintuintuintuintret(x: uint, y: uint, z: uint) -> uint { x+y+z }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(voidret1, voidret1);\n     assert!(voidret1 != voidret2);\n "}, {"sha": "891133c78d477fab0bf06b1cedb82a40b2a8a447", "filename": "src/test/run-pass/extoption_env-not-defined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextoption_env-not-defined.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     assert!(option_env!(\"__HOPEFULLY_DOESNT_EXIST__\").is_none());\n }"}, {"sha": "34272b145a29ddcecdb55e1219802ef23aa50dfa", "filename": "src/test/run-pass/filter-block-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffilter-block-view-items.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     // Make sure that this view item is filtered out because otherwise it would\n     // trigger a compilation error\n     #[cfg(not_present)] use foo = bar;"}, {"sha": "87ed7826fed57fbe55fdccaffd2f74c4ca082bee", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for i in x.iter() {"}, {"sha": "34ce8c471132933406e6221e0140de529603376e", "filename": "src/test/run-pass/foreach-external-iterators-hashmap-break-restart.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap-break-restart.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@ use std::hashmap::HashMap;\n // outside the loop, breaks, then _picks back up_ and continues\n // iterating with it.\n \n-fn main() {\n+pub fn main() {\n     let mut h = HashMap::new();\n     let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n@@ -38,4 +38,4 @@ fn main() {\n \n     assert_eq!(x, 6);\n     assert_eq!(y, 60);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "365cde34dce827926400988d7c9d5387950e1d84", "filename": "src/test/run-pass/foreach-external-iterators-hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-hashmap.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n use std::hashmap::HashMap;\n \n-fn main() {\n+pub fn main() {\n     let mut h = HashMap::new();\n     let kvs = [(1, 10), (2, 20), (3, 30)];\n     for &(k,v) in kvs.iter() {\n@@ -24,4 +24,4 @@ fn main() {\n     }\n     assert_eq!(x, 6);\n     assert_eq!(y, 60);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ced538e163e801af214d7b8c3813d6c7ce798c00", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for (n,i) in x.iter().enumerate() {"}, {"sha": "78aba778421b190295818c9c83dc6f746f7a376a", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let y = [2,..100];\n     let mut p = 0;"}, {"sha": "593a996d8dfe9d465d4a1d97d497fdd35782e7ff", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [1,..100];\n     let mut y = 0;\n     for i in x.iter() {\n         y += *i\n     }\n     assert!(y == 100);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "93c9d6b50ec0e46c75c2981deeff784b3937cc7b", "filename": "src/test/run-pass/func-arg-incomplete-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-incomplete-pattern.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -11,10 +11,10 @@ fn foo(Foo {x, _}: Foo) -> *uint {\n     addr\n }\n \n-fn main() {\n+pub fn main() {\n     let obj = ~1;\n     let objptr: *uint = &*obj;\n     let f = Foo {x: obj, y: ~2};\n     let xptr = foo(f);\n     assert_eq!(objptr, xptr);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1b7d641fa8259ffcbfe26ecf6c987523e199931d", "filename": "src/test/run-pass/func-arg-ref-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-ref-pattern.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ fn checkval(~ref x: ~uint) -> uint {\n     *x\n }\n \n-fn main() {\n+pub fn main() {\n     let obj = ~1;\n     let objptr: *uint = &*obj;\n     let xptr = getaddr(obj);"}, {"sha": "ec58198d4a34823e0c245805a1b29b01876b59d6", "filename": "src/test/run-pass/func-arg-wild-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunc-arg-wild-pattern.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -5,6 +5,6 @@ fn foo((x, _): (int, int)) -> int {\n     x\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(foo((22, 23)), 22);\n }"}, {"sha": "2e281812d138f317f4cab0b4c1ab228626b7800c", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,6 +22,6 @@ impl<T> vec_utils<T> for ~[T] {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(vec_utils::map_(&~[1,2,3], |&x| x+1), ~[2,3,4]);\n }"}, {"sha": "3969394a26b93a9daaa6a7c75722b1b268aa7db3", "filename": "src/test/run-pass/hygiene-dodging-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhygiene-dodging-1.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,7 +12,7 @@ mod x {\n     pub fn g() -> uint {14}\n }\n \n-fn main(){\n+pub fn main(){\n     // should *not* shadow the module x:\n     let x = 9;\n     // use it to avoid warnings:"}, {"sha": "3cc7296fa4a8ed0bc5f2982feed9af856e2472cd", "filename": "src/test/run-pass/issue-2611-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2611-3.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -23,4 +23,4 @@ impl A for E {\n   fn b<F,G>(_x: F) -> F { fail!() } //~ ERROR in method `b`, type parameter 0 has 1 bound, but\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d5dd090009a1c70e84b748fdaec0d33e6a7dce16", "filename": "src/test/run-pass/issue-3991.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3991.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -18,4 +18,4 @@ impl HasNested {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "ebf29be6d5e454e25f41289758879b0e89612117", "filename": "src/test/run-pass/issue-4333.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4333.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n use std::io;\n \n-fn main() {\n+pub fn main() {\n     let stdout = &io::stdout() as &io::WriterUtil;\n     stdout.write_line(\"Hello!\");\n }"}, {"sha": "ddcb544c64fca8cc87caf359b6771d45c9c7c2cf", "filename": "src/test/run-pass/issue-4446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4446.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let (port, chan) = stream();\n \n     do spawn {"}, {"sha": "b28ba6811b7bc4f3fc40e8334e538c433ab016f4", "filename": "src/test/run-pass/issue-4735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-4735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4735.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,7 +21,7 @@ impl Drop for NonCopyable {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let t = ~0;\n     let p = unsafe { transmute::<~int, *c_void>(t) };\n     let _z = NonCopyable(p);"}, {"sha": "dd3f54d97ececec4e50ce664727e82eec320c370", "filename": "src/test/run-pass/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -37,7 +37,7 @@ fn print_name(x: &Debuggable)\n     println(fmt!(\"debug_name = %s\", x.debug_name()));\n }\n \n-fn main() {\n+pub fn main() {\n     let thing = Thing::new();\n     print_name(&thing as &Debuggable);\n }"}, {"sha": "c988110607106ee1b7e8580a5fddb5202e5e4ebd", "filename": "src/test/run-pass/issue-5060.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5060.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,7 +22,7 @@ macro_rules! print_hd_tl (\n     })\n )\n \n-fn main() {\n+pub fn main() {\n     print_hd_tl!(x, y, z, w)\n }\n "}, {"sha": "202a3cbcafa2bef0a4285f684b022377feadc64c", "filename": "src/test/run-pass/issue-5192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5192.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -39,6 +39,6 @@ impl Scheduler {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let _sched = Scheduler::new(~UvEventLoop::new() as ~EventLoop);\n }"}, {"sha": "ba70fac0e4e8f67635aa30e61ea6b1365fc460d4", "filename": "src/test/run-pass/issue-5239-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5239-2.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test for issue #5239\n \n-fn main() { \n+pub fn main() { \n     let _f: &fn(int) -> int = |ref x: int| { *x };\n     let foo = 10;\n     assert!(_f(foo) == 10);"}, {"sha": "16fd45a5615f224987bb8d3d316959f4688bd3a1", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ impl FontTableTagConversions for FontTableTag {\n   }\n }\n \n-fn main() {\n+pub fn main() {\n     5.tag_to_str();\n }"}, {"sha": "1d2e7b79931f98dce8b83dca090af4fb973c3928", "filename": "src/test/run-pass/issue-5315.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5315.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n struct A(bool);\n \n-fn main() {\n+pub fn main() {\n     let f = A;\n     f(true);\n }"}, {"sha": "3f1dc2f6986f60c5c2af348072d35e8be9b3b6a7", "filename": "src/test/run-pass/issue-5321-immediates-with-bare-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5321-immediates-with-bare-self.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ impl Fooable for uint {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     2.yes();\n }"}, {"sha": "cf11b9aa7b6ccc6e1b667a56ceafad798acb73f4", "filename": "src/test/run-pass/issue-5353.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5353.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,4 +21,4 @@ fn gl_err_str(err: u32) -> ~str\n   }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d63d8b13b4366fa1da727137bb438bb0fa0a4229", "filename": "src/test/run-pass/issue-5517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5517.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let box1 = @mut 42;\n     let _x = *(&mut *box1) == 42 || *(&mut *box1) == 31337;\n }"}, {"sha": "d68766d5886e93c1cbd27dca06b6de8b7be0b3f9", "filename": "src/test/run-pass/issue-5550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5550.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n #[allow(dead_assignment)];\n \n-fn main() {\n+pub fn main() {\n     let s: ~str = ~\"foobar\";\n     let mut t: &str = s;\n     t = t.slice(0, 3); // for master: str::view(t, 0, 3) maybe"}, {"sha": "d1a1fbf09400579dd2f09b4b95cbf56eafbf45fc", "filename": "src/test/run-pass/issue-5572.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5572.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5572.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,3 +1,3 @@\n fn foo<T: ::std::cmp::Eq>(_t: T) { }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "4ac4b3b33b7ec77fc5402a21d1a986de20909964", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,7 +19,7 @@ failed to typecheck correctly.\n \n struct X { vec: &'static [int] }\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n-fn main() {\n+pub fn main() {\n     for &v in V.iter() {\n         println(fmt!(\"%?\", v.vec));\n     }"}, {"sha": "aee1f8415eff92ba1f7bb17197785676c9665bdf", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -39,7 +39,7 @@ impl<'self> Outer<'self> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let inner = 5;\n     let outer = Outer::new(&inner as &Inner);\n     outer.inner.print();"}, {"sha": "46ec68675e7f3e9293fced720fb8aebaecd8b4fc", "filename": "src/test/run-pass/issue-5741.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5741.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5741.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,7 +12,7 @@\n \n use std::io;\n \n-fn main() {\n+pub fn main() {\n     return;\n     while io::stdin().read_line() != ~\"quit\" { };\n }"}, {"sha": "6fb5c25f7310e397d03d049107394d2142ab851b", "filename": "src/test/run-pass/issue-5917.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-5917.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5917.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,6 +10,6 @@\n \n struct T (&'static [int]);\n static t : T = T (&'static [5, 4, 3]);\n-fn main () {\n+pub fn main () {\n     assert_eq!(t[0], 5);\n }"}, {"sha": "a01a04ebf82721aa03e5b3c4a08be52e063d08c5", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,7 +21,7 @@ impl<E> Graph<int, E> for HashMap<int, int> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let g : ~HashMap<int, int> = ~HashMap::new();\n     let _g2 : ~Graph<int,int> = g as ~Graph<int,int>;\n }"}, {"sha": "d88397499feaec8a140cfad4b5d7a0a7409abb53", "filename": "src/test/run-pass/issue-6130.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6130.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n #[deny(type_limits)];\n \n-fn main() {\n+pub fn main() {\n     let i: uint = 0;\n     assert!(i <= 0xFFFF_FFFF_u);\n "}, {"sha": "98d2ca5d9424e20874a4b0802af7065a8532fb58", "filename": "src/test/run-pass/issue-6141-leaking-owned-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -2,7 +2,7 @@ fn run(f: &fn()) {\n     f()\n }\n \n-fn main() {\n+pub fn main() {\n     let f: ~fn() = || ();\n     run(f);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "668d6f3ae45e3aecafa93b4030cd0527f3ed2281", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ fn swap(f: &fn(~[int]) -> ~[int]) -> ~[int] {\n     f(x)\n }\n \n-fn main() {\n+pub fn main() {\n     let v = swap(|mut x| { x.push(4); x });\n     let w = do swap |mut x| { x.push(4); x };\n     assert_eq!(v, w);"}, {"sha": "3859d15585158f39352cae9f69a28eeac20c774e", "filename": "src/test/run-pass/issue-6341.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,4 +15,4 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {}\n\\ No newline at end of file\n+pub fn main() {}"}, {"sha": "9343f2b61c90093d2a88051484690680e404a086", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: 0 };\n \n     let A { x: ref x } = a;"}, {"sha": "18d327aa360c410af999ea58fd1c585fcac936b8", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ impl Drop for A {\n     fn drop(&mut self) {}\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: 0 };\n \n     match a {"}, {"sha": "2a56f2ad8bc479b2ec8e82aea66ff87bd24200e7", "filename": "src/test/run-pass/issue-7012.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7012.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7012.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,7 +21,7 @@ static test1: signature<'static> =  signature {\n   pattern: &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32]\n };\n \n-fn main() {\n+pub fn main() {\n   let test = &[0x243f6a88u32,0x85a308d3u32,0x13198a2eu32,0x03707344u32,0xa4093822u32,0x299f31d0u32];\n   println(fmt!(\"%b\",test==test1.pattern));\n }"}, {"sha": "9b1643bb2249061de412fb157177b40ce3e24250", "filename": "src/test/run-pass/issue-7344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7344.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,7 +22,7 @@ fn baz() {\n     if \"\" == \"\" {}\n }\n \n-fn main() {\n+pub fn main() {\n     bar();\n     baz();\n }"}, {"sha": "75123243f47d6209119b0e68b2de07ae4587a6fb", "filename": "src/test/run-pass/issue-7519-match-unit-in-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,6 +14,6 @@\n \n fn foo(():()) { }\n \n-fn main() {\n+pub fn main() {\n     foo(());\n }"}, {"sha": "af8b453856b05df1ddbaf8e49239a0dd7f030a8b", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@\n \n */\n \n-fn main() {}\n+pub fn main() {}\n \n trait A {}\n impl<T: 'static> A for T {}"}, {"sha": "fa7d68cf921fd3135eb63bdfda8e772c18c6d6de", "filename": "src/test/run-pass/issue-7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7712.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ struct MyStruct;\n \n impl TraitWithDefaultMethod for MyStruct { }\n \n-fn main() {\n+pub fn main() {\n     MyStruct.method();\n }"}, {"sha": "aaf2ecb71292eb768b170910600935ce00130bf1", "filename": "src/test/run-pass/issue-8171-default-method-self-inherit-builtin-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,4 +22,4 @@ trait TragicallySelfIsNotSend: Send {\n     }\n }\n \n-fn main(){}\n+pub fn main(){}"}, {"sha": "377b9ce262c73ab194cc140535df1fac77218e97", "filename": "src/test/run-pass/issue-8248.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8248.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8248.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@ impl A for B {}\n \n fn foo(_: &mut A) {}\n \n-fn main() {\n+pub fn main() {\n     let mut b = B;\n     foo(&mut b as &mut A);\n }"}, {"sha": "bfc1d9436903145c8160057723ea5bbe93ab099c", "filename": "src/test/run-pass/issue-8249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8249.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ fn foo(a: &mut A) {\n     C{ foo: a };\n }\n \n-fn main() {\n+pub fn main() {\n }\n "}, {"sha": "31ac2c46293188bb0adc271231286417ff9bbd0c", "filename": "src/test/run-pass/issue-8398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-8398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8398.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,5 +14,5 @@ fn foo(a: &mut io::Writer) {\n     a.write([])\n }\n \n-fn main(){}\n+pub fn main(){}\n "}, {"sha": "053d6aa3c906173ac0b61728008c0aa7536b6610", "filename": "src/test/run-pass/issue-9047.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-9047.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-9047.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9047.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -16,4 +16,4 @@ fn decode() -> ~str {\n     ~\"\"\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "27c2ed9e5adf970fbaab8367cbb33b6d683fbb60", "filename": "src/test/run-pass/issue-9110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fissue-9110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9110.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,4 +19,4 @@ macro_rules! silly_macro(\n \n silly_macro!()\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "fdb2805ae1841ad3501d39f6059609f8300efd46", "filename": "src/test/run-pass/let-destruct-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,4 +1,4 @@\n-fn main() {\n+pub fn main() {\n     let x = ~\"hello\";\n     let ref y = x;\n     assert_eq!(x.slice(0, x.len()), y.slice(0, y.len()));"}, {"sha": "93bb2ca98e8b5c5bbf77a2bcf837e176c1c053d6", "filename": "src/test/run-pass/let-var-hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-var-hygiene.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n // shouldn't affect evaluation of $ex:\n macro_rules! bad_macro (($ex:expr) => ({let _x = 9; $ex}))\n-fn main() {\n+pub fn main() {\n     let _x = 8;\n     assert_eq!(bad_macro!(_x),8)\n }"}, {"sha": "a5ea32e515743028e733b986ed8f87817b458e26", "filename": "src/test/run-pass/link-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flink-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flink-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flink-section.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -26,7 +26,7 @@ static magic: uint = 42;\n #[link_section=\"__DATA,__mut\"]\n static mut frobulator: uint = 0xdeadbeef;\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         frobulator = 0xcafebabe;\n         printfln!(\"%? %? %?\", i_live_in_more_text(), magic, frobulator);"}, {"sha": "80901475c04b542ef7b2a3bd0a1468fb560ca8b9", "filename": "src/test/run-pass/lint-cstack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-cstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-cstack.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -23,5 +23,5 @@ trait A {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "e3a0c8417d063bd2f301d61f5db62b04073ef912", "filename": "src/test/run-pass/lint-non-camel-case-types-non-uppercase-statics-unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-camel-case-types-non-uppercase-statics-unicode.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -18,4 +18,4 @@ struct \u30d2;\n \n static \u30e9: uint = 0;\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "cf6640275ed4fce5e1226ea0224df47a1735ac51", "filename": "src/test/run-pass/lint-non-uppercase-statics-lowercase-mut-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flint-non-uppercase-statics-lowercase-mut-statics.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,4 +14,4 @@\n \n static mut bar: int = 2;\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "23f418cfc691ebefb97c8867f0586ce93b24d0eb", "filename": "src/test/run-pass/macro-local-data-key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-local-data-key.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -16,7 +16,7 @@ mod bar {\n     local_data_key!(pub baz: float)\n }\n \n-fn main() {\n+pub fn main() {\n     local_data::get(foo, |x| assert!(x.is_none()));\n     local_data::get(bar::baz, |y| assert!(y.is_none()));\n "}, {"sha": "e90d6b2862671552da86416b054c55ff26c5a709", "filename": "src/test/run-pass/match-drop-strs-issue-4541.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-drop-strs-issue-4541.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,6 +22,6 @@ fn parse_args() -> ~str {\n     return ~\"\"\n }\n \n-fn main() {\n+pub fn main() {\n     io::println(parse_args());\n }"}, {"sha": "671ec5a3965c3d369a06d34b0f6fba4e1a6f05e4", "filename": "src/test/run-pass/match-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -20,6 +20,6 @@ macro_rules! match_inside_expansion(\n     )\n )\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(match_inside_expansion!(),129);\n }"}, {"sha": "6df4c8123610f938ea15b310d58870a2899a6456", "filename": "src/test/run-pass/match-pipe-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-pipe-binding.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -59,7 +59,7 @@ fn test5() {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     test1();\n     test2();\n     test3();"}, {"sha": "0bf0d6e41fa40345391c8e6c56e5007f901b0d0c", "filename": "src/test/run-pass/match-range-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range-static.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,7 +1,7 @@\n static s: int = 1;\n static e: int = 42;\n \n-fn main() {\n+pub fn main() {\n     match 7 {\n         s..e => (),\n         _ => (),"}, {"sha": "a6e61fbacd4be67e7e0f7f7a71b1dacb079ead43", "filename": "src/test/run-pass/match-vec-rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -1,6 +1,6 @@\n // Tests that matching rvalues with drops does not crash.\n \n-fn main() {\n+pub fn main() {\n     match ~[1, 2, 3] {\n         x => {\n             assert_eq!(x.len(), 3);"}, {"sha": "09435962ef7485a997ff8440bc436c126f78e8ec", "filename": "src/test/run-pass/mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmid-path-type-params.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -26,7 +26,7 @@ impl Trait<int> for S2 {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let _ = S::<int>::new::<float>(1, 1.0);\n     let _: S2 = Trait::<int>::new::<float>(1, 1.0);\n }"}, {"sha": "6cf207e5cbc2ce21ae068eca47c05120818c3da7", "filename": "src/test/run-pass/move-out-of-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-out-of-field.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,7 +12,7 @@ fn to_str(sb: StringBuffer) -> ~str {\n     sb.s\n }\n \n-fn main() {\n+pub fn main() {\n     let mut sb = StringBuffer {s: ~\"\"};\n     sb.append(\"Hello, \");\n     sb.append(\"World!\");"}, {"sha": "a28008f3e0bab628374f08fb198b393f5721f3dd", "filename": "src/test/run-pass/multibyte.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fmultibyte.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultibyte.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // Test that multibyte characters don't crash the compiler\n-fn main() {\n+pub fn main() {\n     println(\"\ub9c8\uc774\ub108\uc2a4 \uc0ac\uc778\uc774 \uc5c6\uc73c\uba74\");\n }"}, {"sha": "33c4ed6234eaa772fbef539564cf5101edeb373c", "filename": "src/test/run-pass/nested-enum-same-names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -30,4 +30,4 @@ impl Foo {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "f697f0b59d65f7c837d5ebe4b32a672931eb2ca7", "filename": "src/test/run-pass/nested-function-names-issue-8587.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-function-names-issue-8587.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -41,7 +41,7 @@ impl X {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let n = X;\n     assert_eq!(n.f(), 0);\n     assert_eq!(n.g(), 1);"}, {"sha": "54c4c06c5482f1ee8af1d94c494bee90590b2c7e", "filename": "src/test/run-pass/newtype-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-drop-run.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,7 +19,7 @@ impl Drop for Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let y = @mut 32;\n     {\n         let _x = Foo(y);"}, {"sha": "03e5d9267619069fe975c4dca5ba304d33364bff", "filename": "src/test/run-pass/newtype-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,6 +14,6 @@ fn foo() -> Foo {\n     Foo(42)\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(*foo(), 42);\n }"}, {"sha": "0bdc36750ae6d875f2882515fd05841c8dbdafa7", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -39,7 +39,7 @@ fn do_it_imm(obj: &Foo, v: uint) {\n     assert_eq!(v, y);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut x = 22_u;\n     let obj = &mut x as &mut Foo;\n     do_it_mut(obj);"}, {"sha": "40c854879bf47913fc1755caa0b6bd7c8ba51b65", "filename": "src/test/run-pass/objects-coerce-from-managed-to-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-from-managed-to-borrowed.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -37,7 +37,7 @@ fn do_it_imm(obj: &Foo, v: uint) {\n     assert_eq!(v, y);\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @mut 22u as @mut Foo;\n     do_it_mut(x);\n     do_it_imm(x, 23u);"}, {"sha": "f327f6bc0dc7555d7dc876748411d64ad2506577", "filename": "src/test/run-pass/owned-implies-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fowned-implies-static.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,6 +10,6 @@\n \n fn f<T: 'static>(_x: T) {}\n \n-fn main() {\n+pub fn main() {\n     f(~5);\n }"}, {"sha": "1434e1da4c7585af94671574874ed34e0f922f40", "filename": "src/test/run-pass/packed-struct-borrow-element.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-borrow-element.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     baz: uint\n }\n \n-fn main() {\n+pub fn main() {\n     let foo = Foo { bar: 1, baz: 2 };\n     let brw = &foo.baz;\n "}, {"sha": "91b49944be2efa01982af7c0d421a1cfd4ad3618", "filename": "src/test/run-pass/packed-struct-generic-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-layout.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -17,7 +17,7 @@ struct S<T, S> {\n     c: S\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s = S { a: 0xff_ff_ff_ffu32, b: 1, c: 0xaa_aa_aa_aa as i32 };\n         let transd : [u8, .. 9] = cast::transmute(s);"}, {"sha": "798acc646be738de4666ed188bddf982a9b3c1fd", "filename": "src/test/run-pass/packed-struct-generic-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -17,7 +17,7 @@ struct S<T, S> {\n     c: S\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S<u8, u8>>(), 3);\n \n     assert_eq!(sys::size_of::<S<u64, u16>>(), 11);"}, {"sha": "f361db4a4b5688aa2d4d9f94875f99bc654fa84d", "filename": "src/test/run-pass/packed-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-layout.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,7 +22,7 @@ struct S5 {\n     b: u32\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s4 = S4 { a: 1, b: [2,3,4] };\n         let transd : [u8, .. 4] = cast::transmute(s4);"}, {"sha": "27ab2c83e5566c158cfe4130cc23dd5be582ba95", "filename": "src/test/run-pass/packed-struct-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-match.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -14,7 +14,7 @@ struct Foo {\n     baz: uint\n }\n \n-fn main() {\n+pub fn main() {\n     let foo = Foo { bar: 1, baz: 2 };\n     match foo {\n         Foo {bar, baz} => {"}, {"sha": "f0175da9cbad1acbe695c22214de4bb49ec60909", "filename": "src/test/run-pass/packed-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-size.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -51,7 +51,7 @@ struct S7_Option {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S4>(), 4);\n     assert_eq!(sys::size_of::<S5>(), 5);\n     assert_eq!(sys::size_of::<S13_str>(), 13 + sys::size_of::<~str>());"}, {"sha": "6cf519a387f1ee0d51c21b50b9e79ade11f22103", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,7 +19,7 @@ struct Foo {\n     baz: u64\n }\n \n-fn main() {\n+pub fn main() {\n     let foos = [Foo { bar: 1, baz: 2 }, .. 10];\n \n     assert_eq!(sys::size_of::<[Foo, .. 10]>(), 90);"}, {"sha": "b3261faddfa2a9c93bf8b732cc709cf38f00508c", "filename": "src/test/run-pass/packed-tuple-struct-layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-layout.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -16,7 +16,7 @@ struct S4(u8,[u8, .. 3]);\n #[packed]\n struct S5(u8,u32);\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let s4 = S4(1, [2,3,4]);\n         let transd : [u8, .. 4] = cast::transmute(s4);"}, {"sha": "dd38a6b7d122a498624cd857d12c991b51d7bc9e", "filename": "src/test/run-pass/packed-tuple-struct-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-tuple-struct-size.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -30,7 +30,7 @@ struct S3_Foo(u8, u16, Foo);\n #[packed]\n struct S7_Option(f32, u8, u16, Option<@mut f64>);\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(sys::size_of::<S4>(), 4);\n \n     assert_eq!(sys::size_of::<S5>(), 5);"}, {"sha": "e4e260ab36ec093669f248b5b4720c0f4fd74608", "filename": "src/test/run-pass/pub-extern-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub-extern-privacy.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -7,7 +7,7 @@ mod a {\n }\n \n #[fixed_stack_segment] #[inline(never)]\n-fn main() {\n+pub fn main() {\n     unsafe {\n         a::free(transmute(0));\n     }"}, {"sha": "bce2159cc7b9ffa314b78f28d72b517112926428", "filename": "src/test/run-pass/region-dependent-autofn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autofn.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -17,6 +17,6 @@ fn both<'r>(v: &'r fn()) -> &'r fn() {\n     subslice(subslice(v))\n }\n \n-fn main() {\n+pub fn main() {\n     both(main);\n }"}, {"sha": "dab881549c44cfda196696df0ad3b16697c81696", "filename": "src/test/run-pass/region-dependent-autoslice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregion-dependent-autoslice.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -17,7 +17,7 @@ fn both<'r>(v: &'r [uint]) -> &'r [uint] {\n     subslice1(subslice1(v))\n }\n \n-fn main() {\n+pub fn main() {\n     let v = ~[1,2,3];\n     both(v);\n }"}, {"sha": "1e3bd5897a9d50776be3dbb2ce7e459198a2a84a", "filename": "src/test/run-pass/send_str_hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_hashmap.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -19,7 +19,7 @@ use std::to_str::ToStr;\n use std::hashmap::HashMap;\n use std::option::Some;\n \n-fn main() {\n+pub fn main() {\n     let mut map: HashMap<SendStr, uint> = HashMap::new();\n     assert!(map.insert(SendStrStatic(\"foo\"), 42));\n     assert!(!map.insert(SendStrOwned(~\"foo\"), 42));"}, {"sha": "23ad0ac309102ba45f4e0ec8ae1f2fd5fad9b2a7", "filename": "src/test/run-pass/send_str_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend_str_treemap.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -21,7 +21,7 @@ use std::to_str::ToStr;\n use self::extra::treemap::TreeMap;\n use std::option::Some;\n \n-fn main() {\n+pub fn main() {\n     let mut map: TreeMap<SendStr, uint> = TreeMap::new();\n     assert!(map.insert(SendStrStatic(\"foo\"), 42));\n     assert!(!map.insert(SendStrOwned(~\"foo\"), 42));"}, {"sha": "74502b54d8e395c73ed2547ee604bdb497cd9072", "filename": "src/test/run-pass/simd-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsimd-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-binop.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -22,7 +22,7 @@ fn test_float(e: f32) -> f32 {\n     e2\n }\n \n-fn main() {\n+pub fn main() {\n     assert_eq!(test_int(3i32), 9i32);\n     assert_eq!(test_float(3f32), 9f32);\n }"}, {"sha": "643daad397ca528c131279d5be08c1ed44de67fd", "filename": "src/test/run-pass/simd-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-type.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -6,4 +6,4 @@ struct RGBA {\n     a: f32\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "348b7562f8460ae139a67cbda83fc1bf0cc6daaf", "filename": "src/test/run-pass/sized-borrowed-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-borrowed-pointer.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,4 +12,4 @@\n \n fn bar<T: Sized>() { }\n fn foo<T>() { bar::<&T>() }\n-fn main() { }\n+pub fn main() { }"}, {"sha": "0c05fdd616ba64a0e98401962a3f5d49d29da924", "filename": "src/test/run-pass/sized-owned-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsized-owned-pointer.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -12,4 +12,4 @@\n \n fn bar<T: Sized>() { }\n fn foo<T>() { bar::<~T>() }\n-fn main() { }\n+pub fn main() { }"}, {"sha": "93c8d67c9c0a5a5d32df79018b681bea1a4ff0b9", "filename": "src/test/run-pass/static-assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fstatic-assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fstatic-assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-assert.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,5 +10,5 @@ static d: bool = 1 != 2;\n #[static_assert]\n static f: bool = (4/2) == 2;\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "a0fb31e64bf673e904bd19ec614cbacbfa14363f", "filename": "src/test/run-pass/struct-update-moves-and-copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-update-moves-and-copies.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -94,7 +94,7 @@ fn test2() {\n     assert_eq!(c.noncopy.v, 22);\n }\n \n-fn main() {\n+pub fn main() {\n     test0();\n     test1();\n     test2();"}, {"sha": "5b66d5f28a9260f4d6a3cfe3899004dd0740dcdc", "filename": "src/test/run-pass/syntax-extension-bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-bytes.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -10,7 +10,7 @@\n \n static static_vec: &'static [u8] = bytes!(\"abc\", 0xFF, '!');\n \n-fn main() {\n+pub fn main() {\n     let vec = bytes!(\"abc\");\n     assert_eq!(vec, &[97_u8, 98_u8, 99_u8]);\n "}, {"sha": "3d63acd5b83835450d95fe85b27b005974a28726", "filename": "src/test/run-pass/tag-variant-disr-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-type-mismatch.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,4 +13,4 @@ enum color {\n     blue = 2,\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "9fef70a4dda88ff01c2a55f6ee99cbc06b024a74", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -29,4 +29,4 @@ fn e(x: ~Foo) { // sugar for ~Foo:Owned\n     b(x);\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "49f8999cd45e4229cd76436bfe99cb2c2beea8dd", "filename": "src/test/run-pass/trait-bounds-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -24,4 +24,4 @@ trait C {\n     fn id<T:J<T>>(x:T) -> T { x.j() }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "3629316e14d3daed717b055d98a427efb58ef21e", "filename": "src/test/run-pass/trait-object-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-generics.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -40,7 +40,7 @@ impl<V> Trait<u8,V> for () {\n     fn method(&self, _x: Type<(u8,V)>) -> int { 0 }\n }\n \n-fn main () {\n+pub fn main () {\n     let a = @() as @Trait<u8, u8>;\n     assert_eq!(a.method(Constant), 0);\n }"}, {"sha": "ba2f32a04990b74aacd049691c2ea77ecaebb384", "filename": "src/test/run-pass/trait-with-bounds-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-with-bounds-default.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -34,7 +34,7 @@ impl<T: Clone> Getter<T> for Option<T> {\n }\n \n \n-fn main() {\n+pub fn main() {\n     assert_eq!(3.do_get2(), (3, 3));\n     assert_eq!(Some(~\"hi\").do_get2(), (~\"hi\", ~\"hi\"));\n }"}, {"sha": "4b217ba0ebbdeec1062d4798d7857a7542112a93", "filename": "src/test/run-pass/traits-default-method-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-default-method-mut.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -15,4 +15,4 @@ trait Foo {\n     fn foo(&self, mut v: int) { v = 1; }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "9cdcd8759527a3e543b414091094d3d6f0a67cf2", "filename": "src/test/run-pass/transmute-non-immediate-to-immediate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -11,7 +11,7 @@\n // Issue #7988\n // Transmuting non-immediate type to immediate type\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         ::std::cast::transmute::<[int,..1],int>([1])\n     };"}, {"sha": "e51e6ffd52abc0f009b53e081ac2426f2415d32f", "filename": "src/test/run-pass/tuple-struct-constructor-pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ struct Foo(int);\n #[deriving(Eq)]\n struct Bar(int, int);\n \n-fn main() {\n+pub fn main() {\n     let f: extern fn(int) -> Foo = Foo;\n     let g: extern fn(int, int) -> Bar = Bar;\n     assert_eq!(f(42), Foo(42));"}, {"sha": "19a3c52dea8c3d14c0fa5ee0f223fc6d698523ff", "filename": "src/test/run-pass/typeck-macro-interaction-issue-8852.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeck-macro-interaction-issue-8852.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -17,6 +17,6 @@ macro_rules! test(\n \n test!(x + y)\n \n-fn main() {\n+pub fn main() {\n     foo(A(1), A(2));\n-}\n\\ No newline at end of file\n+}"}, {"sha": "0b8447aa0cdff53c022a91df963a3daee04eea8a", "filename": "src/test/run-pass/unfold-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45311846145a39e6b5755a0740d53ac4ea3183a4/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funfold-cross-crate.rs?ref=45311846145a39e6b5755a0740d53ac4ea3183a4", "patch": "@@ -13,7 +13,7 @@ use std::iter::*;\n // Unfold had a bug with 'self that mean it didn't work\n // cross-crate\n \n-fn main() {\n+pub fn main() {\n     fn count(st: &mut uint) -> Option<uint> {\n         if *st < 10 {\n             let ret = Some(*st);"}]}