{"sha": "042a66514d9e8e373d95e8027187d86bb3418cef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MmE2NjUxNGQ5ZThlMzczZDk1ZTgwMjcxODdkODZiYjM0MThjZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-31T03:45:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-31T03:45:42Z"}, "message": "auto merge of #5638 : luqmana/rust/5405, r=brson\n\n#5405\r\n\r\nAlso, renames the confusingly named `use_new_rt` in `libcore/unstable/lang.rs`", "tree": {"sha": "5b502c3cbef5518dc5882a7a4c13d6877ec61fd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b502c3cbef5518dc5882a7a4c13d6877ec61fd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/042a66514d9e8e373d95e8027187d86bb3418cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/042a66514d9e8e373d95e8027187d86bb3418cef", "html_url": "https://github.com/rust-lang/rust/commit/042a66514d9e8e373d95e8027187d86bb3418cef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/042a66514d9e8e373d95e8027187d86bb3418cef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7ba1fa62e5569a1a7c6335ff7b2a334cff2ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7ba1fa62e5569a1a7c6335ff7b2a334cff2ad0", "html_url": "https://github.com/rust-lang/rust/commit/bd7ba1fa62e5569a1a7c6335ff7b2a334cff2ad0"}, {"sha": "74d20b46c5aac5c7f058ae33aa5c59fd03dfa88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d20b46c5aac5c7f058ae33aa5c59fd03dfa88b", "html_url": "https://github.com/rust-lang/rust/commit/74d20b46c5aac5c7f058ae33aa5c59fd03dfa88b"}], "stats": {"total": 52, "additions": 49, "deletions": 3}, "files": [{"sha": "0f2a6cd7ef9ef71e13999dc9cf28e9e42cd2ad4d", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=042a66514d9e8e373d95e8027187d86bb3418cef", "patch": "@@ -48,6 +48,7 @@ mod context;\n mod thread;\n pub mod env;\n \n+#[cfg(stage0)]\n pub fn start(main: *u8, _argc: int, _argv: *c_char, _crate_map: *u8) -> int {\n     use self::sched::{Scheduler, Task};\n     use self::uvio::UvEventLoop;\n@@ -67,3 +68,22 @@ pub fn start(main: *u8, _argc: int, _argv: *c_char, _crate_map: *u8) -> int {\n     }\n }\n \n+#[cfg(not(stage0))]\n+pub fn start(main: *u8, _argc: int, _argv: **c_char, _crate_map: *u8) -> int {\n+    use self::sched::{Scheduler, Task};\n+    use self::uvio::UvEventLoop;\n+\n+    let loop_ = ~UvEventLoop::new();\n+    let mut sched = ~Scheduler::new(loop_);\n+    let main_task = ~do Task::new(&mut sched.stack_pool) {\n+        // XXX: Can't call a C function pointer from Rust yet\n+        unsafe { rust_call_nullary_fn(main) };\n+    };\n+    sched.task_queue.push_back(main_task);\n+    sched.run();\n+    return 0;\n+\n+    extern {\n+        fn rust_call_nullary_fn(f: *u8);\n+    }\n+}"}, {"sha": "dad990c0f97cf0e2d5b405196c20cbfba03501c1", "filename": "src/libcore/unstable/lang.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibcore%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibcore%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Flang.rs?ref=042a66514d9e8e373d95e8027187d86bb3418cef", "patch": "@@ -127,16 +127,17 @@ pub unsafe fn strdup_uniq(ptr: *c_uchar, len: uint) -> ~str {\n }\n \n #[lang=\"start\"]\n+#[cfg(stage0)]\n pub fn start(main: *u8, argc: int, argv: *c_char,\n              crate_map: *u8) -> int {\n     use libc::getenv;\n     use rt::start;\n \n     unsafe {\n-        let use_new_rt = do str::as_c_str(\"RUST_NEWRT\") |s| {\n+        let use_old_rt = do str::as_c_str(\"RUST_NEWRT\") |s| {\n             getenv(s).is_null()\n         };\n-        if use_new_rt {\n+        if use_old_rt {\n             return rust_start(main as *c_void, argc as c_int, argv,\n                               crate_map as *c_void) as int;\n         } else {\n@@ -150,6 +151,31 @@ pub fn start(main: *u8, argc: int, argv: *c_char,\n     }\n }\n \n+#[lang=\"start\"]\n+#[cfg(not(stage0))]\n+pub fn start(main: *u8, argc: int, argv: **c_char,\n+             crate_map: *u8) -> int {\n+    use libc::getenv;\n+    use rt::start;\n+\n+    unsafe {\n+        let use_old_rt = do str::as_c_str(\"RUST_NEWRT\") |s| {\n+            getenv(s).is_null()\n+        };\n+        if use_old_rt {\n+            return rust_start(main as *c_void, argc as c_int, argv,\n+                              crate_map as *c_void) as int;\n+        } else {\n+            return start(main, argc, argv, crate_map);\n+        }\n+    }\n+\n+    extern {\n+        fn rust_start(main: *c_void, argc: c_int, argv: **c_char,\n+                      crate_map: *c_void) -> c_int;\n+    }\n+}\n+\n // Local Variables:\n // mode: rust;\n // fill-column: 78;"}, {"sha": "15238f168944d58a3ae0d20b284713d281a017ac", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/042a66514d9e8e373d95e8027187d86bb3418cef/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=042a66514d9e8e373d95e8027187d86bb3418cef", "patch": "@@ -2247,7 +2247,7 @@ pub fn create_main_wrapper(ccx: @CrateContext,\n         fn main_name() -> ~str { return ~\"WinMain@16\"; }\n         #[cfg(unix)]\n         fn main_name() -> ~str { return ~\"main\"; }\n-        let llfty = T_fn(~[ccx.int_type, T_ptr(T_i8())], ccx.int_type);\n+        let llfty = T_fn(~[ccx.int_type, T_ptr(T_ptr(T_i8()))], ccx.int_type);\n \n         // FIXME #4404 android JNI hacks\n         let llfn = if *ccx.sess.building_library {"}]}