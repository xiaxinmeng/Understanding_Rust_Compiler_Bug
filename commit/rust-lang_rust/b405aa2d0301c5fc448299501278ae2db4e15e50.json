{"sha": "b405aa2d0301c5fc448299501278ae2db4e15e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MDVhYTJkMDMwMWM1ZmM0NDgyOTk1MDEyNzhhZTJkYjRlMTVlNTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T09:11:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T09:11:08Z"}, "message": "Rollup merge of #62806 - mati865:clippy, r=TimNN\n\nFix few Clippy warnings", "tree": {"sha": "25f749e1f7d4c446983d7e3dd9b16eb0bf4b8dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f749e1f7d4c446983d7e3dd9b16eb0bf4b8dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b405aa2d0301c5fc448299501278ae2db4e15e50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPWasCRBK7hj4Ov3rIwAAdHIIALIpQpYuenWKzGbMmEniuqmG\n9yenGLzNwpzSPYrRSHqYg184OdIW4HdtqeijYmzl76lrbDvPj6vByAT43f6tcKXT\nWMWq4WS/YCurjU66IKC71RjGVdvHE6J5iCW5WysxEE8fuhUkOuoKfj0gLV6wT+uH\nVdv7vXfdwgST13DS+S//jJaL0R6UQF0I8/xZ/hFSMSiA7hGH9MSCKAfjInL2CVfj\nGPWekiSWza7pp7SVaIO6fSKVTOJrHJAqobnHDddrRs1Bfvu3XGtF8pMAAtPpoHAL\nejdmET+H23gA5o/6qPu8mRQs7XDjU+I7t4UMvL66357FoQs++9LDhqJuwtBUMcE=\n=sTgq\n-----END PGP SIGNATURE-----\n", "payload": "tree 25f749e1f7d4c446983d7e3dd9b16eb0bf4b8dab\nparent 2826bdcfa6fecc656294534162fb5990d3d53cf5\nparent 124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564305068 +0200\ncommitter GitHub <noreply@github.com> 1564305068 +0200\n\nRollup merge of #62806 - mati865:clippy, r=TimNN\n\nFix few Clippy warnings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b405aa2d0301c5fc448299501278ae2db4e15e50", "html_url": "https://github.com/rust-lang/rust/commit/b405aa2d0301c5fc448299501278ae2db4e15e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b405aa2d0301c5fc448299501278ae2db4e15e50/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2826bdcfa6fecc656294534162fb5990d3d53cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2826bdcfa6fecc656294534162fb5990d3d53cf5", "html_url": "https://github.com/rust-lang/rust/commit/2826bdcfa6fecc656294534162fb5990d3d53cf5"}, {"sha": "124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1", "html_url": "https://github.com/rust-lang/rust/commit/124f6ef7cdea1083b0cbe0371e3f7fbe1152a9d1"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "1683b8105567f7f10c135f1dd1dca1abea12e13c", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -200,7 +200,7 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n             }\n         }\n \n-        if self.len() == 0 {\n+        if self.is_empty() {\n             // Ideally we'd call `BTreeMap::new` here, but that has the `K:\n             // Ord` constraint, which this method lacks.\n             BTreeMap {\n@@ -759,12 +759,12 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[stable(feature = \"btree_append\", since = \"1.11.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n         // Do we have to append anything at all?\n-        if other.len() == 0 {\n+        if other.is_empty() {\n             return;\n         }\n \n         // We can just swap `self` and `other` if `self` is empty.\n-        if self.len() == 0 {\n+        if self.is_empty() {\n             mem::swap(self, other);\n             return;\n         }"}, {"sha": "bbb96725ea00a6a9e37cf61b6588b65b37c16539", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -237,15 +237,15 @@ impl<T> LinkedList<T> {\n \n         // Not creating new mutable (unique!) references overlapping `element`.\n         match node.prev {\n-            Some(prev) => (*prev.as_ptr()).next = node.next.clone(),\n+            Some(prev) => (*prev.as_ptr()).next = node.next,\n             // this node is the head node\n-            None => self.head = node.next.clone(),\n+            None => self.head = node.next,\n         };\n \n         match node.next {\n-            Some(next) => (*next.as_ptr()).prev = node.prev.clone(),\n+            Some(next) => (*next.as_ptr()).prev = node.prev,\n             // this node is the tail node\n-            None => self.tail = node.prev.clone(),\n+            None => self.tail = node.prev,\n         };\n \n         self.len -= 1;"}, {"sha": "0d0ff7c16f130e5eb8470368e7a2d083a8827369", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -815,7 +815,7 @@ impl<T> Rc<[T]> {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);\n \n-                    Global.dealloc(self.mem, self.layout.clone());\n+                    Global.dealloc(self.mem, self.layout);\n                 }\n             }\n         }"}, {"sha": "93aff73372498c91dab420280c08a9446ca174fa", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -703,7 +703,7 @@ impl<T> Arc<[T]> {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);\n \n-                    Global.dealloc(self.mem.cast(), self.layout.clone());\n+                    Global.dealloc(self.mem.cast(), self.layout);\n                 }\n             }\n         }"}, {"sha": "5d0333d5226d20b43a2a8de996742d5b9fb657e1", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -827,11 +827,11 @@ pub unsafe trait Alloc {\n         let old_size = layout.size();\n \n         if new_size >= old_size {\n-            if let Ok(()) = self.grow_in_place(ptr, layout.clone(), new_size) {\n+            if let Ok(()) = self.grow_in_place(ptr, layout, new_size) {\n                 return Ok(ptr);\n             }\n         } else if new_size < old_size {\n-            if let Ok(()) = self.shrink_in_place(ptr, layout.clone(), new_size) {\n+            if let Ok(()) = self.shrink_in_place(ptr, layout, new_size) {\n                 return Ok(ptr);\n             }\n         }"}, {"sha": "e8f747f1a67d5fc8c73070b4959c63787893f07e", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -46,7 +46,7 @@ impl<'a> Iterator for Utf8LossyChunksIter<'a> {\n     type Item = Utf8LossyChunk<'a>;\n \n     fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {\n-        if self.source.len() == 0 {\n+        if self.source.is_empty() {\n             return None;\n         }\n \n@@ -141,7 +141,7 @@ impl fmt::Display for Utf8Lossy {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // If we're the empty string then our iterator won't actually yield\n         // anything, so perform the formatting manually\n-        if self.bytes.len() == 0 {\n+        if self.bytes.is_empty() {\n             return \"\".fmt(f)\n         }\n "}, {"sha": "09b6b694f7bcc2c52a0c7f78ec118eea9c399adc", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -1923,7 +1923,7 @@ impl<T: Read, U: Read> Read for Chain<T, U> {\n     fn read(&mut self, buf: &mut [u8]) -> Result<usize> {\n         if !self.done_first {\n             match self.first.read(buf)? {\n-                0 if buf.len() != 0 => self.done_first = true,\n+                0 if !buf.is_empty() => self.done_first = true,\n                 n => return Ok(n),\n             }\n         }\n@@ -1955,7 +1955,7 @@ impl<T: BufRead, U: BufRead> BufRead for Chain<T, U> {\n     fn fill_buf(&mut self) -> Result<&[u8]> {\n         if !self.done_first {\n             match self.first.fill_buf()? {\n-                buf if buf.len() == 0 => { self.done_first = true; }\n+                buf if buf.is_empty() => { self.done_first = true; }\n                 buf => return Ok(buf),\n             }\n         }"}, {"sha": "f47dc92d2de93d5e9a06d151cc82812782185a5f", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -29,7 +29,7 @@ unsafe impl GlobalAlloc for System {\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::calloc(layout.size(), 1) as *mut u8\n         } else {\n-            let ptr = self.alloc(layout.clone());\n+            let ptr = self.alloc(layout);\n             if !ptr.is_null() {\n                 ptr::write_bytes(ptr, 0, layout.size());\n             }"}, {"sha": "fc1e33137c8a9a0e3e9ee0bbc4565dfbdd8e30f0", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b405aa2d0301c5fc448299501278ae2db4e15e50/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=b405aa2d0301c5fc448299501278ae2db4e15e50", "patch": "@@ -277,7 +277,7 @@ impl Command {\n         if self.get_gid().is_some() ||\n             self.get_uid().is_some() ||\n             self.env_saw_path() ||\n-            self.get_closures().len() != 0 {\n+            !self.get_closures().is_empty() {\n             return Ok(None)\n         }\n "}]}