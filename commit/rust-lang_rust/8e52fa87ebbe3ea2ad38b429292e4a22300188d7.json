{"sha": "8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "node_id": "C_kwDOAAsO6NoAKDhlNTJmYTg3ZWJiZTNlYTJhZDM4YjQyOTI5MmU0YTIyMzAwMTg4ZDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T16:28:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T16:28:58Z"}, "message": "Auto merge of #98566 - matthiaskrgr:rollup-43etyls, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97389 (Improve memory ordering diagnostics)\n - #97780 (Check ADT field is well-formed before checking it is sized)\n - #98530 (compiletest: add issue number param to `known-bug`)\n - #98556 (Fix builds on Windows (closes #98546))\n - #98561 (Fix spelling in SAFETY comment)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "938d53b3679156d82bea13463eaaf8c1f5191986", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938d53b3679156d82bea13463eaaf8c1f5191986"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "html_url": "https://github.com/rust-lang/rust/commit/8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2e51a338e36372b200a22f3e0e22189a1063e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2e51a338e36372b200a22f3e0e22189a1063e6", "html_url": "https://github.com/rust-lang/rust/commit/bd2e51a338e36372b200a22f3e0e22189a1063e6"}, {"sha": "54b81dd8d7be7f2c37e9ef6221b730297f78c482", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b81dd8d7be7f2c37e9ef6221b730297f78c482", "html_url": "https://github.com/rust-lang/rust/commit/54b81dd8d7be7f2c37e9ef6221b730297f78c482"}], "stats": {"total": 769, "additions": 405, "deletions": 364}, "files": [{"sha": "5579e4d19cf1fe5f30a25067b5a97f3e12ea3e12", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 66, "deletions": 82, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -4,7 +4,6 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_hir::{is_range_literal, Expr, ExprKind, Node};\n use rustc_middle::ty::layout::{IntegerExt, LayoutOf, SizeSkeleton};\n use rustc_middle::ty::subst::SubstsRef;\n@@ -1483,39 +1482,32 @@ impl InvalidAtomicOrdering {\n         None\n     }\n \n-    fn matches_ordering(cx: &LateContext<'_>, did: DefId, orderings: &[Symbol]) -> bool {\n+    fn match_ordering(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<Symbol> {\n+        let ExprKind::Path(ref ord_qpath) = ord_arg.kind else { return None };\n+        let did = cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()?;\n         let tcx = cx.tcx;\n         let atomic_ordering = tcx.get_diagnostic_item(sym::Ordering);\n-        orderings.iter().any(|ordering| {\n-            tcx.item_name(did) == *ordering && {\n-                let parent = tcx.parent(did);\n-                Some(parent) == atomic_ordering\n-                    // needed in case this is a ctor, not a variant\n-                    || tcx.opt_parent(parent) == atomic_ordering\n-            }\n-        })\n-    }\n-\n-    fn opt_ordering_defid(cx: &LateContext<'_>, ord_arg: &Expr<'_>) -> Option<DefId> {\n-        if let ExprKind::Path(ref ord_qpath) = ord_arg.kind {\n-            cx.qpath_res(ord_qpath, ord_arg.hir_id).opt_def_id()\n-        } else {\n-            None\n-        }\n+        let name = tcx.item_name(did);\n+        let parent = tcx.parent(did);\n+        [sym::Relaxed, sym::Release, sym::Acquire, sym::AcqRel, sym::SeqCst].into_iter().find(\n+            |&ordering| {\n+                name == ordering\n+                    && (Some(parent) == atomic_ordering\n+                            // needed in case this is a ctor, not a variant\n+                            || tcx.opt_parent(parent) == atomic_ordering)\n+            },\n+        )\n     }\n \n     fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        use rustc_hir::def::{DefKind, Res};\n-        use rustc_hir::QPath;\n         if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::load, sym::store])\n             && let Some((ordering_arg, invalid_ordering)) = match method {\n                 sym::load => Some((&args[1], sym::Release)),\n                 sym::store => Some((&args[2], sym::Acquire)),\n                 _ => None,\n             }\n-            && let ExprKind::Path(QPath::Resolved(_, path)) = ordering_arg.kind\n-            && let Res::Def(DefKind::Ctor(..), ctor_id) = path.res\n-            && Self::matches_ordering(cx, ctor_id, &[invalid_ordering, sym::AcqRel])\n+            && let Some(ordering) = Self::match_ordering(cx, ordering_arg)\n+            && (ordering == invalid_ordering || ordering == sym::AcqRel)\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, |diag| {\n                 if method == sym::load {\n@@ -1537,9 +1529,7 @@ impl InvalidAtomicOrdering {\n             && let ExprKind::Path(ref func_qpath) = func.kind\n             && let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id()\n             && matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::fence | sym::compiler_fence))\n-            && let ExprKind::Path(ref ordering_qpath) = &args[0].kind\n-            && let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id()\n-            && Self::matches_ordering(cx, ordering_def_id, &[sym::Relaxed])\n+            && Self::match_ordering(cx, &args[0]) == Some(sym::Relaxed)\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {\n                 diag.build(\"memory fences cannot have `Relaxed` ordering\")\n@@ -1550,62 +1540,56 @@ impl InvalidAtomicOrdering {\n     }\n \n     fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak])\n-            && let Some((success_order_arg, failure_order_arg)) = match method {\n-                sym::fetch_update => Some((&args[1], &args[2])),\n-                sym::compare_exchange | sym::compare_exchange_weak => Some((&args[3], &args[4])),\n-                _ => None,\n-            }\n-            && let Some(fail_ordering_def_id) = Self::opt_ordering_defid(cx, failure_order_arg)\n-        {\n-            // Helper type holding on to some checking and error reporting data. Has\n-            // - (success ordering,\n-            // - list of failure orderings forbidden by the success order,\n-            // - suggestion message)\n-            type OrdLintInfo = (Symbol, &'static [Symbol], &'static str);\n-            const RELAXED: OrdLintInfo = (sym::Relaxed, &[sym::SeqCst, sym::Acquire], \"ordering mode `Relaxed`\");\n-            const ACQUIRE: OrdLintInfo = (sym::Acquire, &[sym::SeqCst], \"ordering modes `Acquire` or `Relaxed`\");\n-            const SEQ_CST: OrdLintInfo = (sym::SeqCst, &[], \"ordering modes `Acquire`, `SeqCst` or `Relaxed`\");\n-            const RELEASE: OrdLintInfo = (sym::Release, RELAXED.1, RELAXED.2);\n-            const ACQREL: OrdLintInfo = (sym::AcqRel, ACQUIRE.1, ACQUIRE.2);\n-            const SEARCH: [OrdLintInfo; 5] = [RELAXED, ACQUIRE, SEQ_CST, RELEASE, ACQREL];\n-\n-            let success_lint_info = Self::opt_ordering_defid(cx, success_order_arg)\n-                .and_then(|success_ord_def_id| -> Option<OrdLintInfo> {\n-                    SEARCH\n-                        .iter()\n-                        .copied()\n-                        .find(|(ordering, ..)| {\n-                            Self::matches_ordering(cx, success_ord_def_id, &[*ordering])\n-                        })\n-                });\n-            if Self::matches_ordering(cx, fail_ordering_def_id, &[sym::Release, sym::AcqRel]) {\n-                // If we don't know the success order is, use what we'd suggest\n-                // if it were maximally permissive.\n-                let suggested = success_lint_info.unwrap_or(SEQ_CST).2;\n-                cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n-                    let msg = format!(\n-                        \"{}'s failure ordering may not be `Release` or `AcqRel`\",\n-                        method,\n-                    );\n-                    diag.build(&msg)\n-                        .help(&format!(\"consider using {} instead\", suggested))\n-                        .emit();\n-                });\n-            } else if let Some((success_ord, bad_ords_given_success, suggested)) = success_lint_info {\n-                if Self::matches_ordering(cx, fail_ordering_def_id, bad_ords_given_success) {\n-                    cx.struct_span_lint(INVALID_ATOMIC_ORDERING, failure_order_arg.span, |diag| {\n-                        let msg = format!(\n-                            \"{}'s failure ordering may not be stronger than the success ordering of `{}`\",\n-                            method,\n-                            success_ord,\n-                        );\n-                        diag.build(&msg)\n-                            .help(&format!(\"consider using {} instead\", suggested))\n-                            .emit();\n-                    });\n-                }\n-            }\n+        let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak])\n+            else {return };\n+\n+        let (success_order_arg, fail_order_arg) = match method {\n+            sym::fetch_update => (&args[1], &args[2]),\n+            sym::compare_exchange | sym::compare_exchange_weak => (&args[3], &args[4]),\n+            _ => return,\n+        };\n+\n+        let Some(fail_ordering) = Self::match_ordering(cx, fail_order_arg) else { return };\n+\n+        if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, fail_order_arg.span, |diag| {\n+                diag.build(&format!(\n+                    \"`{method}`'s failure ordering may not be `Release` or `AcqRel`, \\\n+                    since a failed `{method}` does not result in a write\",\n+                ))\n+                .span_label(fail_order_arg.span, \"invalid failure ordering\")\n+                .help(\"consider using `Acquire` or `Relaxed` failure ordering instead\")\n+                .emit();\n+            });\n+        }\n+\n+        let Some(success_ordering) = Self::match_ordering(cx, success_order_arg) else { return };\n+\n+        if matches!(\n+            (success_ordering, fail_ordering),\n+            (sym::Relaxed | sym::Release, sym::Acquire)\n+                | (sym::Relaxed | sym::Release | sym::Acquire | sym::AcqRel, sym::SeqCst)\n+        ) {\n+            let success_suggestion =\n+                if success_ordering == sym::Release && fail_ordering == sym::Acquire {\n+                    sym::AcqRel\n+                } else {\n+                    fail_ordering\n+                };\n+            cx.struct_span_lint(INVALID_ATOMIC_ORDERING, success_order_arg.span, |diag| {\n+                diag.build(&format!(\n+                    \"`{method}`'s success ordering must be at least as strong as its failure ordering\"\n+                ))\n+                .span_label(fail_order_arg.span, format!(\"`{fail_ordering}` failure ordering\"))\n+                .span_label(success_order_arg.span, format!(\"`{success_ordering}` success ordering\"))\n+                .span_suggestion_short(\n+                    success_order_arg.span,\n+                    format!(\"consider using `{success_suggestion}` success ordering instead\"),\n+                    format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+            });\n         }\n     }\n }"}, {"sha": "94ec89776a9582100ea2a6dabd38039a67eae050", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -406,7 +406,7 @@ pub enum ObligationCauseCode<'tcx> {\n     QuestionMark,\n \n     /// Well-formed checking. If a `WellFormedLoc` is provided,\n-    /// then it will be used to eprform HIR-based wf checking\n+    /// then it will be used to perform HIR-based wf checking\n     /// after an error occurs, in order to generate a more precise error span.\n     /// This is purely for diagnostic purposes - it is always\n     /// correct to use `MiscObligation` instead, or to specify"}, {"sha": "e78d58dc2109983b26d6d86aa7b94469e8c02d20", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -990,6 +990,15 @@ fn check_type_defn<'tcx, F>(\n         let packed = tcx.adt_def(item.def_id).repr().packed();\n \n         for variant in &variants {\n+            // All field types must be well-formed.\n+            for field in &variant.fields {\n+                fcx.register_wf_obligation(\n+                    field.ty.into(),\n+                    field.span,\n+                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n+                )\n+            }\n+\n             // For DST, or when drop needs to copy things around, all\n             // intermediate types must be sized.\n             let needs_drop_copy = || {\n@@ -1006,6 +1015,7 @@ fn check_type_defn<'tcx, F>(\n                     }\n                 }\n             };\n+            // All fields (except for possibly the last) should be sized.\n             let all_sized = all_sized || variant.fields.is_empty() || needs_drop_copy();\n             let unsized_len = if all_sized { 0 } else { 1 };\n             for (idx, field) in\n@@ -1030,15 +1040,6 @@ fn check_type_defn<'tcx, F>(\n                 );\n             }\n \n-            // All field types must be well-formed.\n-            for field in &variant.fields {\n-                fcx.register_wf_obligation(\n-                    field.ty.into(),\n-                    field.span,\n-                    ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(field.def_id))),\n-                )\n-            }\n-\n             // Explicit `enum` discriminant values must const-evaluate successfully.\n             if let Some(discr_def_id) = variant.explicit_discr {\n                 let discr_substs = InternalSubsts::identity_for_item(tcx, discr_def_id.to_def_id());"}, {"sha": "92d03b724b40eafb9145e333033e54b721b1cca3", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -213,7 +213,7 @@ macro_rules! nonzero_leading_trailing_zeros {\n                               without modifying the original\"]\n                 #[inline]\n                 pub const fn leading_zeros(self) -> u32 {\n-                    // SAFETY: since `self` can not be zero it is safe to call ctlz_nonzero\n+                    // SAFETY: since `self` cannot be zero, it is safe to call `ctlz_nonzero`.\n                     unsafe { intrinsics::ctlz_nonzero(self.0 as $Uint) as u32 }\n                 }\n \n@@ -237,7 +237,7 @@ macro_rules! nonzero_leading_trailing_zeros {\n                               without modifying the original\"]\n                 #[inline]\n                 pub const fn trailing_zeros(self) -> u32 {\n-                    // SAFETY: since `self` can not be zero it is safe to call cttz_nonzero\n+                    // SAFETY: since `self` cannot be zero, it is safe to call `cttz_nonzero`.\n                     unsafe { intrinsics::cttz_nonzero(self.0 as $Uint) as u32 }\n                 }\n "}, {"sha": "9cd8b6d1455dd2ce6f0ba40aa196e7bb365c0900", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -160,7 +160,7 @@ pub(crate) fn maybe_download_ci_llvm(builder: &Builder<'_>) {\n         // files in the tarball are in the past, so it doesn't trigger a\n         // rebuild.\n         let now = filetime::FileTime::from_system_time(std::time::SystemTime::now());\n-        let llvm_config = llvm_root.join(\"bin/llvm-config\");\n+        let llvm_config = llvm_root.join(\"bin\").join(exe(\"llvm-config\", builder.config.build));\n         t!(filetime::set_file_times(&llvm_config, now, now));\n \n         let llvm_lib = llvm_root.join(\"lib\");"}, {"sha": "ae5224dbd6fa86c96ab78097517a321dd3663714", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: unknown\n // compile-flags: -Z chalk --edition=2021\n \n fn main() -> () {}"}, {"sha": "14f27aff1ccd85ed71056fff017a3d19813bcb45", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #80626\n \n // This should pass, but it requires `Sized` to be coinductive.\n "}, {"sha": "487b83dfa3fccc5dd925bd1290145aa8a3152598", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -4,16 +4,11 @@ error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n LL |     Next(A::Allocated<Self>)\n    |          ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n+note: required by a bound in `Allocator::Allocated`\n+  --> $DIR/issue-80626.rs:9:20\n    |\n-LL |     Next(&A::Allocated<Self>)\n-   |          +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL |     Next(Box<A::Allocated<Self>>)\n-   |          ++++                  +\n+LL |     type Allocated<T>;\n+   |                    ^ required by this bound in `Allocator::Allocated`\n \n error: aborting due to previous error\n "}, {"sha": "fb62c10a9e389acbacbf354dcf0538273c8796d5", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #86218\n \n // This should pass, but seems to run into a TAIT issue.\n "}, {"sha": "0844d84c34fd31971704b3888084cef8d1eabadc", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #87735, #88526\n \n // This should pass, but we need an extension of implied bounds (probably).\n "}, {"sha": "a3d00ee03b13e35de1d5bcea892655e3a7b7c578", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #87748\n \n // This should pass, but unnormalized input args aren't treated as implied.\n "}, {"sha": "efa487d624fd99b3d806bf12979167e65611ad46", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #87755\n \n // This should pass.\n "}, {"sha": "a8a111c99ef7f572305d31b14ece2af55260b2e5", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #87803\n \n // This should pass, but using a type alias vs a reference directly\n // changes late-bound -> early-bound."}, {"sha": "5493b9b9391359926e2525f432bccac390e6a0aa", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #88382\n \n // This should pass, but has a missed normalization due to HRTB.\n "}, {"sha": "f1c3b2269158a8ee7abc879ff4c3416642bbd315", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #88460\n \n // This should pass, but has a missed normalization due to HRTB.\n "}, {"sha": "15363ad04bfe7027e28b596fbf1568b5d90e267a", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #88526\n \n // This should pass, but requires more logic.\n "}, {"sha": "79c28b0d22172007dbc8ad81bdaceb70a46823c3", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n // edition:2021\n-// known-bug\n+// known-bug: #88908\n \n // This should pass, but seems to run into a TAIT bug.\n "}, {"sha": "d8edbe7e56b51b9804caa7cf82d03c4e9ab3f1e9", "filename": "src/test/ui/hrtb/issue-95034.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-95034.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,4 +1,4 @@\n-// known-bug\n+// known-bug: #95034\n // failure-status: 101\n // compile-flags: --edition=2021 --crate-type=lib\n // rustc-env:RUST_BACKTRACE=0"}, {"sha": "eb4860e75d758feeb266a657adb09c44ecaffa79", "filename": "src/test/ui/issues/issue-47511.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fissues%2Fissue-47511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fissues%2Fissue-47511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47511.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,5 +1,5 @@\n // check-fail\n-// known-bug\n+// known-bug: #47511\n \n // Regression test for #47511: anonymous lifetimes can appear\n // unconstrained in a return type, but only if they appear just once"}, {"sha": "0e0d604ae046d0307dd7ba7973639af53761b56f", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -20,43 +20,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange_weak's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange_weak`'s success ordering must be at least as strong as\n }"}, {"sha": "d5e53418b6fb880766d13492c53fded3d45b3a6b", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange-weak.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange-weak.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,131 +1,137 @@\n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:22:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:24:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:26:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::AcqRel);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:28:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:30:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:34:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:36:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Acquire, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:38:67\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Release, Ordering::Release);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n+   |                                                                   ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:40:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::AcqRel, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange_weak`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange_weak` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:42:66\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::SeqCst, Ordering::Release);\n-   |                                                                  ^^^^^^^^^^^^^^^^^\n+   |                                                                  ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:46:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                                |\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:48:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Release, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Release` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:52:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:54:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr, ptr2, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                                   ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                                |\n+   |                                                `Relaxed` success ordering\n+   |                                                help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:67\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:58:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                                   ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `Acquire` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange_weak's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:66\n+error: `compare_exchange_weak`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange-weak.rs:60:48\n    |\n LL |     let _ = x.compare_exchange_weak(ptr2, ptr, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                                  ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                                ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                                |\n+   |                                                `AcqRel` success ordering\n+   |                                                help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "da98d854262a5a9e791e40932866d18a241c1f83", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-    //~^ ERROR compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-    //~^ ERROR compare_exchange's failure ordering may not be stronger\n+    //~^ ERROR `compare_exchange`'s success ordering must be at least as strong as\n }"}, {"sha": "41121a20dee99dabe6e6e7d2f5c0459876c31868", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-exchange.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-exchange.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,131 +1,137 @@\n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:20:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:22:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:24:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::AcqRel);\n-   |                                                         ^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:26:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:28:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::AcqRel);\n-   |                                                        ^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:32:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:34:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:36:57\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Release);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n+   |                                                         ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:38:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be `Release` or `AcqRel`\n+error: `compare_exchange`'s failure ordering may not be `Release` or `AcqRel`, since a failed `compare_exchange` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-exchange.rs:40:56\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::SeqCst, Ordering::Release);\n-   |                                                        ^^^^^^^^^^^^^^^^^\n+   |                                                        ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:44:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                      |\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `AcqRel` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:46:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Release, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Release` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:50:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:52:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Relaxed, Ordering::Acquire);\n-   |                                                         ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                                      |\n+   |                                      `Relaxed` success ordering\n+   |                                      help: consider using `Acquire` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:57\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:56:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::Acquire, Ordering::SeqCst);\n-   |                                                         ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `Acquire` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n-error: compare_exchange's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:56\n+error: `compare_exchange`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-exchange.rs:58:38\n    |\n LL |     let _ = x.compare_exchange(0, 0, Ordering::AcqRel, Ordering::SeqCst);\n-   |                                                        ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                                      ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                                      |\n+   |                                      `AcqRel` success ordering\n+   |                                      help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "73eda182aa8793b0e3db9a9f54ba69d1dd2932a5", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -18,43 +18,43 @@ fn main() {\n \n     // AcqRel is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release is always forbidden as a failure ordering\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be `Release` or `AcqRel`\n+    //~^ ERROR `fetch_update`'s failure ordering may not be `Release` or `AcqRel`\n \n     // Release success order forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Relaxed success order also forbids failure order of Acquire or SeqCst\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n \n     // Acquire/AcqRel forbids failure order of SeqCst\n     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-    //~^ ERROR fetch_update's failure ordering may not be stronger\n+    //~^ ERROR `fetch_update`'s success ordering must be at least as strong as\n }"}, {"sha": "7bea56d57fbab646f175d39f2d7c8f6a14abe22d", "filename": "src/test/ui/lint/lint-invalid-atomic-ordering-fetch-update.stderr", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-invalid-atomic-ordering-fetch-update.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,131 +1,137 @@\n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:20:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n    = note: `#[deny(invalid_atomic_ordering)]` on by default\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:22:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:24:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:26:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:28:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::AcqRel, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:32:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:34:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:36:47\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Release, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n+   |                                               ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering mode `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:38:46\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be `Release` or `AcqRel`\n+error: `fetch_update`'s failure ordering may not be `Release` or `AcqRel`, since a failed `fetch_update` does not result in a write\n   --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:40:46\n    |\n LL |     let _ = x.fetch_update(Ordering::SeqCst, Ordering::Release, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^^\n+   |                                              ^^^^^^^^^^^^^^^^^ invalid failure ordering\n    |\n-   = help: consider using ordering modes `Acquire`, `SeqCst` or `Relaxed` instead\n+   = help: consider using `Acquire` or `Relaxed` failure ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:44:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                            |\n+   |                            `Release` success ordering\n+   |                            help: consider using `AcqRel` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Release`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:46:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Release, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Release` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:50:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Relaxed`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:52:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Relaxed, Ordering::Acquire, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering mode `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ----------------- `Acquire` failure ordering\n+   |                            |\n+   |                            `Relaxed` success ordering\n+   |                            help: consider using `Acquire` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `Acquire`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:47\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:56:28\n    |\n LL |     let _ = x.fetch_update(Ordering::Acquire, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                               ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `Acquire` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n-error: fetch_update's failure ordering may not be stronger than the success ordering of `AcqRel`\n-  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:46\n+error: `fetch_update`'s success ordering must be at least as strong as its failure ordering\n+  --> $DIR/lint-invalid-atomic-ordering-fetch-update.rs:58:28\n    |\n LL |     let _ = x.fetch_update(Ordering::AcqRel, Ordering::SeqCst, |old| Some(old + 1));\n-   |                                              ^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using ordering modes `Acquire` or `Relaxed` instead\n+   |                            ^^^^^^^^^^^^^^^^  ---------------- `SeqCst` failure ordering\n+   |                            |\n+   |                            `AcqRel` success ordering\n+   |                            help: consider using `SeqCst` success ordering instead\n \n error: aborting due to 16 previous errors\n "}, {"sha": "fd975aaaee4a812adaf0e6c3dd545eeae8647434", "filename": "src/test/ui/trait-bounds/select-param-env-instead-of-blanket.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fselect-param-env-instead-of-blanket.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,4 +1,4 @@\n-// known-bug\n+// known-bug: #93008\n // build-fail\n // failure-status: 101\n // compile-flags:--crate-type=lib -Zmir-opt-level=3"}, {"sha": "328096d44b4b506161d68defef2d878e87bfb0bc", "filename": "src/test/ui/type-alias-impl-trait/cross_inference_pattern_bug_no_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcross_inference_pattern_bug_no_type.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,4 +1,4 @@\n-// known-bug\n+// known-bug: #96572\n // compile-flags: --edition=2021 --crate-type=lib\n // rustc-env:RUST_BACKTRACE=0\n "}, {"sha": "067ed7ea1e585db50b68deeb3c67b68f867e8bc2", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,7 +1,7 @@\n // Regression test for issue #57611\n // Ensures that we don't ICE\n // FIXME: This should compile, but it currently doesn't\n-// known-bug\n+// known-bug: unknown\n \n #![feature(trait_alias)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "5bb98675361a0852e2ba176eaa5acc7ed219c3c7", "filename": "src/test/ui/union/issue-81199.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-81199.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -1,28 +1,18 @@\n-error[E0277]: the trait bound `T: Pointee` is not satisfied in `PtrComponents<T>`\n+error[E0277]: the trait bound `T: Pointee` is not satisfied\n   --> $DIR/issue-81199.rs:5:17\n    |\n LL |     components: PtrComponents<T>,\n-   |                 ^^^^^^^^^^^^^^^^ within `PtrComponents<T>`, the trait `Pointee` is not implemented for `T`\n+   |                 ^^^^^^^^^^^^^^^^ the trait `Pointee` is not implemented for `T`\n    |\n-note: required because it appears within the type `PtrComponents<T>`\n-  --> $DIR/issue-81199.rs:10:8\n+note: required by a bound in `PtrComponents`\n+  --> $DIR/issue-81199.rs:10:25\n    |\n LL | struct PtrComponents<T: Pointee + ?Sized> {\n-   |        ^^^^^^^^^^^^^\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n+   |                         ^^^^^^^ required by this bound in `PtrComponents`\n help: consider further restricting this bound\n    |\n LL | union PtrRepr<T: ?Sized + Pointee> {\n    |                         +++++++++\n-help: borrowed types always have a statically known size\n-   |\n-LL |     components: &PtrComponents<T>,\n-   |                 +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL |     components: Box<PtrComponents<T>>,\n-   |                 ++++                +\n \n error: aborting due to previous error\n "}, {"sha": "c2948086b200b7f1812a6e613f3bd0c61a341852", "filename": "src/test/ui/wf/issue-96810.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-96810.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -0,0 +1,12 @@\n+struct S<T: Tr>(T::Assoc);\n+\n+trait Tr {\n+    type Assoc;\n+}\n+\n+struct Hoge<K> {\n+    s: S<K>, //~ ERROR the trait bound `K: Tr` is not satisfied\n+    a: u32,\n+}\n+\n+fn main() {}"}, {"sha": "1407e62b1e13955aa10798d9ac72b1c404f328b3", "filename": "src/test/ui/wf/issue-96810.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fissue-96810.stderr?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `K: Tr` is not satisfied\n+  --> $DIR/issue-96810.rs:8:8\n+   |\n+LL |     s: S<K>,\n+   |        ^^^^ the trait `Tr` is not implemented for `K`\n+   |\n+note: required by a bound in `S`\n+  --> $DIR/issue-96810.rs:1:13\n+   |\n+LL | struct S<T: Tr>(T::Assoc);\n+   |             ^^ required by this bound in `S`\n+help: consider restricting type parameter `K`\n+   |\n+LL | struct Hoge<K: Tr> {\n+   |              ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "31e979a574b6e65e6b5fae0c36f9386067892248", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e52fa87ebbe3ea2ad38b429292e4a22300188d7/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=8e52fa87ebbe3ea2ad38b429292e4a22300188d7", "patch": "@@ -395,7 +395,29 @@ impl TestProps {\n                 );\n                 config.set_name_directive(ln, STDERR_PER_BITWIDTH, &mut self.stderr_per_bitwidth);\n                 config.set_name_directive(ln, INCREMENTAL, &mut self.incremental);\n-                config.set_name_directive(ln, KNOWN_BUG, &mut self.known_bug);\n+\n+                // Unlike the other `name_value_directive`s this needs to be handled manually,\n+                // because it sets a `bool` flag.\n+                if let Some(known_bug) = config.parse_name_value_directive(ln, KNOWN_BUG) {\n+                    let known_bug = known_bug.trim();\n+                    if known_bug == \"unknown\"\n+                        || known_bug.split(',').all(|issue_ref| {\n+                            issue_ref\n+                                .trim()\n+                                .split_once('#')\n+                                .filter(|(_, number)| {\n+                                    number.chars().all(|digit| digit.is_numeric())\n+                                })\n+                                .is_some()\n+                        })\n+                    {\n+                        self.known_bug = true;\n+                    } else {\n+                        panic!(\n+                            \"Invalid known-bug value: {known_bug}\\nIt requires comma-separated issue references (`#000` or `chalk#000`) or `unknown`.\"\n+                        );\n+                    }\n+                }\n                 config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n                     s.trim().to_string()\n                 });"}]}