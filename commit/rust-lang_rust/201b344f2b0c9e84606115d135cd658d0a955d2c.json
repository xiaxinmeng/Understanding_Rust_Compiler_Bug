{"sha": "201b344f2b0c9e84606115d135cd658d0a955d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMWIzNDRmMmIwYzllODQ2MDYxMTVkMTM1Y2Q2NThkMGE5NTVkMmM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-19T21:20:09Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-20T20:45:26Z"}, "message": "Refactor server api", "tree": {"sha": "1dc9c308c71ea4d2512d351de12933c6475abba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dc9c308c71ea4d2512d351de12933c6475abba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201b344f2b0c9e84606115d135cd658d0a955d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201b344f2b0c9e84606115d135cd658d0a955d2c", "html_url": "https://github.com/rust-lang/rust/commit/201b344f2b0c9e84606115d135cd658d0a955d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201b344f2b0c9e84606115d135cd658d0a955d2c/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "761fc71083b9d810aa006210d6df2b0edf95cf33", "url": "https://api.github.com/repos/rust-lang/rust/commits/761fc71083b9d810aa006210d6df2b0edf95cf33", "html_url": "https://github.com/rust-lang/rust/commit/761fc71083b9d810aa006210d6df2b0edf95cf33"}], "stats": {"total": 277, "additions": 222, "deletions": 55}, "files": [{"sha": "2ba10b2ef349ca32091d6d029e1ee0b88cc056dc", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=201b344f2b0c9e84606115d135cd658d0a955d2c", "patch": "@@ -1,6 +1,5 @@\n use crate::TextRange;\n \n-use ra_syntax::ast::PatKind;\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     ast::{self, AttrsOwner, NameOwner, TypeAscriptionOwner, TypeParamsOwner},\n@@ -156,32 +155,6 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             }\n             decl(mc)\n         })\n-        .visit(|let_statement: ast::LetStmt| {\n-            let let_syntax = let_statement.syntax();\n-\n-            let mut label = String::new();\n-            collapse_ws(let_syntax, &mut label);\n-\n-            if let_statement.ascribed_type().is_some() {\n-                return None;\n-            }\n-\n-            let pat_range = match let_statement.pat()?.kind() {\n-                PatKind::BindPat(bind_pat) => bind_pat.syntax().range(),\n-                PatKind::TuplePat(tuple_pat) => tuple_pat.syntax().range(),\n-                _ => return None,\n-            };\n-\n-            Some(StructureNode {\n-                parent: None,\n-                label,\n-                navigation_range: pat_range,\n-                node_range: let_syntax.range(),\n-                kind: let_syntax.kind(),\n-                detail: None,\n-                deprecated: false,\n-            })\n-        })\n         .accept(&node)?\n }\n "}, {"sha": "4d1df65d0c88f90c353daf5653aea49b42c66245", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=201b344f2b0c9e84606115d135cd658d0a955d2c", "patch": "@@ -0,0 +1,110 @@\n+use ra_syntax::{\n+    algo::visit::{visitor, Visitor},\n+    ast::{self, PatKind, TypeAscriptionOwner},\n+    AstNode, SmolStr, SourceFile, SyntaxNode, TextRange,\n+};\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub enum InlayKind {\n+    LetBinding,\n+    ClosureParameter,\n+}\n+\n+#[derive(Debug)]\n+pub struct InlayHint {\n+    pub range: TextRange,\n+    pub text: SmolStr,\n+    pub inlay_kind: InlayKind,\n+}\n+\n+pub(crate) fn inlay_hints(file: &SourceFile) -> Vec<InlayHint> {\n+    file.syntax().descendants().map(|node| get_inlay_hints(&node)).flatten().collect()\n+}\n+\n+fn get_inlay_hints(node: &SyntaxNode) -> Vec<InlayHint> {\n+    visitor()\n+        .visit(|let_statement: ast::LetStmt| {\n+            let let_syntax = let_statement.syntax();\n+\n+            if let_statement.ascribed_type().is_some() {\n+                return Vec::new();\n+            }\n+\n+            let pat_range = match let_statement.pat().map(|pat| pat.kind()) {\n+                Some(PatKind::BindPat(bind_pat)) => bind_pat.syntax().text_range(),\n+                Some(PatKind::TuplePat(tuple_pat)) => tuple_pat.syntax().text_range(),\n+                _ => return Vec::new(),\n+            };\n+\n+            vec![InlayHint {\n+                range: pat_range,\n+                text: let_syntax.text().to_smol_string(),\n+                inlay_kind: InlayKind::LetBinding,\n+            }]\n+        })\n+        .visit(|closure_parameter: ast::LambdaExpr| {\n+            if let Some(param_list) = closure_parameter.param_list() {\n+                param_list\n+                    .params()\n+                    .filter(|closure_param| closure_param.ascribed_type().is_none())\n+                    .map(|closure_param| {\n+                        let closure_param_syntax = closure_param.syntax();\n+                        InlayHint {\n+                            range: closure_param_syntax.text_range(),\n+                            text: closure_param_syntax.text().to_smol_string(),\n+                            inlay_kind: InlayKind::ClosureParameter,\n+                        }\n+                    })\n+                    .collect()\n+            } else {\n+                Vec::new()\n+            }\n+        })\n+        .accept(&node)\n+        .unwrap_or_else(Vec::new)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use insta::assert_debug_snapshot_matches;\n+\n+    #[test]\n+    fn test_inlay_hints() {\n+        let file = SourceFile::parse(\n+            r#\"\n+struct OuterStruct {}\n+\n+fn main() {\n+    struct InnerStruct {}\n+\n+    let test = 54;\n+    let test = InnerStruct {};\n+    let test = OuterStruct {};\n+    let test = vec![222];\n+    let mut test = Vec::new();\n+    test.push(333);\n+    let test = test.into_iter().map(|i| i * i).collect::<Vec<_>>();\n+    let mut test = 33;\n+    let _ = 22;\n+    let test: Vec<_> = (0..3).collect();\n+\n+    let _ = (0..23).map(|i: u32| {\n+        let i_squared = i * i;\n+        i_squared\n+    });\n+    \n+    let test: i32 = 33;\n+\n+    let (x, c) = (42, 'a');\n+    let test = (42, 'a');\n+}\n+\n+\"#,\n+        )\n+        .ok()\n+        .unwrap();\n+        let hints = inlay_hints(&file);\n+        assert_debug_snapshot_matches!(\"inlay_hints\", hints);\n+    }\n+}"}, {"sha": "af163088a222c4d20f37dc5fa21f4d4b54993558", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=201b344f2b0c9e84606115d135cd658d0a955d2c", "patch": "@@ -38,6 +38,7 @@ mod join_lines;\n mod typing;\n mod matching_brace;\n mod display;\n+mod inlay_hints;\n \n #[cfg(test)]\n mod marks;\n@@ -64,6 +65,7 @@ pub use crate::{\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n+    inlay_hints::{InlayHint, InlayKind},\n     line_index::{LineCol, LineIndex},\n     line_index_utils::translate_offset_with_edit,\n     references::ReferenceSearchResult,\n@@ -396,6 +398,11 @@ impl Analysis {\n         file_structure(&parse.tree())\n     }\n \n+    /// Returns a list of the places in the file where type hints can be displayed.\n+    pub fn inlay_hints(&self, file_id: FileId) -> Vec<InlayHint> {\n+        inlay_hints::inlay_hints(&self.db.parse(file_id).tree())\n+    }\n+\n     /// Returns the set of folding ranges.\n     pub fn folding_ranges(&self, file_id: FileId) -> Vec<Fold> {\n         let parse = self.db.parse(file_id);"}, {"sha": "f4d562314f59cb55c2bb993dbe2f6c78fa8e02f2", "filename": "crates/ra_ide_api/src/snapshots/tests__inlay_hints.snap", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__inlay_hints.snap", "raw_url": "https://github.com/rust-lang/rust/raw/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__inlay_hints.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__inlay_hints.snap?ref=201b344f2b0c9e84606115d135cd658d0a955d2c", "patch": "@@ -0,0 +1,63 @@\n+---\n+created: \"2019-07-20T20:13:53.385368Z\"\n+creator: insta@0.8.1\n+source: crates/ra_ide_api/src/inlay_hints.rs\n+expression: hints\n+---\n+[\n+    InlayHint {\n+        range: [71; 75),\n+        text: \"let test = 54;\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [90; 94),\n+        text: \"let test = InnerStruct {};\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [121; 125),\n+        text: \"let test = OuterStruct {};\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [152; 156),\n+        text: \"let test = vec![222];\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [178; 186),\n+        text: \"let mut test = Vec::new();\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [229; 233),\n+        text: \"let test = test.into_iter().map(|i| i * i).collect::<Vec<_>>();\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [258; 259),\n+        text: \"i\",\n+        inlay_kind: ClosureParameter,\n+    },\n+    InlayHint {\n+        range: [297; 305),\n+        text: \"let mut test = 33;\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [417; 426),\n+        text: \"let i_squared = i * i;\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [500; 506),\n+        text: \"let (x, c) = (42, \\'a\\');\",\n+        inlay_kind: LetBinding,\n+    },\n+    InlayHint {\n+        range: [528; 532),\n+        text: \"let test = (42, \\'a\\');\",\n+        inlay_kind: LetBinding,\n+    },\n+]"}, {"sha": "1077aafd8a40b683e5e681576851e84726b0aedb", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 42, "deletions": 28, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201b344f2b0c9e84606115d135cd658d0a955d2c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=201b344f2b0c9e84606115d135cd658d0a955d2c", "patch": "@@ -9,7 +9,8 @@ use lsp_types::{\n     TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity,\n+    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, InlayKind, Query,\n+    RunnableKind, Severity,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -685,13 +686,14 @@ pub fn handle_code_lens(\n     params: req::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n+    let analysis = world.analysis();\n+    let line_index = analysis.file_line_index(file_id);\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n     let workspace_root = world.workspace_root_for(file_id);\n \n     // Gather runnables\n-    for runnable in world.analysis().runnables(file_id)? {\n+    for runnable in analysis.runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => Some(\"\u25b6\ufe0fRun Test\"),\n             RunnableKind::Bench { .. } => Some(\"Run Bench\"),\n@@ -726,39 +728,51 @@ pub fn handle_code_lens(\n         }\n     }\n \n-    lenses.extend(world.analysis().file_structure(file_id).into_iter().filter_map(|it| {\n-        match it.kind {\n-            // Handle impls\n-            SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => {\n+    // Handle impls\n+    lenses.extend(\n+        analysis\n+            .file_structure(file_id)\n+            .into_iter()\n+            .filter(|it| match it.kind {\n+                SyntaxKind::TRAIT_DEF | SyntaxKind::STRUCT_DEF | SyntaxKind::ENUM_DEF => true,\n+                _ => false,\n+            })\n+            .map(|it| {\n                 let range = it.node_range.conv_with(&line_index);\n                 let pos = range.start;\n                 let lens_params =\n                     req::TextDocumentPositionParams::new(params.text_document.clone(), pos);\n-                Some(CodeLens {\n+                CodeLens {\n                     range,\n                     command: None,\n                     data: Some(to_value(CodeLensResolveData::Impls(lens_params)).unwrap()),\n-                })\n-            }\n-            // handle let statements\n-            SyntaxKind::LET_STMT => world\n-                .analysis()\n-                .type_of(FileRange { range: it.navigation_range, file_id })\n-                .ok()\n-                .and_then(std::convert::identity)\n-                .filter(|resolved_type| \"{unknown}\" != resolved_type)\n-                .map(|resolved_type| CodeLens {\n-                    range: it.node_range.conv_with(&line_index),\n-                    command: Some(Command {\n-                        title: resolved_type,\n-                        command: String::new(),\n-                        arguments: None,\n-                    }),\n-                    data: None,\n+                }\n+            }),\n+    );\n+\n+    lenses.extend(\n+        analysis\n+            .inlay_hints(file_id)\n+            .into_iter()\n+            .filter(|hint| hint.inlay_kind == InlayKind::LetBinding)\n+            .filter_map(|inlay_hint| {\n+                let resolved_type = analysis\n+                    .type_of(FileRange { range: inlay_hint.range, file_id })\n+                    .ok()\n+                    .and_then(std::convert::identity)\n+                    .filter(|resolved_type| \"{unknown}\" != resolved_type);\n+                resolved_type.map(|resolved_type| (resolved_type, inlay_hint.range))\n+            })\n+            .map(|(resolved_type, range)| CodeLens {\n+                range: range.conv_with(&line_index),\n+                command: Some(Command {\n+                    title: resolved_type,\n+                    command: String::new(),\n+                    arguments: None,\n                 }),\n-            _ => None,\n-        }\n-    }));\n+                data: None,\n+            }),\n+    );\n     Ok(Some(lenses))\n }\n "}]}