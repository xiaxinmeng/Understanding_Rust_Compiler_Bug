{"sha": "bc267c696c015525ea303e03d448d1507b6afeb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMjY3YzY5NmMwMTU1MjVlYTMwM2UwM2Q0NDhkMTUwN2I2YWZlYjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-07T20:35:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-07T20:35:51Z"}, "message": "syntax: Rename expr_alt to expr_match", "tree": {"sha": "1a5ad468deba1a5b152caddfc88a1663bb909c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a5ad468deba1a5b152caddfc88a1663bb909c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc267c696c015525ea303e03d448d1507b6afeb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc267c696c015525ea303e03d448d1507b6afeb6", "html_url": "https://github.com/rust-lang/rust/commit/bc267c696c015525ea303e03d448d1507b6afeb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc267c696c015525ea303e03d448d1507b6afeb6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92ef17aaebb28a8fe6579f669a3ee162c931d9dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ef17aaebb28a8fe6579f669a3ee162c931d9dd", "html_url": "https://github.com/rust-lang/rust/commit/92ef17aaebb28a8fe6579f669a3ee162c931d9dd"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "956e48396fcb0fae200938a32499ffc39619cef9", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -70,7 +70,7 @@ pure fn safe_to_use_expr(e: ast::expr, tm: test_mode) -> bool {\n           // parenthesizing!!  See email to marijn.\n           ast::expr_if(_, _, _) => { false }\n           ast::expr_block(_) => { false }\n-          ast::expr_alt(_, _, _) => { false }\n+          ast::expr_match(_, _, _) => { false }\n           ast::expr_while(_, _) => { false }\n \n           // https://github.com/mozilla/rust/issues/929"}, {"sha": "577ef1464cf6e5fd71f28e3f79e73a928dff8b2e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -316,7 +316,7 @@ enum expr_ {\n        Same semantics as while(true) { body }, but typestate knows that the\n        (implicit) condition is always true. */\n     expr_loop(blk),\n-    expr_alt(@expr, ~[arm], alt_mode),\n+    expr_match(@expr, ~[arm], alt_mode),\n     expr_fn(proto, fn_decl, blk, capture_clause),\n     expr_fn_block(fn_decl, blk, capture_clause),\n     // Inner expr is always an expr_fn_block. We need the wrapping node to"}, {"sha": "053c972d1ea59553a2370dad6f2752b243b37e57", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -246,7 +246,7 @@ impl helpers of ext_ctxt_helpers for ext_ctxt {\n         self.stmt(\n             self.expr(\n                 span,\n-                ast::expr_alt(v, arms, ast::alt_exhaustive)))\n+                ast::expr_match(v, arms, ast::alt_exhaustive)))\n     }\n \n     fn lit_str(span: span, s: @~str) -> @ast::expr {\n@@ -910,7 +910,7 @@ fn deser_enum(cx: ext_ctxt, tps: deser_tps_map, e_name: ast::ident,\n     // Generate code like:\n     let e_name = cx.lit_str(e_span, e_name);\n     let alt_expr = cx.expr(e_span,\n-                           ast::expr_alt(#ast{__i}, arms, ast::alt_check));\n+                           ast::expr_match(#ast{__i}, arms, ast::alt_check));\n     let var_lambda = #ast{ |__i| $(alt_expr) };\n     let read_var = #ast{ $(cx.clone(d)).read_enum_variant($(var_lambda)) };\n     let read_lambda = cx.lambda(cx.expr_blk(read_var));"}, {"sha": "ab39bf53f6a5e6bf62b0d6bf3de969dcbad0b48f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -441,8 +441,8 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_loop(body) => {\n               expr_loop(fld.fold_block(body))\n           }\n-          expr_alt(expr, arms, mode) => {\n-            expr_alt(fld.fold_expr(expr),\n+          expr_match(expr, arms, mode) => {\n+            expr_match(fld.fold_expr(expr),\n                      vec::map(arms, |x| fld.fold_arm(x)), mode)\n           }\n           expr_fn(proto, decl, body, captures) => {"}, {"sha": "d8ae80443700aed27c22486cda0b8c4dbe1e4ae9", "filename": "src/libsyntax/parse/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fparse%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fparse%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fclassify.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -6,7 +6,7 @@ import ast_util::operator_prec;\n \n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     match e.node {\n-      ast::expr_if(_, _, _) | ast::expr_alt(_, _, _) | ast::expr_block(_)\n+      ast::expr_if(_, _, _) | ast::expr_match(_, _, _) | ast::expr_block(_)\n       | ast::expr_while(_, _) | ast::expr_loop(_)\n       | ast::expr_call(_, _, true) => false,\n       _ => true"}, {"sha": "993419bd9c4e36d390b393913653b69283a67b68", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -24,7 +24,7 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              cdir_view_item, class_immutable, class_member, class_method,\n              class_mutable, crate, crate_cfg, crate_directive, decl,\n              decl_item, decl_local, default_blk, deref, div, expl, expr,\n-             expr_, expr_addr_of, expr_alt, expr_again, expr_assert,\n+             expr_, expr_addr_of, expr_match, expr_again, expr_assert,\n              expr_assign, expr_assign_op, expr_binary, expr_block, expr_break,\n              expr_call, expr_cast, expr_copy, expr_do_body,\n              expr_fail, expr_field, expr_fn, expr_fn_block, expr_if,\n@@ -1599,7 +1599,7 @@ class parser {\n         }\n         let mut hi = self.span.hi;\n         self.bump();\n-        return self.mk_expr(lo, hi, expr_alt(discriminant, arms, mode));\n+        return self.mk_expr(lo, hi, expr_match(discriminant, arms, mode));\n     }\n \n     fn parse_expr() -> @expr {"}, {"sha": "41b61f57f928770f1a23b010f9f698f644bcd517", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -1076,7 +1076,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         space(s.s);\n         print_block(s, blk);\n       }\n-      ast::expr_alt(expr, arms, mode) => {\n+      ast::expr_match(expr, arms, mode) => {\n         cbox(s, alt_indent_unit);\n         ibox(s, 4u);\n         word_nbsp(s, ~\"match\");"}, {"sha": "830114b47ad7a64a21474d59708574514c2c3d5a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -400,7 +400,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n       }\n       expr_while(x, b) => { v.visit_expr(x, e, v); v.visit_block(b, e, v); }\n       expr_loop(b) => v.visit_block(b, e, v),\n-      expr_alt(x, arms, _) => {\n+      expr_match(x, arms, _) => {\n         v.visit_expr(x, e, v);\n         for arms.each |a| { v.visit_arm(a, e, v); }\n       }"}, {"sha": "2d76607e8fa625e42ddf2082e72c1adb553435e2", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -177,7 +177,7 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_vstore(*) | ast::expr_vec(*) | ast::expr_tup(*) |\n           ast::expr_if(*) | ast::expr_log(*) |\n           ast::expr_binary(*) | ast::expr_while(*) |\n-          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n+          ast::expr_block(*) | ast::expr_loop(*) | ast::expr_match(*) |\n           ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n           ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) |\n           ast::expr_unary_move(*) | ast::expr_repeat(*) => {"}, {"sha": "8595ad6b13249318c02f9b0fe87c8ab22d0787fe", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -171,7 +171,7 @@ fn req_loans_in_expr(ex: @ast::expr,\n         visit::visit_expr(ex, self, vt);\n       }\n \n-      ast::expr_alt(ex_v, arms, _) => {\n+      ast::expr_match(ex_v, arms, _) => {\n         let cmt = self.bccx.cat_expr(ex_v);\n         for arms.each |arm| {\n             for arm.pats.each |pat| {"}, {"sha": "796c30a31c05caa0f8a7687407f03b62c7499a2c", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -23,7 +23,7 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n     visit::visit_expr(ex, s, v);\n     match ex.node {\n-      expr_alt(scrut, arms, mode) => {\n+      expr_match(scrut, arms, mode) => {\n         check_arms(tcx, arms);\n         /* Check for exhaustiveness */\n          // Check for empty enum, because is_useful only works on inhabited"}, {"sha": "b6fc75cfb05f441c49c6f7a06b80bdcc9e458ff5", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -453,7 +453,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       }\n \n       // live nodes required for interesting control flow:\n-      expr_if(*) | expr_alt(*) | expr_while(*) | expr_loop(*) => {\n+      expr_if(*) | expr_match(*) | expr_while(*) | expr_loop(*) => {\n         (*self).add_live_node_for_node(expr.id, lnk_expr(expr.span));\n         visit::visit_expr(expr, self, vt);\n       }\n@@ -966,7 +966,7 @@ class liveness {\n             self.propagate_through_loop(expr, none, blk, succ)\n           }\n \n-          expr_alt(e, arms, _) => {\n+          expr_match(e, arms, _) => {\n             //\n             //      (e)\n             //       |\n@@ -1449,7 +1449,7 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       }\n \n       // no correctness conditions related to liveness\n-      expr_if(*) | expr_alt(*) |\n+      expr_if(*) | expr_match(*) |\n       expr_while(*) | expr_loop(*) |\n       expr_index(*) | expr_field(*) | expr_vstore(*) |\n       expr_vec(*) | expr_rec(*) | expr_tup(*) |"}, {"sha": "3dc7d1b9df88fa99ea26cb55d919fefe9d71f849", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -237,7 +237,7 @@ fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n         debug!{\"node %d: %s\", expr.id, pprust::expr_to_str(expr)};\n         new_cx.parent = some(expr.id);\n       }\n-      ast::expr_alt(subexpr, _, _) => {\n+      ast::expr_match(subexpr, _, _) => {\n         debug!{\"node %d: %s\", expr.id, pprust::expr_to_str(expr)};\n         new_cx.parent = some(expr.id);\n       }"}, {"sha": "81ea48f950146ae8ad8e4e31c5167cde4b3862e1", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -3665,7 +3665,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n           ast::expr_if(cond, thn, els) => {\n             return trans_if(bcx, cond, thn, els, dest);\n           }\n-          ast::expr_alt(expr, arms, mode) => {\n+          ast::expr_match(expr, arms, mode) => {\n             return alt::trans_alt(bcx, e, expr, arms, mode, dest);\n           }\n           ast::expr_block(blk) => {"}, {"sha": "a48e594818f94a17fbc83d84242ad1e41e334a02", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -243,7 +243,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n             }\n         })\n       }\n-      expr_alt(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n+      expr_match(_, _, _) | expr_block(_) | expr_if(_, _, _) |\n       expr_while(_, _) | expr_fail(_) | expr_break | expr_again |\n       expr_unary(_, _) | expr_lit(_) | expr_assert(_) |\n       expr_mac(_) | expr_addr_of(_, _) |"}, {"sha": "d1942e41fa81b7306707d08db770b8cd874178f7", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -388,7 +388,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n                          loop_postcond);\n       }\n       expr_index(val, sub) { find_pre_post_exprs(fcx, ~[val, sub], e.id); }\n-      expr_alt(ex, alts, _) {\n+      expr_match(ex, alts, _) {\n         find_pre_post_expr(fcx, ex);\n         fn do_an_alt(fcx: fn_ctxt, an_alt: arm) -> pre_and_post {\n             match an_alt.guard {"}, {"sha": "f1bc31cbfb2ee8185d706e0ea79eca260ed09f54", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -443,7 +443,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       expr_index(val, sub) {\n         return find_pre_post_state_two(fcx, pres, val, sub, e.id, oper_pure);\n       }\n-      expr_alt(val, alts, _) {\n+      expr_match(val, alts, _) {\n         let mut changed =\n             set_prestate_ann(fcx.ccx, e.id, pres) |\n                 find_pre_post_state_expr(fcx, pres, val);"}, {"sha": "c9f9e45bb78c80d2deae3a451ec325bc66f38924", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -1472,7 +1472,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n         fcx.write_ty(id, ty::mk_nil(tcx));\n         bot = !may_break(body);\n       }\n-      ast::expr_alt(discrim, arms, _) => {\n+      ast::expr_match(discrim, arms, _) => {\n         bot = alt::check_alt(fcx, expr, discrim, arms);\n       }\n       ast::expr_fn(proto, decl, body, cap_clause) => {"}, {"sha": "b4f04ffab2b40074df53e66cc5640d7c53dd9529", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc267c696c015525ea303e03d448d1507b6afeb6/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=bc267c696c015525ea303e03d448d1507b6afeb6", "patch": "@@ -34,7 +34,7 @@ fn explain_region(cx: ctxt, region: ty::region) -> ~str {\n           some(ast_map::node_expr(expr)) => {\n             match expr.node {\n               ast::expr_call(*) => { explain_span(cx, ~\"call\", expr.span) }\n-              ast::expr_alt(*) => { explain_span(cx, ~\"alt\", expr.span) }\n+              ast::expr_match(*) => { explain_span(cx, ~\"alt\", expr.span) }\n               _ => { explain_span(cx, ~\"expression\", expr.span) }\n             }\n           }\n@@ -106,7 +106,7 @@ fn re_scope_id_to_str(cx: ctxt, node_id: ast::node_id) -> ~str {\n             fmt!{\"<call at %s>\",\n                  codemap::span_to_str(expr.span, cx.sess.codemap)}\n           }\n-          ast::expr_alt(*) => {\n+          ast::expr_match(*) => {\n             fmt!{\"<alt at %s>\",\n                  codemap::span_to_str(expr.span, cx.sess.codemap)}\n           }"}]}