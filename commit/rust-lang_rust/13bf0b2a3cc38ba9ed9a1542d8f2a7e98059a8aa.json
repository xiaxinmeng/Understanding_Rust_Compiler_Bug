{"sha": "13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYmYwYjJhM2NjMzhiYTllZDlhMTU0MmQ4ZjJhN2U5ODA1OWE4YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T14:54:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-23T14:54:14Z"}, "message": "Auto merge of #85479 - Stupremee:render-Self_as-type-casts, r=CraftSpider\n\nrustdoc: render `<Self as X>::Y` type casts properly\n\nRustdoc didn't render any `<Self as X>` casts which causes invalid code inside the documentation. This is fixed by this PR by checking if the target type `X` is different from `Self`, and if so, it will render a typecast.\n\nResolves #85454", "tree": {"sha": "d66877f608dd3f70a261365ad0fd5eb5e4844ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d66877f608dd3f70a261365ad0fd5eb5e4844ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "html_url": "https://github.com/rust-lang/rust/commit/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f8cd43ee8c3614e04b5c624dd8a45758d7023da", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f8cd43ee8c3614e04b5c624dd8a45758d7023da", "html_url": "https://github.com/rust-lang/rust/commit/0f8cd43ee8c3614e04b5c624dd8a45758d7023da"}, {"sha": "d637ed4364822a9a03248179098437adffaa3948", "url": "https://api.github.com/repos/rust-lang/rust/commits/d637ed4364822a9a03248179098437adffaa3948", "html_url": "https://github.com/rust-lang/rust/commit/d637ed4364822a9a03248179098437adffaa3948"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "35ff57f85a56227c220f327b1592839938e1d7a9", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -561,7 +561,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 }\n                 WherePredicate::EqPredicate { lhs, rhs } => {\n                     match lhs {\n-                        Type::QPath { name: left_name, ref self_type, ref trait_ } => {\n+                        Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n                                 Type::ResolvedPath {"}, {"sha": "a14eefaf57147da27b524fbc40631b02d1c64399", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -588,6 +588,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                     self_type: box clean::Generic(ref s),\n                     trait_: box clean::ResolvedPath { did, .. },\n                     name: ref _name,\n+                    ..\n                 },\n             ref bounds,\n         } => !(bounds.is_empty() || *s == kw::SelfUpper && did == trait_did),"}, {"sha": "231f13adeb68c2b578de4d6b930b6efd44129c95", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -418,9 +418,11 @@ impl<'tcx> Clean<Type> for ty::ProjectionTy<'tcx> {\n             GenericBound::TraitBound(t, _) => t.trait_,\n             GenericBound::Outlives(_) => panic!(\"cleaning a trait got a lifetime\"),\n         };\n+        let self_type = self.self_ty().clean(cx);\n         Type::QPath {\n             name: cx.tcx.associated_item(self.item_def_id).ident.name,\n-            self_type: box self.self_ty().clean(cx),\n+            self_def_id: self_type.def_id(),\n+            self_type: box self_type,\n             trait_: box trait_,\n         }\n     }\n@@ -1104,7 +1106,7 @@ impl Clean<Item> for ty::AssocItem {\n                         .filter_map(|pred| {\n                             let (name, self_type, trait_, bounds) = match *pred {\n                                 WherePredicate::BoundPredicate {\n-                                    ty: QPath { ref name, ref self_type, ref trait_ },\n+                                    ty: QPath { ref name, ref self_type, ref trait_, .. },\n                                     ref bounds,\n                                 } => (name, self_type, trait_, bounds),\n                                 _ => return None,\n@@ -1282,16 +1284,15 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n \n             let segments = if p.is_global() { &p.segments[1..] } else { &p.segments };\n             let trait_segments = &segments[..segments.len() - 1];\n+            let trait_def = cx.tcx.associated_item(p.res.def_id()).container.id();\n             let trait_path = self::Path {\n                 global: p.is_global(),\n-                res: Res::Def(\n-                    DefKind::Trait,\n-                    cx.tcx.associated_item(p.res.def_id()).container.id(),\n-                ),\n+                res: Res::Def(DefKind::Trait, trait_def),\n                 segments: trait_segments.clean(cx),\n             };\n             Type::QPath {\n                 name: p.segments.last().expect(\"segments were empty\").ident.name,\n+                self_def_id: Some(DefId::local(qself.hir_id.owner.local_def_index)),\n                 self_type: box qself.clean(cx),\n                 trait_: box resolve_type(cx, trait_path, hir_id),\n             }\n@@ -1306,6 +1307,7 @@ fn clean_qpath(hir_ty: &hir::Ty<'_>, cx: &mut DocContext<'_>) -> Type {\n             let trait_path = hir::Path { span, res, segments: &[] }.clean(cx);\n             Type::QPath {\n                 name: segment.ident.name,\n+                self_def_id: res.opt_def_id(),\n                 self_type: box qself.clean(cx),\n                 trait_: box resolve_type(cx, trait_path, hir_id),\n             }"}, {"sha": "de88e249b67f8a5ada5233a41794e76a133ee924", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -1519,6 +1519,7 @@ crate enum Type {\n     QPath {\n         name: Symbol,\n         self_type: Box<Type>,\n+        self_def_id: Option<DefId>,\n         trait_: Box<Type>,\n     },\n \n@@ -1665,7 +1666,7 @@ impl Type {\n \n     crate fn projection(&self) -> Option<(&Type, DefId, Symbol)> {\n         let (self_, trait_, name) = match self {\n-            QPath { self_type, trait_, name } => (self_type, trait_, name),\n+            QPath { self_type, trait_, name, .. } => (self_type, trait_, name),\n             _ => return None,\n         };\n         let trait_did = match **trait_ {"}, {"sha": "2c31a502565aaba84f340e59134d7308ac4164bd", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -175,8 +175,9 @@ crate fn strip_type(ty: Type) -> Type {\n         Type::BorrowedRef { lifetime, mutability, type_ } => {\n             Type::BorrowedRef { lifetime, mutability, type_: Box::new(strip_type(*type_)) }\n         }\n-        Type::QPath { name, self_type, trait_ } => Type::QPath {\n+        Type::QPath { name, self_type, trait_, self_def_id } => Type::QPath {\n             name,\n+            self_def_id,\n             self_type: Box::new(strip_type(*self_type)),\n             trait_: Box::new(strip_type(*trait_)),\n         },"}, {"sha": "3c1d03a78f1cd86d5f7ed0b8ed64e179523f6902", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -18,7 +18,7 @@ use rustc_span::def_id::CRATE_DEF_INDEX;\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{\n-    self, utils::find_nearest_parent_module, ExternalCrate, FakeDefId, PrimitiveType,\n+    self, utils::find_nearest_parent_module, ExternalCrate, FakeDefId, GetDefId, PrimitiveType,\n };\n use crate::formats::item_type::ItemType;\n use crate::html::escape::Escape;\n@@ -836,10 +836,13 @@ fn fmt_type<'cx>(\n                 write!(f, \"impl {}\", print_generic_bounds(bounds, cx))\n             }\n         }\n-        clean::QPath { ref name, ref self_type, ref trait_ } => {\n+        clean::QPath { ref name, ref self_type, ref trait_, ref self_def_id } => {\n             let should_show_cast = match *trait_ {\n                 box clean::ResolvedPath { ref path, .. } => {\n-                    !path.segments.is_empty() && !self_type.is_self_type()\n+                    !path.segments.is_empty()\n+                        && self_def_id\n+                            .zip(trait_.def_id())\n+                            .map_or(!self_type.is_self_type(), |(id, trait_)| id != trait_)\n                 }\n                 _ => true,\n             };"}, {"sha": "c6646ba9ae4d2bc52faeb7cfe4681640ee5b4e7a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -396,7 +396,7 @@ impl FromWithTcx<clean::Type> for Type {\n                 mutable: mutability == ast::Mutability::Mut,\n                 type_: Box::new((*type_).into_tcx(tcx)),\n             },\n-            QPath { name, self_type, trait_ } => Type::QualifiedPath {\n+            QPath { name, self_type, trait_, .. } => Type::QualifiedPath {\n                 name: name.to_string(),\n                 self_type: Box::new((*self_type).into_tcx(tcx)),\n                 trait_: Box::new((*trait_).into_tcx(tcx)),"}, {"sha": "45664dfc3823da490d5625df87efdb3c2594b43e", "filename": "src/test/rustdoc/issue-85454.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Ftest%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa/src%2Ftest%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-85454.rs?ref=13bf0b2a3cc38ba9ed9a1542d8f2a7e98059a8aa", "patch": "@@ -0,0 +1,17 @@\n+// @has issue_85454/trait.FromResidual.html\n+// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+pub trait FromResidual<R = <Self as Try>::Residual> {\n+    fn from_residual(residual: R) -> Self;\n+}\n+\n+pub trait Try: FromResidual {\n+    type Output;\n+    type Residual;\n+    fn from_output(output: Self::Output) -> Self;\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+}\n+\n+pub enum ControlFlow<B, C = ()> {\n+    Continue(C),\n+    Break(B),\n+}"}]}