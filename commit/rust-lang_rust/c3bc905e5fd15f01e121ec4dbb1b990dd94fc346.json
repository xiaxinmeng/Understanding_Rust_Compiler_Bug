{"sha": "c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYmM5MDVlNWZkMTVmMDFlMTIxZWM0ZGJiMWI5OTBkZDk0ZmMzNDY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-01T04:34:00Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-10-03T01:58:18Z"}, "message": "Remove redundant 'Type' in variant names, stop reexporting.", "tree": {"sha": "60242025832c2d73e610a5107b2a66aebd83f1ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60242025832c2d73e610a5107b2a66aebd83f1ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "html_url": "https://github.com/rust-lang/rust/commit/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8991ffc3031b4e787f9216caa12aa556f5ede8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/8991ffc3031b4e787f9216caa12aa556f5ede8ed", "html_url": "https://github.com/rust-lang/rust/commit/8991ffc3031b4e787f9216caa12aa556f5ede8ed"}], "stats": {"total": 95, "additions": 47, "deletions": 48}, "files": [{"sha": "d2475d1e4e7a83f815f6a3388c167e92ae7518fb", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "patch": "@@ -73,49 +73,49 @@ fn try_inline_def<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let did = def.def_id();\n     let inner = match def {\n         Def::Trait(did) => {\n-            record_extern_fqn(cx, did, clean::TypeTrait);\n+            record_extern_fqn(cx, did, clean::TypeKind::Trait);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n         Def::Fn(did) => {\n-            record_extern_fqn(cx, did, clean::TypeFunction);\n+            record_extern_fqn(cx, did, clean::TypeKind::Function);\n             clean::FunctionItem(build_external_function(cx, tcx, did))\n         }\n         Def::Struct(did)\n                 // If this is a struct constructor, we skip it\n                 if tcx.def_key(did).disambiguated_data.data != DefPathData::StructCtor => {\n-            record_extern_fqn(cx, did, clean::TypeStruct);\n+            record_extern_fqn(cx, did, clean::TypeKind::Struct);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::StructItem(build_struct(cx, tcx, did))\n         }\n         Def::Union(did) => {\n-            record_extern_fqn(cx, did, clean::TypeUnion);\n+            record_extern_fqn(cx, did, clean::TypeKind::Union);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::UnionItem(build_union(cx, tcx, did))\n         }\n         Def::TyAlias(did) => {\n-            record_extern_fqn(cx, did, clean::TypeTypedef);\n+            record_extern_fqn(cx, did, clean::TypeKind::Typedef);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::TypedefItem(build_type_alias(cx, tcx, did), false)\n         }\n         Def::Enum(did) => {\n-            record_extern_fqn(cx, did, clean::TypeEnum);\n+            record_extern_fqn(cx, did, clean::TypeKind::Enum);\n             ret.extend(build_impls(cx, tcx, did));\n             clean::EnumItem(build_enum(cx, tcx, did))\n         }\n         // Assume that the enum type is reexported next to the variant, and\n         // variants don't show up in documentation specially.\n         Def::Variant(..) => return Some(Vec::new()),\n         Def::Mod(did) => {\n-            record_extern_fqn(cx, did, clean::TypeModule);\n+            record_extern_fqn(cx, did, clean::TypeKind::Module);\n             clean::ModuleItem(build_module(cx, tcx, did))\n         }\n         Def::Static(did, mtbl) => {\n-            record_extern_fqn(cx, did, clean::TypeStatic);\n+            record_extern_fqn(cx, did, clean::TypeKind::Static);\n             clean::StaticItem(build_static(cx, tcx, did, mtbl))\n         }\n         Def::Const(did) | Def::AssociatedConst(did) => {\n-            record_extern_fqn(cx, did, clean::TypeConst);\n+            record_extern_fqn(cx, did, clean::TypeKind::Const);\n             clean::ConstantItem(build_const(cx, tcx, did))\n         }\n         _ => return None,"}, {"sha": "b95ca278707496b4369fb6ed939d4ae8b23ba368", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "patch": "@@ -12,7 +12,6 @@\n //! that clean them.\n \n pub use self::Type::*;\n-pub use self::TypeKind::*;\n pub use self::VariantKind::*;\n pub use self::Mutability::*;\n pub use self::Import::*;\n@@ -688,7 +687,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 (tcx.lang_items.sync_trait().unwrap(),\n                  external_path(cx, \"Sync\", None, false, vec![], empty)),\n         };\n-        inline::record_extern_fqn(cx, did, TypeTrait);\n+        inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n             trait_: ResolvedPath {\n                 path: path,\n@@ -707,7 +706,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n             Some(tcx) => tcx,\n             None => return RegionBound(Lifetime::statik())\n         };\n-        inline::record_extern_fqn(cx, self.def_id, TypeTrait);\n+        inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n         let path = external_path(cx, &tcx.item_name(self.def_id).as_str(),\n                                  Some(self.def_id), true, vec![], self.substs);\n \n@@ -1480,16 +1479,16 @@ pub enum PrimitiveType {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Copy, Debug)]\n pub enum TypeKind {\n-    TypeEnum,\n-    TypeFunction,\n-    TypeModule,\n-    TypeConst,\n-    TypeStatic,\n-    TypeStruct,\n-    TypeUnion,\n-    TypeTrait,\n-    TypeVariant,\n-    TypeTypedef,\n+    Enum,\n+    Function,\n+    Module,\n+    Const,\n+    Static,\n+    Struct,\n+    Union,\n+    Trait,\n+    Variant,\n+    Typedef,\n }\n \n pub trait GetDefId {\n@@ -1795,9 +1794,9 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             ty::TyAdt(def, substs) => {\n                 let did = def.did;\n                 let kind = match def.adt_kind() {\n-                    AdtKind::Struct => TypeStruct,\n-                    AdtKind::Union => TypeUnion,\n-                    AdtKind::Enum => TypeEnum,\n+                    AdtKind::Struct => TypeKind::Struct,\n+                    AdtKind::Union => TypeKind::Union,\n+                    AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, &cx.tcx().item_name(did).as_str(),\n@@ -1811,7 +1810,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n             }\n             ty::TyTrait(ref obj) => {\n                 let did = obj.principal.def_id();\n-                inline::record_extern_fqn(cx, did, TypeTrait);\n+                inline::record_extern_fqn(cx, did, TypeKind::Trait);\n \n                 let mut typarams = vec![];\n                 obj.region_bound.clean(cx).map(|b| typarams.push(RegionBound(b)));\n@@ -2761,24 +2760,24 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n     let tcx = cx.tcx();\n \n     let (did, kind) = match def {\n-        Def::Fn(i) => (i, TypeFunction),\n-        Def::TyAlias(i) => (i, TypeTypedef),\n-        Def::Enum(i) => (i, TypeEnum),\n-        Def::Trait(i) => (i, TypeTrait),\n-        Def::Struct(i) => (i, TypeStruct),\n-        Def::Union(i) => (i, TypeUnion),\n-        Def::Mod(i) => (i, TypeModule),\n-        Def::Static(i, _) => (i, TypeStatic),\n-        Def::Variant(i) => (tcx.parent_def_id(i).unwrap(), TypeEnum),\n-        Def::SelfTy(Some(def_id), _) => (def_id, TypeTrait),\n+        Def::Fn(i) => (i, TypeKind::Function),\n+        Def::TyAlias(i) => (i, TypeKind::Typedef),\n+        Def::Enum(i) => (i, TypeKind::Enum),\n+        Def::Trait(i) => (i, TypeKind::Trait),\n+        Def::Struct(i) => (i, TypeKind::Struct),\n+        Def::Union(i) => (i, TypeKind::Union),\n+        Def::Mod(i) => (i, TypeKind::Module),\n+        Def::Static(i, _) => (i, TypeKind::Static),\n+        Def::Variant(i) => (tcx.parent_def_id(i).unwrap(), TypeKind::Enum),\n+        Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n         Def::SelfTy(_, Some(impl_def_id)) => {\n             return impl_def_id\n         }\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }\n     inline::record_extern_fqn(cx, did, kind);\n-    if let TypeTrait = kind {\n+    if let TypeKind::Trait = kind {\n         let t = inline::build_external_trait(cx, tcx, did);\n         cx.external_traits.borrow_mut().insert(did, t);\n     }\n@@ -2966,7 +2965,7 @@ fn lang_struct(cx: &DocContext, did: Option<DefId>,\n         Some(did) => did,\n         None => return fallback(box t.clean(cx)),\n     };\n-    inline::record_extern_fqn(cx, did, TypeStruct);\n+    inline::record_extern_fqn(cx, did, TypeKind::Struct);\n     ResolvedPath {\n         typarams: None,\n         did: did,"}, {"sha": "f584c4e2f4d9cae0b61b6ff687b866ed673bc875", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3bc905e5fd15f01e121ec4dbb1b990dd94fc346/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=c3bc905e5fd15f01e121ec4dbb1b990dd94fc346", "patch": "@@ -90,16 +90,16 @@ impl<'a> From<&'a clean::Item> for ItemType {\n impl From<clean::TypeKind> for ItemType {\n     fn from(kind: clean::TypeKind) -> ItemType {\n         match kind {\n-            clean::TypeStruct   => ItemType::Struct,\n-            clean::TypeUnion    => ItemType::Union,\n-            clean::TypeEnum     => ItemType::Enum,\n-            clean::TypeFunction => ItemType::Function,\n-            clean::TypeTrait    => ItemType::Trait,\n-            clean::TypeModule   => ItemType::Module,\n-            clean::TypeStatic   => ItemType::Static,\n-            clean::TypeConst    => ItemType::Constant,\n-            clean::TypeVariant  => ItemType::Variant,\n-            clean::TypeTypedef  => ItemType::Typedef,\n+            clean::TypeKind::Struct   => ItemType::Struct,\n+            clean::TypeKind::Union    => ItemType::Union,\n+            clean::TypeKind::Enum     => ItemType::Enum,\n+            clean::TypeKind::Function => ItemType::Function,\n+            clean::TypeKind::Trait    => ItemType::Trait,\n+            clean::TypeKind::Module   => ItemType::Module,\n+            clean::TypeKind::Static   => ItemType::Static,\n+            clean::TypeKind::Const    => ItemType::Constant,\n+            clean::TypeKind::Variant  => ItemType::Variant,\n+            clean::TypeKind::Typedef  => ItemType::Typedef,\n         }\n     }\n }"}]}