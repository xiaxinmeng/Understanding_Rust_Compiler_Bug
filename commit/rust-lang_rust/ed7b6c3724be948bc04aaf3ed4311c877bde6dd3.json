{"sha": "ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkN2I2YzM3MjRiZTk0OGJjMDRhYWYzZWQ0MzExYzg3N2JkZTZkZDM=", "commit": {"author": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-12T04:10:36Z"}, "committer": {"name": "projektir", "email": "oprojektir@gmail.com", "date": "2017-04-12T04:10:36Z"}, "message": "Minor nits in primitive str", "tree": {"sha": "5cb4de306a2393b57f773ce73e9aab051e88457c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb4de306a2393b57f773ce73e9aab051e88457c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "html_url": "https://github.com/rust-lang/rust/commit/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3/comments", "author": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "projektir", "id": 16269746, "node_id": "MDQ6VXNlcjE2MjY5NzQ2", "avatar_url": "https://avatars.githubusercontent.com/u/16269746?v=4", "gravatar_id": "", "url": "https://api.github.com/users/projektir", "html_url": "https://github.com/projektir", "followers_url": "https://api.github.com/users/projektir/followers", "following_url": "https://api.github.com/users/projektir/following{/other_user}", "gists_url": "https://api.github.com/users/projektir/gists{/gist_id}", "starred_url": "https://api.github.com/users/projektir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/projektir/subscriptions", "organizations_url": "https://api.github.com/users/projektir/orgs", "repos_url": "https://api.github.com/users/projektir/repos", "events_url": "https://api.github.com/users/projektir/events{/privacy}", "received_events_url": "https://api.github.com/users/projektir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad36c2f5528d617db66c244d8bcbfc4b36da0ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad36c2f5528d617db66c244d8bcbfc4b36da0ca0", "html_url": "https://github.com/rust-lang/rust/commit/ad36c2f5528d617db66c244d8bcbfc4b36da0ca0"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "f85336b8afbf48fa0d20d56768f974daac63fff2", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "patch": "@@ -318,8 +318,10 @@ impl str {\n \n     /// Returns a subslice of `str`.\n     ///\n-    /// This is the non-panicking alternative to indexing the `str`. Returns `None` whenever\n-    /// equivalent indexing operation would panic.\n+    /// This is the non-panicking alternative to indexing the `str`. Returns\n+    /// [`None`] whenever equivalent indexing operation would panic.\n+    ///\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -339,8 +341,10 @@ impl str {\n \n     /// Returns a mutable subslice of `str`.\n     ///\n-    /// This is the non-panicking alternative to indexing the `str`. Returns `None` whenever\n-    /// equivalent indexing operation would panic.\n+    /// This is the non-panicking alternative to indexing the `str`. Returns\n+    /// [`None`] whenever equivalent indexing operation would panic.\n+    ///\n+    /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -563,7 +567,7 @@ impl str {\n         core_str::StrExt::split_at_mut(self, mid)\n     }\n \n-    /// Returns an iterator over the `char`s of a string slice.\n+    /// Returns an iterator over the [`char`]s of a string slice.\n     ///\n     /// As a string slice consists of valid UTF-8, we can iterate through a\n     /// string slice by [`char`]. This method returns such an iterator.\n@@ -1650,13 +1654,13 @@ impl str {\n \n     /// Parses this string slice into another type.\n     ///\n-    /// Because `parse()` is so general, it can cause problems with type\n-    /// inference. As such, `parse()` is one of the few times you'll see\n+    /// Because `parse` is so general, it can cause problems with type\n+    /// inference. As such, `parse` is one of the few times you'll see\n     /// the syntax affectionately known as the 'turbofish': `::<>`. This\n     /// helps the inference algorithm understand specifically which type\n     /// you're trying to parse into.\n     ///\n-    /// `parse()` can parse any type that implements the [`FromStr`] trait.\n+    /// `parse` can parse any type that implements the [`FromStr`] trait.\n     ///\n     /// [`FromStr`]: str/trait.FromStr.html\n     ///\n@@ -1739,7 +1743,7 @@ impl str {\n     ///\n     /// `replacen` creates a new [`String`], and copies the data from this string slice into it.\n     /// While doing so, it attempts to find matches of a pattern. If it finds any, it\n-    /// replaces them with the replacement string slice at most `N` times.\n+    /// replaces them with the replacement string slice at most `count` times.\n     ///\n     /// [`String`]: string/struct.String.html\n     ///\n@@ -1885,33 +1889,40 @@ impl str {\n         return s;\n     }\n \n-    /// Escapes each char in `s` with `char::escape_debug`.\n+    /// Escapes each char in `s` with [`char::escape_debug`].\n+    ///\n+    /// [`char::escape_debug`]: primitive.char.html#method.escape_debug\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n     pub fn escape_debug(&self) -> String {\n         self.chars().flat_map(|c| c.escape_debug()).collect()\n     }\n \n-    /// Escapes each char in `s` with `char::escape_default`.\n+    /// Escapes each char in `s` with [`char::escape_default`].\n+    ///\n+    /// [`char::escape_default`]: primitive.char.html#method.escape_default\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n     pub fn escape_default(&self) -> String {\n         self.chars().flat_map(|c| c.escape_default()).collect()\n     }\n \n-    /// Escapes each char in `s` with `char::escape_unicode`.\n+    /// Escapes each char in `s` with [`char::escape_unicode`].\n+    ///\n+    /// [`char::escape_unicode`]: primitive.char.html#method.escape_unicode\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n     pub fn escape_unicode(&self) -> String {\n         self.chars().flat_map(|c| c.escape_unicode()).collect()\n     }\n \n-    /// Converts a `Box<str>` into a [`String`] without copying or allocating.\n+    /// Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n     ///\n     /// [`String`]: string/struct.String.html\n+    /// [`Box<str>`]: boxed/struct.Box.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "8ae987557dd0f99e505416cbe326814b3459831d", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed7b6c3724be948bc04aaf3ed4311c877bde6dd3/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=ed7b6c3724be948bc04aaf3ed4311c877bde6dd3", "patch": "@@ -406,7 +406,7 @@ mod prim_slice { }\n ///\n /// This documentation describes a number of methods and trait implementations\n /// on the `str` type. For technical reasons, there is additional, separate\n-/// documentation in [the `std::str` module](str/index.html) as well.\n+/// documentation in the [`std::str`](str/index.html) module as well.\n ///\n /// # Examples\n ///\n@@ -425,7 +425,7 @@ mod prim_slice { }\n /// # Representation\n ///\n /// A `&str` is made up of two components: a pointer to some bytes, and a\n-/// length. You can look at these with the [`.as_ptr`] and [`len`] methods:\n+/// length. You can look at these with the [`as_ptr`] and [`len`] methods:\n ///\n /// ```\n /// use std::slice;\n@@ -452,11 +452,11 @@ mod prim_slice { }\n /// assert_eq!(s, Ok(story));\n /// ```\n ///\n-/// [`.as_ptr`]: #method.as_ptr\n+/// [`as_ptr`]: #method.as_ptr\n /// [`len`]: #method.len\n ///\n /// Note: This example shows the internals of `&str`. `unsafe` should not be\n-/// used to get a string slice under normal circumstances. Use `.as_slice()`\n+/// used to get a string slice under normal circumstances. Use `as_slice`\n /// instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str { }"}]}