{"sha": "8c729bd0f3bc8726e50e05c0337d960ab4791a18", "node_id": "C_kwDOAAsO6NoAKDhjNzI5YmQwZjNiYzg3MjZlNTBlMDVjMDMzN2Q5NjBhYjQ3OTFhMTg", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-14T18:20:53Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:43Z"}, "message": "handle nested obligations in `satisfied_from_param_env`", "tree": {"sha": "dd4145d8fa22dd82294f906624c165aa3f967f15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4145d8fa22dd82294f906624c165aa3f967f15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c729bd0f3bc8726e50e05c0337d960ab4791a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c729bd0f3bc8726e50e05c0337d960ab4791a18", "html_url": "https://github.com/rust-lang/rust/commit/8c729bd0f3bc8726e50e05c0337d960ab4791a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c729bd0f3bc8726e50e05c0337d960ab4791a18/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bb1a9febce13dbe7ece9cdb3248b52c1ac44cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb1a9febce13dbe7ece9cdb3248b52c1ac44cc5", "html_url": "https://github.com/rust-lang/rust/commit/5bb1a9febce13dbe7ece9cdb3248b52c1ac44cc5"}], "stats": {"total": 171, "additions": 126, "deletions": 45}, "files": [{"sha": "5df1f85ec416eac0046fb1a64b102aebe342d9ba", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 34, "deletions": 26, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -18,6 +18,8 @@ use rustc_middle::ty::{self, TyCtxt, TypeVisitable, TypeVisitor};\n use rustc_span::Span;\n use std::ops::ControlFlow;\n \n+use crate::traits::ObligationCtxt;\n+\n /// Check if a given constant can be evaluated.\n #[instrument(skip(infcx), level = \"debug\")]\n pub fn is_const_evaluatable<'tcx>(\n@@ -71,26 +73,27 @@ pub fn is_const_evaluatable<'tcx>(\n         // See #74595 for more details about this.\n         let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n         match concrete {\n-          // If we're evaluating a generic foreign constant, under a nightly compiler while\n-          // the current crate does not enable `feature(generic_const_exprs)`, abort\n-          // compilation with a useful error.\n-          Err(_) if tcx.sess.is_nightly_build()\n-            && let Ok(Some(ac)) = tcx.expand_abstract_consts(ct)\n-            && let ty::ConstKind::Expr(_) = ac.kind() => {\n-              tcx.sess\n-                  .struct_span_fatal(\n-                      // Slightly better span than just using `span` alone\n-                      if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n-                      \"failed to evaluate generic const expression\",\n-                  )\n-                  .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n-                  .span_suggestion_verbose(\n-                      rustc_span::DUMMY_SP,\n-                      \"consider enabling this feature\",\n-                      \"#![feature(generic_const_exprs)]\\n\",\n-                      rustc_errors::Applicability::MaybeIncorrect,\n-                  )\n-                  .emit()\n+            // If we're evaluating a generic foreign constant, under a nightly compiler while\n+            // the current crate does not enable `feature(generic_const_exprs)`, abort\n+            // compilation with a useful error.\n+            Err(_) if tcx.sess.is_nightly_build()\n+                && let Ok(Some(ac)) = tcx.expand_abstract_consts(ct)\n+                && let ty::ConstKind::Expr(_) = ac.kind() => \n+            {\n+                tcx.sess\n+                    .struct_span_fatal(\n+                        // Slightly better span than just using `span` alone\n+                        if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n+                        \"failed to evaluate generic const expression\",\n+                    )\n+                    .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n+                    .span_suggestion_verbose(\n+                        rustc_span::DUMMY_SP,\n+                        \"consider enabling this feature\",\n+                        \"#![feature(generic_const_exprs)]\\n\",\n+                        rustc_errors::Applicability::MaybeIncorrect,\n+                    )\n+                    .emit()\n             }\n \n             Err(ErrorHandled::TooGeneric) => {\n@@ -130,12 +133,17 @@ fn satisfied_from_param_env<'tcx>(\n     impl<'a, 'tcx> TypeVisitor<'tcx> for Visitor<'a, 'tcx> {\n         type BreakTy = ();\n         fn visit_const(&mut self, c: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if c.ty() == self.ct.ty()\n-                && let Ok(_nested_obligations) = self\n-                    .infcx\n-                    .at(&ObligationCause::dummy(), self.param_env)\n-                    .eq(c, self.ct)\n-            {\n+            if let Ok(()) = self.infcx.commit_if_ok(|_| {\n+                let ocx = ObligationCtxt::new_in_snapshot(self.infcx);\n+                if let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c.ty(), self.ct.ty())\n+                    && let Ok(()) = ocx.eq(&ObligationCause::dummy(), self.param_env, c, self.ct)\n+                    && ocx.select_all_or_error().is_empty()\n+                {\n+                    Ok(())\n+                } else {\n+                    Err(())\n+                }\n+            }) {\n                 ControlFlow::BREAK\n             } else if let ty::ConstKind::Expr(e) = c.kind() {\n                 e.visit_with(self)"}, {"sha": "806e031a4bb6540bf249acb2732915ff5f5dab5b", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -3,7 +3,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::obligation_forest::ProcessResult;\n use rustc_data_structures::obligation_forest::{Error, ForestObligation, Outcome};\n use rustc_data_structures::obligation_forest::{ObligationForest, ObligationProcessor};\n-use rustc_hir::def::DefKind;\n use rustc_infer::traits::ProjectionCacheKey;\n use rustc_infer::traits::{SelectionError, TraitEngine, TraitObligation};\n use rustc_middle::mir::interpret::ErrorHandled;\n@@ -465,6 +464,8 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                     // Let's just see where this breaks :shrug:\n                     match (c1.kind(), c2.kind()) {\n                         (ty::ConstKind::Unevaluated(a), ty::ConstKind::Unevaluated(b)) => {\n+                            // FIXME: remove\n+                            use rustc_hir::def::DefKind;\n                             if tcx.def_kind(a.def.did) == DefKind::AssocConst\n                                 || tcx.def_kind(b.def.did) == DefKind::AssocConst\n                             {\n@@ -477,16 +478,17 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                                     ),\n                                 );\n                             }\n-                            if let (Ok(Some(a)), Ok(Some(b))) = (\n-                                    tcx.expand_abstract_consts(c1),\n-                                    tcx.expand_abstract_consts(c2),\n-                                ) && a.ty() == b.ty() &&\n-                                  let Ok(new_obligations) = infcx\n-                                      .at(&obligation.cause, obligation.param_env)\n-                                      .eq(a, b) {\n-                                            return ProcessResult::Changed(mk_pending(\n-                                                new_obligations.into_obligations(),\n-                                            ));\n+\n+                            if let Ok(Some(a)) = tcx.expand_abstract_consts(c1)\n+                                && let Ok(Some(b)) = tcx.expand_abstract_consts(c2)\n+                                && a.ty() == b.ty() \n+                                && let Ok(new_obligations) = infcx\n+                                    .at(&obligation.cause, obligation.param_env)\n+                                    .eq(a, b) \n+                                {\n+                                    return ProcessResult::Changed(mk_pending(\n+                                        new_obligations.into_obligations(),\n+                                    ));\n                                 }\n                         }\n                         _ => {}"}, {"sha": "c8f7553da7982ef03efcadceaadf78a0199b7377", "filename": "src/test/ui/const-generics/generic_const_exprs/assoc_const_unification/doesnt_unify_evaluatable.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.rs?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -0,0 +1,15 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+\n+fn foo<T: Trait, U: Trait>() where [(); U::ASSOC]:, {\n+    bar::<{ T::ASSOC }>();\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn bar<const N: usize>() {}\n+\n+fn main() {}"}, {"sha": "e4a0cabe57284ce657ff907fdf527589a991348d", "filename": "src/test/ui/const-generics/generic_const_exprs/assoc_const_unification/doesnt_unify_evaluatable.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Fdoesnt_unify_evaluatable.stderr?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/doesnt_unify_evaluatable.rs:9:11\n+   |\n+LL |     bar::<{ T::ASSOC }>();\n+   |           ^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { T::ASSOC }]:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6597b9f2b3fe3fa36fcba9420aa09e84bca0c5ba", "filename": "src/test/ui/const-generics/generic_const_exprs/assoc_const_unification/unifies_evaluatable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Funifies_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Funifies_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fassoc_const_unification%2Funifies_evaluatable.rs?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+trait Trait {\n+    const ASSOC: usize;\n+}\n+\n+fn foo<T: Trait, U: Trait>() where [(); T::ASSOC]:, {\n+    bar::<{ T::ASSOC }>();\n+}\n+\n+fn bar<const N: usize>() -> [(); N] {\n+    [(); N]\n+}\n+\n+fn main() {}"}, {"sha": "cf59763675bdabdd9506da2606105c4b3521717b", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -59,9 +59,11 @@ impl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a, T,\n         assert!(DIM >= T::DIM);\n         if !self.inbounds(index) {\n             //~^ ERROR mismatched types\n+            //~^^ ERROR unconstrained generic constant\n             return None;\n         }\n         let size = self.size();\n+        //~^ ERROR unconstrained generic constant\n         let newindex: [usize; T::DIM] = Default::default();\n         //~^ ERROR the trait bound\n         self.reference.bget(newindex)"}, {"sha": "f84fd0146357dc468d8a0e072757dcc397cd2b4d", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c729bd0f3bc8726e50e05c0337d960ab4791a18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=8c729bd0f3bc8726e50e05c0337d960ab4791a18", "patch": "@@ -17,7 +17,7 @@ LL |     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n               found constant `DIM`\n \n error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:84:5\n+  --> $DIR/issue-83765.rs:86:5\n    |\n LL |     fn size(&self) -> [usize; DIM] {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n@@ -26,14 +26,27 @@ LL |     fn size(&self) -> [usize; DIM] {\n               found constant `DIM`\n \n error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:96:5\n+  --> $DIR/issue-83765.rs:98:5\n    |\n LL |     fn bget(&self, index: [usize; DIM]) -> Option<Self::Element> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n    |\n    = note: expected constant `Self::DIM`\n               found constant `DIM`\n \n+error: unconstrained generic constant\n+  --> $DIR/issue-83765.rs:60:18\n+   |\n+LL |         if !self.inbounds(index) {\n+   |                  ^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+note: required by a bound in `TensorSize::inbounds`\n+  --> $DIR/issue-83765.rs:16:39\n+   |\n+LL |     fn inbounds(&self, index: [usize; Self::DIM]) -> bool {\n+   |                                       ^^^^^^^^^ required by this bound in `TensorSize::inbounds`\n+\n error[E0308]: mismatched types\n   --> $DIR/issue-83765.rs:60:27\n    |\n@@ -43,8 +56,21 @@ LL |         if !self.inbounds(index) {\n    = note: expected constant `Self::DIM`\n               found constant `DIM`\n \n+error: unconstrained generic constant\n+  --> $DIR/issue-83765.rs:65:25\n+   |\n+LL |         let size = self.size();\n+   |                         ^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n+note: required by a bound in `TensorSize::size`\n+  --> $DIR/issue-83765.rs:15:31\n+   |\n+LL |     fn size(&self) -> [usize; Self::DIM];\n+   |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n+\n error[E0277]: the trait bound `[usize; _]: Default` is not satisfied\n-  --> $DIR/issue-83765.rs:65:41\n+  --> $DIR/issue-83765.rs:67:41\n    |\n LL |         let newindex: [usize; T::DIM] = Default::default();\n    |                                         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[usize; _]`\n@@ -55,7 +81,7 @@ LL | impl<'a, T: Broadcastable, const DIM: usize> Broadcastable for LazyUpdim<'a\n    |                                                                                                  +++++++++++++++++++++++++\n \n error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:86:24\n+  --> $DIR/issue-83765.rs:88:24\n    |\n LL |         self.reference.size()\n    |                        ^^^^\n@@ -68,7 +94,7 @@ LL |     fn size(&self) -> [usize; Self::DIM];\n    |                               ^^^^^^^^^ required by this bound in `TensorSize::size`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:86:9\n+  --> $DIR/issue-83765.rs:88:9\n    |\n LL |         self.reference.size()\n    |         ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n@@ -77,7 +103,7 @@ LL |         self.reference.size()\n               found constant `Self::DIM`\n \n error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:98:24\n+  --> $DIR/issue-83765.rs:100:24\n    |\n LL |         self.reference.bget(index).map(&self.closure)\n    |                        ^^^^\n@@ -90,15 +116,15 @@ LL |     fn bget(&self, index: [usize; Self::DIM]) -> Option<Self::Element>;\n    |                                   ^^^^^^^^^ required by this bound in `Broadcastable::bget`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:98:29\n+  --> $DIR/issue-83765.rs:100:29\n    |\n LL |         self.reference.bget(index).map(&self.closure)\n    |                             ^^^^^ expected `Self::DIM`, found `DIM`\n    |\n    = note: expected constant `Self::DIM`\n               found constant `DIM`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}]}