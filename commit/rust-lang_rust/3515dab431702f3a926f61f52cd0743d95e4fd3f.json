{"sha": "3515dab431702f3a926f61f52cd0743d95e4fd3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTVkYWI0MzE3MDJmM2E5MjZmNjFmNTJjZDA3NDNkOTVlNGZkM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T21:32:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-02T21:32:47Z"}, "message": "Auto merge of #51310 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #50167 ( Add as_nanos function to Duration)\n - #50919 (Provide more context for what the {f32,f64}::EPSILON values represent.)\n - #51124 (Reword {ptr,mem}::replace docs.)\n - #51147 (Stabilize SliceIndex trait.)\n - #51291 (Fix typos of \u2018ambiguous\u2019)\n - #51302 (Permit building rustdoc without compiler artifacts)\n\nFailed merges:", "tree": {"sha": "97e5055aa0c78209a5c490e0c02c65cab27ed4de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97e5055aa0c78209a5c490e0c02c65cab27ed4de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3515dab431702f3a926f61f52cd0743d95e4fd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3515dab431702f3a926f61f52cd0743d95e4fd3f", "html_url": "https://github.com/rust-lang/rust/commit/3515dab431702f3a926f61f52cd0743d95e4fd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3515dab431702f3a926f61f52cd0743d95e4fd3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6", "html_url": "https://github.com/rust-lang/rust/commit/4ecf12bf0eb8386626ccdb5f721a7183ccc4eba6"}, {"sha": "dcfe311da8ce43941d5788531216d8f142626628", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfe311da8ce43941d5788531216d8f142626628", "html_url": "https://github.com/rust-lang/rust/commit/dcfe311da8ce43941d5788531216d8f142626628"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "c94cb57603206c02aaa21658fb2fe0dcbdbc2fe9", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -952,8 +952,7 @@ impl Step for Compiletest {\n         if suite.ends_with(\"fulldeps\") ||\n             // FIXME: Does pretty need librustc compiled? Note that there are\n             // fulldeps test suites with mode = pretty as well.\n-            mode == \"pretty\" ||\n-            mode == \"rustdoc\"\n+            mode == \"pretty\"\n         {\n             builder.ensure(compile::Rustc { compiler, target });\n         }"}, {"sha": "a56420d52d0d5528afb8f6ed09fd761f66bdce8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -104,7 +104,6 @@\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n-#![feature(slice_get_slice)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(str_internals)]"}, {"sha": "c27c596e7975a33463042261b9ec17d33aa7990c", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -121,7 +121,7 @@ pub use core::slice::{RSplit, RSplitMut};\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub use core::slice::{from_ref, from_mut};\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n pub use core::slice::SliceIndex;\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]\n pub use core::slice::{ExactChunks, ExactChunksMut};"}, {"sha": "9fed49903455c25f180ba63dff5f8e048bcb7d0a", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -635,8 +635,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n-/// Replaces the value at a mutable location with a new one, returning the old value, without\n-/// deinitializing either one.\n+/// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n+///\n+/// Neither value is dropped.\n ///\n /// # Examples\n ///"}, {"sha": "577c823f9a060d8009f856a58bb4dee11a144b3f", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -31,7 +31,11 @@ pub const MANTISSA_DIGITS: u32 = 24;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = 6;\n \n-/// Difference between `1.0` and the next largest representable number.\n+/// [Machine epsilon] value for `f32`.\n+///\n+/// This is the difference between `1.0` and the next largest representable number.\n+///\n+/// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n "}, {"sha": "b8e3dd6ed646cb8e90ef36e1552646be11efd18c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -31,7 +31,11 @@ pub const MANTISSA_DIGITS: u32 = 53;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const DIGITS: u32 = 15;\n \n-/// Difference between `1.0` and the next largest representable number.\n+/// [Machine epsilon] value for `f64`.\n+///\n+/// This is the difference between `1.0` and the next largest representable number.\n+///\n+/// [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n "}, {"sha": "39315d8f0c8f8b5cac52b0a64d5d6f9bf20b8b68", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -239,8 +239,9 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     }\n }\n \n-/// Replaces the value at `dest` with `src`, returning the old\n-/// value, without dropping either.\n+/// Moves `src` into the pointed `dest`, returning the previous `dest` value.\n+///\n+/// Neither value is dropped.\n ///\n /// # Safety\n ///"}, {"sha": "43236c3310411364540446f64468278b1c15997c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -1977,35 +1977,63 @@ fn slice_index_overflow_fail() -> ! {\n     panic!(\"attempted to index slice up to maximum usize\");\n }\n \n+mod private_slice_index {\n+    use super::ops;\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    pub trait Sealed {}\n+\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for usize {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::Range<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeTo<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFrom<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeFull {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeInclusive<usize> {}\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n+    impl Sealed for ops::RangeToInclusive<usize> {}\n+}\n+\n /// A helper trait used for indexing operations.\n-#[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n+#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n #[rustc_on_unimplemented = \"slice indices are of type `usize` or ranges of `usize`\"]\n-pub trait SliceIndex<T: ?Sized> {\n+pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n     /// The output type returned by methods.\n+    #[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]\n     type Output: ?Sized;\n \n     /// Returns a shared reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get(self, slice: &T) -> Option<&Self::Output>;\n \n     /// Returns a mutable reference to the output at this location, if in\n     /// bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n \n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n+    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n "}, {"sha": "563eea0066d59abdb10f5fdcd1bbe72c31a62c24", "filename": "src/libcore/time.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -268,6 +268,57 @@ impl Duration {\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n \n+    /// Returns the total number of milliseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_millis(), 5730);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_millis(&self) -> u128 {\n+        self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n+    }\n+\n+    /// Returns the total number of microseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_micros(), 5730023);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_micros(&self) -> u128 {\n+        self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n+    }\n+\n+    /// Returns the total number of nanoseconds contained by this `Duration`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(duration_as_u128)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::new(5, 730023852);\n+    /// assert_eq!(duration.as_nanos(), 5730023852);\n+    /// ```\n+    #[unstable(feature = \"duration_as_u128\", issue = \"50202\")]\n+    #[inline]\n+    pub fn as_nanos(&self) -> u128 {\n+        self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128\n+    }\n+\n     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred.\n     ///"}, {"sha": "82f351782bbcdd71a91f981399fd905bfecf6e91", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -146,7 +146,7 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n         // was not used). On other paths, it is not assigned,\n         // and hence if those paths *could* reach the code that\n         // comes after the match, this fn would not compile.\n-        let convert_to_ambigious;\n+        let convert_to_ambiguous;\n \n         match self {\n             None => {\n@@ -169,10 +169,10 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n                 // clauses are the safer choice. See the comment on\n                 // `select::SelectionCandidate` and #21974 for more details.\n                 match (current, candidate) {\n-                    (ParamEnv(..), ParamEnv(..)) => convert_to_ambigious = (),\n+                    (ParamEnv(..), ParamEnv(..)) => convert_to_ambiguous = (),\n                     (ParamEnv(..), _) => return false,\n                     (_, ParamEnv(..)) => { unreachable!(); }\n-                    (_, _) => convert_to_ambigious = (),\n+                    (_, _) => convert_to_ambiguous = (),\n                 }\n             }\n \n@@ -183,7 +183,7 @@ impl<'tcx> ProjectionTyCandidateSet<'tcx> {\n \n         // We only ever get here when we moved from a single candidate\n         // to ambiguous.\n-        let () = convert_to_ambigious;\n+        let () = convert_to_ambiguous;\n         *self = Ambiguous;\n         false\n     }"}, {"sha": "f08b95f59fa3da963a522eb4855047828a906fad", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -33,7 +33,7 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// normalized. If you don't care about regions, you should prefer\n     /// `normalize_erasing_regions`, which is more efficient.\n     ///\n-    /// If the normalization succeeds and is unambigious, returns back\n+    /// If the normalization succeeds and is unambiguous, returns back\n     /// the normalized value along with various outlives relations (in\n     /// the form of obligations that must be discharged).\n     ///"}, {"sha": "d46f96844117212cb2bd055e25f57dd14a335733", "filename": "src/test/rustdoc/rustc-macro-crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3515dab431702f3a926f61f52cd0743d95e4fd3f/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs?ref=3515dab431702f3a926f61f52cd0743d95e4fd3f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // no-prefer-dynamic\n+// ignore-stage1\n \n #![crate_type = \"proc-macro\"]\n "}]}