{"sha": "514b3877956dc594823106b66c164f8cdbc8b3da", "node_id": "C_kwDOAAsO6NoAKDUxNGIzODc3OTU2ZGM1OTQ4MjMxMDZiNjZjMTY0ZjhjZGJjOGIzZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T21:01:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-22T21:01:59Z"}, "message": "Auto merge of #90007 - xfix:inline-cstr-from-str, r=kennytm\n\nInline CStr::from_ptr\n\nInlining this function is valuable, as it allows LLVM to apply `strlen`-specific optimizations without having to enable LTO.\n\nFor instance, the following function:\n\n```rust\npub fn f(p: *const c_char) -> Option<u8> {\n    unsafe { CStr::from_ptr(p) }.to_bytes().get(0).copied()\n}\n```\n\nLooks like this if `CStr::from_ptr` is allowed to be inlined.\n\n```asm\nbefore:\n        push    rax\n        call    qword ptr [rip + std::ffi::c_str::CStr::from_ptr@GOTPCREL]\n        mov     rcx, rax\n        cmp     rdx, 1\n        sete    dl\n        test    rax, rax\n        sete    al\n        or      al, dl\n        jne     .LBB1_2\n        mov     dl, byte ptr [rcx]\n.LBB1_2:\n        xor     al, 1\n        pop     rcx\n        ret\n\nafter:\n        mov     dl, byte ptr [rdi]\n        test    dl, dl\n        setne   al\n        ret\n```\n\nNote that optimization turned this from O(N) to O(1) in terms of performance, as LLVM knows that it doesn't really need to call `strlen` to determine whether a string is empty or not.", "tree": {"sha": "935039e73664f391fb4ccc64ab18240da3666d7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935039e73664f391fb4ccc64ab18240da3666d7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514b3877956dc594823106b66c164f8cdbc8b3da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514b3877956dc594823106b66c164f8cdbc8b3da", "html_url": "https://github.com/rust-lang/rust/commit/514b3877956dc594823106b66c164f8cdbc8b3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514b3877956dc594823106b66c164f8cdbc8b3da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01198792a608b05e624b0127e76dd0753057016c", "url": "https://api.github.com/repos/rust-lang/rust/commits/01198792a608b05e624b0127e76dd0753057016c", "html_url": "https://github.com/rust-lang/rust/commit/01198792a608b05e624b0127e76dd0753057016c"}, {"sha": "86c309c27f4632c19a518d6555add44145c2ddac", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c309c27f4632c19a518d6555add44145c2ddac", "html_url": "https://github.com/rust-lang/rust/commit/86c309c27f4632c19a518d6555add44145c2ddac"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "3cb3f480de31d44df06c63fb982519e141753498", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/514b3877956dc594823106b66c164f8cdbc8b3da/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514b3877956dc594823106b66c164f8cdbc8b3da/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=514b3877956dc594823106b66c164f8cdbc8b3da", "patch": "@@ -1171,6 +1171,7 @@ impl CStr {\n     /// }\n     /// # }\n     /// ```\n+    #[inline]\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn from_ptr<'a>(ptr: *const c_char) -> &'a CStr {"}]}