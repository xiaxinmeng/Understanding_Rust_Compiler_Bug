{"sha": "ec761903ec37df5fe6976be1e25079d8f8cbb494", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzYxOTAzZWMzN2RmNWZlNjk3NmJlMWUyNTA3OWQ4ZjhjYmI0OTQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-03-05T22:29:05Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-03-06T13:34:46Z"}, "message": "Remove nll-dump-cause flag and always track causes", "tree": {"sha": "65305e6b9448ea8e5fb20ca31ce8acdfd860160f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65305e6b9448ea8e5fb20ca31ce8acdfd860160f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec761903ec37df5fe6976be1e25079d8f8cbb494", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAlqemPYACgkQiMlBzaHU\nZDJs8xAApC6hBy4JJVTdgGAL7olwjIYyN1TnrLYktvKgULKOVfP+qwQ1yT2PdyKc\ndZvXRyV9sq7jRR1ciaGuvD70B1d3qcWp4ZPvvzeCzpdGUXrWp2NlFZGuWGyPtaKZ\n3khR2gqKMqBWTj0VIYu3WQwDXZKYJuXKcYB7xyvxm6JKAaBXgRWPjjeUzE/eKcgu\n+r4RiYjoPw1o7VWUXx5zx7Uz7OBsu3T0Z0JOYZJdiz2LPV7tEUqhuYJPMMY2swcb\nIkAVmPXrk1NOnwXWlmPrwKrH2DuYLezrO0/KigCJWblHddNn8djveBzQf0ySipmX\ndc2MCI83bt2/2LxY7pyF/heFyMydBE8W4wGapT3UApnr787kp5lpR8bA5pKgTYFp\nYrJvn7xmPF0RpX9aajxq8LvaNBt89hHPH3Dk9Uk3LBswTirs9r4oRjbUSqp/AI84\nl8YMv6AqKGQnG1yX+oRu+02TH10me+La8DQesEdkYbZNWm/Wj15YR8vxI4C2SHiw\nwSG6uaR+Fe9M9O5hsXv+Qf3LyTGN22dJEAuSMvk1dVdCQDAzZweFyy7EtY5ha88G\n5T7ESOGCzC3HxFhmvmap6xv68kjCUfLJXEAnbbjOphyaC3WzgJU0EvW3GK+5qzQv\nEcb6/tzsd4C+r+xw1NdW10QbUT1ws2hx0lP74DgVD2h7b2p/uPA=\n=C2iu\n-----END PGP SIGNATURE-----", "payload": "tree 65305e6b9448ea8e5fb20ca31ce8acdfd860160f\nparent 6f2100b92cb14fbea2102701af6a3ac5814bd06c\nauthor Santiago Pastorino <spastorino@gmail.com> 1520288945 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1520343286 -0300\n\nRemove nll-dump-cause flag and always track causes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec761903ec37df5fe6976be1e25079d8f8cbb494", "html_url": "https://github.com/rust-lang/rust/commit/ec761903ec37df5fe6976be1e25079d8f8cbb494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec761903ec37df5fe6976be1e25079d8f8cbb494/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2100b92cb14fbea2102701af6a3ac5814bd06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2100b92cb14fbea2102701af6a3ac5814bd06c", "html_url": "https://github.com/rust-lang/rust/commit/6f2100b92cb14fbea2102701af6a3ac5814bd06c"}], "stats": {"total": 101, "additions": 46, "deletions": 55}, "files": [{"sha": "194b014c97b21a4e94d0fed250d78d4a108caabb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1312,8 +1312,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"choose which RELRO level to use\"),\n     nll: bool = (false, parse_bool, [UNTRACKED],\n                  \"run the non-lexical lifetimes MIR pass\"),\n-    nll_dump_cause: bool = (false, parse_bool, [UNTRACKED],\n-                 \"dump cause information when reporting errors from NLL\"),\n     trans_time_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"generate a graphical HTML report of time spent in trans and LLVM\"),\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],"}, {"sha": "067e480bd60ede6a7e9615bed07e671a1167a1c3", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -476,13 +476,6 @@ impl Session {\n         *(self.features.borrow_mut()) = Some(features);\n     }\n \n-    /// If true, we should gather causal information during NLL\n-    /// checking. This will eventually be the normal thing, but right\n-    /// now it is too unoptimized.\n-    pub fn nll_dump_cause(&self) -> bool {\n-        self.opts.debugging_opts.nll_dump_cause\n-    }\n-\n     /// Calculates the flavor of LTO to use for this compilation.\n     pub fn lto(&self) -> config::Lto {\n         // If our target has codegen requirements ignore the command line"}, {"sha": "2151592fd663b45474a3337ca2dfeeeb466dd742", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -72,8 +72,6 @@ pub struct RegionInferenceContext<'tcx> {\n     universal_regions: UniversalRegions<'tcx>,\n }\n \n-struct TrackCauses(bool);\n-\n struct RegionDefinition<'tcx> {\n     /// Why we created this variable. Mostly these will be\n     /// `RegionVariableOrigin::NLL`, but some variables get created\n@@ -250,15 +248,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .map(|origin| RegionDefinition::new(origin))\n             .collect();\n \n-        let nll_dump_cause = ty::tls::with(|tcx| tcx.sess.nll_dump_cause());\n-\n         let mut result = Self {\n             definitions,\n             elements: elements.clone(),\n             liveness_constraints: RegionValues::new(\n                 elements,\n                 num_region_variables,\n-                TrackCauses(nll_dump_cause),\n             ),\n             inferred_values: None,\n             constraints: Vec::new(),"}, {"sha": "74ee04e0fb15e79f977c05104e8f070df7bd9e94", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{BasicBlock, Location, Mir};\n use rustc::ty::RegionVid;\n use syntax::codemap::Span;\n \n-use super::{Cause, CauseExt, TrackCauses};\n+use super::{Cause, CauseExt};\n \n /// Maps between the various kinds of elements of a region value to\n /// the internal indices that w use.\n@@ -202,7 +202,6 @@ impl RegionValues {\n     pub(super) fn new(\n         elements: &Rc<RegionValueElements>,\n         num_region_variables: usize,\n-        track_causes: TrackCauses,\n     ) -> Self {\n         assert!(\n             elements.num_universal_regions <= num_region_variables,\n@@ -215,11 +214,7 @@ impl RegionValues {\n                 RegionVid::new(num_region_variables),\n                 RegionElementIndex::new(elements.num_elements()),\n             ),\n-            causes: if track_causes.0 {\n-                Some(CauseMap::default())\n-            } else {\n-                None\n-            },\n+            causes: Some(CauseMap::default()),\n         }\n     }\n "}, {"sha": "bec91f7f70dee9d86e5568302f49656e8e054451", "filename": "src/test/ui/issue-45157.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fissue-45157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fissue-45157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45157.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -6,6 +6,9 @@ LL |         let mref = &mut u.s.a;\n ...\n LL |         let nref = &u.z.c;\n    |                    ^^^^^^ immutable borrow occurs here\n+LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n+LL |         println!(\"{} {}\", mref, nref)\n+   |                           ---- borrow later used here\n \n error[E0502]: cannot borrow `u.s.a` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-45157.rs:39:27\n@@ -14,7 +17,9 @@ LL |         let nref = &u.z.c;\n    |                    ------ immutable borrow occurs here\n LL |         //~^ ERROR cannot borrow `u.z.c` as immutable because it is also borrowed as mutable [E0502]\n LL |         println!(\"{} {}\", mref, nref)\n-   |                           ^^^^ mutable borrow occurs here\n+   |                           ^^^^  ---- borrow later used here\n+   |                           |\n+   |                           mutable borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "084d0c159ef3953ec99664a0ec515bbe95c0c4a1", "filename": "src/test/ui/nll/borrowed-local-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Znll-dump-cause\n-\n #![feature(nll)]\n \n fn gimme(x: &(u32,)) -> &u32 {"}, {"sha": "24964f651f79d47e51d352d309e3cc3e7557d890", "filename": "src/test/ui/nll/borrowed-local-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-local-error.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/borrowed-local-error.rs:22:9\n+  --> $DIR/borrowed-local-error.rs:20:9\n    |\n LL |       let x = gimme({\n    |  _____________-"}, {"sha": "a80bc686e34aa80a8668164e479a04b007e8d121", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -10,6 +10,8 @@ LL | |         //~^ cannot use `e` because it was mutably borrowed [E0503]\n LL | |         Xyz::B => println!(\"b\"),\n LL | |     };\n    | |_____^ use of borrowed `e`\n+LL |       *g = Xyz::B;\n+   |       ----------- borrow later used here\n \n error[E0503]: cannot use `e` because it was mutably borrowed\n   --> $DIR/borrowed-match-issue-45045.rs:25:9\n@@ -19,6 +21,9 @@ LL |     let f = &mut e;\n ...\n LL |         Xyz::A => println!(\"a\"),\n    |         ^^^^^^ use of borrowed `e`\n+...\n+LL |     *g = Xyz::B;\n+   |     ----------- borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "675f85ecb4dd2ed78741d6ec92e96e94eb61fab3", "filename": "src/test/ui/nll/borrowed-referent-issue-38899.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-referent-issue-38899.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -6,6 +6,9 @@ LL |     let x = &mut block;\n LL |     println!(\"{}\", x.current);\n LL |     let p: &'a u8 = &*block.current;\n    |                     ^^^^^^^^^^^^^^^ immutable borrow occurs here\n+LL |     //~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+LL |     drop(x);\n+   |          - borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "7aad7205a52a192876ab4ab809d00aa6e8cd30c4", "filename": "src/test/ui/nll/borrowed-temporary-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Znll-dump-cause\n-\n #![feature(nll)]\n \n fn gimme(x: &(u32,)) -> &u32 {"}, {"sha": "575d9b5a62d7135f4a70af18c27f97c7d9ce4715", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowed-temporary-error.rs:22:10\n+  --> $DIR/borrowed-temporary-error.rs:20:10\n    |\n LL |         &(v,)\n    |          ^^^^ temporary value does not live long enough"}, {"sha": "9a59cebfccbe2089e47ce430f22ed9fe26f8326f", "filename": "src/test/ui/nll/borrowed-universal-error-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Znll-dump-cause\n-\n #![feature(nll)]\n #![allow(warnings)]\n "}, {"sha": "2e4d7cc8f818d02ec6c53570b0e3c6f05ab4711a", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/borrowed-universal-error-2.rs:18:5\n+  --> $DIR/borrowed-universal-error-2.rs:16:5\n    |\n LL |     &v\n    |     ^^ borrowed value does not live long enough\n LL |     //~^ ERROR `v` does not live long enough [E0597]\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 16:1...\n-  --> $DIR/borrowed-universal-error-2.rs:16:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:1...\n+  --> $DIR/borrowed-universal-error-2.rs:14:1\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9482b9b140002543fc9bd812d0271a4f223f2b30", "filename": "src/test/ui/nll/borrowed-universal-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Znll-dump-cause\n-\n #![feature(nll)]\n #![allow(warnings)]\n "}, {"sha": "3e9a3ceb1dba41bf7db1e38c02d587360defd225", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,14 +1,14 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/borrowed-universal-error.rs:22:12\n+  --> $DIR/borrowed-universal-error.rs:20:12\n    |\n LL |     gimme(&(v,))\n    |            ^^^^ temporary value does not live long enough\n LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 20:1...\n-  --> $DIR/borrowed-universal-error.rs:20:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:1...\n+  --> $DIR/borrowed-universal-error.rs:18:1\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f49e06bd9e8c8c340228af0a2799d5c8c27f5445", "filename": "src/test/ui/nll/capture-ref-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-Znll-dump-cause\n-\n // Test that a structure which tries to store a pointer to `y` into\n // `p` (indirectly) fails to compile.\n "}, {"sha": "0fb718075849c4d8c419fb1f998431bde3e527ec", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `y` does not live long enough\n-  --> $DIR/capture-ref-in-struct.rs:33:16\n+  --> $DIR/capture-ref-in-struct.rs:31:16\n    |\n LL |             y: &y,\n    |                ^^ borrowed value does not live long enough"}, {"sha": "7e918c6431de4450e874558b91bee2001218119e", "filename": "src/test/ui/nll/closure-requirements/escape-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -22,7 +22,7 @@\n // basically checking that the MIR type checker correctly enforces the\n // closure signature.\n \n-// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "05700ae00ad4f72900ad96f2cdec06474a528f22", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -15,7 +15,7 @@\n //\n // except that the closure does so via a second closure.\n \n-// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "93d8bfafcbaa4ffed82d2b0be51f828a7d2b679b", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -19,7 +19,7 @@\n // `'b`.  This relationship is propagated to the closure creator,\n // which reports an error.\n \n-// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause -Zverbose\n+// compile-flags:-Znll -Zborrowck=mir -Zverbose\n \n #![feature(rustc_attrs)]\n "}, {"sha": "3d9a5456cbb3666972e79e19cbda3513f513b9ec", "filename": "src/test/ui/nll/drop-no-may-dangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdrop-no-may-dangle.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -13,7 +13,7 @@\n // because of destructor. (Note that the stderr also identifies this\n // destructor in the error message.)\n \n-// compile-flags:-Znll -Zborrowck=mir -Znll-dump-cause\n+// compile-flags:-Znll -Zborrowck=mir\n \n #![allow(warnings)]\n #![feature(dropck_eyepatch)]"}, {"sha": "e5944e75e424177fad5749b7c110b00e7930d19b", "filename": "src/test/ui/nll/get_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -13,7 +13,7 @@\n // a variety of errors from the older, AST-based machinery (notably\n // borrowck), and then we get the NLL error at the end.\n \n-// compile-flags:-Znll -Zborrowck=compare -Znll-dump-cause\n+// compile-flags:-Znll -Zborrowck=compare\n \n struct Map {\n }"}, {"sha": "82c5e8dafdcedf5488e6dcadf2d2e93c88120b20", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -6,6 +6,8 @@ LL |     let t = &mut *s; // this borrow should last for the entire function\n LL |     let x = &t.0;\n LL |     *s = (2,); //~ ERROR cannot assign to `*s`\n    |     ^^^^^^^^^ assignment to borrowed `*s` occurs here\n+LL |     *x\n+   |     -- borrow later used here\n \n error[E0621]: explicit lifetime required in the type of `s`\n   --> $DIR/guarantor-issue-46974.rs:25:5"}, {"sha": "d4df2a01c8143e97a6c4a30df74c8d30be74e158", "filename": "src/test/ui/nll/maybe-initialized-drop-implicit-fragment-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-implicit-fragment-drop.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Z nll -Znll-dump-cause\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll\n \n \n #![allow(warnings)]"}, {"sha": "2eb90dca7026ec2182d728b9d2c6e8ed7c2f0970", "filename": "src/test/ui/nll/maybe-initialized-drop-with-fragment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-fragment.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll\n \n #![allow(warnings)]\n "}, {"sha": "f639d8f243f1423cfeb124a4bdd3267cd6f49b50", "filename": "src/test/ui/nll/maybe-initialized-drop-with-uninitialized-fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop-with-uninitialized-fragments.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll\n \n #![allow(warnings)]\n "}, {"sha": "c2cc479d28e3e78a12a69a2c098ad34449d71378", "filename": "src/test/ui/nll/maybe-initialized-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmaybe-initialized-drop.rs?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll -Znll-dump-cause\n+//compile-flags: -Z emit-end-regions -Zborrowck=mir -Znll\n \n #![allow(warnings)]\n "}, {"sha": "2184beac99b668885b01bafff270c2b08bde8807", "filename": "src/test/ui/nll/return-ref-mut-issue-46557.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec761903ec37df5fe6976be1e25079d8f8cbb494/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn-ref-mut-issue-46557.stderr?ref=ec761903ec37df5fe6976be1e25079d8f8cbb494", "patch": "@@ -1,11 +1,16 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/return-ref-mut-issue-46557.rs:17:21\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR borrowed value does not live long enough [E0597]\n-   |                     ^^^^^^^ temporary value does not live long enough\n-LL |     x\n-LL | }\n-   | - temporary value only lives until here\n+LL |   fn gimme_static_mut() -> &'static mut u32 {\n+   |  ___________________________________________-\n+LL | |     let ref mut x = 1234543; //~ ERROR borrowed value does not live long enough [E0597]\n+   | |                     ^^^^^^^ temporary value does not live long enough\n+LL | |     x\n+LL | | }\n+   | | -\n+   | | |\n+   | |_temporary value only lives until here\n+   |   borrow later used here\n \n error: aborting due to previous error\n "}]}