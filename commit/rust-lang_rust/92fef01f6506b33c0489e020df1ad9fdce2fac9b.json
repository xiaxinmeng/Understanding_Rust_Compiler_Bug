{"sha": "92fef01f6506b33c0489e020df1ad9fdce2fac9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZmVmMDFmNjUwNmIzM2MwNDg5ZTAyMGRmMWFkOWZkY2UyZmFjOWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-20T21:24:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T21:24:54Z"}, "message": "Merge #4964\n\n4964: Move ReqQueue to lsp-server r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e23464d24771709299c35062c4c22527aaa49487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23464d24771709299c35062c4c22527aaa49487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92fef01f6506b33c0489e020df1ad9fdce2fac9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7n6nCRBK7hj4Ov3rIwAAdHIIAKqL8oS/rEUObDlmBS3iThr7\na1lmd7dyH1pxZ7pWbGP5JkkYg+59upGe0gvGK/A3k234UPorENR11tUBGJ6RQPO2\nzD4cj/V1MDUcknVz62UO1ihJJjyz6oEEhQ7Df6ZwO0WtVhPs1IevWKp4N3QMh3c8\n8jFESd1eKUk8zBR9kqEhcGs2uBsc7pBFkizGgd4Tfl1s+uQMJsGSm+STaYk/kCly\nRjWG4hBCeGrPbid54zKIlKBXkDUITjBL9iFu0uOZkcbL/4zHXmAXtv60ciWNdCyd\n8GURSACljt77Z/GrBhjIKWK9Qq+/X3gxtBc665LdQ5YzzIE3kGEIF4J+IvaBJ74=\n=31Iy\n-----END PGP SIGNATURE-----\n", "payload": "tree e23464d24771709299c35062c4c22527aaa49487\nparent b575b0244982da29159d341412945b92dd57f5df\nparent f3cf85ab4857ef06dee74f51fd5f92d5801b8f93\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592688294 +0000\ncommitter GitHub <noreply@github.com> 1592688294 +0000\n\nMerge #4964\n\n4964: Move ReqQueue to lsp-server r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92fef01f6506b33c0489e020df1ad9fdce2fac9b", "html_url": "https://github.com/rust-lang/rust/commit/92fef01f6506b33c0489e020df1ad9fdce2fac9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92fef01f6506b33c0489e020df1ad9fdce2fac9b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b575b0244982da29159d341412945b92dd57f5df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b575b0244982da29159d341412945b92dd57f5df", "html_url": "https://github.com/rust-lang/rust/commit/b575b0244982da29159d341412945b92dd57f5df"}, {"sha": "f3cf85ab4857ef06dee74f51fd5f92d5801b8f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3cf85ab4857ef06dee74f51fd5f92d5801b8f93", "html_url": "https://github.com/rust-lang/rust/commit/f3cf85ab4857ef06dee74f51fd5f92d5801b8f93"}], "stats": {"total": 301, "additions": 109, "deletions": 192}, "files": [{"sha": "e5cf487a53b536309f9203c854f31c6a06c72d85", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -640,9 +640,9 @@ dependencies = [\n \n [[package]]\n name = \"lsp-server\"\n-version = \"0.3.2\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dccec31bfd027ac0dd288a78e19005fd89624d9099456e284b5241316a6c3072\"\n+checksum = \"53b4ace8ebe5d2aff3687ce0ed507f6020d6a47a7de2b0d3d664ea237ffb0c62\"\n dependencies = [\n  \"crossbeam-channel\",\n  \"log\","}, {"sha": "2b46e8905bafdf070438d5ffe1040326296fa468", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -32,7 +32,7 @@ threadpool = \"1.7.1\"\n \n stdx = { path = \"../stdx\" }\n \n-lsp-server = \"0.3.2\"\n+lsp-server = \"0.3.3\"\n ra_flycheck = { path = \"../ra_flycheck\" }\n ra_ide = { path = \"../ra_ide\" }\n ra_prof = { path = \"../ra_prof\" }"}, {"sha": "d04ef4c6133157fc39eb8ba435edfc387ce64dc0", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -20,7 +20,7 @@ use stdx::format_to;\n use crate::{\n     config::{Config, FilesWatcher},\n     diagnostics::{CheckFixes, DiagnosticCollection},\n-    main_loop::req_queue::{CompletedInRequest, LatestRequests},\n+    main_loop::request_metrics::{LatestRequests, RequestMetrics},\n     to_proto::url_from_abs_path,\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n@@ -55,19 +55,19 @@ pub struct GlobalState {\n     pub analysis_host: AnalysisHost,\n     pub vfs: Arc<RwLock<Vfs>>,\n     pub task_receiver: Receiver<VfsTask>,\n-    pub latest_requests: Arc<RwLock<LatestRequests>>,\n     pub flycheck: Option<Flycheck>,\n     pub diagnostics: DiagnosticCollection,\n     pub proc_macro_client: ProcMacroClient,\n+    pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n }\n \n /// An immutable snapshot of the world's state at a point in time.\n pub struct GlobalStateSnapshot {\n     pub config: Config,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n-    pub latest_requests: Arc<RwLock<LatestRequests>>,\n     pub check_fixes: CheckFixes,\n+    pub(crate) latest_requests: Arc<RwLock<LatestRequests>>,\n     vfs: Arc<RwLock<Vfs>>,\n }\n \n@@ -236,7 +236,7 @@ impl GlobalState {\n         self.analysis_host.collect_garbage()\n     }\n \n-    pub(crate) fn complete_request(&mut self, request: CompletedInRequest) {\n+    pub(crate) fn complete_request(&mut self, request: RequestMetrics) {\n         self.latest_requests.write().record(request)\n     }\n }"}, {"sha": "64e70955f3ac2d55304ce5247b0b8e12d1db296b", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -32,7 +32,7 @@ mod semantic_tokens;\n \n use serde::de::DeserializeOwned;\n \n-pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n+pub type Result<T, E = Box<dyn std::error::Error + Send + Sync>> = std::result::Result<T, E>;\n pub use crate::{\n     caps::server_capabilities,\n     main_loop::LspError,"}, {"sha": "674b1323bcb7b336ff6a96dfc69fd335d4bfa9fc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 64, "deletions": 61, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -3,7 +3,7 @@\n \n mod handlers;\n mod subscriptions;\n-pub(crate) mod req_queue;\n+pub(crate) mod request_metrics;\n \n use std::{\n     borrow::Cow,\n@@ -17,11 +17,13 @@ use std::{\n };\n \n use crossbeam_channel::{never, select, unbounded, RecvError, Sender};\n-use lsp_server::{Connection, ErrorCode, Message, Notification, Request, RequestId, Response};\n+use lsp_server::{\n+    Connection, ErrorCode, Message, Notification, ReqQueue, Request, RequestId, Response,\n+};\n use lsp_types::{\n-    DidChangeTextDocumentParams, NumberOrString, TextDocumentContentChangeEvent, WorkDoneProgress,\n-    WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n-    WorkDoneProgressReport,\n+    request::Request as _, DidChangeTextDocumentParams, NumberOrString,\n+    TextDocumentContentChangeEvent, WorkDoneProgress, WorkDoneProgressBegin,\n+    WorkDoneProgressCreateParams, WorkDoneProgressEnd, WorkDoneProgressReport,\n };\n use ra_flycheck::{CheckTask, Status};\n use ra_ide::{Canceled, FileId, LineIndex};\n@@ -37,10 +39,9 @@ use crate::{\n     from_proto,\n     global_state::{file_id_to_url, GlobalState, GlobalStateSnapshot},\n     lsp_ext,\n-    main_loop::subscriptions::Subscriptions,\n+    main_loop::{request_metrics::RequestMetrics, subscriptions::Subscriptions},\n     Result,\n };\n-use req_queue::ReqQueue;\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -150,10 +151,11 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                 register_options: Some(serde_json::to_value(registration_options).unwrap()),\n             };\n             let params = lsp_types::RegistrationParams { registrations: vec![registration] };\n-            let request = loop_state\n-                .req_queue\n-                .outgoing\n-                .register::<lsp_types::request::RegisterCapability>(params, |_, _| ());\n+            let request = loop_state.req_queue.outgoing.register(\n+                lsp_types::request::RegisterCapability::METHOD.to_string(),\n+                params,\n+                DO_NOTHING,\n+            );\n             connection.sender.send(request.into()).unwrap();\n         }\n \n@@ -261,9 +263,13 @@ impl fmt::Debug for Event {\n     }\n }\n \n+type ReqHandler = fn(&mut GlobalState, Response);\n+const DO_NOTHING: ReqHandler = |_, _| ();\n+type Incoming = lsp_server::Incoming<(&'static str, Instant)>;\n+\n #[derive(Default)]\n struct LoopState {\n-    req_queue: ReqQueue<fn(&mut GlobalState, lsp_server::Response)>,\n+    req_queue: ReqQueue<(&'static str, Instant), ReqHandler>,\n     subscriptions: Subscriptions,\n     workspace_loaded: bool,\n     roots_progress_reported: Option<usize>,\n@@ -367,14 +373,19 @@ fn loop_turn(\n fn on_task(\n     task: Task,\n     msg_sender: &Sender<Message>,\n-    incoming_requests: &mut req_queue::Incoming,\n+    incoming_requests: &mut Incoming,\n     state: &mut GlobalState,\n ) {\n     match task {\n         Task::Respond(response) => {\n-            if let Some(completed) = incoming_requests.complete(response.id.clone()) {\n-                log::info!(\"handled req#{} in {:?}\", completed.id, completed.duration);\n-                state.complete_request(completed);\n+            if let Some((method, start)) = incoming_requests.complete(response.id.clone()) {\n+                let duration = start.elapsed();\n+                log::info!(\"handled req#{} in {:?}\", response.id, duration);\n+                state.complete_request(RequestMetrics {\n+                    id: response.id.clone(),\n+                    method: method.to_string(),\n+                    duration,\n+                });\n                 msg_sender.send(response.into()).unwrap();\n             }\n         }\n@@ -387,7 +398,7 @@ fn on_task(\n \n fn on_request(\n     global_state: &mut GlobalState,\n-    incoming_requests: &mut req_queue::Incoming,\n+    incoming_requests: &mut Incoming,\n     pool: &ThreadPool,\n     task_sender: &Sender<Task>,\n     msg_sender: &Sender<Message>,\n@@ -527,37 +538,35 @@ fn on_notification(\n         Ok(_) => {\n             // As stated in https://github.com/microsoft/language-server-protocol/issues/676,\n             // this notification's parameters should be ignored and the actual config queried separately.\n-            let request = loop_state\n-                .req_queue\n-                .outgoing\n-                .register::<lsp_types::request::WorkspaceConfiguration>(\n-                    lsp_types::ConfigurationParams {\n-                        items: vec![lsp_types::ConfigurationItem {\n-                            scope_uri: None,\n-                            section: Some(\"rust-analyzer\".to_string()),\n-                        }],\n-                    },\n-                    |global_state, resp| {\n-                        log::debug!(\"config update response: '{:?}\", resp);\n-                        let Response { error, result, .. } = resp;\n-\n-                        match (error, result) {\n-                            (Some(err), _) => {\n-                                log::error!(\"failed to fetch the server settings: {:?}\", err)\n-                            }\n-                            (None, Some(configs)) => {\n-                                if let Some(new_config) = configs.get(0) {\n-                                    let mut config = global_state.config.clone();\n-                                    config.update(&new_config);\n-                                    global_state.update_configuration(config);\n-                                }\n+            let request = loop_state.req_queue.outgoing.register(\n+                lsp_types::request::WorkspaceConfiguration::METHOD.to_string(),\n+                lsp_types::ConfigurationParams {\n+                    items: vec![lsp_types::ConfigurationItem {\n+                        scope_uri: None,\n+                        section: Some(\"rust-analyzer\".to_string()),\n+                    }],\n+                },\n+                |global_state, resp| {\n+                    log::debug!(\"config update response: '{:?}\", resp);\n+                    let Response { error, result, .. } = resp;\n+\n+                    match (error, result) {\n+                        (Some(err), _) => {\n+                            log::error!(\"failed to fetch the server settings: {:?}\", err)\n+                        }\n+                        (None, Some(configs)) => {\n+                            if let Some(new_config) = configs.get(0) {\n+                                let mut config = global_state.config.clone();\n+                                config.update(&new_config);\n+                                global_state.update_configuration(config);\n                             }\n-                            (None, None) => log::error!(\n-                                \"received empty server settings response from the client\"\n-                            ),\n                         }\n-                    },\n-                );\n+                        (None, None) => {\n+                            log::error!(\"received empty server settings response from the client\")\n+                        }\n+                    }\n+                },\n+            );\n             msg_sender.send(request.into())?;\n \n             return Ok(());\n@@ -727,15 +736,13 @@ fn send_startup_progress(sender: &Sender<Message>, loop_state: &mut LoopState) {\n \n     match (prev, loop_state.workspace_loaded) {\n         (None, false) => {\n-            let request = loop_state\n-                .req_queue\n-                .outgoing\n-                .register::<lsp_types::request::WorkDoneProgressCreate>(\n-                    WorkDoneProgressCreateParams {\n-                        token: lsp_types::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n-                    },\n-                    |_, _| (),\n-                );\n+            let request = loop_state.req_queue.outgoing.register(\n+                lsp_types::request::WorkDoneProgressCreate::METHOD.to_string(),\n+                WorkDoneProgressCreateParams {\n+                    token: lsp_types::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+                },\n+                DO_NOTHING,\n+            );\n             sender.send(request.into()).unwrap();\n             send_startup_progress_notif(\n                 sender,\n@@ -778,7 +785,7 @@ struct PoolDispatcher<'a> {\n     req: Option<Request>,\n     pool: &'a ThreadPool,\n     global_state: &'a mut GlobalState,\n-    incoming_requests: &'a mut req_queue::Incoming,\n+    incoming_requests: &'a mut Incoming,\n     msg_sender: &'a Sender<Message>,\n     task_sender: &'a Sender<Task>,\n     request_received: Instant,\n@@ -854,11 +861,7 @@ impl<'a> PoolDispatcher<'a> {\n                 return None;\n             }\n         };\n-        self.incoming_requests.register(req_queue::PendingInRequest {\n-            id: id.clone(),\n-            method: R::METHOD.to_string(),\n-            received: self.request_received,\n-        });\n+        self.incoming_requests.register(id.clone(), (R::METHOD, self.request_received));\n         Some((id, params))\n     }\n "}, {"sha": "5cf6d916b7738d8e2fc7ad801c837618a47f482e", "filename": "crates/rust-analyzer/src/main_loop/req_queue.rs", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/b575b0244982da29159d341412945b92dd57f5df/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Freq_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b575b0244982da29159d341412945b92dd57f5df/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Freq_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Freq_queue.rs?ref=b575b0244982da29159d341412945b92dd57f5df", "patch": "@@ -1,123 +0,0 @@\n-//! Manages the set of in-flight requests in both directions.\n-use std::time::{Duration, Instant};\n-\n-use lsp_server::RequestId;\n-use rustc_hash::FxHashMap;\n-use serde::Serialize;\n-\n-#[derive(Debug)]\n-pub(crate) struct ReqQueue<H> {\n-    pub(crate) incoming: Incoming,\n-    pub(crate) outgoing: Outgoing<H>,\n-}\n-\n-impl<H> Default for ReqQueue<H> {\n-    fn default() -> Self {\n-        ReqQueue { incoming: Incoming::default(), outgoing: Outgoing::default() }\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub(crate) struct Outgoing<H> {\n-    next: u64,\n-    pending: FxHashMap<RequestId, H>,\n-}\n-\n-impl<H> Default for Outgoing<H> {\n-    fn default() -> Self {\n-        Outgoing { next: 0, pending: FxHashMap::default() }\n-    }\n-}\n-\n-impl<H> Outgoing<H> {\n-    pub(crate) fn register<R>(&mut self, params: R::Params, handler: H) -> lsp_server::Request\n-    where\n-        R: lsp_types::request::Request,\n-        R::Params: Serialize,\n-    {\n-        let id = RequestId::from(self.next);\n-        self.next += 1;\n-        self.pending.insert(id.clone(), handler);\n-        lsp_server::Request::new(id, R::METHOD.to_string(), params)\n-    }\n-    pub(crate) fn complete(&mut self, id: RequestId) -> H {\n-        self.pending.remove(&id).unwrap()\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub(crate) struct CompletedInRequest {\n-    pub(crate) id: RequestId,\n-    pub(crate) method: String,\n-    pub(crate) duration: Duration,\n-}\n-\n-#[derive(Debug)]\n-pub(crate) struct PendingInRequest {\n-    pub(crate) id: RequestId,\n-    pub(crate) method: String,\n-    pub(crate) received: Instant,\n-}\n-\n-impl From<PendingInRequest> for CompletedInRequest {\n-    fn from(pending: PendingInRequest) -> CompletedInRequest {\n-        CompletedInRequest {\n-            id: pending.id,\n-            method: pending.method,\n-            duration: pending.received.elapsed(),\n-        }\n-    }\n-}\n-\n-#[derive(Debug, Default)]\n-pub(crate) struct Incoming {\n-    pending: FxHashMap<RequestId, PendingInRequest>,\n-}\n-\n-impl Incoming {\n-    pub(crate) fn register(&mut self, request: PendingInRequest) {\n-        let id = request.id.clone();\n-        let prev = self.pending.insert(id.clone(), request);\n-        assert!(prev.is_none(), \"duplicate request with id {}\", id);\n-    }\n-    pub(crate) fn cancel(&mut self, id: RequestId) -> Option<lsp_server::Response> {\n-        if self.pending.remove(&id).is_some() {\n-            Some(lsp_server::Response::new_err(\n-                id,\n-                lsp_server::ErrorCode::RequestCanceled as i32,\n-                \"canceled by client\".to_string(),\n-            ))\n-        } else {\n-            None\n-        }\n-    }\n-    pub(crate) fn complete(&mut self, id: RequestId) -> Option<CompletedInRequest> {\n-        self.pending.remove(&id).map(CompletedInRequest::from)\n-    }\n-}\n-\n-const N_COMPLETED_REQUESTS: usize = 10;\n-\n-#[derive(Debug, Default)]\n-pub struct LatestRequests {\n-    // hand-rolling VecDeque here to print things in a nicer way\n-    buf: [Option<CompletedInRequest>; N_COMPLETED_REQUESTS],\n-    idx: usize,\n-}\n-\n-impl LatestRequests {\n-    pub(crate) fn record(&mut self, request: CompletedInRequest) {\n-        // special case: don't track status request itself\n-        if request.method == \"rust-analyzer/analyzerStatus\" {\n-            return;\n-        }\n-        let idx = self.idx;\n-        self.buf[idx] = Some(request);\n-        self.idx = (idx + 1) % N_COMPLETED_REQUESTS;\n-    }\n-\n-    pub(crate) fn iter(&self) -> impl Iterator<Item = (bool, &CompletedInRequest)> {\n-        let idx = self.idx;\n-        self.buf.iter().enumerate().filter_map(move |(i, req)| Some((i == idx, req.as_ref()?)))\n-    }\n-}"}, {"sha": "b1019e2d6fc5b5de87d53f83451a98b694e283d9", "filename": "crates/rust-analyzer/src/main_loop/request_metrics.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Frequest_metrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92fef01f6506b33c0489e020df1ad9fdce2fac9b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Frequest_metrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Frequest_metrics.rs?ref=92fef01f6506b33c0489e020df1ad9fdce2fac9b", "patch": "@@ -0,0 +1,37 @@\n+//! Records stats about requests\n+use std::time::Duration;\n+\n+use lsp_server::RequestId;\n+\n+#[derive(Debug)]\n+pub(crate) struct RequestMetrics {\n+    pub(crate) id: RequestId,\n+    pub(crate) method: String,\n+    pub(crate) duration: Duration,\n+}\n+\n+const N_COMPLETED_REQUESTS: usize = 10;\n+\n+#[derive(Debug, Default)]\n+pub(crate) struct LatestRequests {\n+    // hand-rolling VecDeque here to print things in a nicer way\n+    buf: [Option<RequestMetrics>; N_COMPLETED_REQUESTS],\n+    idx: usize,\n+}\n+\n+impl LatestRequests {\n+    pub(crate) fn record(&mut self, request: RequestMetrics) {\n+        // special case: don't track status request itself\n+        if request.method == \"rust-analyzer/analyzerStatus\" {\n+            return;\n+        }\n+        let idx = self.idx;\n+        self.buf[idx] = Some(request);\n+        self.idx = (idx + 1) % N_COMPLETED_REQUESTS;\n+    }\n+\n+    pub(crate) fn iter(&self) -> impl Iterator<Item = (bool, &RequestMetrics)> {\n+        let idx = self.idx;\n+        self.buf.iter().enumerate().filter_map(move |(i, req)| Some((i == idx, req.as_ref()?)))\n+    }\n+}"}]}