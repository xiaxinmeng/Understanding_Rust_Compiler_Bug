{"sha": "6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZmRhNjRkMGQyMTA2ZDRhZmE4ZWJiOGUwY2JjNTA0YTYyOTc3YmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:30:15Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-08T01:30:15Z"}, "message": "rollup merge of #20728: huonw/type-param-shadowing\n\nConflicts:\n\tsrc/librustc_typeck/check/wf.rs", "tree": {"sha": "e61bc93460e555f010c88417771ac59e3f1b36e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61bc93460e555f010c88417771ac59e3f1b36e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "html_url": "https://github.com/rust-lang/rust/commit/6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773fdb3dbec7d8d2ace01a0e2025e1592925c285", "url": "https://api.github.com/repos/rust-lang/rust/commits/773fdb3dbec7d8d2ace01a0e2025e1592925c285", "html_url": "https://github.com/rust-lang/rust/commit/773fdb3dbec7d8d2ace01a0e2025e1592925c285"}, {"sha": "92cd8ea96ad2a1da51863b7f089baec41ed10ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/92cd8ea96ad2a1da51863b7f089baec41ed10ce9", "html_url": "https://github.com/rust-lang/rust/commit/92cd8ea96ad2a1da51863b7f089baec41ed10ce9"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "b17ecdaf59c61c20e981227a13c9d1ead7b86fa6", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "patch": "@@ -24,6 +24,7 @@ use syntax::ast;\n use syntax::ast_util::{local_def};\n use syntax::attr;\n use syntax::codemap::Span;\n+use syntax::parse::token;\n use syntax::visit;\n use syntax::visit::Visitor;\n \n@@ -281,12 +282,45 @@ fn reject_non_type_param_bounds<'tcx>(tcx: &ty::ctxt<'tcx>,\n     }\n }\n \n+fn reject_shadowing_type_parameters<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                          span: Span,\n+                                          generics: &ty::Generics<'tcx>) {\n+    let impl_params = generics.types.get_slice(subst::TypeSpace).iter()\n+        .map(|tp| tp.name).collect::<HashSet<_>>();\n+\n+    for method_param in generics.types.get_slice(subst::FnSpace).iter() {\n+        if impl_params.contains(&method_param.name) {\n+            tcx.sess.span_err(\n+                span,\n+                &*format!(\"type parameter `{}` shadows another type parameter of the same name\",\n+                          token::get_name(method_param.name)));\n+        }\n+    }\n+}\n+\n impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     fn visit_item(&mut self, i: &ast::Item) {\n         self.check_item_well_formed(i);\n         visit::walk_item(self, i);\n     }\n \n+    fn visit_fn(&mut self,\n+                fk: visit::FnKind<'v>, fd: &'v ast::FnDecl,\n+                b: &'v ast::Block, span: Span, id: ast::NodeId) {\n+        match fk {\n+            visit::FkFnBlock | visit::FkItemFn(..) => {}\n+            visit::FkMethod(..) => {\n+                match ty::impl_or_trait_item(self.ccx.tcx, local_def(id)) {\n+                    ty::ImplOrTraitItem::MethodTraitItem(ty_method) => {\n+                        reject_shadowing_type_parameters(self.ccx.tcx, span, &ty_method.generics)\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        visit::walk_fn(self, fk, fd, b, span)\n+    }\n+\n     fn visit_trait_item(&mut self, t: &'v ast::TraitItem) {\n         match t {\n             &ast::TraitItem::ProvidedMethod(_) |\n@@ -297,12 +331,18 @@ impl<'ccx, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                         reject_non_type_param_bounds(\n                             self.ccx.tcx,\n                             method.span,\n-                            &ty_method.generics)\n+                            &ty_method.generics);\n+                        reject_shadowing_type_parameters(\n+                            self.ccx.tcx,\n+                            method.span,\n+                            &ty_method.generics);\n                     }\n                     _ => {}\n                 }\n             }\n         }\n+\n+        visit::walk_trait_item(self, t)\n     }\n }\n "}, {"sha": "62acef2ca1cc75476f1cc27a13200f0784988b33", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "patch": "@@ -1396,7 +1396,7 @@ impl<T: Iterator<Item=char>> Parser<T> {\n         self.ch == Some(c)\n     }\n \n-    fn error<T>(&self, reason: ErrorCode) -> Result<T, ParserError> {\n+    fn error<U>(&self, reason: ErrorCode) -> Result<U, ParserError> {\n         Err(SyntaxError(reason, self.line, self.col))\n     }\n "}, {"sha": "c6286bc0a2bb3ab7d03d4cbd41dcca81500b34df", "filename": "src/test/compile-fail/shadowed-type-parameter.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6afda64d0d2106d4afa8ebb8e0cbc504a62977be/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-type-parameter.rs?ref=6afda64d0d2106d4afa8ebb8e0cbc504a62977be", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that shadowed lifetimes generate an error.\n+\n+struct Foo<T>;\n+\n+impl<T> Foo<T> {\n+    fn shadow_in_method<T>(&self) {}\n+    //~^ ERROR type parameter `T` shadows another type parameter\n+\n+    fn not_shadow_in_item<U>(&self) {\n+        struct Bar<T, U>; // not a shadow, separate item\n+        fn foo<T, U>() {} // same\n+    }\n+}\n+\n+trait<T> Bar<T> {\n+    fn shadow_in_required<T>(&self);\n+    //~^ ERROR type parameter `T` shadows another type parameter\n+\n+    fn shadow_in_provided<T>(&self) {}\n+    //~^ ERROR type parameter `T` shadows another type parameter\n+\n+    fn not_shadow_in_required<U>(&self);\n+    fn not_shadow_in_provided<U>(&self) {}\n+}\n+\n+fn main() {}"}]}