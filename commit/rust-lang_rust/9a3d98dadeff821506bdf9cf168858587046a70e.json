{"sha": "9a3d98dadeff821506bdf9cf168858587046a70e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhM2Q5OGRhZGVmZjgyMTUwNmJkZjljZjE2ODg1ODU4NzA0NmE3MGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:29:20Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-04-18T08:29:20Z"}, "message": "Call Termination::report on main result in jit mode", "tree": {"sha": "66c2860b38bb674dfcf5bc936af12c4d6a051fd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c2860b38bb674dfcf5bc936af12c4d6a051fd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3d98dadeff821506bdf9cf168858587046a70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3d98dadeff821506bdf9cf168858587046a70e", "html_url": "https://github.com/rust-lang/rust/commit/9a3d98dadeff821506bdf9cf168858587046a70e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3d98dadeff821506bdf9cf168858587046a70e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3b5e14eca5c942c4b3d867808fa0ec99eae9c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b5e14eca5c942c4b3d867808fa0ec99eae9c03", "html_url": "https://github.com/rust-lang/rust/commit/f3b5e14eca5c942c4b3d867808fa0ec99eae9c03"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "4924c4e8923cc51aad42c38b0c62dba6ae9d63cf", "filename": "src/main_shim.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9a3d98dadeff821506bdf9cf168858587046a70e/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3d98dadeff821506bdf9cf168858587046a70e/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=9a3d98dadeff821506bdf9cf168858587046a70e", "patch": "@@ -1,6 +1,9 @@\n use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_hir::LangItem;\n+use rustc_middle::ty::subst::GenericArg;\n+use rustc_middle::ty::AssocKind;\n use rustc_session::config::EntryFnType;\n+use rustc_span::symbol::Ident;\n \n use crate::prelude::*;\n \n@@ -79,8 +82,38 @@ pub(crate) fn maybe_create_entry_wrapper(\n             let result = if is_main_fn && ignore_lang_start_wrapper {\n                 // regular main fn, but ignoring #[lang = \"start\"] as we are running in the jit\n                 // FIXME set program arguments somehow\n-                bcx.ins().call(main_func_ref, &[]);\n-                bcx.ins().iconst(m.target_config().pointer_type(), 0)\n+                let call_inst = bcx.ins().call(main_func_ref, &[]);\n+                let call_results = bcx.func.dfg.inst_results(call_inst).to_owned();\n+\n+                let termination_trait = tcx.require_lang_item(LangItem::Termination, None);\n+                let report = tcx\n+                    .associated_items(termination_trait)\n+                    .find_by_name_and_kind(\n+                        tcx,\n+                        Ident::from_str(\"report\"),\n+                        AssocKind::Fn,\n+                        termination_trait,\n+                    )\n+                    .unwrap();\n+                let report = Instance::resolve(\n+                    tcx,\n+                    ParamEnv::reveal_all(),\n+                    report.def_id,\n+                    tcx.mk_substs([GenericArg::from(main_ret_ty)].iter()),\n+                )\n+                .unwrap()\n+                .unwrap();\n+\n+                let report_name = tcx.symbol_name(report).name;\n+                let report_sig = get_function_sig(tcx, m.isa().triple(), report);\n+                let report_func_id =\n+                    m.declare_function(report_name, Linkage::Import, &report_sig).unwrap();\n+                let report_func_ref = m.declare_func_in_func(report_func_id, &mut bcx.func);\n+\n+                // FIXME do proper abi handling instead of expecting the pass mode to be identical\n+                // for returns and arguments.\n+                let report_call_inst = bcx.ins().call(report_func_ref, &call_results);\n+                bcx.func.dfg.inst_results(report_call_inst)[0]\n             } else if is_main_fn {\n                 let start_def_id = tcx.require_lang_item(LangItem::Start, None);\n                 let start_instance = Instance::resolve("}]}