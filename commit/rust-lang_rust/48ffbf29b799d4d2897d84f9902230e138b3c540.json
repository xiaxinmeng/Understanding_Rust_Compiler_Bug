{"sha": "48ffbf29b799d4d2897d84f9902230e138b3c540", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZmZiZjI5Yjc5OWQ0ZDI4OTdkODRmOTkwMjIzMGUxMzhiM2M1NDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-03T05:59:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-03T05:59:09Z"}, "message": "use recrod terminology for hir::Pat", "tree": {"sha": "ccd24ff11c1c2074f74d4a9ad266384894c81817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd24ff11c1c2074f74d4a9ad266384894c81817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ffbf29b799d4d2897d84f9902230e138b3c540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ffbf29b799d4d2897d84f9902230e138b3c540", "html_url": "https://github.com/rust-lang/rust/commit/48ffbf29b799d4d2897d84f9902230e138b3c540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ffbf29b799d4d2897d84f9902230e138b3c540/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db69d134fba98cd43929cde3287fe083bd0d5d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/db69d134fba98cd43929cde3287fe083bd0d5d57", "html_url": "https://github.com/rust-lang/rust/commit/db69d134fba98cd43929cde3287fe083bd0d5d57"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "bfd250f3815eafdf8d80eec514627bbc35dc3ac8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=48ffbf29b799d4d2897d84f9902230e138b3c540", "patch": "@@ -472,7 +472,7 @@ pub enum Pat {\n     Missing,\n     Wild,\n     Tuple(Vec<PatId>),\n-    Struct {\n+    Record {\n         path: Option<Path>,\n         args: Vec<RecordFieldPat>,\n         // FIXME: 'ellipsis' option\n@@ -518,7 +518,7 @@ impl Pat {\n                 let total_iter = prefix.iter().chain(rest.iter()).chain(suffix.iter());\n                 total_iter.copied().for_each(f);\n             }\n-            Pat::Struct { args, .. } => {\n+            Pat::Record { args, .. } => {\n                 args.iter().map(|f| f.pat).for_each(f);\n             }\n         }"}, {"sha": "f6a75a379f809cc17c9dbffb4993ab3e555f0d5e", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=48ffbf29b799d4d2897d84f9902230e138b3c540", "patch": "@@ -20,9 +20,8 @@ use crate::{\n };\n \n use super::{\n-    ArithOp, Array, BinaryOp, BindingAnnotation, Body, BodySourceMap, CmpOp, Expr, ExprId,\n-    Literal, LogicOp, MatchArm, Ordering, Pat, PatId, PatPtr, RecordFieldPat, RecordLitField,\n-    Statement,\n+    ArithOp, Array, BinaryOp, BindingAnnotation, Body, BodySourceMap, CmpOp, Expr, ExprId, Literal,\n+    LogicOp, MatchArm, Ordering, Pat, PatId, PatPtr, RecordFieldPat, RecordLitField, Statement,\n };\n \n pub(crate) struct ExprCollector<DB> {\n@@ -504,7 +503,7 @@ where\n                 });\n                 fields.extend(iter);\n \n-                Pat::Struct { path, args: fields }\n+                Pat::Record { path, args: fields }\n             }\n \n             // FIXME: implement"}, {"sha": "12d7bb174a91e473ab3cfb9dabb51701f526aa89", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ffbf29b799d4d2897d84f9902230e138b3c540/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=48ffbf29b799d4d2897d84f9902230e138b3c540", "patch": "@@ -749,7 +749,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let is_non_ref_pat = match &body[pat] {\n             Pat::Tuple(..)\n             | Pat::TupleStruct { .. }\n-            | Pat::Struct { .. }\n+            | Pat::Record { .. }\n             | Pat::Range { .. }\n             | Pat::Slice { .. } => true,\n             // FIXME: Path/Lit might actually evaluate to ref, but inference is unimplemented.\n@@ -809,7 +809,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Pat::TupleStruct { path: ref p, args: ref subpats } => {\n                 self.infer_tuple_struct_pat(p.as_ref(), subpats, expected, default_bm)\n             }\n-            Pat::Struct { path: ref p, args: ref fields } => {\n+            Pat::Record { path: ref p, args: ref fields } => {\n                 self.infer_record_pat(p.as_ref(), fields, expected, default_bm, pat)\n             }\n             Pat::Path(path) => {"}]}