{"sha": "dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmZmRkOGY3Mjg4MGNkODExOWZjMWE2ODAyOGY5YzAyYjExNWE5ZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T17:19:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-31T17:19:47Z"}, "message": "Rollup merge of #58805 - fabric-and-ink:redundant_import, r=petrochenkov\n\nLint for redundant imports\n\nAdd lint for redundant imports. The changes are suggested by @petrochenkov.\n\nCloses #10178.", "tree": {"sha": "eb55e134558cef80384204715128bd6a7a525a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb55e134558cef80384204715128bd6a7a525a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcoPazCRBK7hj4Ov3rIwAAdHIIAAq00sa39WeZzBNpMXGKpjRh\n9B/lqGUxHbKlTM2GLEqbtuH9+MFJ9D5Z3uTst72U1+o9B2c5AE6/ebwKJoj5x0lC\nyyWkNFKej6UHa9PX9FgstCFiyGQQYLO5ViI4rAQ0NP6aHpbnHI9jsM/nK4T9HkCz\nk9TB9q1bJ2tuI3VnirtOFFt9ahvy8huGMYjyT00Uxt+h0AHN39vNxW4GC9wEPj8H\nmogvRn1X2wwRdgIpyS7XnNmvqVneAdKgKG7LHgku+IUMqH+ONpEmvTuqvgMTF9kX\n3A0RP7y19+NAg2lmfXLVefZlkWSJMegz97RQWVnbBSvT3kCYDcwUSdTj0l6d974=\n=OCgh\n-----END PGP SIGNATURE-----\n", "payload": "tree eb55e134558cef80384204715128bd6a7a525a06\nparent a89c03a30a1e8f1cd190114b765d01752d3ce8d8\nparent c1d5314bd3b628749491e4fe201b4c6916a53ce6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1554052787 +0200\ncommitter GitHub <noreply@github.com> 1554052787 +0200\n\nRollup merge of #58805 - fabric-and-ink:redundant_import, r=petrochenkov\n\nLint for redundant imports\n\nAdd lint for redundant imports. The changes are suggested by @petrochenkov.\n\nCloses #10178.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "html_url": "https://github.com/rust-lang/rust/commit/dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a89c03a30a1e8f1cd190114b765d01752d3ce8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a89c03a30a1e8f1cd190114b765d01752d3ce8d8", "html_url": "https://github.com/rust-lang/rust/commit/a89c03a30a1e8f1cd190114b765d01752d3ce8d8"}, {"sha": "c1d5314bd3b628749491e4fe201b4c6916a53ce6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1d5314bd3b628749491e4fe201b4c6916a53ce6", "html_url": "https://github.com/rust-lang/rust/commit/c1d5314bd3b628749491e4fe201b4c6916a53ce6"}], "stats": {"total": 240, "additions": 198, "deletions": 42}, "files": [{"sha": "ee1799fad8e15c4ae09b31623b5ebb8670a82d13", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -135,7 +135,7 @@ impl<T> ToOwned for T\n /// Another example showing how to keep `Cow` in a struct:\n ///\n /// ```\n-/// use std::borrow::{Cow, ToOwned};\n+/// use std::borrow::Cow;\n ///\n /// struct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {\n ///     values: Cow<'a, [X]>,"}, {"sha": "3b888244341f921acd2c10550810a8cbd585d45e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -1421,7 +1421,6 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// ```\n /// use std::cell::UnsafeCell;\n-/// use std::marker::Sync;\n ///\n /// # #[allow(dead_code)]\n /// struct NotThreadSafe<T> {"}, {"sha": "2d8a2c6321fa8e040f3994ef5140dd4f2c159fc5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -483,6 +483,7 @@ pub enum BuiltinLintDiagnostics {\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n     NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n+    RedundantImport(Vec<(Span, bool)>, ast::Ident),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -579,6 +580,15 @@ impl BuiltinLintDiagnostics {\n                 db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n                 db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n             }\n+            BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n+                for (span, is_imported) in spans {\n+                    let introduced = if is_imported { \"imported\" } else { \"defined\" };\n+                    db.span_label(\n+                        span,\n+                        format!(\"the item `{}` is already {} here\", ident, introduced)\n+                    );\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "05d80f9203f140cee6bff4a178686b5f41c06f9c", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -777,7 +777,6 @@ impl<'enc, 'a, 'tcx, E> CacheEncoder<'enc, 'a, 'tcx, E>\n                                                  value: &V)\n                                                  -> Result<(), E::Error>\n     {\n-        use crate::ty::codec::TyEncoder;\n         let start_pos = self.position();\n \n         tag.encode(self)?;"}, {"sha": "f6956bd5736ebf33ab8ca32545ba4a8bfa81f0aa", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -372,7 +372,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     // Returns a Value of the \"eh_unwind_resume\" lang item if one is defined,\n     // otherwise declares it as an external function.\n     fn eh_unwind_resume(&self) -> &'ll Value {\n-        use crate::attributes;\n         let unwresume = &self.eh_unwind_resume;\n         if let Some(llfn) = unwresume.get() {\n             return llfn;"}, {"sha": "fc4f6b83247872a6a02e7b413d6afae5b57329b5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -732,7 +732,6 @@ fn cast_int_to_float<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n         // All inputs greater or equal to (f32::MAX + 0.5 ULP) are rounded to infinity,\n         // and for everything else LLVM's uitofp works just fine.\n         use rustc_apfloat::ieee::Single;\n-        use rustc_apfloat::Float;\n         const MAX_F32_PLUS_HALF_ULP: u128 = ((1 << (Single::PRECISION + 1)) - 1)\n                                             << (Single::MAX_EXP - Single::PRECISION as i16);\n         let max = bx.cx().const_uint_big(int_ty, MAX_F32_PLUS_HALF_ULP);"}, {"sha": "efc18d401c082cd6ee9e184050b8290d50f05191", "filename": "src/librustc_codegen_ssa/traits/type_.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Ftype_.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -77,7 +77,6 @@ pub trait DerivedTypeMethods<'tcx>: BaseTypeMethods<'tcx> + MiscMethods<'tcx> {\n     }\n \n     fn type_has_metadata(&self, ty: Ty<'tcx>) -> bool {\n-        use syntax_pos::DUMMY_SP;\n         if ty.is_sized(self.tcx().at(DUMMY_SP), ty::ParamEnv::reveal_all()) {\n             return false;\n         }"}, {"sha": "ebbc5a3d3a340a30c139b2ff4a5a2cb9defffcb9", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -155,7 +155,7 @@ impl CodeSuggestion {\n     /// Returns the assembled code suggestions and whether they should be shown with an underline.\n     pub fn splice_lines(&self, cm: &SourceMapperDyn)\n                         -> Vec<(String, Vec<SubstitutionPart>)> {\n-        use syntax_pos::{CharPos, Loc, Pos};\n+        use syntax_pos::{CharPos, Pos};\n \n         fn push_trailing(buf: &mut String,\n                          line_opt: Option<&Cow<'_, str>>,"}, {"sha": "2e71d46f4154c6384c5f1a0768df2761b0ba0be6", "filename": "src/librustc_interface/profile/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_interface%2Fprofile%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fprofile%2Fmod.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -62,7 +62,6 @@ fn total_duration(traces: &[trace::Rec]) -> Duration {\n fn profile_queries_thread(r: Receiver<ProfileQueriesMsg>) {\n     use self::trace::*;\n     use std::fs::File;\n-    use std::time::{Instant};\n \n     let mut profq_msgs: Vec<ProfileQueriesMsg> = vec![];\n     let mut frame: StackFrame = StackFrame { parse_st: ParseState::Clear, traces: vec![] };"}, {"sha": "622cf00ed86e741458de5b7c04e9c211c7788e8b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -427,7 +427,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 let mut kind = match (lo, hi) {\n                     (PatternKind::Constant { value: lo }, PatternKind::Constant { value: hi }) => {\n-                        use std::cmp::Ordering;\n                         let cmp = compare_const_vals(\n                             self.tcx,\n                             lo,"}, {"sha": "488f81d8f740ec776ff4897ffd1620a0fe0f7299", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -331,8 +331,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         val: ImmTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Scalar<M::PointerTag>> {\n         use rustc::mir::UnOp::*;\n-        use rustc_apfloat::ieee::{Single, Double};\n-        use rustc_apfloat::Float;\n \n         let layout = val.layout;\n         let val = val.to_scalar()?;"}, {"sha": "3703ea08b6253245d93aa1350bd61fc87b9f93a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -1738,7 +1738,6 @@ impl<'a> Resolver<'a> {\n     /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<hir::Path, ()> {\n-        use std::iter;\n         let mut errored = false;\n \n         let path = if path_str.starts_with(\"::\") {"}, {"sha": "7ea07f5e0cbcb6cd47b572f38f451720332352b7", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 93, "deletions": 1, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -7,14 +7,19 @@ use crate::{NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyErro\n use crate::{Resolver, Segment};\n use crate::{names_to_string, module_to_string};\n use crate::{resolve_error, ResolutionError, Suggestion};\n+use crate::ModuleKind;\n use crate::macros::ParentScope;\n \n use errors::Applicability;\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n-use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n+use rustc::lint::builtin::{\n+    DUPLICATE_MACRO_EXPORTS,\n+    PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+    UNUSED_IMPORTS,\n+};\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n@@ -1227,10 +1232,97 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             import[ns] = Some(PathResolution::new(def));\n         });\n \n+        self.check_for_redundant_imports(\n+            ident,\n+            directive,\n+            source_bindings,\n+            target_bindings,\n+            target,\n+        );\n+\n         debug!(\"(resolving single import) successfully resolved import\");\n         None\n     }\n \n+    fn check_for_redundant_imports(\n+        &mut self,\n+        ident: Ident,\n+        directive: &'b ImportDirective<'b>,\n+        source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,\n+        target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,\n+        target: Ident,\n+    ) {\n+        // Skip if the import was produced by a macro.\n+        if directive.parent_scope.expansion != Mark::root() {\n+            return;\n+        }\n+\n+        // Skip if we are inside a named module (in contrast to an anonymous\n+        // module defined by a block).\n+        if let ModuleKind::Def(_, _) = directive.parent_scope.module.kind {\n+            return;\n+        }\n+\n+        let mut is_redundant = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        let mut redundant_span = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        self.per_ns(|this, ns| if let Some(binding) = source_bindings[ns].get().ok() {\n+            if binding.def() == Def::Err {\n+                return;\n+            }\n+\n+            let orig_blacklisted_binding = mem::replace(\n+                &mut this.blacklisted_binding,\n+                target_bindings[ns].get()\n+            );\n+\n+            match this.early_resolve_ident_in_lexical_scope(\n+                target,\n+                ScopeSet::Import(ns),\n+                &directive.parent_scope,\n+                false,\n+                false,\n+                directive.span,\n+            ) {\n+                Ok(other_binding) => {\n+                    is_redundant[ns] = Some(\n+                        binding.def() == other_binding.def()\n+                        && !other_binding.is_ambiguity()\n+                    );\n+                    redundant_span[ns] =\n+                        Some((other_binding.span, other_binding.is_import()));\n+                }\n+                Err(_) => is_redundant[ns] = Some(false)\n+            }\n+\n+            this.blacklisted_binding = orig_blacklisted_binding;\n+        });\n+\n+        if !is_redundant.is_empty() &&\n+            is_redundant.present_items().all(|is_redundant| is_redundant)\n+        {\n+            self.session.buffer_lint_with_diagnostic(\n+                UNUSED_IMPORTS,\n+                directive.id,\n+                directive.span,\n+                &format!(\"the item `{}` is imported redundantly\", ident),\n+                BuiltinLintDiagnostics::RedundantImport(\n+                    redundant_span.present_items().collect(),\n+                    ident,\n+                ),\n+            );\n+        }\n+    }\n+\n     fn resolve_glob_import(&mut self, directive: &'b ImportDirective<'b>) {\n         let module = match directive.imported_module.get().unwrap() {\n             ModuleOrUniformRoot::Module(module) => module,"}, {"sha": "3579810b8d75f68abd472aa63bb8306144d00e8d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -420,9 +420,6 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     def_id: DefId,\n     return_ty: Option<Ty<'tcx>>,\n ) {\n-    use ty::subst::Subst;\n-    use rustc::ty::TypeFoldable;\n-\n     let predicates = fcx.tcx.predicates_of(def_id);\n \n     let generics = tcx.generics_of(def_id);\n@@ -1010,8 +1007,6 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n     span: Span,\n     id: hir::HirId)\n {\n-    use rustc::ty::TypeFoldable;\n-\n     let empty_env = ty::ParamEnv::empty();\n \n     let def_id = fcx.tcx.hir().local_def_id_from_hir_id(id);"}, {"sha": "f7e8cdeaeca898ce95708a610d0110da2c48305e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -1069,8 +1069,6 @@ themePicker.onblur = handleThemeButtonsBlur;\n     }\n \n     if cx.shared.include_sources {\n-        use std::path::Component;\n-\n         let mut hierarchy = Hierarchy::new(OsString::new());\n         for source in cx.shared.local_sources.iter()\n                                              .filter_map(|p| p.0.strip_prefix(&cx.shared.src_root)"}, {"sha": "0bbc7c5c4b223396a0bddd2301c2a43b8726e2a6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -371,8 +371,7 @@ pub fn make_test(s: &str,\n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n     let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n-        use crate::syntax::{ast, parse::{self, ParseSess}, source_map::FilePathMapping};\n-        use crate::syntax_pos::FileName;\n+        use crate::syntax::{parse::{self, ParseSess}, source_map::FilePathMapping};\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n "}, {"sha": "5f7e357eeb2a9f591c03502c1a516c64512c461c", "filename": "src/test/run-pass/binding/match-arm-statics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinding%2Fmatch-arm-statics.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -45,8 +45,6 @@ pub mod glfw {\n }\n \n fn issue_6533() {\n-    use glfw;\n-\n     fn action_to_str(state: glfw::InputState) -> &'static str {\n         use glfw::{RELEASE, PRESS, REPEAT};\n         match state {"}, {"sha": "8c17b01e2bd899da9bff7fe79cac7594920ea96a", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -238,7 +238,6 @@ pub fn main() {\n // Basic test to make sure that we can invoke the `write!` macro with an\n // fmt::Write instance.\n fn test_write() {\n-    use std::fmt::Write;\n     let mut buf = String::new();\n     write!(&mut buf, \"{}\", 3);\n     {\n@@ -267,7 +266,6 @@ fn test_print() {\n // Just make sure that the macros are defined, there's not really a lot that we\n // can do with them just yet (to test the output)\n fn test_format_args() {\n-    use std::fmt::Write;\n     let mut buf = String::new();\n     {\n         let w = &mut buf;"}, {"sha": "2775aac015615ed0b7fa7c4744c9a6fd1865a6ae", "filename": "src/test/run-pass/invalid_const_promotion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvalid_const_promotion.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -25,7 +25,6 @@ fn foo() {\n #[cfg(unix)]\n fn check_status(status: std::process::ExitStatus)\n {\n-    use libc;\n     use std::os::unix::process::ExitStatusExt;\n \n     assert!(status.signal() == Some(libc::SIGILL)"}, {"sha": "63fd9db08ff2fc35797c241bac466ab03c444f5d", "filename": "src/test/run-pass/issues/issue-38556.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-38556.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -9,6 +9,5 @@ macro_rules! reexport {\n reexport!();\n \n fn main() {\n-    use Bar;\n     fn f(_: Bar) {}\n }"}, {"sha": "484cd782a09df6e4283b6b4f7fcb571e9f791370", "filename": "src/test/run-pass/issues/issue-39367.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-39367.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -15,7 +15,6 @@ fn arena() -> &'static ArenaSet<Vec<u8>> {\n         fn require_sync<T: Sync>(_: &T) { }\n         unsafe fn __stability() -> &'static ArenaSet<Vec<u8>> {\n             use std::mem::transmute;\n-            use std::boxed::Box;\n             static mut DATA: *const ArenaSet<Vec<u8>> = 0 as *const ArenaSet<Vec<u8>>;\n \n             static mut ONCE: Once = ONCE_INIT;"}, {"sha": "9f868d6e5c3e412422c8034416685f2a61a14fc5", "filename": "src/test/run-pass/out-of-stack.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Fout-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-of-stack.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -36,7 +36,6 @@ fn loud_recurse() {\n #[cfg(unix)]\n fn check_status(status: std::process::ExitStatus)\n {\n-    use libc;\n     use std::os::unix::process::ExitStatusExt;\n \n     assert!(!status.success());"}, {"sha": "566b3581046d913920637952cb163ee650f983b0", "filename": "src/test/run-pass/rfcs/rfc-2126-extern-absolute-paths/basic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfcs%2Frfc-2126-extern-absolute-paths%2Fbasic.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -4,6 +4,8 @@\n // compile-flags:--extern xcrate\n // edition:2018\n \n+#![allow(unused_imports)]\n+\n use xcrate::Z;\n \n fn f() {"}, {"sha": "626e1ae71bc2fc7a7322ac392ead07e0d3c565a1", "filename": "src/test/run-pass/traits/traits-multidispatch-infer-convert-target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftraits-multidispatch-infer-convert-target.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -28,7 +28,6 @@ where T : Convert<U>\n }\n \n fn main() {\n-    use std::default::Default;\n     // T = i16, U = u32\n     test(22_i16, Default::default(),  2, 4);\n "}, {"sha": "4754d8880763aeeaa4a3b0dcdf6aebc837a4badc", "filename": "src/test/ui/lint/lint-unused-imports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -66,6 +66,7 @@ mod bar {\n \n fn g() {\n     use self::g; //~ ERROR unused import: `self::g`\n+    //~^ ERROR the item `g` is imported redundantly\n     fn f() {\n         self::g();\n     }\n@@ -75,6 +76,7 @@ fn g() {\n #[allow(unused_variables)]\n fn h() {\n     use test2::foo; //~ ERROR unused import: `test2::foo`\n+    //~^ ERROR the item `foo` is imported redundantly\n     let foo = 0;\n }\n "}, {"sha": "96d71a228a5f2a4bc80ab62fae74f7bbecc4a37a", "filename": "src/test/ui/lint/lint-unused-imports.stderr", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-imports.stderr?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -34,14 +34,36 @@ error: unused import: `foo::Square`\n LL |         use foo::Square;\n    |             ^^^^^^^^^^^\n \n+error: the item `g` is imported redundantly\n+  --> $DIR/lint-unused-imports.rs:68:9\n+   |\n+LL | / fn g() {\n+LL | |     use self::g;\n+   | |         ^^^^^^^\n+LL | |\n+LL | |     fn f() {\n+LL | |         self::g();\n+LL | |     }\n+LL | | }\n+   | |_- the item `g` is already defined here\n+\n error: unused import: `self::g`\n   --> $DIR/lint-unused-imports.rs:68:9\n    |\n LL |     use self::g;\n    |         ^^^^^^^\n \n+error: the item `foo` is imported redundantly\n+  --> $DIR/lint-unused-imports.rs:78:9\n+   |\n+LL | use test2::{foo, bar};\n+   |             --- the item `foo` is already imported here\n+...\n+LL |     use test2::foo;\n+   |         ^^^^^^^^^^\n+\n error: unused import: `test2::foo`\n-  --> $DIR/lint-unused-imports.rs:77:9\n+  --> $DIR/lint-unused-imports.rs:78:9\n    |\n LL |     use test2::foo;\n    |         ^^^^^^^^^^\n@@ -52,5 +74,5 @@ error: unused import: `test::B2`\n LL | use test::B2;\n    |     ^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "328f8232bafa84fcdd13be88bf90c80a71f83abc", "filename": "src/test/ui/lint/use-redundant.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -0,0 +1,27 @@\n+// compile-pass\n+#![warn(unused_imports)]\n+\n+use crate::foo::Bar; //~ WARNING first import\n+\n+mod foo {\n+    pub type Bar = i32;\n+}\n+\n+fn baz() -> Bar {\n+    3\n+}\n+\n+mod m1 { pub struct S {} }\n+mod m2 { pub struct S {} }\n+\n+use m1::*;\n+use m2::*;\n+\n+fn main() {\n+    use crate::foo::Bar; //~ WARNING redundant import\n+    let _a: Bar = 3;\n+    baz();\n+\n+    use m1::S; //~ WARNING redundant import\n+    let _s = S {};\n+}"}, {"sha": "fbd9f81f18f8a8f5a56ea0e675dcaba997e69595", "filename": "src/test/ui/lint/use-redundant.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -0,0 +1,27 @@\n+warning: unused import: `m1::*`\n+  --> $DIR/use-redundant.rs:17:5\n+   |\n+LL | use m1::*;\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/use-redundant.rs:2:9\n+   |\n+LL | #![warn(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: unused import: `m2::*`\n+  --> $DIR/use-redundant.rs:18:5\n+   |\n+LL | use m2::*;\n+   |     ^^^^^\n+\n+warning: the item `Bar` is imported redundantly\n+  --> $DIR/use-redundant.rs:21:9\n+   |\n+LL | use crate::foo::Bar;\n+   |     --------------- the item `Bar` is already imported here\n+...\n+LL |     use crate::foo::Bar;\n+   |         ^^^^^^^^^^^^^^^\n+"}, {"sha": "2c388cf3713b0c0aafc4be604803c3a9d1cd9212", "filename": "src/test/ui/rust-2018/future-proofing-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.rs?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n+#![allow(unused_imports)]\n \n mod T {\n     pub struct U;"}, {"sha": "7021489a6ddcfaf9e1b3e7ea33f276279a28e86b", "filename": "src/test/ui/rust-2018/future-proofing-locals.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dffdd8f72880cd8119fc1a68028f9c02b115a9d2/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ffuture-proofing-locals.stderr?ref=dffdd8f72880cd8119fc1a68028f9c02b115a9d2", "patch": "@@ -1,53 +1,53 @@\n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:13:9\n+  --> $DIR/future-proofing-locals.rs:14:9\n    |\n LL |     use T as _;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:14:9\n+  --> $DIR/future-proofing-locals.rs:15:9\n    |\n LL |     use T::U;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:15:9\n+  --> $DIR/future-proofing-locals.rs:16:9\n    |\n LL |     use T::*;\n    |         ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:19:9\n+  --> $DIR/future-proofing-locals.rs:20:9\n    |\n LL |     use T;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:25:9\n+  --> $DIR/future-proofing-locals.rs:26:9\n    |\n LL |     use x as _;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:31:9\n+  --> $DIR/future-proofing-locals.rs:32:9\n    |\n LL |     use x;\n    |         ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:37:17\n+  --> $DIR/future-proofing-locals.rs:38:17\n    |\n LL |             use x;\n    |                 ^\n \n error: imports cannot refer to type parameters\n-  --> $DIR/future-proofing-locals.rs:45:10\n+  --> $DIR/future-proofing-locals.rs:46:10\n    |\n LL |     use {T as _, x};\n    |          ^\n \n error: imports cannot refer to local variables\n-  --> $DIR/future-proofing-locals.rs:45:18\n+  --> $DIR/future-proofing-locals.rs:46:18\n    |\n LL |     use {T as _, x};\n    |                  ^"}]}