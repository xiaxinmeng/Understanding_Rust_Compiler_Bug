{"sha": "8ccb61609238063b2f1b0cd038974426cdf81bc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2I2MTYwOTIzODA2M2IyZjFiMGNkMDM4OTc0NDI2Y2RmODFiYzg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:33:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "native: Convert statics to constants", "tree": {"sha": "2dcb92c1eef39311b2bde7c1eeba31b4fabb5afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dcb92c1eef39311b2bde7c1eeba31b4fabb5afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ccb61609238063b2f1b0cd038974426cdf81bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccb61609238063b2f1b0cd038974426cdf81bc8", "html_url": "https://github.com/rust-lang/rust/commit/8ccb61609238063b2f1b0cd038974426cdf81bc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ccb61609238063b2f1b0cd038974426cdf81bc8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6532a8c95ac5ac4d695d689a944ca725716fc0a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6532a8c95ac5ac4d695d689a944ca725716fc0a4", "html_url": "https://github.com/rust-lang/rust/commit/6532a8c95ac5ac4d695d689a944ca725716fc0a4"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "c2af9c03c42c1c59d813cbf5ef5c7595e6bf8e04", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/8ccb61609238063b2f1b0cd038974426cdf81bc8/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccb61609238063b2f1b0cd038974426cdf81bc8/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=8ccb61609238063b2f1b0cd038974426cdf81bc8", "patch": "@@ -23,41 +23,41 @@ use libc;\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n-pub static FIONBIO: libc::c_ulong = 0x8004667e;\n+pub const FIONBIO: libc::c_ulong = 0x8004667e;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\")),\n           target_os = \"android\"))]\n-pub static FIONBIO: libc::c_ulong = 0x5421;\n+pub const FIONBIO: libc::c_ulong = 0x5421;\n #[cfg(all(target_os = \"linux\",\n           any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n-pub static FIONBIO: libc::c_ulong = 0x667e;\n+pub const FIONBIO: libc::c_ulong = 0x667e;\n \n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n-pub static FIOCLEX: libc::c_ulong = 0x20006601;\n+pub const FIOCLEX: libc::c_ulong = 0x20006601;\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\")),\n           target_os = \"android\"))]\n-pub static FIOCLEX: libc::c_ulong = 0x5451;\n+pub const FIOCLEX: libc::c_ulong = 0x5451;\n #[cfg(all(target_os = \"linux\",\n           any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n-pub static FIOCLEX: libc::c_ulong = 0x6601;\n+pub const FIOCLEX: libc::c_ulong = 0x6601;\n \n #[cfg(any(target_os = \"macos\",\n           target_os = \"ios\",\n           target_os = \"freebsd\",\n           target_os = \"dragonfly\"))]\n-pub static MSG_DONTWAIT: libc::c_int = 0x80;\n+pub const MSG_DONTWAIT: libc::c_int = 0x80;\n #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub static MSG_DONTWAIT: libc::c_int = 0x40;\n+pub const MSG_DONTWAIT: libc::c_int = 0x40;\n \n-pub static WNOHANG: libc::c_int = 1;\n+pub const WNOHANG: libc::c_int = 1;\n \n extern {\n     pub fn gettimeofday(timeval: *mut libc::timeval,\n@@ -89,7 +89,7 @@ extern {\n \n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod select {\n-    pub static FD_SETSIZE: uint = 1024;\n+    pub const FD_SETSIZE: uint = 1024;\n \n     #[repr(C)]\n     pub struct fd_set {\n@@ -109,7 +109,7 @@ mod select {\n     use std::uint;\n     use libc;\n \n-    pub static FD_SETSIZE: uint = 1024;\n+    pub const FD_SETSIZE: uint = 1024;\n \n     #[repr(C)]\n     pub struct fd_set {\n@@ -131,14 +131,14 @@ mod select {\n mod signal {\n     use libc;\n \n-    pub static SA_NOCLDSTOP: libc::c_ulong = 0x00000001;\n-    pub static SA_NOCLDWAIT: libc::c_ulong = 0x00000002;\n-    pub static SA_NODEFER: libc::c_ulong = 0x40000000;\n-    pub static SA_ONSTACK: libc::c_ulong = 0x08000000;\n-    pub static SA_RESETHAND: libc::c_ulong = 0x80000000;\n-    pub static SA_RESTART: libc::c_ulong = 0x10000000;\n-    pub static SA_SIGINFO: libc::c_ulong = 0x00000004;\n-    pub static SIGCHLD: libc::c_int = 17;\n+    pub const SA_NOCLDSTOP: libc::c_ulong = 0x00000001;\n+    pub const SA_NOCLDWAIT: libc::c_ulong = 0x00000002;\n+    pub const SA_NODEFER: libc::c_ulong = 0x40000000;\n+    pub const SA_ONSTACK: libc::c_ulong = 0x08000000;\n+    pub const SA_RESETHAND: libc::c_ulong = 0x80000000;\n+    pub const SA_RESTART: libc::c_ulong = 0x10000000;\n+    pub const SA_SIGINFO: libc::c_ulong = 0x00000004;\n+    pub const SIGCHLD: libc::c_int = 17;\n \n     // This definition is not as accurate as it could be, {pid, uid, status} is\n     // actually a giant union. Currently we're only interested in these fields,\n@@ -179,14 +179,14 @@ mod signal {\n mod signal {\n     use libc;\n \n-    pub static SA_NOCLDSTOP: libc::c_ulong = 0x00000001;\n-    pub static SA_NOCLDWAIT: libc::c_ulong = 0x00010000;\n-    pub static SA_NODEFER: libc::c_ulong = 0x40000000;\n-    pub static SA_ONSTACK: libc::c_ulong = 0x08000000;\n-    pub static SA_RESETHAND: libc::c_ulong = 0x80000000;\n-    pub static SA_RESTART: libc::c_ulong = 0x10000000;\n-    pub static SA_SIGINFO: libc::c_ulong = 0x00000008;\n-    pub static SIGCHLD: libc::c_int = 18;\n+    pub const SA_NOCLDSTOP: libc::c_ulong = 0x00000001;\n+    pub const SA_NOCLDWAIT: libc::c_ulong = 0x00010000;\n+    pub const SA_NODEFER: libc::c_ulong = 0x40000000;\n+    pub const SA_ONSTACK: libc::c_ulong = 0x08000000;\n+    pub const SA_RESETHAND: libc::c_ulong = 0x80000000;\n+    pub const SA_RESTART: libc::c_ulong = 0x10000000;\n+    pub const SA_SIGINFO: libc::c_ulong = 0x00000008;\n+    pub const SIGCHLD: libc::c_int = 18;\n \n     // This definition is not as accurate as it could be, {pid, uid, status} is\n     // actually a giant union. Currently we're only interested in these fields,\n@@ -223,14 +223,14 @@ mod signal {\n mod signal {\n     use libc;\n \n-    pub static SA_ONSTACK: libc::c_int = 0x0001;\n-    pub static SA_RESTART: libc::c_int = 0x0002;\n-    pub static SA_RESETHAND: libc::c_int = 0x0004;\n-    pub static SA_NOCLDSTOP: libc::c_int = 0x0008;\n-    pub static SA_NODEFER: libc::c_int = 0x0010;\n-    pub static SA_NOCLDWAIT: libc::c_int = 0x0020;\n-    pub static SA_SIGINFO: libc::c_int = 0x0040;\n-    pub static SIGCHLD: libc::c_int = 20;\n+    pub const SA_ONSTACK: libc::c_int = 0x0001;\n+    pub const SA_RESTART: libc::c_int = 0x0002;\n+    pub const SA_RESETHAND: libc::c_int = 0x0004;\n+    pub const SA_NOCLDSTOP: libc::c_int = 0x0008;\n+    pub const SA_NODEFER: libc::c_int = 0x0010;\n+    pub const SA_NOCLDWAIT: libc::c_int = 0x0020;\n+    pub const SA_SIGINFO: libc::c_int = 0x0040;\n+    pub const SIGCHLD: libc::c_int = 20;\n \n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     pub type sigset_t = u32;"}, {"sha": "2266f41eff9af5d75b06308b23319b4d9110d9ba", "filename": "src/libnative/io/c_windows.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8ccb61609238063b2f1b0cd038974426cdf81bc8/src%2Flibnative%2Fio%2Fc_windows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ccb61609238063b2f1b0cd038974426cdf81bc8/src%2Flibnative%2Fio%2Fc_windows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_windows.rs?ref=8ccb61609238063b2f1b0cd038974426cdf81bc8", "patch": "@@ -14,26 +14,26 @@\n \n use libc;\n \n-pub static WSADESCRIPTION_LEN: uint = 256;\n-pub static WSASYS_STATUS_LEN: uint = 128;\n-pub static FIONBIO: libc::c_long = 0x8004667e;\n+pub const WSADESCRIPTION_LEN: uint = 256;\n+pub const WSASYS_STATUS_LEN: uint = 128;\n+pub const FIONBIO: libc::c_long = 0x8004667e;\n static FD_SETSIZE: uint = 64;\n-pub static MSG_DONTWAIT: libc::c_int = 0;\n-pub static ERROR_ILLEGAL_CHARACTER: libc::c_int = 582;\n-pub static ENABLE_ECHO_INPUT: libc::DWORD = 0x4;\n-pub static ENABLE_EXTENDED_FLAGS: libc::DWORD = 0x80;\n-pub static ENABLE_INSERT_MODE: libc::DWORD = 0x20;\n-pub static ENABLE_LINE_INPUT: libc::DWORD = 0x2;\n-pub static ENABLE_PROCESSED_INPUT: libc::DWORD = 0x1;\n-pub static ENABLE_QUICK_EDIT_MODE: libc::DWORD = 0x40;\n-pub static WSA_INVALID_EVENT: WSAEVENT = 0 as WSAEVENT;\n-\n-pub static FD_ACCEPT: libc::c_long = 0x08;\n-pub static FD_MAX_EVENTS: uint = 10;\n-pub static WSA_INFINITE: libc::DWORD = libc::INFINITE;\n-pub static WSA_WAIT_TIMEOUT: libc::DWORD = libc::consts::os::extra::WAIT_TIMEOUT;\n-pub static WSA_WAIT_EVENT_0: libc::DWORD = libc::consts::os::extra::WAIT_OBJECT_0;\n-pub static WSA_WAIT_FAILED: libc::DWORD = libc::consts::os::extra::WAIT_FAILED;\n+pub const MSG_DONTWAIT: libc::c_int = 0;\n+pub const ERROR_ILLEGAL_CHARACTER: libc::c_int = 582;\n+pub const ENABLE_ECHO_INPUT: libc::DWORD = 0x4;\n+pub const ENABLE_EXTENDED_FLAGS: libc::DWORD = 0x80;\n+pub const ENABLE_INSERT_MODE: libc::DWORD = 0x20;\n+pub const ENABLE_LINE_INPUT: libc::DWORD = 0x2;\n+pub const ENABLE_PROCESSED_INPUT: libc::DWORD = 0x1;\n+pub const ENABLE_QUICK_EDIT_MODE: libc::DWORD = 0x40;\n+pub const WSA_INVALID_EVENT: WSAEVENT = 0 as WSAEVENT;\n+\n+pub const FD_ACCEPT: libc::c_long = 0x08;\n+pub const FD_MAX_EVENTS: uint = 10;\n+pub const WSA_INFINITE: libc::DWORD = libc::INFINITE;\n+pub const WSA_WAIT_TIMEOUT: libc::DWORD = libc::consts::os::extra::WAIT_TIMEOUT;\n+pub const WSA_WAIT_EVENT_0: libc::DWORD = libc::consts::os::extra::WAIT_OBJECT_0;\n+pub const WSA_WAIT_FAILED: libc::DWORD = libc::consts::os::extra::WAIT_FAILED;\n \n #[repr(C)]\n #[cfg(target_arch = \"x86\")]"}]}