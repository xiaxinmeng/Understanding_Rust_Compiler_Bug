{"sha": "6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlM2IyYWI0NGQ5YzAzZmI3YWE4ZThiOTRlNzExYzE5N2RlM2QzMzc=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-05T16:05:26Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-09-06T16:28:45Z"}, "message": "move and duplicate macro defns in sha2 to make them hygienic\n\n... it would also have been possible to add all of their dependencies,\nbut that would have increased the already-lengthy list of parameters.\nAlso, if we had macros that could expand into macro defns, you could\nstage it. This seemed like the least painful choice.", "tree": {"sha": "662c7f9afbf5fa1eb028ee1a948f9262c3adcef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/662c7f9afbf5fa1eb028ee1a948f9262c3adcef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337", "html_url": "https://github.com/rust-lang/rust/commit/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39cec65b025ad4c6de50e778ffd1177279b5b3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39cec65b025ad4c6de50e778ffd1177279b5b3d", "html_url": "https://github.com/rust-lang/rust/commit/d39cec65b025ad4c6de50e778ffd1177279b5b3d"}], "stats": {"total": 62, "additions": 40, "deletions": 22}, "files": [{"sha": "49bbddca1dbb773d648807b5f2a9b846d9be7449", "filename": "src/libextra/crypto/sha2.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337/src%2Flibextra%2Fcrypto%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337/src%2Flibextra%2Fcrypto%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fsha2.rs?ref=6e3b2ab44d9c03fb7aa8e8b94e711c197de3d337", "patch": "@@ -14,28 +14,8 @@ use cryptoutil::{write_u64_be, write_u32_be, read_u64v_be, read_u32v_be, add_byt\n     add_bytes_to_bits_tuple, FixedBuffer, FixedBuffer128, FixedBuffer64, StandardPadding};\n use digest::Digest;\n \n-\n-// Sha-512 and Sha-256 use basically the same calculations which are implemented by these macros.\n-// Inlining the calculations seems to result in better generated code.\n-macro_rules! schedule_round( ($t:expr) => (\n-        W[$t] = sigma1(W[$t - 2]) + W[$t - 7] + sigma0(W[$t - 15]) + W[$t - 16];\n-    )\n-)\n-\n-macro_rules! sha2_round(\n-    ($A:ident, $B:ident, $C:ident, $D:ident,\n-     $E:ident, $F:ident, $G:ident, $H:ident, $K:ident, $t:expr) => (\n-        {\n-            $H += sum1($E) + ch($E, $F, $G) + $K[$t] + W[$t];\n-            $D += $H;\n-            $H += sum0($A) + maj($A, $B, $C);\n-        }\n-    )\n-)\n-\n-\n-// A structure that represents that state of a digest computation for the SHA-2 512 family of digest\n-// functions\n+// A structure that represents that state of a digest computation for the SHA-2 512 family\n+// of digest functions\n struct Engine512State {\n     H0: u64,\n     H1: u64,\n@@ -108,6 +88,25 @@ impl Engine512State {\n \n         let mut W = [0u64, ..80];\n \n+        // Sha-512 and Sha-256 use basically the same calculations which are implemented by\n+        // these macros. Inlining the calculations seems to result in better generated code.\n+        macro_rules! schedule_round( ($t:expr) => (\n+                W[$t] = sigma1(W[$t - 2]) + W[$t - 7] + sigma0(W[$t - 15]) + W[$t - 16];\n+                )\n+        )\n+\n+        macro_rules! sha2_round(\n+            ($A:ident, $B:ident, $C:ident, $D:ident,\n+             $E:ident, $F:ident, $G:ident, $H:ident, $K:ident, $t:expr) => (\n+                {\n+                    $H += sum1($E) + ch($E, $F, $G) + $K[$t] + W[$t];\n+                    $D += $H;\n+                    $H += sum0($A) + maj($A, $B, $C);\n+                }\n+             )\n+        )\n+\n+\n         read_u64v_be(W.mut_slice(0, 16), data);\n \n         // Putting the message schedule inside the same loop as the round calculations allows for\n@@ -505,6 +504,25 @@ impl Engine256State {\n \n         let mut W = [0u32, ..64];\n \n+        // Sha-512 and Sha-256 use basically the same calculations which are implemented\n+        // by these macros. Inlining the calculations seems to result in better generated code.\n+        macro_rules! schedule_round( ($t:expr) => (\n+                W[$t] = sigma1(W[$t - 2]) + W[$t - 7] + sigma0(W[$t - 15]) + W[$t - 16];\n+                )\n+        )\n+\n+        macro_rules! sha2_round(\n+            ($A:ident, $B:ident, $C:ident, $D:ident,\n+             $E:ident, $F:ident, $G:ident, $H:ident, $K:ident, $t:expr) => (\n+                {\n+                    $H += sum1($E) + ch($E, $F, $G) + $K[$t] + W[$t];\n+                    $D += $H;\n+                    $H += sum0($A) + maj($A, $B, $C);\n+                }\n+             )\n+        )\n+\n+\n         read_u32v_be(W.mut_slice(0, 16), data);\n \n         // Putting the message schedule inside the same loop as the round calculations allows for"}]}