{"sha": "b0ac40a243b1385ecf0bc25505fa3e65f32013c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwYWM0MGEyNDNiMTM4NWVjZjBiYzI1NTA1ZmEzZTY1ZjMyMDEzYzM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T19:52:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:24Z"}, "message": "sha2 -- introduce locals to clarify which subportions are being borrowed", "tree": {"sha": "33a92a328954646438ce8257ba715a3bb26d035a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33a92a328954646438ce8257ba715a3bb26d035a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0ac40a243b1385ecf0bc25505fa3e65f32013c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0ac40a243b1385ecf0bc25505fa3e65f32013c3", "html_url": "https://github.com/rust-lang/rust/commit/b0ac40a243b1385ecf0bc25505fa3e65f32013c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0ac40a243b1385ecf0bc25505fa3e65f32013c3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dff89c238a22b18b18c83f6ccafd94f66507f70", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dff89c238a22b18b18c83f6ccafd94f66507f70", "html_url": "https://github.com/rust-lang/rust/commit/8dff89c238a22b18b18c83f6ccafd94f66507f70"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "116ec6bba290438c81192111018149e383b02ce0", "filename": "src/librustc/util/sha2.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0ac40a243b1385ecf0bc25505fa3e65f32013c3/src%2Flibrustc%2Futil%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0ac40a243b1385ecf0bc25505fa3e65f32013c3/src%2Flibrustc%2Futil%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fsha2.rs?ref=b0ac40a243b1385ecf0bc25505fa3e65f32013c3", "patch": "@@ -453,18 +453,20 @@ impl Engine256 {\n         assert!(!self.finished)\n         // Assumes that input.len() can be converted to u64 without overflow\n         self.length_bits = add_bytes_to_bits(self.length_bits, input.len() as u64);\n-        self.buffer.input(input, |input: &[u8]| { self.state.process_block(input) });\n+        let self_state = &mut self.state;\n+        self.buffer.input(input, |input: &[u8]| { self_state.process_block(input) });\n     }\n \n     fn finish(&mut self) {\n         if self.finished {\n             return;\n         }\n \n-        self.buffer.standard_padding(8, |input: &[u8]| { self.state.process_block(input) });\n+        let self_state = &mut self.state;\n+        self.buffer.standard_padding(8, |input: &[u8]| { self_state.process_block(input) });\n         write_u32_be(self.buffer.next(4), (self.length_bits >> 32) as u32 );\n         write_u32_be(self.buffer.next(4), self.length_bits as u32);\n-        self.state.process_block(self.buffer.full_buffer());\n+        self_state.process_block(self.buffer.full_buffer());\n \n         self.finished = true;\n     }"}]}