{"sha": "5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MjhhMjJiOTVjY2Q4Yzg0YTQwMmUyZjVjYjRhYTUzZGRjNmY0ZDQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-14T21:13:32Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-14T21:26:10Z"}, "message": "First cut at dtors for classes\n\nClasses with dtors should compile now. Haven't yet tested\nwhether they actually run correctly.\n\nBeginnings of support for #2295, though that won't be done until\nthere's more test cases and resources are removed.", "tree": {"sha": "5d5b8f41d0011249fd613c23d6033d05f36101c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5b8f41d0011249fd613c23d6033d05f36101c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "html_url": "https://github.com/rust-lang/rust/commit/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9", "html_url": "https://github.com/rust-lang/rust/commit/89cd2f6bd01e66f41b8dc49dd09930aa86cd2bd9"}], "stats": {"total": 271, "additions": 216, "deletions": 55}, "files": [{"sha": "8c27b8ba98958e2204f94779e914af6bcc5dc9ae", "filename": "src/librustsyntax/ast.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -669,8 +669,10 @@ enum item_ {\n     item_class([ty_param], /* ty params for class */\n                [@iface_ref],   /* ifaces this class implements */\n                [@class_member], /* methods, etc. */\n-                               /* (not including ctor) */\n+                               /* (not including ctor or dtor) */\n                class_ctor,\n+               /* dtor is optional */\n+               option<class_dtor>,\n                region_param\n                ),\n     item_iface([ty_param], region_param, [ty_method]),\n@@ -699,6 +701,14 @@ type class_ctor_ = {id: node_id,\n                     dec: fn_decl,\n                     body: blk};\n \n+#[auto_serialize]\n+type class_dtor = spanned<class_dtor_>;\n+\n+#[auto_serialize]\n+type class_dtor_ = {id: node_id,\n+                    self_id: node_id,\n+                    body: blk};\n+\n #[auto_serialize]\n type native_item =\n     {ident: ident,"}, {"sha": "eb442e1ec485e1094a0dbbe26cc2d8b9a8094fc2", "filename": "src/librustsyntax/ast_util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fast_util.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -361,6 +361,12 @@ fn operator_prec(op: ast::binop) -> uint {\n       or                {  1u }\n   }\n }\n+\n+fn dtor_dec() -> fn_decl {\n+    {inputs: [], output: @{id: 0, node: ty_nil, span: dummy_sp()},\n+     purity: impure_fn, cf: return_val, constraints: []}\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "bc1cec9021e04343344840baada8974047fdbf2d", "filename": "src/librustsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Ffold.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -274,19 +274,24 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n                       fold_ty_params(typms, fld),\n                       r)\n           }\n-          item_class(typms, ifaces, items, ctor, rp) {\n+          item_class(typms, ifaces, items, ctor, m_dtor, rp) {\n               let ctor_body = fld.fold_block(ctor.node.body);\n               let ctor_decl = fold_fn_decl(ctor.node.dec, fld);\n               let ctor_id   = fld.new_id(ctor.node.id);\n+              let dtor = option::map(m_dtor) {|dtor|\n+                let dtor_body = fld.fold_block(dtor.node.body);\n+                let dtor_id   = fld.new_id(dtor.node.id);\n+                {node: {body: dtor_body,\n+                        id: dtor_id with dtor.node}\n+                    with dtor}};\n               item_class(\n                   typms,\n                   vec::map(ifaces, {|p| fold_iface_ref(p, fld) }),\n                   vec::map(items, fld.fold_class_item),\n                   {node: {body: ctor_body,\n                           dec: ctor_decl,\n                           id: ctor_id with ctor.node}\n-                   with ctor},\n-                  rp)\n+                      with ctor}, dtor, rp)\n           }\n           item_impl(tps, rp, ifce, ty, methods) {\n               item_impl(fold_ty_params(tps, fld),"}, {"sha": "7c1e3a85a292e87bc72901526574276732fd9b23", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -1940,14 +1940,24 @@ fn parse_item_class(p: parser) -> item_info {\n     let mut ms: [@class_member] = [];\n     let ctor_id = p.get_id();\n     let mut the_ctor : option<(fn_decl, blk, codemap::span)> = none;\n+    let mut the_dtor : option<(blk, codemap::span)> = none;\n     while p.token != token::RBRACE {\n         alt parse_class_item(p, class_path) {\n-            ctor_decl(a_fn_decl, blk, s) {\n-               the_ctor = some((a_fn_decl, blk, s));\n-            }\n-            members(mms) { ms += mms; }\n+          ctor_decl(a_fn_decl, blk, s) {\n+            the_ctor = some((a_fn_decl, blk, s));\n+          }\n+          dtor_decl(blk, s) {\n+            the_dtor = some((blk, s));\n+          }\n+          members(mms) { ms += mms; }\n        }\n     }\n+    let actual_dtor = option::map(the_dtor) {|dtor|\n+       let (d_body, d_s) = dtor;\n+       {node: {id: p.get_id(),\n+               self_id: p.get_id(),\n+               body: d_body},\n+               span: d_s}};\n     p.bump();\n     alt the_ctor {\n       some((ct_d, ct_b, ct_s)) {\n@@ -1957,7 +1967,7 @@ fn parse_item_class(p: parser) -> item_info {\n                     self_id: p.get_id(),\n                     dec: ct_d,\n                     body: ct_b},\n-             span: ct_s}, rp),\n+                     span: ct_s}, actual_dtor, rp),\n         none)\n       }\n        /*\n@@ -1982,24 +1992,41 @@ fn parse_single_class_item(p: parser, vis: visibility)\n    }\n }\n \n-// lets us identify the constructor declaration at\n-// parse time\n+/*\n+  So that we can distinguish a class ctor or dtor\n+  from other class members\n+ */\n enum class_contents { ctor_decl(fn_decl, blk, codemap::span),\n+                      dtor_decl(blk, codemap::span),\n                       members([@class_member]) }\n \n+fn parse_ctor(p: parser, result_ty: ast::ty_) -> class_contents {\n+  // Can ctors/dtors have attrs? FIXME\n+  let lo = p.last_span.lo;\n+  let (decl_, _) = parse_fn_decl(p, impure_fn, parse_arg);\n+  let decl = {output: @{id: p.get_id(),\n+                        node: result_ty, span: decl_.output.span}\n+              with decl_};\n+  let body = parse_block(p);\n+  ctor_decl(decl, body, mk_sp(lo, p.last_span.hi))\n+}\n+\n+fn parse_dtor(p: parser) -> class_contents {\n+  // Can ctors/dtors have attrs? FIXME\n+  let lo = p.last_span.lo;\n+  let body = parse_block(p);\n+  dtor_decl(body, mk_sp(lo, p.last_span.hi))\n+}\n+\n fn parse_class_item(p:parser, class_name_with_tps: @path)\n     -> class_contents {\n     if eat_keyword(p, \"new\") {\n-        let lo = p.last_span.lo;\n-        // Can ctors have attrs?\n-            // result type is always the type of the class\n-        let (decl_, _) = parse_fn_decl(p, impure_fn, parse_arg);\n-        let decl = {output: @{id: p.get_id(),\n-                      node: ty_path(class_name_with_tps, p.get_id()),\n-                      span: decl_.output.span}\n-                    with decl_};\n-        let body = parse_block(p);\n-        ret ctor_decl(decl, body, mk_sp(lo, p.last_span.hi));\n+       // result type is always the type of the class\n+       ret parse_ctor(p, ty_path(class_name_with_tps,\n+                              p.get_id()));\n+    }\n+    else if eat_keyword(p, \"drop\") {\n+      ret parse_dtor(p);\n     }\n     else if eat_keyword(p, \"priv\") {\n             expect(p, token::LBRACE);"}, {"sha": "07e2d6fa249d607f499184333e1089b606fa6599", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -261,7 +261,7 @@ fn restricted_keyword_table() -> hashmap<str, ()> {\n         \"assert\",\n         \"be\", \"break\",\n         \"check\", \"claim\", \"class\", \"const\", \"cont\", \"copy\", \"crust\",\n-        \"do\",\n+        \"do\", \"drop\",\n         \"else\", \"enum\", \"export\",\n         \"fail\", \"false\", \"fn\", \"for\",\n         \"if\", \"iface\", \"impl\", \"import\","}, {"sha": "5f1f2323b6080c578e4ccccca2f3193408dd2518", "filename": "src/librustsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fprint%2Fpprust.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -507,7 +507,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n             bclose(s, item.span);\n         }\n       }\n-      ast::item_class(tps,ifaces,items,ctor, rp) {\n+      ast::item_class(tps, ifaces, items, ctor, m_dtor, rp) {\n           head(s, \"class\");\n           word_nbsp(s, item.ident);\n           print_region_param(s, rp);\n@@ -522,6 +522,11 @@ fn print_item(s: ps, &&item: @ast::item) {\n           print_fn_args_and_ret(s, ctor.node.dec, []);\n           space(s.s);\n           print_block(s, ctor.node.body);\n+          option::iter(m_dtor) {|dtor|\n+            hardbreak_if_not_bol(s);\n+            head(s, \"drop\");\n+            print_block(s, dtor.node.body);\n+          }\n           for items.each {|ci|\n                   /*\n                      FIXME: collect all private items and print them"}, {"sha": "980f9244c353e3f47b4d5a5e5ca3f8009d6ab1b3", "filename": "src/librustsyntax/visit.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Flibrustsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fvisit.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -19,21 +19,25 @@ enum fn_kind {\n     fk_anon(proto, capture_clause),  //< an anonymous function like fn@(...)\n     fk_fn_block(capture_clause),     //< a block {||...}\n     fk_ctor(ident, [ty_param], node_id /* self id */,\n-            def_id /* parent class id */) // class constructor\n+            def_id /* parent class id */), // class constructor\n+    fk_dtor([ty_param], node_id /* self id */,\n+            def_id /* parent class id */) // class destructor\n+\n }\n \n fn name_of_fn(fk: fn_kind) -> ident {\n     alt fk {\n       fk_item_fn(name, _) | fk_method(name, _, _) | fk_res(name, _, _)\n           | fk_ctor(name, _, _, _) { name }\n       fk_anon(*) | fk_fn_block(*) { \"anon\" }\n+      fk_dtor(*)                  { \"drop\" }\n     }\n }\n \n fn tps_of_fn(fk: fn_kind) -> [ty_param] {\n     alt fk {\n       fk_item_fn(_, tps) | fk_method(_, tps, _) | fk_res(_, tps, _)\n-          | fk_ctor(_, tps, _, _) { tps }\n+          | fk_ctor(_, tps, _, _) | fk_dtor(tps, _, _) { tps }\n       fk_anon(*) | fk_fn_block(*) { [] }\n     }\n }\n@@ -140,14 +144,17 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n             visit_method_helper(m, e, v)\n         }\n       }\n-      item_class(tps, ifaces, members, ctor, _) {\n+      item_class(tps, ifaces, members, ctor, m_dtor, _) {\n           v.visit_ty_params(tps, e, v);\n           for members.each {|m|\n              v.visit_class_item(m, e, v);\n           }\n           for ifaces.each {|p| visit_path(p.path, e, v); }\n           visit_class_ctor_helper(ctor, i.ident, tps,\n                                   ast_util::local_def(i.id), e, v);\n+          option::iter(m_dtor) {|dtor|\n+                  visit_class_dtor_helper(dtor, tps,\n+                     ast_util::local_def(i.id), e, v)};\n       }\n       item_iface(tps, _rp, methods) {\n         v.visit_ty_params(tps, e, v);\n@@ -280,12 +287,20 @@ fn visit_method_helper<E>(m: @method, e: E, v: vt<E>) {\n // Similar logic to the comment on visit_method_helper - Tim\n fn visit_class_ctor_helper<E>(ctor: class_ctor, nm: ident, tps: [ty_param],\n                               parent_id: def_id, e: E, v: vt<E>) {\n-    v.visit_fn(visit::fk_ctor(nm, tps, ctor.node.self_id,\n+    v.visit_fn(fk_ctor(nm, tps, ctor.node.self_id,\n                               parent_id), ctor.node.dec,\n                ctor.node.body, ctor.span, ctor.node.id, e, v)\n \n }\n \n+fn visit_class_dtor_helper<E>(dtor: class_dtor, tps: [ty_param],\n+                              parent_id: def_id, e: E, v: vt<E>) {\n+    v.visit_fn(fk_dtor(tps, dtor.node.self_id,\n+                       parent_id), ast_util::dtor_dec(),\n+               dtor.node.body, dtor.span, dtor.node.id, e, v)\n+\n+}\n+\n fn visit_fn<E>(fk: fn_kind, decl: fn_decl, body: blk, _sp: span,\n                _id: node_id, e: E, v: vt<E>) {\n     visit_fn_decl(decl, e, v);"}, {"sha": "315836fc0c34ae362cb6df2b7ead05bda80a9742", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -214,6 +214,13 @@ fn visit_ids(item: ast::inlined_item, vfn: fn@(ast::node_id)) {\n                 vfn(self_id);\n                 vfn(parent_id.node);\n               }\n+              // not sure if this should be here? FIXME\n+              visit::fk_dtor(tps, self_id, parent_id) {\n+                vec::iter(tps) {|tp| vfn(tp.id)}\n+                vfn(id);\n+                vfn(self_id);\n+                vfn(parent_id.node);\n+              }\n               visit::fk_item_fn(_, tps) |\n               visit::fk_res(_, tps, _) {\n                 vec::iter(tps) {|tp| vfn(tp.id)}"}, {"sha": "3afa3776ccac98dd339d6b19ce6be802759c1629", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -187,7 +187,8 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             encode_def_id(ebml_w, local_def(it.id));\n             ebml_w.end_tag();\n           }\n-          item_class(_, _, items, ctor, _) {\n+          // FIXME: I don't *think* dtor needs to be serialized?\n+          item_class(_, _, items, ctor, _dtor, _) {\n             add_to_index(ebml_w, path, index, it.ident);\n             ebml_w.start_tag(tag_paths_data_item);\n             encode_name(ebml_w, it.ident);\n@@ -621,7 +622,8 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_enum_variant_info(ecx, ebml_w, item.id, variants,\n                                  path, index, tps);\n       }\n-      item_class(tps, ifaces, items, ctor, rp) {\n+      // FIXME: not sure if the dtor should be serialized\n+      item_class(tps, ifaces, items, ctor, _dtor, rp) {\n         /* First, encode the fields and methods\n            These come first because we need to write them to make\n            the index, and the index needs to be in the item for the\n@@ -801,7 +803,8 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                 encode_info_for_item(ecx, ebml_w, i, index, *pt);\n                 /* encode ctor, then encode items */\n                 alt i.node {\n-                  item_class(tps, _, _, ctor, _) {\n+                   // FIXME: not doing anything with dtor\n+                   item_class(tps, _, _, ctor, _, _) {\n                    /* this is assuming that ctors aren't inlined...\n                       probably shouldn't assume that */\n                    #debug(\"encoding info for ctor %s %d\", i.ident,"}, {"sha": "ef5851c3faf5fa55221ac4e994491c539f7a694e", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -47,6 +47,8 @@ enum ast_node {\n     node_local(uint),\n     // Constructor for either a resource or a class\n     node_ctor(ident, [ty_param], a_ctor, @path),\n+    // Destructor for a class\n+    node_dtor([ty_param], @class_dtor, def_id, @path),\n     node_block(blk),\n }\n \n@@ -134,6 +136,12 @@ fn map_fn(fk: visit::fn_kind, decl: fn_decl, body: blk,\n           cx.map.insert(id, node_ctor(nm, tps, class_ctor(ct, parent_id),\n                                       @cx.path));\n        }\n+      visit::fk_dtor(tps, self_id, parent_id) {\n+          let dt = @{node: {id: id, self_id: self_id, body: body},\n+                    span: sp};\n+          cx.map.insert(id, node_dtor(tps, dt, parent_id, @cx.path));\n+       }\n+\n        _ {}\n     }\n     visit::visit_fn(fk, decl, body, sp, id, cx, v);\n@@ -204,7 +212,7 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n             cx.map.insert(nitem.id, node_native_item(nitem, abi, @cx.path));\n         }\n       }\n-      item_class(tps, ifces, items, ctor, _) {\n+      item_class(tps, ifces, items, ctor, dtor, _) {\n           let (_, ms) = ast_util::split_class_items(items);\n           // Map iface refs to their parent classes. This is\n           // so we can find the self_ty\n@@ -283,9 +291,12 @@ fn node_id_to_str(map: map, id: node_id) -> str {\n       some(node_local(_)) { // FIXME: add more info here\n         #fmt[\"local (id=%?)\", id]\n       }\n-      some(node_ctor(_, _, _, _)) { // FIXME: add more info here\n+      some(node_ctor(*)) { // FIXME: add more info here\n         #fmt[\"node_ctor (id=%?)\", id]\n       }\n+      some(node_dtor(*)) { // FIXME: add more info here\n+        #fmt[\"node_dtor (id=%?)\", id]\n+      }\n       some(node_block(_)) {\n         #fmt[\"block\"]\n       }"}, {"sha": "999c43904875c5f7e407a0d94a5046139dbdac48", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -133,7 +133,7 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n         let cap_clause = alt fk {\n           visit::fk_anon(_, cc) | visit::fk_fn_block(cc) { cc }\n           visit::fk_item_fn(*) | visit::fk_method(*) |\n-          visit::fk_res(*) | visit::fk_ctor(*) { @[] }\n+          visit::fk_res(*) | visit::fk_ctor(*) | visit::fk_dtor(*) { @[] }\n         };\n         let captured_vars = (*cap_clause).map { |cap_item|\n             let cap_def = cx.tcx.def_map.get(cap_item.id);"}, {"sha": "6cdc2724e0c7249a04ada576a166fe137da93e64", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -375,7 +375,7 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n \n     let fn_cx = alt fk {\n       visit::fk_item_fn(*) | visit::fk_method(*) | visit::fk_res(*) |\n-      visit::fk_ctor(*) {\n+      visit::fk_ctor(*) | visit::fk_dtor(*) {\n         // Top-level functions are a root scope.\n         {parent: some(id), closure_parent: some(id) with cx}\n       }"}, {"sha": "8e9eccf5a0b8de1fe5e9dabe9dd6a9ced0b35db6", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -437,7 +437,7 @@ fn resolve_names(e: @env, c: @ast::crate) {\n           ast::item_impl(_, _, ifce, _, _) {\n             ifce.iter {|p| resolve_iface_ref(p, sc, e);}\n           }\n-          ast::item_class(_, ifaces, _, _, _) {\n+          ast::item_class(_, ifaces, _, _, _, _) {\n             for ifaces.each {|p|\n                resolve_iface_ref(p, sc, e);\n             }\n@@ -564,22 +564,31 @@ fn visit_item_with_scope(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n             v.visit_ty(m.decl.output, msc, v);\n         }\n       }\n-      ast::item_class(tps, ifaces, members, ctor, _) {\n+      ast::item_class(tps, ifaces, members, ctor, m_dtor, _) {\n         visit::visit_ty_params(tps, sc, v);\n         // Can maybe skip this now that we require self on class fields\n         let class_scope = cons(scope_item(i), @sc);\n         /* visit the constructor... */\n         let ctor_scope = cons(scope_method(ctor.node.self_id, tps),\n                               @class_scope);\n-        /*\n-          but, I should visit the ifaces refs in the class scope, no?\n-         */\n+        /* visit the iface refs in the class scope */\n         for ifaces.each {|p|\n             visit::visit_path(p.path, class_scope, v);\n         }\n+        // FIXME: should be fk_ctor?\n         visit_fn_with_scope(e, visit::fk_item_fn(i.ident, tps), ctor.node.dec,\n                             ctor.node.body, ctor.span, ctor.node.id,\n                             ctor_scope, v);\n+        option::iter(m_dtor) {|dtor|\n+          let dtor_scope = cons(scope_method(dtor.node.self_id, tps),\n+                              @class_scope);\n+\n+          visit_fn_with_scope(e, visit::fk_dtor(tps, dtor.node.self_id,\n+                                                local_def(i.id)),\n+                            ast_util::dtor_dec(),\n+                            dtor.node.body, dtor.span, dtor.node.id,\n+                            dtor_scope, v);\n+        };\n         /* visit the items */\n         for members.each {|cm|\n             alt cm.node {\n@@ -625,7 +634,8 @@ fn visit_fn_with_scope(e: @env, fk: visit::fn_kind, decl: ast::fn_decl,\n     for decl.constraints.each {|c| resolve_constr(e, c, sc, v); }\n     let scope = alt fk {\n       visit::fk_item_fn(_, tps) | visit::fk_res(_, tps, _) |\n-      visit::fk_method(_, tps, _) | visit::fk_ctor(_, tps, _, _) {\n+      visit::fk_method(_, tps, _) | visit::fk_ctor(_, tps, _, _)  |\n+      visit::fk_dtor(tps, _, _) {\n         scope_bare_fn(decl, id, tps) }\n       visit::fk_anon(ast::proto_bare, _) {\n         scope_bare_fn(decl, id, []) }\n@@ -1041,7 +1051,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace,\n               ast::item_native_mod(m) {\n                 ret lookup_in_local_native_mod(e, it.id, sp, name, ns);\n               }\n-              ast::item_class(tps, _, members, ctor, _) {\n+              ast::item_class(tps, _, members, ctor, _, _) {\n                   if ns == ns_type {\n                     ret lookup_in_ty_params(e, name, tps);\n                   }\n@@ -1633,7 +1643,7 @@ fn index_mod(md: ast::_mod) -> mod_index {\n                 variant_idx += 1u;\n             }\n           }\n-          ast::item_class(tps, _, items, ctor, _) {\n+          ast::item_class(tps, _, items, ctor, _, _) {\n               // add the class name itself\n               add_to_index(index, it.ident, mie_item(it));\n               // add the constructor decl\n@@ -2236,7 +2246,7 @@ fn find_impls_in_item(e: env, i: @ast::item, &impls: [@_impl],\n                         })}];\n         }\n       }\n-      ast::item_class(tps, ifces, items, _, _) {\n+      ast::item_class(tps, ifces, items, _, _, _) {\n           let (_, mthds) = ast_util::split_class_items(items);\n           let n_tps = tps.len();\n           vec::iter(ifces) {|p|"}, {"sha": "0136570a68ab125fd0e740d321888e8656e539a7", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -4443,6 +4443,15 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n   finish_fn(fcx, lltop);\n }\n \n+fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n+                    body: ast::blk, lldtor_decl: ValueRef,\n+                    dtor_id: ast::node_id,\n+                    parent_id: ast::def_id) {\n+    let class_ty = ty::lookup_item_type(ccx.tcx, parent_id).ty;\n+  trans_fn(ccx, path, ast_util::dtor_dec(),\n+           body, lldtor_decl, impl_self(class_ty), none, dtor_id);\n+}\n+\n fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n     let _icx = ccx.insn_ctxt(\"trans_item\");\n     let path = alt check ccx.tcx.items.get(item.id) {\n@@ -4509,7 +4518,7 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n         };\n         native::trans_native_mod(ccx, native_mod, abi);\n       }\n-      ast::item_class(tps, _ifaces, items, ctor, _) {\n+      ast::item_class(tps, _ifaces, items, ctor, m_dtor, _) {\n         if tps.len() == 0u {\n           let psubsts = {tys: ty::ty_params_to_tys(ccx.tcx, tps),\n                          // FIXME: vtables have to get filled in depending\n@@ -4519,6 +4528,11 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n           trans_class_ctor(ccx, *path, ctor.node.dec, ctor.node.body,\n                            get_item_val(ccx, ctor.node.id), psubsts,\n                            ctor.node.id, local_def(item.id), ctor.span);\n+          option::iter(m_dtor) {|dtor|\n+            trans_class_dtor(ccx, *path, dtor.node.body,\n+                           get_item_val(ccx, dtor.node.id),\n+                           dtor.node.id, local_def(item.id));\n+          };\n         }\n         // If there are ty params, the ctor will get monomorphized\n \n@@ -4744,6 +4758,12 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n               }\n             }\n           }\n+          ast_map::node_dtor(tps, dt, parent_id, pt) {\n+            let my_path = *pt + [path_name(\"dtor\")];\n+            let t = ty::node_id_to_type(ccx.tcx, dt.node.id);\n+            register_fn_full(ccx, dt.span, my_path, dt.node.id, t)\n+          }\n+\n           ast_map::node_variant(v, enm, pth) {\n             assert v.node.args.len() != 0u;\n             let pth = *pth + [path_name(enm.ident), path_name(v.node.name)];"}, {"sha": "7578b0d13518b392b70105749f71f00d0eddacc4", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -94,7 +94,7 @@ fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,\n             method_from_methods(ms, name)\n           }\n           ast_map::node_item(@{node:\n-               ast::item_class(_, _, items, _, _), _}, _) {\n+              ast::item_class(_, _, items, _, _, _), _}, _) {\n             let (_,ms) = split_class_items(items);\n             method_from_methods(ms, name)\n           }"}, {"sha": "cfae74b8eb1fd0e01ff57ac10d39a05daba248bd", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -102,8 +102,11 @@ fn traverse_public_item(cx: ctx, item: @item) {\n             }\n         }\n       }\n-      item_class(tps, _ifaces, items, ctor, _) {\n+      item_class(tps, _ifaces, items, ctor, m_dtor, _) {\n         cx.rmap.insert(ctor.node.id, ());\n+        option::iter(m_dtor) {|dtor|\n+            cx.rmap.insert(dtor.node.id, ());\n+        }\n         for vec::each(items) {|item|\n             alt item.node {\n               class_method(m) {"}, {"sha": "e5bcec7a46cd8072729262056449d47fdfa5d936", "filename": "src/rustc/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -57,7 +57,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n              ccx: ccx};\n         find_pre_post_fn(fcx, body);\n       }\n-      item_class(_,_,_,_,_) {\n+      item_class(*) {\n           fail \"find_pre_post_item: shouldn't be called on item_class\";\n       }\n       item_impl(_, _, _, _, ms) {"}, {"sha": "c4f5c0663d37e13bf320b816abfed315b4386fbb", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -2326,7 +2326,7 @@ fn impl_iface(cx: ctxt, id: ast::def_id) -> option<t> {\n               _, _, some(@{id: id, _}), _, _), _}, _)) {\n               some(node_id_to_type(cx, id))\n            }\n-           some(ast_map::node_item(@{node: ast::item_class(_, _, _, _, _),\n+           some(ast_map::node_item(@{node: ast::item_class(_, _, _, _, _, _),\n                            _},_)) {\n              alt cx.def_map.find(id.node) {\n                some(def_ty(iface_id)) {\n@@ -2408,6 +2408,10 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           ast_map::node_ctor(nm, _, _, path) {\n               *path + [ast_map::path_name(nm)]\n           }\n+          ast_map::node_dtor(_, _, _, path) {\n+              *path + [ast_map::path_name(\"dtor\")]\n+          }\n+\n \n           ast_map::node_expr(_) | ast_map::node_arg(_, _) |\n           ast_map::node_local(_) | ast_map::node_export(_, _) |\n@@ -2527,7 +2531,7 @@ fn lookup_class_fields(cx: ctxt, did: ast::def_id) -> [field_ty] {\n     alt cx.items.find(did.node) {\n        some(ast_map::node_item(i,_)) {\n          alt i.node {\n-           ast::item_class(_, _, items, _, _) {\n+                 ast::item_class(_, _, items, _, _, _) {\n                class_field_tys(items)\n            }\n            _ { cx.sess.bug(\"class ID bound to non-class\"); }\n@@ -2569,7 +2573,7 @@ pure fn is_public(f: field_ty) -> bool {\n fn lookup_class_method_ids(cx: ctxt, did: ast::def_id)\n     : is_local(did) -> [{name: ident, id: node_id, vis: visibility}] {\n     alt cx.items.find(did.node) {\n-       some(ast_map::node_item(@{node: item_class(_,_,items,_,_), _}, _)) {\n+       some(ast_map::node_item(@{node: item_class(_,_,items,_,_,_), _}, _)) {\n          let (_,ms) = split_class_items(items);\n          vec::map(ms, {|m| {name: m.ident, id: m.id,\n                             vis: m.vis}})"}, {"sha": "8d89716167875cab9affe654336040791742bebb", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -926,7 +926,7 @@ fn ty_of_item(ccx: @crate_ctxt, it: @ast::item)\n         tcx.tcache.insert(local_def(it.id), tpt);\n         ret tpt;\n       }\n-      ast::item_class(tps, _, _, _, rp) {\n+      ast::item_class(tps, _, _, _, _, rp) {\n           let {bounds,substs} = mk_substs(ccx, tps, rp);\n           let t = ty::mk_class(tcx, local_def(it.id), substs);\n           let tpt = {bounds: bounds, rp: rp, ty: t};\n@@ -1487,7 +1487,7 @@ mod collect {\n                   ty_of_ty_method(ccx, m, rp)\n               };\n           }\n-          ast_map::node_item(@{node: ast::item_class(_,_,its,_,rp), _}, _) {\n+          ast_map::node_item(@{node: ast::item_class(_,_,its,_,_,rp), _}, _) {\n               let (_,ms) = split_class_items(its);\n               // All methods need to be stored, since lookup_method\n               // relies on the same method cache for self-calls\n@@ -1654,7 +1654,7 @@ mod collect {\n             write_ty_to_tcx(tcx, it.id, tpt.ty);\n             ensure_iface_methods(ccx, it.id);\n           }\n-          ast::item_class(tps, ifaces, members, ctor, rp) {\n+          ast::item_class(tps, ifaces, members, ctor, m_dtor, rp) {\n             // Write the class type\n             let tpt = ty_of_item(ccx, it);\n             write_ty_to_tcx(tcx, it.id, tpt.ty);\n@@ -1671,6 +1671,22 @@ mod collect {\n                               {bounds: tpt.bounds,\n                                rp: ast::rp_none,\n                                ty: t_ctor});\n+            option::iter(m_dtor) {|dtor|\n+              // Write the dtor type\n+              let t_dtor = ty::mk_fn(tcx,\n+                                   // not sure about empty_rscope\n+                                   // FIXME\n+                                   ty_of_fn_decl(ccx,\n+                                                 empty_rscope,\n+                                                 ast::proto_any,\n+                                                 ast_util::dtor_dec(),\n+                                                 none));\n+              write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n+              tcx.tcache.insert(local_def(dtor.node.id),\n+                                {bounds: tpt.bounds,\n+                                 rp: ast::rp_none,\n+                                 ty: t_dtor});\n+            };\n             ensure_iface_methods(ccx, it.id);\n             /* FIXME: check for proper public/privateness */\n             // Write the type of each of the members\n@@ -2441,7 +2457,7 @@ fn impl_self_ty(fcx: @fn_ctxt, did: ast::def_id) -> ty_param_substs_and_ty {\n              raw_ty: fcx.ccx.to_ty(type_rscope(rp), st)}\n           }\n           some(ast_map::node_item(@{node: ast::item_class(ts,\n-                                    _,_,_,rp), id: class_id, _},_)) {\n+                                 _,_,_,_,rp), id: class_id, _},_)) {\n               /* If the impl is a class, the self ty is just the class ty\n                  (doing a no-op subst for the ty params; in the next step,\n                  we substitute in fresh vars for them)\n@@ -4443,7 +4459,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         let self_ty = ccx.to_ty(type_rscope(rp), ty);\n         for ms.each {|m| check_method(ccx, m, self_ty);}\n       }\n-      ast::item_class(tps, ifaces, members, ctor, rp) {\n+      ast::item_class(tps, ifaces, members, ctor, m_dtor, rp) {\n           let cid = some(it.id), tcx = ccx.tcx;\n           let class_t = ty::node_id_to_type(tcx, it.id);\n           let members_info = class_types(ccx, members, rp);\n@@ -4458,6 +4474,14 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n           // Write the ctor's self's type\n           write_ty_to_tcx(tcx, ctor.node.self_id, class_t);\n \n+          option::iter(m_dtor) {|dtor|\n+            // typecheck the dtor\n+           check_bare_fn(class_ccx, ast_util::dtor_dec(),\n+                           dtor.node.body, dtor.node.id,\n+                           some(class_t));\n+           // Write the dtor's self's type\n+           write_ty_to_tcx(tcx, dtor.node.self_id, class_t);\n+          };\n           // typecheck the members\n           for members.each {|m| check_class_member(class_ccx, class_t, m); }\n       }"}, {"sha": "8c539cd8328e994e3b9e3dbd291e11a9e0bc2ebf", "filename": "src/test/run-pass/class-dtor.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=5428a22b95ccd8c84a402e2f5cb4aa53ddc6f4d4", "patch": "@@ -0,0 +1,11 @@\n+class cat {\n+  let done : native fn(uint);\n+  let meows : uint;\n+  new(done: native fn(uint)) {\n+    self.meows = 0u;\n+    self.done = done;\n+  }\n+  drop { self.done(self.meows); }\n+}\n+\n+fn main() {}"}]}