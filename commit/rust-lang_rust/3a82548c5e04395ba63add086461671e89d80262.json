{"sha": "3a82548c5e04395ba63add086461671e89d80262", "node_id": "C_kwDOAAsO6NoAKDNhODI1NDhjNWUwNDM5NWJhNjNhZGQwODY0NjE2NzFlODlkODAyNjI", "commit": {"author": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-06T22:33:24Z"}, "committer": {"name": "C\u00f4me ALLART", "email": "come.allart@etu.emse.fr", "date": "2021-12-06T22:33:24Z"}, "message": "fix: reduce assist scope: pub fn's in pub modules", "tree": {"sha": "888588523fb728590170592a1ea0117156393d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888588523fb728590170592a1ea0117156393d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a82548c5e04395ba63add086461671e89d80262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a82548c5e04395ba63add086461671e89d80262", "html_url": "https://github.com/rust-lang/rust/commit/3a82548c5e04395ba63add086461671e89d80262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a82548c5e04395ba63add086461671e89d80262/comments", "author": null, "committer": null, "parents": [{"sha": "d55d3b63cb5276e3aa4681ca256565b64037d80d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d55d3b63cb5276e3aa4681ca256565b64037d80d", "html_url": "https://github.com/rust-lang/rust/commit/d55d3b63cb5276e3aa4681ca256565b64037d80d"}], "stats": {"total": 148, "additions": 102, "deletions": 46}, "files": [{"sha": "09179af6138ef3781511434d5d76c6eb596654ad", "filename": "crates/ide_assists/src/handlers/generate_documentation_template.rs", "status": "modified", "additions": 100, "deletions": 44, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/3a82548c5e04395ba63add086461671e89d80262/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a82548c5e04395ba63add086461671e89d80262/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_documentation_template.rs?ref=3a82548c5e04395ba63add086461671e89d80262", "patch": "@@ -1,7 +1,7 @@\n use ide_db::assists::{AssistId, AssistKind};\n use stdx::to_lower_snake_case;\n use syntax::{\n-    ast::{self, edit::IndentLevel, HasDocComments, HasName},\n+    ast::{self, edit::IndentLevel, HasDocComments, HasName, HasVisibility},\n     AstNode,\n };\n \n@@ -12,7 +12,7 @@ use crate::assist_context::{AssistContext, Assists};\n // Adds a documentation template above a function definition / declaration.\n //\n // ```\n-// fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n+// pub fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n //     unimplemented!()\n // }\n // ```\n@@ -31,7 +31,7 @@ use crate::assist_context::{AssistContext, Assists};\n // /// # Errors\n // ///\n // /// This function will return an error if .\n-// fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n+// pub fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n //     unimplemented!()\n // }\n // ```\n@@ -40,17 +40,10 @@ pub(crate) fn generate_documentation_template(\n     ctx: &AssistContext,\n ) -> Option<()> {\n     let name = ctx.find_node_at_offset::<ast::Name>()?;\n-    let ast_func = ast::Fn::cast(name.syntax().parent()?)?;\n-    if is_in_trait_impl(&ast_func) {\n+    let ast_func = name.syntax().parent().and_then(ast::Fn::cast)?;\n+    if is_in_trait_impl(&ast_func) || !is_public(&ast_func) {\n         return None;\n     }\n-    // TODO disable at least examples if function not public, as the example will fail to build on\n-    // `cargo test`. What is the exact criteria of `pub`ness? All parent modules must be `pub`, for\n-    // `impl { fn }` both `fn` and `struct`* must be public.\n-    //\n-    // What about `pub(crate)`?\n-    //\n-    // *: Seems complex but maybe ignoring this criteria can be ignored.\n \n     let parent_syntax = ast_func.syntax();\n     let text_range = parent_syntax.text_range();\n@@ -217,6 +210,21 @@ fn gen_ex_start_helper(ast_func: &ast::Fn, krate_name: String) -> Option<(Vec<St\n     Some((lines, ex_helper))\n }\n \n+/// Check if the function and all its parent modules are exactly `pub`\n+fn is_public(ast_func: &ast::Fn) -> bool {\n+    has_pub(ast_func)\n+        && ast_func\n+            .syntax()\n+            .ancestors()\n+            .filter_map(ast::Module::cast)\n+            .all(|module| has_pub(&module))\n+}\n+\n+/// Check if visibility is exactly `pub` (not `pub(crate)` for instance)\n+fn has_pub<T: HasVisibility>(item: &T) -> bool {\n+    item.visibility().map(|v| v.path().is_none()).unwrap_or(false)\n+}\n+\n /// `None` if function without a body; some bool to guess if function can panic\n fn can_panic(ast_func: &ast::Fn) -> Option<bool> {\n     let body = ast_func.body()?.to_string();\n@@ -445,12 +453,60 @@ impl MyTrait for MyStruct {\n         )\n     }\n \n+    #[test]\n+    fn not_applicable_if_function_is_private() {\n+        check_assist_not_applicable(generate_documentation_template, r#\"fn priv$0ate() {}\"#);\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_function_is_pub_crate() {\n+        check_assist_not_applicable(\n+            generate_documentation_template,\n+            r#\"pub(crate) fn pri$0vate() {}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_function_is_in_private_mod() {\n+        check_assist_not_applicable(\n+            generate_documentation_template,\n+            r#\"\n+mod PrivateModule {\n+    pub fn pri$0vate() {}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_function_is_in_pub_crate_mod() {\n+        check_assist_not_applicable(\n+            generate_documentation_template,\n+            r#\"\n+pub(crate) mod PrivateModule {\n+    pub fn pr$0ivate() {}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_if_function_is_in_non_public_mod_is_recursive() {\n+        check_assist_not_applicable(\n+            generate_documentation_template,\n+            r#\"\n+mod ParentPrivateModule {\n+    pub mod PrivateModule {\n+        pub fn pr$0ivate() {}\n+    }\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn supports_noop_function() {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn no$0op() {}\n+pub fn no$0op() {}\n \"#,\n             r#\"\n /// .\n@@ -462,7 +518,7 @@ fn no$0op() {}\n ///\n /// noop();\n /// ```\n-fn noop() {}\n+pub fn noop() {}\n \"#,\n         );\n     }\n@@ -472,7 +528,7 @@ fn noop() {}\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn no$0op_with_param(_a: i32) {}\n+pub fn no$0op_with_param(_a: i32) {}\n \"#,\n             r#\"\n /// .\n@@ -484,7 +540,7 @@ fn no$0op_with_param(_a: i32) {}\n ///\n /// noop_with_param(_a);\n /// ```\n-fn noop_with_param(_a: i32) {}\n+pub fn noop_with_param(_a: i32) {}\n \"#,\n         );\n     }\n@@ -494,7 +550,7 @@ fn noop_with_param(_a: i32) {}\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-unsafe fn no$0op_unsafe() {}\n+pub unsafe fn no$0op_unsafe() {}\n \"#,\n             r#\"\n /// .\n@@ -510,7 +566,7 @@ unsafe fn no$0op_unsafe() {}\n /// # Safety\n ///\n /// .\n-unsafe fn noop_unsafe() {}\n+pub unsafe fn noop_unsafe() {}\n \"#,\n         );\n     }\n@@ -520,7 +576,7 @@ unsafe fn noop_unsafe() {}\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn panic$0s_if(a: bool) {\n+pub fn panic$0s_if(a: bool) {\n     if a {\n         panic!();\n     }\n@@ -546,7 +602,7 @@ fn panic$0s_if(a: bool) {\n /// # Panics\n ///\n /// Panics if .\n-fn panics_if(a: bool) {\n+pub fn panics_if(a: bool) {\n     if a {\n         panic!();\n     }\n@@ -560,7 +616,7 @@ fn panics_if(a: bool) {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn $0panics_if_not(a: bool) {\n+pub fn $0panics_if_not(a: bool) {\n     assert!(a == true);\n }\n \"#,\n@@ -584,7 +640,7 @@ fn $0panics_if_not(a: bool) {\n /// # Panics\n ///\n /// Panics if .\n-fn panics_if_not(a: bool) {\n+pub fn panics_if_not(a: bool) {\n     assert!(a == true);\n }\n \"#,\n@@ -596,7 +652,7 @@ fn panics_if_not(a: bool) {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn $0panics_if_none(a: Option<()>) {\n+pub fn $0panics_if_none(a: Option<()>) {\n     a.unwrap();\n }\n \"#,\n@@ -620,7 +676,7 @@ fn $0panics_if_none(a: Option<()>) {\n /// # Panics\n ///\n /// Panics if .\n-fn panics_if_none(a: Option<()>) {\n+pub fn panics_if_none(a: Option<()>) {\n     a.unwrap();\n }\n \"#,\n@@ -632,7 +688,7 @@ fn panics_if_none(a: Option<()>) {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn $0panics_if_none2(a: Option<()>) {\n+pub fn $0panics_if_none2(a: Option<()>) {\n     a.expect(\"Bouh!\");\n }\n \"#,\n@@ -656,7 +712,7 @@ fn $0panics_if_none2(a: Option<()>) {\n /// # Panics\n ///\n /// Panics if .\n-fn panics_if_none2(a: Option<()>) {\n+pub fn panics_if_none2(a: Option<()>) {\n     a.expect(\"Bouh!\");\n }\n \"#,\n@@ -668,7 +724,7 @@ fn panics_if_none2(a: Option<()>) {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn returns_a_value$0() -> i32 {\n+pub fn returns_a_value$0() -> i32 {\n     0\n }\n \"#,\n@@ -682,7 +738,7 @@ fn returns_a_value$0() -> i32 {\n ///\n /// assert_eq!(returns_a_value(), );\n /// ```\n-fn returns_a_value() -> i32 {\n+pub fn returns_a_value() -> i32 {\n     0\n }\n \"#,\n@@ -694,7 +750,7 @@ fn returns_a_value() -> i32 {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn returns_a_result$0() -> Result<i32, std::io::Error> {\n+pub fn returns_a_result$0() -> Result<i32, std::io::Error> {\n     Ok(0)\n }\n \"#,\n@@ -712,7 +768,7 @@ fn returns_a_result$0() -> Result<i32, std::io::Error> {\n /// # Errors\n ///\n /// This function will return an error if .\n-fn returns_a_result() -> Result<i32, std::io::Error> {\n+pub fn returns_a_result() -> Result<i32, std::io::Error> {\n     Ok(0)\n }\n \"#,\n@@ -724,7 +780,7 @@ fn returns_a_result() -> Result<i32, std::io::Error> {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn modifies_a_value$0(a: &mut i32) {\n+pub fn modifies_a_value$0(a: &mut i32) {\n     *a = 0;\n }\n \"#,\n@@ -740,7 +796,7 @@ fn modifies_a_value$0(a: &mut i32) {\n /// modifies_a_value(&mut a);\n /// assert_eq!(a, );\n /// ```\n-fn modifies_a_value(a: &mut i32) {\n+pub fn modifies_a_value(a: &mut i32) {\n     *a = 0;\n }\n \"#,\n@@ -752,7 +808,7 @@ fn modifies_a_value(a: &mut i32) {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-fn sum3$0(a: i32, b: i32, c: i32) -> i32 {\n+pub fn sum3$0(a: i32, b: i32, c: i32) -> i32 {\n     a + b + c\n }\n \"#,\n@@ -767,7 +823,7 @@ fn sum3$0(a: i32, b: i32, c: i32) -> i32 {\n /// let result = sum3(a, b, c);\n /// assert_eq!(result, );\n /// ```\n-fn sum3(a: i32, b: i32, c: i32) -> i32 {\n+pub fn sum3(a: i32, b: i32, c: i32) -> i32 {\n     a + b + c\n }\n \"#,\n@@ -779,15 +835,15 @@ fn sum3(a: i32, b: i32, c: i32) -> i32 {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-mod a {\n-    mod b {\n-        fn no$0op() {}\n+pub mod a {\n+    pub mod b {\n+        pub fn no$0op() {}\n     }\n }\n \"#,\n             r#\"\n-mod a {\n-    mod b {\n+pub mod a {\n+    pub mod b {\n         /// .\n         ///\n         /// # Examples\n@@ -797,7 +853,7 @@ mod a {\n         ///\n         /// noop();\n         /// ```\n-        fn noop() {}\n+        pub fn noop() {}\n     }\n }\n \"#,\n@@ -809,13 +865,13 @@ mod a {\n         check_assist(\n             generate_documentation_template,\n             r#\"\n-struct MyStruct;\n+pub struct MyStruct;\n impl MyStruct {\n-    fn no$0op() {}\n+    pub fn no$0op() {}\n }\n \"#,\n             r#\"\n-struct MyStruct;\n+pub struct MyStruct;\n impl MyStruct {\n     /// .\n     ///\n@@ -826,7 +882,7 @@ impl MyStruct {\n     ///\n     /// MyStruct::noop();\n     /// ```\n-    fn noop() {}\n+    pub fn noop() {}\n }\n \"#,\n         );"}, {"sha": "c67e15b2ce44d3c6fda74de8f4f691cee963c6cb", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a82548c5e04395ba63add086461671e89d80262/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a82548c5e04395ba63add086461671e89d80262/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3a82548c5e04395ba63add086461671e89d80262", "patch": "@@ -844,7 +844,7 @@ fn doctest_generate_documentation_template() {\n     check_doc_test(\n         \"generate_documentation_template\",\n         r#####\"\n-fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n+pub fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n     unimplemented!()\n }\n \"#####,\n@@ -862,7 +862,7 @@ fn my_$0func(a: i32, b: i32) -> Result<(), std::io::Error> {\n /// # Errors\n ///\n /// This function will return an error if .\n-fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n+pub fn my_func(a: i32, b: i32) -> Result<(), std::io::Error> {\n     unimplemented!()\n }\n \"#####,"}]}