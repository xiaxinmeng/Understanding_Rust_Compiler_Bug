{"sha": "f43e3a86a7286057a748c731b732200e2ccde466", "node_id": "C_kwDOAAsO6NoAKGY0M2UzYTg2YTcyODYwNTdhNzQ4YzczMWI3MzIyMDBlMmNjZGU0NjY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-02T02:50:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-09T17:35:42Z"}, "message": "Allow substitutions in `rustc_on_unimplemented` predicate", "tree": {"sha": "c8394d88f1b0752206262573d316f78229771ee1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8394d88f1b0752206262573d316f78229771ee1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f43e3a86a7286057a748c731b732200e2ccde466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f43e3a86a7286057a748c731b732200e2ccde466", "html_url": "https://github.com/rust-lang/rust/commit/f43e3a86a7286057a748c731b732200e2ccde466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f43e3a86a7286057a748c731b732200e2ccde466/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cd0f786492aacf7426008cff48a25bc54b5f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cd0f786492aacf7426008cff48a25bc54b5f85", "html_url": "https://github.com/rust-lang/rust/commit/b7cd0f786492aacf7426008cff48a25bc54b5f85"}], "stats": {"total": 51, "additions": 39, "deletions": 12}, "files": [{"sha": "ef0a1792d58af790d3d650f5c0fa45b7df1fcdb9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f43e3a86a7286057a748c731b732200e2ccde466/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43e3a86a7286057a748c731b732200e2ccde466/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f43e3a86a7286057a748c731b732200e2ccde466", "patch": "@@ -668,6 +668,7 @@ symbols! {\n         fill,\n         finish,\n         flags,\n+        float,\n         float_to_int_unchecked,\n         floorf32,\n         floorf64,\n@@ -771,6 +772,8 @@ symbols! {\n         inline_const_pat,\n         inout,\n         instruction_set,\n+        integer_: \"integer\",\n+        integral,\n         intel,\n         into_future,\n         into_iter,"}, {"sha": "bdf677a63b632d0de11c2700f64e62a0f81809f5", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f43e3a86a7286057a748c731b732200e2ccde466/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f43e3a86a7286057a748c731b732200e2ccde466/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=f43e3a86a7286057a748c731b732200e2ccde466", "patch": "@@ -62,6 +62,10 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut errored = false;\n         let mut item_iter = items.iter();\n \n+        let parse_value = |value_str| {\n+            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n+        };\n+\n         let condition = if is_root {\n             None\n         } else {\n@@ -86,7 +90,14 @@ impl<'tcx> OnUnimplementedDirective {\n                         None,\n                     )\n                 })?;\n-            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |_| true);\n+            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |item| {\n+                if let Some(symbol) = item.value_str() {\n+                    if parse_value(symbol).is_err() {\n+                        errored = true;\n+                    }\n+                }\n+                true\n+            });\n             Some(cond.clone())\n         };\n \n@@ -97,10 +108,6 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut subcommands = vec![];\n         let mut append_const_msg = None;\n \n-        let parse_value = |value_str| {\n-            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n-        };\n-\n         for item in item_iter {\n             if item.has_name(sym::message) && message.is_none() {\n                 if let Some(message_) = item.value_str() {\n@@ -221,6 +228,9 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut append_const_msg = None;\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n+        let options_map: FxHashMap<Symbol, String> =\n+            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n+\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(\n@@ -229,7 +239,11 @@ impl<'tcx> OnUnimplementedDirective {\n                     Some(tcx.features()),\n                     &mut |c| {\n                         c.ident().map_or(false, |ident| {\n-                            options.contains(&(ident.name, c.value_str().map(|s| s.to_string())))\n+                            let value = c.value_str().map(|s| {\n+                                OnUnimplementedFormatString(s).format(tcx, trait_ref, &options_map)\n+                            });\n+\n+                            options.contains(&(ident.name, value))\n                         })\n                     },\n                 ) {\n@@ -257,13 +271,11 @@ impl<'tcx> OnUnimplementedDirective {\n             append_const_msg = command.append_const_msg.clone();\n         }\n \n-        let options: FxHashMap<Symbol, String> =\n-            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n         OnUnimplementedNote {\n-            label: label.map(|l| l.format(tcx, trait_ref, &options)),\n-            message: message.map(|m| m.format(tcx, trait_ref, &options)),\n-            note: note.map(|n| n.format(tcx, trait_ref, &options)),\n-            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options)),\n+            label: label.map(|l| l.format(tcx, trait_ref, &options_map)),\n+            message: message.map(|m| m.format(tcx, trait_ref, &options_map)),\n+            note: note.map(|n| n.format(tcx, trait_ref, &options_map)),\n+            enclosing_scope: enclosing_scope.map(|e_s| e_s.format(tcx, trait_ref, &options_map)),\n             append_const_msg,\n         }\n     }\n@@ -306,6 +318,12 @@ impl<'tcx> OnUnimplementedFormatString {\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n                     Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n+                    // `{integral}` and `{integer}` and `{float}` are allowed\n+                    Position::ArgumentNamed(s)\n+                        if s == sym::integral || s == sym::integer_ || s == sym::float =>\n+                    {\n+                        ()\n+                    }\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n@@ -385,6 +403,12 @@ impl<'tcx> OnUnimplementedFormatString {\n                                 &empty_string\n                             } else if s == sym::ItemContext {\n                                 &item_context\n+                            } else if s == sym::integral {\n+                                \"{integral}\"\n+                            } else if s == sym::integer_ {\n+                                \"{integer}\"\n+                            } else if s == sym::float {\n+                                \"{float}\"\n                             } else {\n                                 bug!(\n                                     \"broken on_unimplemented {:?} for {:?}: \\"}]}