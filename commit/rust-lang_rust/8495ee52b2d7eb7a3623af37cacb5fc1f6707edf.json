{"sha": "8495ee52b2d7eb7a3623af37cacb5fc1f6707edf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OTVlZTUyYjJkN2ViN2EzNjIzYWYzN2NhY2I1ZmMxZjY3MDdlZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T17:55:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T17:55:53Z"}, "message": "auto merge of #8262 : dotdash/rust/no_rval_copies, r=pcwalton\n\nrvalues aren't going to be used anywhere but as the argument, so\r\nthere's no point in copying them. LLVM used to eliminate the copy\r\nlater, but why bother emitting it in the first place?", "tree": {"sha": "7cff41c2747a036056e972692199fc5bb8a9febd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cff41c2747a036056e972692199fc5bb8a9febd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf", "html_url": "https://github.com/rust-lang/rust/commit/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f9ce4df682cd4dd1203e5ae3d8c95f5140e209", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f9ce4df682cd4dd1203e5ae3d8c95f5140e209", "html_url": "https://github.com/rust-lang/rust/commit/22f9ce4df682cd4dd1203e5ae3d8c95f5140e209"}, {"sha": "a51e3e46effc07f5e7ce5a698ddc8be65244b3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51e3e46effc07f5e7ce5a698ddc8be65244b3a5", "html_url": "https://github.com/rust-lang/rust/commit/a51e3e46effc07f5e7ce5a698ddc8be65244b3a5"}], "stats": {"total": 75, "additions": 24, "deletions": 51}, "files": [{"sha": "a0e71bc22727969692c1acb775a07c4eda982f43", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 24, "deletions": 51, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8495ee52b2d7eb7a3623af37cacb5fc1f6707edf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=8495ee52b2d7eb7a3623af37cacb5fc1f6707edf", "patch": "@@ -762,60 +762,33 @@ pub fn trans_arg_expr(bcx: @mut Block,\n                 val = arg_datum.to_ref_llval(bcx);\n             }\n             DontAutorefArg => {\n-                match self_mode {\n+                let need_scratch = ty::type_needs_drop(bcx.tcx(), arg_datum.ty) ||\n+                    (bcx.expr_is_lval(arg_expr) &&\n+                     arg_datum.appropriate_mode(bcx.tcx()).is_by_ref());\n+\n+                let arg_datum = if need_scratch {\n+                    let scratch = scratch_datum(bcx, arg_datum.ty, \"__self\", false);\n+                    arg_datum.store_to_datum(bcx, INIT, scratch);\n+\n+                    // Technically, ownership of val passes to the callee.\n+                    // However, we must cleanup should we fail before the\n+                    // callee is actually invoked.\n+                    scratch.add_clean(bcx);\n+                    temp_cleanups.push(scratch.val);\n+\n+                    scratch\n+                } else {\n+                    arg_datum\n+                };\n+\n+                val = match self_mode {\n                     ty::ByRef => {\n-                        // This assertion should really be valid, but because\n-                        // the explicit self code currently passes by-ref, it\n-                        // does not hold.\n-                        //\n-                        //assert !bcx.ccx().maps.moves_map.contains_key(\n-                        //    &arg_expr.id);\n-                        debug!(\"by ref arg with type %s, storing to scratch\",\n-                               bcx.ty_to_str(arg_datum.ty));\n-                        let scratch = scratch_datum(bcx, arg_datum.ty,\n-                                                    \"__self\", false);\n-\n-                        arg_datum.store_to_datum(bcx,\n-                                                 INIT,\n-                                                 scratch);\n-\n-                        // Technically, ownership of val passes to the callee.\n-                        // However, we must cleanup should we fail before the\n-                        // callee is actually invoked.\n-                        scratch.add_clean(bcx);\n-                        temp_cleanups.push(scratch.val);\n-\n-                        val = scratch.to_ref_llval(bcx);\n+                        debug!(\"by ref arg with type %s\", bcx.ty_to_str(arg_datum.ty));\n+                        arg_datum.to_ref_llval(bcx)\n                     }\n                     ty::ByCopy => {\n-                        if ty::type_needs_drop(bcx.tcx(), arg_datum.ty) ||\n-                                arg_datum.appropriate_mode(bcx.tcx()).is_by_ref() {\n-                            debug!(\"by copy arg with type %s, storing to scratch\",\n-                                   bcx.ty_to_str(arg_datum.ty));\n-                            let scratch = scratch_datum(bcx, arg_datum.ty,\n-                                                        \"__arg\", false);\n-\n-                            arg_datum.store_to_datum(bcx,\n-                                                     INIT,\n-                                                     scratch);\n-\n-                            // Technically, ownership of val passes to the callee.\n-                            // However, we must cleanup should we fail before the\n-                            // callee is actually invoked.\n-                            scratch.add_clean(bcx);\n-                            temp_cleanups.push(scratch.val);\n-\n-                            match scratch.appropriate_mode(bcx.tcx()) {\n-                                ByValue => val = Load(bcx, scratch.val),\n-                                ByRef(_) => val = scratch.val,\n-                            }\n-                        } else {\n-                            debug!(\"by copy arg with type %s\", bcx.ty_to_str(arg_datum.ty));\n-                            match arg_datum.mode {\n-                                ByRef(_) => val = Load(bcx, arg_datum.val),\n-                                ByValue => val = arg_datum.val,\n-                            }\n-                        }\n+                        debug!(\"by copy arg with type %s\", bcx.ty_to_str(arg_datum.ty));\n+                        arg_datum.to_appropriate_llval(bcx)\n                     }\n                 }\n             }"}]}