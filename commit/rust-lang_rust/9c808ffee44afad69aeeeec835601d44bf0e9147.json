{"sha": "9c808ffee44afad69aeeeec835601d44bf0e9147", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODA4ZmZlZTQ0YWZhZDY5YWVlZWVjODM1NjAxZDQ0YmYwZTkxNDc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-15T21:53:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-18T17:32:37Z"}, "message": "Make it an error to use parenthetical notation with\nsomething other than a trait type.", "tree": {"sha": "89ec62c60930763b307610cc205a4df3d2498c71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ec62c60930763b307610cc205a4df3d2498c71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c808ffee44afad69aeeeec835601d44bf0e9147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c808ffee44afad69aeeeec835601d44bf0e9147", "html_url": "https://github.com/rust-lang/rust/commit/9c808ffee44afad69aeeeec835601d44bf0e9147", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c808ffee44afad69aeeeec835601d44bf0e9147/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8", "html_url": "https://github.com/rust-lang/rust/commit/0b90cded149b74b4ceb51a7ea5d3394aeb4e06a8"}], "stats": {"total": 133, "additions": 78, "deletions": 55}, "files": [{"sha": "afbb18faa0b9f0dd170a55f6fa5b2a669fcde235", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=9c808ffee44afad69aeeeec835601d44bf0e9147", "patch": "@@ -144,5 +144,6 @@ register_diagnostics!(\n     E0165,\n     E0166,\n     E0167,\n-    E0168\n+    E0168,\n+    E0169\n )"}, {"sha": "082b2acd1d88cd2c574255b49e947b72247e462c", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 75, "deletions": 52, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=9c808ffee44afad69aeeeec835601d44bf0e9147", "patch": "@@ -202,7 +202,7 @@ pub fn opt_ast_region_to_region<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n     r\n }\n \n-fn ast_path_substs<'tcx,AC,RS>(\n+fn ast_path_substs_for_ty<'tcx,AC,RS>(\n     this: &AC,\n     rscope: &RS,\n     decl_def_id: ast::DefId,\n@@ -233,12 +233,35 @@ fn ast_path_substs<'tcx,AC,RS>(\n     assert!(decl_generics.types.all(|d| d.space != FnSpace));\n \n     let (regions, types) = match path.segments.last().unwrap().parameters {\n-        ast::AngleBracketedParameters(ref data) =>\n-            angle_bracketed_parameters(this, rscope, data),\n-        ast::ParenthesizedParameters(ref data) =>\n-            parenthesized_parameters(this, binder_id, data),\n+        ast::AngleBracketedParameters(ref data) => {\n+            convert_angle_bracketed_parameters(this, rscope, data)\n+        }\n+        ast::ParenthesizedParameters(ref data) => {\n+            span_err!(tcx.sess, path.span, E0169,\n+                      \"parenthesized parameters may only be used with a trait\");\n+            (Vec::new(), convert_parenthesized_parameters(this, data))\n+        }\n     };\n \n+    create_substs_for_ast_path(this, rscope, path.span, decl_def_id,\n+                               decl_generics, self_ty, types, regions, associated_ty)\n+}\n+\n+fn create_substs_for_ast_path<'tcx,AC,RS>(\n+    this: &AC,\n+    rscope: &RS,\n+    span: Span,\n+    decl_def_id: ast::DefId,\n+    decl_generics: &ty::Generics,\n+    self_ty: Option<ty::t>,\n+    types: Vec<ty::t>,\n+    regions: Vec<ty::Region>,\n+    associated_ty: Option<ty::t>)\n+    -> Substs\n+    where AC: AstConv<'tcx>, RS: RegionScope\n+{\n+    let tcx = this.tcx();\n+\n     // If the type is parameterized by the this region, then replace this\n     // region with the current anon region binding (in other words,\n     // whatever & would get replaced with).\n@@ -248,10 +271,10 @@ fn ast_path_substs<'tcx,AC,RS>(\n         regions\n     } else {\n         let anon_regions =\n-            rscope.anon_regions(path.span, expected_num_region_params);\n+            rscope.anon_regions(span, expected_num_region_params);\n \n         if supplied_num_region_params != 0 || anon_regions.is_err() {\n-            span_err!(tcx.sess, path.span, E0107,\n+            span_err!(tcx.sess, span, E0107,\n                       \"wrong number of lifetime parameters: expected {}, found {}\",\n                       expected_num_region_params, supplied_num_region_params);\n         }\n@@ -283,7 +306,7 @@ fn ast_path_substs<'tcx,AC,RS>(\n         } else {\n             \"expected\"\n         };\n-        this.tcx().sess.span_fatal(path.span,\n+        this.tcx().sess.span_fatal(span,\n                                    format!(\"wrong number of type arguments: {} {}, found {}\",\n                                            expected,\n                                            required_ty_param_count,\n@@ -294,7 +317,7 @@ fn ast_path_substs<'tcx,AC,RS>(\n         } else {\n             \"expected\"\n         };\n-        this.tcx().sess.span_fatal(path.span,\n+        this.tcx().sess.span_fatal(span,\n                                    format!(\"wrong number of type arguments: {} {}, found {}\",\n                                            expected,\n                                            formal_ty_param_count,\n@@ -303,9 +326,9 @@ fn ast_path_substs<'tcx,AC,RS>(\n \n     if supplied_ty_param_count > required_ty_param_count\n         && !this.tcx().sess.features.borrow().default_type_params {\n-        span_err!(this.tcx().sess, path.span, E0108,\n+        span_err!(this.tcx().sess, span, E0108,\n             \"default type parameters are experimental and possibly buggy\");\n-        span_help!(this.tcx().sess, path.span,\n+        span_help!(this.tcx().sess, span,\n             \"add #![feature(default_type_params)] to the crate attributes to enable\");\n     }\n \n@@ -331,66 +354,66 @@ fn ast_path_substs<'tcx,AC,RS>(\n                 // This is a default type parameter.\n                 let default = default.subst_spanned(tcx,\n                                                     &substs,\n-                                                    Some(path.span));\n+                                                    Some(span));\n                 substs.types.push(TypeSpace, default);\n             }\n             None => {\n-                tcx.sess.span_bug(path.span,\n-                                  \"extra parameter without default\");\n+                tcx.sess.span_bug(span, \"extra parameter without default\");\n             }\n         }\n     }\n \n     for param in decl_generics.types.get_slice(AssocSpace).iter() {\n         substs.types.push(\n             AssocSpace,\n-            this.associated_type_binding(path.span,\n+            this.associated_type_binding(span,\n                                          associated_ty,\n                                          decl_def_id,\n                                          param.def_id))\n     }\n \n     return substs;\n+}\n \n-    fn angle_bracketed_parameters<'tcx, AC, RS>(this: &AC,\n-                                                rscope: &RS,\n-                                                data: &ast::AngleBracketedParameterData)\n-                                                -> (Vec<ty::Region>, Vec<ty::t>)\n-        where AC: AstConv<'tcx>, RS: RegionScope\n-    {\n-        let regions: Vec<_> =\n-            data.lifetimes.iter()\n-            .map(|l| ast_region_to_region(this.tcx(), l))\n-            .collect();\n-\n-        let types: Vec<_> =\n-            data.types.iter()\n-            .map(|t| ast_ty_to_ty(this, rscope, &**t))\n-            .collect();\n-\n-        (regions, types)\n-    }\n+fn convert_angle_bracketed_parameters<'tcx, AC, RS>(this: &AC,\n+                                                    rscope: &RS,\n+                                                    data: &ast::AngleBracketedParameterData)\n+                                                    -> (Vec<ty::Region>, Vec<ty::t>)\n+    where AC: AstConv<'tcx>, RS: RegionScope\n+{\n+    let regions: Vec<_> =\n+        data.lifetimes.iter()\n+        .map(|l| ast_region_to_region(this.tcx(), l))\n+        .collect();\n \n-    fn parenthesized_parameters<'tcx,AC>(this: &AC,\n-                                         binder_id: ast::NodeId,\n-                                         data: &ast::ParenthesizedParameterData)\n-                                         -> (Vec<ty::Region>, Vec<ty::t>)\n-        where AC: AstConv<'tcx>\n-    {\n-        let binding_rscope = BindingRscope::new(binder_id);\n-\n-        let inputs = data.inputs.iter()\n-                                .map(|a_t| ast_ty_to_ty(this, &binding_rscope, &**a_t))\n-                                .collect();\n-        let input_ty = ty::mk_tup(this.tcx(), inputs);\n-\n-        let output = match data.output {\n-            Some(ref output_ty) => ast_ty_to_ty(this, &binding_rscope, &**output_ty),\n-            None => ty::mk_nil(this.tcx())\n-        };\n+    let types: Vec<_> =\n+        data.types.iter()\n+        .map(|t| ast_ty_to_ty(this, rscope, &**t))\n+        .collect();\n+\n+    (regions, types)\n+}\n+\n+fn convert_parenthesized_parameters<'tcx,AC>(this: &AC,\n+                                             data: &ast::ParenthesizedParameterData)\n+                                             -> Vec<ty::t>\n+    where AC: AstConv<'tcx>\n+{\n+    let binding_rscope = BindingRscope::new();\n+\n+    let inputs = data.inputs.iter()\n+                            .map(|a_t| ast_ty_to_ty(this, &binding_rscope, &**a_t))\n+                            .collect();\n+    let input_ty = ty::mk_tup(this.tcx(), inputs);\n+\n+    let output = match data.output {\n+        Some(ref output_ty) => ast_ty_to_ty(this, &binding_rscope, &**output_ty),\n+        None => ty::mk_nil(this.tcx()),\n+    };\n+\n+    vec![input_ty, output]\n+}\n \n-        (Vec::new(), vec![input_ty, output])\n-    }\n }\n \n pub fn instantiate_trait_ref<'tcx,AC,RS>(this: &AC,"}, {"sha": "a21c7929fde86f4c48bb0d23db0cdbf8fac93e50", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c808ffee44afad69aeeeec835601d44bf0e9147/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9c808ffee44afad69aeeeec835601d44bf0e9147", "patch": "@@ -4452,8 +4452,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n             let type_and_substs = astconv::ast_path_to_ty_relaxed(fcx,\n                                                                   fcx.infcx(),\n                                                                   struct_id,\n-                                                                  path,\n-                                                                  expr.id);\n+                                                                  path);\n             match fcx.mk_subty(false,\n                                infer::Misc(path.span),\n                                actual_structure_type,"}]}