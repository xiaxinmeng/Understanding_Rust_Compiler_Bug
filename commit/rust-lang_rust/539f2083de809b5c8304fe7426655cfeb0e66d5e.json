{"sha": "539f2083de809b5c8304fe7426655cfeb0e66d5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWYyMDgzZGU4MDliNWM4MzA0ZmU3NDI2NjU1Y2ZlYjBlNjZkNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T13:01:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-13T13:01:42Z"}, "message": "Auto merge of #44129 - pnkfelix:fix-end-region-emission-order, r=nmatsakis\n\nFix end region emission order\n\nFix #43481", "tree": {"sha": "14f346a5c3509d68bcc9fbb377aa13eb3c8b8066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f346a5c3509d68bcc9fbb377aa13eb3c8b8066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539f2083de809b5c8304fe7426655cfeb0e66d5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539f2083de809b5c8304fe7426655cfeb0e66d5e", "html_url": "https://github.com/rust-lang/rust/commit/539f2083de809b5c8304fe7426655cfeb0e66d5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539f2083de809b5c8304fe7426655cfeb0e66d5e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824952f48b85806c498d700f183dfc42b516cc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/824952f48b85806c498d700f183dfc42b516cc7d", "html_url": "https://github.com/rust-lang/rust/commit/824952f48b85806c498d700f183dfc42b516cc7d"}, {"sha": "5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe", "html_url": "https://github.com/rust-lang/rust/commit/5fa0b661e02756d8158057d8fd9b0ca1f1f755fe"}], "stats": {"total": 342, "additions": 319, "deletions": 23}, "files": [{"sha": "bac884b4d01e9f94dfa898838a0073d7cadbe89d", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -352,14 +352,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n         let scope = self.scopes.pop().unwrap();\n         assert_eq!(scope.region_scope, region_scope.0);\n+\n+        self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n         unpack!(block = build_scope_drops(&mut self.cfg,\n                                           &scope,\n                                           &self.scopes,\n                                           block,\n                                           self.arg_count,\n                                           false));\n \n-        self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n         block.unit()\n     }\n \n@@ -406,15 +407,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 scope.cached_exits.insert((target, region_scope.0), b);\n                 b\n             };\n+\n+            // End all regions for scopes out of which we are breaking.\n+            self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n+\n             unpack!(block = build_scope_drops(&mut self.cfg,\n                                               scope,\n                                               rest,\n                                               block,\n                                               self.arg_count,\n                                               false));\n-\n-            // End all regions for scopes out of which we are breaking.\n-            self.cfg.push_end_region(self.hir.tcx(), block, region_scope.1, scope.region_scope);\n         }\n         }\n         let scope = &self.scopes[len - scope_count];"}, {"sha": "1941d1bc7be1b6c3bc9a61090af46bbdd68cf24d", "filename": "src/test/mir-opt/end_region_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_1.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -30,8 +30,8 @@ fn main() {\n //         StorageLive(_2);\n //         _2 = &'10_1rs _1;\n //         _0 = ();\n-//         StorageDead(_2);\n //         EndRegion('10_1rs);\n+//         StorageDead(_2);\n //         StorageDead(_1);\n //         return;\n //     }"}, {"sha": "d8dd4aeadf495008f1d21bb6f010c899ddc9b955", "filename": "src/test/mir-opt/end_region_2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_2.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -46,8 +46,8 @@ fn main() {\n //     bb2: {\n //         _0 = ();\n //         StorageDead(_5);\n-//         StorageDead(_3);\n //         EndRegion('23_1rs);\n+//         StorageDead(_3);\n //         StorageDead(_2);\n //         return;\n //     }\n@@ -56,10 +56,10 @@ fn main() {\n //         StorageLive(_7);\n //         _7 = &'23_3rs _2;\n //         _1 = ();\n-//         StorageDead(_7);\n //         EndRegion('23_3rs);\n-//         StorageDead(_3);\n+//         StorageDead(_7);\n //         EndRegion('23_1rs);\n+//         StorageDead(_3);\n //         StorageDead(_2);\n //         goto -> bb1;\n //     }"}, {"sha": "e404af838cef44a8247ee2823907998df0c98fed", "filename": "src/test/mir-opt/end_region_3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_3.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -49,8 +49,8 @@ fn main() {\n //     bb2: {\n //         _0 = ();\n //         StorageDead(_5);\n-//         StorageDead(_3);\n //         EndRegion('26_1rs);\n+//         StorageDead(_3);\n //         StorageDead(_1);\n //         return;\n //     }\n@@ -60,10 +60,10 @@ fn main() {\n //         StorageLive(_7);\n //         _7 = &'26_3rs _1;\n //         _2 = ();\n-//         StorageDead(_7);\n //         EndRegion('26_3rs);\n-//         StorageDead(_3);\n+//         StorageDead(_7);\n //         EndRegion('26_1rs);\n+//         StorageDead(_3);\n //         goto -> bb1;\n //     }\n // END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "d51c627d14b2380314dbf6dbe8b0f8670954ddcf", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -53,10 +53,10 @@ fn foo(i: i32) {\n //         StorageLive(_6);\n //         _6 = &'26_4rs _2;\n //         _0 = ();\n-//         StorageDead(_6);\n //         EndRegion('26_4rs);\n-//         StorageDead(_3);\n+//         StorageDead(_6);\n //         EndRegion('26_2rs);\n+//         StorageDead(_3);\n //         StorageDead(_2);\n //         drop(_1) -> bb4;\n //     }"}, {"sha": "6299ec3815cd1625f3573e77c327f0e923944d6c", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -44,8 +44,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         StorageDead(_3);\n //         EndRegion('14s);\n+//         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }"}, {"sha": "13ab3e4f2dd2a0c5dc0b2c99597de93a8b566ce8", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -44,8 +44,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _2 = const foo(_3) -> [return: bb1, unwind: bb3];\n //     }\n //     bb1: {\n-//         StorageDead(_3);\n //         EndRegion('19s);\n+//         StorageDead(_3);\n //         _0 = ();\n //         drop(_1) -> bb4;\n //     }\n@@ -75,8 +75,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _3 = ((*_2).0: i32);\n //         _0 = _3;\n //         StorageDead(_3);\n-//         StorageDead(_2);\n //         EndRegion('15_0rs);\n+//         StorageDead(_2);\n //         return;\n //     }\n // END rustc.node22.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "826d3749167d30c2b2d182250420c68701a2883c", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -84,8 +84,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //         _3 = ((*_2).0: i32);\n //         _0 = _3;\n //         StorageDead(_3);\n-//         StorageDead(_2);\n //         EndRegion('15_0rs);\n+//         StorageDead(_2);\n //         drop(_1) -> bb1;\n //     }\n //     bb1: {"}, {"sha": "6438484fcfae41a1651271b39b1086b3a676353b", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -50,8 +50,8 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //    bb1: {\n //        StorageDead(_4);\n //        _0 = ();\n-//        StorageDead(_2);\n //        EndRegion('21_1rs);\n+//        StorageDead(_2);\n //        drop(_1) -> bb4;\n //    }\n //    bb2: {"}, {"sha": "59d5d934391e94b49719cd99c587d44ed851aa08", "filename": "src/test/mir-opt/end_region_9.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_9.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -42,7 +42,7 @@ fn main() {\n //     let mut _0: ();\n //     let mut _1: bool;\n //     let _2: i32;\n-//     let mut _4: &'13_0rs i32;\n+//     let mut _4: &'33_0rs i32;\n //     let mut _3: ();\n //     let mut _5: !;\n //     let mut _6: ();\n@@ -67,19 +67,20 @@ fn main() {\n //    bb2: {\n //        _0 = ();\n //        StorageDead(_7);\n+//        EndRegion('33_0rs);\n //        StorageDead(_4);\n-//        EndRegion('13_0rs);\n //        StorageDead(_2);\n //        StorageDead(_1);\n //        return;\n //    }\n //\n //    bb3: {\n-//        _4 = &'13_0rs _2;\n+//        _4 = &'33_0rs _2;\n //        _6 = ();\n //        StorageDead(_7);\n //        _1 = const true;\n //        _3 = ();\n //        goto -> bb1;\n //    }\n // }\n+// END rustc.node4.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "8f9dd79cd7542b5ac96fa0e5ab00e821124b30d2", "filename": "src/test/mir-opt/end_region_cyclic.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_cyclic.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -0,0 +1,132 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n+// ignore-tidy-linelength\n+\n+// This test models a scenario with a cyclic reference. Rust obviously\n+// needs to handle such cases.\n+//\n+// The interesting part about this test is that such case shows that\n+// one cannot generally force all references to be dead before you hit\n+// their EndRegion; at least, not without breaking the more important\n+// property that all borrowed storage locations have their regions\n+// ended strictly before their StorageDeads. (This test was inspired\n+// by discussion on Issue #43481.)\n+\n+use std::cell::Cell;\n+\n+struct S<'a> {\n+    r: Cell<Option<&'a S<'a>>>,\n+}\n+\n+fn main() {\n+    loop {\n+        let x = S { r: Cell::new(None) };\n+        x.r.set(Some(&x));\n+        if query() { break; }\n+        x.r.set(Some(&x));\n+    }\n+}\n+\n+fn query() -> bool { true }\n+\n+// END RUST SOURCE\n+// START rustc.node16.SimplifyCfg-qualify-consts.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let _2: S<'35_0rs>;\n+//     }\n+//     let mut _1: ();\n+//     let mut _3: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _4: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _5: ();\n+//     let mut _6: &'16s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _7: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _8: &'35_0rs S<'35_0rs>;\n+//     let mut _9: &'35_0rs S<'35_0rs>;\n+//     let mut _10: ();\n+//     let mut _11: bool;\n+//     let mut _12: !;\n+//     let mut _13: ();\n+//     let mut _14: &'33s std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>;\n+//     let mut _15: std::option::Option<&'35_0rs S<'35_0rs>>;\n+//     let mut _16: &'35_0rs S<'35_0rs>;\n+//     let mut _17: &'35_0rs S<'35_0rs>;\n+//     bb0: {\n+//         goto -> bb1;\n+//     }\n+//     bb1: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         _4 = std::option::Option<&'35_0rs S<'35_0rs>>::None;\n+//         _3 = const <std::cell::Cell<T>>::new(_4) -> bb2;\n+//     }\n+//     bb2: {\n+//         StorageDead(_4);\n+//         _2 = S<'35_0rs> { r: _3 };\n+//         StorageDead(_3);\n+//         StorageLive(_6);\n+//         _6 = &'16s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         StorageLive(_9);\n+//         _9 = &'35_0rs _2;\n+//         _8 = &'35_0rs (*_9);\n+//         _7 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_8,);\n+//         StorageDead(_8);\n+//         _5 = const <std::cell::Cell<T>>::set(_6, _7) -> bb3;\n+//     }\n+//     bb3: {\n+//         EndRegion('16s);\n+//         StorageDead(_7);\n+//         StorageDead(_6);\n+//         StorageDead(_9);\n+//         StorageLive(_11);\n+//         _11 = const query() -> bb4;\n+//     }\n+//     bb4: {\n+//         switchInt(_11) -> [0u8: bb6, otherwise: bb5];\n+//     }\n+//     bb5: {\n+//         _0 = ();\n+//         StorageDead(_11);\n+//         EndRegion('35_0rs);\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+//     bb6: {\n+//         _10 = ();\n+//         StorageDead(_11);\n+//         StorageLive(_14);\n+//         _14 = &'33s (_2.0: std::cell::Cell<std::option::Option<&'35_0rs S<'35_0rs>>>);\n+//         StorageLive(_15);\n+//         StorageLive(_16);\n+//         StorageLive(_17);\n+//         _17 = &'35_0rs _2;\n+//         _16 = &'35_0rs (*_17);\n+//         _15 = std::option::Option<&'35_0rs S<'35_0rs>>::Some(_16,);\n+//         StorageDead(_16);\n+//         _13 = const <std::cell::Cell<T>>::set(_14, _15) -> bb7;\n+//     }\n+//     bb7: {\n+//         EndRegion('33s);\n+//         StorageDead(_15);\n+//         StorageDead(_14);\n+//         StorageDead(_17);\n+//         _1 = ();\n+//         EndRegion('35_0rs);\n+//         StorageDead(_2);\n+//         goto -> bb1;\n+//     }\n+// }\n+// END rustc.node16.SimplifyCfg-qualify-consts.after.mir"}, {"sha": "1f9ad988acc0b90dd0687221bff1ea72a6334307", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "added", "additions": 161, "deletions": 0, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -0,0 +1,161 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n+// ignore-tidy-linelength\n+\n+// A scenario with significant destruction code extents (which have\n+// suffix \"dce\" in current `-Z identify_regions` rendering).\n+\n+#![feature(generic_param_attrs)]\n+#![feature(dropck_eyepatch)]\n+\n+fn main() {\n+    // Since the second param to `D1` is may_dangle, it is legal for\n+    // the region of that parameter to end before the drop code for D1\n+    // is executed.\n+    (D1(&S1(\"ex1\"), &S1(\"dang1\"))).0;\n+}\n+\n+#[derive(Debug)]\n+struct S1(&'static str);\n+\n+#[derive(Debug)]\n+struct D1<'a, 'b>(&'a S1, &'b S1);\n+\n+// The `#[may_dangle]` means that references of type `&'b _` may be\n+// invalid during the execution of this destructor; i.e. in this case\n+// the destructor code is not allowed to read or write `*self.1`, while\n+// it can read/write `*self.0`.\n+unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n+    fn drop(&mut self) {\n+        println!(\"D1({:?}, _)\", self.0);\n+    }\n+}\n+\n+// Notes on the MIR output below:\n+//\n+// 1. The `EndRegion('10s)` is allowed to precede the `drop(_3)`\n+//    solely because of the #[may_dangle] mentioned above.\n+//\n+// 2. Regarding the occurrence of `EndRegion('12ds)` *after* `StorageDead(_6)`\n+//    (where we have borrows `&'12ds _6`): Eventually:\n+//\n+//    i. this code should be rejected (by mir-borrowck), or\n+//\n+//    ii. the MIR code generation should be changed so that the\n+//        EndRegion('12ds)` precedes `StorageDead(_6)` in the\n+//        control-flow.  (Note: arielb1 views drop+storagedead as one\n+//        unit, and does not see this option as a useful avenue to\n+//        explore.), or\n+//\n+//    iii. the presence of EndRegion should be made irrelevant by a\n+//        transformation encoding the effects of rvalue-promotion.\n+//        This may be the simplest and most-likely option; note in\n+//        particular that `StorageDead(_6)` goes away below in\n+//        rustc.node4.QualifyAndPromoteConstants.after.mir\n+\n+// END RUST SOURCE\n+\n+// START rustc.node4.QualifyAndPromoteConstants.before.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: &'12ds S1;\n+//     let mut _2: &'12ds S1;\n+//     let mut _3: D1<'12ds, '10s>;\n+//     let mut _4: &'12ds S1;\n+//     let mut _5: &'12ds S1;\n+//     let mut _6: S1;\n+//     let mut _7: &'10s S1;\n+//     let mut _8: &'10s S1;\n+//     let mut _9: S1;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         StorageLive(_6);\n+//         _6 = S1::{{constructor}}(const \"ex1\",);\n+//         _5 = &'12ds _6;\n+//         _4 = &'12ds (*_5);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         StorageLive(_9);\n+//         _9 = S1::{{constructor}}(const \"dang1\",);\n+//         _8 = &'10s _9;\n+//         _7 = &'10s (*_8);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         EndRegion('10s);\n+//         StorageDead(_7);\n+//         StorageDead(_4);\n+//         _2 = (_3.0: &'12ds S1);\n+//         _1 = _2;\n+//         StorageDead(_2);\n+//         drop(_3) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         StorageDead(_3);\n+//         StorageDead(_8);\n+//         StorageDead(_9);\n+//         StorageDead(_5);\n+//         StorageDead(_6);\n+//         EndRegion('12ds);\n+//         _0 = ();\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.QualifyAndPromoteConstants.before.mir\n+\n+// START rustc.node4.QualifyAndPromoteConstants.after.mir\n+// fn main() -> () {\n+//     let mut _0: ();\n+//     let mut _1: &'12ds S1;\n+//     let mut _2: &'12ds S1;\n+//     let mut _3: D1<'12ds, '10s>;\n+//     let mut _4: &'12ds S1;\n+//     let mut _5: &'12ds S1;\n+//     let mut _6: S1;\n+//     let mut _7: &'10s S1;\n+//     let mut _8: &'10s S1;\n+//     let mut _9: S1;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         StorageLive(_3);\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         _5 = promoted1;\n+//         _4 = &'12ds (*_5);\n+//         StorageLive(_7);\n+//         StorageLive(_8);\n+//         _8 = promoted0;\n+//         _7 = &'10s (*_8);\n+//         _3 = D1<'12ds, '10s>::{{constructor}}(_4, _7);\n+//         EndRegion('10s);\n+//         StorageDead(_7);\n+//         StorageDead(_4);\n+//         _2 = (_3.0: &'12ds S1);\n+//         _1 = _2;\n+//         StorageDead(_2);\n+//         drop(_3) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         StorageDead(_3);\n+//         StorageDead(_8);\n+//         StorageDead(_5);\n+//         EndRegion('12ds);\n+//         _0 = ();\n+//         return;\n+//     }\n+// }\n+// END rustc.node4.QualifyAndPromoteConstants.after.mir"}, {"sha": "ec044225b83e8b2f7bd5d92d55774ab28d5850b5", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -68,8 +68,8 @@ fn main() {\n //         _5 = (*_4);\n //         _0 = _5;\n //         StorageDead(_5);\n-//         StorageDead(_4);\n //         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })));\n+//         StorageDead(_4);\n //         StorageDead(_3);\n //         return;\n //     }"}, {"sha": "ff0c781d1e3bb805db9e87279fe1073de399e34d", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539f2083de809b5c8304fe7426655cfeb0e66d5e/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=539f2083de809b5c8304fe7426655cfeb0e66d5e", "patch": "@@ -54,8 +54,8 @@ fn main() {\n //         _5 = &ReErased mut (*_3);\n //         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(9)))]);\n //         _4 = _5 as *mut i32 (Misc);\n-//         StorageDead(_5);\n //         EndRegion(ReScope(Node(ItemLocalId(9))));\n+//         StorageDead(_5);\n //         Validate(Release, [_0: bool, _4: *mut i32]);\n //         _0 = const write_42(_4) -> bb1;\n //     }"}]}