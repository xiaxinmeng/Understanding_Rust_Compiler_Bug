{"sha": "00c19adeb519707484a8872f353c9cb89ed5eea6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzE5YWRlYjUxOTcwNzQ4NGE4ODcyZjM1M2M5Y2I4OWVkNWVlYTY=", "commit": {"author": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-06-02T15:54:24Z"}, "committer": {"name": "Ana-Maria Mihalache", "email": "mihalacheana.maria@yahoo.com", "date": "2020-06-05T13:31:48Z"}, "message": "Rename traits::ImplSourceImpl to ImplSourceUserDefined.", "tree": {"sha": "135628069162d8b514c14563a93bb21c7f707cc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/135628069162d8b514c14563a93bb21c7f707cc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c19adeb519707484a8872f353c9cb89ed5eea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c19adeb519707484a8872f353c9cb89ed5eea6", "html_url": "https://github.com/rust-lang/rust/commit/00c19adeb519707484a8872f353c9cb89ed5eea6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c19adeb519707484a8872f353c9cb89ed5eea6/comments", "author": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anyska", "id": 13694484, "node_id": "MDQ6VXNlcjEzNjk0NDg0", "avatar_url": "https://avatars.githubusercontent.com/u/13694484?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anyska", "html_url": "https://github.com/anyska", "followers_url": "https://api.github.com/users/anyska/followers", "following_url": "https://api.github.com/users/anyska/following{/other_user}", "gists_url": "https://api.github.com/users/anyska/gists{/gist_id}", "starred_url": "https://api.github.com/users/anyska/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anyska/subscriptions", "organizations_url": "https://api.github.com/users/anyska/orgs", "repos_url": "https://api.github.com/users/anyska/repos", "events_url": "https://api.github.com/users/anyska/events{/privacy}", "received_events_url": "https://api.github.com/users/anyska/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01896a36f36513676756ea3eb3b8284665263cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01896a36f36513676756ea3eb3b8284665263cf", "html_url": "https://github.com/rust-lang/rust/commit/e01896a36f36513676756ea3eb3b8284665263cf"}], "stats": {"total": 83, "additions": 44, "deletions": 39}, "files": [{"sha": "56787304d4e7e1e10700610137e0ee75d2c76342", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -374,11 +374,11 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n ///\n /// ### The type parameter `N`\n ///\n-/// See explanation on `ImplSourceImplData`.\n+/// See explanation on `ImplSourceUserDefinedData`.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum ImplSource<'tcx, N> {\n     /// ImplSource identifying a particular impl.\n-    ImplSourceImpl(ImplSourceImplData<'tcx, N>),\n+    ImplSourceUserDefined(ImplSourceUserDefinedData<'tcx, N>),\n \n     /// ImplSource for auto trait implementations.\n     /// This carries the information and nested obligations with regards\n@@ -399,7 +399,7 @@ pub enum ImplSource<'tcx, N> {\n     ImplSourceBuiltin(ImplSourceBuiltinData<N>),\n \n     /// ImplSource automatically generated for a closure. The `DefId` is the ID\n-    /// of the closure expression. This is a `ImplSourceImpl` in spirit, but the\n+    /// of the closure expression. This is a `ImplSourceUserDefined` in spirit, but the\n     /// impl is generated by the compiler and does not appear in the source.\n     ImplSourceClosure(ImplSourceClosureData<'tcx, N>),\n \n@@ -419,7 +419,7 @@ pub enum ImplSource<'tcx, N> {\n impl<'tcx, N> ImplSource<'tcx, N> {\n     pub fn nested_obligations(self) -> Vec<N> {\n         match self {\n-            ImplSourceImpl(i) => i.nested,\n+            ImplSourceUserDefined(i) => i.nested,\n             ImplSourceParam(n) => n,\n             ImplSourceBuiltin(i) => i.nested,\n             ImplSourceAutoImpl(d) => d.nested,\n@@ -434,7 +434,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n \n     pub fn borrow_nested_obligations(&self) -> &[N] {\n         match &self {\n-            ImplSourceImpl(i) => &i.nested[..],\n+            ImplSourceUserDefined(i) => &i.nested[..],\n             ImplSourceParam(n) => &n[..],\n             ImplSourceBuiltin(i) => &i.nested[..],\n             ImplSourceAutoImpl(d) => &d.nested[..],\n@@ -452,7 +452,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n         F: FnMut(N) -> M,\n     {\n         match self {\n-            ImplSourceImpl(i) => ImplSourceImpl(ImplSourceImplData {\n+            ImplSourceUserDefined(i) => ImplSourceUserDefined(ImplSourceUserDefinedData {\n                 impl_def_id: i.impl_def_id,\n                 substs: i.substs,\n                 nested: i.nested.into_iter().map(f).collect(),\n@@ -507,7 +507,7 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n /// is `()`, because codegen only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n-pub struct ImplSourceImplData<'tcx, N> {\n+pub struct ImplSourceUserDefinedData<'tcx, N> {\n     pub impl_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>,"}, {"sha": "218bb144469b4b3848815aa50da15419a695bd1d", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -9,7 +9,7 @@ use std::rc::Rc;\n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n-            super::ImplSourceImpl(ref v) => write!(f, \"{:?}\", v),\n+            super::ImplSourceUserDefined(ref v) => write!(f, \"{:?}\", v),\n \n             super::ImplSourceAutoImpl(ref t) => write!(f, \"{:?}\", t),\n \n@@ -32,11 +32,11 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSource<'tcx, N> {\n     }\n }\n \n-impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceImplData<'tcx, N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceUserDefinedData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"ImplSourceImplData(impl_def_id={:?}, substs={:?}, nested={:?})\",\n+            \"ImplSourceUserDefinedData(impl_def_id={:?}, substs={:?}, nested={:?})\",\n             self.impl_def_id, self.substs, self.nested\n         )\n     }\n@@ -245,15 +245,17 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ImplSource<'a, ()> {\n     type Lifted = traits::ImplSource<'tcx, ()>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n         match self.clone() {\n-            traits::ImplSourceImpl(traits::ImplSourceImplData { impl_def_id, substs, nested }) => {\n-                tcx.lift(&substs).map(|substs| {\n-                    traits::ImplSourceImpl(traits::ImplSourceImplData {\n-                        impl_def_id,\n-                        substs,\n-                        nested,\n-                    })\n+            traits::ImplSourceUserDefined(traits::ImplSourceUserDefinedData {\n+                impl_def_id,\n+                substs,\n+                nested,\n+            }) => tcx.lift(&substs).map(|substs| {\n+                traits::ImplSourceUserDefined(traits::ImplSourceUserDefinedData {\n+                    impl_def_id,\n+                    substs,\n+                    nested,\n                 })\n-            }\n+            }),\n             traits::ImplSourceAutoImpl(t) => Some(traits::ImplSourceAutoImpl(t)),\n             traits::ImplSourceGenerator(traits::ImplSourceGeneratorData {\n                 generator_def_id,"}, {"sha": "76c1c465a8be0ac9a951dffeee14fcccd6965933", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -20,9 +20,10 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     });\n \n     match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n-        Ok(traits::ImplSourceImpl(traits::ImplSourceImplData { impl_def_id, .. })) => {\n-            tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n-        }\n+        Ok(traits::ImplSourceUserDefined(traits::ImplSourceUserDefinedData {\n+            impl_def_id,\n+            ..\n+        })) => tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap(),\n         impl_source => {\n             bug!(\"invalid `CoerceUnsized` impl_source: {:?}\", impl_source);\n         }"}, {"sha": "da945a19185240dc7489f2a3325cccab82e118c3", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             ));\n \n             match result {\n-                Ok(Some(ImplSource::ImplSourceImpl(_))) => {\n+                Ok(Some(ImplSource::ImplSourceUserDefined(_))) => {\n                     debug!(\n                         \"find_auto_trait_generics({:?}): \\\n                          manual impl found, bailing out\",\n@@ -308,8 +308,10 @@ impl AutoTraitFinder<'tcx> {\n                     // If we see an explicit negative impl (e.g., `impl !Send for MyStruct`),\n                     // we immediately bail out, since it's impossible for us to continue.\n \n-                    if let ImplSource::ImplSourceImpl(ImplSourceImplData { impl_def_id, .. }) =\n-                        impl_source\n+                    if let ImplSource::ImplSourceUserDefined(ImplSourceUserDefinedData {\n+                        impl_def_id,\n+                        ..\n+                    }) = impl_source\n                     {\n                         // Blame 'tidy' for the weird bracket placement.\n                         if infcx.tcx.impl_polarity(*impl_def_id) == ty::ImplPolarity::Negative {"}, {"sha": "d6c79d1973a71f8ebce94b9c49e2c64c3efe71e0", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -13,7 +13,7 @@ use super::SelectionContext;\n use super::SelectionError;\n use super::{\n     ImplSourceClosureData, ImplSourceDiscriminantKindData, ImplSourceFnPointerData,\n-    ImplSourceGeneratorData, ImplSourceImplData,\n+    ImplSourceGeneratorData, ImplSourceUserDefinedData,\n };\n use super::{Normalized, NormalizedTy, ProjectionCacheEntry, ProjectionCacheKey};\n \n@@ -996,7 +996,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                 debug!(\"assemble_candidates_from_impls: impl_source={:?}\", impl_source);\n                 true\n             }\n-            super::ImplSourceImpl(impl_data) => {\n+            super::ImplSourceUserDefined(impl_data) => {\n                 // We have to be careful when projecting out of an\n                 // impl because of specialization. If we are not in\n                 // codegen (i.e., projection mode is not \"any\"), and the\n@@ -1165,7 +1165,7 @@ fn confirm_select_candidate<'cx, 'tcx>(\n     impl_source: Selection<'tcx>,\n ) -> Progress<'tcx> {\n     match impl_source {\n-        super::ImplSourceImpl(data) => confirm_impl_candidate(selcx, obligation, data),\n+        super::ImplSourceUserDefined(data) => confirm_impl_candidate(selcx, obligation, data),\n         super::ImplSourceGenerator(data) => confirm_generator_candidate(selcx, obligation, data),\n         super::ImplSourceClosure(data) => confirm_closure_candidate(selcx, obligation, data),\n         super::ImplSourceFnPointer(data) => confirm_fn_pointer_candidate(selcx, obligation, data),\n@@ -1449,11 +1449,11 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n fn confirm_impl_candidate<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n-    impl_impl_source: ImplSourceImplData<'tcx, PredicateObligation<'tcx>>,\n+    impl_impl_source: ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n     let tcx = selcx.tcx();\n \n-    let ImplSourceImplData { impl_def_id, substs, nested } = impl_impl_source;\n+    let ImplSourceUserDefinedData { impl_def_id, substs, nested } = impl_impl_source;\n     let assoc_item_id = obligation.predicate.item_def_id;\n     let trait_def_id = tcx.trait_id_of_impl(impl_def_id).unwrap();\n "}, {"sha": "f8d26c06a219d8546aa3471be5532a89ef7e1fb0", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -26,13 +26,13 @@ use crate::traits::TraitNotObjectSafe;\n use crate::traits::{BuiltinDerivedObligation, ImplDerivedObligation};\n use crate::traits::{\n     ImplSourceAutoImpl, ImplSourceBuiltin, ImplSourceClosure, ImplSourceDiscriminantKind,\n-    ImplSourceFnPointer, ImplSourceGenerator, ImplSourceImpl, ImplSourceObject, ImplSourceParam,\n-    ImplSourceTraitAlias,\n+    ImplSourceFnPointer, ImplSourceGenerator, ImplSourceObject, ImplSourceParam,\n+    ImplSourceTraitAlias, ImplSourceUserDefined,\n };\n use crate::traits::{\n     ImplSourceAutoImplData, ImplSourceBuiltinData, ImplSourceClosureData,\n     ImplSourceDiscriminantKindData, ImplSourceFnPointerData, ImplSourceGeneratorData,\n-    ImplSourceImplData, ImplSourceObjectData, ImplSourceTraitAliasData,\n+    ImplSourceObjectData, ImplSourceTraitAliasData, ImplSourceUserDefinedData,\n };\n use crate::traits::{ObjectCastObligation, PredicateObligation, TraitObligation};\n use crate::traits::{Obligation, ObligationCause};\n@@ -64,7 +64,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             ImplCandidate(impl_def_id) => {\n-                Ok(ImplSourceImpl(self.confirm_impl_candidate(obligation, impl_def_id)))\n+                Ok(ImplSourceUserDefined(self.confirm_impl_candidate(obligation, impl_def_id)))\n             }\n \n             AutoImplCandidate(trait_def_id) => {\n@@ -260,7 +260,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         impl_def_id: DefId,\n-    ) -> ImplSourceImplData<'tcx, PredicateObligation<'tcx>> {\n+    ) -> ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>> {\n         debug!(\"confirm_impl_candidate({:?},{:?})\", obligation, impl_def_id);\n \n         // First, create the substitutions by matching the impl again,\n@@ -288,7 +288,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> ImplSourceImplData<'tcx, PredicateObligation<'tcx>> {\n+    ) -> ImplSourceUserDefinedData<'tcx, PredicateObligation<'tcx>> {\n         debug!(\n             \"vtable_impl(impl_def_id={:?}, substs={:?}, recursion_depth={})\",\n             impl_def_id, substs, recursion_depth,\n@@ -314,7 +314,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // e.g., `impl<U: Tr, V: Iterator<Item=U>> Foo<<U as Tr>::T> for V`\n         impl_obligations.append(&mut substs.obligations);\n \n-        ImplSourceImplData { impl_def_id, substs: substs.value, nested: impl_obligations }\n+        ImplSourceUserDefinedData { impl_def_id, substs: substs.value, nested: impl_obligations }\n     }\n \n     fn confirm_object_candidate("}, {"sha": "0acf7691681374387d2d5118b7ee2f2eeee3c8b0", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -84,9 +84,9 @@ fn resolve_associated_item<'tcx>(\n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n     Ok(match vtbl {\n-        traits::ImplSourceImpl(impl_data) => {\n+        traits::ImplSourceUserDefined(impl_data) => {\n             debug!(\n-                \"resolving ImplSourceImpl: {:?}, {:?}, {:?}, {:?}\",\n+                \"resolving ImplSourceUserDefined: {:?}, {:?}, {:?}, {:?}\",\n                 param_env, trait_item, rcvr_substs, impl_data\n             );\n             assert!(!rcvr_substs.needs_infer());"}, {"sha": "4095ab5e10fa5e34e4931788f0f621900a75e983", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c19adeb519707484a8872f353c9cb89ed5eea6/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=00c19adeb519707484a8872f353c9cb89ed5eea6", "patch": "@@ -1303,7 +1303,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                     .at(&ObligationCause::dummy(), self.param_env)\n                     .sup(candidate.xform_self_ty, self_ty);\n                 match self.select_trait_candidate(trait_ref) {\n-                    Ok(Some(traits::ImplSource::ImplSourceImpl(ref impl_data))) => {\n+                    Ok(Some(traits::ImplSource::ImplSourceUserDefined(ref impl_data))) => {\n                         // If only a single impl matches, make the error message point\n                         // to that impl.\n                         ImplSource(impl_data.impl_def_id)"}]}