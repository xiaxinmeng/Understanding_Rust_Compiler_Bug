{"sha": "e1ea2500fcc5e136fbe6a14c488f558e28519c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZWEyNTAwZmNjNWUxMzZmYmU2YTE0YzQ4OGY1NThlMjg1MTljNDU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T15:54:04Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-04T15:54:04Z"}, "message": "Merge #1238\n\n1238: Macro queries r=edwin0cheng a=matklad\n\nIn https://github.com/rust-analyzer/rust-analyzer/pull/1231, I've added aggressive clean up of `ast_id_to_node` query. \r\n\r\nThe result of this query is a `SyntaxTree`, and we don't want to retain syntax trees in memory unless absolutely necessary.\r\n\r\nMoreover, `SyntaxTree` has identity equality semantics, meaning that we'll get a diffferent syntax tree for a file after every reparse. That means that `ast_id_to_node` query should not genereally be used in HIR, unless it is behind some kind of salsa firewall, like the `raw` module of name resoulution.\r\n\r\nHowever, that PR resulted in the abysmal performance: turns out we were using  ast_id_to_node quite heavily in hir when expanding macros! \r\n\r\nSo this PR  installs the more incremental-friendly query structure:\r\n\r\n* converting source to token tree is now a query; changing source without affecting token-trees will now preserve macro expansions\r\n* expand macro (tt -> tt) is now a query as well, so we cache macro expansions *before* parsing them into item lists or expressions, which is nice: we can cache expansion without knowing the calling context!\r\n\r\nr? @edwin0cheng \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "1cbcefd57c0dd75cd1c834e34dd00f9f89e9dd17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cbcefd57c0dd75cd1c834e34dd00f9f89e9dd17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1ea2500fcc5e136fbe6a14c488f558e28519c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1ea2500fcc5e136fbe6a14c488f558e28519c45", "html_url": "https://github.com/rust-lang/rust/commit/e1ea2500fcc5e136fbe6a14c488f558e28519c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1ea2500fcc5e136fbe6a14c488f558e28519c45/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3", "html_url": "https://github.com/rust-lang/rust/commit/fcdb387f0d7e76f325a858e4463efd5d7ed3efc3"}, {"sha": "bcf45371ff19882e67300cc483b481450ee129fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf45371ff19882e67300cc483b481450ee129fb", "html_url": "https://github.com/rust-lang/rust/commit/bcf45371ff19882e67300cc483b481450ee129fb"}], "stats": {"total": 133, "additions": 64, "deletions": 69}, "files": [{"sha": "398e00c42b4349f42fc5c64d9bd06b4bba2f6bb8", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=e1ea2500fcc5e136fbe6a14c488f558e28519c45", "patch": "@@ -42,7 +42,13 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;\n \n-    #[salsa::invoke(HirFileId::hir_parse_query)]\n+    #[salsa::invoke(crate::ids::macro_arg_query)]\n+    fn macro_arg(&self, macro_call: ids::MacroCallId) -> Option<Arc<tt::Subtree>>;\n+\n+    #[salsa::invoke(crate::ids::macro_expand_query)]\n+    fn macro_expand(&self, macro_call: ids::MacroCallId) -> Result<Arc<tt::Subtree>, String>;\n+\n+    #[salsa::invoke(crate::ids::HirFileId::hir_parse_query)]\n     fn hir_parse(&self, file_id: HirFileId) -> TreeArc<SourceFile>;\n \n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n@@ -60,7 +66,7 @@ pub trait DefDatabase: SourceDatabase {\n     #[salsa::invoke(crate::source_id::AstIdMap::ast_id_map_query)]\n     fn ast_id_map(&self, file_id: HirFileId) -> Arc<AstIdMap>;\n \n-    #[salsa::invoke(crate::source_id::AstIdMap::ast_id_to_node_query)]\n+    #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n     fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n \n     #[salsa::invoke(RawItems::raw_items_query)]"}, {"sha": "692da28953966aa4e5ee35aea571e20e9badfcc8", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 13, "deletions": 29, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=e1ea2500fcc5e136fbe6a14c488f558e28519c45", "patch": "@@ -5,14 +5,13 @@ use rustc_hash::FxHashMap;\n \n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n-    SyntaxNodePtr, AstPtr, AstNode,TreeArc,\n+    SyntaxNodePtr, AstPtr, AstNode,\n     ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner}\n };\n \n use crate::{\n     Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId,\n     name::AsName,\n-    ids::{MacroCallId},\n     type_ref::{Mutability, TypeRef},\n };\n use crate::{path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n@@ -826,21 +825,20 @@ where\n                     .with_file_id(self.current_file_id);\n \n                 if let Some(call_id) = self.resolver.resolve_macro_call(self.db, path, ast_id) {\n-                    if let Some(expr) = expand_macro_to_expr(self.db, call_id, e.token_tree()) {\n-                        log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n-                        let old_file_id =\n-                            std::mem::replace(&mut self.current_file_id, call_id.into());\n-                        let id = self.collect_expr(&expr);\n-                        self.current_file_id = old_file_id;\n-                        id\n-                    } else {\n-                        // FIXME: Instead of just dropping the error from expansion\n-                        // report it\n-                        self.alloc_expr(Expr::Missing, syntax_ptr)\n+                    if let Some(tt) = self.db.macro_expand(call_id).ok() {\n+                        if let Some(expr) = mbe::token_tree_to_expr(&tt).ok() {\n+                            log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n+                            let old_file_id =\n+                                std::mem::replace(&mut self.current_file_id, call_id.into());\n+                            let id = self.collect_expr(&expr);\n+                            self.current_file_id = old_file_id;\n+                            return id;\n+                        }\n                     }\n-                } else {\n-                    self.alloc_expr(Expr::Missing, syntax_ptr)\n                 }\n+                // FIXME: Instead of just dropping the error from expansion\n+                // report it\n+                self.alloc_expr(Expr::Missing, syntax_ptr)\n             }\n         }\n     }\n@@ -999,20 +997,6 @@ where\n     }\n }\n \n-fn expand_macro_to_expr(\n-    db: &impl HirDatabase,\n-    macro_call: MacroCallId,\n-    args: Option<&ast::TokenTree>,\n-) -> Option<TreeArc<ast::Expr>> {\n-    let rules = db.macro_def(macro_call.loc(db).def)?;\n-\n-    let args = mbe::ast_to_token_tree(args?)?.0;\n-\n-    let expanded = rules.expand(&args).ok()?;\n-\n-    mbe::token_tree_to_expr(&expanded).ok()\n-}\n-\n pub(crate) fn body_with_source_map_query(\n     db: &impl HirDatabase,\n     def: DefWithBody,"}, {"sha": "4102951c95439ba038d2478f3c0d3491286f7279", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=e1ea2500fcc5e136fbe6a14c488f558e28519c45", "patch": "@@ -63,47 +63,27 @@ impl HirFileId {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(macro_call_id) => {\n-                parse_macro(db, macro_call_id).unwrap_or_else(|err| {\n-                    // Note:\n-                    // The final goal we would like to make all parse_macro success,\n-                    // such that the following log will not call anyway.\n-                    log::warn!(\n-                        \"fail on macro_parse: (reason: {}) {}\",\n-                        err,\n-                        macro_call_id.debug_dump(db)\n-                    );\n-\n-                    // returning an empty string looks fishy...\n-                    SourceFile::parse(\"\")\n-                })\n+                match db.macro_expand(macro_call_id) {\n+                    Ok(tt) => mbe::token_tree_to_ast_item_list(&tt),\n+                    Err(err) => {\n+                        // Note:\n+                        // The final goal we would like to make all parse_macro success,\n+                        // such that the following log will not call anyway.\n+                        log::warn!(\n+                            \"fail on macro_parse: (reason: {}) {}\",\n+                            err,\n+                            macro_call_id.debug_dump(db)\n+                        );\n+\n+                        // returning an empty string looks fishy...\n+                        SourceFile::parse(\"\")\n+                    }\n+                }\n             }\n         }\n     }\n }\n \n-fn parse_macro(\n-    db: &impl DefDatabase,\n-    macro_call_id: MacroCallId,\n-) -> Result<TreeArc<SourceFile>, String> {\n-    let loc = macro_call_id.loc(db);\n-    let macro_call = loc.ast_id.to_node(db);\n-    let (macro_arg, _) = macro_call\n-        .token_tree()\n-        .and_then(mbe::ast_to_token_tree)\n-        .ok_or(\"Fail to args in to tt::TokenTree\")?;\n-\n-    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n-    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n-\n-    // Set a hard limit for the expanded tt\n-    let count = tt.count();\n-    if count > 65536 {\n-        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n-    }\n-\n-    Ok(mbe::token_tree_to_ast_item_list(&tt))\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n enum HirFileIdRepr {\n     File(FileId),\n@@ -139,6 +119,31 @@ pub(crate) fn macro_def_query(db: &impl DefDatabase, id: MacroDefId) -> Option<A\n     Some(Arc::new(rules))\n }\n \n+pub(crate) fn macro_arg_query(db: &impl DefDatabase, id: MacroCallId) -> Option<Arc<tt::Subtree>> {\n+    let loc = id.loc(db);\n+    let macro_call = loc.ast_id.to_node(db);\n+    let arg = macro_call.token_tree()?;\n+    let (tt, _) = mbe::ast_to_token_tree(arg)?;\n+    Some(Arc::new(tt))\n+}\n+\n+pub(crate) fn macro_expand_query(\n+    db: &impl DefDatabase,\n+    id: MacroCallId,\n+) -> Result<Arc<tt::Subtree>, String> {\n+    let loc = id.loc(db);\n+    let macro_arg = db.macro_arg(id).ok_or(\"Fail to args in to tt::TokenTree\")?;\n+\n+    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n+    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n+    // Set a hard limit for the expanded tt\n+    let count = tt.count();\n+    if count > 65536 {\n+        return Err(format!(\"Total tokens count exceed limit : count = {}\", count));\n+    }\n+    Ok(Arc::new(tt))\n+}\n+\n macro_rules! impl_intern_key {\n     ($name:ident) => {\n         impl salsa::InternKey for $name {"}, {"sha": "0a8fb6d3285ad68d998664812a51f457df0fc9a2", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=e1ea2500fcc5e136fbe6a14c488f558e28519c45", "patch": "@@ -92,7 +92,7 @@ impl AstIdMap {\n         Arc::new(AstIdMap::from_source_file(&source_file))\n     }\n \n-    pub(crate) fn ast_id_to_node_query(\n+    pub(crate) fn file_item_query(\n         db: &impl DefDatabase,\n         file_id: HirFileId,\n         ast_id: ErasedFileAstId,"}, {"sha": "011ef0616fcd17384b8d0f010ab7c84aa3c51ae7", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/e1ea2500fcc5e136fbe6a14c488f558e28519c45/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=e1ea2500fcc5e136fbe6a14c488f558e28519c45", "patch": "@@ -674,7 +674,7 @@ Grammar(\n         \"LifetimeArg\": (),\n \n         \"MacroItems\": (\n-            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],\n+            traits: [ \"ModuleItemOwner\", \"FnDefOwner\" ],            \n         ),\n \n         \"MacroStmts\" : ("}]}