{"sha": "1077adae129f140a98901f5c7fecf15f75bd8a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzdhZGFlMTI5ZjE0MGE5ODkwMWY1YzdmZWNmMTVmNzViZDhhNGM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-01-23T00:02:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-23T00:02:17Z"}, "message": "Rollup merge of #68425 - phi-gamma:try-method, r=varkor\n\nFix try-op diagnostic in E0277 for methods\n\nFor methods the try-op diagnostic displays the empty string where\nit has more descriptive strings like \u201ca function\u201d otherwise:\n\n    error[E0277]: the `?` operator can only be used in  that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n                                                      ^^\n       | |             ^^ cannot use the `?` operator in  that returns `()`\n                                                        ^^\n\nI\u2019m seeing this on nightly (rustc 1.42.0-nightly (b5a3341f1\n2020-01-20)) and [on the playpen](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0e7ce7792c2aceb8056941710d539124).\n\nThe changeset add strings for impl methods and trait provided\nmethods and test cases for the option type.", "tree": {"sha": "e39c72e6a105c238f8377c2784c16d9484ac0c74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39c72e6a105c238f8377c2784c16d9484ac0c74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1077adae129f140a98901f5c7fecf15f75bd8a4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKOKJCRBK7hj4Ov3rIwAAdHIIABCQSLOzoXwmF8dpl6NCnPBd\nNVvYuNPJ5Q6+fmfhvH7Aj0exshnF9NXHnr3/anDHIrANmiWyHz+XrqASzn56Arp8\nbaVt28jxMQiLQj3BjeMocjn4lKHIfb4wcBuGyYAsDyOCe5r/JfXTls23Rs9r0yKc\n0n6uBPauVyUqhgxgdOFOlZ8do9cMFNtZeNp6gzjGHsptQhl0dpPuwVefya/TwKhH\n1T16mR0t3wOwv70YEJzu8xUIsfcwC8vBX/cEPGiOwsatkZ1WglomitFmSePQxaxN\nrRwywgngx0cR2M32BOI7FJ28wM5+wILPzf1rkCDVFfsB3fovffeM8bxirGAiaks=\n=JdAf\n-----END PGP SIGNATURE-----\n", "payload": "tree e39c72e6a105c238f8377c2784c16d9484ac0c74\nparent 97ac2591480cd66e8b40b34420dd275235a80bd4\nparent db3b40c2a1fe6129a7bbc12df6260b7197731153\nauthor Tyler Mandry <tmandry@gmail.com> 1579737737 -0800\ncommitter GitHub <noreply@github.com> 1579737737 -0800\n\nRollup merge of #68425 - phi-gamma:try-method, r=varkor\n\nFix try-op diagnostic in E0277 for methods\n\nFor methods the try-op diagnostic displays the empty string where\nit has more descriptive strings like \u201ca function\u201d otherwise:\n\n    error[E0277]: the `?` operator can only be used in  that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n                                                      ^^\n       | |             ^^ cannot use the `?` operator in  that returns `()`\n                                                        ^^\n\nI\u2019m seeing this on nightly (rustc 1.42.0-nightly (b5a3341f1\n2020-01-20)) and [on the playpen](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0e7ce7792c2aceb8056941710d539124).\n\nThe changeset add strings for impl methods and trait provided\nmethods and test cases for the option type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1077adae129f140a98901f5c7fecf15f75bd8a4c", "html_url": "https://github.com/rust-lang/rust/commit/1077adae129f140a98901f5c7fecf15f75bd8a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1077adae129f140a98901f5c7fecf15f75bd8a4c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ac2591480cd66e8b40b34420dd275235a80bd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ac2591480cd66e8b40b34420dd275235a80bd4", "html_url": "https://github.com/rust-lang/rust/commit/97ac2591480cd66e8b40b34420dd275235a80bd4"}, {"sha": "db3b40c2a1fe6129a7bbc12df6260b7197731153", "url": "https://api.github.com/repos/rust-lang/rust/commits/db3b40c2a1fe6129a7bbc12df6260b7197731153", "html_url": "https://github.com/rust-lang/rust/commit/db3b40c2a1fe6129a7bbc12df6260b7197731153"}], "stats": {"total": 111, "additions": 90, "deletions": 21}, "files": [{"sha": "2ba12baaf6d6e5aac290edba6b61c44ac574b915", "filename": "src/librustc/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=1077adae129f140a98901f5c7fecf15f75bd8a4c", "patch": "@@ -59,31 +59,45 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     fn describe_enclosure(&self, hir_id: hir::HirId) -> Option<&'static str> {\n         let hir = &self.tcx.hir();\n         let node = hir.find(hir_id)?;\n-        if let hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) = &node {\n-            self.describe_generator(*body_id).or_else(|| {\n+        match &node {\n+            hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, _, body_id), .. }) => {\n+                self.describe_generator(*body_id).or_else(|| {\n+                    Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n+                        \"an async function\"\n+                    } else {\n+                        \"a function\"\n+                    })\n+                })\n+            }\n+            hir::Node::TraitItem(hir::TraitItem {\n+                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n+            hir::Node::ImplItem(hir::ImplItem {\n+                kind: hir::ImplItemKind::Method(sig, body_id),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if let hir::FnHeader { asyncness: hir::IsAsync::Async, .. } = sig.header {\n-                    \"an async function\"\n+                    \"an async method\"\n                 } else {\n-                    \"a function\"\n+                    \"a method\"\n                 })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n-            ..\n-        }) = &node\n-        {\n-            self.describe_generator(*body_id).or_else(|| {\n+            }),\n+            hir::Node::Expr(hir::Expr {\n+                kind: hir::ExprKind::Closure(_is_move, _, body_id, _, gen_movability),\n+                ..\n+            }) => self.describe_generator(*body_id).or_else(|| {\n                 Some(if gen_movability.is_some() { \"an async closure\" } else { \"a closure\" })\n-            })\n-        } else if let hir::Node::Expr(hir::Expr { .. }) = &node {\n-            let parent_hid = hir.get_parent_node(hir_id);\n-            if parent_hid != hir_id {\n-                return self.describe_enclosure(parent_hid);\n-            } else {\n-                None\n+            }),\n+            hir::Node::Expr(hir::Expr { .. }) => {\n+                let parent_hid = hir.get_parent_node(hir_id);\n+                if parent_hid != hir_id {\n+                    return self.describe_enclosure(parent_hid);\n+                } else {\n+                    None\n+                }\n             }\n-        } else {\n-            None\n+            _ => None,\n         }\n     }\n "}, {"sha": "63d17414c313bab96f509f4f12ed99b2dbf61a54", "filename": "src/test/ui/try-on-option-diagnostics.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.rs?ref=1077adae129f140a98901f5c7fecf15f75bd8a4c", "patch": "@@ -16,3 +16,32 @@ fn a_closure() -> u32 {\n     };\n     a_closure()\n }\n+\n+fn a_method() -> u32 {\n+    struct S;\n+\n+    impl S {\n+        fn a_method() {\n+            let x: Option<u32> = None;\n+            x?; //~ ERROR the `?` operator\n+        }\n+    }\n+\n+    S::a_method();\n+    22\n+}\n+\n+fn a_trait_method() -> u32 {\n+    struct S;\n+    trait T {\n+        fn a_trait_method() {\n+            let x: Option<u32> = None;\n+            x?; //~ ERROR the `?` operator\n+        }\n+    }\n+\n+    impl T for S { }\n+\n+    S::a_trait_method();\n+    22\n+}"}, {"sha": "c9dc3f1b87969841b90c14d9a5c348fe8f0f7e91", "filename": "src/test/ui/try-on-option-diagnostics.stderr", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1077adae129f140a98901f5c7fecf15f75bd8a4c/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option-diagnostics.stderr?ref=1077adae129f140a98901f5c7fecf15f75bd8a4c", "patch": "@@ -27,6 +27,32 @@ LL | |     };\n    = help: the trait `std::ops::Try` is not implemented for `{integer}`\n    = note: required by `std::ops::Try::from_error`\n \n-error: aborting due to 2 previous errors\n+error[E0277]: the `?` operator can only be used in a method that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:26:13\n+   |\n+LL | /         fn a_method() {\n+LL | |             let x: Option<u32> = None;\n+LL | |             x?;\n+   | |             ^^ cannot use the `?` operator in a method that returns `()`\n+LL | |         }\n+   | |_________- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error[E0277]: the `?` operator can only be used in a trait method that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n+  --> $DIR/try-on-option-diagnostics.rs:39:13\n+   |\n+LL | /         fn a_trait_method() {\n+LL | |             let x: Option<u32> = None;\n+LL | |             x?;\n+   | |             ^^ cannot use the `?` operator in a trait method that returns `()`\n+LL | |         }\n+   | |_________- this function should return `Result` or `Option` to accept `?`\n+   |\n+   = help: the trait `std::ops::Try` is not implemented for `()`\n+   = note: required by `std::ops::Try::from_error`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}