{"sha": "e1d5d1c049608cf182ddc91c98d9700089a35600", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZDVkMWMwNDk2MDhjZjE4MmRkYzkxYzk4ZDk3MDAwODlhMzU2MDA=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-12T01:50:05Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-13T02:31:13Z"}, "message": "dlist: Use DoubleEndedIterator for .consume_rev_iter()", "tree": {"sha": "23f3c6b7cc50fe256301ef588dcf7a6cf3ee0df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23f3c6b7cc50fe256301ef588dcf7a6cf3ee0df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1d5d1c049608cf182ddc91c98d9700089a35600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d5d1c049608cf182ddc91c98d9700089a35600", "html_url": "https://github.com/rust-lang/rust/commit/e1d5d1c049608cf182ddc91c98d9700089a35600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1d5d1c049608cf182ddc91c98d9700089a35600/comments", "author": null, "committer": null, "parents": [{"sha": "89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "html_url": "https://github.com/rust-lang/rust/commit/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e"}], "stats": {"total": 16, "additions": 4, "deletions": 12}, "files": [{"sha": "60850654607933e9570bb70b5d307cee7c8c3d6d", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1d5d1c049608cf182ddc91c98d9700089a35600/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d5d1c049608cf182ddc91c98d9700089a35600/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=e1d5d1c049608cf182ddc91c98d9700089a35600", "patch": "@@ -72,11 +72,6 @@ pub struct ConsumeIterator<T> {\n     priv list: DList<T>\n }\n \n-/// DList reverse consuming iterator\n-pub struct ConsumeRevIterator<T> {\n-    priv list: DList<T>\n-}\n-\n /// Rawlink is a type like Option<T> but for holding a raw pointer\n impl<T> Rawlink<T> {\n     /// Like Option::None for Rawlink\n@@ -346,8 +341,8 @@ impl<T> DList<T> {\n     }\n \n     /// Consume the list into an iterator yielding elements by value, in reverse\n-    pub fn consume_rev_iter(self) -> ConsumeRevIterator<T> {\n-        ConsumeRevIterator{list: self}\n+    pub fn consume_rev_iter(self) -> InvertIterator<T, ConsumeIterator<T>> {\n+        self.consume_iter().invert()\n     }\n }\n \n@@ -494,11 +489,8 @@ impl<A> Iterator<A> for ConsumeIterator<A> {\n     }\n }\n \n-impl<A> Iterator<A> for ConsumeRevIterator<A> {\n-    fn next(&mut self) -> Option<A> { self.list.pop_back() }\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        (self.list.length, Some(self.list.length))\n-    }\n+impl<A> DoubleEndedIterator<A> for ConsumeIterator<A> {\n+    fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n impl<A, T: Iterator<A>> FromIterator<A, T> for DList<A> {"}]}