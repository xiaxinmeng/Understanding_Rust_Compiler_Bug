{"sha": "d3b31065e36df802e63be282f0b5148cc8b1a68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzYjMxMDY1ZTM2ZGY4MDJlNjNiZTI4MmYwYjUxNDhjYzhiMWE2OGE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T17:59:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T17:59:55Z"}, "message": "Rollup merge of #80017 - camelid:sugg-rest-pattern, r=estebank\n\nSuggest `_` and `..` if a pattern has too few fields\n\nFixes #80010.", "tree": {"sha": "0a513c9b5437dad040e60d2c4c1a667ef3c8c7a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a513c9b5437dad040e60d2c4c1a667ef3c8c7a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3b31065e36df802e63be282f0b5148cc8b1a68a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIabCRBK7hj4Ov3rIwAAdHIIAIdC/QWfGDtYb5NWKC4nkloa\nIPdWdOQjeG9J9MaJpPvRXNYikJ8AgfqHg4XJ9rcDTAZ9DPOhSu9S+Yo7g420Espv\nitBfKjaTg3icjxcqD6qi6WNXMJOHs11O8VBHIrhkNYtDA3WPjiws7ts/LrD0TNAn\nOb9vh4MFmjV/m00QnUWg/mkwAzhK2KxwOJau2hgdGD5MvoYT+JgdIvSOBdg74lJk\nG2s7MoT1AwE3p36xT9b/jtWy02uLlE9UyjE4VESnWShZAXULDy215s7SOseKkec1\n5zhCcUKtFO+k3+V8TOcgAUU4TMkz8RBJB82yiwxD/99i03y4bMvqA6ZBv79lyx8=\n=H4LH\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a513c9b5437dad040e60d2c4c1a667ef3c8c7a6\nparent 8ac21fb201bc374fe958a0a98150c2c8d2c798db\nparent e8c87935e0004ff784ad361a5bac39d7677c3f4f\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647195 +0000\ncommitter GitHub <noreply@github.com> 1610647195 +0000\n\nRollup merge of #80017 - camelid:sugg-rest-pattern, r=estebank\n\nSuggest `_` and `..` if a pattern has too few fields\n\nFixes #80010.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b31065e36df802e63be282f0b5148cc8b1a68a", "html_url": "https://github.com/rust-lang/rust/commit/d3b31065e36df802e63be282f0b5148cc8b1a68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3b31065e36df802e63be282f0b5148cc8b1a68a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac21fb201bc374fe958a0a98150c2c8d2c798db", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac21fb201bc374fe958a0a98150c2c8d2c798db", "html_url": "https://github.com/rust-lang/rust/commit/8ac21fb201bc374fe958a0a98150c2c8d2c798db"}, {"sha": "e8c87935e0004ff784ad361a5bac39d7677c3f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c87935e0004ff784ad361a5bac39d7677c3f4f", "html_url": "https://github.com/rust-lang/rust/commit/e8c87935e0004ff784ad361a5bac39d7677c3f4f"}], "stats": {"total": 298, "additions": 291, "deletions": 7}, "files": [{"sha": "ecc6e8599ad01d2ccd7e8084fe69b9477f658441", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -15,6 +15,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n+use rustc_span::{BytePos, DUMMY_SP};\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n \n use std::cmp;\n@@ -1001,7 +1002,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // More generally, the expected type wants a tuple variant with one field of an\n         // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n         // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n-        let missing_parenthesis = match (&expected.kind(), fields, had_err) {\n+        let missing_parentheses = match (&expected.kind(), fields, had_err) {\n             // #67037: only do this if we could successfully type-check the expected type against\n             // the tuple struct pattern. Otherwise the substs could get out of range on e.g.,\n             // `let P() = U;` where `P != U` with `struct P<T>(T);`.\n@@ -1014,13 +1015,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ => false,\n         };\n-        if missing_parenthesis {\n+        if missing_parentheses {\n             let (left, right) = match subpats {\n                 // This is the zero case; we aim to get the \"hi\" part of the `QPath`'s\n                 // span as the \"lo\" and then the \"hi\" part of the pattern's span as the \"hi\".\n                 // This looks like:\n                 //\n-                // help: missing parenthesis\n+                // help: missing parentheses\n                 //   |\n                 // L |     let A(()) = A(());\n                 //   |          ^  ^\n@@ -1029,17 +1030,63 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // last sub-pattern. In the case of `A(x)` the first and last may coincide.\n                 // This looks like:\n                 //\n-                // help: missing parenthesis\n+                // help: missing parentheses\n                 //   |\n                 // L |     let A((x, y)) = A((1, 2));\n                 //   |           ^    ^\n                 [first, ..] => (first.span.shrink_to_lo(), subpats.last().unwrap().span),\n             };\n             err.multipart_suggestion(\n-                \"missing parenthesis\",\n+                \"missing parentheses\",\n                 vec![(left, \"(\".to_string()), (right.shrink_to_hi(), \")\".to_string())],\n                 Applicability::MachineApplicable,\n             );\n+        } else if fields.len() > subpats.len() {\n+            let after_fields_span = if pat_span == DUMMY_SP {\n+                pat_span\n+            } else {\n+                pat_span.with_hi(pat_span.hi() - BytePos(1)).shrink_to_hi()\n+            };\n+            let all_fields_span = match subpats {\n+                [] => after_fields_span,\n+                [field] => field.span,\n+                [first, .., last] => first.span.to(last.span),\n+            };\n+\n+            // Check if all the fields in the pattern are wildcards.\n+            let all_wildcards = subpats.iter().all(|pat| matches!(pat.kind, PatKind::Wild));\n+\n+            let mut wildcard_sugg = vec![\"_\"; fields.len() - subpats.len()].join(\", \");\n+            if !subpats.is_empty() {\n+                wildcard_sugg = String::from(\", \") + &wildcard_sugg;\n+            }\n+\n+            err.span_suggestion_verbose(\n+                after_fields_span,\n+                \"use `_` to explicitly ignore each field\",\n+                wildcard_sugg,\n+                Applicability::MaybeIncorrect,\n+            );\n+\n+            // Only suggest `..` if more than one field is missing\n+            // or the pattern consists of all wildcards.\n+            if fields.len() - subpats.len() > 1 || all_wildcards {\n+                if subpats.is_empty() || all_wildcards {\n+                    err.span_suggestion_verbose(\n+                        all_fields_span,\n+                        \"use `..` to ignore all fields\",\n+                        String::from(\"..\"),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    err.span_suggestion_verbose(\n+                        after_fields_span,\n+                        \"use `..` to ignore the rest of the fields\",\n+                        String::from(\", ..\"),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n         }\n \n         err.emit();"}, {"sha": "c270593cac741883fcc242d2961983adb4849b88", "filename": "src/test/ui/destructuring-assignment/tuple_struct_destructure_fail.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_struct_destructure_fail.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -31,6 +31,15 @@ LL | struct TupleStruct<S, T>(S, T);\n ...\n LL |     TupleStruct(_) = TupleStruct(1, 2);\n    |     ^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     TupleStruct(_, _) = TupleStruct(1, 2);\n+   |                  ^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |     TupleStruct(..) = TupleStruct(1, 2);\n+   |                 ^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/tuple_struct_destructure_fail.rs:34:5\n@@ -49,6 +58,15 @@ LL |     SingleVariant(S, T)\n ...\n LL |     Enum::SingleVariant(_) = Enum::SingleVariant(1, 2);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     Enum::SingleVariant(_, _) = Enum::SingleVariant(1, 2);\n+   |                          ^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |     Enum::SingleVariant(..) = Enum::SingleVariant(1, 2);\n+   |                         ^^\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/tuple_struct_destructure_fail.rs:40:12"}, {"sha": "832eba69722134f762552a8ab1073de8660d9a29", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -6,6 +6,11 @@ LL |     Apple(String, String),\n ...\n LL |         Fruit::Apple(a) => {},\n    |         ^^^^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Fruit::Apple(a, _) => {},\n+   |                       ^^^\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/E0023.rs:12:9\n@@ -34,7 +39,7 @@ LL |     Orange((String, String)),\n LL |         Fruit::Orange(a, b) => {},\n    |         ^^^^^^^^^^^^^^^^^^^ expected 1 field, found 2\n    |\n-help: missing parenthesis\n+help: missing parentheses\n    |\n LL |         Fruit::Orange((a, b)) => {},\n    |                       ^    ^\n@@ -48,7 +53,7 @@ LL |     Banana(()),\n LL |         Fruit::Banana() => {},\n    |         ^^^^^^^^^^^^^^^ expected 1 field, found 0\n    |\n-help: missing parenthesis\n+help: missing parentheses\n    |\n LL |         Fruit::Banana(()) => {},\n    |                      ^  ^"}, {"sha": "9bdbf0bf9f40dfced6ed3e35aea1a6591fb913c0", "filename": "src/test/ui/issues/issue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67037-pat-tup-scrut-ty-diff-less-fields.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -17,6 +17,15 @@ LL | struct P<T>(T); // 1 type parameter wanted\n ...\n LL |     let P() = U {};\n    |         ^^^ expected 1 field, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |     let P(_) = U {};\n+   |           ^\n+help: use `..` to ignore all fields\n+   |\n+LL |     let P(..) = U {};\n+   |           ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a1e8ec1677db5feac9cc831ef18a2bf3809030af", "filename": "src/test/ui/issues/issue-72574-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-2.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -26,6 +26,11 @@ LL | struct Binder(i32, i32, i32);\n ...\n LL |         Binder(_a, _x @ ..) => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Binder(_a, _x @ .., _) => {}\n+   |                           ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "37839482b31a2ef3aabae9fb356661db531c0241", "filename": "src/test/ui/match/match-pattern-field-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-pattern-field-mismatch.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -6,6 +6,15 @@ LL |         Rgb(usize, usize, usize),\n ...\n LL |           Color::Rgb(_, _) => { }\n    |           ^^^^^^^^^^^^^^^^ expected 3 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |           Color::Rgb(_, _, _) => { }\n+   |                          ^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |           Color::Rgb(..) => { }\n+   |                      ^^\n \n error: aborting due to previous error\n "}, {"sha": "f7644c19ea0d9cbc3435ef5a65f2beccb0bb2038", "filename": "src/test/ui/pattern/issue-74539.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74539.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -26,6 +26,11 @@ LL |     A(u8, u8),\n ...\n LL |         E::A(x @ ..) => {\n    |         ^^^^^^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::A(x @ .., _) => {\n+   |                    ^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "ed852a47bb4ee1752ea520fe2c24be41c796b7a8", "filename": "src/test/ui/pattern/pat-tuple-underfield.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.rs?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -0,0 +1,55 @@\n+struct S(i32, f32);\n+enum E {\n+    S(i32, f32),\n+}\n+struct Point4(i32, i32, i32, i32);\n+\n+fn main() {\n+    match S(0, 1.0) {\n+        S(x) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+    }\n+    match S(0, 1.0) {\n+        S(_) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n+    }\n+    match S(0, 1.0) {\n+        S() => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n+    }\n+\n+    match E::S(0, 1.0) {\n+        E::S(x) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+    }\n+    match E::S(0, 1.0) {\n+        E::S(_) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n+    }\n+    match E::S(0, 1.0) {\n+        E::S() => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore all fields\n+    }\n+    match E::S(0, 1.0) {\n+        E::S => {}\n+        //~^ ERROR expected unit struct, unit variant or constant, found tuple variant `E::S`\n+        //~| HELP use the tuple variant pattern syntax instead\n+    }\n+\n+    match Point4(0, 1, 2, 3) {\n+        Point4(   a   ,     _    ) => {}\n+        //~^ ERROR this pattern has 2 fields, but the corresponding tuple struct has 4 fields\n+        //~| HELP use `_` to explicitly ignore each field\n+        //~| HELP use `..` to ignore the rest of the fields\n+    }\n+}"}, {"sha": "76323d9a7bf56cba5ce792cbb2929dec11830858", "filename": "src/test/ui/pattern/pat-tuple-underfield.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3b31065e36df802e63be282f0b5148cc8b1a68a/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-underfield.stderr?ref=d3b31065e36df802e63be282f0b5148cc8b1a68a", "patch": "@@ -0,0 +1,131 @@\n+error[E0532]: expected unit struct, unit variant or constant, found tuple variant `E::S`\n+  --> $DIR/pat-tuple-underfield.rs:44:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- `E::S` defined here\n+...\n+LL |         E::S => {}\n+   |         ^^^^ help: use the tuple variant pattern syntax instead: `E::S(_, _)`\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:9:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S(x) => {}\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(x, _) => {}\n+   |            ^^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:14:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S(_) => {}\n+   |         ^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _) => {}\n+   |            ^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |         S(..) => {}\n+   |           ^^\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:20:9\n+   |\n+LL | struct S(i32, f32);\n+   | ------------------- tuple struct defined here\n+...\n+LL |         S() => {}\n+   |         ^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         S(_, _) => {}\n+   |           ^^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |         S(..) => {}\n+   |           ^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:27:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S(x) => {}\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(x, _) => {}\n+   |               ^^^\n+\n+error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:32:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S(_) => {}\n+   |         ^^^^^^^ expected 2 fields, found 1\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(_, _) => {}\n+   |               ^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |         E::S(..) => {}\n+   |              ^^\n+\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 2 fields\n+  --> $DIR/pat-tuple-underfield.rs:38:9\n+   |\n+LL |     S(i32, f32),\n+   |     ----------- tuple variant defined here\n+...\n+LL |         E::S() => {}\n+   |         ^^^^^^ expected 2 fields, found 0\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         E::S(_, _) => {}\n+   |              ^^^^\n+help: use `..` to ignore all fields\n+   |\n+LL |         E::S(..) => {}\n+   |              ^^\n+\n+error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 4 fields\n+  --> $DIR/pat-tuple-underfield.rs:50:9\n+   |\n+LL | struct Point4(i32, i32, i32, i32);\n+   | ---------------------------------- tuple struct defined here\n+...\n+LL |         Point4(   a   ,     _    ) => {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 4 fields, found 2\n+   |\n+help: use `_` to explicitly ignore each field\n+   |\n+LL |         Point4(   a   ,     _    , _, _) => {}\n+   |                                  ^^^^^^\n+help: use `..` to ignore the rest of the fields\n+   |\n+LL |         Point4(   a   ,     _    , ..) => {}\n+   |                                  ^^^^\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0023, E0532.\n+For more information about an error, try `rustc --explain E0023`."}]}