{"sha": "2665f1066238e46a91ace101b9010e272fc8dfe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NjVmMTA2NjIzOGU0NmE5MWFjZTEwMWI5MDEwZTI3MmZjOGRmZTc=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-07-25T18:02:52Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-07-25T18:02:52Z"}, "message": "fix a bunch of typos found by codespell", "tree": {"sha": "cf32c5e9c9f4268cefdfc78d46e69e03ee8a588f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf32c5e9c9f4268cefdfc78d46e69e03ee8a588f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2665f1066238e46a91ace101b9010e272fc8dfe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2665f1066238e46a91ace101b9010e272fc8dfe7", "html_url": "https://github.com/rust-lang/rust/commit/2665f1066238e46a91ace101b9010e272fc8dfe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2665f1066238e46a91ace101b9010e272fc8dfe7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfc9b33f17b9255224c9e7927dfbf80c6a8547b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc9b33f17b9255224c9e7927dfbf80c6a8547b6", "html_url": "https://github.com/rust-lang/rust/commit/cfc9b33f17b9255224c9e7927dfbf80c6a8547b6"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "2c673fdfe3f70b7a564bbbc1b07340b0999aed9e", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n }\n \n impl ExcessivePrecision {\n-    // None if nothing to lint, Some(suggestion) if lint neccessary\n+    // None if nothing to lint, Some(suggestion) if lint necessary\n     fn check(&self, sym: Symbol, fty: FloatTy) -> Option<String> {\n         let max = max_digits(fty);\n         let sym_str = sym.as_str();"}, {"sha": "85a9c13ff35c2aaca1411ede160739ee280ce0ff", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -2217,7 +2217,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n             ExprKind::Path(_) => self.insert_def_id(ex),\n-            // If there is any fuction/method call\u2026 we just stop analysis\n+            // If there is any function/method call\u2026 we just stop analysis\n             ExprKind::Call(..) | ExprKind::MethodCall(..) => self.skip = true,\n \n             _ => walk_expr(self, ex),"}, {"sha": "6bdcd004134eb97a37c8458abeb73a2e0bf68d21", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -383,7 +383,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n                                            arm.pats[0].span,\n                                            \"Err(_) will match all errors, maybe not a good idea\",\n                                            arm.pats[0].span,\n-                                           \"to remove this warning, match each error seperately \\\n+                                           \"to remove this warning, match each error separately \\\n                                             or use unreachable macro\");\n                     }\n                 }"}, {"sha": "f53e2cb0cce803d9ad521de9d4ded66248301d59", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -11,7 +11,7 @@ use crate::utils::{self, paths, span_lint};\n ///\n /// **Why is this bad?**\n /// These operators make it easy to forget that the underlying types actually allow not only three\n-/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). This is\n+/// potential Orderings (Less, Equal, Greater) but also a fourth one (Uncomparable). This is\n /// especially easy to miss if the operator based comparison result is negated.\n ///\n /// **Known problems:** None."}, {"sha": "7b3f6f20fc74919ec5024a9d32076c870e9d3251", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -700,7 +700,7 @@ declare_clippy_lint! {\n \n /// **What it does:** Checks for casts of a function pointer to a numeric type not enough to store address.\n ///\n-/// **Why is this bad?** Casting a function pointer to not eligable type could truncate the address value.\n+/// **Why is this bad?** Casting a function pointer to not eligible type could truncate the address value.\n ///\n /// **Known problems:** None.\n ///"}, {"sha": "11187559bf6ad58ca76d6fe00842bc0d232b3211", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -334,7 +334,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n     Sugg::BinOp(op, sugg.into())\n }\n \n-/// Convinience wrapper arround `make_assoc` and `AssocOp::from_ast_binop`.\n+/// Convenience wrapper around `make_assoc` and `AssocOp::from_ast_binop`.\n pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static> {\n     make_assoc(AssocOp::from_ast_binop(op), lhs, rhs)\n }"}, {"sha": "2b5118fa814e48aa162be706bb9bf2b4f25bbdb4", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -31,11 +31,11 @@ fn main() {\n     if x.is_ok() {\n         x = Err(());\n         x.unwrap(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n+        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     } else {\n         x = Ok(());\n         x.unwrap_err(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n+        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     }\n }\n "}, {"sha": "bc0c3172bf0652e9d6177f7eb7061c5b38a82004", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -389,7 +389,7 @@ fn main() {\n     let m: Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n     for (_, v) in &*m {\n         let _v = v;\n-        // Here the `*` is not actually necesarry, but the test tests that we don't\n+        // Here the `*` is not actually necessary, but the test tests that we don't\n         // suggest\n         // `in *m.values()` as we used to\n     }"}, {"sha": "9e801911602c79b50d924742646b651dd307ee28", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -9,7 +9,7 @@ fn foob() -> bool { unimplemented!() }\n \n #[allow(many_single_char_names)]\n fn immutable_condition() {\n-    // Should warn when all vars mentionned are immutable\n+    // Should warn when all vars mentioned are immutable\n     let y = 0;\n     while y < 10 {\n         println!(\"KO - y is immutable\");\n@@ -69,11 +69,11 @@ fn unused_var() {\n \n     while i < 3 {\n         j = 3;\n-        println!(\"KO - i not mentionned\");\n+        println!(\"KO - i not mentioned\");\n     }\n \n     while i < 3 && j > 0 {\n-        println!(\"KO - i and j not mentionned\");\n+        println!(\"KO - i and j not mentioned\");\n     }\n \n     while i < 3 {\n@@ -84,7 +84,7 @@ fn unused_var() {\n \n     while i < 3 && j > 0 {\n         i = 5;\n-        println!(\"OK - i in cond and mentionned\");\n+        println!(\"OK - i in cond and mentioned\");\n     }\n }\n "}, {"sha": "5bfc3271c4506c3f64106946de46402b55eeb8cd", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -164,7 +164,7 @@ error: Err(_) will match all errors, maybe not a good idea\n     |         ^^^^^^\n     |\n     = note: `-D match-wild-err-arm` implied by `-D warnings`\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:131:18\n@@ -191,7 +191,7 @@ error: Err(_) will match all errors, maybe not a good idea\n 138 |         Err(_) => {panic!()}\n     |         ^^^^^^\n     |\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:137:18\n@@ -217,7 +217,7 @@ error: Err(_) will match all errors, maybe not a good idea\n 144 |         Err(_) => {panic!();}\n     |         ^^^^^^\n     |\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:143:18"}, {"sha": "5678ebec7220c916dd2551e779c52dd5483b15dc", "filename": "util/gh-pages/versions.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2665f1066238e46a91ace101b9010e272fc8dfe7/util%2Fgh-pages%2Fversions.html", "raw_url": "https://github.com/rust-lang/rust/raw/2665f1066238e46a91ace101b9010e272fc8dfe7/util%2Fgh-pages%2Fversions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Fversions.html?ref=2665f1066238e46a91ace101b9010e272fc8dfe7", "patch": "@@ -14,7 +14,7 @@\n <body>\n     <div class=\"container\" ng-app=\"clippy\" ng-controller=\"docVersions\">\n         <div class=\"page-header\">\n-            <h1>Clippy lints documention</h1>\n+            <h1>Clippy lints documentation</h1>\n         </div>\n \n         <div ng-cloak>"}]}