{"sha": "24a84fae34a3d4eff2dd631c65365d20a6e11b04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTg0ZmFlMzRhM2Q0ZWZmMmRkNjMxYzY1MzY1ZDIwYTZlMTFiMDQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-01T07:55:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-01T07:55:34Z"}, "message": "Rollup merge of #64907 - alexreg:tidy-up, r=Mark-Simulacrum\n\nA small amount of tidying-up factored out from PR #64648\n\nAs requested by @Mark-Simulacrum, I put this in a separate commit to make it easier to review. (As far as I can tell, no violations of the policy here, and they are simply in a separate PR because they're not directly related to the import of that PR.)\n\nr? @Mark-Simulacrum", "tree": {"sha": "74173f5c5101bdc6a83fb4a0af5e5fdfed52347f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74173f5c5101bdc6a83fb4a0af5e5fdfed52347f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a84fae34a3d4eff2dd631c65365d20a6e11b04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdkwZ2CRBK7hj4Ov3rIwAAdHIIAIS53YzvAZoB7FQMJqJQA8mc\nm8kiy108/vHQM6hN775gV0i+Yof2CTEoJBiLZv8Yyw8o8EI0DE2ngTMTonr/etAf\n9NDwDRn63LR4lE3ZE+yNzNkSloPbm+eECs4iEUxeEFh86I+UOIbJwgDOtrc69rjX\nd2+qVnxy7cBglUuA+5cU+kroLyRRJZ8YphMKuPK2L9w0v8f6B+zxhmw2p3fddfy9\n7zffswkq5eJwSpEGJ1FBqT9vz6vneBLXyZBWFlZHDiEpajA7/8a4Ec/18qG+4mpy\nJZxTtjanidP5zka7zCLTLIJMzsv4KpzD2yGocRxBfQ2LctIKL39wVSbBf7rzNX4=\n=y7Xf\n-----END PGP SIGNATURE-----\n", "payload": "tree 74173f5c5101bdc6a83fb4a0af5e5fdfed52347f\nparent b8c5d3a42771d6d7f3cade94e2e1637f72c97a0d\nparent 33ed03fea0106ad76314aa7e616c199996418737\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569916534 +0200\ncommitter GitHub <noreply@github.com> 1569916534 +0200\n\nRollup merge of #64907 - alexreg:tidy-up, r=Mark-Simulacrum\n\nA small amount of tidying-up factored out from PR #64648\n\nAs requested by @Mark-Simulacrum, I put this in a separate commit to make it easier to review. (As far as I can tell, no violations of the policy here, and they are simply in a separate PR because they're not directly related to the import of that PR.)\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a84fae34a3d4eff2dd631c65365d20a6e11b04", "html_url": "https://github.com/rust-lang/rust/commit/24a84fae34a3d4eff2dd631c65365d20a6e11b04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a84fae34a3d4eff2dd631c65365d20a6e11b04/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c5d3a42771d6d7f3cade94e2e1637f72c97a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c5d3a42771d6d7f3cade94e2e1637f72c97a0d", "html_url": "https://github.com/rust-lang/rust/commit/b8c5d3a42771d6d7f3cade94e2e1637f72c97a0d"}, {"sha": "33ed03fea0106ad76314aa7e616c199996418737", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ed03fea0106ad76314aa7e616c199996418737", "html_url": "https://github.com/rust-lang/rust/commit/33ed03fea0106ad76314aa7e616c199996418737"}], "stats": {"total": 145, "additions": 74, "deletions": 71}, "files": [{"sha": "d22420e76dcd4966916949b1cce9dc5972386a81", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -410,7 +410,7 @@ impl<'a> Parser<'a> {\n         &self.input[start..self.input.len()]\n     }\n \n-    /// Parses an Argument structure, or what's contained within braces inside the format string\n+    /// Parses an `Argument` structure, or what's contained within braces inside the format string.\n     fn argument(&mut self) -> Argument<'a> {\n         let pos = self.position();\n         let format = self.format();\n@@ -464,7 +464,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a format specifier at the current position, returning all of the\n-    /// relevant information in the FormatSpec struct.\n+    /// relevant information in the `FormatSpec` struct.\n     fn format(&mut self) -> FormatSpec<'a> {\n         let mut spec = FormatSpec {\n             fill: None,\n@@ -571,7 +571,7 @@ impl<'a> Parser<'a> {\n         spec\n     }\n \n-    /// Parses a Count parameter at the current position. This does not check\n+    /// Parses a `Count` parameter at the current position. This does not check\n     /// for 'CountIsNextParam' because that is only used in precision, not\n     /// width.\n     fn count(&mut self, start: usize) -> (Count, Option<InnerSpan>) {"}, {"sha": "9874c0673cfc9cec7947b3b523728a10a7682b38", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -247,7 +247,7 @@ pub fn register_plugins<'a>(\n     rustc_incremental::prepare_session_directory(sess, &crate_name, disambiguator);\n \n     if sess.opts.incremental.is_some() {\n-        time(sess, \"garbage collect incremental cache directory\", || {\n+        time(sess, \"garbage-collect incremental cache directory\", || {\n             if let Err(e) = rustc_incremental::garbage_collect_session_directories(sess) {\n                 warn!(\n                     \"Error while trying to garbage collect incremental \\\n@@ -318,7 +318,7 @@ fn configure_and_expand_inner<'a>(\n     crate_loader: &'a mut CrateLoader<'a>,\n     plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n-    time(sess, \"pre ast expansion lint checks\", || {\n+    time(sess, \"pre-AST-expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n             &krate,\n@@ -536,8 +536,8 @@ pub fn lower_to_hir(\n     dep_graph: &DepGraph,\n     krate: &ast::Crate,\n ) -> Result<hir::map::Forest> {\n-    // Lower ast -> hir\n-    let hir_forest = time(sess, \"lowering ast -> hir\", || {\n+    // Lower AST to HIR.\n+    let hir_forest = time(sess, \"lowering AST -> HIR\", || {\n         let hir_crate = lower_crate(sess, cstore, &dep_graph, &krate, resolver);\n \n         if sess.opts.debugging_opts.hir_stats {\n@@ -757,7 +757,7 @@ pub fn prepare_outputs(\n     if !only_dep_info {\n         if let Some(ref dir) = compiler.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n-                sess.err(\"failed to find or create the directory specified by --out-dir\");\n+                sess.err(\"failed to find or create the directory specified by `--out-dir`\");\n                 return Err(ErrorReported);\n             }\n         }\n@@ -830,8 +830,8 @@ pub fn create_global_ctxt(\n         let global_ctxt: Option<GlobalCtxt<'_>>;\n         let arenas = AllArenas::new();\n \n-        // Construct the HIR map\n-        let hir_map = time(sess, \"indexing hir\", || {\n+        // Construct the HIR map.\n+        let hir_map = time(sess, \"indexing HIR\", || {\n             hir::map::map_crate(sess, cstore, &mut hir_forest, &defs)\n         });\n \n@@ -942,7 +942,7 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n         tcx.par_body_owners(|def_id| tcx.ensure().mir_borrowck(def_id));\n     });\n \n-    time(sess, \"dumping chalk-like clauses\", || {\n+    time(sess, \"dumping Chalk-like clauses\", || {\n         rustc_traits::lowering::dump_program_clauses(tcx);\n     });\n "}, {"sha": "b8e2700803a5d4a16ad6dcf25db94a604a4b6317", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -952,8 +952,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         tcx.sess.span_warn(\n                             span,\n                             \"default bound relaxed for a type parameter, but \\\n-                            this does nothing because the given bound is not \\\n-                            a default. Only `?Sized` is supported\",\n+                             this does nothing because the given bound is not \\\n+                             a default; only `?Sized` is supported\",\n                         );\n                     }\n                 }"}, {"sha": "2b34c24b266d0d29d4e927dcc50c0b28f667c8c1", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -631,26 +631,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn suggest_valid_traits(&self,\n-                            err: &mut DiagnosticBuilder<'_>,\n-                            valid_out_of_scope_traits: Vec<DefId>) -> bool {\n+    fn suggest_valid_traits(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        valid_out_of_scope_traits: Vec<DefId>,\n+    ) -> bool {\n         if !valid_out_of_scope_traits.is_empty() {\n             let mut candidates = valid_out_of_scope_traits;\n             candidates.sort();\n             candidates.dedup();\n             err.help(\"items from traits can only be used if the trait is in scope\");\n-            let msg = format!(\"the following {traits_are} implemented but not in scope, \\\n-                               perhaps add a `use` for {one_of_them}:\",\n-                            traits_are = if candidates.len() == 1 {\n-                                \"trait is\"\n-                            } else {\n-                                \"traits are\"\n-                            },\n-                            one_of_them = if candidates.len() == 1 {\n-                                \"it\"\n-                            } else {\n-                                \"one of them\"\n-                            });\n+            let msg = format!(\n+                \"the following {traits_are} implemented but not in scope; \\\n+                 perhaps add a `use` for {one_of_them}:\",\n+                traits_are = if candidates.len() == 1 {\n+                    \"trait is\"\n+                } else {\n+                    \"traits are\"\n+                },\n+                one_of_them = if candidates.len() == 1 {\n+                    \"it\"\n+                } else {\n+                    \"one of them\"\n+                },\n+            );\n \n             self.suggest_use_candidates(err, msg, candidates);\n             true"}, {"sha": "ac3feadce3ae60f06e971ff5c8b13ddefddb6079", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -47,7 +47,7 @@ impl<'a> StringReader<'a> {\n                source_file: Lrc<syntax_pos::SourceFile>,\n                override_span: Option<Span>) -> Self {\n         if source_file.src.is_none() {\n-            sess.span_diagnostic.bug(&format!(\"Cannot lex source_file without source: {}\",\n+            sess.span_diagnostic.bug(&format!(\"cannot lex `source_file` without source: {}\",\n                                               source_file.name));\n         }\n "}, {"sha": "6e83e1d3f8d4fc178c422b91ae42f461d4a5a905", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -884,7 +884,7 @@ pub struct OffsetOverflowError;\n /// A single source in the `SourceMap`.\n #[derive(Clone)]\n pub struct SourceFile {\n-    /// The name of the file that the source came from, source that doesn't\n+    /// The name of the file that the source came from. Source that doesn't\n     /// originate from files has names between angle brackets by convention\n     /// (e.g., `<anon>`).\n     pub name: FileName,\n@@ -922,9 +922,9 @@ impl Encodable for SourceFile {\n             s.emit_struct_field(\"name\", 0, |s| self.name.encode(s))?;\n             s.emit_struct_field(\"name_was_remapped\", 1, |s| self.name_was_remapped.encode(s))?;\n             s.emit_struct_field(\"src_hash\", 2, |s| self.src_hash.encode(s))?;\n-            s.emit_struct_field(\"start_pos\", 4, |s| self.start_pos.encode(s))?;\n-            s.emit_struct_field(\"end_pos\", 5, |s| self.end_pos.encode(s))?;\n-            s.emit_struct_field(\"lines\", 6, |s| {\n+            s.emit_struct_field(\"start_pos\", 3, |s| self.start_pos.encode(s))?;\n+            s.emit_struct_field(\"end_pos\", 4, |s| self.end_pos.encode(s))?;\n+            s.emit_struct_field(\"lines\", 5, |s| {\n                 let lines = &self.lines[..];\n                 // Store the length.\n                 s.emit_u32(lines.len() as u32)?;\n@@ -970,13 +970,13 @@ impl Encodable for SourceFile {\n \n                 Ok(())\n             })?;\n-            s.emit_struct_field(\"multibyte_chars\", 7, |s| {\n+            s.emit_struct_field(\"multibyte_chars\", 6, |s| {\n                 self.multibyte_chars.encode(s)\n             })?;\n-            s.emit_struct_field(\"non_narrow_chars\", 8, |s| {\n+            s.emit_struct_field(\"non_narrow_chars\", 7, |s| {\n                 self.non_narrow_chars.encode(s)\n             })?;\n-            s.emit_struct_field(\"name_hash\", 9, |s| {\n+            s.emit_struct_field(\"name_hash\", 8, |s| {\n                 self.name_hash.encode(s)\n             })\n         })\n@@ -985,17 +985,16 @@ impl Encodable for SourceFile {\n \n impl Decodable for SourceFile {\n     fn decode<D: Decoder>(d: &mut D) -> Result<SourceFile, D::Error> {\n-\n         d.read_struct(\"SourceFile\", 8, |d| {\n             let name: FileName = d.read_struct_field(\"name\", 0, |d| Decodable::decode(d))?;\n             let name_was_remapped: bool =\n                 d.read_struct_field(\"name_was_remapped\", 1, |d| Decodable::decode(d))?;\n             let src_hash: u128 =\n                 d.read_struct_field(\"src_hash\", 2, |d| Decodable::decode(d))?;\n             let start_pos: BytePos =\n-                d.read_struct_field(\"start_pos\", 4, |d| Decodable::decode(d))?;\n-            let end_pos: BytePos = d.read_struct_field(\"end_pos\", 5, |d| Decodable::decode(d))?;\n-            let lines: Vec<BytePos> = d.read_struct_field(\"lines\", 6, |d| {\n+                d.read_struct_field(\"start_pos\", 3, |d| Decodable::decode(d))?;\n+            let end_pos: BytePos = d.read_struct_field(\"end_pos\", 4, |d| Decodable::decode(d))?;\n+            let lines: Vec<BytePos> = d.read_struct_field(\"lines\", 5, |d| {\n                 let num_lines: u32 = Decodable::decode(d)?;\n                 let mut lines = Vec::with_capacity(num_lines as usize);\n \n@@ -1024,18 +1023,18 @@ impl Decodable for SourceFile {\n                 Ok(lines)\n             })?;\n             let multibyte_chars: Vec<MultiByteChar> =\n-                d.read_struct_field(\"multibyte_chars\", 7, |d| Decodable::decode(d))?;\n+                d.read_struct_field(\"multibyte_chars\", 6, |d| Decodable::decode(d))?;\n             let non_narrow_chars: Vec<NonNarrowChar> =\n-                d.read_struct_field(\"non_narrow_chars\", 8, |d| Decodable::decode(d))?;\n+                d.read_struct_field(\"non_narrow_chars\", 7, |d| Decodable::decode(d))?;\n             let name_hash: u128 =\n-                d.read_struct_field(\"name_hash\", 9, |d| Decodable::decode(d))?;\n+                d.read_struct_field(\"name_hash\", 8, |d| Decodable::decode(d))?;\n             Ok(SourceFile {\n                 name,\n                 name_was_remapped,\n                 unmapped_path: None,\n                 // `crate_of_origin` has to be set by the importer.\n-                // This value matches up with rustc::hir::def_id::INVALID_CRATE.\n-                // That constant is not available here unfortunately :(\n+                // This value matches up with `rustc::hir::def_id::INVALID_CRATE`.\n+                // That constant is not available here, unfortunately.\n                 crate_of_origin: std::u32::MAX - 1,\n                 start_pos,\n                 end_pos,"}, {"sha": "e71547cb89f9c7a96129477e7cd8cb7687a58b4c", "filename": "src/test/ui/coherence/coherence_inherent.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.old.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&Lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use Lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "e71547cb89f9c7a96129477e7cd8cb7687a58b4c", "filename": "src/test/ui/coherence/coherence_inherent.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent.re.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&Lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use Lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "3683943c5c819da5f7b355a3d9cbca17eacf5765", "filename": "src/test/ui/coherence/coherence_inherent_cc.old.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.old.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use coherence_inherent_cc_lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "3683943c5c819da5f7b355a3d9cbca17eacf5765", "filename": "src/test/ui/coherence/coherence_inherent_cc.re.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence_inherent_cc.re.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         s.the_fn();\n    |           ^^^^^^ method not found in `&coherence_inherent_cc_lib::TheStruct`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use coherence_inherent_cc_lib::TheTrait;`\n \n error: aborting due to previous error"}, {"sha": "736369dab83549237717f2561db9d710ce96256a", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -25,7 +25,7 @@ LL |         ().clone()\n    |            ^^^^^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::clone::Clone;`\n \n error: aborting due to 3 previous errors"}, {"sha": "c3ce484edf7a95a13c719eeb0f8c02c1e92135e9", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -8,7 +8,7 @@ LL |     pub macro m() { ().f() }\n    |                        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use foo::T;`\n \n error: aborting due to previous error"}, {"sha": "f0a03e1be82ac5e7c48d16725fc9e7fd8e5cf927", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |     1u32.method();\n    |          ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL | use foo::Bar;\n    |\n@@ -23,7 +23,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    |                                            ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&u32>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following traits are implemented but not in scope, perhaps add a `use` for one of them:\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL | use foo::Bar;\n    |\n@@ -41,7 +41,7 @@ LL |     'a'.method();\n    |         ^^^^^^ method not found in `char`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::Bar;\n    |\n@@ -61,7 +61,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    |                                           ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&char>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::Bar;\n    |\n@@ -73,7 +73,7 @@ LL |     1i32.method();\n    |          ^^^^^^ method not found in `i32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use no_method_suggested_traits::foo::PubPub;\n    |\n@@ -85,7 +85,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    |                                            ^^^^^^ method not found in `std::rc::Rc<&mut std::boxed::Box<&i32>>`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use no_method_suggested_traits::foo::PubPub;\n    |"}, {"sha": "80ca051ceff0df2f2529b89dd6d013e2b854dac6", "filename": "src/test/ui/issues/issue-10465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10465.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |             b.foo();\n    |               ^^^ method not found in `&b::B`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use a::A;`\n \n error: aborting due to previous error"}, {"sha": "2ea9dcbe9d0a45ac550c8f72fb9a441ed2b2822c", "filename": "src/test/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37534.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -8,7 +8,7 @@ help: possible better candidate is found in another module, you can import it in\n LL | use std::hash::Hash;\n    |\n \n-warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported\n+warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n   --> $DIR/issue-37534.rs:1:12\n    |\n LL | struct Foo<T: ?Hash> { }"}, {"sha": "8b173e1b50c1e9ebcc4e2046c8ccf70fbe875542", "filename": "src/test/ui/issues/issue-39175.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39175.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    |                                       ^^^^ method not found in `&mut std::process::Command`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::os::unix::process::CommandExt;\n    |"}, {"sha": "4dae6c1cd158e49a94dd47c7df5359c67cb68ad4", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |     ().a();\n    |        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use xcrate_issue_43189_b::xcrate_issue_43189_a::A;\n    |"}, {"sha": "15cbce46f0a9b4887ae7835324ad9de36b19b3fd", "filename": "src/test/ui/maybe-bounds-where.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds-where.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -34,7 +34,7 @@ error[E0203]: type parameter has more than one relaxed default bound, only one i\n LL | struct S5<T>(*const T) where T: ?Trait<'static> + ?Sized;\n    |           ^\n \n-warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default. Only `?Sized` is supported\n+warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported\n   --> $DIR/maybe-bounds-where.rs:15:11\n    |\n LL | struct S5<T>(*const T) where T: ?Trait<'static> + ?Sized;"}, {"sha": "4b1898345a32ebe6c7536c942d5ad53136c53b9f", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use crate::foo::foobar::Foobar;`\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n@@ -15,7 +15,7 @@ LL |     x.bar();\n    |       ^^^ method not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use crate::foo::Bar;\n    |\n@@ -33,7 +33,7 @@ LL |     let y = u32::from_str(\"33\");\n    |                  ^^^^^^^^ function or associated item not found in `u32`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use std::str::FromStr;\n    |"}, {"sha": "3597cc53420aa82e5bf63d18fb44e5a79876a7c4", "filename": "src/test/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |     ().f()\n    |        ^ method not found in `()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use foo::T;\n    |"}, {"sha": "64a92c6b0b47860536d6d30ad45ad0a761d59a69", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -28,7 +28,7 @@ LL |     S.b();\n    |       ^ method not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use method::B;\n    |\n@@ -62,7 +62,7 @@ LL |     S::b(&S);\n    |        ^ function or associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use method::B;\n    |\n@@ -96,7 +96,7 @@ LL |     S::B;\n    |        ^ associated item not found in `S`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use assoc_const::B;\n    |"}, {"sha": "10552acb348bee424b40958ffcafc35d14ad4b4a", "filename": "src/test/ui/traits/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |     foo.method();\n    |         ^^^^^^\n    |\n    = help: items from traits can only be used if the trait is in scope\n-help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n LL | use inner::Bar;\n    |"}, {"sha": "102c17f6f5618017da5299e4d963617c54fdd3c3", "filename": "src/test/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a84fae34a3d4eff2dd631c65365d20a6e11b04/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=24a84fae34a3d4eff2dd631c65365d20a6e11b04", "patch": "@@ -5,7 +5,7 @@ LL |         x.deref();\n    |           ^^^^^ method not found in `&()`\n    |\n    = help: items from traits can only be used if the trait is in scope\n-   = note: the following trait is implemented but not in scope, perhaps add a `use` for it:\n+   = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::ops::Deref;`\n \n error: aborting due to previous error"}]}