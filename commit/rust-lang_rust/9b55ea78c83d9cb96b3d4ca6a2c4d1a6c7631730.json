{"sha": "9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "node_id": "C_kwDOAAsO6NoAKDliNTVlYTc4YzgzZDljYjk2YjNkNGNhNmEyYzRkMWE2Yzc2MzE3MzA", "commit": {"author": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-05-23T07:23:35Z"}, "committer": {"name": "Marcel Hellwig", "email": "github@cookiesoft.de", "date": "2022-05-23T07:28:49Z"}, "message": "update dependencies", "tree": {"sha": "24a94e54e5a7e3b0d0b00eab59d68e835f90317b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a94e54e5a7e3b0d0b00eab59d68e835f90317b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "html_url": "https://github.com/rust-lang/rust/commit/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/comments", "author": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hellow554", "id": 921462, "node_id": "MDQ6VXNlcjkyMTQ2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/921462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hellow554", "html_url": "https://github.com/hellow554", "followers_url": "https://api.github.com/users/hellow554/followers", "following_url": "https://api.github.com/users/hellow554/following{/other_user}", "gists_url": "https://api.github.com/users/hellow554/gists{/gist_id}", "starred_url": "https://api.github.com/users/hellow554/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hellow554/subscriptions", "organizations_url": "https://api.github.com/users/hellow554/orgs", "repos_url": "https://api.github.com/users/hellow554/repos", "events_url": "https://api.github.com/users/hellow554/events{/privacy}", "received_events_url": "https://api.github.com/users/hellow554/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91644d1f1d1a8029830d7c17595ec8c32b8ccde6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91644d1f1d1a8029830d7c17595ec8c32b8ccde6", "html_url": "https://github.com/rust-lang/rust/commit/91644d1f1d1a8029830d7c17595ec8c32b8ccde6"}], "stats": {"total": 196, "additions": 89, "deletions": 107}, "files": [{"sha": "3c8b758d53dca74843349e28b8460495d2f4c105", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -28,7 +28,7 @@ tempfile = { version = \"3.2\", optional = true }\n termize = \"0.1\"\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.8\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n # This is used by the `collect-metadata` alias.\n@@ -48,7 +48,7 @@ quote = \"1.0\"\n serde = { version = \"1.0.125\", features = [\"derive\"] }\n syn = { version = \"1.0\", features = [\"full\"] }\n futures = \"0.3\"\n-parking_lot = \"0.11.2\"\n+parking_lot = \"0.12\"\n tokio = { version = \"1\", features = [\"io-util\"] }\n rustc-semver = \"1.1\"\n "}, {"sha": "b0d470a2124d86be497b1e46b7a959de4a0ef69b", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -5,7 +5,7 @@ edition = \"2021\"\n \n [dependencies]\n aho-corasick = \"0.7\"\n-clap = \"2.33\"\n+clap = \"3.1\"\n indoc = \"1.0\"\n itertools = \"0.10.1\"\n opener = \"0.5\""}, {"sha": "ee535b1d3be8bb17d2a2283539bdc8e102a9c9f4", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 70, "deletions": 86, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -2,20 +2,20 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{App, AppSettings, Arg, ArgMatches, SubCommand};\n+use clap::{Arg, ArgMatches, Command};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n-        (\"bless\", Some(matches)) => {\n+        Some((\"bless\", matches)) => {\n             bless::bless(matches.is_present(\"ignore-timestamp\"));\n         },\n-        (\"fmt\", Some(matches)) => {\n+        Some((\"fmt\", matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n-        (\"update_lints\", Some(matches)) => {\n+        Some((\"update_lints\", matches)) => {\n             if matches.is_present(\"print-only\") {\n                 update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n@@ -24,7 +24,7 @@ fn main() {\n                 update_lints::update(update_lints::UpdateMode::Change);\n             }\n         },\n-        (\"new_lint\", Some(matches)) => {\n+        Some((\"new_lint\", matches)) => {\n             match new_lint::create(\n                 matches.value_of(\"pass\"),\n                 matches.value_of(\"name\"),\n@@ -35,8 +35,8 @@ fn main() {\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n-        (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n-            (\"intellij\", Some(matches)) => {\n+        Some((\"setup\", sub_command)) => match sub_command.subcommand() {\n+            Some((\"intellij\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::intellij::remove_rustc_src();\n                 } else {\n@@ -47,14 +47,14 @@ fn main() {\n                     );\n                 }\n             },\n-            (\"git-hook\", Some(matches)) => {\n+            Some((\"git-hook\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::git_hook::remove_hook();\n                 } else {\n                     setup::git_hook::install_hook(matches.is_present(\"force-override\"));\n                 }\n             },\n-            (\"vscode-tasks\", Some(matches)) => {\n+            Some((\"vscode-tasks\", matches)) => {\n                 if matches.is_present(\"remove\") {\n                     setup::vscode::remove_tasks();\n                 } else {\n@@ -63,23 +63,23 @@ fn main() {\n             },\n             _ => {},\n         },\n-        (\"remove\", Some(sub_command)) => match sub_command.subcommand() {\n-            (\"git-hook\", Some(_)) => setup::git_hook::remove_hook(),\n-            (\"intellij\", Some(_)) => setup::intellij::remove_rustc_src(),\n-            (\"vscode-tasks\", Some(_)) => setup::vscode::remove_tasks(),\n+        Some((\"remove\", sub_command)) => match sub_command.subcommand() {\n+            Some((\"git-hook\", _)) => setup::git_hook::remove_hook(),\n+            Some((\"intellij\", _)) => setup::intellij::remove_rustc_src(),\n+            Some((\"vscode-tasks\", _)) => setup::vscode::remove_tasks(),\n             _ => {},\n         },\n-        (\"serve\", Some(matches)) => {\n+        Some((\"serve\", matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n             serve::run(port, lint);\n         },\n-        (\"lint\", Some(matches)) => {\n+        Some((\"lint\", matches)) => {\n             let path = matches.value_of(\"path\").unwrap();\n             let args = matches.values_of(\"args\").into_iter().flatten();\n             lint::run(path, args);\n         },\n-        (\"rename_lint\", Some(matches)) => {\n+        Some((\"rename_lint\", matches)) => {\n             let old_name = matches.value_of(\"old_name\").unwrap();\n             let new_name = matches.value_of(\"new_name\").unwrap_or(old_name);\n             let uplift = matches.is_present(\"uplift\");\n@@ -89,35 +89,24 @@ fn main() {\n     }\n }\n \n-fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"Clippy developer tooling\")\n-        .setting(AppSettings::ArgRequiredElseHelp)\n+fn get_clap_config() -> ArgMatches {\n+    Command::new(\"Clippy developer tooling\")\n+        .arg_required_else_help(true)\n         .subcommand(\n-            SubCommand::with_name(\"bless\")\n-                .about(\"bless the test output changes\")\n-                .arg(\n-                    Arg::with_name(\"ignore-timestamp\")\n-                        .long(\"ignore-timestamp\")\n-                        .help(\"Include files updated before clippy was built\"),\n-                ),\n+            Command::new(\"bless\").about(\"bless the test output changes\").arg(\n+                Arg::new(\"ignore-timestamp\")\n+                    .long(\"ignore-timestamp\")\n+                    .help(\"Include files updated before clippy was built\"),\n+            ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"fmt\")\n+            Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n-                .arg(\n-                    Arg::with_name(\"check\")\n-                        .long(\"check\")\n-                        .help(\"Use the rustfmt --check option\"),\n-                )\n-                .arg(\n-                    Arg::with_name(\"verbose\")\n-                        .short(\"v\")\n-                        .long(\"verbose\")\n-                        .help(\"Echo commands run\"),\n-                ),\n+                .arg(Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"))\n+                .arg(Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"update_lints\")\n+            Command::new(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n@@ -127,40 +116,40 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                  * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n                  * all lints are registered in the lint store\",\n                 )\n-                .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n+                .arg(Arg::new(\"print-only\").long(\"print-only\").help(\n                     \"Print a table of lints to STDOUT. \\\n                  This does not include deprecated and internal lints. \\\n                  (Does not modify any files)\",\n                 ))\n                 .arg(\n-                    Arg::with_name(\"check\")\n+                    Arg::new(\"check\")\n                         .long(\"check\")\n                         .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"new_lint\")\n+            Command::new(\"new_lint\")\n                 .about(\"Create new lint and run `cargo dev update_lints`\")\n                 .arg(\n-                    Arg::with_name(\"pass\")\n-                        .short(\"p\")\n+                    Arg::new(\"pass\")\n+                        .short('p')\n                         .long(\"pass\")\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n                         .possible_values(&[\"early\", \"late\"])\n                         .required(true),\n                 )\n                 .arg(\n-                    Arg::with_name(\"name\")\n-                        .short(\"n\")\n+                    Arg::new(\"name\")\n+                        .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n                         .takes_value(true)\n                         .required(true),\n                 )\n                 .arg(\n-                    Arg::with_name(\"category\")\n-                        .short(\"c\")\n+                    Arg::new(\"category\")\n+                        .short('c')\n                         .long(\"category\")\n                         .help(\"What category the lint belongs to\")\n                         .default_value(\"nursery\")\n@@ -179,29 +168,25 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         ])\n                         .takes_value(true),\n                 )\n-                .arg(\n-                    Arg::with_name(\"msrv\")\n-                        .long(\"msrv\")\n-                        .help(\"Add MSRV config code to the lint\"),\n-                ),\n+                .arg(Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"setup\")\n+            Command::new(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")\n-                .setting(AppSettings::ArgRequiredElseHelp)\n+                .arg_required_else_help(true)\n                 .subcommand(\n-                    SubCommand::with_name(\"intellij\")\n+                    Command::new(\"intellij\")\n                         .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the dependencies added with 'cargo dev setup intellij'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"rustc-repo-path\")\n+                            Arg::new(\"rustc-repo-path\")\n                                 .long(\"repo-path\")\n-                                .short(\"r\")\n+                                .short('r')\n                                 .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n                                 .takes_value(true)\n                                 .value_name(\"path\")\n@@ -210,66 +195,65 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         ),\n                 )\n                 .subcommand(\n-                    SubCommand::with_name(\"git-hook\")\n+                    Command::new(\"git-hook\")\n                         .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"force-override\")\n+                            Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n-                                .short(\"f\")\n+                                .short('f')\n                                 .help(\"Forces the override of an existing git pre-commit hook\")\n                                 .required(false),\n                         ),\n                 )\n                 .subcommand(\n-                    SubCommand::with_name(\"vscode-tasks\")\n+                    Command::new(\"vscode-tasks\")\n                         .about(\"Add several tasks to vscode for formatting, validation and testing\")\n                         .arg(\n-                            Arg::with_name(\"remove\")\n+                            Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\")\n                                 .required(false),\n                         )\n                         .arg(\n-                            Arg::with_name(\"force-override\")\n+                            Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n-                                .short(\"f\")\n+                                .short('f')\n                                 .help(\"Forces the override of existing vscode tasks\")\n                                 .required(false),\n                         ),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"remove\")\n+            Command::new(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n-                .setting(AppSettings::ArgRequiredElseHelp)\n-                .subcommand(SubCommand::with_name(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n-                .subcommand(SubCommand::with_name(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n+                .arg_required_else_help(true)\n+                .subcommand(Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n+                .subcommand(Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n                 .subcommand(\n-                    SubCommand::with_name(\"intellij\")\n-                        .about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n+                    Command::new(\"intellij\").about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"serve\")\n+            Command::new(\"serve\")\n                 .about(\"Launch a local 'ALL the Clippy Lints' website in a browser\")\n                 .arg(\n-                    Arg::with_name(\"port\")\n+                    Arg::new(\"port\")\n                         .long(\"port\")\n-                        .short(\"p\")\n+                        .short('p')\n                         .help(\"Local port for the http server\")\n                         .default_value(\"8000\")\n                         .validator_os(serve::validate_port),\n                 )\n-                .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n+                .arg(Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"lint\")\n+            Command::new(\"lint\")\n                 .about(\"Manually run clippy on a file or package\")\n                 .after_help(indoc! {\"\n                     EXAMPLES\n@@ -288,33 +272,33 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                             cargo dev lint ~/my-project -- -- -W clippy::pedantic\n                 \"})\n                 .arg(\n-                    Arg::with_name(\"path\")\n+                    Arg::new(\"path\")\n                         .required(true)\n                         .help(\"The path to a file or package directory to lint\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"args\")\n-                        .multiple(true)\n+                    Arg::new(\"args\")\n+                        .multiple_occurrences(true)\n                         .help(\"Pass extra arguments to cargo/clippy-driver\"),\n                 ),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"rename_lint\")\n+            Command::new(\"rename_lint\")\n                 .about(\"Renames the given lint\")\n                 .arg(\n-                    Arg::with_name(\"old_name\")\n+                    Arg::new(\"old_name\")\n                         .index(1)\n                         .required(true)\n                         .help(\"The name of the lint to rename\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"new_name\")\n+                    Arg::new(\"new_name\")\n                         .index(2)\n-                        .required_unless(\"uplift\")\n+                        .required_unless_present(\"uplift\")\n                         .help(\"The new name of the lint\"),\n                 )\n                 .arg(\n-                    Arg::with_name(\"uplift\")\n+                    Arg::new(\"uplift\")\n                         .long(\"uplift\")\n                         .help(\"This lint will be uplifted into rustc\"),\n                 ),"}, {"sha": "d55b1a354d003cba512928e27b0b4e4310b7209b", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -1,4 +1,5 @@\n-use std::ffi::{OsStr, OsString};\n+use std::ffi::OsStr;\n+use std::num::ParseIntError;\n use std::path::Path;\n use std::process::Command;\n use std::thread;\n@@ -59,9 +60,6 @@ fn mtime(path: impl AsRef<Path>) -> SystemTime {\n }\n \n #[allow(clippy::missing_errors_doc)]\n-pub fn validate_port(arg: &OsStr) -> Result<(), OsString> {\n-    match arg.to_string_lossy().parse::<u16>() {\n-        Ok(_port) => Ok(()),\n-        Err(err) => Err(OsString::from(err.to_string())),\n-    }\n+pub fn validate_port(arg: &OsStr) -> Result<(), ParseIntError> {\n+    arg.to_string_lossy().parse::<u16>().map(|_| ())\n }"}, {"sha": "504d58b5197a105b4da50e5e3c43149dd29be060", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -11,7 +11,7 @@ publish = false\n \n [dependencies]\n cargo_metadata = \"0.14\"\n-clap = \"2.33\"\n+clap = \"3.1\"\n flate2 = \"1.0\"\n rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }"}, {"sha": "a6f93d2a1c0a62177f8b55a59c4a2b0ae549e18f", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=9b55ea78c83d9cb96b3d4ca6a2c4d1a6c7631730", "patch": "@@ -1,47 +1,47 @@\n-use clap::{App, Arg, ArgMatches};\n+use clap::{Arg, ArgMatches, Command};\n use std::env;\n use std::path::PathBuf;\n \n-fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"lintcheck\")\n+fn get_clap_config() -> ArgMatches {\n+    Command::new(\"lintcheck\")\n         .about(\"run clippy on a set of crates and check output\")\n         .arg(\n-            Arg::with_name(\"only\")\n+            Arg::new(\"only\")\n                 .takes_value(true)\n                 .value_name(\"CRATE\")\n                 .long(\"only\")\n                 .help(\"Only process a single crate of the list\"),\n         )\n         .arg(\n-            Arg::with_name(\"crates-toml\")\n+            Arg::new(\"crates-toml\")\n                 .takes_value(true)\n                 .value_name(\"CRATES-SOURCES-TOML-PATH\")\n                 .long(\"crates-toml\")\n                 .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n         )\n         .arg(\n-            Arg::with_name(\"threads\")\n+            Arg::new(\"threads\")\n                 .takes_value(true)\n                 .value_name(\"N\")\n-                .short(\"j\")\n+                .short('j')\n                 .long(\"jobs\")\n                 .help(\"Number of threads to use, 0 automatic choice\"),\n         )\n         .arg(\n-            Arg::with_name(\"fix\")\n+            Arg::new(\"fix\")\n                 .long(\"--fix\")\n                 .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n         )\n         .arg(\n-            Arg::with_name(\"filter\")\n+            Arg::new(\"filter\")\n                 .long(\"--filter\")\n                 .takes_value(true)\n-                .multiple(true)\n+                .multiple_occurrences(true)\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n         )\n         .arg(\n-            Arg::with_name(\"markdown\")\n+            Arg::new(\"markdown\")\n                 .long(\"--markdown\")\n                 .help(\"Change the reports table to use markdown links\"),\n         )"}]}