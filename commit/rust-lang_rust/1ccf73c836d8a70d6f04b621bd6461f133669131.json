{"sha": "1ccf73c836d8a70d6f04b621bd6461f133669131", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjY2Y3M2M4MzZkOGE3MGQ2ZjA0YjYyMWJkNjQ2MWYxMzM2NjkxMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T22:38:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-24T22:38:21Z"}, "message": "kill DefKindc", "tree": {"sha": "d3ef92f7da93aa7dde10731139df5b1709335ecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3ef92f7da93aa7dde10731139df5b1709335ecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ccf73c836d8a70d6f04b621bd6461f133669131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccf73c836d8a70d6f04b621bd6461f133669131", "html_url": "https://github.com/rust-lang/rust/commit/1ccf73c836d8a70d6f04b621bd6461f133669131", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ccf73c836d8a70d6f04b621bd6461f133669131/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff9c5bef7b198cde4358610c565cd0b6dc466de5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9c5bef7b198cde4358610c565cd0b6dc466de5", "html_url": "https://github.com/rust-lang/rust/commit/ff9c5bef7b198cde4358610c565cd0b6dc466de5"}], "stats": {"total": 70, "additions": 15, "deletions": 55}, "files": [{"sha": "cbe31f8306886857d9e56210d90325509c7c103d", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=1ccf73c836d8a70d6f04b621bd6461f133669131", "patch": "@@ -313,19 +313,7 @@ pub struct DefLoc {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub(crate) enum DefKind {\n-    Item,\n-    // /// The constructor of a struct. E.g. if we have `struct Foo(usize)`, the\n-    // /// name `Foo` needs to resolve to different types depending on whether we\n-    // /// are in the types or values namespace: As a type, `Foo` of course refers\n-    // /// to the struct `Foo`; as a value, `Foo` is a callable type with signature\n-    // /// `(usize) -> Foo`. The cleanest approach to handle this seems to be to\n-    // /// have different defs in the two namespaces.\n-    // ///\n-    // /// rustc does the same; note that it even creates a struct constructor if\n-    // /// the struct isn't a tuple struct (see `CtorKind::Fictive` in rustc).\n-    // StructCtor,\n-}\n+pub(crate) enum DefKind {}\n \n impl DefId {\n     pub(crate) fn loc(self, db: &impl AsRef<HirInterner>) -> DefLoc {\n@@ -334,15 +322,7 @@ impl DefId {\n \n     pub fn resolve(self, db: &impl HirDatabase) -> Def {\n         let loc = self.loc(db);\n-        match loc.kind {\n-            DefKind::Item => Def::Item,\n-        }\n-    }\n-}\n-\n-impl DefLoc {\n-    pub(crate) fn id(&self, db: &impl AsRef<HirInterner>) -> DefId {\n-        db.as_ref().defs.loc2id(&self)\n+        match loc.kind {}\n     }\n }\n "}, {"sha": "222e4734916423ae1ee0a64cd8505653d9ceaf27", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=1ccf73c836d8a70d6f04b621bd6461f133669131", "patch": "@@ -5,7 +5,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n-    DefId, DefLoc, DefKind, SourceItemId, SourceFileItems,\n+    Const, Type,\n     Function, HirFileId,\n     db::HirDatabase,\n     type_ref::TypeRef,\n@@ -67,7 +67,6 @@ impl ImplData {\n     pub(crate) fn from_ast(\n         db: &impl HirDatabase,\n         file_id: HirFileId,\n-        file_items: &SourceFileItems,\n         module: Module,\n         node: &ast::ImplBlock,\n     ) -> Self {\n@@ -77,30 +76,14 @@ impl ImplData {\n         let items = if let Some(item_list) = node.item_list() {\n             item_list\n                 .impl_items()\n-                .map(|item_node| {\n-                    let kind = match item_node.kind() {\n-                        ast::ImplItemKind::FnDef(it) => {\n-                            return ImplItem::Method(Function { id: ctx.to_def(it) });\n-                        }\n-                        ast::ImplItemKind::ConstDef(..) => DefKind::Item,\n-                        ast::ImplItemKind::TypeDef(..) => DefKind::Item,\n-                    };\n-                    let item_id = file_items.id_of_unchecked(item_node.syntax());\n-                    let source_item_id = SourceItemId {\n-                        file_id,\n-                        item_id: Some(item_id),\n-                    };\n-                    let def_loc = DefLoc {\n-                        module,\n-                        kind,\n-                        source_item_id,\n-                    };\n-                    let def_id = def_loc.id(db);\n-                    match item_node.kind() {\n-                        ast::ImplItemKind::FnDef(_) => unreachable!(),\n-                        ast::ImplItemKind::ConstDef(..) => ImplItem::Const(def_id),\n-                        ast::ImplItemKind::TypeDef(..) => ImplItem::Type(def_id),\n+                .map(|item_node| match item_node.kind() {\n+                    ast::ImplItemKind::FnDef(it) => {\n+                        ImplItem::Method(Function { id: ctx.to_def(it) })\n                     }\n+                    ast::ImplItemKind::ConstDef(it) => {\n+                        ImplItem::Const(Const { id: ctx.to_def(it) })\n+                    }\n+                    ast::ImplItemKind::TypeDef(it) => ImplItem::Type(Type { id: ctx.to_def(it) }),\n                 })\n                 .collect()\n         } else {\n@@ -130,11 +113,11 @@ impl ImplData {\n //TODO: rename to ImplDef?\n pub enum ImplItem {\n     Method(Function),\n-    // these don't have their own types yet\n-    Const(DefId),\n-    Type(DefId),\n+    Const(Const),\n+    Type(Type),\n     // Existential\n }\n+impl_froms!(ImplItem: Const, Type);\n \n impl From<Function> for ImplItem {\n     fn from(func: Function) -> ImplItem {\n@@ -176,11 +159,8 @@ impl ModuleImplBlocks {\n                 .syntax(),\n         };\n \n-        let source_file_items = db.file_items(file_id);\n-\n         for impl_block_ast in node.children().filter_map(ast::ImplBlock::cast) {\n-            let impl_block =\n-                ImplData::from_ast(db, file_id, &source_file_items, module, impl_block_ast);\n+            let impl_block = ImplData::from_ast(db, file_id, module, impl_block_ast);\n             let id = self.impls.alloc(impl_block);\n             for &impl_item in &self.impls[id].items {\n                 self.impls_by_def.insert(impl_item, id);"}, {"sha": "6cbece95e761c6461aa7c52d880a8bf3436803a5", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccf73c836d8a70d6f04b621bd6461f133669131/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=1ccf73c836d8a70d6f04b621bd6461f133669131", "patch": "@@ -46,7 +46,7 @@ mod marks;\n use crate::{\n     db::HirDatabase,\n     name::{AsName, KnownName},\n-    ids::{DefKind, SourceItemId, SourceFileItems},\n+    ids::{SourceItemId, SourceFileItems},\n };\n \n pub use self::{"}]}