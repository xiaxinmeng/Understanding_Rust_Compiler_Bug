{"sha": "3d7637e66de5dea270d729c4bbea1237b140e246", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzYzN2U2NmRlNWRlYTI3MGQ3MjljNGJiZWExMjM3YjE0MGUyNDY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-08T21:13:49Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:06:35Z"}, "message": "correctly handle escaping bound variables", "tree": {"sha": "4ae4e851f627b4f78c5cbd96343821990387ef63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ae4e851f627b4f78c5cbd96343821990387ef63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7637e66de5dea270d729c4bbea1237b140e246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7637e66de5dea270d729c4bbea1237b140e246", "html_url": "https://github.com/rust-lang/rust/commit/3d7637e66de5dea270d729c4bbea1237b140e246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7637e66de5dea270d729c4bbea1237b140e246/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c", "html_url": "https://github.com/rust-lang/rust/commit/0f7bf5d9e11189dfbc10bc2acba653c4893c9b6c"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "e3e8e88993ea7df6fea5057542400c7f927ace27", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d7637e66de5dea270d729c4bbea1237b140e246/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7637e66de5dea270d729c4bbea1237b140e246/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=3d7637e66de5dea270d729c4bbea1237b140e246", "patch": "@@ -39,7 +39,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n+use rustc_middle::ty::{self, InferConst, Ty, TyCtxt, TypeFoldable};\n use rustc_middle::ty::{IntType, UintType};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -165,11 +165,19 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n             (ty::ConstKind::Unevaluated(..), _) if self.tcx.features().const_generics => {\n-                relation.const_equate_obligation(a, b);\n+                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // escaping bound variables here.\n+                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n+                    relation.const_equate_obligation(a, b);\n+                }\n                 return Ok(b);\n             }\n             (_, ty::ConstKind::Unevaluated(..)) if self.tcx.features().const_generics => {\n-                relation.const_equate_obligation(a, b);\n+                // FIXME(#59490): Need to remove the leak check to accomodate\n+                // escaping bound variables here.\n+                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n+                    relation.const_equate_obligation(a, b);\n+                }\n                 return Ok(a);\n             }\n             _ => {}"}]}