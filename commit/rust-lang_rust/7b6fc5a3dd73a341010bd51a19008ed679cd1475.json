{"sha": "7b6fc5a3dd73a341010bd51a19008ed679cd1475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNmZjNWEzZGQ3M2EzNDEwMTBiZDUxYTE5MDA4ZWQ2NzljZDE0NzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T14:26:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-30T14:26:01Z"}, "message": "Auto merge of #83170 - joshtriplett:spawn-cleanup, r=kennytm\n\nSimplify Command::spawn (no semantic change)\n\nThis minimizes the size of an unsafe block, and allows outdenting some\ncomplex code.", "tree": {"sha": "c3febd9f5a7a1b4e213093730f391b95b866f9ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3febd9f5a7a1b4e213093730f391b95b866f9ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b6fc5a3dd73a341010bd51a19008ed679cd1475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6fc5a3dd73a341010bd51a19008ed679cd1475", "html_url": "https://github.com/rust-lang/rust/commit/7b6fc5a3dd73a341010bd51a19008ed679cd1475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b6fc5a3dd73a341010bd51a19008ed679cd1475/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16156fb2787f745e57504197bd7fe38b69c6cbea", "url": "https://api.github.com/repos/rust-lang/rust/commits/16156fb2787f745e57504197bd7fe38b69c6cbea", "html_url": "https://github.com/rust-lang/rust/commit/16156fb2787f745e57504197bd7fe38b69c6cbea"}, {"sha": "68dbdfb5bf481790625c5f797a6837c82a1bbefb", "url": "https://api.github.com/repos/rust-lang/rust/commits/68dbdfb5bf481790625c5f797a6837c82a1bbefb", "html_url": "https://github.com/rust-lang/rust/commit/68dbdfb5bf481790625c5f797a6837c82a1bbefb"}], "stats": {"total": 60, "additions": 27, "deletions": 33}, "files": [{"sha": "ed9044382a898c98e655f10d08ba28d01d4533be", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7b6fc5a3dd73a341010bd51a19008ed679cd1475/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6fc5a3dd73a341010bd51a19008ed679cd1475/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=7b6fc5a3dd73a341010bd51a19008ed679cd1475", "patch": "@@ -51,41 +51,35 @@ impl Command {\n         // a lock any more because the parent won't do anything and the child is\n         // in its own process. Thus the parent drops the lock guard while the child\n         // forgets it to avoid unlocking it on a new thread, which would be invalid.\n-        let (env_lock, result) = unsafe { (sys::os::env_read_lock(), cvt(libc::fork())?) };\n-\n-        let pid = unsafe {\n-            match result {\n-                0 => {\n-                    mem::forget(env_lock);\n-                    drop(input);\n-                    let Err(err) = self.do_exec(theirs, envp.as_ref());\n-                    let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n-                    let errno = errno.to_be_bytes();\n-                    let bytes = [\n-                        errno[0],\n-                        errno[1],\n-                        errno[2],\n-                        errno[3],\n-                        CLOEXEC_MSG_FOOTER[0],\n-                        CLOEXEC_MSG_FOOTER[1],\n-                        CLOEXEC_MSG_FOOTER[2],\n-                        CLOEXEC_MSG_FOOTER[3],\n-                    ];\n-                    // pipe I/O up to PIPE_BUF bytes should be atomic, and then\n-                    // we want to be sure we *don't* run at_exit destructors as\n-                    // we're being torn down regardless\n-                    rtassert!(output.write(&bytes).is_ok());\n-                    libc::_exit(1)\n-                }\n-                n => {\n-                    drop(env_lock);\n-                    n\n-                }\n-            }\n-        };\n+        let (env_lock, pid) = unsafe { (sys::os::env_read_lock(), cvt(libc::fork())?) };\n \n-        let mut p = Process { pid, status: None };\n+        if pid == 0 {\n+            mem::forget(env_lock);\n+            drop(input);\n+            let Err(err) = unsafe { self.do_exec(theirs, envp.as_ref()) };\n+            let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;\n+            let errno = errno.to_be_bytes();\n+            let bytes = [\n+                errno[0],\n+                errno[1],\n+                errno[2],\n+                errno[3],\n+                CLOEXEC_MSG_FOOTER[0],\n+                CLOEXEC_MSG_FOOTER[1],\n+                CLOEXEC_MSG_FOOTER[2],\n+                CLOEXEC_MSG_FOOTER[3],\n+            ];\n+            // pipe I/O up to PIPE_BUF bytes should be atomic, and then\n+            // we want to be sure we *don't* run at_exit destructors as\n+            // we're being torn down regardless\n+            rtassert!(output.write(&bytes).is_ok());\n+            unsafe { libc::_exit(1) }\n+        }\n+\n+        drop(env_lock);\n         drop(output);\n+\n+        let mut p = Process { pid, status: None };\n         let mut bytes = [0; 8];\n \n         // loop to handle EINTR"}]}