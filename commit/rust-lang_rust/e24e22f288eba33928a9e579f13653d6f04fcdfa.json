{"sha": "e24e22f288eba33928a9e579f13653d6f04fcdfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGUyMmYyODhlYmEzMzkyOGE5ZTU3OWYxMzY1M2Q2ZjA0ZmNkZmE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T14:34:52Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:04:59Z"}, "message": "Add fix for incorrect case diagnostic", "tree": {"sha": "4fd9d128cf510dd7478f6a1fd955461cca70d2f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fd9d128cf510dd7478f6a1fd955461cca70d2f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24e22f288eba33928a9e579f13653d6f04fcdfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24e22f288eba33928a9e579f13653d6f04fcdfa", "html_url": "https://github.com/rust-lang/rust/commit/e24e22f288eba33928a9e579f13653d6f04fcdfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24e22f288eba33928a9e579f13653d6f04fcdfa/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17f1026c46e6e3797caf3c69737f66bd612c58e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/17f1026c46e6e3797caf3c69737f66bd612c58e1", "html_url": "https://github.com/rust-lang/rust/commit/17f1026c46e6e3797caf3c69737f66bd612c58e1"}], "stats": {"total": 142, "additions": 112, "deletions": 30}, "files": [{"sha": "c134356ef182b978262005f46f06dc4f33806418", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -257,34 +257,22 @@ impl ModuleDef {\n     }\n \n     pub fn diagnostics(self, db: &dyn HirDatabase, sink: &mut DiagnosticSink) {\n-        match self {\n+        let id = match self {\n             ModuleDef::Adt(it) => match it {\n-                Adt::Struct(it) => {\n-                    hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-                }\n-                Adt::Enum(it) => hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink),\n-                Adt::Union(it) => hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink),\n+                Adt::Struct(it) => it.id.into(),\n+                Adt::Enum(it) => it.id.into(),\n+                Adt::Union(it) => it.id.into(),\n             },\n-            ModuleDef::Trait(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n-            ModuleDef::Function(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n-            ModuleDef::TypeAlias(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n-            ModuleDef::Module(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n-            ModuleDef::Const(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n-            ModuleDef::Static(it) => {\n-                hir_ty::diagnostics::validate_module_item(db, it.id.into(), sink)\n-            }\n+            ModuleDef::Trait(it) => it.id.into(),\n+            ModuleDef::Function(it) => it.id.into(),\n+            ModuleDef::TypeAlias(it) => it.id.into(),\n+            ModuleDef::Module(it) => it.id.into(),\n+            ModuleDef::Const(it) => it.id.into(),\n+            ModuleDef::Static(it) => it.id.into(),\n             _ => return,\n-        }\n+        };\n+\n+        hir_ty::diagnostics::validate_module_item(db, id, sink)\n     }\n }\n \n@@ -389,6 +377,8 @@ impl Module {\n         let crate_def_map = db.crate_def_map(self.id.krate);\n         crate_def_map.add_diagnostics(db.upcast(), self.id.local_id, sink);\n         for decl in self.declarations(db) {\n+            decl.diagnostics(db, sink);\n+\n             match decl {\n                 crate::ModuleDef::Function(f) => f.diagnostics(db, sink),\n                 crate::ModuleDef::Module(m) => {"}, {"sha": "da2b40849a58f7edd1510d7ce8a58cd8422d783b", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -2,5 +2,6 @@\n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticSinkBuilder};\n pub use hir_ty::diagnostics::{\n-    MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,\n+    IncorrectCase, MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr,\n+    NoSuchField,\n };"}, {"sha": "66762b90e7adab0b7e63d757819d4f835a1aaa43", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -298,7 +298,7 @@ impl Diagnostic for IncorrectCase {\n     }\n \n     fn is_experimental(&self) -> bool {\n-        true\n+        false\n     }\n }\n "}, {"sha": "71ab98c1f018cd2d0233d15182fcaa36d5d9b73f", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -96,6 +96,9 @@ pub(crate) fn diagnostics(\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n+        .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n+            res.borrow_mut().push(warning_with_fix(d, &sema));\n+        })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !(diag.is_experimental() && config.disable_experimental))\n         .filter(|diag| !config.disabled.contains(diag.code().as_str()));\n@@ -130,6 +133,16 @@ fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabas\n     }\n }\n \n+fn warning_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n+    Diagnostic {\n+        // name: Some(d.name().into()),\n+        range: sema.diagnostics_display_range(d).range,\n+        message: d.message(),\n+        severity: Severity::WeakWarning,\n+        fix: d.fix(&sema),\n+    }\n+}\n+\n fn check_unnecessary_braces_in_use_statement(\n     acc: &mut Vec<Diagnostic>,\n     file_id: FileId,\n@@ -253,6 +266,37 @@ mod tests {\n         );\n     }\n \n+    /// Similar to `check_fix`, but applies all the available fixes.\n+    fn check_fixes(ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let after = trim_indent(ra_fixture_after);\n+\n+        let (analysis, file_position) = fixture::position(ra_fixture_before);\n+        let diagnostic = analysis\n+            .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n+            .unwrap()\n+            .pop()\n+            .unwrap();\n+        let fix = diagnostic.fix.unwrap();\n+        let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n+        let actual = {\n+            let mut actual = target_file_contents.to_string();\n+            // Go from the last one to the first one, so that ranges won't be affected by previous edits.\n+            for edit in fix.source_change.source_file_edits.iter().rev() {\n+                edit.edit.apply(&mut actual);\n+            }\n+            actual\n+        };\n+\n+        assert_eq_text!(&after, &actual);\n+        assert!(\n+            fix.fix_trigger_range.start() <= file_position.offset\n+                && fix.fix_trigger_range.end() >= file_position.offset,\n+            \"diagnostic fix range {:?} does not touch cursor position {:?}\",\n+            fix.fix_trigger_range,\n+            file_position.offset\n+        );\n+    }\n+\n     /// Checks that a diagnostic applies to the file containing the `<|>` cursor marker\n     /// which has a fix that can apply to other files.\n     fn check_apply_diagnostic_fix_in_other_file(ra_fixture_before: &str, ra_fixture_after: &str) {\n@@ -790,4 +834,24 @@ struct Foo {\n         let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n         assert!(!diagnostics.is_empty());\n     }\n+\n+    #[test]\n+    fn test_rename_incorrect_case() {\n+        check_fixes(\n+            r#\"\n+pub struct test_struct<|> { one: i32 }\n+\n+pub fn some_fn(val: test_struct) -> test_struct {\n+    test_struct { one: val.one + 1 }\n+}\n+\"#,\n+            r#\"\n+pub struct TestStruct { one: i32 }\n+\n+pub fn some_fn(val: TestStruct) -> TestStruct {\n+    TestStruct { one: val.one + 1 }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "286ef07850b1ac354fffc3500673dde36bbcdc97", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -3,7 +3,10 @@\n use base_db::FileId;\n use hir::{\n     db::AstDatabase,\n-    diagnostics::{Diagnostic, MissingFields, MissingOkInTailExpr, NoSuchField, UnresolvedModule},\n+    diagnostics::{\n+        Diagnostic, IncorrectCase, MissingFields, MissingOkInTailExpr, NoSuchField,\n+        UnresolvedModule,\n+    },\n     HasSource, HirDisplay, Semantics, VariantDef,\n };\n use ide_db::{\n@@ -17,7 +20,7 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::diagnostics::Fix;\n+use crate::{diagnostics::Fix, references::rename::rename_with_semantics, FilePosition};\n \n /// A [Diagnostic] that potentially has a fix available.\n ///\n@@ -99,6 +102,19 @@ impl DiagnosticWithFix for MissingOkInTailExpr {\n     }\n }\n \n+impl DiagnosticWithFix for IncorrectCase {\n+    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Fix> {\n+        let file_id = self.file.original_file(sema.db);\n+        let offset = self.ident.text_range().start();\n+        let file_position = FilePosition { file_id, offset };\n+\n+        let rename_changes = rename_with_semantics(sema, file_position, &self.suggested_text)?;\n+\n+        let label = format!(\"Rename to {}\", self.suggested_text);\n+        Some(Fix::new(&label, rename_changes.info, rename_changes.range))\n+    }\n+}\n+\n fn missing_record_expr_field_fix(\n     sema: &Semantics<RootDatabase>,\n     usage_file_id: FileId,"}, {"sha": "88e2f2db3fd46cab9a3747ba16381b60bc10390f", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -9,7 +9,7 @@\n //! at the index that the match starts at and its tree parent is\n //! resolved to the search element definition, we get a reference.\n \n-mod rename;\n+pub(crate) mod rename;\n \n use hir::Semantics;\n use ide_db::{"}, {"sha": "f9a11e43d8d2c4828f5f034d2118988f64cdb73a", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -42,7 +42,14 @@ pub(crate) fn rename(\n     new_name: &str,\n ) -> Result<RangeInfo<SourceChange>, RenameError> {\n     let sema = Semantics::new(db);\n+    rename_with_semantics(&sema, position, new_name)\n+}\n \n+pub(crate) fn rename_with_semantics(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+    new_name: &str,\n+) -> Result<RangeInfo<SourceChange>, RenameError> {\n     match lex_single_syntax_kind(new_name) {\n         Some(res) => match res {\n             (SyntaxKind::IDENT, _) => (),"}, {"sha": "34e20464a790b5eef29cbcb6988e50758ac62a1c", "filename": "crates/syntax/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fsyntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24e22f288eba33928a9e579f13653d6f04fcdfa/crates%2Fsyntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fptr.rs?ref=e24e22f288eba33928a9e579f13653d6f04fcdfa", "patch": "@@ -23,6 +23,10 @@ impl SyntaxNodePtr {\n         SyntaxNodePtr { range: node.text_range(), kind: node.kind() }\n     }\n \n+    pub fn text_range(&self) -> TextRange {\n+        self.range.clone()\n+    }\n+\n     pub fn to_node(&self, root: &SyntaxNode) -> SyntaxNode {\n         assert!(root.parent().is_none());\n         successors(Some(root.clone()), |node| {"}]}