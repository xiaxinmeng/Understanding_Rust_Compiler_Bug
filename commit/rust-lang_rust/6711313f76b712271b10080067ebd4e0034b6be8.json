{"sha": "6711313f76b712271b10080067ebd4e0034b6be8", "node_id": "C_kwDOAAsO6NoAKDY3MTEzMTNmNzZiNzEyMjcxYjEwMDgwMDY3ZWJkNGUwMDM0YjZiZTg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-01T01:30:48Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-01T17:38:34Z"}, "message": "Move Sized check before first error is created", "tree": {"sha": "98ad414674dabfd9321bdf2e9f9648d430a0520c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ad414674dabfd9321bdf2e9f9648d430a0520c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6711313f76b712271b10080067ebd4e0034b6be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6711313f76b712271b10080067ebd4e0034b6be8", "html_url": "https://github.com/rust-lang/rust/commit/6711313f76b712271b10080067ebd4e0034b6be8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6711313f76b712271b10080067ebd4e0034b6be8/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "html_url": "https://github.com/rust-lang/rust/commit/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb"}], "stats": {"total": 79, "additions": 38, "deletions": 41}, "files": [{"sha": "fa56219b409d173779d5ddd7c593af02156c66a6", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6711313f76b712271b10080067ebd4e0034b6be8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6711313f76b712271b10080067ebd4e0034b6be8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=6711313f76b712271b10080067ebd4e0034b6be8", "patch": "@@ -1958,6 +1958,37 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 if predicate.references_error() {\n                     return;\n                 }\n+\n+                // This is kind of a hack: it frequently happens that some earlier\n+                // error prevents types from being fully inferred, and then we get\n+                // a bunch of uninteresting errors saying something like \"<generic\n+                // #0> doesn't implement Sized\".  It may even be true that we\n+                // could just skip over all checks where the self-ty is an\n+                // inference variable, but I was afraid that there might be an\n+                // inference variable created, registered as an obligation, and\n+                // then never forced by writeback, and hence by skipping here we'd\n+                // be ignoring the fact that we don't KNOW the type works\n+                // out. Though even that would probably be harmless, given that\n+                // we're only talking about builtin traits, which are known to be\n+                // inhabited. We used to check for `self.tcx.sess.has_errors()` to\n+                // avoid inundating the user with unnecessary errors, but we now\n+                // check upstream for type errors and don't add the obligations to\n+                // begin with in those cases.\n+                if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n+                    if !self.is_tainted_by_errors() {\n+                        self.emit_inference_failure_err(\n+                            body_id,\n+                            span,\n+                            trait_ref.self_ty().skip_binder().into(),\n+                            vec![],\n+                            ErrorCode::E0282,\n+                            false,\n+                        )\n+                        .emit();\n+                    }\n+                    return;\n+                }\n+\n                 // Typically, this ambiguity should only happen if\n                 // there are unresolved type inference variables\n                 // (otherwise it would suggest a coherence\n@@ -1997,37 +2028,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     )\n                 };\n \n-                // This is kind of a hack: it frequently happens that some earlier\n-                // error prevents types from being fully inferred, and then we get\n-                // a bunch of uninteresting errors saying something like \"<generic\n-                // #0> doesn't implement Sized\".  It may even be true that we\n-                // could just skip over all checks where the self-ty is an\n-                // inference variable, but I was afraid that there might be an\n-                // inference variable created, registered as an obligation, and\n-                // then never forced by writeback, and hence by skipping here we'd\n-                // be ignoring the fact that we don't KNOW the type works\n-                // out. Though even that would probably be harmless, given that\n-                // we're only talking about builtin traits, which are known to be\n-                // inhabited. We used to check for `self.tcx.sess.has_errors()` to\n-                // avoid inundating the user with unnecessary errors, but we now\n-                // check upstream for type errors and don't add the obligations to\n-                // begin with in those cases.\n-                if self.tcx.lang_items().sized_trait() == Some(trait_ref.def_id()) {\n-                    if !self.is_tainted_by_errors() {\n-                        self.emit_inference_failure_err(\n-                            body_id,\n-                            span,\n-                            trait_ref.self_ty().skip_binder().into(),\n-                            vec![],\n-                            ErrorCode::E0282,\n-                            false,\n-                        )\n-                        .emit();\n-                    }\n-                    err.cancel();\n-                    return;\n-                }\n-\n                 let obligation = Obligation::new(\n                     obligation.cause.clone(),\n                     obligation.param_env,"}, {"sha": "420104e526d9b8dbb889f23550535e6ca56cf5b7", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=6711313f76b712271b10080067ebd4e0034b6be8", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:8:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -14,9 +13,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:15:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -26,9 +24,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:23:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()\n@@ -38,9 +35,8 @@ error[E0282]: type annotations needed\n   --> $DIR/branches3.rs:30:10\n    |\n LL |         |s| s.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |s: _| s.len()"}, {"sha": "48b7946ea820e8b6d328520786965cef37fecbdf", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=6711313f76b712271b10080067ebd4e0034b6be8", "patch": "@@ -2,9 +2,8 @@ error[E0282]: type annotations needed\n   --> $DIR/closures_in_branches.rs:7:10\n    |\n LL |         |x| x.len()\n-   |          ^\n+   |          ^  - type must be known at this point\n    |\n-   = note: type must be known at this point\n help: consider giving this closure parameter an explicit type\n    |\n LL |         |x: _| x.len()"}, {"sha": "e767bfdb08b6b44e470b3d689eeab7c52d787660", "filename": "src/test/ui/type-alias-impl-trait/fallback.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6711313f76b712271b10080067ebd4e0034b6be8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ffallback.stderr?ref=6711313f76b712271b10080067ebd4e0034b6be8", "patch": "@@ -1,6 +1,8 @@\n error[E0283]: type annotations needed\n   --> $DIR/fallback.rs:24:5\n    |\n+LL | fn unconstrained_foo() -> Wrapper<Foo> {\n+   |                           ------------ type must be known at this point\n LL |     Wrapper::Second\n    |     ^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the enum `Wrapper`\n    |"}]}