{"sha": "88a250d194d7a7995c0740d706d9eb19007a85ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTI1MGQxOTRkN2E3OTk1YzA3NDBkNzA2ZDllYjE5MDA3YTg1ZWU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-22T04:42:13Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T03:12:59Z"}, "message": "Try and fix Windows terminal", "tree": {"sha": "45c97d1a1f2b7a74cd85b76f4cef6011d4a64748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45c97d1a1f2b7a74cd85b76f4cef6011d4a64748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a250d194d7a7995c0740d706d9eb19007a85ee", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a250d194d7a7995c0740d706d9eb19007a85ee", "html_url": "https://github.com/rust-lang/rust/commit/88a250d194d7a7995c0740d706d9eb19007a85ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a250d194d7a7995c0740d706d9eb19007a85ee/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3adb7554d63a66cc00323898a9b260fc616e94e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3adb7554d63a66cc00323898a9b260fc616e94e2", "html_url": "https://github.com/rust-lang/rust/commit/3adb7554d63a66cc00323898a9b260fc616e94e2"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "7ce6fb658b56d36a5998da51f3507a844b3c8d60", "filename": "src/libterm/win.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/88a250d194d7a7995c0740d706d9eb19007a85ee/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a250d194d7a7995c0740d706d9eb19007a85ee/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=88a250d194d7a7995c0740d706d9eb19007a85ee", "patch": "@@ -91,7 +91,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n     }\n }\n \n-impl<T: Writer> WinConsole<T> {\n+impl<T: Writer+Send> WinConsole<T> {\n     fn apply(&mut self) {\n         let _unused = self.buf.flush();\n         let mut accum: libc::WORD = 0;\n@@ -112,6 +112,26 @@ impl<T: Writer> WinConsole<T> {\n             SetConsoleTextAttribute(out, accum);\n         }\n     }\n+\n+    /// Returns `None` whenever the terminal cannot be created for some\n+    /// reason.\n+    pub fn new(out: T) -> Option<Box<Terminal<T>+Send+'static>> {\n+        let fg;\n+        let bg;\n+        unsafe {\n+            let mut buffer_info = ::std::mem::uninitialized();\n+            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n+                fg = bits_to_color(buffer_info.wAttributes);\n+                bg = bits_to_color(buffer_info.wAttributes >> 4);\n+            } else {\n+                fg = color::WHITE;\n+                bg = color::BLACK;\n+            }\n+        }\n+        Some(box WinConsole { buf: out,\n+                              def_foreground: fg, def_background: bg,\n+                              foreground: fg, background: bg } as Box<Terminal<T>+Send>)\n+    }\n }\n \n impl<T: Writer> Writer for WinConsole<T> {\n@@ -124,7 +144,7 @@ impl<T: Writer> Writer for WinConsole<T> {\n     }\n }\n \n-impl<T: Writer> Terminal<T> for WinConsole<T> {\n+impl<T: Writer+Send> Terminal<T> for WinConsole<T> {\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         self.foreground = color;\n         self.apply();\n@@ -177,26 +197,6 @@ impl<T: Writer> Terminal<T> for WinConsole<T> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.buf }\n }\n \n-impl<T: Writer> WinConsole<T> {\n-     fn new(out: T) -> Option<Box<WinConsole<T>+Send+'static>> {\n-        let fg;\n-        let bg;\n-        unsafe {\n-            let mut buffer_info = ::std::mem::uninitialized();\n-            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n-                fg = bits_to_color(buffer_info.wAttributes);\n-                bg = bits_to_color(buffer_info.wAttributes >> 4);\n-            } else {\n-                fg = color::WHITE;\n-                bg = color::BLACK;\n-            }\n-        }\n-        Some(box WinConsole { buf: out,\n-                              def_foreground: fg, def_background: bg,\n-                              foreground: fg, background: bg } )\n-    }\n-}\n-\n-impl<T: Writer> UnwrappableTerminal<T> for WinConsole<T> {\n+impl<T: Writer+Send> UnwrappableTerminal<T> for WinConsole<T> {\n     fn unwrap(self) -> T { self.buf }\n }"}]}