{"sha": "1067a1c5f649cc206e35b427eaa8d6553280cc96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjdhMWM1ZjY0OWNjMjA2ZTM1YjQyN2VhYThkNjU1MzI4MGNjOTY=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:02:53Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-10-02T18:28:03Z"}, "message": "Read default cfgs from rustc", "tree": {"sha": "e55b3e9ad4b2ece335f5660712918b6b97390bd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55b3e9ad4b2ece335f5660712918b6b97390bd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1067a1c5f649cc206e35b427eaa8d6553280cc96", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2U7DMACgkQztOS3gxI\nPQDEPw/9GCYeElooj8+O2hzudCr5vtDcJ4smowmrxr7561TuRgmoC2Q9TsS764WH\n9wY3riFFqCjdWTghBEJ5NFUWtKwnpsCnD/34IrKYe+oa86vgEGLqVQa8cZMAB+Yx\nrlKcksAzyr3wjGa6r5MwGC7KqknhlTtmfZo+IEoIFWrWT7S5cFSVVYmCqlUaH/UL\nSD+4B4qUiYihVGnxSWfb30uWFjvqlinsSVhxrsGxHXfUHXDY3yscVZN+n3OAF7nx\nT+MNHX4UumfKalnI8g6a5UiIvWIeDqTCuHA5LFYy8DWXtB+F8DZsd+bAvz754jVx\nYtYSgS9sFay9agZIsCrzxsDZ9UQLFQGVXXrZwK4MdclWBsYpOOb3EO5KGwEbc+kc\n9ftqb9Khp33L/U1Su5GglmgUmAsV93Qd8lAi9gsBNgJYwaSmVLQRdZxpIceBArg8\n5wJtJ+aDY6R2ly/rtlFP4kMxdhMWK6/pnjjEvBMMD9qW+i68EijGEvYxBz5UP4x1\n/bZ13aV2MbdoUmQmDEQ5UAIj4LNiFrzTttiTsx4BRq5jrgsQYlys4iGhkTd403bX\n+uCptkEtaP90tST/zZyfQMYnh5gfeUA+0ZfBCkJrfDr8SU58Ub+VmIcG2H5oujE1\n46ZOppJk/bpMaG2PfWTp/lmS7os1iNTn8Q2uNSyjg53xQi+2oCs=\n=m35E\n-----END PGP SIGNATURE-----", "payload": "tree e55b3e9ad4b2ece335f5660712918b6b97390bd3\nparent e0100e63ae2e873f119b905ac77c3355ffb351b0\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1570039373 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1570040883 +0800\n\nRead default cfgs from rustc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1067a1c5f649cc206e35b427eaa8d6553280cc96", "html_url": "https://github.com/rust-lang/rust/commit/1067a1c5f649cc206e35b427eaa8d6553280cc96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1067a1c5f649cc206e35b427eaa8d6553280cc96/comments", "author": null, "committer": null, "parents": [{"sha": "e0100e63ae2e873f119b905ac77c3355ffb351b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0100e63ae2e873f119b905ac77c3355ffb351b0", "html_url": "https://github.com/rust-lang/rust/commit/e0100e63ae2e873f119b905ac77c3355ffb351b0"}], "stats": {"total": 90, "additions": 76, "deletions": 14}, "files": [{"sha": "736f1994edfba0ad31dcd036107de289399bab7d", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -1032,6 +1032,7 @@ dependencies = [\n  \"lsp-server 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.61.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_cfg 0.1.0\",\n  \"ra_db 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_prof 0.1.0\","}, {"sha": "a5fc2a23e16f0b7d3830168d2477e7b348e0e19a", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -7,7 +7,7 @@ use rustc_hash::FxHashMap;\n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide_api::{AnalysisChange, AnalysisHost, FeatureFlags};\n-use ra_project_model::{PackageRoot, ProjectWorkspace};\n+use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use ra_vfs_glob::RustPackageFilterBuilder;\n \n@@ -41,11 +41,17 @@ pub fn load_cargo(root: &Path) -> Result<(AnalysisHost, FxHashMap<SourceRootId,\n         sender,\n         Watch(false),\n     );\n-    let (crate_graph, _crate_names) = ws.to_crate_graph(&mut |path: &Path| {\n-        let vfs_file = vfs.load(path);\n-        log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n-        vfs_file.map(vfs_file_to_id)\n-    });\n+\n+    // FIXME: cfg options?\n+    let default_cfg_options =\n+        get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+\n+    let (crate_graph, _crate_names) =\n+        ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n+            let vfs_file = vfs.load(path);\n+            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n+            vfs_file.map(vfs_file_to_id)\n+        });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n \n     let source_roots = roots"}, {"sha": "e1c92fbba302e9133ff3b353a65319dde78906eb", "filename": "crates/ra_cfg/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_cfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_cfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2Fsrc%2Flib.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -1,4 +1,6 @@\n //! ra_cfg defines conditional compiling options, `cfg` attibute parser and evaluator\n+use std::iter::IntoIterator;\n+\n use ra_syntax::SmolStr;\n use rustc_hash::FxHashSet;\n \n@@ -44,6 +46,14 @@ impl CfgOptions {\n         self\n     }\n \n+    /// Shortcut to set features\n+    pub fn features(mut self, iter: impl IntoIterator<Item = SmolStr>) -> CfgOptions {\n+        for feat in iter {\n+            self = self.key_value(\"feature\".into(), feat);\n+        }\n+        self\n+    }\n+\n     pub fn remove_atom(mut self, name: &SmolStr) -> CfgOptions {\n         self.atoms.remove(name);\n         self"}, {"sha": "aedc55a95ce94c3bbee91c5fc9132f6dbc9926f8", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -19,6 +19,7 @@ jod-thread = \"0.1.0\"\n ra_vfs = \"0.4.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }\n+ra_cfg = { path = \"../ra_cfg\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_ide_api = { path = \"../ra_ide_api\" }\n lsp-server = \"0.2.0\""}, {"sha": "27da751ab4a357371ac148243872db0f89b5c623", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -13,7 +13,7 @@ use ra_ide_api::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FeatureFlags, FileId, LibraryData,\n     SourceRootId,\n };\n-use ra_project_model::ProjectWorkspace;\n+use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n@@ -97,14 +97,18 @@ impl WorldState {\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n         }\n \n+        // FIXME: Read default cfgs from config\n+        let default_cfg_options =\n+            get_rustc_cfg_options().atom(\"test\".into()).atom(\"debug_assertion\".into());\n+\n         // Create crate graph from all the workspaces\n         let mut crate_graph = CrateGraph::default();\n         let mut load = |path: &std::path::Path| {\n             let vfs_file = vfs.load(path);\n             vfs_file.map(|f| FileId(f.0))\n         };\n         for ws in workspaces.iter() {\n-            let (graph, crate_names) = ws.to_crate_graph(&mut load);\n+            let (graph, crate_names) = ws.to_crate_graph(&default_cfg_options, &mut load);\n             let shift = crate_graph.extend(graph);\n             for (crate_id, name) in crate_names {\n                 change.set_debug_crate_name(crate_id.shift(shift), name)"}, {"sha": "28dadea9d7e03a4cbbe70d149340f0d9e144f510", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -39,6 +39,7 @@ struct PackageData {\n     is_member: bool,\n     dependencies: Vec<PackageDependency>,\n     edition: Edition,\n+    features: Vec<String>,\n }\n \n #[derive(Debug, Clone)]\n@@ -91,6 +92,9 @@ impl Package {\n     pub fn edition(self, ws: &CargoWorkspace) -> Edition {\n         ws.packages[self].edition\n     }\n+    pub fn features(self, ws: &CargoWorkspace) -> &[String] {\n+        &ws.packages[self].features\n+    }\n     pub fn targets<'a>(self, ws: &'a CargoWorkspace) -> impl Iterator<Item = Target> + 'a {\n         ws.packages[self].targets.iter().cloned()\n     }\n@@ -144,6 +148,7 @@ impl CargoWorkspace {\n                 is_member,\n                 edition: Edition::from_string(&meta_pkg.edition),\n                 dependencies: Vec::new(),\n+                features: Vec::new(),\n             });\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(meta_pkg.id.clone(), pkg);\n@@ -164,6 +169,7 @@ impl CargoWorkspace {\n                 let dep = PackageDependency { name: dep_node.name, pkg: pkg_by_id[&dep_node.pkg] };\n                 packages[source].dependencies.push(dep);\n             }\n+            packages[source].features.extend(node.features);\n         }\n \n         Ok(CargoWorkspace { packages, targets, workspace_root: meta.workspace_root })"}, {"sha": "b0d339f3839e04d5007b75763ca6485ce4705c8a", "filename": "crates/ra_project_model/src/json_project.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fjson_project.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -19,6 +19,8 @@ pub struct Crate {\n     pub(crate) root_module: PathBuf,\n     pub(crate) edition: Edition,\n     pub(crate) deps: Vec<Dep>,\n+    #[serde(default)]\n+    pub(crate) features: Vec<String>,\n }\n \n #[derive(Clone, Copy, Debug, Deserialize)]"}, {"sha": "05e49f5ce6bdcd6e7fa7714d739ca54eed22710a", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1067a1c5f649cc206e35b427eaa8d6553280cc96/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=1067a1c5f649cc206e35b427eaa8d6553280cc96", "patch": "@@ -9,6 +9,7 @@ use std::{\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n+    process::Command,\n };\n \n use ra_cfg::CfgOptions;\n@@ -118,6 +119,7 @@ impl ProjectWorkspace {\n \n     pub fn to_crate_graph(\n         &self,\n+        default_cfg_options: &CfgOptions,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n     ) -> (CrateGraph, FxHashMap<CrateId, String>) {\n         let mut crate_graph = CrateGraph::default();\n@@ -134,7 +136,9 @@ impl ProjectWorkspace {\n                         };\n                         // FIXME: cfg options\n                         // Default to enable test for workspace crates.\n-                        let cfg_options = CfgOptions::default().atom(\"test\".into());\n+                        let cfg_options = default_cfg_options\n+                            .clone()\n+                            .features(krate.features.iter().map(Into::into));\n                         crates.insert(\n                             crate_id,\n                             crate_graph.add_crate_root(file_id, edition, cfg_options),\n@@ -164,9 +168,8 @@ impl ProjectWorkspace {\n                 let mut sysroot_crates = FxHashMap::default();\n                 for krate in sysroot.crates() {\n                     if let Some(file_id) = load(krate.root(&sysroot)) {\n-                        // FIXME: cfg options\n                         // Crates from sysroot have `cfg(test)` disabled\n-                        let cfg_options = CfgOptions::default();\n+                        let cfg_options = default_cfg_options.clone().remove_atom(&\"test\".into());\n                         let crate_id =\n                             crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options);\n                         sysroot_crates.insert(krate, crate_id);\n@@ -197,9 +200,9 @@ impl ProjectWorkspace {\n                         let root = tgt.root(&cargo);\n                         if let Some(file_id) = load(root) {\n                             let edition = pkg.edition(&cargo);\n-                            // FIXME: cfg options\n-                            // Default to enable test for workspace crates.\n-                            let cfg_options = CfgOptions::default().atom(\"test\".into());\n+                            let cfg_options = default_cfg_options\n+                                .clone()\n+                                .features(pkg.features(&cargo).iter().map(Into::into));\n                             let crate_id =\n                                 crate_graph.add_crate_root(file_id, edition, cfg_options);\n                             names.insert(crate_id, pkg.name(&cargo).to_string());\n@@ -301,3 +304,32 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n     }\n     Err(format!(\"can't find Cargo.toml at {}\", path.display()))?\n }\n+\n+pub fn get_rustc_cfg_options() -> CfgOptions {\n+    let mut cfg_options = CfgOptions::default();\n+\n+    match (|| -> Result<_> {\n+        // `cfg(test)` ans `cfg(debug_assertion)` is handled outside, so we suppress them here.\n+        let output = Command::new(\"rustc\").args(&[\"--print\", \"cfg\", \"-O\"]).output()?;\n+        if !output.status.success() {\n+            Err(\"failed to get rustc cfgs\")?;\n+        }\n+        Ok(String::from_utf8(output.stdout)?)\n+    })() {\n+        Ok(rustc_cfgs) => {\n+            for line in rustc_cfgs.lines() {\n+                match line.find('=') {\n+                    None => cfg_options = cfg_options.atom(line.into()),\n+                    Some(pos) => {\n+                        let key = &line[..pos];\n+                        let value = line[pos + 1..].trim_matches('\"');\n+                        cfg_options = cfg_options.key_value(key.into(), value.into());\n+                    }\n+                }\n+            }\n+        }\n+        Err(e) => log::error!(\"failed to get rustc cfgs: {}\", e),\n+    }\n+\n+    cfg_options\n+}"}]}