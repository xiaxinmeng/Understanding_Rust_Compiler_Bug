{"sha": "de0d2b15008f0333e432aab9a7b7045ab0157897", "node_id": "C_kwDOAAsO6NoAKGRlMGQyYjE1MDA4ZjAzMzNlNDMyYWFiOWE3YjcwNDVhYjAxNTc4OTc", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-07T15:18:01Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-09T09:47:07Z"}, "message": "Add testcases", "tree": {"sha": "56e80a02ddc8b0f314139751c95b034044ca7b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56e80a02ddc8b0f314139751c95b034044ca7b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0d2b15008f0333e432aab9a7b7045ab0157897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0d2b15008f0333e432aab9a7b7045ab0157897", "html_url": "https://github.com/rust-lang/rust/commit/de0d2b15008f0333e432aab9a7b7045ab0157897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0d2b15008f0333e432aab9a7b7045ab0157897/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1aa3064b6d86c5ae90a67e420d88d826bafe8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1aa3064b6d86c5ae90a67e420d88d826bafe8be", "html_url": "https://github.com/rust-lang/rust/commit/b1aa3064b6d86c5ae90a67e420d88d826bafe8be"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "30f6831dcf4027acbba6812bf4fd5cb3300fb664", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de0d2b15008f0333e432aab9a7b7045ab0157897/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0d2b15008f0333e432aab9a7b7045ab0157897/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=de0d2b15008f0333e432aab9a7b7045ab0157897", "patch": "@@ -658,18 +658,18 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n             {\n                 if name.ident.name == sym::new {\n                     return Some(VecInitKind::New);\n+                } else if name.ident.name.as_str() == \"default\" {\n+                    return Some(VecInitKind::Default);\n                 } else if name.ident.name.as_str() == \"with_capacity\" {\n-                    return args.get(0).and_then(|arg| {\n-                        if_chain! {\n-                            if let ExprKind::Lit(lit) = &arg.kind;\n-                            if let LitKind::Int(num, _) = lit.node;\n-                            then {\n-                                Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?))\n-                            } else {\n-                                Some(VecInitKind::WithExprCapacity(arg.hir_id))\n-                            }\n+                    let arg = args.get(0)?;\n+                    if_chain! {\n+                        if let ExprKind::Lit(lit) = &arg.kind;\n+                        if let LitKind::Int(num, _) = lit.node;\n+                        then {\n+                            return Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?))\n                         }\n-                    });\n+                    }\n+                    return Some(VecInitKind::WithExprCapacity(arg.hir_id));\n                 }\n             }\n             ExprKind::Path(QPath::Resolved(_, path))"}, {"sha": "dc150cf28f2cce48b79d9df965539d5482cc445f", "filename": "tests/ui/uninit_vec.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/de0d2b15008f0333e432aab9a7b7045ab0157897/tests%2Fui%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0d2b15008f0333e432aab9a7b7045ab0157897/tests%2Fui%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.rs?ref=de0d2b15008f0333e432aab9a7b7045ab0157897", "patch": "@@ -20,6 +20,23 @@ fn main() {\n         vec.set_len(200);\n     }\n \n+    // new() -> set_len() should be detected\n+    let mut vec: Vec<u8> = Vec::new();\n+    unsafe {\n+        vec.set_len(200);\n+    }\n+\n+    // default() -> set_len() should be detected\n+    let mut vec: Vec<u8> = Default::default();\n+    unsafe {\n+        vec.set_len(200);\n+    }\n+\n+    let mut vec: Vec<u8> = Vec::default();\n+    unsafe {\n+        vec.set_len(200);\n+    }\n+\n     // test when both calls are enclosed in the same unsafe block\n     unsafe {\n         let mut vec: Vec<u8> = Vec::with_capacity(1000);"}, {"sha": "81b91cef92abf8b99c3741996c10283b0a238ae0", "filename": "tests/ui/uninit_vec.stderr", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/de0d2b15008f0333e432aab9a7b7045ab0157897/tests%2Fui%2Funinit_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de0d2b15008f0333e432aab9a7b7045ab0157897/tests%2Fui%2Funinit_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinit_vec.stderr?ref=de0d2b15008f0333e432aab9a7b7045ab0157897", "patch": "@@ -22,7 +22,40 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:32:5\n+  --> $DIR/uninit_vec.rs:24:5\n+   |\n+LL |     let mut vec: Vec<u8> = Vec::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n+LL |         vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:30:5\n+   |\n+LL |     let mut vec: Vec<u8> = Default::default();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n+LL |         vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:35:5\n+   |\n+LL |     let mut vec: Vec<u8> = Vec::default();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     unsafe {\n+LL |         vec.set_len(200);\n+   |         ^^^^^^^^^^^^^^^^\n+   |\n+   = help: initialize the buffer or wrap the content in `MaybeUninit`\n+\n+error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n+  --> $DIR/uninit_vec.rs:49:5\n    |\n LL |     let mut vec: Vec<u8> = Vec::with_capacity(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +66,7 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:41:5\n+  --> $DIR/uninit_vec.rs:58:5\n    |\n LL |     my_vec.vec.reserve(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +77,7 @@ LL |         my_vec.vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:46:5\n+  --> $DIR/uninit_vec.rs:63:5\n    |\n LL |     my_vec.vec = Vec::with_capacity(1000);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +88,7 @@ LL |         my_vec.vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:25:9\n+  --> $DIR/uninit_vec.rs:42:9\n    |\n LL |         let mut vec: Vec<u8> = Vec::with_capacity(1000);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -65,7 +98,7 @@ LL |         vec.set_len(200);\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n error: calling `set_len()` immediately after reserving a buffer creates uninitialized values\n-  --> $DIR/uninit_vec.rs:28:9\n+  --> $DIR/uninit_vec.rs:45:9\n    |\n LL |         vec.reserve(1000);\n    |         ^^^^^^^^^^^^^^^^^^\n@@ -74,5 +107,5 @@ LL |         vec.set_len(200);\n    |\n    = help: initialize the buffer or wrap the content in `MaybeUninit`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 10 previous errors\n "}]}