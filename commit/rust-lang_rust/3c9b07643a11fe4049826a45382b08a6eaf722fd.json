{"sha": "3c9b07643a11fe4049826a45382b08a6eaf722fd", "node_id": "C_kwDOAAsO6NoAKDNjOWIwNzY0M2ExMWZlNDA0OTgyNmE0NTM4MmIwOGE2ZWFmNzIyZmQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-25T07:39:19Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-05-25T08:14:13Z"}, "message": "include test suite metadata in build metrics", "tree": {"sha": "7d5e1e6e8a15a5bbbecf61b039b8614912f676fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5e1e6e8a15a5bbbecf61b039b8614912f676fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c9b07643a11fe4049826a45382b08a6eaf722fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmRvGNUACgkQzXazX3c0\ndp6cBBAAkXEgz1u9E+hrLSZ5ZRRaU8lqretnbKJr1ra1gzVMmeV1+VqGj7nEnpc/\n6uyji3OG/75VUhiyQIFdAG21GPwhkmY30wtRbKmgrIdasT8HP5pQM3GWNFKn66cR\nVjLL17/E+27uL9tdaaSOsot5HVyPiJoQF52DF4HIcnulu4Db8JfwXZGLyPGu6Zi/\nG9fTddBezfmVDtSQ8ic7z+rS8W1GepHyH7nCCBrZtrg1hMMXGAS6IEiaNUhGS8Z6\nKcRqZXW3CWmBZvvvZhahQNKHGi5PWfuUyAECzaA2qilrUDkfxXARTcqvGRhnu9A0\nqzC8kxfiFewjgJXXmk9wqm4gdPyHjIHLGUyin2t11cqgmgYRxzT62QsLWPoFHJGN\nL7SJUTews61/YYHJp1bWOs5vFK4AYbZtxh/eW1pMs2k090xbKjpAJ9l8gBrHybcI\nF8RUeagpK3quTUCvAR8+mCVeMmMEHiK6ORCLjBGDQXssj8ZpFVjfd1Q8xmiTa99g\nj/XcoCgYlhZ7g5hyl9KIsMWUiH62jnqih6s1nkHRZ0xEcA6acPcVbvQrkWFxd5eZ\nUoonwqLvFKBrNbbxZSvags48EZgBBr1AgrAf1CxPoZcqsYNpMg7yR0httFxWJtPt\n4pBHdY2+k8iZ/XJKwz7RZ4t+RnsfvZwsN5FCZKQgZcnf0RpH0oI=\n=BLSt\n-----END PGP SIGNATURE-----", "payload": "tree 7d5e1e6e8a15a5bbbecf61b039b8614912f676fb\nparent 776f22292fb5c2cc45f029d4b754662120732a6a\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1685000359 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1685002453 +0200\n\ninclude test suite metadata in build metrics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c9b07643a11fe4049826a45382b08a6eaf722fd", "html_url": "https://github.com/rust-lang/rust/commit/3c9b07643a11fe4049826a45382b08a6eaf722fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c9b07643a11fe4049826a45382b08a6eaf722fd/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "776f22292fb5c2cc45f029d4b754662120732a6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/776f22292fb5c2cc45f029d4b754662120732a6a", "html_url": "https://github.com/rust-lang/rust/commit/776f22292fb5c2cc45f029d4b754662120732a6a"}], "stats": {"total": 126, "additions": 104, "deletions": 22}, "files": [{"sha": "b119cf2bc953a415a5e2dcb924e0246e39c81982", "filename": "src/bootstrap/metrics.rs", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3c9b07643a11fe4049826a45382b08a6eaf722fd/src%2Fbootstrap%2Fmetrics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9b07643a11fe4049826a45382b08a6eaf722fd/src%2Fbootstrap%2Fmetrics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetrics.rs?ref=3c9b07643a11fe4049826a45382b08a6eaf722fd", "patch": "@@ -57,7 +57,7 @@ impl BuildMetrics {\n             duration_excluding_children_sec: Duration::ZERO,\n \n             children: Vec::new(),\n-            tests: Vec::new(),\n+            test_suites: Vec::new(),\n         });\n     }\n \n@@ -84,19 +84,33 @@ impl BuildMetrics {\n         }\n     }\n \n+    pub(crate) fn begin_test_suite(&self, metadata: TestSuiteMetadata, builder: &Builder<'_>) {\n+        // Do not record dry runs, as they'd be duplicates of the actual steps.\n+        if builder.config.dry_run() {\n+            return;\n+        }\n+\n+        let mut state = self.state.borrow_mut();\n+        let step = state.running_steps.last_mut().unwrap();\n+        step.test_suites.push(TestSuite { metadata, tests: Vec::new() });\n+    }\n+\n     pub(crate) fn record_test(&self, name: &str, outcome: TestOutcome, builder: &Builder<'_>) {\n         // Do not record dry runs, as they'd be duplicates of the actual steps.\n         if builder.config.dry_run() {\n             return;\n         }\n \n         let mut state = self.state.borrow_mut();\n-        state\n-            .running_steps\n-            .last_mut()\n-            .unwrap()\n-            .tests\n-            .push(Test { name: name.to_string(), outcome });\n+        let step = state.running_steps.last_mut().unwrap();\n+\n+        if let Some(test_suite) = step.test_suites.last_mut() {\n+            test_suite.tests.push(Test { name: name.to_string(), outcome });\n+        } else {\n+            panic!(\n+                \"metrics.record_test() called without calling metrics.record_test_suite() first\"\n+            );\n+        }\n     }\n \n     fn collect_stats(&self, state: &mut MetricsState) {\n@@ -159,11 +173,7 @@ impl BuildMetrics {\n     fn prepare_json_step(&self, step: StepMetrics) -> JsonNode {\n         let mut children = Vec::new();\n         children.extend(step.children.into_iter().map(|child| self.prepare_json_step(child)));\n-        children.extend(\n-            step.tests\n-                .into_iter()\n-                .map(|test| JsonNode::Test { name: test.name, outcome: test.outcome }),\n-        );\n+        children.extend(step.test_suites.into_iter().map(|suite| JsonNode::TestSuite(suite)));\n \n         JsonNode::RustbuildStep {\n             type_: step.type_,\n@@ -198,12 +208,7 @@ struct StepMetrics {\n     duration_excluding_children_sec: Duration,\n \n     children: Vec<StepMetrics>,\n-    tests: Vec<Test>,\n-}\n-\n-struct Test {\n-    name: String,\n-    outcome: TestOutcome,\n+    test_suites: Vec<TestSuite>,\n }\n \n #[derive(Serialize, Deserialize)]\n@@ -237,13 +242,41 @@ enum JsonNode {\n \n         children: Vec<JsonNode>,\n     },\n-    Test {\n-        name: String,\n-        #[serde(flatten)]\n-        outcome: TestOutcome,\n+    TestSuite(TestSuite),\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+struct TestSuite {\n+    metadata: TestSuiteMetadata,\n+    tests: Vec<Test>,\n+}\n+\n+#[derive(Serialize, Deserialize)]\n+#[serde(tag = \"kind\", rename_all = \"snake_case\")]\n+pub(crate) enum TestSuiteMetadata {\n+    Crate {\n+        crates: Vec<String>,\n+        target: String,\n+        host: String,\n+        stage: u32,\n+    },\n+    Compiletest {\n+        suite: String,\n+        mode: String,\n+        compare_mode: Option<String>,\n+        target: String,\n+        host: String,\n+        stage: u32,\n     },\n }\n \n+#[derive(Serialize, Deserialize)]\n+pub(crate) struct Test {\n+    name: String,\n+    #[serde(flatten)]\n+    outcome: TestOutcome,\n+}\n+\n #[derive(Serialize, Deserialize)]\n #[serde(tag = \"outcome\", rename_all = \"snake_case\")]\n pub(crate) enum TestOutcome {"}, {"sha": "f64b5f965237eef60116e0302fcf99bc853fdd6e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3c9b07643a11fe4049826a45382b08a6eaf722fd/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c9b07643a11fe4049826a45382b08a6eaf722fd/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=3c9b07643a11fe4049826a45382b08a6eaf722fd", "patch": "@@ -317,6 +317,17 @@ impl Step for Cargo {\n         cargo.env(\"CARGO_TEST_DISABLE_NIGHTLY\", \"1\");\n         cargo.env(\"PATH\", &path_for_cargo(builder, compiler));\n \n+        #[cfg(feature = \"build-metrics\")]\n+        builder.metrics.begin_test_suite(\n+            crate::metrics::TestSuiteMetadata::Crate {\n+                crates: vec![\"cargo\".into()],\n+                target: self.host.triple.to_string(),\n+                host: self.host.triple.to_string(),\n+                stage: self.stage,\n+            },\n+            builder,\n+        );\n+\n         let _time = util::timeit(&builder);\n         add_flags_and_try_run_tests(builder, &mut cargo);\n     }\n@@ -1759,6 +1770,19 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n+        #[cfg(feature = \"build-metrics\")]\n+        builder.metrics.begin_test_suite(\n+            crate::metrics::TestSuiteMetadata::Compiletest {\n+                suite: suite.into(),\n+                mode: mode.into(),\n+                compare_mode: None,\n+                target: self.target.triple.to_string(),\n+                host: self.compiler.host.triple.to_string(),\n+                stage: self.compiler.stage,\n+            },\n+            builder,\n+        );\n+\n         builder.info(&format!(\n             \"Check compiletest suite={} mode={} ({} -> {})\",\n             suite, mode, &compiler.host, target\n@@ -1768,6 +1792,20 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         if let Some(compare_mode) = compare_mode {\n             cmd.arg(\"--compare-mode\").arg(compare_mode);\n+\n+            #[cfg(feature = \"build-metrics\")]\n+            builder.metrics.begin_test_suite(\n+                crate::metrics::TestSuiteMetadata::Compiletest {\n+                    suite: suite.into(),\n+                    mode: mode.into(),\n+                    compare_mode: Some(compare_mode.into()),\n+                    target: self.target.triple.to_string(),\n+                    host: self.compiler.host.triple.to_string(),\n+                    stage: self.compiler.stage,\n+                },\n+                builder,\n+            );\n+\n             builder.info(&format!(\n                 \"Check compiletest suite={} mode={} compare_mode={} ({} -> {})\",\n                 suite, mode, compare_mode, &compiler.host, target\n@@ -2094,6 +2132,17 @@ fn run_cargo_test(\n     let mut cargo =\n         prepare_cargo_test(cargo, libtest_args, crates, primary_crate, compiler, target, builder);\n     let _time = util::timeit(&builder);\n+\n+    #[cfg(feature = \"build-metrics\")]\n+    builder.metrics.begin_test_suite(\n+        crate::metrics::TestSuiteMetadata::Crate {\n+            crates: crates.iter().map(|c| c.to_string()).collect(),\n+            target: target.triple.to_string(),\n+            host: compiler.host.triple.to_string(),\n+            stage: compiler.stage,\n+        },\n+        builder,\n+    );\n     add_flags_and_try_run_tests(builder, &mut cargo)\n }\n "}]}