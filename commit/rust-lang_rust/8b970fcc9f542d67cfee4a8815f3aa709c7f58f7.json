{"sha": "8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOTcwZmNjOWY1NDJkNjdjZmVlNGE4ODE1ZjNhYTcwOWM3ZjU4Zjc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-24T15:55:55Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-24T15:55:55Z"}, "message": "Format inner attributes wherever possible", "tree": {"sha": "5075fe18ac4f3f8d0789f680aea5383fe9a51a02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5075fe18ac4f3f8d0789f680aea5383fe9a51a02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "html_url": "https://github.com/rust-lang/rust/commit/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adce9545600d0e52e1cd09bb5632e5de697e8712", "url": "https://api.github.com/repos/rust-lang/rust/commits/adce9545600d0e52e1cd09bb5632e5de697e8712", "html_url": "https://github.com/rust-lang/rust/commit/adce9545600d0e52e1cd09bb5632e5de697e8712"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "35e1e432733f7ece084b54e0911fede34c7bc62b", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "patch": "@@ -914,7 +914,7 @@ fn rewrite_block_with_visitor(\n         ast::BlockCheckMode::Default => visitor.last_pos = block.span.lo,\n     }\n \n-    visitor.visit_block(block);\n+    visitor.visit_block(block, None);\n     Some(format!(\"{}{}\", prefix, visitor.buffer))\n }\n "}, {"sha": "9c3fb86f73e607e2584fb2480228903dc3b14fe6", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "patch": "@@ -640,6 +640,7 @@ pub fn format_impl(\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n \n+            visitor.visit_attrs(&item.attrs, ast::AttrStyle::Inner);\n             for item in items {\n                 visitor.visit_impl_item(item);\n             }"}, {"sha": "5647e6df5e23672a1ca78544afb8c42711d0056c", "filename": "src/lib.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "patch": "@@ -554,17 +554,24 @@ where\n         if skip_children && path.as_path() != main_file {\n             continue;\n         }\n-        let path = path.to_str().unwrap();\n+        let path_str = path.to_str().unwrap();\n         if config.verbose() {\n-            println!(\"Formatting {}\", path);\n+            println!(\"Formatting {}\", path_str);\n         }\n         {\n             let mut visitor = FmtVisitor::from_codemap(parse_session, config);\n-            visitor.format_separate_mod(module);\n+            let filemap = visitor.codemap.lookup_char_pos(module.inner.lo).file;\n+            // Format inner attributes if available.\n+            if !krate.attrs.is_empty() && path == main_file {\n+                visitor.visit_attrs(&krate.attrs, ast::AttrStyle::Inner);\n+            } else {\n+                visitor.last_pos = filemap.start_pos;\n+            }\n+            visitor.format_separate_mod(module, &*filemap);\n \n-            has_diff |= after_file(path, &mut visitor.buffer)?;\n+            has_diff |= after_file(path_str, &mut visitor.buffer)?;\n \n-            result.push((path.to_owned(), visitor.buffer));\n+            result.push((path_str.to_owned(), visitor.buffer));\n         }\n         // Reset the error count.\n         if parse_session.span_diagnostic.has_errors() {"}, {"sha": "0f7005e2856844132604b0490022432b06bd5f31", "filename": "src/visitor.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b970fcc9f542d67cfee4a8815f3aa709c7f58f7/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=8b970fcc9f542d67cfee4a8815f3aa709c7f58f7", "patch": "@@ -12,7 +12,7 @@ use std::cmp;\n \n use strings::string_buffer::StringBuffer;\n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{BytePos, CodeMap, Span};\n+use syntax::codemap::{self, BytePos, CodeMap, Span};\n use syntax::parse::ParseSess;\n \n use {Indent, Shape};\n@@ -128,7 +128,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn visit_block(&mut self, b: &ast::Block) {\n+    pub fn visit_block(&mut self, b: &ast::Block, inner_attrs: Option<&[ast::Attribute]>) {\n         debug!(\n             \"visit_block: {:?} {:?}\",\n             self.codemap.lookup_char_pos(b.span.lo),\n@@ -144,6 +144,11 @@ impl<'a> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_indent(self.config);\n         self.buffer.push_str(\"{\");\n \n+        // Format inner attributes if available.\n+        if let Some(attrs) = inner_attrs {\n+            self.visit_attrs(attrs, ast::AttrStyle::Inner);\n+        }\n+\n         for stmt in &b.stmts {\n             self.visit_stmt(stmt)\n         }\n@@ -201,6 +206,7 @@ impl<'a> FmtVisitor<'a> {\n         s: Span,\n         _: ast::NodeId,\n         defaultness: ast::Defaultness,\n+        inner_attrs: Option<&[ast::Attribute]>,\n     ) {\n         let indent = self.block_indent;\n         let block;\n@@ -254,22 +260,23 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         self.last_pos = source!(self, block.span).lo;\n-        self.visit_block(block)\n+        self.visit_block(block, inner_attrs)\n     }\n \n     pub fn visit_item(&mut self, item: &ast::Item) {\n         // This is where we bail out if there is a skip attribute. This is only\n         // complex in the module case. It is complex because the module could be\n         // in a separate file and there might be attributes in both files, but\n         // the AST lumps them all together.\n+        let mut attrs = item.attrs.clone();\n         match item.node {\n             ast::ItemKind::Mod(ref m) => {\n                 let outer_file = self.codemap.lookup_char_pos(item.span.lo).file;\n                 let inner_file = self.codemap.lookup_char_pos(m.inner.lo).file;\n                 if outer_file.name == inner_file.name {\n                     // Module is inline, in this case we treat modules like any\n                     // other item.\n-                    if self.visit_attrs(&item.attrs) {\n+                    if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n                         self.push_rewrite(item.span, None);\n                         return;\n                     }\n@@ -279,7 +286,7 @@ impl<'a> FmtVisitor<'a> {\n                 } else {\n                     // Module is not inline and should not be skipped. We want\n                     // to process only the attributes in the current file.\n-                    let attrs = item.attrs\n+                    let filterd_attrs = item.attrs\n                         .iter()\n                         .filter_map(|a| {\n                             let attr_file = self.codemap.lookup_char_pos(a.span.lo).file;\n@@ -292,10 +299,11 @@ impl<'a> FmtVisitor<'a> {\n                         .collect::<Vec<_>>();\n                     // Assert because if we should skip it should be caught by\n                     // the above case.\n-                    assert!(!self.visit_attrs(&attrs));\n+                    assert!(!self.visit_attrs(&filterd_attrs, ast::AttrStyle::Outer));\n+                    attrs = filterd_attrs;\n                 }\n             }\n-            _ => if self.visit_attrs(&item.attrs) {\n+            _ => if self.visit_attrs(&item.attrs, ast::AttrStyle::Outer) {\n                 self.push_rewrite(item.span, None);\n                 return;\n             },\n@@ -361,7 +369,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Mod(ref module) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo);\n-                self.format_mod(module, &item.vis, item.span, item.ident);\n+                self.format_mod(module, &item.vis, item.span, item.ident, &attrs);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.visit_mac(mac, Some(item.ident), MacroPosition::Item);\n@@ -416,6 +424,7 @@ impl<'a> FmtVisitor<'a> {\n                     item.span,\n                     item.id,\n                     ast::Defaultness::Final,\n+                    Some(&item.attrs),\n                 )\n             }\n             ast::ItemKind::Ty(ref ty, ref generics) => {\n@@ -457,7 +466,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn visit_trait_item(&mut self, ti: &ast::TraitItem) {\n-        if self.visit_attrs(&ti.attrs) {\n+        if self.visit_attrs(&ti.attrs, ast::AttrStyle::Outer) {\n             self.push_rewrite(ti.span, None);\n             return;\n         }\n@@ -489,6 +498,7 @@ impl<'a> FmtVisitor<'a> {\n                     ti.span,\n                     ti.id,\n                     ast::Defaultness::Final,\n+                    Some(&ti.attrs),\n                 );\n             }\n             ast::TraitItemKind::Type(ref type_param_bounds, ref type_default) => {\n@@ -508,7 +518,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub fn visit_impl_item(&mut self, ii: &ast::ImplItem) {\n-        if self.visit_attrs(&ii.attrs) {\n+        if self.visit_attrs(&ii.attrs, ast::AttrStyle::Outer) {\n             self.push_rewrite(ii.span, None);\n             return;\n         }\n@@ -521,6 +531,7 @@ impl<'a> FmtVisitor<'a> {\n                     ii.span,\n                     ii.id,\n                     ii.defaultness,\n+                    Some(&ii.attrs),\n                 );\n             }\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n@@ -655,7 +666,14 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn format_mod(&mut self, m: &ast::Mod, vis: &ast::Visibility, s: Span, ident: ast::Ident) {\n+    fn format_mod(\n+        &mut self,\n+        m: &ast::Mod,\n+        vis: &ast::Visibility,\n+        s: Span,\n+        ident: ast::Ident,\n+        attrs: &[ast::Attribute],\n+    ) {\n         // Decide whether this is an inline mod or an external mod.\n         let local_file_name = self.codemap.span_to_filename(s);\n         let inner_span = source!(self, m.inner);\n@@ -681,6 +699,7 @@ impl<'a> FmtVisitor<'a> {\n             } else {\n                 self.last_pos = mod_lo;\n                 self.block_indent = self.block_indent.block_indent(self.config);\n+                self.visit_attrs(attrs, ast::AttrStyle::Inner);\n                 self.walk_mod_items(m);\n                 self.format_missing_with_indent(source!(self, m.inner).hi - BytePos(1));\n                 self.close_block(false);\n@@ -692,9 +711,7 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn format_separate_mod(&mut self, m: &ast::Mod) {\n-        let filemap = self.codemap.lookup_char_pos(m.inner.lo).file;\n-        self.last_pos = filemap.start_pos;\n+    pub fn format_separate_mod(&mut self, m: &ast::Mod, filemap: &codemap::FileMap) {\n         self.block_indent = Indent::empty();\n         self.walk_mod_items(m);\n         self.format_missing_with_indent(filemap.end_pos);"}]}