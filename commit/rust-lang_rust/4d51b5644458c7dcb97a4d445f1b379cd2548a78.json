{"sha": "4d51b5644458c7dcb97a4d445f1b379cd2548a78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTFiNTY0NDQ1OGM3ZGNiOTdhNGQ0NDVmMWIzNzljZDI1NDhhNzg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-12T17:16:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T17:16:02Z"}, "message": "Merge #7650\n\n7650: Add `find_impl_block_end` assist helper r=Veykril a=yoshuawuyts\n\nFixes #7605. This makes it so assists can use helpers to either append a method to the start or the end of an `impl` block. Thanks!\r\n\r\n@Veykril if this is merged, perhaps it could be good to update the gif in https://github.com/rust-analyzer/rust-analyzer/pull/7617#issuecomment-776622135 ? -- this should fix the ordering issue when generating multiple methods.\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "e67df57ec40bd510028d0002306debd8c73f61b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e67df57ec40bd510028d0002306debd8c73f61b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d51b5644458c7dcb97a4d445f1b379cd2548a78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJrfSCRBK7hj4Ov3rIwAAdHIIAHbIQbRz8Zot46KwBrNCW/b3\nXNUxyZF1IN7TKORNH42d8h2U4pg74CByqwwDh4wnf6Br3mGx5h0ZiPdrYCMgUmu0\n259ggpLwBnh6iJ4d6REKFfKktK4FarFvFBeoLiIDGtrU0xhbtCfhSknObqYs1jq6\ndJK9jKJKZ26B2629eX2hDmn9i1Oy08Zlm/eifv7H9mTCfLChHwmMULA5FbJ/sT36\nIEen4eBRRB8GCvV534uBkSIX3BFYlSY3MrAOmhFrPFcBCRmumfqqxuCzCrcTBNBf\ng2FWc2uA7WsfyPnlNPNK5Gh/o3VgDLDLOwNGInEJlmEV97wOrBsZwueRMV7B7OE=\n=/fC0\n-----END PGP SIGNATURE-----\n", "payload": "tree e67df57ec40bd510028d0002306debd8c73f61b8\nparent 29bc6b45fbcefc3369c14035126a8b0510b2ef60\nparent ac959b82b3408fafd22f4fbb59e10383a18c545f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613150162 +0000\ncommitter GitHub <noreply@github.com> 1613150162 +0000\n\nMerge #7650\n\n7650: Add `find_impl_block_end` assist helper r=Veykril a=yoshuawuyts\n\nFixes #7605. This makes it so assists can use helpers to either append a method to the start or the end of an `impl` block. Thanks!\r\n\r\n@Veykril if this is merged, perhaps it could be good to update the gif in https://github.com/rust-analyzer/rust-analyzer/pull/7617#issuecomment-776622135 ? -- this should fix the ordering issue when generating multiple methods.\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d51b5644458c7dcb97a4d445f1b379cd2548a78", "html_url": "https://github.com/rust-lang/rust/commit/4d51b5644458c7dcb97a4d445f1b379cd2548a78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d51b5644458c7dcb97a4d445f1b379cd2548a78/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bc6b45fbcefc3369c14035126a8b0510b2ef60", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bc6b45fbcefc3369c14035126a8b0510b2ef60", "html_url": "https://github.com/rust-lang/rust/commit/29bc6b45fbcefc3369c14035126a8b0510b2ef60"}, {"sha": "ac959b82b3408fafd22f4fbb59e10383a18c545f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac959b82b3408fafd22f4fbb59e10383a18c545f", "html_url": "https://github.com/rust-lang/rust/commit/ac959b82b3408fafd22f4fbb59e10383a18c545f"}], "stats": {"total": 189, "additions": 171, "deletions": 18}, "files": [{"sha": "aeb887e717c17dc7585d16e9cb05b55e681a5fc7", "filename": "crates/assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::{self, AstNode, NameOwner};\n use test_utils::mark;\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -80,7 +80,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&ast::Adt::Enum(parent_enum.clone()), &buf);\n                     parent_enum.syntax().text_range().end()\n@@ -197,6 +197,43 @@ impl Variant {\n     pub(crate) fn is_minor(&self) -> bool {\n         matches!(self, Self::Minor)\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_multiple_generate_enum_match_from_variant() {\n+        check_assist(\n+            generate_enum_match_method,\n+            r#\"\n+enum Variant {\n+    Undefined,\n+    Minor,\n+    Major$0,\n+}\n+\n+impl Variant {\n+    /// Returns `true` if the variant is [`Minor`].\n+    fn is_minor(&self) -> bool {\n+        matches!(self, Self::Minor)\n+    }\n+}\"#,\n+            r#\"enum Variant {\n+    Undefined,\n+    Minor,\n+    Major,\n+}\n+\n+impl Variant {\n+    /// Returns `true` if the variant is [`Minor`].\n+    fn is_minor(&self) -> bool {\n+        matches!(self, Self::Minor)\n+    }\n+\n+    /// Returns `true` if the variant is [`Major`].\n+    fn is_major(&self) -> bool {\n+        matches!(self, Self::Major)\n+    }\n }\"#,\n         );\n     }"}, {"sha": "fbcf8b0699fa2fb0877e2ed3417b8f6f68460f18", "filename": "crates/assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -73,7 +73,7 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n                     strukt.syntax().text_range().end()\n@@ -150,6 +150,42 @@ impl<T: Clone> Context<T> {\n     pub(crate) fn data(&self) -> &T {\n         &self.data\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_multiple_generate_getter() {\n+        check_assist(\n+            generate_getter,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    cou$0nt: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a reference to the context's data.\n+    fn data(&self) -> &T {\n+        &self.data\n+    }\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    count: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a reference to the context's data.\n+    fn data(&self) -> &T {\n+        &self.data\n+    }\n+\n+    /// Get a reference to the context's count.\n+    fn count(&self) -> &usize {\n+        &self.count\n+    }\n }\"#,\n         );\n     }"}, {"sha": "bf0d99881fae931798af9819ff7cc6678cce2dc9", "filename": "crates/assists/src/handlers/generate_getter_mut.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -76,7 +76,7 @@ pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Opt\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n                     strukt.syntax().text_range().end()\n@@ -153,6 +153,42 @@ impl<T: Clone> Context<T> {\n     pub(crate) fn data_mut(&mut self) -> &mut T {\n         &mut self.data\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_multiple_generate_getter_mut() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    cou$0nt: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    count: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+\n+    /// Get a mutable reference to the context's count.\n+    fn count_mut(&mut self) -> &mut usize {\n+        &mut self.count\n+    }\n }\"#,\n         );\n     }"}, {"sha": "8ce5930b77dc34bed68ddbfb7a97af1f97e9a8e6", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -4,7 +4,7 @@ use stdx::format_to;\n use syntax::ast::{self, AstNode, NameOwner, StructKind, VisibilityOwner};\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_start, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -58,7 +58,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n         let start_offset = impl_def\n-            .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+            .and_then(|impl_def| find_impl_block_start(impl_def, &mut buf))\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&Adt::Struct(strukt.clone()), &buf);\n                 strukt.syntax().text_range().end()"}, {"sha": "b655f9b9cd99854a11a14d664971a1d986730aee", "filename": "crates/assists/src/handlers/generate_setter.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_setter.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -3,7 +3,7 @@ use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n \n use crate::{\n-    utils::{find_impl_block, find_struct_impl, generate_impl_text},\n+    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -79,7 +79,7 @@ pub(crate) fn generate_setter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n+                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n                     strukt.syntax().text_range().end()\n@@ -156,6 +156,42 @@ impl<T: Clone> Person<T> {\n     pub(crate) fn set_data(&mut self, data: T) {\n         self.data = data;\n     }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_multiple_generate_setter() {\n+        check_assist(\n+            generate_setter,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    cou$0nt: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Set the context's data.\n+    fn set_data(&mut self, data: T) {\n+        self.data = data;\n+    }\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    count: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Set the context's data.\n+    fn set_data(&mut self, data: T) {\n+        self.data = data;\n+    }\n+\n+    /// Set the context's count.\n+    fn set_count(&mut self, count: usize) {\n+        self.count = count;\n+    }\n }\"#,\n         );\n     }"}, {"sha": "5dd32aef103b0ad434c39ed2f0e6bb1e861063cc", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d51b5644458c7dcb97a4d445f1b379cd2548a78/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=4d51b5644458c7dcb97a4d445f1b379cd2548a78", "patch": "@@ -279,7 +279,7 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-// FIXME: this partially overlaps with `find_impl_block`\n+// FIXME: this partially overlaps with `find_impl_block_*`\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext,\n     strukt: &ast::Adt,\n@@ -343,17 +343,25 @@ fn has_fn(imp: &ast::Impl, rhs_name: &str) -> bool {\n \n /// Find the start of the `impl` block for the given `ast::Impl`.\n //\n-// FIXME: add a way to find the end of the `impl` block.\n // FIXME: this partially overlaps with `find_struct_impl`\n-pub(crate) fn find_impl_block(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {\n+pub(crate) fn find_impl_block_start(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {\n     buf.push('\\n');\n-    let start = impl_def\n-        .syntax()\n-        .descendants_with_tokens()\n-        .find(|t| t.kind() == T!['{'])?\n+    let start = impl_def.assoc_item_list().and_then(|it| it.l_curly_token())?.text_range().end();\n+    Some(start)\n+}\n+\n+/// Find the end of the `impl` block for the given `ast::Impl`.\n+//\n+// FIXME: this partially overlaps with `find_struct_impl`\n+pub(crate) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {\n+    buf.push('\\n');\n+    let end = impl_def\n+        .assoc_item_list()\n+        .and_then(|it| it.r_curly_token())?\n+        .prev_sibling_or_token()?\n         .text_range()\n         .end();\n-    Some(start)\n+    Some(end)\n }\n \n // Generates the surrounding `impl Type { <code> }` including type and lifetime"}]}