{"sha": "1f031d95ded44337848f53e07aae05087ccf15f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMDMxZDk1ZGVkNDQzMzc4NDhmNTNlMDdhYWUwNTA4N2NjZjE1ZjE=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-04T09:19:52Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2021-03-04T14:10:57Z"}, "message": "Add regression test for `Vec::extend_from_within` leak", "tree": {"sha": "444453926e7276caff801e46e4696ab226246706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/444453926e7276caff801e46e4696ab226246706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f031d95ded44337848f53e07aae05087ccf15f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f031d95ded44337848f53e07aae05087ccf15f1", "html_url": "https://github.com/rust-lang/rust/commit/1f031d95ded44337848f53e07aae05087ccf15f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f031d95ded44337848f53e07aae05087ccf15f1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e9608596f14eba78b8ff0371f747f7513b523a", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e9608596f14eba78b8ff0371f747f7513b523a", "html_url": "https://github.com/rust-lang/rust/commit/84e9608596f14eba78b8ff0371f747f7513b523a"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "49758f672a89fd06512948f90b260849bb101e63", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f031d95ded44337848f53e07aae05087ccf15f1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f031d95ded44337848f53e07aae05087ccf15f1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1f031d95ded44337848f53e07aae05087ccf15f1", "patch": "@@ -1944,14 +1944,16 @@ impl<T, A: Allocator> Vec<T, A> {\n     pub fn split_at_spare_mut(&mut self) -> (&mut [T], &mut [MaybeUninit<T>]) {\n         // SAFETY:\n         // - len is ignored and so never changed\n-        let (init, spare, _) = unsafe{ self.split_at_spare_mut_with_len() };\n+        let (init, spare, _) = unsafe { self.split_at_spare_mut_with_len() };\n         (init, spare)\n     }\n \n     /// Safety: changing returned .2 (&mut usize) is considered the same as calling `.set_len(_)`.\n     ///\n     /// This method is used to have unique access to all vec parts at once in `extend_from_within`.\n-    unsafe fn split_at_spare_mut_with_len(&mut self) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n+    unsafe fn split_at_spare_mut_with_len(\n+        &mut self,\n+    ) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n         let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;\n@@ -1965,7 +1967,7 @@ impl<T, A: Allocator> Vec<T, A> {\n \n             (initialized, spare, &mut self.len)\n         }\n-    } \n+    }\n }\n \n impl<T: Clone, A: Allocator> Vec<T, A> {"}, {"sha": "1ba2315ca73eb4ba314099abcd811a8dc521d5d2", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1f031d95ded44337848f53e07aae05087ccf15f1/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f031d95ded44337848f53e07aae05087ccf15f1/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=1f031d95ded44337848f53e07aae05087ccf15f1", "patch": "@@ -7,6 +7,7 @@ use std::mem::{size_of, swap};\n use std::ops::Bound::*;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::rc::Rc;\n+use std::sync::atomic::{AtomicU32, Ordering};\n use std::vec::{Drain, IntoIter};\n \n struct DropCounter<'a> {\n@@ -2100,3 +2101,44 @@ fn test_extend_from_within() {\n \n     assert_eq!(v, [\"a\", \"b\", \"c\", \"b\", \"c\", \"a\", \"b\"]);\n }\n+\n+// Regression test for issue #82533\n+#[test]\n+fn test_extend_from_within_panicing_clone() {\n+    struct Panic<'dc> {\n+        drop_count: &'dc AtomicU32,\n+        aaaaa: bool,\n+    }\n+\n+    impl Clone for Panic<'_> {\n+        fn clone(&self) -> Self {\n+            if self.aaaaa {\n+                panic!(\"panic! at the clone\");\n+            }\n+\n+            Self { ..*self }\n+        }\n+    }\n+\n+    impl Drop for Panic<'_> {\n+        fn drop(&mut self) {\n+            self.drop_count.fetch_add(1, Ordering::SeqCst);\n+        }\n+    }\n+\n+    let count = core::sync::atomic::AtomicU32::new(0);\n+    let mut vec = vec![\n+        Panic { drop_count: &count, aaaaa: false },\n+        Panic { drop_count: &count, aaaaa: true },\n+        Panic { drop_count: &count, aaaaa: false },\n+    ];\n+\n+    // This should clone&append one Panic{..} at the end, and then panic while\n+    // cloning second Panic{..}. This means that `Panic::drop` should be called\n+    // 4 times (3 for items already in vector, 1 for just appended).\n+    //\n+    // Previously just appended item was leaked, making drop_count = 3, instead of 4.\n+    std::panic::catch_unwind(move || vec.extend_from_within(..)).unwrap_err();\n+\n+    assert_eq!(count.load(Ordering::SeqCst), 4);\n+}"}]}