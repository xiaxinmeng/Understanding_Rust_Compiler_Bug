{"sha": "269cf5026cdac6ff47f886a948e99101316d7091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OWNmNTAyNmNkYWM2ZmY0N2Y4ODZhOTQ4ZTk5MTAxMzE2ZDcwOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T21:01:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-28T21:01:07Z"}, "message": "Auto merge of #45540 - virgil-palanciuc:master, r=estebank\n\nAvoid repetition on \u201cuse of unstable library feature 'rustc_private'\u201d\n\nThis PR fixes the error by only emitting it when the span contains a real file (is not inside a macro) - and making sure it's emitted only once per span.\nThe first check was needed because spans-within-macros seem to differ a lot and \"fixing\" them to the real location is not trivial (and the method that does this is private to another module). It also feels like there always will be an error on import, with the real file name, so not sure there's a point to re-emit the same error at macro use.\n\nFix #44953.", "tree": {"sha": "cda80a57ee48dc8fbcdf330e20670482f483edd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda80a57ee48dc8fbcdf330e20670482f483edd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269cf5026cdac6ff47f886a948e99101316d7091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269cf5026cdac6ff47f886a948e99101316d7091", "html_url": "https://github.com/rust-lang/rust/commit/269cf5026cdac6ff47f886a948e99101316d7091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269cf5026cdac6ff47f886a948e99101316d7091/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6a1a9fb49f30e41316fb374b12301a3445ae8d", "html_url": "https://github.com/rust-lang/rust/commit/2e6a1a9fb49f30e41316fb374b12301a3445ae8d"}, {"sha": "bb0049bcd21ca8c9707207de4669fadfd7362367", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0049bcd21ca8c9707207de4669fadfd7362367", "html_url": "https://github.com/rust-lang/rust/commit/bb0049bcd21ca8c9707207de4669fadfd7362367"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "b30d5e384884e7701df9a0d5f938fb168d8249f6", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/269cf5026cdac6ff47f886a948e99101316d7091/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269cf5026cdac6ff47f886a948e99101316d7091/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=269cf5026cdac6ff47f886a948e99101316d7091", "patch": "@@ -18,8 +18,9 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n+use session::DiagnosticMessageId;\n use syntax::symbol::Symbol;\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n@@ -597,8 +598,29 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            feature.as_str(), &r),\n                     None => format!(\"use of unstable library feature '{}'\", &feature)\n                 };\n-                emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n-                                 GateIssue::Library(Some(issue)), &msg);\n+\n+\n+                let msp: MultiSpan = span.into();\n+                let cm = &self.sess.parse_sess.codemap();\n+                let span_key = msp.primary_span().and_then(|sp: Span|\n+                    if sp != DUMMY_SP {\n+                        let file = cm.lookup_char_pos(sp.lo()).file;\n+                        if file.name.starts_with(\"<\") && file.name.ends_with(\" macros>\") {\n+                            None\n+                        } else {\n+                            Some(span)\n+                        }\n+                    } else {\n+                        None\n+                    }\n+                );\n+\n+                let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n+                let fresh = self.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n+                if fresh {\n+                    emit_feature_err(&self.sess.parse_sess, &feature.as_str(), span,\n+                                     GateIssue::Library(Some(issue)), &msg);\n+                }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are"}, {"sha": "be35cc8e4a1c0e834d63bfc67935f5dfd433c37c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/269cf5026cdac6ff47f886a948e99101316d7091/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269cf5026cdac6ff47f886a948e99101316d7091/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=269cf5026cdac6ff47f886a948e99101316d7091", "patch": "@@ -75,10 +75,10 @@ pub struct Session {\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub buffered_lints: RefCell<Option<lint::LintBuffer>>,\n-    /// Set of (LintId, Option<Span>, message) tuples tracking lint\n+    /// Set of (DiagnosticId, Option<Span>, message) tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n-    /// in order to avoid redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Option<Span>, String)>>,\n+    /// in order to avoid redundantly verbose output (Issue #24690, #44953).\n+    pub one_time_diagnostics: RefCell<FxHashSet<(DiagnosticMessageId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n@@ -164,6 +164,13 @@ enum DiagnosticBuilderMethod {\n     // add more variants as needed to support one-time diagnostics\n }\n \n+/// Diagnostic message id - used in order to avoid emitting the same message more than once\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum DiagnosticMessageId {\n+    LintId(lint::LintId),\n+    StabilityId(u32)\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         match *self.crate_disambiguator.borrow() {\n@@ -360,7 +367,7 @@ impl Session {\n                 do_method()\n             },\n             _ => {\n-                let lint_id = lint::LintId::of(lint);\n+                let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n                 let id_span_message = (lint_id, span, message.to_owned());\n                 let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {"}]}