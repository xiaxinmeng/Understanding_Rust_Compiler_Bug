{"sha": "1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjFiNGFkNTA0ZmFiZDNiZGEwZjNhYjZmZmI4YTRjM2JlOTJmODE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-30T13:28:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:15Z"}, "message": "Simplify const propagator by removing unused code paths", "tree": {"sha": "03fc58f101144573051bf3136cdc969f304b01e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03fc58f101144573051bf3136cdc969f304b01e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53cACgkQpp+NIls6\n19lzSA//VT6CbLxssJ58yiDTXLZzo0Z1VSk+amoWm/29ROthxlZIpcawuHdDbLij\noakYtaUX3mCtnFM9UsuVUKgYxvTVdp74n72w+ClB9b/md5j7A1pAa000l7921IgE\nuegRQoHHZuGjyhW2sBcLMUT397zcNXqc3QoEfiV3cqsW0E+kLCJH0vUy0jPRz3JK\n6IukqL9BTLKt73QLrMhZXi7KuFmnSul59b68IQz0RcEfi2S8DVwPWZFJyhhyHxpE\nNWiWwX3kBOmlJiWmY1h3N1rwnYUusRGsZbGjGFczsEMpdqsKU5VEw6YGciSm9thb\ncgx7c5d55NZXmIjCjsv5OxoTGfxlqaecwCyPzeXEM5tEleotBDC6v4rgfIPW7J93\nOicGttSvH3TqeYjOyIv7dLiwd1S9YO1aG2u10mgM1sPIKfxJyMI7RYyVGXPjO8TT\ngRwasnxc9xKYrkXKhEmMwb57mx9rfiLadWWYOL9doKShhU1uREjVWKYauuUNgCuD\nNDfZ0zLPVzZrGiMtUjviyFbVygr62xXPkjKxXdX9ioJmJZefWSh5Qd5+V4aTjiPa\nEoNseuX8qgRZQ1tBqJt8E45DTETANYT80ns5uJ5H3uLrZa+UuvYdGqP721ulTeSr\n4/hnTRv9eF9oRA9NhJDcoxgx+M8QIlyXQqBOccxTPiMxu5jXPbM=\n=HFNv\n-----END PGP SIGNATURE-----", "payload": "tree 03fc58f101144573051bf3136cdc969f304b01e5\nparent 411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517318925 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494455 +0100\n\nSimplify const propagator by removing unused code paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81", "html_url": "https://github.com/rust-lang/rust/commit/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "url": "https://api.github.com/repos/rust-lang/rust/commits/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "html_url": "https://github.com/rust-lang/rust/commit/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af"}], "stats": {"total": 123, "additions": 52, "deletions": 71}, "files": [{"sha": "fc2a149cfe9409c47d29fc8a3710a0da08cae06c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 52, "deletions": 71, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1561b4ad504fabd3bda0f3ab6ffb8a4c3be92f81", "patch": "@@ -359,81 +359,62 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         kind: &TerminatorKind<'tcx>,\n-        _location: Location,\n+        location: Location,\n     ) {\n-        match kind {\n-            TerminatorKind::SwitchInt { discr: value, .. } |\n-            TerminatorKind::Yield { value, .. } |\n-            TerminatorKind::Assert { cond: value, .. } => {\n-                match value {\n-                    Operand::Constant(box Constant {\n-                        literal: Literal::Value {\n-                            value: &ty::Const {\n-                                val: ConstVal::Value(_),\n-                                ..\n-                            },\n-                        },\n-                        ..\n-                    }) => return,\n-                    _ => {},\n-                }\n-                if let Some(value) = self.eval_operand(value) {\n-                    if let TerminatorKind::Assert { expected, msg, .. } = kind {\n-                        if Value::ByVal(PrimVal::from_bool(*expected)) != value.0 {\n-                            let span = self.mir[block]\n-                                .terminator\n-                                .as_ref()\n-                                .unwrap()\n-                                .source_info\n-                                .span;\n-                            let node_id = self\n-                                .tcx\n-                                .hir\n-                                .as_local_node_id(self.source.def_id)\n-                                .expect(\"some part of a failing const eval must be local\");\n-                            let mut lint = self.tcx.struct_span_lint_node(\n-                                ::rustc::lint::builtin::CONST_ERR,\n-                                node_id,\n+        self.super_terminator_kind(block, kind, location);\n+        if let TerminatorKind::Assert { expected, msg, cond, .. } = kind {\n+            if let Some(value) = self.eval_operand(cond) {\n+                if Value::ByVal(PrimVal::from_bool(*expected)) != value.0 {\n+                    let span = self.mir[block]\n+                        .terminator\n+                        .as_ref()\n+                        .unwrap()\n+                        .source_info\n+                        .span;\n+                    let node_id = self\n+                        .tcx\n+                        .hir\n+                        .as_local_node_id(self.source.def_id)\n+                        .expect(\"some part of a failing const eval must be local\");\n+                    let mut lint = self.tcx.struct_span_lint_node(\n+                        ::rustc::lint::builtin::CONST_ERR,\n+                        node_id,\n+                        span,\n+                        \"constant evaluation error\",\n+                    );\n+                    use rustc::mir::AssertMessage::*;\n+                    match msg {\n+                        GeneratorResumedAfterReturn =>\n+                            lint.span_label(span, \"generator resumed after completion\"),\n+                        GeneratorResumedAfterPanic =>\n+                            lint.span_label(span, \"generator resumed after panicking\"),\n+                        Math(ref err) => lint.span_label(span, err.description()),\n+                        BoundsCheck { ref len, ref index } => {\n+                            let len = self.eval_operand(len).expect(\"len must be const\");\n+                            let len = match len.0 {\n+                                Value::ByVal(PrimVal::Bytes(n)) => n,\n+                                _ => bug!(\"const len not primitive: {:?}\", len),\n+                            };\n+                            let index = self\n+                                .eval_operand(index)\n+                                .expect(\"index must be const\");\n+                            let index = match index.0 {\n+                                Value::ByVal(PrimVal::Bytes(n)) => n,\n+                                _ => bug!(\"const index not primitive: {:?}\", index),\n+                            };\n+                            lint.span_label(\n                                 span,\n-                                \"constant evaluation error\",\n-                            );\n-                            use rustc::mir::AssertMessage::*;\n-                            match msg {\n-                                GeneratorResumedAfterReturn =>\n-                                    lint.span_label(span, \"generator resumed after completion\"),\n-                                GeneratorResumedAfterPanic =>\n-                                    lint.span_label(span, \"generator resumed after panicking\"),\n-                                Math(ref err) => lint.span_label(span, err.description()),\n-                                BoundsCheck { ref len, ref index } => {\n-                                    let len = self.eval_operand(len).expect(\"len must be const\");\n-                                    let len = match len.0 {\n-                                        Value::ByVal(PrimVal::Bytes(n)) => n,\n-                                        _ => bug!(\"const len not primitive: {:?}\", len),\n-                                    };\n-                                    let index = self\n-                                        .eval_operand(index)\n-                                        .expect(\"index must be const\");\n-                                    let index = match index.0 {\n-                                        Value::ByVal(PrimVal::Bytes(n)) => n,\n-                                        _ => bug!(\"const index not primitive: {:?}\", index),\n-                                    };\n-                                    lint.span_label(\n-                                        span,\n-                                        format!(\n-                                            \"index out of bounds: \\\n-                                            the len is {} but the index is {}\",\n-                                            len,\n-                                            index,\n-                                        ),\n-                                    )\n-                                },\n-                            }.emit();\n-                        }\n-                    }\n+                                format!(\n+                                    \"index out of bounds: \\\n+                                    the len is {} but the index is {}\",\n+                                    len,\n+                                    index,\n+                                ),\n+                            )\n+                        },\n+                    }.emit();\n                 }\n             }\n-            // FIXME: do this optimization for function calls\n-            _ => {},\n         }\n     }\n }"}]}