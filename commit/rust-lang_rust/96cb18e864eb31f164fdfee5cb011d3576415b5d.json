{"sha": "96cb18e864eb31f164fdfee5cb011d3576415b5d", "node_id": "C_kwDOAAsO6NoAKDk2Y2IxOGU4NjRlYjMxZjE2NGZkZmVlNWNiMDExZDM1NzY0MTViNWQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-27T17:52:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:48:55Z"}, "message": "Combine identical alias arms", "tree": {"sha": "ba2af016af5496f3086b0df0f3abee0fdedfd48b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba2af016af5496f3086b0df0f3abee0fdedfd48b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96cb18e864eb31f164fdfee5cb011d3576415b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96cb18e864eb31f164fdfee5cb011d3576415b5d", "html_url": "https://github.com/rust-lang/rust/commit/96cb18e864eb31f164fdfee5cb011d3576415b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96cb18e864eb31f164fdfee5cb011d3576415b5d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61adaf81873101587ffff4e1b8671acbc33d3df1", "url": "https://api.github.com/repos/rust-lang/rust/commits/61adaf81873101587ffff4e1b8671acbc33d3df1", "html_url": "https://github.com/rust-lang/rust/commit/61adaf81873101587ffff4e1b8671acbc33d3df1"}], "stats": {"total": 189, "additions": 69, "deletions": 120}, "files": [{"sha": "819c2678d6c4d4ccead480763760400e56cae706", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -411,9 +411,8 @@ fn push_debuginfo_type_name<'tcx>(\n         ty::Error(_)\n         | ty::Infer(_)\n         | ty::Placeholder(..)\n-        | ty::Alias(ty::Projection, ..)\n+        | ty::Alias(..)\n         | ty::Bound(..)\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::GeneratorWitness(..) => {\n             bug!(\n                 \"debuginfo: Trying to create type name for \\"}, {"sha": "498c008738793912e46e0b25afca0b8180a07d34", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -142,12 +142,11 @@ pub(crate) fn const_to_valtree_inner<'tcx>(\n         | ty::Foreign(..)\n         | ty::Infer(ty::FreshIntTy(_))\n         | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::Alias(ty::Projection, ..)\n+        // FIXME(oli-obk): we could look behind opaque types\n+        | ty::Alias(..)\n         | ty::Param(_)\n         | ty::Bound(..)\n         | ty::Placeholder(..)\n-        // FIXME(oli-obk): we could look behind opaque types\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::Infer(_)\n         // FIXME(oli-obk): we can probably encode closures just like structs\n         | ty::Closure(..)\n@@ -307,11 +306,10 @@ pub fn valtree_to_const_value<'tcx>(\n         | ty::Foreign(..)\n         | ty::Infer(ty::FreshIntTy(_))\n         | ty::Infer(ty::FreshFloatTy(_))\n-        | ty::Alias(ty::Projection, ..)\n+        | ty::Alias(..)\n         | ty::Param(_)\n         | ty::Bound(..)\n         | ty::Placeholder(..)\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::Infer(_)\n         | ty::Closure(..)\n         | ty::Generator(..)"}, {"sha": "9b56757eb3951a4ee201a538268f286f7b12edce", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -82,11 +82,9 @@ pub(crate) fn eval_nullary_intrinsic<'tcx>(\n             ty::Adt(ref adt, _) => {\n                 ConstValue::from_machine_usize(adt.variants().len() as u64, &tcx)\n             }\n-            ty::Alias(ty::Projection, _)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs: _ })\n-            | ty::Param(_)\n-            | ty::Placeholder(_)\n-            | ty::Infer(_) => throw_inval!(TooGeneric),\n+            ty::Alias(..) | ty::Param(_) | ty::Placeholder(_) | ty::Infer(_) => {\n+                throw_inval!(TooGeneric)\n+            }\n             ty::Bound(_, _) => bug!(\"bound ty during ctfe\"),\n             ty::Bool\n             | ty::Char"}, {"sha": "f905d3fb479a0b7e343c7dd187239f94f3543705", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -601,8 +601,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Param(..)\n-            | ty::Alias(ty::Opaque, ..)\n-            | ty::Alias(ty::Projection, ..)\n+            | ty::Alias(..)\n             | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }\n     }"}, {"sha": "dd65d4fd591e547a93089cff9fa0e0ac27690ece", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -58,8 +58,7 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             // Types with identity (print the module path).\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs })\n-            | ty::Alias(ty::Projection, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "6469f389bf91b313141ce01452fe74cb68b72f98", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -223,7 +223,7 @@ impl<'tcx> InherentCollect<'tcx> {\n             | ty::Tuple(..) => {\n                 self.check_primitive_impl(item.owner_id.def_id, self_ty, items, ty.span)\n             }\n-            ty::Alias(ty::Projection, ..) | ty::Alias(ty::Opaque, ..) | ty::Param(_) => {\n+            ty::Alias(..) | ty::Param(_) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n                     ty.span,"}, {"sha": "5e4d82b6fd5697ce31b095b0431a804f67d383f5", "filename": "compiler/rustc_hir_analysis/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fconstraints.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -249,14 +249,10 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_substs(current, def.did(), substs, variance);\n             }\n \n-            ty::Alias(ty::Projection, ref data) => {\n+            ty::Alias(_, ref data) => {\n                 self.add_constraints_from_invariant_substs(current, data.substs, variance);\n             }\n \n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs }) => {\n-                self.add_constraints_from_invariant_substs(current, substs, variance);\n-            }\n-\n             ty::Dynamic(data, r, _) => {\n                 // The type `Foo<T+'a>` is contravariant w/r/t `'a`:\n                 let contra = self.contravariant(variance);"}, {"sha": "ec5221379d2c9314f93dedab1163b409569203e6", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -453,10 +453,9 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::Dynamic(..)\n             | ty::Never\n             | ty::Tuple(..)\n-            | ty::Alias(ty::Projection, ..)\n+            | ty::Alias(..)\n             | ty::Foreign(..)\n-            | ty::Param(..)\n-            | ty::Alias(ty::Opaque, ..) => {\n+            | ty::Param(..) => {\n                 if t.flags().intersects(self.needs_canonical_flags) {\n                     t.super_fold_with(self)\n                 } else {"}, {"sha": "67e4554c4c7074b7ba400ecb080eddc381b58e93", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -589,8 +589,8 @@ impl<'tcx> InferCtxt<'tcx> {\n                         hidden_ty\n                     }\n                     // FIXME(RPITIT): This can go away when we move to associated types\n-                    ty::Alias(ty::Projection, proj)\n-                        if def_id.to_def_id() == proj.def_id && substs == proj.substs =>\n+                    ty::Alias(ty::Projection, ty::AliasTy { def_id: def_id2, substs: substs2 })\n+                        if def_id.to_def_id() == def_id2 && substs == substs2 =>\n                     {\n                         hidden_ty\n                     }"}, {"sha": "7f66b993646a32058461edd9b1063ea46a892475", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -349,7 +349,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 }\n             }\n \n-            ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..) => {\n+            ty::Alias(..) => {\n                 let normalized = tcx.normalize_erasing_regions(param_env, ty);\n                 if ty == normalized {\n                     Err(err)\n@@ -757,10 +757,9 @@ where\n                     }\n                 }\n \n-                ty::Alias(ty::Projection, _)\n+                ty::Alias(..)\n                 | ty::Bound(..)\n                 | ty::Placeholder(..)\n-                | ty::Alias(ty::Opaque, ..)\n                 | ty::Param(_)\n                 | ty::Infer(_)\n                 | ty::Error(_) => bug!(\"TyAndLayout::field: unexpected type `{}`\", this.ty),"}, {"sha": "3fad349bff8124a2f474dd73bcf105729175e9ce", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -275,10 +275,9 @@ fn characteristic_def_id_of_type_cached<'a>(\n         | ty::Uint(_)\n         | ty::Str\n         | ty::FnPtr(_)\n-        | ty::Alias(ty::Projection, _)\n+        | ty::Alias(..)\n         | ty::Placeholder(..)\n         | ty::Param(_)\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Error(_)"}, {"sha": "3c6800cf293dee25e44b9b807a7c14550330f8cf", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -651,12 +651,7 @@ impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n             }\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),\n             ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),\n-            ty::Alias(ty::Projection, data) => {\n-                ty::Alias(ty::Projection, data.try_fold_with(folder)?)\n-            }\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs: substs.try_fold_with(folder)? })\n-            }\n+            ty::Alias(kind, data) => ty::Alias(kind, data.try_fold_with(folder)?),\n \n             ty::Bool\n             | ty::Char\n@@ -701,10 +696,7 @@ impl<'tcx> TypeSuperVisitable<'tcx> for Ty<'tcx> {\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n-            ty::Alias(ty::Projection, ref data) => data.visit_with(visitor),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, ref substs }) => {\n-                substs.visit_with(visitor)\n-            }\n+            ty::Alias(_, ref data) => data.visit_with(visitor),\n \n             ty::Bool\n             | ty::Char"}, {"sha": "2f1e32900e5a521b9e0c7acde855703c029a5737", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -2047,10 +2047,7 @@ impl<'tcx> Ty<'tcx> {\n             ty::Adt(adt, _) if adt.is_enum() => adt.repr().discr_type().to_ty(tcx),\n             ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),\n \n-            ty::Param(_)\n-            | ty::Alias(ty::Projection, _)\n-            | ty::Alias(ty::Opaque, ..)\n-            | ty::Infer(ty::TyVar(_)) => {\n+            ty::Param(_) | ty::Alias(..) | ty::Infer(ty::TyVar(_)) => {\n                 let assoc_items = tcx.associated_item_def_ids(\n                     tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),\n                 );\n@@ -2130,7 +2127,7 @@ impl<'tcx> Ty<'tcx> {\n \n             // type parameters only have unit metadata if they're sized, so return true\n             // to make sure we double check this during confirmation\n-            ty::Param(_) |  ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..) => (tcx.types.unit, true),\n+            ty::Param(_) |  ty::Alias(..) => (tcx.types.unit, true),\n \n             ty::Infer(ty::TyVar(_))\n             | ty::Bound(..)\n@@ -2206,7 +2203,7 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Adt(def, _substs) => def.sized_constraint(tcx).0.is_empty(),\n \n-            ty::Alias(ty::Projection, _) | ty::Param(_) | ty::Alias(ty::Opaque, ..) => false,\n+            ty::Alias(..) | ty::Param(_) => false,\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n@@ -2262,9 +2259,12 @@ impl<'tcx> Ty<'tcx> {\n             ty::Generator(..) | ty::GeneratorWitness(..) => false,\n \n             // Might be, but not \"trivial\" so just giving the safe answer.\n-            ty::Adt(..) | ty::Closure(..) | ty::Alias(ty::Opaque, ..) => false,\n+            ty::Adt(..) | ty::Closure(..) => false,\n \n-            ty::Alias(ty::Projection, ..) | ty::Param(..) | ty::Infer(..) | ty::Error(..) => false,\n+            // Needs normalization or revealing to determine, so no is the safe answer.\n+            ty::Alias(..) => false,\n+\n+            ty::Param(..) | ty::Infer(..) | ty::Error(..) => false,\n \n             ty::Bound(..) | ty::Placeholder(..) => {\n                 bug!(\"`is_trivially_pure_clone_copy` applied to unexpected type: {:?}\", self);"}, {"sha": "b8a19e582c9dcf3fa9aec79f1fed5e16005b96fd", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -259,7 +259,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n                 ty::Tuple(_) => break,\n \n-                ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..) => {\n+                ty::Alias(..) => {\n                     let normalized = normalize(ty);\n                     if ty == normalized {\n                         return ty;\n@@ -332,8 +332,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                         break;\n                     }\n                 }\n-                (ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..), _)\n-                | (_, ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..)) => {\n+                (ty::Alias(..), _) | (_, ty::Alias(..)) => {\n                     // If either side is a projection, attempt to\n                     // progress via normalization. (Should be safe to\n                     // apply to both sides as normalization is\n@@ -938,10 +937,9 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n             | ty::Infer(_)\n-            | ty::Alias(ty::Opaque, ..)\n+            | ty::Alias(..)\n             | ty::Param(_)\n-            | ty::Placeholder(_)\n-            | ty::Alias(ty::Projection, _) => false,\n+            | ty::Placeholder(_) => false,\n         }\n     }\n \n@@ -978,10 +976,9 @@ impl<'tcx> Ty<'tcx> {\n             | ty::Generator(..)\n             | ty::GeneratorWitness(_)\n             | ty::Infer(_)\n-            | ty::Alias(ty::Opaque, ..)\n+            | ty::Alias(..)\n             | ty::Param(_)\n-            | ty::Placeholder(_)\n-            | ty::Alias(ty::Projection, _) => false,\n+            | ty::Placeholder(_) => false,\n         }\n     }\n \n@@ -1101,12 +1098,9 @@ impl<'tcx> Ty<'tcx> {\n             //\n             // FIXME(ecstaticmorse): Maybe we should `bug` here? This should probably only be\n             // called for known, fully-monomorphized types.\n-            ty::Alias(ty::Projection, _)\n-            | ty::Alias(ty::Opaque, ..)\n-            | ty::Param(_)\n-            | ty::Bound(..)\n-            | ty::Placeholder(_)\n-            | ty::Infer(_) => false,\n+            ty::Alias(..) | ty::Param(_) | ty::Bound(..) | ty::Placeholder(_) | ty::Infer(_) => {\n+                false\n+            }\n \n             ty::Foreign(_) | ty::GeneratorWitness(..) | ty::Error(_) => false,\n         }\n@@ -1237,11 +1231,10 @@ pub fn needs_drop_components<'tcx>(\n \n         // These require checking for `Copy` bounds or `Adt` destructors.\n         ty::Adt(..)\n-        | ty::Alias(ty::Projection, ..)\n+        | ty::Alias(..)\n         | ty::Param(_)\n         | ty::Bound(..)\n         | ty::Placeholder(..)\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::Infer(_)\n         | ty::Closure(..)\n         | ty::Generator(..) => Ok(smallvec![ty]),\n@@ -1265,13 +1258,12 @@ pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {\n         | ty::Never\n         | ty::Foreign(_) => true,\n \n-        ty::Alias(ty::Opaque, ..)\n+        ty::Alias(..)\n         | ty::Dynamic(..)\n         | ty::Error(_)\n         | ty::Bound(..)\n         | ty::Param(_)\n         | ty::Placeholder(_)\n-        | ty::Alias(ty::Projection, _)\n         | ty::Infer(_) => false,\n \n         // Not trivial because they have components, and instead of looking inside,"}, {"sha": "b302572f3cabdf3db89d88a04f8d3ba38e065f2b", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -654,7 +654,7 @@ impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n-            if let ty::Alias(ty::Projection, ..) | ty::Alias(ty::Opaque, ..) = t.kind() {\n+            if let ty::Alias(..) = t.kind() {\n                 return ControlFlow::CONTINUE;\n             }\n         }"}, {"sha": "34dbb6e9f68ea1cf6fe295448322edf3f532cea9", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -165,7 +165,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 stack.push(ty.into());\n                 stack.push(lt.into());\n             }\n-            ty::Alias(ty::Projection, data) => {\n+            ty::Alias(_, data) => {\n                 stack.extend(data.substs.iter().rev());\n             }\n             ty::Dynamic(obj, lt, _) => {\n@@ -188,7 +188,6 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 }));\n             }\n             ty::Adt(_, substs)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs })\n             | ty::Closure(_, substs)\n             | ty::Generator(_, substs, _)\n             | ty::FnDef(_, substs) => {"}, {"sha": "281b2d88f483bd66bd16e2994fad7df908f79619", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -216,8 +216,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs })\n-            | ty::Alias(ty::Projection, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n "}, {"sha": "c9ddb084d63a12d2f5198bae6c2f19ec3493a12b", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -646,10 +646,9 @@ fn encode_ty<'tcx>(\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n         | ty::Infer(..)\n-        | ty::Alias(ty::Opaque, ..)\n+        | ty::Alias(..)\n         | ty::Param(..)\n-        | ty::Placeholder(..)\n-        | ty::Alias(ty::Projection, ..) => {\n+        | ty::Placeholder(..) => {\n             bug!(\"encode_ty: unexpected `{:?}`\", ty.kind());\n         }\n     };\n@@ -799,10 +798,9 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n         | ty::Error(..)\n         | ty::GeneratorWitness(..)\n         | ty::Infer(..)\n-        | ty::Alias(ty::Opaque, ..)\n+        | ty::Alias(..)\n         | ty::Param(..)\n-        | ty::Placeholder(..)\n-        | ty::Alias(ty::Projection, ..) => {\n+        | ty::Placeholder(..) => {\n             bug!(\"transform_ty: unexpected `{:?}`\", ty.kind());\n         }\n     }"}, {"sha": "b7f055d9146a05c30dc41af17d8c5ebe0e34c938", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -439,8 +439,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n             // Mangle all nominal types as paths.\n             ty::Adt(ty::AdtDef(Interned(&ty::AdtDefData { did: def_id, .. }, _)), substs)\n             | ty::FnDef(def_id, substs)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs })\n-            | ty::Alias(ty::Projection, ty::AliasTy { def_id, substs })\n+            | ty::Alias(_, ty::AliasTy { def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;"}, {"sha": "f016fa0a2e672c264f4a6c0bb716878240df60ca", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -1620,8 +1620,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n                          // type parameters, opaques, and unnormalized projections have pointer\n                         // metadata if they're known (e.g. by the param_env) to be sized\n                         ty::Param(_)\n-                        | ty::Alias(ty::Projection, ..)\n-                        | ty::Alias(ty::Opaque, ..)\n+                        | ty::Alias(..)\n                         | ty::Bound(..)\n                         | ty::Placeholder(..)\n                         | ty::Infer(..)\n@@ -1675,7 +1674,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n \n                         // type parameters, opaques, and unnormalized projections have pointer\n                         // metadata if they're known (e.g. by the param_env) to be sized\n-                        ty::Param(_) | ty::Alias(ty::Projection, ..) | ty::Alias(ty::Opaque, ..)\n+                        ty::Param(_) | ty::Alias(..)\n                             if selcx.infcx.predicate_must_hold_modulo_regions(\n                                 &obligation.with(\n                                     selcx.tcx(),\n@@ -1691,8 +1690,7 @@ fn assemble_candidates_from_impls<'cx, 'tcx>(\n \n                         // FIXME(compiler-errors): are Bound and Placeholder types ever known sized?\n                         ty::Param(_)\n-                        | ty::Alias(ty::Projection, ..)\n-                        | ty::Alias(ty::Opaque, ..)\n+                        | ty::Alias(..)\n                         | ty::Bound(..)\n                         | ty::Placeholder(..)\n                         | ty::Infer(..)"}, {"sha": "0f21813bc40ae1a85dfd1185f7199ecd2eec708a", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -62,9 +62,8 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n \n         // The following *might* require a destructor: needs deeper inspection.\n         ty::Dynamic(..)\n-        | ty::Alias(ty::Projection, ..)\n+        | ty::Alias(..)\n         | ty::Param(_)\n-        | ty::Alias(ty::Opaque, ..)\n         | ty::Placeholder(..)\n         | ty::Infer(_)\n         | ty::Bound(..)"}, {"sha": "829d4f60986054141a68d95400b1f34746e3df28", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -138,7 +138,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n-            ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..) => {}\n+            ty::Alias(..) => {}\n             ty::Infer(ty::TyVar(_)) => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -734,13 +734,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty());\n         match self_ty.skip_binder().kind() {\n-            ty::Alias(ty::Opaque, ..)\n+            ty::Alias(..)\n             | ty::Dynamic(..)\n             | ty::Error(_)\n             | ty::Bound(..)\n             | ty::Param(_)\n-            | ty::Placeholder(_)\n-            | ty::Alias(ty::Projection, _) => {\n+            | ty::Placeholder(_) => {\n                 // We don't know if these are `~const Destruct`, at least\n                 // not structurally... so don't push a candidate.\n             }\n@@ -826,8 +825,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Generator(_, _, _)\n             | ty::GeneratorWitness(_)\n             | ty::Never\n-            | ty::Alias(ty::Projection, _)\n-            | ty::Alias(ty::Opaque, ty::AliasTy { def_id: _, substs: _ })\n+            | ty::Alias(..)\n             | ty::Param(_)\n             | ty::Bound(_, _)\n             | ty::Error(_)"}, {"sha": "85456853ce08c66cffd744c7112974852a37b043", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -155,8 +155,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let placeholder_self_ty = placeholder_trait_predicate.self_ty();\n         let placeholder_trait_predicate = ty::Binder::dummy(placeholder_trait_predicate);\n         let (def_id, substs) = match *placeholder_self_ty.kind() {\n-            ty::Alias(ty::Projection, proj) => (proj.def_id, proj.substs),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => (def_id, substs),\n+            ty::Alias(_, ty::AliasTy { def_id, substs }) => (def_id, substs),\n             _ => bug!(\"projection candidate for unexpected type: {:?}\", placeholder_self_ty),\n         };\n "}, {"sha": "115897851d67317e8ad4670714e864e4ae28131c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -1595,8 +1595,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let tcx = self.infcx.tcx;\n         let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {\n-            ty::Alias(ty::Projection, ref data) => (data.def_id, data.substs),\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => (def_id, substs),\n+            ty::Alias(_, ty::AliasTy { def_id, substs }) => (def_id, substs),\n             _ => {\n                 span_bug!(\n                     obligation.cause.span,\n@@ -2067,7 +2066,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }))\n             }\n \n-            ty::Alias(ty::Projection, _) | ty::Param(_) | ty::Alias(ty::Opaque, ..) => None,\n+            ty::Alias(..) | ty::Param(_) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n             ty::Placeholder(..)\n@@ -2167,10 +2166,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Adt(..)\n-            | ty::Alias(ty::Projection, ..)\n-            | ty::Param(..)\n-            | ty::Alias(ty::Opaque, ..) => {\n+            ty::Adt(..) | ty::Alias(..) | ty::Param(..) => {\n                 // Fallback to whatever user-defined impls exist in this case.\n                 None\n             }"}, {"sha": "892a7afd799c73c64ff0a5c6ba5bbf156b68fa9e", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -95,10 +95,7 @@ impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n             ty::Foreign(_) => {\n                 return ControlFlow::Break(ty);\n             }\n-            ty::Alias(ty::Opaque, ..) => {\n-                return ControlFlow::Break(ty);\n-            }\n-            ty::Alias(ty::Projection, ..) => {\n+            ty::Alias(..) => {\n                 return ControlFlow::Break(ty);\n             }\n             ty::Closure(..) => {"}, {"sha": "3f661ce69235caaf0cb69c8df90277e9fdbfb0be", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -112,7 +112,7 @@ fn dropck_outlives<'tcx>(\n \n                     // A projection that we couldn't resolve - it\n                     // might have a destructor.\n-                    ty::Alias(ty::Projection, ..) | ty::Alias(ty::Opaque, ..) => {\n+                    ty::Alias(..) => {\n                         result.kinds.push(ty.into());\n                     }\n \n@@ -268,7 +268,7 @@ fn dtorck_constraint_for_ty<'tcx>(\n         }\n \n         // Types that can't be resolved. Pass them forward.\n-        ty::Alias(ty::Projection, ..) | ty::Alias(ty::Opaque, ..) | ty::Param(..) => {\n+        ty::Alias(..) | ty::Param(..) => {\n             constraints.dtorck_types.push(ty);\n         }\n "}, {"sha": "9589342b3c73f6cf981055828db383b439eba538", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -444,7 +444,7 @@ fn layout_of_uncached<'tcx>(\n         }\n \n         // Types with no meaningful known layout.\n-        ty::Alias(ty::Projection, _) | ty::Alias(ty::Opaque, ..) => {\n+        ty::Alias(..) => {\n             // NOTE(eddyb) `layout_of` query should've normalized these away,\n             // if that was possible, so there's no reason to try again here.\n             return Err(LayoutError::Unknown(ty));"}, {"sha": "0df060fc5fb71eae719d70216303c22e90f8af17", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -152,10 +152,7 @@ where\n                             queue_type(self, required);\n                         }\n                     }\n-                    ty::Array(..)\n-                    | ty::Alias(ty::Opaque, ..)\n-                    | ty::Alias(ty::Projection, ..)\n-                    | ty::Param(_) => {\n+                    ty::Array(..) | ty::Alias(..) | ty::Param(_) => {\n                         if ty == component {\n                             // Return the type to the caller: they may be able\n                             // to normalize further than we can."}, {"sha": "e9ffbca96280d85503651104987002c0d733310e", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cb18e864eb31f164fdfee5cb011d3576415b5d/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=96cb18e864eb31f164fdfee5cb011d3576415b5d", "patch": "@@ -636,11 +636,11 @@ where\n             18 => Never,\n             19 => Tuple(Decodable::decode(d)),\n             20 => Alias(Decodable::decode(d), Decodable::decode(d)),\n-            22 => Param(Decodable::decode(d)),\n-            23 => Bound(Decodable::decode(d), Decodable::decode(d)),\n-            24 => Placeholder(Decodable::decode(d)),\n-            25 => Infer(Decodable::decode(d)),\n-            26 => Error(Decodable::decode(d)),\n+            21 => Param(Decodable::decode(d)),\n+            22 => Bound(Decodable::decode(d), Decodable::decode(d)),\n+            23 => Placeholder(Decodable::decode(d)),\n+            24 => Infer(Decodable::decode(d)),\n+            25 => Error(Decodable::decode(d)),\n             _ => panic!(\n                 \"{}\",\n                 format!("}]}