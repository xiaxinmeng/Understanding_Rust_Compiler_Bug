{"sha": "f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "node_id": "C_kwDOAAsO6NoAKGYyYWU5ZTU4MGExMTdmYmJjZGJhMjlmMWExYzg3YzkzYTUyMGNmNTg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T16:22:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T16:22:09Z"}, "message": "Auto merge of #2721 - a-b-c-1-2-3:fix-pagesize, r=RalfJung\n\nAllow configurable and platform-specific page sizes\n\nThis fixes #2644 by setting platform-default page sizes along with a command line flag to override size to a specific value (e.g. in the case of aarch64 Linux on M1 silicon). There's still some code cleanup to be done and tests need to be added but I'm opening this for now.", "tree": {"sha": "ff7af3a0738fd21bf9df633993ceec93a4e13770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7af3a0738fd21bf9df633993ceec93a4e13770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "html_url": "https://github.com/rust-lang/rust/commit/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d4dd6e6291e93f58c8b1b41938a652f9051ed84", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4dd6e6291e93f58c8b1b41938a652f9051ed84", "html_url": "https://github.com/rust-lang/rust/commit/6d4dd6e6291e93f58c8b1b41938a652f9051ed84"}, {"sha": "7949f21cbe7625a78597575468d0974f3c599daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/7949f21cbe7625a78597575468d0974f3c599daa", "html_url": "https://github.com/rust-lang/rust/commit/7949f21cbe7625a78597575468d0974f3c599daa"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "909e5bd510dede3c9b1a1a93515611aba8807554", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -399,6 +399,8 @@ to Miri failing to detect cases of undefined behavior in a program.\n * `-Zmiri-track-weak-memory-loads` shows a backtrace when weak memory emulation returns an outdated\n   value from a load. This can help diagnose problems that disappear under\n   `-Zmiri-disable-weak-memory-emulation`.\n+* `-Zmiri-force-page-size=<num>` overrides the default page size for an architecture, in multiples of 1k.\n+  `4` is default for most targets. This value should always be a power of 2 and nonzero.\n \n [function ABI]: https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier\n "}, {"sha": "8c01748613cf8de723387ee7455487ef882b36df", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -512,6 +512,18 @@ fn main() {\n             };\n \n             miri_config.num_cpus = num_cpus;\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-force-page-size=\") {\n+            let page_size = match param.parse::<u64>() {\n+                Ok(i) =>\n+                    if i.is_power_of_two() {\n+                        i * 1024\n+                    } else {\n+                        show_error!(\"-Zmiri-force-page-size requires a power of 2: {}\", i)\n+                    },\n+                Err(err) => show_error!(\"-Zmiri-force-page-size requires a `u64`: {}\", err),\n+            };\n+\n+            miri_config.page_size = Some(page_size);\n         } else {\n             // Forward to rustc.\n             rustc_args.push(arg);"}, {"sha": "9d1574b3188df4e51f4438f83d335a1422e90fed", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -143,6 +143,8 @@ pub struct MiriConfig {\n     pub gc_interval: u32,\n     /// The number of CPUs to be reported by miri.\n     pub num_cpus: u32,\n+    /// Requires Miri to emulate pages of a certain size\n+    pub page_size: Option<u64>,\n }\n \n impl Default for MiriConfig {\n@@ -176,6 +178,7 @@ impl Default for MiriConfig {\n             external_so_file: None,\n             gc_interval: 10_000,\n             num_cpus: 1,\n+            page_size: None,\n         }\n     }\n }"}, {"sha": "618cf9df7f3f0f54e9e28dc71046965d3e3fc5cb", "filename": "src/tools/miri/src/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -51,12 +51,12 @@ impl VisitTags for GlobalStateInner {\n }\n \n impl GlobalStateInner {\n-    pub fn new(config: &MiriConfig) -> Self {\n+    pub fn new(config: &MiriConfig, stack_addr: u64) -> Self {\n         GlobalStateInner {\n             int_to_ptr_map: Vec::default(),\n             base_addr: FxHashMap::default(),\n             exposed: FxHashSet::default(),\n-            next_base_addr: STACK_ADDR,\n+            next_base_addr: stack_addr,\n             provenance_mode: config.provenance_mode,\n         }\n     }"}, {"sha": "d65bd10e6ffd21cb13676a32a82ae51aa4943234", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -107,7 +107,7 @@ pub use crate::helpers::EvalContextExt as _;\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n     AllocExtra, FrameExtra, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind,\n-    PrimitiveLayouts, Provenance, ProvenanceExtra, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    PrimitiveLayouts, Provenance, ProvenanceExtra,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as _;"}, {"sha": "72f71db34b6c377a4efbd85f3fcd7b807811ffcc", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -31,11 +31,6 @@ use crate::{\n     *,\n };\n \n-// Some global facts about the emulated machine.\n-pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n-pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n-pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n-\n /// Extra data stored with each stack frame\n pub struct FrameExtra<'tcx> {\n     /// Extra data for Stacked Borrows.\n@@ -469,6 +464,10 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) since_gc: u32,\n     /// The number of CPUs to be reported by miri.\n     pub(crate) num_cpus: u32,\n+    /// Determines Miri's page size and associated values\n+    pub(crate) page_size: u64,\n+    pub(crate) stack_addr: u64,\n+    pub(crate) stack_size: u64,\n }\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n@@ -482,11 +481,31 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n         let rng = StdRng::seed_from_u64(config.seed.unwrap_or(0));\n         let borrow_tracker = config.borrow_tracker.map(|bt| bt.instanciate_global_state(config));\n         let data_race = config.data_race_detector.then(|| data_race::GlobalState::new(config));\n+        let page_size = if let Some(page_size) = config.page_size {\n+            page_size\n+        } else {\n+            let target = &layout_cx.tcx.sess.target;\n+            match target.arch.as_ref() {\n+                \"wasm32\" | \"wasm64\" => 64 * 1024, // https://webassembly.github.io/spec/core/exec/runtime.html#memory-instances\n+                \"aarch64\" =>\n+                    if target.options.vendor.as_ref() == \"apple\" {\n+                        // No \"definitive\" source, but see:\n+                        // https://www.wwdcnotes.com/notes/wwdc20/10214/\n+                        // https://github.com/ziglang/zig/issues/11308 etc.\n+                        16 * 1024\n+                    } else {\n+                        4 * 1024\n+                    },\n+                _ => 4 * 1024,\n+            }\n+        };\n+        let stack_addr = page_size * 32;\n+        let stack_size = page_size * 16;\n         MiriMachine {\n             tcx: layout_cx.tcx,\n             borrow_tracker,\n             data_race,\n-            intptrcast: RefCell::new(intptrcast::GlobalStateInner::new(config)),\n+            intptrcast: RefCell::new(intptrcast::GlobalStateInner::new(config, stack_addr)),\n             // `env_vars` depends on a full interpreter so we cannot properly initialize it yet.\n             env_vars: EnvVars::default(),\n             main_fn_ret_place: None,\n@@ -548,6 +567,9 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             gc_interval: config.gc_interval,\n             since_gc: 0,\n             num_cpus: config.num_cpus,\n+            page_size,\n+            stack_addr,\n+            stack_size,\n         }\n     }\n \n@@ -692,6 +714,9 @@ impl VisitTags for MiriMachine<'_, '_> {\n             gc_interval: _,\n             since_gc: _,\n             num_cpus: _,\n+            page_size: _,\n+            stack_addr: _,\n+            stack_size: _,\n         } = self;\n \n         threads.visit_tags(visit);"}, {"sha": "e851d6d5139ce5a666e23ae54003d95f51c18aa1", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -234,7 +234,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // FIXME: Which of these are POSIX, and which are GNU/Linux?\n                 // At least the names seem to all also exist on macOS.\n                 let sysconfs: &[(&str, fn(&MiriInterpCx<'_, '_>) -> Scalar<Provenance>)] = &[\n-                    (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n+                    (\"_SC_PAGESIZE\", |this| Scalar::from_int(this.machine.page_size, this.pointer_size())),\n                     (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n                     (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n                     // 512 seems to be a reasonable default. The value is not critical, in\n@@ -496,7 +496,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [_attr, guard_size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let guard_size = this.deref_operand(guard_size)?;\n                 let guard_size_layout = this.libc_ty_layout(\"size_t\")?;\n-                this.write_scalar(Scalar::from_uint(crate::PAGE_SIZE, guard_size_layout.size), &guard_size.into())?;\n+                this.write_scalar(Scalar::from_uint(this.machine.page_size, guard_size_layout.size), &guard_size.into())?;\n \n                 // Return success (`0`).\n                 this.write_null(dest)?;\n@@ -525,11 +525,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let size_place = this.deref_operand(size_place)?;\n \n                 this.write_scalar(\n-                    Scalar::from_uint(STACK_ADDR, this.pointer_size()),\n+                    Scalar::from_uint(this.machine.stack_addr, this.pointer_size()),\n                     &addr_place.into(),\n                 )?;\n                 this.write_scalar(\n-                    Scalar::from_uint(STACK_SIZE, this.pointer_size()),\n+                    Scalar::from_uint(this.machine.stack_size, this.pointer_size()),\n                     &size_place.into(),\n                 )?;\n "}, {"sha": "282bfc8024f55464d3381dddcaf28f249e6ff269", "filename": "src/tools/miri/src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -162,13 +162,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"pthread_get_stackaddr_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n-                let stack_addr = Scalar::from_uint(STACK_ADDR, this.pointer_size());\n+                let stack_addr = Scalar::from_uint(this.machine.stack_addr, this.pointer_size());\n                 this.write_scalar(stack_addr, dest)?;\n             }\n             \"pthread_get_stacksize_np\" => {\n                 let [thread] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 this.read_scalar(thread)?.to_machine_usize(this)?;\n-                let stack_size = Scalar::from_uint(STACK_SIZE, this.pointer_size());\n+                let stack_size = Scalar::from_uint(this.machine.stack_size, this.pointer_size());\n                 this.write_scalar(stack_size, dest)?;\n             }\n "}, {"sha": "05ce81b71a47dcd8a80872920ea0b09f761a4a90", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -158,7 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // Set page size.\n                 let page_size = system_info.offset(field_offsets[2], dword_layout, &this.tcx)?;\n                 this.write_scalar(\n-                    Scalar::from_int(PAGE_SIZE, dword_layout.size),\n+                    Scalar::from_int(this.machine.page_size, dword_layout.size),\n                     &page_size.into(),\n                 )?;\n                 // Set number of processors."}, {"sha": "fb060317538d38d266905c976c9309ff3c6ac8c4", "filename": "src/tools/miri/tests/pass-dep/page_size.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -3,4 +3,17 @@ fn main() {\n \n     // In particular, this checks that it is not 0.\n     assert!(page_size.is_power_of_two(), \"page size not a power of two: {}\", page_size);\n+    // Most architectures have 4k pages by default\n+    #[cfg(not(any(\n+        target_arch = \"wasm32\",\n+        target_arch = \"wasm64\",\n+        all(target_arch = \"aarch64\", target_vendor = \"apple\")\n+    )))]\n+    assert!(page_size == 4 * 1024, \"non-4k default page size: {}\", page_size);\n+    // ... except aarch64-apple with 16k\n+    #[cfg(all(target_arch = \"aarch64\", target_vendor = \"apple\"))]\n+    assert!(page_size == 16 * 1024, \"aarch64 apple reports non-16k page size: {}\", page_size);\n+    // ... and wasm with 64k\n+    #[cfg(any(target_arch = \"wasm32\", target_arch = \"wasm64\"))]\n+    assert!(page_size == 64 * 1024, \"wasm reports non-64k page size: {}\", page_size);\n }"}, {"sha": "68858f38759a60461dbad4c763f780c7fd94aec3", "filename": "src/tools/miri/tests/pass-dep/page_size_override.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size_override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ae9e580a117fbbcdba29f1a1c87c93a520cf58/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size_override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fpage_size_override.rs?ref=f2ae9e580a117fbbcdba29f1a1c87c93a520cf58", "patch": "@@ -0,0 +1,7 @@\n+//@compile-flags: -Zmiri-force-page-size=8\n+\n+fn main() {\n+    let page_size = page_size::get();\n+\n+    assert!(page_size == 8 * 1024, \"8k page size override not respected: {}\", page_size);\n+}"}]}