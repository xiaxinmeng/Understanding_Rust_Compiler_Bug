{"sha": "77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3YjQwOWE2NzRmNjJlM2JlMTNlYzkzMzliNWM4MjcyYzliNWMwYTk=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-17T06:54:48Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2016-04-17T23:56:01Z"}, "message": "Reachability check cross-crate links", "tree": {"sha": "bf3d245e3587f881f9d94a8c5d9b1dbabdf9a083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf3d245e3587f881f9d94a8c5d9b1dbabdf9a083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "html_url": "https://github.com/rust-lang/rust/commit/77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfad7ad947a9b6d6d5117c19618b1d230064dc73", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfad7ad947a9b6d6d5117c19618b1d230064dc73", "html_url": "https://github.com/rust-lang/rust/commit/cfad7ad947a9b6d6d5117c19618b1d230064dc73"}], "stats": {"total": 113, "additions": 83, "deletions": 30}, "files": [{"sha": "a178f071f6cbbfe8fb04d2c07ac9cc59fe8b5377", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -26,7 +26,7 @@ use rustc::middle::stability;\n \n use rustc_const_eval::lookup_const_by_id;\n \n-use core::DocContext;\n+use core::{DocContext, DocAccessLevels};\n use doctree;\n use clean::{self, GetDefId};\n \n@@ -227,15 +227,6 @@ fn build_type(cx: &DocContext, tcx: &TyCtxt, did: DefId) -> clean::ItemEnum {\n     }, false)\n }\n \n-fn is_item_doc_reachable(cx: &DocContext, did: DefId) -> bool {\n-    use ::visit_lib::LibEmbargoVisitor;\n-\n-    if cx.analyzed_crates.borrow_mut().insert(did.krate) {\n-        LibEmbargoVisitor::new(cx).visit_lib(did.krate);\n-    }\n-    cx.access_levels.borrow().is_public(did)\n-}\n-\n pub fn build_impls(cx: &DocContext,\n                    tcx: &TyCtxt,\n                    did: DefId) -> Vec<clean::Item> {\n@@ -309,7 +300,7 @@ pub fn build_impl(cx: &DocContext,\n     // Only inline impl if the implemented trait is\n     // reachable in rustdoc generated documentation\n     if let Some(traitref) = associated_trait {\n-        if !is_item_doc_reachable(cx, traitref.def_id) {\n+        if !cx.access_levels.borrow().is_doc_reachable(traitref.def_id) {\n             return\n         }\n     }\n@@ -341,7 +332,7 @@ pub fn build_impl(cx: &DocContext,\n     // Only inline impl if the implementing type is\n     // reachable in rustdoc generated documentation\n     if let Some(did) = for_.def_id() {\n-        if !is_item_doc_reachable(cx, did) {\n+        if !cx.access_levels.borrow().is_doc_reachable(did) {\n             return\n         }\n     }"}, {"sha": "070b3ca90891726d9300b9f89bb30f0f07f00251", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -133,6 +133,7 @@ struct CrateNum(ast::CrateNum);\n impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use rustc::session::config::Input;\n+        use ::visit_lib::LibEmbargoVisitor;\n \n         if let Some(t) = cx.tcx_opt() {\n             cx.deref_trait_did.set(t.lang_items.deref_trait());\n@@ -142,6 +143,10 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n         let mut externs = Vec::new();\n         for cnum in cx.sess().cstore.crates() {\n             externs.push((cnum, CrateNum(cnum).clean(cx)));\n+            if cx.tcx_opt().is_some() {\n+                // Analyze doc-reachability for extern items\n+                LibEmbargoVisitor::new(cx).visit_lib(cnum);\n+            }\n         }\n         externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n "}, {"sha": "b7c60b8a524c0881780a8bc20253a1c01a856527", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -14,7 +14,6 @@ use rustc_driver::{driver, target_features, abort_on_err};\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n-use rustc::middle::cstore::LOCAL_CRATE;\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir::map as hir_map;\n@@ -30,7 +29,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::{HashMap, HashSet};\n+use std::collections::HashMap;\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -47,6 +46,7 @@ pub enum MaybeTyped<'a, 'tcx: 'a> {\n     NotTyped(&'a session::Session)\n }\n \n+pub type Externs = HashMap<String, Vec<String>>;\n pub type ExternalPaths = HashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n pub struct DocContext<'a, 'tcx: 'a> {\n@@ -55,8 +55,6 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub input: Input,\n     pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n-    /// Crates which have already been processed for `Self.access_levels`\n-    pub analyzed_crates: RefCell<HashSet<ast::CrateNum>>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n     // the access levels from crateanalysis.\n@@ -89,7 +87,16 @@ impl<'b, 'tcx> DocContext<'b, 'tcx> {\n     }\n }\n \n-pub type Externs = HashMap<String, Vec<String>>;\n+pub trait DocAccessLevels {\n+    fn is_doc_reachable(&self, DefId) -> bool;\n+}\n+\n+impl DocAccessLevels for AccessLevels<DefId> {\n+    fn is_doc_reachable(&self, did: DefId) -> bool {\n+        self.is_public(did)\n+    }\n+}\n+\n \n pub fn run_core(search_paths: SearchPaths,\n                 cfgs: Vec<String>,\n@@ -172,16 +179,13 @@ pub fn run_core(search_paths: SearchPaths,\n                                   .map(|(k, v)| (tcx.map.local_def_id(k), v))\n                                   .collect()\n         };\n-        let mut analyzed_crates = HashSet::new();\n-        analyzed_crates.insert(LOCAL_CRATE);\n \n         let ctxt = DocContext {\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n             all_crate_impls: RefCell::new(HashMap::new()),\n             deref_trait_did: Cell::new(None),\n-            analyzed_crates: RefCell::new(analyzed_crates),\n             access_levels: RefCell::new(access_levels),\n             external_traits: RefCell::new(HashMap::new()),\n             renderinfo: RefCell::new(Default::default()),"}, {"sha": "39be00b61cd667a36b64967686cca618ad794850", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -24,6 +24,7 @@ use syntax::abi::Abi;\n use rustc::hir;\n \n use clean;\n+use core::DocAccessLevels;\n use html::item_type::ItemType;\n use html::render;\n use html::render::{cache, CURRENT_LOCATION_KEY};\n@@ -298,6 +299,9 @@ pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let mut url = if did.is_local() || cache.inlined.contains(&did) {\n         repeat(\"../\").take(loc.len()).collect::<String>()\n     } else {\n+        if !cache.access_levels.is_doc_reachable(did) {\n+            return None\n+        }\n         match cache.extern_locations[&did.krate] {\n             (_, render::Remote(ref s)) => s.to_string(),\n             (_, render::Local) => repeat(\"../\").take(loc.len()).collect(),"}, {"sha": "7dcbb08a4ecf8e45530f2c080c6de0c3d91ab705", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -246,17 +246,18 @@ pub struct Cache {\n     /// Set of definitions which have been inlined from external crates.\n     pub inlined: HashSet<DefId>,\n \n+    // Note that external items for which `doc(hidden)` applies to are shown as\n+    // non-reachable while local items aren't. This is because we're reusing\n+    // the access levels from crateanalysis.\n+    pub access_levels: Arc<AccessLevels<DefId>>,\n+\n     // Private fields only used when initially crawling a crate to build a cache\n \n     stack: Vec<String>,\n     parent_stack: Vec<DefId>,\n     parent_is_trait_impl: bool,\n     search_index: Vec<IndexItem>,\n     stripped_mod: bool,\n-    // Note that external items for which `doc(hidden)` applies to are shown as\n-    // non-reachable while local items aren't. This is because we're reusing\n-    // the access levels from crateanalysis.\n-    access_levels: Arc<AccessLevels<DefId>>,\n     deref_trait_did: Option<DefId>,\n \n     // In rare case where a structure is defined in one module but implemented"}, {"sha": "5a7050fb42f3045a8115d0ecd616f27247e60da3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::{HashMap, HashSet};\n+use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -111,7 +111,6 @@ pub fn run(input: &str,\n         external_traits: RefCell::new(HashMap::new()),\n         all_crate_impls: RefCell::new(HashMap::new()),\n         deref_trait_did: Cell::new(None),\n-        analyzed_crates: RefCell::new(HashSet::new()),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),\n     };"}, {"sha": "f56f4c306f90a540451568994f4ce1ee2e8aef8f", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -19,8 +19,7 @@ use std::cell::RefMut;\n \n use clean::{Attributes, Clean};\n \n-// FIXME: since this is only used for cross-crate impl inlining this only\n-//        handles traits and items for which traits can be implemented\n+// FIXME: this may not be exhaustive, but is sufficient for rustdocs current uses\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n@@ -69,11 +68,16 @@ impl<'a, 'b, 'tcx> LibEmbargoVisitor<'a, 'b, 'tcx> {\n         for item in self.cstore.item_children(did) {\n             if let DefLike::DlDef(def) = item.def {\n                 match def {\n+                    Def::Mod(did) |\n+                    Def::ForeignMod(did) |\n                     Def::Trait(did) |\n                     Def::Struct(did) |\n-                    Def::Mod(did) |\n                     Def::Enum(did) |\n-                    Def::TyAlias(did) => self.visit_item(did, item),\n+                    Def::TyAlias(did) |\n+                    Def::Fn(did) |\n+                    Def::Method(did) |\n+                    Def::Static(did, _) |\n+                    Def::Const(did) => self.visit_item(did, item),\n                     _ => {}\n                 }\n             }"}, {"sha": "e2bc153ce0d85379cad0cab059935464c9279adf", "filename": "src/test/auxiliary/rustdoc-hidden-sig.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Ftest%2Fauxiliary%2Frustdoc-hidden-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Ftest%2Fauxiliary%2Frustdoc-hidden-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-hidden-sig.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Bar;\n+\n+impl Bar {\n+    pub fn bar(_: u8) -> hidden::Hidden {\n+        hidden::Hidden\n+    }\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Hidden;\n+}"}, {"sha": "6b5c5b20147345f5d20c53ab6ac37f7f8c12fb07", "filename": "src/test/rustdoc/inline_cross/issue-28480.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-28480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b409a674f62e3be13ec9339b5c8272c9b5c0a9/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-28480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-28480.rs?ref=77b409a674f62e3be13ec9339b5c8272c9b5c0a9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-hidden-sig.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+// @has rustdoc_hidden_sig/struct.Bar.html\n+// @!has -  '//a/@title' 'Hidden'\n+// @has -  '//a' 'u8'\n+extern crate rustdoc_hidden_sig;\n+\n+// @has issue_28480/struct.Bar.html\n+// @!has -  '//a/@title' 'Hidden'\n+// @has -  '//a' 'u8'\n+pub use rustdoc_hidden_sig::Bar;"}]}