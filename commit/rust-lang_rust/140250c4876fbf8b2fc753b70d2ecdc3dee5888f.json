{"sha": "140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "node_id": "C_kwDOAAsO6NoAKDE0MDI1MGM0ODc2ZmJmOGIyZmM3NTNiNzBkMmVjZGMzZGVlNTg4OGY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-09T10:52:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-09T10:52:51Z"}, "message": "Rollup merge of #99050 - JakobDegen:storage-docs, r=tmiasko\n\nClarify MIR semantics of storage statements\n\nSeems worthwhile to start closing out some of the less controversial open questions about MIR semantics. Hopefully this is fairly non-controversial - it's what we implement already, and I see no reason to do anything more restrictive. cc ``@tmiasko`` who commented on this when it was discussed in the original PR that added these docs.", "tree": {"sha": "9819fbb91ef7df2e583fce6c4159f1d8e588a52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9819fbb91ef7df2e583fce6c4159f1d8e588a52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyV4DCRBK7hj4Ov3rIwAAdnQIADq+yobhG2qPpuTLm5oiHCWq\nkP8Xg4m1PnELaqFXdA4OthiW4dkF3jwpIIVgquVJc1yqv4uxjuioXheY3Y3Ug42m\nVlPTznIY4+dowbMHQRZlmNTA1HJNpVS4ZzoYcSW4NfiCuvcDCdrwf7i+L33i/sKR\nXp7N68cEBhdPWKnYJlnMw2AODBcGyZ0edPR0cWYpxZb7NrtjO7UtAItDFxsKyjLg\n5TRZv/OOmJexEPocBrsIBPfehTaO1Bu3ByseysdLYarHJiBkDJ3v4JMLblqvBdWH\nO+m0QEdlAViRbuc6VF7eOFGP1Svb14bykqRdCkn7b2BETT2zkrt4F20Ji9uCNuY=\n=Sb+e\n-----END PGP SIGNATURE-----\n", "payload": "tree 9819fbb91ef7df2e583fce6c4159f1d8e588a52a\nparent 416dc431249f077c1de635321c86dd1f3ca88416\nparent 4939f6c64b12c0392f824f812b9bcad9bf3d1019\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657363971 +0200\ncommitter GitHub <noreply@github.com> 1657363971 +0200\n\nRollup merge of #99050 - JakobDegen:storage-docs, r=tmiasko\n\nClarify MIR semantics of storage statements\n\nSeems worthwhile to start closing out some of the less controversial open questions about MIR semantics. Hopefully this is fairly non-controversial - it's what we implement already, and I see no reason to do anything more restrictive. cc ``@tmiasko`` who commented on this when it was discussed in the original PR that added these docs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "html_url": "https://github.com/rust-lang/rust/commit/140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/140250c4876fbf8b2fc753b70d2ecdc3dee5888f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "416dc431249f077c1de635321c86dd1f3ca88416", "url": "https://api.github.com/repos/rust-lang/rust/commits/416dc431249f077c1de635321c86dd1f3ca88416", "html_url": "https://github.com/rust-lang/rust/commit/416dc431249f077c1de635321c86dd1f3ca88416"}, {"sha": "4939f6c64b12c0392f824f812b9bcad9bf3d1019", "url": "https://api.github.com/repos/rust-lang/rust/commits/4939f6c64b12c0392f824f812b9bcad9bf3d1019", "html_url": "https://github.com/rust-lang/rust/commit/4939f6c64b12c0392f824f812b9bcad9bf3d1019"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "d3bf6b49f1205f1806ce554db07f5959745db96a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/140250c4876fbf8b2fc753b70d2ecdc3dee5888f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140250c4876fbf8b2fc753b70d2ecdc3dee5888f/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "patch": "@@ -206,7 +206,13 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         }\n \n         if self.reachable_blocks.contains(location.block) && context.is_use() {\n-            // Uses of locals must occur while the local's storage is allocated.\n+            // We check that the local is live whenever it is used. Technically, violating this\n+            // restriction is only UB and not actually indicative of not well-formed MIR. This means\n+            // that an optimization which turns MIR that already has UB into MIR that fails this\n+            // check is not necessarily wrong. However, we have no such optimizations at the moment,\n+            // and so we include this check anyway to help us catch bugs. If you happen to write an\n+            // optimization that might cause this to incorrectly fire, feel free to remove this\n+            // check.\n             self.storage_liveness.seek_after_primary_effect(location);\n             let locals_with_storage = self.storage_liveness.get();\n             if !locals_with_storage.contains(local) {"}, {"sha": "45fc5f24a607a449f2231e93cd2982c4779b2d7f", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/140250c4876fbf8b2fc753b70d2ecdc3dee5888f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/140250c4876fbf8b2fc753b70d2ecdc3dee5888f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=140250c4876fbf8b2fc753b70d2ecdc3dee5888f", "patch": "@@ -237,19 +237,19 @@ pub enum StatementKind<'tcx> {\n \n     /// `StorageLive` and `StorageDead` statements mark the live range of a local.\n     ///\n-    /// Using a local before a `StorageLive` or after a `StorageDead` is not well-formed. These\n-    /// statements are not required. If the entire MIR body contains no `StorageLive`/`StorageDead`\n-    /// statements for a particular local, the local is always considered live.\n-    ///\n-    /// More precisely, the MIR validator currently does a `MaybeStorageLiveLocals` analysis to\n-    /// check validity of each use of a local. I believe this is equivalent to requiring for every\n-    /// use of a local, there exist at least one path from the root to that use that contains a\n-    /// `StorageLive` more recently than a `StorageDead`.\n-    ///\n-    /// **Needs clarification**: Is it permitted to have two `StorageLive`s without an intervening\n-    /// `StorageDead`? Two `StorageDead`s without an intervening `StorageLive`? LLVM says poison,\n-    /// yes. If the answer to any of these is \"no,\" is breaking that rule UB or is it an error to\n-    /// have a path in the CFG that might do this?\n+    /// At any point during the execution of a function, each local is either allocated or\n+    /// unallocated. Except as noted below, all locals except function parameters are initially\n+    /// unallocated. `StorageLive` statements cause memory to be allocated for the local while\n+    /// `StorageDead` statements cause the memory to be freed. Using a local in any way (not only\n+    /// reading/writing from it) while it is unallocated is UB.\n+    ///\n+    /// Some locals have no `StorageLive` or `StorageDead` statements within the entire MIR body.\n+    /// These locals are implicitly allocated for the full duration of the function. There is a\n+    /// convenience method at `rustc_mir_dataflow::storage::always_storage_live_locals` for\n+    /// computing these locals.\n+    ///\n+    /// If the local is already allocated, calling `StorageLive` again is UB. However, for an\n+    /// unallocated local an additional `StorageDead` all is simply a nop.\n     StorageLive(Local),\n \n     /// See `StorageLive` above."}]}