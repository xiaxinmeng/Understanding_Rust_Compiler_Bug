{"sha": "5dc54c60660b2e37c2978c38df9298edcc2988f2", "node_id": "C_kwDOAAsO6NoAKDVkYzU0YzYwNjYwYjJlMzdjMjk3OGMzOGRmOTI5OGVkY2MyOTg4ZjI", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-09T11:01:49Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-15T11:03:29Z"}, "message": "Format affected files", "tree": {"sha": "7fe99648d8ed1d8bb12304fed6de67bc66c6a495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe99648d8ed1d8bb12304fed6de67bc66c6a495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc54c60660b2e37c2978c38df9298edcc2988f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc54c60660b2e37c2978c38df9298edcc2988f2", "html_url": "https://github.com/rust-lang/rust/commit/5dc54c60660b2e37c2978c38df9298edcc2988f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc54c60660b2e37c2978c38df9298edcc2988f2/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e5e3560e917f2c3adceda6bc40806868c98e04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5e3560e917f2c3adceda6bc40806868c98e04e", "html_url": "https://github.com/rust-lang/rust/commit/2e5e3560e917f2c3adceda6bc40806868c98e04e"}], "stats": {"total": 184, "additions": 104, "deletions": 80}, "files": [{"sha": "b7798b1c1d749ae488a6ed08fee2824f7ca9999f", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -137,7 +137,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on a synchronization lock\",\n                         None,\n                         \"consider using an underscore-prefixed named \\\n-                            binding or dropping explicitly with `std::mem::drop`\"\n+                            binding or dropping explicitly with `std::mem::drop`\",\n                     );\n                 } else if init_ty.needs_drop(cx.tcx, cx.param_env) {\n                     span_lint_and_help(\n@@ -147,7 +147,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding `let` on a type that implements `Drop`\",\n                         None,\n                         \"consider using an underscore-prefixed named \\\n-                            binding or dropping explicitly with `std::mem::drop`\"\n+                            binding or dropping explicitly with `std::mem::drop`\",\n                     );\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n@@ -156,7 +156,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         local.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         None,\n-                        \"consider explicitly using expression value\"\n+                        \"consider explicitly using expression value\",\n                     );\n                 } else if is_must_use_func_call(cx, init) {\n                     span_lint_and_help(\n@@ -165,7 +165,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         local.span,\n                         \"non-binding let on a result of a `#[must_use]` function\",\n                         None,\n-                        \"consider explicitly using function result\"\n+                        \"consider explicitly using function result\",\n                     );\n                 }\n             }"}, {"sha": "27ba27202bf7e8b6ec2c764d51c133c434d6593a", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -263,7 +263,8 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 match res {\n                     Res::Local(hir_id) => {\n                         let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let extent = self.cx\n+                        let extent = self\n+                            .cx\n                             .tcx\n                             .region_scope_tree(parent_def_id)\n                             .var_scope(hir_id.local_id)\n@@ -274,11 +275,12 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                                 (Some(extent), self.cx.typeck_results().node_type(seqexpr.hir_id)),\n                             );\n                         } else {\n-                            self.indexed_indirectly.insert(seqvar.segments[0].ident.name, Some(extent));\n+                            self.indexed_indirectly\n+                                .insert(seqvar.segments[0].ident.name, Some(extent));\n                         }\n-                        return false;  // no need to walk further *on the variable*\n-                    }\n-                    Res::Def(DefKind::Static (_)| DefKind::Const, ..) => {\n+                        return false; // no need to walk further *on the variable*\n+                    },\n+                    Res::Def(DefKind::Static(_) | DefKind::Const, ..) => {\n                         if index_used_directly {\n                             self.indexed_directly.insert(\n                                 seqvar.segments[0].ident.name,\n@@ -287,8 +289,8 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                         } else {\n                             self.indexed_indirectly.insert(seqvar.segments[0].ident.name, None);\n                         }\n-                        return false;  // no need to walk further *on the variable*\n-                    }\n+                        return false; // no need to walk further *on the variable*\n+                    },\n                     _ => (),\n                 }\n             }\n@@ -310,14 +312,18 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             if (meth.ident.name == sym::index && self.cx.tcx.lang_items().index_trait() == Some(trait_id))\n                 || (meth.ident.name == sym::index_mut && self.cx.tcx.lang_items().index_mut_trait() == Some(trait_id));\n             if !self.check(args_1, args_0, expr);\n-            then { return }\n+            then {\n+                return;\n+            }\n         }\n \n         if_chain! {\n             // an index op\n             if let ExprKind::Index(seqexpr, idx) = expr.kind;\n             if !self.check(idx, seqexpr, expr);\n-            then { return }\n+            then {\n+                return;\n+            }\n         }\n \n         if_chain! {"}, {"sha": "090f9f8ff73cfd40e9825954d4b5c163ae6a6ccc", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -139,9 +139,9 @@ fn future_output_ty<'tcx>(trait_ref: &'tcx TraitRef<'tcx>) -> Option<&'tcx Ty<'t\n         if args.bindings.len() == 1;\n         let binding = &args.bindings[0];\n         if binding.ident.name == sym::Output;\n-        if let TypeBindingKind::Equality{term: Term::Ty(output)} = binding.kind;\n+        if let TypeBindingKind::Equality { term: Term::Ty(output) } = binding.kind;\n         then {\n-            return Some(output)\n+            return Some(output);\n         }\n     }\n \n@@ -180,7 +180,10 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n             .from_generator_fn()\n             .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure(&Closure { body, .. }), ..} = args[0];\n+        if let Expr {\n+            kind: ExprKind::Closure(&Closure { body, .. }),\n+            ..\n+        } = args[0];\n         let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {"}, {"sha": "fb92779be2a7a54b9e58dd83bacb4d5416d40016", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -3370,15 +3370,17 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             then {\n                 let first_arg_span = first_arg_ty.span;\n                 let first_arg_ty = hir_ty_to_ty(cx.tcx, first_arg_ty);\n-                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n+                let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id())\n+                    .self_ty()\n+                    .skip_binder();\n                 wrong_self_convention::check(\n                     cx,\n                     item.ident.name.as_str(),\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,\n                     false,\n-                    true\n+                    true,\n                 );\n             }\n         }\n@@ -3387,7 +3389,9 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if item.ident.name == sym::new;\n             if let TraitItemKind::Fn(_, _) = item.kind;\n             let ret_ty = return_ty(cx, item.hir_id());\n-            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id()).self_ty().skip_binder();\n+            let self_ty = TraitRef::identity(cx.tcx, item.def_id.to_def_id())\n+                .self_ty()\n+                .skip_binder();\n             if !ret_ty.contains(self_ty);\n \n             then {"}, {"sha": "991d3dd538bf86a7ea572c011cd419fb1aa22999", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -121,10 +121,9 @@ pub(super) fn check<'tcx>(\n                             macro_expanded_snipped = snippet(cx, snippet_span, \"..\");\n                             match macro_expanded_snipped.strip_prefix(\"$crate::vec::\") {\n                                 Some(stripped) => Cow::from(stripped),\n-                                None => macro_expanded_snipped\n+                                None => macro_expanded_snipped,\n                             }\n-                        }\n-                        else {\n+                        } else {\n                             not_macro_argument_snippet\n                         }\n                     };"}, {"sha": "5c2b96f5b2ce6287a327567635a64184cc56e1a0", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -47,14 +47,12 @@ declare_lint_pass!(NoNegCompOpForPartialOrd => [NEG_CMP_OP_ON_PARTIAL_ORD]);\n impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-\n             if !in_external_macro(cx.sess(), expr.span);\n             if let ExprKind::Unary(UnOp::Not, inner) = expr.kind;\n             if let ExprKind::Binary(ref op, left, _) = inner.kind;\n             if let BinOpKind::Le | BinOpKind::Ge | BinOpKind::Lt | BinOpKind::Gt = op.node;\n \n             then {\n-\n                 let ty = cx.typeck_results().expr_ty(left);\n \n                 let implements_ord = {\n@@ -81,7 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         \"the use of negated comparison operators on partially ordered \\\n                         types produces code that is hard to read and refactor, please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n-                        clear that the two values could be incomparable\"\n+                        clear that the two values could be incomparable\",\n                     );\n                 }\n             }"}, {"sha": "1307288623f95f3d99e85f572fcc9df379c7856a", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -98,11 +98,15 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n                         if trait_pred.self_ty() == inp;\n                         if let Some(return_ty_pred) = get_projection_pred(cx, generics, *trait_pred);\n                         then {\n-                            if ord_preds.iter().any(|ord| Some(ord.self_ty()) == return_ty_pred.term.ty()) {\n+                            if ord_preds\n+                                .iter()\n+                                .any(|ord| Some(ord.self_ty()) == return_ty_pred.term.ty())\n+                            {\n                                 args_to_check.push((i, \"Ord\".to_string()));\n-                            } else if partial_ord_preds.iter().any(|pord| {\n-                                pord.self_ty() == return_ty_pred.term.ty().unwrap()\n-                            }) {\n+                            } else if partial_ord_preds\n+                                .iter()\n+                                .any(|pord| pord.self_ty() == return_ty_pred.term.ty().unwrap())\n+                            {\n                                 args_to_check.push((i, \"PartialOrd\".to_string()));\n                             }\n                         }"}, {"sha": "d7666b77f6e969d1086f1ba0db9b5dd4f4c5bace", "filename": "clippy_lints/src/utils/internal_lints/collapsible_calls.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcollapsible_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcollapsible_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcollapsible_calls.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -92,7 +92,12 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n                 let mut sle = SpanlessEq::new(cx).deny_side_effects();\n                 match ps.ident.as_str() {\n                     \"span_suggestion\" if sle.eq_expr(&and_then_args[2], &span_call_args[0]) => {\n-                        suggest_suggestion(cx, expr, &and_then_snippets, &span_suggestion_snippets(cx, span_call_args));\n+                        suggest_suggestion(\n+                            cx,\n+                            expr,\n+                            &and_then_snippets,\n+                            &span_suggestion_snippets(cx, span_call_args),\n+                        );\n                     },\n                     \"span_help\" if sle.eq_expr(&and_then_args[2], &span_call_args[0]) => {\n                         let help_snippet = snippet(cx, span_call_args[1].span, r#\"\"...\"\"#);\n@@ -105,12 +110,12 @@ impl<'tcx> LateLintPass<'tcx> for CollapsibleCalls {\n                     \"help\" => {\n                         let help_snippet = snippet(cx, span_call_args[0].span, r#\"\"...\"\"#);\n                         suggest_help(cx, expr, &and_then_snippets, help_snippet.borrow(), false);\n-                    }\n+                    },\n                     \"note\" => {\n                         let note_snippet = snippet(cx, span_call_args[0].span, r#\"\"...\"\"#);\n                         suggest_note(cx, expr, &and_then_snippets, note_snippet.borrow(), false);\n-                    }\n-                    _  => (),\n+                    },\n+                    _ => (),\n                 }\n             }\n         }"}, {"sha": "cacd05262a2151093552d0cfde6329911e3710b6", "filename": "clippy_lints/src/utils/internal_lints/compiler_lint_functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -61,8 +61,7 @@ impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n             let fn_name = path.ident;\n             if let Some(sugg) = self.map.get(fn_name.as_str());\n             let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n-            if match_type(cx, ty, &paths::EARLY_CONTEXT)\n-                || match_type(cx, ty, &paths::LATE_CONTEXT);\n+            if match_type(cx, ty, &paths::EARLY_CONTEXT) || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "883a5c08e5c11b1f86ec1c84e3a627a27ffc1aad", "filename": "clippy_lints/src/utils/internal_lints/if_chain_style.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fif_chain_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fif_chain_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fif_chain_style.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -94,7 +94,10 @@ fn check_nested_if_chains(\n             .iter()\n             .all(|stmt| matches!(stmt.kind, StmtKind::Local(..)) && !sm.is_multiline(stmt.span));\n         if if_chain_span.is_some() || !is_else_clause(cx.tcx, if_expr);\n-        then {} else { return }\n+        then {\n+        } else {\n+            return;\n+        }\n     }\n     let (span, msg) = match (if_chain_span, is_expn_of(tail.span, \"if_chain\")) {\n         (None, Some(_)) => (if_expr.span, \"this `if` can be part of the inner `if_chain!`\"),"}, {"sha": "25532dd4e2681e6455921480339e937b536e3e92", "filename": "clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -41,14 +41,17 @@ impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n             let body = cx.tcx.hir().body(body_id);\n             let typeck_results = cx.tcx.typeck_body(body_id);\n             if let Some(Constant::Vec(path)) = constant_simple(cx, typeck_results, body.value);\n-            let path: Vec<&str> = path.iter().map(|x| {\n+            let path: Vec<&str> = path\n+                .iter()\n+                .map(|x| {\n                     if let Constant::Str(s) = x {\n                         s.as_str()\n                     } else {\n                         // We checked the type of the constant above\n                         unreachable!()\n                     }\n-                }).collect();\n+                })\n+                .collect();\n             if !check_path(cx, &path[..]);\n             then {\n                 span_lint(cx, INVALID_PATHS, item.span, \"invalid path\");"}, {"sha": "0dac64376b06539109482966d66918fb66f7efab", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -317,11 +317,7 @@ pub(super) fn extract_clippy_version_value(cx: &LateContext<'_>, item: &'_ Item<\n             if tool_name.ident.name == sym::clippy;\n             if attr_name.ident.name == sym::version;\n             if let Some(version) = attr.value_str();\n-            then {\n-                Some(version)\n-            } else {\n-                None\n-            }\n+            then { Some(version) } else { None }\n         }\n     })\n }"}, {"sha": "d06a616e4b30b2d8ee796e9cc5fe5d967d99f6d3", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -532,7 +532,11 @@ fn parse_config_field_doc(doc_comment: &str) -> Option<(Vec<String>, String)> {\n \n             // Extract lints\n             doc_comment.make_ascii_lowercase();\n-            let lints: Vec<String> = doc_comment.split_off(DOC_START.len()).split(\", \").map(str::to_string).collect();\n+            let lints: Vec<String> = doc_comment\n+                .split_off(DOC_START.len())\n+                .split(\", \")\n+                .map(str::to_string)\n+                .collect();\n \n             // Format documentation correctly\n             // split off leading `.` from lint name list and indent for correct formatting"}, {"sha": "2b13fad80665c73ae93e82fd7d1d8115e6c95d1e", "filename": "clippy_lints/src/utils/internal_lints/outer_expn_data_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fouter_expn_data_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fouter_expn_data_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fouter_expn_data_pass.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for OuterExpnDataPass {\n         let method_names: Vec<&str> = method_names.iter().map(Symbol::as_str).collect();\n         if_chain! {\n             if let [\"expn_data\", \"outer_expn\"] = method_names.as_slice();\n-            let (self_arg, args)= arg_lists[1];\n+            let (self_arg, args) = arg_lists[1];\n             if args.is_empty();\n             let self_ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n             if match_type(cx, self_ty, &paths::SYNTAX_CONTEXT);"}, {"sha": "4cf76f53625510fd7989b0a6aa450c202df14c0c", "filename": "clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc54c60660b2e37c2978c38df9298edcc2988f2/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=5dc54c60660b2e37c2978c38df9298edcc2988f2", "patch": "@@ -102,7 +102,7 @@ impl UnnecessaryDefPath {\n         ];\n \n         if_chain! {\n-            if let [cx_arg, def_arg, args@..] = args;\n+            if let [cx_arg, def_arg, args @ ..] = args;\n             if let ExprKind::Path(path) = &func.kind;\n             if let Some(id) = cx.qpath_res(path, func.hir_id).opt_def_id();\n             if let Some(which_path) = match_any_def_paths(cx, id, PATHS);\n@@ -113,6 +113,7 @@ impl UnnecessaryDefPath {\n             if let Some(def_id) = inherent_def_path_res(cx, &segments[..]);\n             then {\n                 // Check if the target item is a diagnostic item or LangItem.\n+                #[rustfmt::skip]\n                 let (msg, item) = if let Some(item_name)\n                     = cx.tcx.diagnostic_items(def_id.krate).id_to_name.get(&def_id)\n                 {\n@@ -133,11 +134,11 @@ impl UnnecessaryDefPath {\n                     DefKind::Struct => {\n                         let variant = cx.tcx.adt_def(def_id).non_enum_variant();\n                         variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n-                    }\n+                    },\n                     DefKind::Variant => {\n                         let variant = cx.tcx.adt_def(cx.tcx.parent(def_id)).variant_with_id(def_id);\n                         variant.ctor_def_id.is_some() && variant.fields.iter().all(|f| f.vis.is_public())\n-                    }\n+                    },\n                     _ => false,\n                 };\n \n@@ -146,35 +147,40 @@ impl UnnecessaryDefPath {\n                 let def_snip = snippet_with_applicability(cx, def_arg.span, \"..\", &mut app);\n                 let (sugg, with_note) = match (which_path, item) {\n                     // match_def_path\n-                    (0, Item::DiagnosticItem(item)) =>\n-                        (format!(\"{cx_snip}.tcx.is_diagnostic_item(sym::{item}, {def_snip})\"), has_ctor),\n+                    (0, Item::DiagnosticItem(item)) => (\n+                        format!(\"{cx_snip}.tcx.is_diagnostic_item(sym::{item}, {def_snip})\"),\n+                        has_ctor,\n+                    ),\n                     (0, Item::LangItem(item)) => (\n                         format!(\"{cx_snip}.tcx.lang_items().require(LangItem::{item}).ok() == Some({def_snip})\"),\n-                        has_ctor\n+                        has_ctor,\n                     ),\n                     // match_trait_method\n-                    (1, Item::DiagnosticItem(item)) =>\n-                        (format!(\"is_trait_method({cx_snip}, {def_snip}, sym::{item})\"), false),\n+                    (1, Item::DiagnosticItem(item)) => {\n+                        (format!(\"is_trait_method({cx_snip}, {def_snip}, sym::{item})\"), false)\n+                    },\n                     // match_type\n-                    (2, Item::DiagnosticItem(item)) =>\n-                        (format!(\"is_type_diagnostic_item({cx_snip}, {def_snip}, sym::{item})\"), false),\n-                    (2, Item::LangItem(item)) =>\n-                        (format!(\"is_type_lang_item({cx_snip}, {def_snip}, LangItem::{item})\"), false),\n+                    (2, Item::DiagnosticItem(item)) => (\n+                        format!(\"is_type_diagnostic_item({cx_snip}, {def_snip}, sym::{item})\"),\n+                        false,\n+                    ),\n+                    (2, Item::LangItem(item)) => (\n+                        format!(\"is_type_lang_item({cx_snip}, {def_snip}, LangItem::{item})\"),\n+                        false,\n+                    ),\n                     // is_expr_path_def_path\n                     (3, Item::DiagnosticItem(item)) if has_ctor => (\n-                        format!(\n-                            \"is_res_diag_ctor({cx_snip}, path_res({cx_snip}, {def_snip}), sym::{item})\",\n-                        ),\n+                        format!(\"is_res_diag_ctor({cx_snip}, path_res({cx_snip}, {def_snip}), sym::{item})\",),\n                         false,\n                     ),\n                     (3, Item::LangItem(item)) if has_ctor => (\n-                        format!(\n-                            \"is_res_lang_ctor({cx_snip}, path_res({cx_snip}, {def_snip}), LangItem::{item})\",\n-                        ),\n+                        format!(\"is_res_lang_ctor({cx_snip}, path_res({cx_snip}, {def_snip}), LangItem::{item})\",),\n+                        false,\n+                    ),\n+                    (3, Item::DiagnosticItem(item)) => (\n+                        format!(\"is_path_diagnostic_item({cx_snip}, {def_snip}, sym::{item})\"),\n                         false,\n                     ),\n-                    (3, Item::DiagnosticItem(item)) =>\n-                        (format!(\"is_path_diagnostic_item({cx_snip}, {def_snip}, sym::{item})\"), false),\n                     (3, Item::LangItem(item)) => (\n                         format!(\n                             \"path_res({cx_snip}, {def_snip}).opt_def_id()\\\n@@ -185,21 +191,15 @@ impl UnnecessaryDefPath {\n                     _ => return,\n                 };\n \n-                span_lint_and_then(\n-                    cx,\n-                    UNNECESSARY_DEF_PATH,\n-                    span,\n-                    msg,\n-                    |diag| {\n-                        diag.span_suggestion(span, \"try\", sugg, app);\n-                        if with_note {\n-                            diag.help(\n-                                \"if this `DefId` came from a constructor expression or pattern then the \\\n-                                    parent `DefId` should be used instead\"\n-                            );\n-                        }\n-                    },\n-                );\n+                span_lint_and_then(cx, UNNECESSARY_DEF_PATH, span, msg, |diag| {\n+                    diag.span_suggestion(span, \"try\", sugg, app);\n+                    if with_note {\n+                        diag.help(\n+                            \"if this `DefId` came from a constructor expression or pattern then the \\\n+                                    parent `DefId` should be used instead\",\n+                        );\n+                    }\n+                });\n \n                 self.linted_def_ids.insert(def_id);\n             }"}]}