{"sha": "11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDYyYWEyODQ5YjQ4Yjg1MGM0MTJjYzdjZTIwZDhhNjBhNzRhYjg=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-11T21:14:07Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-10-16T16:58:50Z"}, "message": "Review comments", "tree": {"sha": "057d5007b580ee98e94b9b08f5a089444e580082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057d5007b580ee98e94b9b08f5a089444e580082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "html_url": "https://github.com/rust-lang/rust/commit/11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5c9bf1392bdc697740e62a1924b7942cdfd86a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5c9bf1392bdc697740e62a1924b7942cdfd86a", "html_url": "https://github.com/rust-lang/rust/commit/dd5c9bf1392bdc697740e62a1924b7942cdfd86a"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "e9900e8bc108ac9f26b72653b1d5541476e2d6ba", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "patch": "@@ -718,11 +718,10 @@ fn get_rust_try_fn<'ll, 'tcx>(\n         hir::Unsafety::Unsafe,\n         Abi::Rust,\n     )));\n-    let output = tcx.types.i32;\n-    // `unsafe fn(unsafe fn(*mut i8) -> (), unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n+    // `unsafe fn(unsafe fn(*mut i8) -> (), *mut i8, unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n     let rust_fn_sig = ty::Binder::dummy(cx.tcx.mk_fn_sig(\n         vec![try_fn_ty, i8p, catch_fn_ty].into_iter(),\n-        output,\n+        tcx.types.i32,\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust,"}, {"sha": "7c5c954a64b31345a90f65e3a0ce1b542a2720fe", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "patch": "@@ -1056,9 +1056,21 @@ impl<'tcx> Predicate<'tcx> {\n         }\n     }\n \n+    /// Converts this to a `Binder<PredicateAtom<'tcx>>`. If the value was an\n+    /// `Atom`, then it is not allowed to contain escaping bound vars.\n+    pub fn bound_atom(self, _tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n+        match self.kind() {\n+            &PredicateKind::ForAll(binder) => binder,\n+            &PredicateKind::Atom(atom) => {\n+                assert!(!atom.has_escaping_bound_vars());\n+                Binder::dummy(atom)\n+            }\n+        }\n+    }\n+\n     /// Allows using a `Binder<PredicateAtom<'tcx>>` even if the given predicate previously\n     /// contained unbound variables by shifting these variables outwards.\n-    pub fn bound_atom(self, tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n+    pub fn bound_atom_with_opt_escaping(self, tcx: TyCtxt<'tcx>) -> Binder<PredicateAtom<'tcx>> {\n         match self.kind() {\n             &PredicateKind::ForAll(binder) => binder,\n             &PredicateKind::Atom(atom) => Binder::wrap_nonbinding(tcx, atom),"}, {"sha": "eaddfefb8e5f0a26356ee7f336aedb6a58a19614", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "patch": "@@ -618,7 +618,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // may contain unbound variables. We therefore do this manually.\n                         //\n                         // FIXME(lcnr): Find out why exactly this is the case :)\n-                        let bound_predicate = predicate.bound_atom(self.tcx());\n+                        let bound_predicate = predicate.bound_atom_with_opt_escaping(self.tcx());\n                         if let ty::PredicateAtom::Trait(pred, _) = bound_predicate.skip_binder() {\n                             let trait_ref = bound_predicate.map_bound(|_| pred.trait_ref);\n                             // Don't print +Sized, but rather +?Sized if absent."}, {"sha": "5ca0fc0c88b540623fdee82d71afecfd49eb36d2", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d62aa2849b48b850c412cc7ce20d8a60a74ab8/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=11d62aa2849b48b850c412cc7ce20d8a60a74ab8", "patch": "@@ -81,8 +81,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n         interner: &RustInterner<'tcx>,\n     ) -> chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'tcx>>> {\n         let clauses = self.environment.into_iter().map(|predicate| {\n-            let (predicate, binders, _named_regions) =\n-                collect_bound_vars(interner, interner.tcx, &predicate.bound_atom(interner.tcx));\n+            let (predicate, binders, _named_regions) = collect_bound_vars(\n+                interner,\n+                interner.tcx,\n+                &predicate.bound_atom_with_opt_escaping(interner.tcx),\n+            );\n             let consequence = match predicate {\n                 ty::PredicateAtom::TypeWellFormedFromEnv(ty) => {\n                     chalk_ir::DomainGoal::FromEnv(chalk_ir::FromEnv::Ty(ty.lower_into(interner)))\n@@ -133,8 +136,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n \n impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predicate<'tcx> {\n     fn lower_into(self, interner: &RustInterner<'tcx>) -> chalk_ir::GoalData<RustInterner<'tcx>> {\n-        let (predicate, binders, _named_regions) =\n-            collect_bound_vars(interner, interner.tcx, &self.bound_atom(interner.tcx));\n+        let (predicate, binders, _named_regions) = collect_bound_vars(\n+            interner,\n+            interner.tcx,\n+            &self.bound_atom_with_opt_escaping(interner.tcx),\n+        );\n \n         let value = match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => {\n@@ -653,8 +659,11 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n-        let (predicate, binders, _named_regions) =\n-            collect_bound_vars(interner, interner.tcx, &self.bound_atom(interner.tcx));\n+        let (predicate, binders, _named_regions) = collect_bound_vars(\n+            interner,\n+            interner.tcx,\n+            &self.bound_atom_with_opt_escaping(interner.tcx),\n+        );\n         let value = match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => {\n                 Some(chalk_ir::WhereClause::Implemented(predicate.trait_ref.lower_into(interner)))\n@@ -762,8 +771,11 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n         self,\n         interner: &RustInterner<'tcx>,\n     ) -> Option<chalk_solve::rust_ir::QuantifiedInlineBound<RustInterner<'tcx>>> {\n-        let (predicate, binders, _named_regions) =\n-            collect_bound_vars(interner, interner.tcx, &self.bound_atom(interner.tcx));\n+        let (predicate, binders, _named_regions) = collect_bound_vars(\n+            interner,\n+            interner.tcx,\n+            &self.bound_atom_with_opt_escaping(interner.tcx),\n+        );\n         match predicate {\n             ty::PredicateAtom::Trait(predicate, _) => Some(chalk_ir::Binders::new(\n                 binders,"}]}