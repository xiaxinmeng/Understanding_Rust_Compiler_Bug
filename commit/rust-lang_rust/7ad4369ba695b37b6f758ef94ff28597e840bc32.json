{"sha": "7ad4369ba695b37b6f758ef94ff28597e840bc32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZDQzNjliYTY5NWIzN2I2Zjc1OGVmOTRmZjI4NTk3ZTg0MGJjMzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-11T10:57:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-22T12:37:08Z"}, "message": "remove deprecated wrapping_offset_from", "tree": {"sha": "d971da56d454d0fbcb8307aeb04375d98cbacc84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d971da56d454d0fbcb8307aeb04375d98cbacc84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ad4369ba695b37b6f758ef94ff28597e840bc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad4369ba695b37b6f758ef94ff28597e840bc32", "html_url": "https://github.com/rust-lang/rust/commit/7ad4369ba695b37b6f758ef94ff28597e840bc32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ad4369ba695b37b6f758ef94ff28597e840bc32/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1241f1927eb1a8d2c87c2ada680afb16424862e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1241f1927eb1a8d2c87c2ada680afb16424862e5", "html_url": "https://github.com/rust-lang/rust/commit/1241f1927eb1a8d2c87c2ada680afb16424862e5"}], "stats": {"total": 103, "additions": 0, "deletions": 103}, "files": [{"sha": "4b61a6d2863011f7d9eed1d6c9a64dae056bcbf3", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7ad4369ba695b37b6f758ef94ff28597e840bc32/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad4369ba695b37b6f758ef94ff28597e840bc32/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=7ad4369ba695b37b6f758ef94ff28597e840bc32", "patch": "@@ -445,59 +445,6 @@ impl<T: ?Sized> *const T {\n         intrinsics::ptr_guaranteed_ne(self, other)\n     }\n \n-    /// Calculates the distance between two pointers. The returned value is in\n-    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n-    ///\n-    /// If the address different between the two pointers is not a multiple of\n-    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n-    /// zero.\n-    ///\n-    /// Though this method is safe for any two pointers, note that its result\n-    /// will be mostly useless if the two pointers aren't into the same allocated\n-    /// object, for example if they point to two different local variables.\n-    ///\n-    /// # Panics\n-    ///\n-    /// This function panics if `T` is a zero-sized type.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(ptr_wrapping_offset_from)]\n-    ///\n-    /// let a = [0; 5];\n-    /// let ptr1: *const i32 = &a[1];\n-    /// let ptr2: *const i32 = &a[3];\n-    /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n-    /// assert_eq!(ptr1.wrapping_offset_from(ptr2), -2);\n-    /// assert_eq!(ptr1.wrapping_offset(2), ptr2);\n-    /// assert_eq!(ptr2.wrapping_offset(-2), ptr1);\n-    ///\n-    /// let ptr1: *const i32 = 3 as _;\n-    /// let ptr2: *const i32 = 13 as _;\n-    /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n-    /// ```\n-    #[unstable(feature = \"ptr_wrapping_offset_from\", issue = \"41079\")]\n-    #[rustc_deprecated(\n-        since = \"1.46.0\",\n-        reason = \"Pointer distances across allocation \\\n-        boundaries are not typically meaningful. \\\n-        Use integer subtraction if you really need this.\"\n-    )]\n-    #[inline]\n-    pub fn wrapping_offset_from(self, origin: *const T) -> isize\n-    where\n-        T: Sized,\n-    {\n-        let pointee_size = mem::size_of::<T>();\n-        assert!(0 < pointee_size && pointee_size <= isize::MAX as usize);\n-\n-        let d = isize::wrapping_sub(self as _, origin as _);\n-        d.wrapping_div(pointee_size as _)\n-    }\n-\n     /// Calculates the offset from a pointer (convenience for `.offset(count as isize)`).\n     ///\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer"}, {"sha": "36398c3f65a95a469c3ae5ef12d111e2d06eaee1", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7ad4369ba695b37b6f758ef94ff28597e840bc32/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ad4369ba695b37b6f758ef94ff28597e840bc32/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=7ad4369ba695b37b6f758ef94ff28597e840bc32", "patch": "@@ -552,56 +552,6 @@ impl<T: ?Sized> *mut T {\n         unsafe { (self as *const T).offset_from(origin) }\n     }\n \n-    /// Calculates the distance between two pointers. The returned value is in\n-    /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n-    ///\n-    /// If the address different between the two pointers is not a multiple of\n-    /// `mem::size_of::<T>()` then the result of the division is rounded towards\n-    /// zero.\n-    ///\n-    /// Though this method is safe for any two pointers, note that its result\n-    /// will be mostly useless if the two pointers aren't into the same allocated\n-    /// object, for example if they point to two different local variables.\n-    ///\n-    /// # Panics\n-    ///\n-    /// This function panics if `T` is a zero-sized type.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// #![feature(ptr_wrapping_offset_from)]\n-    ///\n-    /// let mut a = [0; 5];\n-    /// let ptr1: *mut i32 = &mut a[1];\n-    /// let ptr2: *mut i32 = &mut a[3];\n-    /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n-    /// assert_eq!(ptr1.wrapping_offset_from(ptr2), -2);\n-    /// assert_eq!(ptr1.wrapping_offset(2), ptr2);\n-    /// assert_eq!(ptr2.wrapping_offset(-2), ptr1);\n-    ///\n-    /// let ptr1: *mut i32 = 3 as _;\n-    /// let ptr2: *mut i32 = 13 as _;\n-    /// assert_eq!(ptr2.wrapping_offset_from(ptr1), 2);\n-    /// ```\n-    #[unstable(feature = \"ptr_wrapping_offset_from\", issue = \"41079\")]\n-    #[rustc_deprecated(\n-        since = \"1.46.0\",\n-        reason = \"Pointer distances across allocation \\\n-        boundaries are not typically meaningful. \\\n-        Use integer subtraction if you really need this.\"\n-    )]\n-    #[inline]\n-    pub fn wrapping_offset_from(self, origin: *const T) -> isize\n-    where\n-        T: Sized,\n-    {\n-        #[allow(deprecated_in_future, deprecated)]\n-        (self as *const T).wrapping_offset_from(origin)\n-    }\n-\n     /// Calculates the offset from a pointer (convenience for `.offset(count as isize)`).\n     ///\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer"}]}