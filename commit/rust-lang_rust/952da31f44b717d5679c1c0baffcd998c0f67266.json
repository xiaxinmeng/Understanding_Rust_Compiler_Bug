{"sha": "952da31f44b717d5679c1c0baffcd998c0f67266", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmRhMzFmNDRiNzE3ZDU2NzljMWMwYmFmZmNkOTk4YzBmNjcyNjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T20:32:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-03T20:32:42Z"}, "message": "switch to internal feedback", "tree": {"sha": "b7006268ca07e0e517b7cc0a62ce7658310ca3e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7006268ca07e0e517b7cc0a62ce7658310ca3e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952da31f44b717d5679c1c0baffcd998c0f67266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952da31f44b717d5679c1c0baffcd998c0f67266", "html_url": "https://github.com/rust-lang/rust/commit/952da31f44b717d5679c1c0baffcd998c0f67266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952da31f44b717d5679c1c0baffcd998c0f67266/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "971054e4d026a4d39dc6229ba8883bef626b11e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/971054e4d026a4d39dc6229ba8883bef626b11e3", "html_url": "https://github.com/rust-lang/rust/commit/971054e4d026a4d39dc6229ba8883bef626b11e3"}], "stats": {"total": 114, "additions": 35, "deletions": 79}, "files": [{"sha": "5c0166a61428f4004b0b774c534a7bea29a41e84", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -34,7 +34,7 @@ fn main_inner() -> Result<()> {\n     let root = ::std::env::current_dir()?;\n     run_server(\n         m::server_capabilities(),\n-        |r, s| m::main_loop(root, r, s),\n+        |r, s| m::main_loop(false, root, r, s),\n         receiver,\n         sender,\n     )?;"}, {"sha": "b66a24de19b1b5cf10c6f3cbaad9963234719ba3", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -32,6 +32,7 @@ enum Task {\n }\n \n pub fn main_loop(\n+    internal_mode: bool,\n     root: PathBuf,\n     msg_receriver: &mut Receiver<RawMessage>,\n     msg_sender: &mut Sender<RawMessage>,\n@@ -47,6 +48,7 @@ pub fn main_loop(\n     let mut pending_requests = HashMap::new();\n     let mut subs = Subscriptions::new();\n     let main_res = main_loop_inner(\n+        internal_mode,\n         root,\n         &pool,\n         msg_sender,\n@@ -80,6 +82,7 @@ pub fn main_loop(\n }\n \n fn main_loop_inner(\n+    internal_mode: bool,\n     ws_root: PathBuf,\n     pool: &ThreadPool,\n     msg_sender: &mut Sender<RawMessage>,\n@@ -145,8 +148,7 @@ fn main_loop_inner(\n                 match ws {\n                     Ok(ws) => {\n                         let workspaces = vec![ws];\n-                        let not = RawNotification::new::<req::DidReloadWorkspace>(&workspaces);\n-                        msg_sender.send(RawMessage::Notification(not));\n+                        feedback(internal_mode, \"workspace loaded\", msg_sender);\n                         for ws in workspaces.iter() {\n                             for pkg in ws.packages().filter(|pkg| !pkg.is_member(ws)) {\n                                 debug!(\"sending root, {}\", pkg.root(ws).to_path_buf().display());\n@@ -404,3 +406,11 @@ fn update_file_notifications_on_threadpool(\n         }\n     });\n }\n+\n+fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n+    if !intrnal_mode {\n+        return;\n+    }\n+    let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n+    sender.send(RawMessage::Notification(not));\n+}"}, {"sha": "a712106d91e5f2155ab5b5b04cb579a38be9e2cd", "filename": "crates/server/src/project_model.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -11,7 +11,7 @@ use {\n     thread_watcher::ThreadWatcher,\n };\n \n-#[derive(Debug, Serialize, Clone)]\n+#[derive(Debug, Clone)]\n pub struct CargoWorkspace {\n     packages: Vec<PackageData>,\n     targets: Vec<TargetData>,\n@@ -22,23 +22,23 @@ pub struct Package(usize);\n #[derive(Clone, Copy, Debug, Serialize)]\n pub struct Target(usize);\n \n-#[derive(Debug, Serialize, Clone)]\n+#[derive(Debug, Clone)]\n struct PackageData {\n     name: SmolStr,\n     manifest: PathBuf,\n     targets: Vec<Target>,\n     is_member: bool,\n }\n \n-#[derive(Debug, Serialize, Clone)]\n+#[derive(Debug, Clone)]\n struct TargetData {\n     pkg: Package,\n     name: SmolStr,\n     root: PathBuf,\n     kind: TargetKind,\n }\n \n-#[derive(Debug, Serialize, Clone, Copy, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum TargetKind {\n     Bin, Lib, Example, Test, Bench, Other,\n }\n@@ -47,9 +47,6 @@ impl Package {\n     pub fn name(self, ws: &CargoWorkspace) -> &str {\n         ws.pkg(self).name.as_str()\n     }\n-    pub fn manifest(self, ws: &CargoWorkspace) -> &Path {\n-        ws.pkg(self).manifest.as_path()\n-    }\n     pub fn root(self, ws: &CargoWorkspace) -> &Path {\n         ws.pkg(self).manifest.parent().unwrap()\n     }"}, {"sha": "4af61dbbd5b2c423c5aa84658adc520eae4730cd", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -1,7 +1,6 @@\n use std::collections::HashMap;\n use languageserver_types::{TextDocumentIdentifier, Range, Url, Position, Location};\n use url_serde;\n-use project_model::CargoWorkspace;\n \n pub use languageserver_types::{\n     request::*, notification::*,\n@@ -169,9 +168,9 @@ pub enum FileSystemEdit {\n     }\n }\n \n-pub enum DidReloadWorkspace {}\n+pub enum InternalFeedback {}\n \n-impl Notification for DidReloadWorkspace {\n-    const METHOD: &'static str = \"m/didReloadWorkspace\";\n-    type Params = Vec<CargoWorkspace>;\n+impl Notification for InternalFeedback {\n+    const METHOD: &'static str = \"internalFeedback\";\n+    type Params = String;\n }"}, {"sha": "d6e89bdf2e30bb92e2715f6ad2a4868d5d2ec71f", "filename": "crates/server/tests/heavy_tests/main.rs", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -10,7 +10,7 @@ extern crate m;\n \n mod support;\n \n-use m::req::{Runnables, RunnablesParams, DidReloadWorkspace};\n+use m::req::{Runnables, RunnablesParams};\n \n use support::project;\n \n@@ -59,7 +59,7 @@ pub fn foo() {}\n #[test]\n fn test_eggs() {}\n \"#);\n-    server.wait_for_notification::<DidReloadWorkspace>();\n+    server.wait_for_feedback(\"workspace loaded\");\n     server.request::<Runnables>(\n         RunnablesParams {\n             text_document: server.doc_id(\"tests/spam.rs\"),\n@@ -79,32 +79,3 @@ fn test_eggs() {}\n         ]\"#\n     );\n }\n-\n-#[test]\n-fn test_project_model() {\n-    let server = project(r#\"\n-//- Cargo.toml\n-[package]\n-name = \"foo\"\n-version = \"0.0.0\"\n-\n-//- src/lib.rs\n-pub fn foo() {}\n-\"#);\n-    server.notification::<DidReloadWorkspace>(r#\"[\n-  {\n-    \"packages\": [\n-      {\n-        \"is_member\": true,\n-        \"manifest\": \"$PROJECT_ROOT$/Cargo.toml\",\n-        \"name\": \"foo\",\n-        \"targets\": [ 0 ]\n-      }\n-    ],\n-    \"targets\": [\n-      { \"kind\": \"Lib\", \"name\": \"foo\", \"pkg\": 0, \"root\": \"$PROJECT_ROOT$/src/lib.rs\" }\n-    ]\n-  }\n-]\"#\n-    );\n-}"}, {"sha": "99a784e8d613470ba444b2456e1901dd4dc92196", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952da31f44b717d5679c1c0baffcd998c0f67266/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=952da31f44b717d5679c1c0baffcd998c0f67266", "patch": "@@ -14,15 +14,15 @@ use languageserver_types::{\n     Url,\n     TextDocumentIdentifier,\n     request::{Request, Shutdown},\n-    notification::{Notification, DidOpenTextDocument},\n+    notification::DidOpenTextDocument,\n     DidOpenTextDocumentParams,\n     TextDocumentItem,\n };\n use serde::Serialize;\n use serde_json::{Value, from_str, to_string_pretty};\n use gen_lsp_server::{RawMessage, RawRequest, RawNotification};\n \n-use m::{Result, main_loop};\n+use m::{Result, main_loop, req};\n \n pub fn project(fixture: &str) -> Server {\n     static INIT: Once = Once::new();\n@@ -72,7 +72,7 @@ impl Server {\n         let path = dir.path().to_path_buf();\n         let (client_sender, mut server_receiver) = bounded(1);\n         let (mut server_sender, client_receiver) = bounded(1);\n-        let server = thread::spawn(move || main_loop(path, &mut server_receiver, &mut server_sender));\n+        let server = thread::spawn(move || main_loop(true, path, &mut server_receiver, &mut server_sender));\n         let res = Server {\n             req_id: Cell::new(1),\n             dir,\n@@ -125,25 +125,6 @@ impl Server {\n         );\n     }\n \n-    pub fn notification<N>(\n-        &self,\n-        expected: &str,\n-    )\n-    where\n-        N: Notification,\n-    {\n-        let expected = expected.replace(\"$PROJECT_ROOT$\", &self.dir.path().display().to_string());\n-        let expected: Value = from_str(&expected).unwrap();\n-        let actual = self.wait_for_notification::<N>();\n-        assert_eq!(\n-            expected, actual,\n-            \"Expected:\\n{}\\n\\\n-             Actual:\\n{}\\n\",\n-            to_string_pretty(&expected).unwrap(),\n-            to_string_pretty(&actual).unwrap(),\n-        );\n-    }\n-\n     fn send_request<R>(&self, id: u64, params: R::Params) -> Value\n     where\n         R: Request,\n@@ -173,25 +154,23 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n-    pub fn wait_for_notification<N: Notification>(&self) -> Value {\n-        self.wait_for_notification_(N::METHOD)\n-    }\n-    fn wait_for_notification_(&self, method: &str) -> Value {\n+    pub fn wait_for_feedback(&self, feedback: &str) {\n         let f = |msg: &RawMessage| match msg {\n-                RawMessage::Notification(n) if n.method == method => {\n-                    Some(n.params.clone())\n+                RawMessage::Notification(n) if n.method == \"internalFeedback\" => {\n+                    return n.clone().cast::<req::InternalFeedback>()\n+                        .unwrap() == feedback\n                 }\n-                _ => None,\n+                _ => false,\n         };\n \n         for msg in self.messages.borrow().iter() {\n-            if let Some(res) = f(msg) {\n-                return res;\n+            if f(msg) {\n+                return;\n             }\n         }\n         while let Some(msg) = self.recv() {\n-            if let Some(res) = f(&msg) {\n-                return res;\n+            if f(&msg) {\n+                return;\n             }\n         }\n         panic!(\"no response\")"}]}