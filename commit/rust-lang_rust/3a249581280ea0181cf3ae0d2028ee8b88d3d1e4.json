{"sha": "3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjQ5NTgxMjgwZWEwMTgxY2YzYWUwZDIwMjhlZThiODhkM2QxZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T17:54:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T17:54:56Z"}, "message": "Auto merge of #1809 - RalfJung:rustup, r=RalfJung\n\nrustup", "tree": {"sha": "a6b7b222052fec5dd05096ca207250bcdec5ed2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b7b222052fec5dd05096ca207250bcdec5ed2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "html_url": "https://github.com/rust-lang/rust/commit/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e5d5f1efb08ae375e7707cf994c43cadfd4df9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e5d5f1efb08ae375e7707cf994c43cadfd4df9", "html_url": "https://github.com/rust-lang/rust/commit/b0e5d5f1efb08ae375e7707cf994c43cadfd4df9"}, {"sha": "c151af5cf597d66251d4ab56cffc67a2f0507365", "url": "https://api.github.com/repos/rust-lang/rust/commits/c151af5cf597d66251d4ab56cffc67a2f0507365", "html_url": "https://github.com/rust-lang/rust/commit/c151af5cf597d66251d4ab56cffc67a2f0507365"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "7004235a38f05de864dfb31ac1eae9ba5c8735a6", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "patch": "@@ -1 +1 @@\n-3e827cc21e0734edd26170e8d1481f0d66a1426b\n+35bab923c8e5a1e8291735e7630539002eb80d7b"}, {"sha": "2f407dd09a9150420ef2664d6d69a915265f125b", "filename": "src/machine.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a249581280ea0181cf3ae0d2028ee8b88d3d1e4/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3a249581280ea0181cf3ae0d2028ee8b88d3d1e4", "patch": "@@ -508,14 +508,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     #[inline(always)]\n     fn memory_read(\n         _memory_extra: &Self::MemoryExtra,\n-        alloc: &Allocation<Tag, AllocExtra>,\n+        alloc_extra: &AllocExtra,\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(data_race) = &alloc.extra.data_race {\n+        if let Some(data_race) = &alloc_extra.data_race {\n             data_race.read(ptr, size)?;\n         }\n-        if let Some(stacked_borrows) = &alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = &alloc_extra.stacked_borrows {\n             stacked_borrows.memory_read(ptr, size)\n         } else {\n             Ok(())\n@@ -525,14 +525,14 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     #[inline(always)]\n     fn memory_written(\n         _memory_extra: &mut Self::MemoryExtra,\n-        alloc: &mut Allocation<Tag, AllocExtra>,\n+        alloc_extra: &mut AllocExtra,\n         ptr: Pointer<Tag>,\n         size: Size,\n     ) -> InterpResult<'tcx> {\n-        if let Some(data_race) = &mut alloc.extra.data_race {\n+        if let Some(data_race) = &mut alloc_extra.data_race {\n             data_race.write(ptr, size)?;\n         }\n-        if let Some(stacked_borrows) = &mut alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_written(ptr, size)\n         } else {\n             Ok(())\n@@ -542,17 +542,17 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n     #[inline(always)]\n     fn memory_deallocated(\n         memory_extra: &mut Self::MemoryExtra,\n-        alloc: &mut Allocation<Tag, AllocExtra>,\n+        alloc_extra: &mut AllocExtra,\n         ptr: Pointer<Tag>,\n+        size: Size,\n     ) -> InterpResult<'tcx> {\n-        let size = alloc.size();\n         if Some(ptr.alloc_id) == memory_extra.tracked_alloc_id {\n             register_diagnostic(NonHaltingDiagnostic::FreedAlloc(ptr.alloc_id));\n         }\n-        if let Some(data_race) = &mut alloc.extra.data_race {\n+        if let Some(data_race) = &mut alloc_extra.data_race {\n             data_race.deallocate(ptr, size)?;\n         }\n-        if let Some(stacked_borrows) = &mut alloc.extra.stacked_borrows {\n+        if let Some(stacked_borrows) = &mut alloc_extra.stacked_borrows {\n             stacked_borrows.memory_deallocated(ptr, size)\n         } else {\n             Ok(())"}]}