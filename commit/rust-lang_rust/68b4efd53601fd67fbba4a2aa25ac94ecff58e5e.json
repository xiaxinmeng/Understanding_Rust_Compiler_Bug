{"sha": "68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YjRlZmQ1MzYwMWZkNjdmYmJhNGEyYWEyNWFjOTRlY2ZmNThlNWU=", "commit": {"author": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-01T04:33:06Z"}, "committer": {"name": "Nick Spain", "email": "nicholas.spain@stileeducation.com", "date": "2021-01-02T10:53:52Z"}, "message": "Handle not finding range in Definition::search_scope\n\nThe `LifetimeParam` and `Local` variants use `source()` to find their\nrange. Now that `source()` returns an `Option` we need to handle the\n`None` case.", "tree": {"sha": "aa3056d3c8d2c1cfca3e54a8c00cb02b449eb3c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa3056d3c8d2c1cfca3e54a8c00cb02b449eb3c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "html_url": "https://github.com/rust-lang/rust/commit/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e/comments", "author": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nick96", "id": 9591268, "node_id": "MDQ6VXNlcjk1OTEyNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/9591268?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nick96", "html_url": "https://github.com/nick96", "followers_url": "https://api.github.com/users/nick96/followers", "following_url": "https://api.github.com/users/nick96/following{/other_user}", "gists_url": "https://api.github.com/users/nick96/gists{/gist_id}", "starred_url": "https://api.github.com/users/nick96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nick96/subscriptions", "organizations_url": "https://api.github.com/users/nick96/orgs", "repos_url": "https://api.github.com/users/nick96/repos", "events_url": "https://api.github.com/users/nick96/events{/privacy}", "received_events_url": "https://api.github.com/users/nick96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c936e4b86fd5de8e9709cd01547a69054cdec91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c936e4b86fd5de8e9709cd01547a69054cdec91b", "html_url": "https://github.com/rust-lang/rust/commit/c936e4b86fd5de8e9709cd01547a69054cdec91b"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "c4aff39325eb07d7a97b7cefe3702b4ca8d291d5", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b4efd53601fd67fbba4a2aa25ac94ecff58e5e/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=68b4efd53601fd67fbba4a2aa25ac94ecff58e5e", "patch": "@@ -122,9 +122,15 @@ impl Definition {\n         if let Definition::Local(var) = self {\n             #[allow(deprecated)]\n             let range = match var.parent(db) {\n-                DefWithBody::Function(f) => f.source_old(db).value.syntax().text_range(),\n-                DefWithBody::Const(c) => c.source_old(db).value.syntax().text_range(),\n-                DefWithBody::Static(s) => s.source_old(db).value.syntax().text_range(),\n+                DefWithBody::Function(f) => {\n+                    f.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                DefWithBody::Const(c) => {\n+                    c.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                DefWithBody::Static(s) => {\n+                    s.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));\n@@ -134,17 +140,35 @@ impl Definition {\n         if let Definition::LifetimeParam(param) = self {\n             #[allow(deprecated)]\n             let range = match param.parent(db) {\n-                hir::GenericDef::Function(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::Function(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n                 hir::GenericDef::Adt(it) => match it {\n-                    hir::Adt::Struct(it) => it.source_old(db).value.syntax().text_range(),\n-                    hir::Adt::Union(it) => it.source_old(db).value.syntax().text_range(),\n-                    hir::Adt::Enum(it) => it.source_old(db).value.syntax().text_range(),\n+                    hir::Adt::Struct(it) => {\n+                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    }\n+                    hir::Adt::Union(it) => {\n+                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    }\n+                    hir::Adt::Enum(it) => {\n+                        it.source(db).and_then(|src| src.value.syntax().text_range())\n+                    }\n                 },\n-                hir::GenericDef::Trait(it) => it.source_old(db).value.syntax().text_range(),\n-                hir::GenericDef::TypeAlias(it) => it.source_old(db).value.syntax().text_range(),\n-                hir::GenericDef::Impl(it) => it.source_old(db).value.syntax().text_range(),\n-                hir::GenericDef::Variant(it) => it.source_old(db).value.syntax().text_range(),\n-                hir::GenericDef::Const(it) => it.source_old(db).value.syntax().text_range(),\n+                hir::GenericDef::Trait(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                hir::GenericDef::TypeAlias(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                hir::GenericDef::Impl(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                hir::GenericDef::Variant(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n+                hir::GenericDef::Const(it) => {\n+                    it.source(db).and_then(|src| src.value.syntax().text_range())\n+                }\n             };\n             let mut res = FxHashMap::default();\n             res.insert(file_id, Some(range));"}]}