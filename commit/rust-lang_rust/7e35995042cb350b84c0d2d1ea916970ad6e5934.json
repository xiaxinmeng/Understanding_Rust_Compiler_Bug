{"sha": "7e35995042cb350b84c0d2d1ea916970ad6e5934", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMzU5OTUwNDJjYjM1MGI4NGMwZDJkMWVhOTE2OTcwYWQ2ZTU5MzQ=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2019-06-05T16:11:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T11:16:55Z"}, "message": "Separate librustc_codegen_ssa module", "tree": {"sha": "71bbe862737af4c395979512e90e416707e774f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71bbe862737af4c395979512e90e416707e774f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e35995042cb350b84c0d2d1ea916970ad6e5934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e35995042cb350b84c0d2d1ea916970ad6e5934", "html_url": "https://github.com/rust-lang/rust/commit/7e35995042cb350b84c0d2d1ea916970ad6e5934", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e35995042cb350b84c0d2d1ea916970ad6e5934/comments", "author": null, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed54d10de6a0b330c9546ba7f7906084404efebe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed54d10de6a0b330c9546ba7f7906084404efebe", "html_url": "https://github.com/rust-lang/rust/commit/ed54d10de6a0b330c9546ba7f7906084404efebe"}], "stats": {"total": 189, "additions": 94, "deletions": 95}, "files": [{"sha": "e27cb6d8dda8973ade54bda2621b77dda290bebe", "filename": "src/librustc_codegen_ssa/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 95, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/7e35995042cb350b84c0d2d1ea916970ad6e5934/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e35995042cb350b84c0d2d1ea916970ad6e5934/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath.rs?ref=7e35995042cb350b84c0d2d1ea916970ad6e5934", "patch": "@@ -173,98 +173,4 @@ fn minimize_rpaths(rpaths: &[String]) -> Vec<String> {\n }\n \n #[cfg(all(unix, test))]\n-mod tests {\n-    use super::{RPathConfig};\n-    use super::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};\n-    use std::path::{Path, PathBuf};\n-\n-    #[test]\n-    fn test_rpaths_to_flags() {\n-        let flags = rpaths_to_flags(&[\n-            \"path1\".to_string(),\n-            \"path2\".to_string()\n-        ]);\n-        assert_eq!(flags,\n-                   [\"-Wl,-rpath,path1\",\n-                    \"-Wl,-rpath,path2\"]);\n-    }\n-\n-    #[test]\n-    fn test_minimize1() {\n-        let res = minimize_rpaths(&[\n-            \"rpath1\".to_string(),\n-            \"rpath2\".to_string(),\n-            \"rpath1\".to_string()\n-        ]);\n-        assert!(res == [\n-            \"rpath1\",\n-            \"rpath2\",\n-        ]);\n-    }\n-\n-    #[test]\n-    fn test_minimize2() {\n-        let res = minimize_rpaths(&[\n-            \"1a\".to_string(),\n-            \"2\".to_string(),\n-            \"2\".to_string(),\n-            \"1a\".to_string(),\n-            \"4a\".to_string(),\n-            \"1a\".to_string(),\n-            \"2\".to_string(),\n-            \"3\".to_string(),\n-            \"4a\".to_string(),\n-            \"3\".to_string()\n-        ]);\n-        assert!(res == [\n-            \"1a\",\n-            \"2\",\n-            \"4a\",\n-            \"3\",\n-        ]);\n-    }\n-\n-    #[test]\n-    fn test_rpath_relative() {\n-        if cfg!(target_os = \"macos\") {\n-            let config = &mut RPathConfig {\n-                used_crates: Vec::new(),\n-                has_rpath: true,\n-                is_like_osx: true,\n-                linker_is_gnu: false,\n-                out_filename: PathBuf::from(\"bin/rustc\"),\n-                get_install_prefix_lib_path: &mut || panic!(),\n-            };\n-            let res = get_rpath_relative_to_output(config,\n-                                                   Path::new(\"lib/libstd.so\"));\n-            assert_eq!(res, \"@loader_path/../lib\");\n-        } else {\n-            let config = &mut RPathConfig {\n-                used_crates: Vec::new(),\n-                out_filename: PathBuf::from(\"bin/rustc\"),\n-                get_install_prefix_lib_path: &mut || panic!(),\n-                has_rpath: true,\n-                is_like_osx: false,\n-                linker_is_gnu: true,\n-            };\n-            let res = get_rpath_relative_to_output(config,\n-                                                   Path::new(\"lib/libstd.so\"));\n-            assert_eq!(res, \"$ORIGIN/../lib\");\n-        }\n-    }\n-\n-    #[test]\n-    fn test_xlinker() {\n-        let args = rpaths_to_flags(&[\n-            \"a/normal/path\".to_string(),\n-            \"a,comma,path\".to_string()\n-        ]);\n-\n-        assert_eq!(args, vec![\n-            \"-Wl,-rpath,a/normal/path\".to_string(),\n-            \"-Wl,-rpath\".to_string(),\n-            \"-Xlinker\".to_string(),\n-            \"a,comma,path\".to_string()\n-        ]);\n-    }\n-}\n+mod tests;"}, {"sha": "e42a878d7e45e8c9e0ef5ea9ee5a5e68036eabe2", "filename": "src/librustc_codegen_ssa/back/rpath/tests.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/7e35995042cb350b84c0d2d1ea916970ad6e5934/src%2Flibrustc_codegen_ssa%2Fback%2Frpath%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e35995042cb350b84c0d2d1ea916970ad6e5934/src%2Flibrustc_codegen_ssa%2Fback%2Frpath%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Frpath%2Ftests.rs?ref=7e35995042cb350b84c0d2d1ea916970ad6e5934", "patch": "@@ -0,0 +1,93 @@\n+use super::{RPathConfig};\n+use super::{minimize_rpaths, rpaths_to_flags, get_rpath_relative_to_output};\n+use std::path::{Path, PathBuf};\n+\n+#[test]\n+fn test_rpaths_to_flags() {\n+    let flags = rpaths_to_flags(&[\n+        \"path1\".to_string(),\n+        \"path2\".to_string()\n+    ]);\n+    assert_eq!(flags,\n+               [\"-Wl,-rpath,path1\",\n+                \"-Wl,-rpath,path2\"]);\n+}\n+\n+#[test]\n+fn test_minimize1() {\n+    let res = minimize_rpaths(&[\n+        \"rpath1\".to_string(),\n+        \"rpath2\".to_string(),\n+        \"rpath1\".to_string()\n+    ]);\n+    assert!(res == [\n+        \"rpath1\",\n+        \"rpath2\",\n+    ]);\n+}\n+\n+#[test]\n+fn test_minimize2() {\n+    let res = minimize_rpaths(&[\n+        \"1a\".to_string(),\n+        \"2\".to_string(),\n+        \"2\".to_string(),\n+        \"1a\".to_string(),\n+        \"4a\".to_string(),\n+        \"1a\".to_string(),\n+        \"2\".to_string(),\n+        \"3\".to_string(),\n+        \"4a\".to_string(),\n+        \"3\".to_string()\n+    ]);\n+    assert!(res == [\n+        \"1a\",\n+        \"2\",\n+        \"4a\",\n+        \"3\",\n+    ]);\n+}\n+\n+#[test]\n+fn test_rpath_relative() {\n+    if cfg!(target_os = \"macos\") {\n+        let config = &mut RPathConfig {\n+            used_crates: Vec::new(),\n+            has_rpath: true,\n+            is_like_osx: true,\n+            linker_is_gnu: false,\n+            out_filename: PathBuf::from(\"bin/rustc\"),\n+            get_install_prefix_lib_path: &mut || panic!(),\n+        };\n+        let res = get_rpath_relative_to_output(config,\n+                                               Path::new(\"lib/libstd.so\"));\n+        assert_eq!(res, \"@loader_path/../lib\");\n+    } else {\n+        let config = &mut RPathConfig {\n+            used_crates: Vec::new(),\n+            out_filename: PathBuf::from(\"bin/rustc\"),\n+            get_install_prefix_lib_path: &mut || panic!(),\n+            has_rpath: true,\n+            is_like_osx: false,\n+            linker_is_gnu: true,\n+        };\n+        let res = get_rpath_relative_to_output(config,\n+                                               Path::new(\"lib/libstd.so\"));\n+        assert_eq!(res, \"$ORIGIN/../lib\");\n+    }\n+}\n+\n+#[test]\n+fn test_xlinker() {\n+    let args = rpaths_to_flags(&[\n+        \"a/normal/path\".to_string(),\n+        \"a,comma,path\".to_string()\n+    ]);\n+\n+    assert_eq!(args, vec![\n+        \"-Wl,-rpath,a/normal/path\".to_string(),\n+        \"-Wl,-rpath\".to_string(),\n+        \"-Xlinker\".to_string(),\n+        \"a,comma,path\".to_string()\n+    ]);\n+}"}]}