{"sha": "4b9d637f5846b92f2c17b98985c47dea795064d2", "node_id": "C_kwDOAAsO6NoAKDRiOWQ2MzdmNTg0NmI5MmYyYzE3Yjk4OTg1YzQ3ZGVhNzk1MDY0ZDI", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-09-21T00:09:16Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-09-24T02:12:57Z"}, "message": "refactor: simplify local dep lookups", "tree": {"sha": "2099ddffd79e4f5b2122346126259a6a33b1662a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2099ddffd79e4f5b2122346126259a6a33b1662a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9d637f5846b92f2c17b98985c47dea795064d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9d637f5846b92f2c17b98985c47dea795064d2", "html_url": "https://github.com/rust-lang/rust/commit/4b9d637f5846b92f2c17b98985c47dea795064d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9d637f5846b92f2c17b98985c47dea795064d2/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f6229b9aada69389be4ead0ecbec8aed5892a24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6229b9aada69389be4ead0ecbec8aed5892a24", "html_url": "https://github.com/rust-lang/rust/commit/7f6229b9aada69389be4ead0ecbec8aed5892a24"}], "stats": {"total": 280, "additions": 26, "deletions": 254}, "files": [{"sha": "1d423ac34919b421a31e4f77f4e63030746082a6", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 26, "deletions": 254, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/4b9d637f5846b92f2c17b98985c47dea795064d2/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9d637f5846b92f2c17b98985c47dea795064d2/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=4b9d637f5846b92f2c17b98985c47dea795064d2", "patch": "@@ -17,6 +17,10 @@ use std::str;\n \n use structopt::StructOpt;\n \n+#[path = \"test/mod.rs\"]\n+#[cfg(test)]\n+mod cargo_fmt_tests;\n+\n #[derive(StructOpt, Debug)]\n #[structopt(\n     bin_name = \"cargo fmt\",\n@@ -356,7 +360,7 @@ fn get_targets_root_only(\n     manifest_path: Option<&Path>,\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n+    let metadata = get_cargo_metadata(manifest_path)?;\n     let workspace_root_path = PathBuf::from(&metadata.workspace_root).canonicalize()?;\n     let (in_workspace_root, current_dir_manifest) = if let Some(target_manifest) = manifest_path {\n         (\n@@ -400,34 +404,29 @@ fn get_targets_recursive(\n     mut targets: &mut BTreeSet<Target>,\n     visited: &mut BTreeSet<String>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n-    let metadata_with_deps = get_cargo_metadata(manifest_path, true)?;\n-\n-    for package in metadata.packages {\n+    let metadata = get_cargo_metadata(manifest_path)?;\n+    for package in &metadata.packages {\n         add_targets(&package.targets, &mut targets);\n \n-        // Look for local dependencies.\n-        for dependency in package.dependencies {\n-            if dependency.source.is_some() || visited.contains(&dependency.name) {\n+        // Look for local dependencies using information available since cargo v1.51\n+        // It's theoretically possible someone could use a newer version of rustfmt with\n+        // a much older version of `cargo`, but we don't try to explicitly support that scenario.\n+        // If someone reports an issue with path-based deps not being formatted, be sure to\n+        // confirm their version of `cargo` (not `cargo-fmt`) is >= v1.51\n+        // https://github.com/rust-lang/cargo/pull/8994\n+        for dependency in &package.dependencies {\n+            if dependency.path.is_none() || visited.contains(&dependency.name) {\n                 continue;\n             }\n \n-            let dependency_package = metadata_with_deps\n-                .packages\n-                .iter()\n-                .find(|p| p.name == dependency.name && p.source.is_none());\n-            let manifest_path = if let Some(dep_pkg) = dependency_package {\n-                PathBuf::from(&dep_pkg.manifest_path)\n-            } else {\n-                let mut package_manifest_path = PathBuf::from(&package.manifest_path);\n-                package_manifest_path.pop();\n-                package_manifest_path.push(&dependency.name);\n-                package_manifest_path.push(\"Cargo.toml\");\n-                package_manifest_path\n-            };\n-\n-            if manifest_path.exists() {\n-                visited.insert(dependency.name);\n+            let manifest_path = PathBuf::from(dependency.path.as_ref().unwrap()).join(\"Cargo.toml\");\n+            if manifest_path.exists()\n+                && !metadata\n+                    .packages\n+                    .iter()\n+                    .any(|p| p.manifest_path.eq(&manifest_path))\n+            {\n+                visited.insert(dependency.name.to_owned());\n                 get_targets_recursive(Some(&manifest_path), &mut targets, visited)?;\n             }\n         }\n@@ -441,8 +440,7 @@ fn get_targets_with_hitlist(\n     hitlist: &[String],\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(manifest_path, false)?;\n-\n+    let metadata = get_cargo_metadata(manifest_path)?;\n     let mut workspace_hitlist: BTreeSet<&String> = BTreeSet::from_iter(hitlist);\n \n     for package in metadata.packages {\n@@ -527,14 +525,9 @@ fn run_rustfmt(\n         .unwrap_or(SUCCESS))\n }\n \n-fn get_cargo_metadata(\n-    manifest_path: Option<&Path>,\n-    include_deps: bool,\n-) -> Result<cargo_metadata::Metadata, io::Error> {\n+fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Metadata, io::Error> {\n     let mut cmd = cargo_metadata::MetadataCommand::new();\n-    if !include_deps {\n-        cmd.no_deps();\n-    }\n+    cmd.no_deps();\n     if let Some(manifest_path) = manifest_path {\n         cmd.manifest_path(manifest_path);\n     }\n@@ -551,224 +544,3 @@ fn get_cargo_metadata(\n         }\n     }\n }\n-\n-#[cfg(test)]\n-mod cargo_fmt_tests {\n-    use super::*;\n-\n-    #[test]\n-    fn default_options() {\n-        let empty: Vec<String> = vec![];\n-        let o = Opts::from_iter(&empty);\n-        assert_eq!(false, o.quiet);\n-        assert_eq!(false, o.verbose);\n-        assert_eq!(false, o.version);\n-        assert_eq!(false, o.check);\n-        assert_eq!(empty, o.packages);\n-        assert_eq!(empty, o.rustfmt_options);\n-        assert_eq!(false, o.format_all);\n-        assert_eq!(None, o.manifest_path);\n-        assert_eq!(None, o.message_format);\n-    }\n-\n-    #[test]\n-    fn good_options() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"-q\",\n-            \"-p\",\n-            \"p1\",\n-            \"-p\",\n-            \"p2\",\n-            \"--message-format\",\n-            \"short\",\n-            \"--check\",\n-            \"--\",\n-            \"--edition\",\n-            \"2018\",\n-        ]);\n-        assert_eq!(true, o.quiet);\n-        assert_eq!(false, o.verbose);\n-        assert_eq!(false, o.version);\n-        assert_eq!(true, o.check);\n-        assert_eq!(vec![\"p1\", \"p2\"], o.packages);\n-        assert_eq!(vec![\"--edition\", \"2018\"], o.rustfmt_options);\n-        assert_eq!(false, o.format_all);\n-        assert_eq!(Some(String::from(\"short\")), o.message_format);\n-    }\n-\n-    #[test]\n-    fn unexpected_option() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"unexpected\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn unexpected_flag() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--flag\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn mandatory_separator() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--emit\"])\n-                .is_err()\n-        );\n-        assert!(\n-            !Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"--\", \"--emit\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn multiple_packages_one_by_one() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"-p\",\n-            \"package1\",\n-            \"--package\",\n-            \"package2\",\n-            \"-p\",\n-            \"package3\",\n-        ]);\n-        assert_eq!(3, o.packages.len());\n-    }\n-\n-    #[test]\n-    fn multiple_packages_grouped() {\n-        let o = Opts::from_iter(&[\n-            \"test\",\n-            \"--package\",\n-            \"package1\",\n-            \"package2\",\n-            \"-p\",\n-            \"package3\",\n-            \"package4\",\n-        ]);\n-        assert_eq!(4, o.packages.len());\n-    }\n-\n-    #[test]\n-    fn empty_packages_1() {\n-        assert!(Opts::clap().get_matches_from_safe(&[\"test\", \"-p\"]).is_err());\n-    }\n-\n-    #[test]\n-    fn empty_packages_2() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--\", \"--check\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn empty_packages_3() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--verbose\"])\n-                .is_err()\n-        );\n-    }\n-\n-    #[test]\n-    fn empty_packages_4() {\n-        assert!(\n-            Opts::clap()\n-                .get_matches_from_safe(&[\"test\", \"-p\", \"--check\"])\n-                .is_err()\n-        );\n-    }\n-\n-    mod convert_message_format_to_rustfmt_args_tests {\n-        use super::*;\n-\n-        #[test]\n-        fn invalid_message_format() {\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"awesome\", &mut vec![]),\n-                Err(String::from(\n-                    \"invalid --message-format value: awesome. Allowed values are: short|json|human\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format_and_check_arg() {\n-            let mut args = vec![String::from(\"--check\")];\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n-                Err(String::from(\n-                    \"cannot include --check arg when --message-format is set to json\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format_and_emit_arg() {\n-            let mut args = vec![String::from(\"--emit\"), String::from(\"checkstyle\")];\n-            assert_eq!(\n-                convert_message_format_to_rustfmt_args(\"json\", &mut args),\n-                Err(String::from(\n-                    \"cannot include --emit arg when --message-format is set to json\"\n-                )),\n-            );\n-        }\n-\n-        #[test]\n-        fn json_message_format() {\n-            let mut args = vec![String::from(\"--edition\"), String::from(\"2018\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"json\", &mut args).is_ok());\n-            assert_eq!(\n-                args,\n-                vec![\n-                    String::from(\"--edition\"),\n-                    String::from(\"2018\"),\n-                    String::from(\"--emit\"),\n-                    String::from(\"json\")\n-                ]\n-            );\n-        }\n-\n-        #[test]\n-        fn human_message_format() {\n-            let exp_args = vec![String::from(\"--emit\"), String::from(\"json\")];\n-            let mut act_args = exp_args.clone();\n-            assert!(convert_message_format_to_rustfmt_args(\"human\", &mut act_args).is_ok());\n-            assert_eq!(act_args, exp_args);\n-        }\n-\n-        #[test]\n-        fn short_message_format() {\n-            let mut args = vec![String::from(\"--check\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n-        }\n-\n-        #[test]\n-        fn short_message_format_included_short_list_files_flag() {\n-            let mut args = vec![String::from(\"--check\"), String::from(\"-l\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(args, vec![String::from(\"--check\"), String::from(\"-l\")]);\n-        }\n-\n-        #[test]\n-        fn short_message_format_included_long_list_files_flag() {\n-            let mut args = vec![String::from(\"--check\"), String::from(\"--files-with-diff\")];\n-            assert!(convert_message_format_to_rustfmt_args(\"short\", &mut args).is_ok());\n-            assert_eq!(\n-                args,\n-                vec![String::from(\"--check\"), String::from(\"--files-with-diff\")]\n-            );\n-        }\n-    }\n-}"}]}