{"sha": "c7e64f54c86a05ddd09fc3da4e98a8d748658337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTY0ZjU0Yzg2YTA1ZGRkMDlmYzNkYTRlOThhOGQ3NDg2NTgzMzc=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:34:01Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:40:11Z"}, "message": "remove try_trait lang item", "tree": {"sha": "1f2329ed5d4c1cd029e2a03cdf7bf56e1a0069ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2329ed5d4c1cd029e2a03cdf7bf56e1a0069ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e64f54c86a05ddd09fc3da4e98a8d748658337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e64f54c86a05ddd09fc3da4e98a8d748658337", "html_url": "https://github.com/rust-lang/rust/commit/c7e64f54c86a05ddd09fc3da4e98a8d748658337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e64f54c86a05ddd09fc3da4e98a8d748658337/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "627f473dd426497972cce58ba64e8b0ff2409078", "url": "https://api.github.com/repos/rust-lang/rust/commits/627f473dd426497972cce58ba64e8b0ff2409078", "html_url": "https://github.com/rust-lang/rust/commit/627f473dd426497972cce58ba64e8b0ff2409078"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "996a01d413cbc1f03c0867cc7b32ac2e611171bb", "filename": "src/libcore/ops/try.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=c7e64f54c86a05ddd09fc3da4e98a8d748658337", "patch": "@@ -25,7 +25,6 @@\n     )\n )]\n #[doc(alias = \"?\")]\n-#[cfg_attr(not(bootstrap), lang = \"try_trait\")]\n pub trait Try {\n     /// The type of this value when viewed as successful.\n     #[unstable(feature = \"try_trait\", issue = \"42327\")]"}, {"sha": "a503e3534e3bdf1d44b30891c449a3afae17651a", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=c7e64f54c86a05ddd09fc3da4e98a8d748658337", "patch": "@@ -194,8 +194,6 @@ language_item_table! {\n     ShrAssignTraitLangItem,      \"shr_assign\",         shr_assign_trait,        Target::Trait;\n     IndexTraitLangItem,          \"index\",              index_trait,             Target::Trait;\n     IndexMutTraitLangItem,       \"index_mut\",          index_mut_trait,         Target::Trait;\n-    TryTraitLangItem,            \"try_trait\",                try_trait,               Target::Trait;\n-\n     UnsafeCellTypeLangItem,      \"unsafe_cell\",        unsafe_cell_type,        Target::Struct;\n     VaListTypeLangItem,          \"va_list\",            va_list,                 Target::Struct;\n "}, {"sha": "c74870306869b4bfefe20a01daeebab45d6f19e6", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c7e64f54c86a05ddd09fc3da4e98a8d748658337", "patch": "@@ -400,17 +400,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n                         self.note_version_mismatch(&mut err, &trait_ref);\n-                        //self.sugggest_await_before_try(&mut err, &obligation, &trait_ref);\n-                        debug!(\n-                            \"suggest_await_befor_try: trait_predicate={:?} obligation={:?}, trait_ref={:?}\",\n-                            trait_predicate, obligation, trait_ref\n-                        );\n-                        self.suggest_await_befor_try(\n-                            &mut err,\n-                            &obligation,\n-                            trait_ref.self_ty(),\n-                            span,\n-                        );\n+                        self.suggest_await_before_try(&mut err, &obligation, &trait_ref, span);\n                         if self.suggest_impl_trait(&mut err, span, &obligation, &trait_ref) {\n                             err.emit();\n                             return;"}, {"sha": "b28f0001cd9740274c8671b9a058fb2d344a8756", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e64f54c86a05ddd09fc3da4e98a8d748658337/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c7e64f54c86a05ddd09fc3da4e98a8d748658337", "patch": "@@ -154,11 +154,11 @@ pub trait InferCtxtExt<'tcx> {\n     fn suggest_new_overflow_limit(&self, err: &mut DiagnosticBuilder<'_>);\n \n     /// Suggest to await before try: future? => future.await?\n-    fn suggest_await_befor_try(\n+    fn suggest_await_before_try(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         obligation: &PredicateObligation<'tcx>,\n-        ty: Ty<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         span: Span,\n     );\n }\n@@ -1777,21 +1777,23 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         ));\n     }\n \n-    fn suggest_await_befor_try(\n+    fn suggest_await_before_try(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         obligation: &PredicateObligation<'tcx>,\n-        ty: Ty<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         span: Span,\n     ) {\n-        debug!(\"suggest_await_befor_try: obligation={:?}, span={:?}\", obligation, span);\n+        debug!(\n+            \"suggest_await_befor_try: obligation={:?}, span={:?}, trait_ref={:?}\",\n+            obligation, span, trait_ref\n+        );\n         let body_hir_id = obligation.cause.body_id;\n         let item_id = self.tcx.hir().get_parent_node(body_hir_id);\n+\n         if let Some(body_id) = self.tcx.hir().maybe_body_owned_by(item_id) {\n             let body = self.tcx.hir().body(body_id);\n             if let Some(hir::GeneratorKind::Async(_)) = body.generator_kind {\n-                // Check for `Future` implementations by constructing a predicate to\n-                // prove: `<T as Future>::Output == U`\n                 let future_trait = self.tcx.lang_items().future_trait().unwrap();\n                 let item_def_id = self\n                     .tcx\n@@ -1803,14 +1805,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 // `<T as Future>::Output`\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n-                    substs: self\n-                        .tcx\n-                        .mk_substs_trait(ty, self.fresh_substs_for_item(span, item_def_id)),\n+                    substs: self.tcx.mk_substs_trait(\n+                        trait_ref.self_ty(),\n+                        self.fresh_substs_for_item(span, item_def_id),\n+                    ),\n                     // `Future::Output`\n                     item_def_id,\n                 };\n \n-                let cause = ObligationCause::misc(span, body_hir_id);\n+                //let cause = ObligationCause::misc(span, body_hir_id);\n                 let mut selcx = SelectionContext::new(self);\n \n                 let mut obligations = vec![];\n@@ -1824,19 +1827,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n \n                 debug!(\"suggest_await_befor_try: normalized_projection_type {:?}\", normalized_ty);\n-                let try_trait_ref_id = self.tcx.lang_items().try_trait().unwrap();\n-                if let Some(try_trait_ref) = self.tcx.impl_trait_ref(try_trait_ref_id) {\n-                    let try_predicate = try_trait_ref.without_const().to_predicate();\n-                    let try_obligation =\n-                        Obligation::new(cause, obligation.param_env, try_predicate);\n-                    debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n-                    if self.predicate_may_hold(&try_obligation) {\n-                        debug!(\"try_obligation holds\");\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                let try_obligation = self.mk_obligation_for_def_id(\n+                    trait_ref.def_id(),\n+                    normalized_ty,\n+                    obligation.cause.clone(),\n+                    obligation.param_env,\n+                );\n+                debug!(\"suggest_await_befor_try: try_trait_obligation {:?}\", try_obligation);\n+                if self.predicate_may_hold(&try_obligation) {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        if snippet.ends_with('?') {\n                             err.span_suggestion(\n                                 span,\n                                 \"consider using `.await` here\",\n-                                format!(\"{}.await\", snippet),\n+                                format!(\"{}.await?\", snippet.trim_end_matches('?')),\n                                 Applicability::MaybeIncorrect,\n                             );\n                         }"}]}