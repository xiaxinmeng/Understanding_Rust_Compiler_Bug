{"sha": "059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "node_id": "C_kwDOAAsO6NoAKDA1OWJiZjdlYTk0NWQ1YzZkYzJjYTVhZjVhYmQzZWI1YzY2NzdlY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-13T22:45:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-13T22:45:18Z"}, "message": "Rollup merge of #103008 - aliemjay:opaque-parent-substs, r=oli-obk\n\nreplace ReErased with fresh region vars in opaque types\n\nSee inline comments.\n\nPrior art #102943. cc ``@compiler-errors`` ``@oli-obk``\n\nFixes #100267\nFixes #101940\nFixes #102649\nFixes #102510", "tree": {"sha": "1fed6adec27c7fa5d54a72c2c971542f9eea0bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fed6adec27c7fa5d54a72c2c971542f9eea0bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjSJT+CRBK7hj4Ov3rIwAA3EcIAK8BjoN5JtKm97CD5R9wnn26\n00diS0+OrT8XFWlwvki001zNrLXAAiJOq1SKKNG7LnzgeOyWLja/TtCJ5LMSvHzS\nKiHjt0Q3j+7BWS3l3uNj+MnU/LZ+ExPv2M4pLeX9fJDq8cF5meVCQlVy6RA4eddh\n4dADWkT+0C6TWRW8g/80CjWa8qcRX8i9CY7eN8LxWVa2frBKwAOXD5BLCJ4cWWOE\nP4bvcyBgi+mRv6zBCxUjbBypGdpDn3U7X4Uv7YF3eAHY+Xw4IUjF+8AEAj+3xORG\nTW7smkchGoDrCydK/Xbdi2zYLRy9dmJgLuTM1LloG08mduIwBv+OY/zMn67+0oQ=\n=9uM8\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fed6adec27c7fa5d54a72c2c971542f9eea0bdc\nparent 9692d98e4f3ed8e6076ad1e741d9ed106f40bc3e\nparent d2d3d9433228adb35cfec0de8f3747879e38751f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665701118 +0200\ncommitter GitHub <noreply@github.com> 1665701118 +0200\n\nRollup merge of #103008 - aliemjay:opaque-parent-substs, r=oli-obk\n\nreplace ReErased with fresh region vars in opaque types\n\nSee inline comments.\n\nPrior art #102943. cc ``@compiler-errors`` ``@oli-obk``\n\nFixes #100267\nFixes #101940\nFixes #102649\nFixes #102510\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "html_url": "https://github.com/rust-lang/rust/commit/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9692d98e4f3ed8e6076ad1e741d9ed106f40bc3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9692d98e4f3ed8e6076ad1e741d9ed106f40bc3e", "html_url": "https://github.com/rust-lang/rust/commit/9692d98e4f3ed8e6076ad1e741d9ed106f40bc3e"}, {"sha": "d2d3d9433228adb35cfec0de8f3747879e38751f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d3d9433228adb35cfec0de8f3747879e38751f", "html_url": "https://github.com/rust-lang/rust/commit/d2d3d9433228adb35cfec0de8f3747879e38751f"}], "stats": {"total": 214, "additions": 209, "deletions": 5}, "files": [{"sha": "c3583eeb430be53112ce4d32064ddd9e912f3250", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "patch": "@@ -732,8 +732,6 @@ fn check_opaque_meets_bounds<'tcx>(\n     span: Span,\n     origin: &hir::OpaqueTyOrigin,\n ) {\n-    let hidden_type = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n-\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let defining_use_anchor = match *origin {\n         hir::OpaqueTyOrigin::FnReturn(did) | hir::OpaqueTyOrigin::AsyncFn(did) => did,\n@@ -748,14 +746,26 @@ fn check_opaque_meets_bounds<'tcx>(\n     let ocx = ObligationCtxt::new(&infcx);\n     let opaque_ty = tcx.mk_opaque(def_id.to_def_id(), substs);\n \n+    // `ReErased` regions appear in the \"parent_substs\" of closures/generators.\n+    // We're ignoring them here and replacing them with fresh region variables.\n+    // See tests in ui/type-alias-impl-trait/closure_{parent_substs,wf_outlives}.rs.\n+    //\n+    // FIXME: Consider wrapping the hidden type in an existential `Binder` and instantiating it\n+    // here rather than using ReErased.\n+    let hidden_ty = tcx.bound_type_of(def_id.to_def_id()).subst(tcx, substs);\n+    let hidden_ty = tcx.fold_regions(hidden_ty, |re, _dbi| match re.kind() {\n+        ty::ReErased => infcx.next_region_var(RegionVariableOrigin::MiscVariable(span)),\n+        _ => re,\n+    });\n+\n     let misc_cause = traits::ObligationCause::misc(span, hir_id);\n \n-    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_type) {\n+    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_ty) {\n         Ok(infer_ok) => ocx.register_infer_ok_obligations(infer_ok),\n         Err(ty_err) => {\n             tcx.sess.delay_span_bug(\n                 span,\n-                &format!(\"could not unify `{hidden_type}` with revealed type:\\n{ty_err}\"),\n+                &format!(\"could not unify `{hidden_ty}` with revealed type:\\n{ty_err}\"),\n             );\n         }\n     }\n@@ -764,7 +774,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     // Defining use functions may have more bounds than the opaque type, which is ok, as long as the\n     // hidden type is well formed even without those bounds.\n     let predicate =\n-        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_type.into())).to_predicate(tcx);\n+        ty::Binder::dummy(ty::PredicateKind::WellFormed(hidden_ty.into())).to_predicate(tcx);\n     ocx.register_obligation(Obligation::new(misc_cause, param_env, predicate));\n \n     // Check that all obligations are satisfied by the implementation's"}, {"sha": "475f4724ff28f4c4bc24a81ac1c63e2ecc61f1bb", "filename": "src/test/ui/type-alias-impl-trait/closure_parent_substs.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_parent_substs.rs?ref=059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "patch": "@@ -0,0 +1,65 @@\n+// When WF checking the hidden type in the ParamEnv of the opaque type,\n+// one complication arises when the hidden type is a closure/generator:\n+// the \"parent_substs\" of the type may reference lifetime parameters\n+// not present in the opaque type.\n+// These region parameters are not really useful in this check.\n+// So here we ignore them and replace them with fresh region variables.\n+\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// Basic test\n+mod test1 {\n+    // Hidden type = Closure['_#0r]\n+    type Opaque = impl Sized;\n+\n+    fn define<'a: 'a>() -> Opaque {\n+        || {}\n+    }\n+}\n+\n+// the region vars cannot both be equal to `'static` or `'empty`\n+mod test2 {\n+    trait Trait {}\n+\n+    // Hidden type = Closure['a, '_#0r, '_#1r]\n+    // Constraints = [('_#0r: 'a), ('a: '_#1r)]\n+    type Opaque<'a>\n+    where\n+        &'a (): Trait,\n+    = impl Sized + 'a;\n+\n+    fn define<'a, 'x, 'y>() -> Opaque<'a>\n+    where\n+        &'a (): Trait,\n+        'x: 'a,\n+        'a: 'y,\n+    {\n+        || {}\n+    }\n+}\n+\n+// the region var cannot be equal to `'a` or `'b`\n+mod test3 {\n+    trait Trait {}\n+\n+    // Hidden type = Closure['a, 'b, '_#0r]\n+    // Constraints = [('_#0r: 'a), ('_#0r: 'b)]\n+    type Opaque<'a, 'b>\n+    where\n+        (&'a (), &'b ()): Trait,\n+    = impl Sized + 'a + 'b;\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        (&'a (), &'b ()): Trait,\n+        'x: 'a,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "53974dbb36bdfb453983e43c2e65055332a9e397", "filename": "src/test/ui/type-alias-impl-trait/closure_wf_outlives.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.rs?ref=059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "patch": "@@ -0,0 +1,65 @@\n+// If the hidden type is a closure, we require the \"outlives\" bounds that appear on the\n+// defining site to also appear on the opaque type.\n+//\n+// It's not clear if this is the desired behavior but at least\n+// it's consistent and has no back-compat risk.\n+\n+// check-fail\n+\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+// requires `'a: 'b` bound\n+mod test1 {\n+    type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+    //~^ ERROR lifetime bound not satisfied\n+\n+    fn define<'a, 'b>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// Same as the above but through indirection `'x`\n+mod test2 {\n+    type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+    //~^ ERROR cannot infer an appropriate lifetime\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'x,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// fixed version of the above\n+mod test2_fixed {\n+    type Opaque<'a: 'b, 'b> = impl Sized + 'a + 'b;\n+\n+    fn define<'a, 'b, 'x>() -> Opaque<'a, 'b>\n+    where\n+        'a: 'x,\n+        'x: 'b,\n+    {\n+        || {}\n+    }\n+}\n+\n+// requires `T: 'static`\n+mod test3 {\n+    type Opaque<T> = impl Sized;\n+    //~^ ERROR the parameter type `T` may not live long enough\n+\n+    fn define<T>() -> Opaque<T>\n+    where\n+        T: 'static,\n+    {\n+        || {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ae6462bb62ce57e2f6aa5df29eb89847241a4f22", "filename": "src/test/ui/type-alias-impl-trait/closure_wf_outlives.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosure_wf_outlives.stderr?ref=059bbf7ea945d5c6dc2ca5af5abd3eb5c6677ece", "patch": "@@ -0,0 +1,64 @@\n+error[E0478]: lifetime bound not satisfied\n+  --> $DIR/closure_wf_outlives.rs:14:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lifetime parameter instantiated with the lifetime `'a` as defined here\n+  --> $DIR/closure_wf_outlives.rs:14:17\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                 ^^\n+note: but lifetime parameter must outlive the lifetime `'b` as defined here\n+  --> $DIR/closure_wf_outlives.rs:14:21\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                     ^^\n+\n+error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'a` as defined here...\n+  --> $DIR/closure_wf_outlives.rs:27:17\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                 ^^\n+note: ...so that the declared lifetime parameter bounds are satisfied\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+note: but, the lifetime must be valid for the lifetime `'b` as defined here...\n+  --> $DIR/closure_wf_outlives.rs:27:21\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                     ^^\n+note: ...so that the declared lifetime parameter bounds are satisfied\n+  --> $DIR/closure_wf_outlives.rs:27:27\n+   |\n+LL |     type Opaque<'a, 'b> = impl Sized + 'a + 'b;\n+   |                           ^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/closure_wf_outlives.rs:54:22\n+   |\n+LL |     type Opaque<T> = impl Sized;\n+   |                      ^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/closure_wf_outlives.rs:59:12\n+   |\n+LL |         T: 'static,\n+   |            ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     type Opaque<T: 'static> = impl Sized;\n+   |                  +++++++++\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0310, E0478, E0495.\n+For more information about an error, try `rustc --explain E0310`."}]}