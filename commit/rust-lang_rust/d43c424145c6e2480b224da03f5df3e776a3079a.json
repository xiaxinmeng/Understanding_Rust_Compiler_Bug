{"sha": "d43c424145c6e2480b224da03f5df3e776a3079a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0M2M0MjQxNDVjNmUyNDgwYjIyNGRhMDNmNWRmM2U3NzZhMzA3OWE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-25T12:18:38Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-11-25T12:18:38Z"}, "message": "Rustup to rust-lang/rust#66671", "tree": {"sha": "fe96332a2156db565c2d2f505a7b885186fd5b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe96332a2156db565c2d2f505a7b885186fd5b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d43c424145c6e2480b224da03f5df3e776a3079a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl3bxp4ACgkQaTCGhp1Q\nZjfU7xAAjyaG3bEScfpgRw7vwggvskPWKpvqZUEAy1EcALLnGDbsijyZ/SKDAm+r\nm4hePtbDpdL8pRChS6XDQux1Q2t4hqzI/LNX0c+K69GUR7e8K40vP6yu0tz5aDbU\nTJHRk3x1loKpU/+cCOpfadok+eR+uPDjqgOsLJ6aGWIdb7IlCiMZwESmbGlTrNz0\nziq9KQR1wMkqik9metj3ZKk3ku3LwTER+BbiSXDk1u9jP8itsEPFWCzlo/KpwSnm\nV3ZKPyk72ytPoXx40CO5lSAnXTEh957o1RP/Yp6NGbiq6rKokYqqfd8flEz7Vrz5\nxnusNrugWBUP+mq0KuaOnLQAo+wIs2WfwmYKIiHJXWEuzl8zHMkl5x0Nm/5IXlne\nxOXJiehoFMseAO/IHqyh7cvvG2KBiRhmCHdg/k2FN/iZasz3CxNSfU1f5W6VLS+r\nF/ctmUrPNaiLQ7WeX4c5OtrPW699YbBPdt1hhmWDbSGwJj+MY3W6b8UUpvezpeuR\n4mfXxDdBrodPWGjjWj38LCUNCR3jxJK914x+3jUE42ajFj/Yu0k/cn4NJuw1kNml\n9KhcPHURjbfaidhPmAYYyM5Qt1BBpjUCRol9qM2U6CIlPQ7Lgc10PKuKAKFjxHTn\nLvjUMosyieRH5utMS/jYgfv4VzxfIXsGAvL3YvPvjZ+phxwprTs=\n=iRO0\n-----END PGP SIGNATURE-----", "payload": "tree fe96332a2156db565c2d2f505a7b885186fd5b04\nparent cc35165f52c16b884d06e1efc76c8f2bf73f1cbd\nauthor flip1995 <hello@philkrones.com> 1574684318 +0100\ncommitter flip1995 <hello@philkrones.com> 1574684318 +0100\n\nRustup to rust-lang/rust#66671\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d43c424145c6e2480b224da03f5df3e776a3079a", "html_url": "https://github.com/rust-lang/rust/commit/d43c424145c6e2480b224da03f5df3e776a3079a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d43c424145c6e2480b224da03f5df3e776a3079a/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc35165f52c16b884d06e1efc76c8f2bf73f1cbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc35165f52c16b884d06e1efc76c8f2bf73f1cbd", "html_url": "https://github.com/rust-lang/rust/commit/cc35165f52c16b884d06e1efc76c8f2bf73f1cbd"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "07c816a426fb3b3088b9db65149f271c0f710b93", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -101,7 +101,7 @@ fn check_arg(name: Name, arg: Name, needle: &Expr) -> bool {\n \n fn get_path_name(expr: &Expr) -> Option<Name> {\n     match expr.kind {\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(_, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => get_path_name(e),\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(_, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => get_path_name(e),\n         ExprKind::Block(ref b, _) => {\n             if b.stmts.is_empty() {\n                 b.expr.as_ref().and_then(|p| get_path_name(p))"}, {"sha": "1a73caa1d452320d3fbdb9031f050b9a6ae8972f", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -105,7 +105,7 @@ fn check_cond<'a, 'tcx, 'b>(\n         if let ExprKind::MethodCall(ref path, _, ref params) = check.kind;\n         if params.len() >= 2;\n         if path.ident.name == sym!(contains_key);\n-        if let ExprKind::AddrOf(_, ref key) = params[1].kind;\n+        if let ExprKind::AddrOf(_, _, ref key) = params[1].kind;\n         then {\n             let map = &params[0];\n             let obj_ty = walk_ptrs_ty(cx.tables.expr_ty(map));"}, {"sha": "5f850f7a0558718bb8cdf37e89a5f1aa0dcaf4c5", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},\n                     // &foo == &bar\n-                    (&ExprKind::AddrOf(_, ref l), &ExprKind::AddrOf(_, ref r)) => {\n+                    (&ExprKind::AddrOf(_, _, ref l), &ExprKind::AddrOf(_, _, ref r)) => {\n                         let lty = cx.tables.expr_ty(l);\n                         let rty = cx.tables.expr_ty(r);\n                         let lcpy = is_copy(cx, lty);\n@@ -143,7 +143,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         }\n                     },\n                     // &foo == bar\n-                    (&ExprKind::AddrOf(_, ref l), _) => {\n+                    (&ExprKind::AddrOf(_, _, ref l), _) => {\n                         let lty = cx.tables.expr_ty(l);\n                         let lcpy = is_copy(cx, lty);\n                         if (requires_ref || lcpy)\n@@ -161,7 +161,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                         }\n                     },\n                     // foo == &bar\n-                    (_, &ExprKind::AddrOf(_, ref r)) => {\n+                    (_, &ExprKind::AddrOf(_, _, ref r)) => {\n                         let rty = cx.tables.expr_ty(r);\n                         let rcpy = is_copy(cx, rty);\n                         if (requires_ref || rcpy)"}, {"sha": "e32e15be0530a344b723243bdcebe984dba6e71b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -328,7 +328,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // ```\n             //\n             // TODO: fix this\n-            ExprKind::AddrOf(_, _) => {\n+            ExprKind::AddrOf(_, _, _) => {\n                 return;\n             }\n             _ => {}"}, {"sha": "ca0523d0d42bbffa50f0658542202fb661441847", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -135,7 +135,7 @@ fn write_output_string(write_args: &HirVec<Expr>) -> Option<String> {\n         if write_args.len() > 1;\n         if let ExprKind::Call(_, ref output_args) = write_args[1].kind;\n         if output_args.len() > 0;\n-        if let ExprKind::AddrOf(_, ref output_string_expr) = output_args[0].kind;\n+        if let ExprKind::AddrOf(_, _, ref output_string_expr) = output_args[0].kind;\n         if let ExprKind::Array(ref string_exprs) = output_string_expr.kind;\n         // we only want to provide an automatic suggestion for simple (non-format) strings\n         if string_exprs.len() == 1;"}, {"sha": "66ac690a86c08d8c8e56017d8b21ce13011a6954", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -73,7 +73,7 @@ fn span_useless_format<T: LintContext>(cx: &T, span: Span, help: &str, mut sugg:\n \n fn on_argumentv1_new<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, arms: &'tcx [Arm]) -> Option<String> {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref format_args) = expr.kind;\n+        if let ExprKind::AddrOf(_, _, ref format_args) = expr.kind;\n         if let ExprKind::Array(ref elems) = arms[0].body.kind;\n         if elems.len() == 1;\n         if let Some(args) = match_function_call(cx, &elems[0], &paths::FMT_ARGUMENTV1_NEW);\n@@ -115,13 +115,13 @@ fn on_new_v1<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<S\n         if let Some(args) = match_function_call(cx, expr, &paths::FMT_ARGUMENTS_NEW_V1);\n         if args.len() == 2;\n         // Argument 1 in `new_v1()`\n-        if let ExprKind::AddrOf(_, ref arr) = args[0].kind;\n+        if let ExprKind::AddrOf(_, _, ref arr) = args[0].kind;\n         if let ExprKind::Array(ref pieces) = arr.kind;\n         if pieces.len() == 1;\n         if let ExprKind::Lit(ref lit) = pieces[0].kind;\n         if let LitKind::Str(ref s, _) = lit.node;\n         // Argument 2 in `new_v1()`\n-        if let ExprKind::AddrOf(_, ref arg1) = args[1].kind;\n+        if let ExprKind::AddrOf(_, _, ref arg1) = args[1].kind;\n         if let ExprKind::Match(ref matchee, ref arms, MatchSource::Normal) = arg1.kind;\n         if arms.len() == 1;\n         if let ExprKind::Tup(ref tup) = matchee.kind;\n@@ -143,13 +143,13 @@ fn on_new_v1_fmt<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Opti\n         if args.len() == 3;\n         if check_unformatted(&args[2]);\n         // Argument 1 in `new_v1_formatted()`\n-        if let ExprKind::AddrOf(_, ref arr) = args[0].kind;\n+        if let ExprKind::AddrOf(_, _, ref arr) = args[0].kind;\n         if let ExprKind::Array(ref pieces) = arr.kind;\n         if pieces.len() == 1;\n         if let ExprKind::Lit(ref lit) = pieces[0].kind;\n         if let LitKind::Str(..) = lit.node;\n         // Argument 2 in `new_v1_formatted()`\n-        if let ExprKind::AddrOf(_, ref arg1) = args[1].kind;\n+        if let ExprKind::AddrOf(_, _, ref arg1) = args[1].kind;\n         if let ExprKind::Match(ref matchee, ref arms, MatchSource::Normal) = arg1.kind;\n         if arms.len() == 1;\n         if let ExprKind::Tup(ref tup) = matchee.kind;\n@@ -173,7 +173,7 @@ fn on_new_v1_fmt<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Opti\n /// ```\n fn check_unformatted(expr: &Expr) -> bool {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref expr) = expr.kind;\n+        if let ExprKind::AddrOf(_, _, ref expr) = expr.kind;\n         if let ExprKind::Array(ref exprs) = expr.kind;\n         if exprs.len() == 1;\n         // struct `core::fmt::rt::v1::Argument`"}, {"sha": "effd2dc58d4992714b7af26246fa349d0f08510e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     tys.clear();\n                 }\n             },\n-            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(hir::Mutability::Mutable, ref target) => {\n+            Assign(ref target, _) | AssignOp(_, ref target, _) | AddrOf(_, hir::Mutability::Mutable, ref target) => {\n                 self.mutates_static |= is_mutated_static(self.cx, target)\n             },\n             _ => {},"}, {"sha": "697c9adc2e5b18f5b999c6f1549858c9e44d2449", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -163,7 +163,7 @@ fn is_infinite(cx: &LateContext<'_, '_>, expr: &Expr) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(ref block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(_, ref e) => is_infinite(cx, e),\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(_, _, ref e) => is_infinite(cx, e),\n         ExprKind::Call(ref path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 match_qpath(qpath, &paths::REPEAT).into()"}, {"sha": "ff8ddcedfb5917053da7b1243cf6a5e79b350dbe", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -674,7 +674,7 @@ fn never_loop_expr(expr: &Expr, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Cast(ref e, _)\n         | ExprKind::Type(ref e, _)\n         | ExprKind::Field(ref e, _)\n-        | ExprKind::AddrOf(_, ref e)\n+        | ExprKind::AddrOf(_, _, ref e)\n         | ExprKind::Struct(_, _, Some(ref e))\n         | ExprKind::Repeat(ref e, _)\n         | ExprKind::DropTemps(ref e) => never_loop_expr(e, main_loop_id),\n@@ -1504,7 +1504,7 @@ fn make_iterator_snippet(cx: &LateContext<'_, '_>, arg: &Expr, applic_ref: &mut\n         // (&x).into_iter() ==> x.iter()\n         // (&mut x).into_iter() ==> x.iter_mut()\n         match &arg.kind {\n-            ExprKind::AddrOf(mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n+            ExprKind::AddrOf(_, mutability, arg_inner) if has_iter_method(cx, cx.tables.expr_ty(&arg_inner)).is_some() => {\n                 let meth_name = match mutability {\n                     Mutability::Mutable => \"iter_mut\",\n                     Mutability::Immutable => \"iter\",\n@@ -1549,7 +1549,7 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n                 Mutability::Mutable => \"_mut\",\n             };\n             let arg = match arg.kind {\n-                ExprKind::AddrOf(_, ref expr) => &**expr,\n+                ExprKind::AddrOf(_, _, ref expr) => &**expr,\n                 _ => arg,\n             };\n \n@@ -1873,7 +1873,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 self.prefer_mutable = false;\n                 self.visit_expr(rhs);\n             },\n-            ExprKind::AddrOf(mutbl, ref expr) => {\n+            ExprKind::AddrOf(_, mutbl, ref expr) => {\n                 if mutbl == Mutability::Mutable {\n                     self.prefer_mutable = true;\n                 }\n@@ -2090,7 +2090,7 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(ref lhs, _) if lhs.hir_id == expr.hir_id => *state = VarState::DontWarn,\n-                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => *state = VarState::DontWarn,\n+                    ExprKind::AddrOf(_, mutability, _) if mutability == Mutability::Mutable => *state = VarState::DontWarn,\n                     _ => (),\n                 }\n             }\n@@ -2172,7 +2172,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                             VarState::DontWarn\n                         }\n                     },\n-                    ExprKind::AddrOf(mutability, _) if mutability == Mutability::Mutable => {\n+                    ExprKind::AddrOf(_, mutability, _) if mutability == Mutability::Mutable => {\n                         self.state = VarState::DontWarn\n                     },\n                     _ => (),"}, {"sha": "f3c90473665ec7184ea87e4a18ac2dec2d38bd92", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -570,7 +570,7 @@ fn is_panic_block(block: &Block) -> bool {\n fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm], expr: &Expr) {\n     if has_only_ref_pats(arms) {\n         let mut suggs = Vec::new();\n-        let (title, msg) = if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = ex.kind {\n+        let (title, msg) = if let ExprKind::AddrOf(_, Mutability::Immutable, ref inner) = ex.kind {\n             let span = ex.span.source_callsite();\n             suggs.push((span, Sugg::hir_with_macro_callsite(cx, inner, \"..\").to_string()));\n             ("}, {"sha": "5379f1a3e852754d5a961fe629b93c99ec5c4810", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemDiscriminant {\n                             let mut derefs_needed = ptr_depth;\n                             let mut cur_expr = param;\n                             while derefs_needed > 0  {\n-                                if let ExprKind::AddrOf(_, ref inner_expr) = cur_expr.kind {\n+                                if let ExprKind::AddrOf(_, _, ref inner_expr) = cur_expr.kind {\n                                     derefs_needed -= 1;\n                                     cur_expr = inner_expr;\n                                 } else {"}, {"sha": "ed31690489f7ef56536f24a3873c78b1f237885d", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -90,7 +90,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n                         // argument's type. All that's left is to get\n                         // replacee's path.\n                         let replaced_path = match func_args[0].kind {\n-                            ExprKind::AddrOf(Mutability::Mutable, ref replaced) => {\n+                            ExprKind::AddrOf(_, Mutability::Mutable, ref replaced) => {\n                                 if let ExprKind::Path(QPath::Resolved(None, ref replaced_path)) = replaced.kind {\n                                     replaced_path\n                                 } else {"}, {"sha": "d2f71760a05c118f8eb2b3c80f18de09778fdc14", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -1519,7 +1519,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         let mut arg_root = arg;\n         loop {\n             arg_root = match &arg_root.kind {\n-                hir::ExprKind::AddrOf(_, expr) => expr,\n+                hir::ExprKind::AddrOf(_, _, expr) => expr,\n                 hir::ExprKind::MethodCall(method_name, _, call_args) => {\n                     if call_args.len() == 1\n                         && (method_name.ident.name == sym!(as_str) || method_name.ident.name == sym!(as_ref))\n@@ -1561,7 +1561,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n         applicability: &mut Applicability,\n     ) -> Vec<String> {\n         if_chain! {\n-            if let hir::ExprKind::AddrOf(_, ref format_arg) = a.kind;\n+            if let hir::ExprKind::AddrOf(_, _, ref format_arg) = a.kind;\n             if let hir::ExprKind::Match(ref format_arg_expr, _, _) = format_arg.kind;\n             if let hir::ExprKind::Tup(ref format_arg_expr_tup) = format_arg_expr.kind;\n \n@@ -1578,7 +1578,7 @@ fn lint_expect_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span:\n \n     fn is_call(node: &hir::ExprKind) -> bool {\n         match node {\n-            hir::ExprKind::AddrOf(_, expr) => {\n+            hir::ExprKind::AddrOf(_, _, expr) => {\n                 is_call(&expr.kind)\n             },\n             hir::ExprKind::Call(..)"}, {"sha": "c3fef59e3045653cdd888bfd10a0000a94cebbb5", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -57,8 +57,8 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for MutVisitor<'a, 'tcx> {\n             // Let's ignore the generated code.\n             intravisit::walk_expr(self, arg);\n             intravisit::walk_expr(self, body);\n-        } else if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, ref e) = expr.kind {\n-            if let hir::ExprKind::AddrOf(hir::Mutability::Mutable, _) = e.kind {\n+        } else if let hir::ExprKind::AddrOf(_, hir::Mutability::Mutable, ref e) = expr.kind {\n+            if let hir::ExprKind::AddrOf(_, hir::Mutability::Mutable, _) = e.kind {\n                 span_lint(\n                     self.cx,\n                     MUT_MUT,"}, {"sha": "f8dfa149c9be6678dedb5c4f216601dd4089d73f", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -60,7 +60,7 @@ fn check_arguments<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, arguments: &[Expr], typ\n                         mutbl: Mutability::Immutable,\n                         ..\n                     }) => {\n-                        if let ExprKind::AddrOf(Mutability::Mutable, _) = argument.kind {\n+                        if let ExprKind::AddrOf(_, Mutability::Mutable, _) = argument.kind {\n                             span_lint(\n                                 cx,\n                                 UNNECESSARY_MUT_PASSED,"}, {"sha": "fde5ac621a92014c850d4e4c110a7bf72ab6d8ad", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -77,14 +77,14 @@ fn extract_call<'a, 'tcx>(cx: &'a LateContext<'a, 'tcx>, e: &'tcx Expr) -> Optio\n                         if let ExprKind::Tup(ref conditions) = headerexpr.kind;\n                         if conditions.len() == 2;\n                         then {\n-                            if let ExprKind::AddrOf(_, ref lhs) = conditions[0].kind {\n+                            if let ExprKind::AddrOf(_, _, ref lhs) = conditions[0].kind {\n                                 let mut visitor = MutArgVisitor::new(cx);\n                                 visitor.visit_expr(lhs);\n                                 if let Some(span) = visitor.expr_span() {\n                                     return Some(span);\n                                 }\n                             }\n-                            if let ExprKind::AddrOf(_, ref rhs) = conditions[1].kind {\n+                            if let ExprKind::AddrOf(_, _, ref rhs) = conditions[1].kind {\n                                 let mut visitor = MutArgVisitor::new(cx);\n                                 visitor.visit_expr(rhs);\n                                 if let Some(span) = visitor.expr_span() {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> MutArgVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n         match expr.kind {\n-            ExprKind::AddrOf(Mutability::Mutable, _) => {\n+            ExprKind::AddrOf(_, Mutability::Mutable, _) => {\n                 self.found = true;\n                 return;\n             },"}, {"sha": "1259866236617b80dec79b668b6ac5753a82a816", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrow {\n         if e.span.from_expansion() || self.derived_item.is_some() {\n             return;\n         }\n-        if let ExprKind::AddrOf(Mutability::Immutable, ref inner) = e.kind {\n+        if let ExprKind::AddrOf(_, Mutability::Immutable, ref inner) = e.kind {\n             if let ty::Ref(..) = cx.tables.expr_ty(inner).kind {\n                 for adj3 in cx.tables.expr_adjustments(e).windows(3) {\n                     if let [Adjustment {"}, {"sha": "63cd44fb2a51bedaf2ec4fe564daaae5600029ac", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -58,7 +58,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(_, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             !has_drop(cx, cx.tables.expr_ty(expr))\n@@ -134,7 +134,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         | ExprKind::Type(ref inner, _)\n         | ExprKind::Unary(_, ref inner)\n         | ExprKind::Field(ref inner, _)\n-        | ExprKind::AddrOf(_, ref inner)\n+        | ExprKind::AddrOf(_, _, ref inner)\n         | ExprKind::Box(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, ref fields, ref base) => {\n             if has_drop(cx, cx.tables.expr_ty(expr)) {"}, {"sha": "28ff690758578929396d0b6a1fdea0f6d1a294e8", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -37,7 +37,7 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(_, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n@@ -80,7 +80,7 @@ impl EarlyLintPass for RefInDeref {\n         if_chain! {\n             if let ExprKind::Field(ref object, _) = e.kind;\n             if let ExprKind::Paren(ref parened) = object.kind;\n-            if let ExprKind::AddrOf(_, ref inner) = parened.kind;\n+            if let ExprKind::AddrOf(_, _, ref inner) = parened.kind;\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_sugg("}, {"sha": "827044382d40b7e85e130f890d44fc140ab2920f", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -186,7 +186,7 @@ fn is_trivial_regex(s: &regex_syntax::hir::Hir) -> Option<&'static str> {\n \n fn check_set<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, utf8: bool) {\n     if_chain! {\n-        if let ExprKind::AddrOf(_, ref expr) = expr.kind;\n+        if let ExprKind::AddrOf(_, _, ref expr) = expr.kind;\n         if let ExprKind::Array(ref exprs) = expr.kind;\n         then {\n             for expr in exprs {"}, {"sha": "ee373f1ac2409cbb852e0eb125277b41fc2fc66c", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -313,7 +313,7 @@ fn check_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr, bindings:\n         return;\n     }\n     match expr.kind {\n-        ExprKind::Unary(_, ref e) | ExprKind::Field(ref e, _) | ExprKind::AddrOf(_, ref e) | ExprKind::Box(ref e) => {\n+        ExprKind::Unary(_, ref e) | ExprKind::Field(ref e, _) | ExprKind::AddrOf(_, _, ref e) | ExprKind::Box(ref e) => {\n             check_expr(cx, e, bindings)\n         },\n         ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, _, _) => check_block(cx, block, bindings),\n@@ -365,7 +365,7 @@ fn check_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: &'tcx Ty, bindings: &mut V\n \n fn is_self_shadow(name: Name, expr: &Expr) -> bool {\n     match expr.kind {\n-        ExprKind::Box(ref inner) | ExprKind::AddrOf(_, ref inner) => is_self_shadow(name, inner),\n+        ExprKind::Box(ref inner) | ExprKind::AddrOf(_, _, ref inner) => is_self_shadow(name, inner),\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n         },"}, {"sha": "e5cd0c7092203d0553531509322030f5a6be03af", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -425,9 +425,9 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 self.current = path_pat;\n                 self.print_qpath(path);\n             },\n-            ExprKind::AddrOf(mutability, ref inner) => {\n+            ExprKind::AddrOf(_, mutability, ref inner) => {\n                 let inner_pat = self.next(\"inner\");\n-                println!(\"AddrOf(Mutability::{:?}, ref {}) = {};\", mutability, inner_pat, current);\n+                println!(\"AddrOf(_, Mutability::{:?}, ref {}) = {};\", mutability, inner_pat, current);\n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n             },"}, {"sha": "9d20b6fe2cc7bfb8800b43d5a5a2c3359144b160", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n \n         match (&left.kind, &right.kind) {\n-            (&ExprKind::AddrOf(l_mut, ref le), &ExprKind::AddrOf(r_mut, ref re)) => {\n+            (&ExprKind::AddrOf(_, l_mut, ref le), &ExprKind::AddrOf(_, r_mut, ref re)) => {\n                 l_mut == r_mut && self.eq_expr(le, re)\n             },\n             (&ExprKind::Continue(li), &ExprKind::Continue(ri)) => {\n@@ -398,7 +398,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&e.kind).hash(&mut self.s);\n \n         match e.kind {\n-            ExprKind::AddrOf(m, ref e) => {\n+            ExprKind::AddrOf(_, m, ref e) => {\n                 m.hash(&mut self.s);\n                 self.hash_expr(e);\n             },"}, {"sha": "3606472d743f95759c428cf591a0550f97a66992", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -264,7 +264,7 @@ fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n             println!(\"{}Relative Path, {:?}\", ind, ty);\n             println!(\"{}seg: {:?}\", ind, seg);\n         },\n-        hir::ExprKind::AddrOf(ref muta, ref e) => {\n+        hir::ExprKind::AddrOf(_, ref muta, ref e) => {\n             println!(\"{}AddrOf\", ind);\n             println!(\"mutability: {:?}\", muta);\n             print_expr(cx, e, indent + 1);"}, {"sha": "b0891632ad4d16314cf9b558e94a8797f752ff36", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessVec {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.tables.expr_ty_adjusted(expr).kind;\n             if let ty::Slice(..) = ty.kind;\n-            if let ExprKind::AddrOf(_, ref addressee) = expr.kind;\n+            if let ExprKind::AddrOf(_, _, ref addressee) = expr.kind;\n             if let Some(vec_args) = higher::vec_macro(cx, addressee);\n             then {\n                 check_vec_macro(cx, &vec_args, expr.span);"}, {"sha": "dd18936951ba04721f3f2f06e3403b08200ef260", "filename": "tests/ui/author/for_loop.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d43c424145c6e2480b224da03f5df3e776a3079a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d43c424145c6e2480b224da03f5df3e776a3079a/tests%2Fui%2Fauthor%2Ffor_loop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stdout?ref=d43c424145c6e2480b224da03f5df3e776a3079a", "patch": "@@ -22,7 +22,7 @@ if_chain! {\n     if let ExprKind::Path(ref path2) = func1.kind;\n     if match_qpath(path2, &[\"{{root}}\", \"std\", \"iter\", \"Iterator\", \"next\"]);\n     if args1.len() == 1;\n-    if let ExprKind::AddrOf(Mutability::Mutable, ref inner) = args1[0].kind;\n+    if let ExprKind::AddrOf(_, Mutability::Mutable, ref inner) = args1[0].kind;\n     if let ExprKind::Path(ref path3) = inner.kind;\n     if match_qpath(path3, &[\"iter\"]);\n     if arms1.len() == 2;"}]}