{"sha": "f8842b9bacaf277430fa5c6cdf430b046dc7f323", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ODQyYjliYWNhZjI3NzQzMGZhNWM2Y2RmNDMwYjA0NmRjN2YzMjM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-19T19:18:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-10-22T16:21:18Z"}, "message": "Make inline const work in range patterns", "tree": {"sha": "1be9f02ccf5901d4732c7088ef3259209b32bbfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be9f02ccf5901d4732c7088ef3259209b32bbfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8842b9bacaf277430fa5c6cdf430b046dc7f323", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl+RsX4ACgkQgTGiTgx5\n76/h3BAAq9rvkA/Hzt4ohFxdo0fNSeLFqQ13ysPYmsMRoOY8jD4JfuCx/CywuVLi\nqMYPN4JoEW8Wage9FCIniieaHgM2qxcMdWbKPEDSMliEb8VNVhTKFHYxqwVru1vT\ncAWipo5WZInVDzC9+ziw78Nfx43T1gZMvB84tA1ONPphNnGkbBphZDhbzx9v/FMN\noe+kSSWoXjoIwaU5Beq9nNxLrfVG30Re34v78etEEgaekV90RCajCXhTNNpYXpJ+\n5D1yjeJt/3hOEL2oOKhSdSFX0CjUJBmv7AlZstfcJ3KKyxOG7rMGixPkkQK5X+Vc\nE1WS+aEDabmChP4xhUY4LiFOklRIrtvV3gyEz55QMqPxc8GrcAZ44pGMdwkD2+Zl\ndLASvfMcWkz53GUoTHOxb8Brv83FNonYmwoRvL8XvxVMQbETDGjupybuJa0gArUO\nEhs892hSTeVQXexdZ3pAT+071SjLFSqtpoVTr1t/QcLAOjkeo+xof1GYiCgH/aZH\nLPohQZBig9XNxfaey/vgUA6xniQqNeWcj6CmkrQJumJTMNqMH0Scu0mxGZSRaVcF\nkMD2WXK80Stohedy8G3hzFTgYdwRx9ud/GNKh/6JqmExezjJuf294HjDD3MjOlWo\nrxnw8jzyJZ730YFGf7QS64ncpHzIiXl+ueLgq1fgxzOtU76Vci4=\n=pB6L\n-----END PGP SIGNATURE-----", "payload": "tree 1be9f02ccf5901d4732c7088ef3259209b32bbfc\nparent 954b5a81b46f60df640f36cfc83f04cd2a965051\nauthor Santiago Pastorino <spastorino@gmail.com> 1603135127 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1603383678 -0300\n\nMake inline const work in range patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8842b9bacaf277430fa5c6cdf430b046dc7f323", "html_url": "https://github.com/rust-lang/rust/commit/f8842b9bacaf277430fa5c6cdf430b046dc7f323", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8842b9bacaf277430fa5c6cdf430b046dc7f323/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "954b5a81b46f60df640f36cfc83f04cd2a965051", "url": "https://api.github.com/repos/rust-lang/rust/commits/954b5a81b46f60df640f36cfc83f04cd2a965051", "html_url": "https://github.com/rust-lang/rust/commit/954b5a81b46f60df640f36cfc83f04cd2a965051"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "8da0a2f57d8767895bdc80930ebdb3968a32e1b3", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8842b9bacaf277430fa5c6cdf430b046dc7f323/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8842b9bacaf277430fa5c6cdf430b046dc7f323/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=f8842b9bacaf277430fa5c6cdf430b046dc7f323", "patch": "@@ -315,7 +315,13 @@ impl<'a> Parser<'a> {\n             PatKind::Box(pat)\n         } else if self.check_inline_const() {\n             // Parse `const pat`\n-            PatKind::Lit(self.parse_const_block(lo.to(self.token.span))?)\n+            let const_expr = self.parse_const_block(lo.to(self.token.span))?;\n+\n+            if let Some(re) = self.parse_range_end() {\n+                self.parse_pat_range_begin_with(const_expr, re)?\n+            } else {\n+                PatKind::Lit(const_expr)\n+            }\n         } else if self.can_be_ident_pat() {\n             // Parse `ident @ pat`\n             // This can give false positives and parse nullary enums,\n@@ -716,17 +722,20 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Is the token `dist` away from the current suitable as the start of a range patterns end?\n-    fn is_pat_range_end_start(&self, dist: usize) -> bool {\n-        self.look_ahead(dist, |t| {\n-            t.is_path_start() // e.g. `MY_CONST`;\n+    fn is_pat_range_end_start(&mut self, dist: usize) -> bool {\n+        self.check_inline_const()\n+            || self.look_ahead(dist, |t| {\n+                t.is_path_start() // e.g. `MY_CONST`;\n                 || t.kind == token::Dot // e.g. `.5` for recovery;\n                 || t.can_begin_literal_maybe_minus() // e.g. `42`.\n                 || t.is_whole_expr()\n-        })\n+            })\n     }\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.check_path() {\n+        if self.check_inline_const() {\n+            self.parse_const_block(self.token.span)\n+        } else if self.check_path() {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path"}, {"sha": "4fbccfaf20064f603a74e7e745424af2f6c9e670", "filename": "src/test/ui/inline-const/const-match-pat-range.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f8842b9bacaf277430fa5c6cdf430b046dc7f323/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8842b9bacaf277430fa5c6cdf430b046dc7f323/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-const%2Fconst-match-pat-range.rs?ref=f8842b9bacaf277430fa5c6cdf430b046dc7f323", "patch": "@@ -0,0 +1,23 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(inline_const)]\n+fn main() {\n+    const N: u32 = 10;\n+    let x: u32 = 3;\n+\n+    match x {\n+        const { N - 1 } ..= 10 => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        const { N - 1 } ..= const { N + 1 } => {},\n+        _ => {},\n+    }\n+\n+    match x {\n+        1 ..= const { N + 1 } => {},\n+        _ => {},\n+    }\n+}"}]}