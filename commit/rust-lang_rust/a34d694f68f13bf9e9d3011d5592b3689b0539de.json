{"sha": "a34d694f68f13bf9e9d3011d5592b3689b0539de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNGQ2OTRmNjhmMTNiZjllOWQzMDExZDU1OTJiMzY4OWIwNTM5ZGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T12:43:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T12:43:39Z"}, "message": "Auto merge of #953 - RalfJung:contributing, r=oli-obk\n\nadd CONTRIBUTING guide", "tree": {"sha": "0ecf234362651dcb1690cabb340777e1b69bafea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ecf234362651dcb1690cabb340777e1b69bafea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a34d694f68f13bf9e9d3011d5592b3689b0539de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a34d694f68f13bf9e9d3011d5592b3689b0539de", "html_url": "https://github.com/rust-lang/rust/commit/a34d694f68f13bf9e9d3011d5592b3689b0539de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a34d694f68f13bf9e9d3011d5592b3689b0539de/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a146243d0ad2ee4d8501d699398783b05949d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a146243d0ad2ee4d8501d699398783b05949d15", "html_url": "https://github.com/rust-lang/rust/commit/9a146243d0ad2ee4d8501d699398783b05949d15"}, {"sha": "1fb934b6cf7bf7a7b62ef65f728a397e27507f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb934b6cf7bf7a7b62ef65f728a397e27507f18", "html_url": "https://github.com/rust-lang/rust/commit/1fb934b6cf7bf7a7b62ef65f728a397e27507f18"}], "stats": {"total": 270, "additions": 146, "deletions": 124}, "files": [{"sha": "83e2338552e994fb3329ef7569c5586342c19739", "filename": "CONTRIBUTING.md", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/a34d694f68f13bf9e9d3011d5592b3689b0539de/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34d694f68f13bf9e9d3011d5592b3689b0539de/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=a34d694f68f13bf9e9d3011d5592b3689b0539de", "patch": "@@ -0,0 +1,141 @@\n+# Contribution Guide\n+\n+If you want to hack on miri yourself, great!  Here are some resources you might\n+find useful.\n+\n+## Getting started\n+\n+Check out the issues on this GitHub repository for some ideas. There's lots that\n+needs to be done that we haven't documented in the issues yet, however. For more\n+ideas or help with hacking on Miri, you can contact us (`oli-obk` and `RalfJ`)\n+on the [Rust Zulip].\n+\n+[Rust Zulip]: https://rust-lang.zulipchat.com\n+\n+### Fixing Miri when rustc changes\n+\n+Miri is heavily tied to rustc internals, so it is very common that rustc changes\n+break Miri.  Fixing those is a good way to get starting working on Miri.\n+Usually, Miri will require changes similar to the other consumers of the changed\n+rustc API, so reading the rustc PR diff is a good way to get an idea for what is\n+needed.\n+\n+When submitting a PR against Miri after fixing it for rustc changes, make sure\n+you update the `rust-version` file.  That file always contains the exact rustc\n+git commit with which Miri works, and it is the version that our CI tests Miri\n+against.\n+\n+## Building Miri with a nightly rustc\n+\n+Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n+things (like adding support for a new intrinsic or a shim for an external\n+function being called) can be done by working just on the Miri side.\n+\n+To prepare, make sure you are using a nightly Rust compiler.  Then you should be\n+able to just `cargo build` Miri.\n+\n+In case this fails, your nightly might be incompatible with Miri master.  The\n+`rust-version` file contains the commit hash of rustc that Miri is currently\n+tested against; you can use that to find a nightly that works or you might have\n+to wait for the next nightly to get released. You can also use\n+[`rustup-toolchain-install-master`](https://github.com/kennytm/rustup-toolchain-install-master)\n+to install that exact version of rustc as a toolchain:\n+```\n+rustup-toolchain-install-master $(cat rust-version) -c rust-src\n+```\n+\n+Another common problem is outdated dependencies: Miri does not come with a\n+lockfile (it cannot, due to how it gets embedded into the rustc build). So you\n+have to run `cargo update` every now and then yourself to make sure you are\n+using the latest versions of everything (which is what gets tested on CI).\n+\n+## Testing the Miri driver\n+[testing-miri]: #testing-the-miri-driver\n+\n+The Miri driver in the `miri` binary is the \"heart\" of Miri: it is basically a\n+version of `rustc` that, instead of compiling your code, runs it.  It accepts\n+all the same flags as `rustc` (though the ones only affecting code generation\n+and linking obviously will have no effect) [and more][miri-flags].\n+\n+Running the Miri driver requires some fiddling with environment variables, so\n+the `miri` script helps you do that.  For example, you can run the driver on a\n+particular file by doing\n+\n+```sh\n+./miri run tests/run-pass/format.rs\n+./miri run tests/run-pass/hello.rs --target i686-unknown-linux-gnu\n+```\n+\n+and you can run the test suite using:\n+\n+```\n+./miri test\n+```\n+\n+`./miri test FILTER` only runs those tests that contain `FILTER` in their\n+filename (including the base directory, e.g. `./miri test fail` will run all\n+compile-fail tests).\n+\n+You can get a trace of which MIR statements are being executed by setting the\n+`MIRI_LOG` environment variable.  For example:\n+\n+```sh\n+MIRI_LOG=info ./miri run tests/run-pass/vecs.rs\n+```\n+\n+Setting `MIRI_LOG` like this will configure logging for Miri itself as well as\n+the `rustc::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n+can also do more targeted configuration, e.g. the following helps debug the\n+stacked borrows implementation:\n+\n+```sh\n+MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pass/vecs.rs\n+```\n+\n+In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n+evaluation error was originally raised.\n+\n+## Testing `cargo miri`\n+\n+Working with the driver directly gives you full control, but you also lose all\n+the convenience provided by cargo.  Once your test case depends on a crate, it\n+is probably easier to test it with the cargo wrapper.  You can install your\n+development version of Miri using\n+\n+```\n+./miri install\n+```\n+\n+and then you can use it as if it was installed by `rustup`.  Make sure you use\n+the same toolchain when calling `cargo miri` that you used when installing Miri!\n+\n+There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n+`./run-test.py` in there to execute it.\n+\n+## Building Miri with a locally built rustc\n+\n+A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n+require using a locally built rustc.  The bug you want to fix may actually be on\n+the rustc side, or you just need to get more detailed trace of the execution\n+than what is possible with release builds -- in both cases, you should develop\n+miri against a rustc you compiled yourself, with debug assertions (and hence\n+tracing) enabled.\n+\n+The setup for a local rustc works as follows:\n+```sh\n+git clone https://github.com/rust-lang/rust/ rustc\n+cd rustc\n+cp config.toml.example config.toml\n+# Now edit `config.toml` and set `debug-assertions = true`.\n+# This step can take 30 minutes and more.\n+./x.py build src/rustc\n+# If you change something, you can get a faster rebuild by doing\n+./x.py --keep-stage 0 build src/rustc\n+# You may have to change the architecture in the next command\n+rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n+# Now cd to your Miri directory, then configure rustup\n+rustup override set custom\n+```\n+\n+With this, you should now have a working development setup!  See\n+[above][testing-miri] for how to proceed working with the Miri driver."}, {"sha": "0187047534d4830eb04d7d66a43383d9db1d7eae", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 124, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/a34d694f68f13bf9e9d3011d5592b3689b0539de/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/a34d694f68f13bf9e9d3011d5592b3689b0539de/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=a34d694f68f13bf9e9d3011d5592b3689b0539de", "patch": "@@ -50,7 +50,7 @@ program, and cannot run all programs:\n [`copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/ptr/fn.copy_nonoverlapping.html\n \n \n-## Running Miri on your own project (and its test suite)\n+## Using Miri\n \n Install Miri via `rustup`:\n \n@@ -183,131 +183,12 @@ Moreover, Miri recognizes some environment variables:\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n \n-## Development and Debugging\n-\n-If you want to hack on miri yourself, great!  Here are some resources you might\n-find useful.\n-\n-### Using a nightly rustc\n-\n-Miri heavily relies on internal rustc interfaces to execute MIR.  Still, some\n-things (like adding support for a new intrinsic or a shim for an external\n-function being called) can be done by working just on the Miri side.\n-\n-To prepare, make sure you are using a nightly Rust compiler.  Then you should be\n-able to just `cargo build` Miri.\n-\n-In case this fails, your nightly might be incompatible with Miri master.  The\n-`rust-version` file contains the commit hash of rustc that Miri is currently\n-tested against; you can use that to find a nightly that works or you might have\n-to wait for the next nightly to get released. You can also use\n-[`rustup-toolchain-install-master`](https://github.com/kennytm/rustup-toolchain-install-master)\n-to install that exact version of rustc as a toolchain:\n-```\n-rustup-toolchain-install-master $(cat rust-version) -c rust-src\n-```\n-\n-Another common problem is outdated dependencies: Miri does not come with a\n-lockfile (it cannot, due to how it gets embedded into the rustc build). So you\n-have to run `cargo update` every now and then yourself to make sure you are\n-using the latest versions of everything (which is what gets tested on CI).\n-\n-### Testing the Miri driver\n-[testing-miri]: #testing-the-miri-driver\n-\n-The Miri driver in the `miri` binary is the \"heart\" of Miri: it is basically a\n-version of `rustc` that, instead of compiling your code, runs it.  It accepts\n-all the same flags as `rustc` (though the ones only affecting code generation\n-and linking obviously will have no effect) [and more][miri-flags].\n-\n-Running the Miri driver requires some fiddling with environment variables, so\n-the `miri` script helps you do that.  For example, you can run the driver on a\n-particular file by doing\n-\n-```sh\n-./miri run tests/run-pass/format.rs\n-./miri run tests/run-pass/hello.rs --target i686-unknown-linux-gnu\n-```\n-\n-and you can run the test suite using:\n-\n-```\n-./miri test\n-```\n-\n-`./miri test FILTER` only runs those tests that contain `FILTER` in their\n-filename (including the base directory, e.g. `./miri test fail` will run all\n-compile-fail tests).\n-\n-You can get a trace of which MIR statements are being executed by setting the\n-`MIRI_LOG` environment variable.  For example:\n-\n-```sh\n-MIRI_LOG=info ./miri run tests/run-pass/vecs.rs\n-```\n-\n-Setting `MIRI_LOG` like this will configure logging for Miri itself as well as\n-the `rustc::mir::interpret` and `rustc_mir::interpret` modules in rustc.  You\n-can also do more targeted configuration, e.g. the following helps debug the\n-stacked borrows implementation:\n-\n-```sh\n-MIRI_LOG=rustc_mir::interpret=info,miri::stacked_borrows ./miri run tests/run-pass/vecs.rs\n-```\n-\n-In addition, you can set `MIRI_BACKTRACE=1` to get a backtrace of where an\n-evaluation error was originally raised.\n-\n-### Testing `cargo miri`\n-\n-Working with the driver directly gives you full control, but you also lose all\n-the convenience provided by cargo.  Once your test case depends on a crate, it\n-is probably easier to test it with the cargo wrapper.  You can install your\n-development version of Miri using\n-\n-```\n-./miri install\n-```\n-\n-and then you can use it as if it was installed by `rustup`.  Make sure you use\n-the same toolchain when calling `cargo miri` that you used when installing Miri!\n-\n-There's a test for the cargo wrapper in the `test-cargo-miri` directory; run\n-`./run-test.py` in there to execute it.\n-\n-### Using a locally built rustc\n-\n-A big part of the Miri driver lives in rustc, so working on Miri will sometimes\n-require using a locally built rustc.  The bug you want to fix may actually be on\n-the rustc side, or you just need to get more detailed trace of the execution\n-than what is possible with release builds -- in both cases, you should develop\n-miri against a rustc you compiled yourself, with debug assertions (and hence\n-tracing) enabled.\n-\n-The setup for a local rustc works as follows:\n-```sh\n-git clone https://github.com/rust-lang/rust/ rustc\n-cd rustc\n-cp config.toml.example config.toml\n-# Now edit `config.toml` and set `debug-assertions = true`.\n-# This step can take 30 minutes and more.\n-./x.py build src/rustc\n-# If you change something, you can get a faster rebuild by doing\n-./x.py --keep-stage 0 build src/rustc\n-# You may have to change the architecture in the next command\n-rustup toolchain link custom build/x86_64-unknown-linux-gnu/stage2\n-# Now cd to your Miri directory, then configure rustup\n-rustup override set custom\n-```\n-\n-With this, you should now have a working development setup!  See\n-[above][testing-miri] for how to proceed working with the Miri driver.\n-\n ## Contributing and getting help\n \n-Check out the issues on this GitHub repository for some ideas. There's lots that\n-needs to be done that I haven't documented in the issues yet, however. For more\n-ideas or help with running or hacking on Miri, you can open an issue here on\n+If you want to contribute to Miri, great!  Please check out our\n+[contribution guide](CONTRIBUTING.md).\n+\n+For help with running Miri, you can open an issue here on\n GitHub or contact us (`oli-obk` and `RalfJ`) on the [Rust Zulip].\n \n [Rust Zulip]: https://rust-lang.zulipchat.com"}]}