{"sha": "c0d485ce9acde28e548e6742abeecadee4c94adc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZDQ4NWNlOWFjZGUyOGU1NDhlNjc0MmFiZWVjYWRlZTRjOTRhZGM=", "commit": {"author": {"name": "Eljay", "email": "lee@leejeffery.co.uk", "date": "2015-06-21T15:04:37Z"}, "committer": {"name": "Eljay", "email": "lee@leejeffery.co.uk", "date": "2015-06-21T15:04:37Z"}, "message": "Temp fix for all constants that are missing docs.", "tree": {"sha": "e35af4fb453f0a446ecad97d53e47981ab68214c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35af4fb453f0a446ecad97d53e47981ab68214c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d485ce9acde28e548e6742abeecadee4c94adc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d485ce9acde28e548e6742abeecadee4c94adc", "html_url": "https://github.com/rust-lang/rust/commit/c0d485ce9acde28e548e6742abeecadee4c94adc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d485ce9acde28e548e6742abeecadee4c94adc/comments", "author": null, "committer": null, "parents": [{"sha": "00130cff99f88e13fec87378bdf476cfea6aa147", "url": "https://api.github.com/repos/rust-lang/rust/commits/00130cff99f88e13fec87378bdf476cfea6aa147", "html_url": "https://github.com/rust-lang/rust/commit/00130cff99f88e13fec87378bdf476cfea6aa147"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "925ef7bd51ad1443f7cc9a141ad383184d027dc3", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -414,17 +414,22 @@ macro_rules! repeat_u8_as_u64 {\n //\n // And of course, 0x00 brings back the old world of zero'ing on drop.\n #[unstable(feature = \"filling_drop\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_U8: u8 = 0x1d;\n #[unstable(feature = \"filling_drop\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_U32: u32 = repeat_u8_as_u32!(POST_DROP_U8);\n #[unstable(feature = \"filling_drop\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_U64: u64 = repeat_u8_as_u64!(POST_DROP_U8);\n \n #[cfg(target_pointer_width = \"32\")]\n #[unstable(feature = \"filling_drop\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U32 as usize;\n #[cfg(target_pointer_width = \"64\")]\n #[unstable(feature = \"filling_drop\")]\n+#[allow(missing_docs)]\n pub const POST_DROP_USIZE: usize = POST_DROP_U64 as usize;\n \n /// Interprets `src` as `&U`, and then reads `src` without moving the contained"}, {"sha": "2540bd4bb3662d5d66652f9c961a64595c2a4a7a", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -24,14 +24,18 @@ use num::{Float, ParseFloatError};\n use num::FpCategory as Fp;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 24;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const DIGITS: u32 = 6;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const EPSILON: f32 = 1.19209290e-07_f32;\n \n /// Smallest finite f32 value\n@@ -45,20 +49,27 @@ pub const MIN_POSITIVE: f32 = 1.17549435e-38_f32;\n pub const MAX: f32 = 3.40282347e+38_f32;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -125;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 128;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -37;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 38;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const NAN: f32 = 0.0_f32/0.0_f32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const INFINITY: f32 = 1.0_f32/0.0_f32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const NEG_INFINITY: f32 = -1.0_f32/0.0_f32;\n \n /// Basic mathematial constants."}, {"sha": "d2ab2695f5e5c47af19eab8b0e7f31e92d38f2d5", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -24,14 +24,18 @@ use num::FpCategory as Fp;\n use num::{Float, ParseFloatError};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const RADIX: u32 = 2;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MANTISSA_DIGITS: u32 = 53;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const DIGITS: u32 = 15;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const EPSILON: f64 = 2.2204460492503131e-16_f64;\n \n /// Smallest finite f64 value\n@@ -45,20 +49,27 @@ pub const MIN_POSITIVE: f64 = 2.2250738585072014e-308_f64;\n pub const MAX: f64 = 1.7976931348623157e+308_f64;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN_EXP: i32 = -1021;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX_EXP: i32 = 1024;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN_10_EXP: i32 = -307;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX_10_EXP: i32 = 308;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const NAN: f64 = 0.0_f64/0.0_f64;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const INFINITY: f64 = 1.0_f64/0.0_f64;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const NEG_INFINITY: f64 = -1.0_f64/0.0_f64;\n \n /// Basic mathematial constants."}, {"sha": "cb9bffca84256ea656723b2a1e9ac4c48e0e310a", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -16,21 +16,25 @@ macro_rules! int_module { ($T:ty, $bits:expr) => (\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n            reason = \"may want to be an associated function\")]\n+#[allow(missing_docs)]\n pub const BITS : usize = $bits;\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `mem::size_of` function.\n #[unstable(feature = \"num_bits_bytes\",\n            reason = \"may want to be an associated function\")]\n+#[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n \n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::min_value` function.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN: $T = (-1 as $T) << (BITS - 1);\n // FIXME(#9837): Compute MIN like this so the high bits that shouldn't exist are 0.\n // FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n // calling the `Bounded::max_value` function.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX: $T = !MIN;\n \n ) }"}, {"sha": "b31d6a73a7fa9b7b0233b691429c44a75adff04f", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -14,14 +14,18 @@ macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n \n #[unstable(feature = \"num_bits_bytes\",\n            reason = \"may want to be an associated function\")]\n+#[allow(missing_docs)]\n pub const BITS : usize = $bits;\n #[unstable(feature = \"num_bits_bytes\",\n            reason = \"may want to be an associated function\")]\n+#[allow(missing_docs)]\n pub const BYTES : usize = ($bits / 8);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MIN: $T = 0 as $T;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(missing_docs)]\n pub const MAX: $T = !0 as $T;\n \n ) }"}, {"sha": "09dc1a3f6d69deadc42bb6d1f325e5cc623891f7", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -152,6 +152,7 @@ pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n \n \n /// Terminal color definitions\n+#[allow(missing_docs)]\n pub mod color {\n     /// Number for a terminal color\n     pub type Color = u16;"}, {"sha": "f71f7f7aac5fa00a9e89049b4c46a1ab9ff70886", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d485ce9acde28e548e6742abeecadee4c94adc/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=c0d485ce9acde28e548e6742abeecadee4c94adc", "patch": "@@ -19,6 +19,7 @@ use super::super::TermInfo;\n \n // These are the orders ncurses uses in its compiled format (as of 5.9). Not sure if portable.\n \n+#[allow(missing_docs)]\n pub static boolfnames: &'static[&'static str] = &[\"auto_left_margin\", \"auto_right_margin\",\n     \"no_esc_ctlc\", \"ceol_standout_glitch\", \"eat_newline_glitch\", \"erase_overstrike\", \"generic_type\",\n     \"hard_copy\", \"has_meta_key\", \"has_status_line\", \"insert_null_glitch\", \"memory_above\",\n@@ -31,11 +32,13 @@ pub static boolfnames: &'static[&'static str] = &[\"auto_left_margin\", \"auto_righ\n     \"no_correctly_working_cr\", \"gnu_has_meta_key\", \"linefeed_is_newline\", \"has_hardware_tabs\",\n     \"return_does_clr_eol\"];\n \n+#[allow(missing_docs)]\n pub static boolnames: &'static[&'static str] = &[\"bw\", \"am\", \"xsb\", \"xhp\", \"xenl\", \"eo\",\n     \"gn\", \"hc\", \"km\", \"hs\", \"in\", \"db\", \"da\", \"mir\", \"msgr\", \"os\", \"eslok\", \"xt\", \"hz\", \"ul\", \"xon\",\n     \"nxon\", \"mc5i\", \"chts\", \"nrrmc\", \"npc\", \"ndscr\", \"ccc\", \"bce\", \"hls\", \"xhpa\", \"crxm\", \"daisy\",\n     \"xvpa\", \"sam\", \"cpix\", \"lpix\", \"OTbs\", \"OTns\", \"OTnc\", \"OTMT\", \"OTNL\", \"OTpt\", \"OTxr\"];\n \n+#[allow(missing_docs)]\n pub static numfnames: &'static[&'static str] = &[ \"columns\", \"init_tabs\", \"lines\",\n     \"lines_of_memory\", \"magic_cookie_glitch\", \"padding_baud_rate\", \"virtual_terminal\",\n     \"width_status_line\", \"num_labels\", \"label_height\", \"label_width\", \"max_attributes\",\n@@ -46,11 +49,13 @@ pub static numfnames: &'static[&'static str] = &[ \"columns\", \"init_tabs\", \"lines\n     \"bit_image_entwining\", \"bit_image_type\", \"magic_cookie_glitch_ul\", \"carriage_return_delay\",\n     \"new_line_delay\", \"backspace_delay\", \"horizontal_tab_delay\", \"number_of_function_keys\"];\n \n+#[allow(missing_docs)]\n pub static numnames: &'static[&'static str] = &[ \"cols\", \"it\", \"lines\", \"lm\", \"xmc\", \"pb\",\n     \"vt\", \"wsl\", \"nlab\", \"lh\", \"lw\", \"ma\", \"wnum\", \"colors\", \"pairs\", \"ncv\", \"bufsz\", \"spinv\",\n     \"spinh\", \"maddr\", \"mjump\", \"mcs\", \"mls\", \"npins\", \"orc\", \"orl\", \"orhi\", \"orvi\", \"cps\", \"widcs\",\n     \"btns\", \"bitwin\", \"bitype\", \"UTug\", \"OTdC\", \"OTdN\", \"OTdB\", \"OTdT\", \"OTkn\"];\n \n+#[allow(missing_docs)]\n pub static stringfnames: &'static[&'static str] = &[ \"back_tab\", \"bell\", \"carriage_return\",\n     \"change_scroll_region\", \"clear_all_tabs\", \"clear_screen\", \"clr_eol\", \"clr_eos\",\n     \"column_address\", \"command_character\", \"cursor_address\", \"cursor_down\", \"cursor_home\",\n@@ -124,6 +129,7 @@ pub static stringfnames: &'static[&'static str] = &[ \"back_tab\", \"bell\", \"carria\n     \"acs_lrcorner\", \"acs_ltee\", \"acs_rtee\", \"acs_btee\", \"acs_ttee\", \"acs_hline\", \"acs_vline\",\n     \"acs_plus\", \"memory_lock\", \"memory_unlock\", \"box_chars_1\"];\n \n+#[allow(missing_docs)]\n pub static stringnames: &'static[&'static str] = &[ \"cbt\", \"_\", \"cr\", \"csr\", \"tbc\", \"clear\",\n     \"_\", \"_\", \"hpa\", \"cmdch\", \"cup\", \"cud1\", \"home\", \"civis\", \"cub1\", \"mrcup\", \"cnorm\", \"cuf1\",\n     \"ll\", \"cuu1\", \"cvvis\", \"dch1\", \"dl1\", \"dsl\", \"hd\", \"smacs\", \"blink\", \"bold\", \"smcup\", \"smdc\","}]}