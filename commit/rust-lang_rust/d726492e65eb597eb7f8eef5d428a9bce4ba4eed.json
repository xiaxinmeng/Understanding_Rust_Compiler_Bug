{"sha": "d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MjY0OTJlNjVlYjU5N2ViN2Y4ZWVmNWQ0MjhhOWJjZTRiYTRlZWQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T04:35:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T04:35:09Z"}, "message": "Remove spaces_within_parens_and_brackets\n\ncc #1974", "tree": {"sha": "074660484a9c9c03c2667657472559705a5ef7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074660484a9c9c03c2667657472559705a5ef7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "html_url": "https://github.com/rust-lang/rust/commit/d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "html_url": "https://github.com/rust-lang/rust/commit/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe"}], "stats": {"total": 583, "additions": 56, "deletions": 527}, "files": [{"sha": "bd52d9d7379b85a1269cc0ccf2616b898ce74c36", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -1589,52 +1589,6 @@ fn main() {\n }\n ```\n \n-## `spaces_within_parens_and_brackets`\n-\n-Put spaces within non-empty generic arguments, parentheses, and square brackets\n-\n-- **Default value**: `false`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-#### `false` (default):\n-\n-```rust\n-// generic arguments\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}\n-\n-// non-empty parentheses\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}\n-\n-// non-empty square brackets\n-fn lorem<T: Eq>(t: T) {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}\n-```\n-\n-#### `true`:\n-\n-```rust\n-// generic arguments\n-fn lorem< T: Eq >( t: T ) {\n-    // body\n-}\n-\n-// non-empty parentheses\n-fn lorem< T: Eq >( t: T ) {\n-    let lorem = ( ipsum, dolor );\n-}\n-\n-// non-empty square brackets\n-fn lorem< T: Eq >( t: T ) {\n-    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n-}\n-```\n-\n ## `struct_lit_single_line`\n \n Put small struct literals on a single line"}, {"sha": "c0dafc4f0f2ed6c216eec6c15340a8f76a471adc", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -498,12 +498,7 @@ fn rewrite_method_call(\n             .map(|ty| ty.rewrite(context, shape))\n             .collect::<Option<Vec<_>>>()?;\n \n-        let type_str =\n-            if context.config.spaces_within_parens_and_brackets() && !type_list.is_empty() {\n-                format!(\"::< {} >\", type_list.join(\", \"))\n-            } else {\n-                format!(\"::<{}>\", type_list.join(\", \"))\n-            };\n+        let type_str = format!(\"::<{}>\", type_list.join(\", \"));\n \n         (types.last().unwrap().span.hi(), type_str)\n     };"}, {"sha": "ed480aa9fa1cc747253f421dbf97100205309c7d", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -77,9 +77,7 @@ create_config! {\n         \"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\";\n     space_before_colon: bool, false, false, \"Leave a space before the colon\";\n     space_after_colon: bool, true, false, \"Leave a space after the colon\";\n-    spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ... range operators\";\n-    spaces_within_parens_and_brackets: bool, false, false,\n-        \"Put spaces within non-empty parentheses or brackets\";\n+    spaces_around_ranges: bool, false, false, \"Put spaces around the  .. and ..= range operators\";\n     binop_separator: SeparatorPlace, SeparatorPlace::Front, false,\n         \"Where to put a binary operator when a binary expression goes multiline.\";\n "}, {"sha": "17d9b95d8410df11bf74a2cd7df627f411390a68", "filename": "src/expr.rs", "status": "modified", "additions": 26, "deletions": 65, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -39,8 +39,8 @@ use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{\n     colon_spaces, contains_skip, count_newlines, first_line_width, inner_attributes,\n-    last_line_extendable, last_line_width, mk_sp, outer_attributes, paren_overhead,\n-    ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str,\n+    last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n+    semicolon_for_stmt, wrap_str,\n };\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -223,21 +223,14 @@ pub fn format_expr(\n         ast::ExprKind::Index(ref expr, ref index) => {\n             rewrite_index(&**expr, &**index, context, shape)\n         }\n-        ast::ExprKind::Repeat(ref expr, ref repeats) => {\n-            let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n-                (\"[ \", \" ]\")\n-            } else {\n-                (\"[\", \"]\")\n-            };\n-            rewrite_pair(\n-                &**expr,\n-                &**repeats,\n-                PairParts::new(lbr, \"; \", rbr),\n-                context,\n-                shape,\n-                SeparatorPlace::Back,\n-            )\n-        }\n+        ast::ExprKind::Repeat(ref expr, ref repeats) => rewrite_pair(\n+            &**expr,\n+            &**repeats,\n+            PairParts::new(\"[\", \"; \", \"]\"),\n+            context,\n+            shape,\n+            SeparatorPlace::Back,\n+        ),\n         ast::ExprKind::Range(ref lhs, ref rhs, limits) => {\n             let delim = match limits {\n                 ast::RangeLimits::HalfOpen => \"..\",\n@@ -1581,27 +1574,15 @@ fn rewrite_paren(\n         break;\n     }\n \n-    let total_paren_overhead = paren_overhead(context);\n-    let paren_overhead = total_paren_overhead / 2;\n-    let sub_shape = shape\n-        .offset_left(paren_overhead)\n-        .and_then(|s| s.sub_width(paren_overhead))?;\n-\n-    let paren_wrapper = |s: &str| {\n-        if context.config.spaces_within_parens_and_brackets() && !s.is_empty() {\n-            format!(\"( {}{}{} )\", pre_comment, s, post_comment)\n-        } else {\n-            format!(\"({}{}{})\", pre_comment, s, post_comment)\n-        }\n-    };\n+    // 1 `(`\n+    let sub_shape = shape.offset_left(1).and_then(|s| s.sub_width(1))?;\n \n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n     debug!(\"rewrite_paren, subexpr_str: `{:?}`\", subexpr_str);\n \n-    if subexpr_str.contains('\\n')\n-        || first_line_width(&subexpr_str) + total_paren_overhead <= shape.width\n-    {\n-        Some(paren_wrapper(&subexpr_str))\n+    // 2 = `()`\n+    if subexpr_str.contains('\\n') || first_line_width(&subexpr_str) + 2 <= shape.width {\n+        Some(format!(\"({}{}{})\", pre_comment, &subexpr_str, post_comment))\n     } else {\n         None\n     }\n@@ -1615,54 +1596,44 @@ fn rewrite_index(\n ) -> Option<String> {\n     let expr_str = expr.rewrite(context, shape)?;\n \n-    let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n-        (\"[ \", \" ]\")\n-    } else {\n-        (\"[\", \"]\")\n-    };\n-\n-    let offset = last_line_width(&expr_str) + lbr.len();\n+    let offset = last_line_width(&expr_str) + 1;\n     let rhs_overhead = shape.rhs_overhead(context.config);\n     let index_shape = if expr_str.contains('\\n') {\n         Shape::legacy(context.config.max_width(), shape.indent)\n             .offset_left(offset)\n-            .and_then(|shape| shape.sub_width(rbr.len() + rhs_overhead))\n+            .and_then(|shape| shape.sub_width(1 + rhs_overhead))\n     } else {\n-        shape.visual_indent(offset).sub_width(offset + rbr.len())\n+        shape.visual_indent(offset).sub_width(offset + 1)\n     };\n     let orig_index_rw = index_shape.and_then(|s| index.rewrite(context, s));\n \n     // Return if index fits in a single line.\n     match orig_index_rw {\n         Some(ref index_str) if !index_str.contains('\\n') => {\n-            return Some(format!(\"{}{}{}{}\", expr_str, lbr, index_str, rbr));\n+            return Some(format!(\"{}[{}]\", expr_str, index_str));\n         }\n         _ => (),\n     }\n \n     // Try putting index on the next line and see if it fits in a single line.\n     let indent = shape.indent.block_indent(context.config);\n-    let index_shape = Shape::indented(indent, context.config).offset_left(lbr.len())?;\n-    let index_shape = index_shape.sub_width(rbr.len() + rhs_overhead)?;\n+    let index_shape = Shape::indented(indent, context.config).offset_left(1)?;\n+    let index_shape = index_shape.sub_width(1 + rhs_overhead)?;\n     let new_index_rw = index.rewrite(context, index_shape);\n     match (orig_index_rw, new_index_rw) {\n         (_, Some(ref new_index_str)) if !new_index_str.contains('\\n') => Some(format!(\n-            \"{}{}{}{}{}\",\n+            \"{}{}[{}]\",\n             expr_str,\n             indent.to_string_with_newline(context.config),\n-            lbr,\n             new_index_str,\n-            rbr\n         )),\n         (None, Some(ref new_index_str)) => Some(format!(\n-            \"{}{}{}{}{}\",\n+            \"{}{}[{}]\",\n             expr_str,\n             indent.to_string_with_newline(context.config),\n-            lbr,\n             new_index_str,\n-            rbr\n         )),\n-        (Some(ref index_str), _) => Some(format!(\"{}{}{}{}\", expr_str, lbr, index_str, rbr)),\n+        (Some(ref index_str), _) => Some(format!(\"{}[{}]\", expr_str, index_str)),\n         _ => None,\n     }\n }\n@@ -1877,13 +1848,7 @@ where\n             .next()\n             .unwrap()\n             .rewrite(context, nested_shape)\n-            .map(|s| {\n-                if context.config.spaces_within_parens_and_brackets() {\n-                    format!(\"( {}, )\", s)\n-                } else {\n-                    format!(\"({},)\", s)\n-                }\n-            });\n+            .map(|s| format!(\"({},)\", s));\n     }\n \n     let list_lo = context.snippet_provider.span_after(span, \"(\");\n@@ -1919,11 +1884,7 @@ where\n     };\n     let list_str = write_list(&item_vec, &fmt)?;\n \n-    if context.config.spaces_within_parens_and_brackets() && !list_str.is_empty() {\n-        Some(format!(\"( {} )\", list_str))\n-    } else {\n-        Some(format!(\"({})\", list_str))\n-    }\n+    Some(format!(\"({})\", list_str))\n }\n \n pub fn rewrite_tuple<'a, T>("}, {"sha": "820470ed35c588257721871d3066790d949968ea", "filename": "src/items.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -1915,12 +1915,6 @@ fn rewrite_fn_base(\n     } else {\n         result.push('(');\n     }\n-    if context.config.spaces_within_parens_and_brackets()\n-        && !fd.inputs.is_empty()\n-        && result.ends_with('(')\n-    {\n-        result.push(' ')\n-    }\n \n     // Skip `pub(crate)`.\n     let lo_after_visibility = get_bytepos_after_visibility(&fn_sig.visibility, span);\n@@ -1978,9 +1972,6 @@ fn rewrite_fn_base(\n         if fd.inputs.is_empty() && used_width + 1 > context.config.max_width() {\n             result.push('\\n');\n         }\n-        if context.config.spaces_within_parens_and_brackets() && !fd.inputs.is_empty() {\n-            result.push(' ')\n-        }\n         // If the last line of args contains comment, we cannot put the closing paren\n         // on the same line.\n         if arg_str"}, {"sha": "c176b009f7078abeb5aaaac71b3f02edb4fd283b", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -259,32 +259,25 @@ pub fn rewrite_macro_inner(\n             // Handle special case: `vec![expr; expr]`\n             if vec_with_semi {\n                 let mac_shape = shape.offset_left(macro_name.len())?;\n-                let (lbr, rbr) = if context.config.spaces_within_parens_and_brackets() {\n-                    (\"[ \", \" ]\")\n-                } else {\n-                    (\"[\", \"]\")\n-                };\n-                // 6 = `vec!` + `; `\n-                let total_overhead = lbr.len() + rbr.len() + 6;\n+                // 8 = `vec![]` + `; `\n+                let total_overhead = 8;\n                 let nested_shape = mac_shape.block_indent(context.config.tab_spaces());\n                 let lhs = arg_vec[0].rewrite(context, nested_shape)?;\n                 let rhs = arg_vec[1].rewrite(context, nested_shape)?;\n                 if !lhs.contains('\\n')\n                     && !rhs.contains('\\n')\n                     && lhs.len() + rhs.len() + total_overhead <= shape.width\n                 {\n-                    Some(format!(\"{}{}{}; {}{}\", macro_name, lbr, lhs, rhs, rbr))\n+                    Some(format!(\"{}[{}; {}]\", macro_name, lhs, rhs))\n                 } else {\n                     Some(format!(\n-                        \"{}{}{}{};{}{}{}{}\",\n+                        \"{}[{}{};{}{}{}]\",\n                         macro_name,\n-                        lbr,\n                         nested_shape.indent.to_string_with_newline(context.config),\n                         lhs,\n                         nested_shape.indent.to_string_with_newline(context.config),\n                         rhs,\n                         shape.indent.to_string_with_newline(context.config),\n-                        rbr\n                     ))\n                 }\n             } else {"}, {"sha": "d555086cda7e4b5fd46abf51b88168ddc14fdd86", "filename": "src/overflow.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -23,9 +23,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListIte\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n-use utils::{\n-    count_newlines, extra_offset, first_line_width, last_line_width, mk_sp, paren_overhead,\n-};\n+use utils::{count_newlines, extra_offset, first_line_width, last_line_width, mk_sp};\n \n use std::cmp::min;\n \n@@ -140,26 +138,16 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n         force_separator_tactic: Option<SeparatorTactic>,\n         custom_delims: Option<(&'a str, &'a str)>,\n     ) -> Context<'a, T> {\n-        // 2 = `( `, 1 = `(`\n-        let paren_overhead = if context.config.spaces_within_parens_and_brackets() {\n-            2\n-        } else {\n-            1\n-        };\n         let used_width = extra_offset(ident, shape);\n-        let one_line_width = shape.width.saturating_sub(used_width + 2 * paren_overhead);\n+        // 1 = `()`\n+        let one_line_width = shape.width.saturating_sub(used_width + 2);\n \n         // 1 = \"(\" or \")\"\n         let one_line_shape = shape\n             .offset_left(last_line_width(ident) + 1)\n             .and_then(|shape| shape.sub_width(1))\n             .unwrap_or(Shape { width: 0, ..shape });\n-        let nested_shape = shape_from_indent_style(\n-            context,\n-            shape,\n-            used_width + 2 * paren_overhead,\n-            used_width + paren_overhead,\n-        );\n+        let nested_shape = shape_from_indent_style(context, shape, used_width + 2, used_width + 1);\n         Context {\n             context,\n             items,\n@@ -417,12 +405,13 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n             Some((lhs, rhs)) => (lhs, rhs),\n             _ => (self.prefix, self.suffix),\n         };\n-        let paren_overhead = paren_overhead(self.context);\n-        let fits_one_line = items_str.len() + paren_overhead <= shape.width;\n+\n+        // 2 = `()`\n+        let fits_one_line = items_str.len() + 2 <= shape.width;\n         let extend_width = if items_str.is_empty() {\n-            paren_overhead\n+            2\n         } else {\n-            first_line_width(items_str) + (paren_overhead / 2)\n+            first_line_width(items_str) + 1\n         };\n         let nested_indent_str = self\n             .nested_shape\n@@ -441,13 +430,7 @@ impl<'a, T: 'a + Rewrite + ToExpr + Spanned> Context<'a, T> {\n             || (self.context.inside_macro() && !items_str.contains('\\n') && fits_one_line)\n             || (is_extendable && extend_width <= shape.width)\n         {\n-            if self.context.config.spaces_within_parens_and_brackets() && !items_str.is_empty() {\n-                result.push(' ');\n-                result.push_str(items_str);\n-                result.push(' ');\n-            } else {\n-                result.push_str(items_str);\n-            }\n+            result.push_str(items_str);\n         } else {\n             if !items_str.is_empty() {\n                 result.push_str(&nested_indent_str);"}, {"sha": "fcab484287c85493ed5f2a53714daffd45abe187", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -156,12 +156,7 @@ impl Rewrite for Pat {\n                 let pats = pats?;\n \n                 // Unwrap all the sub-strings and join them with commas.\n-                let result = if context.config.spaces_within_parens_and_brackets() {\n-                    format!(\"[ {} ]\", pats.join(\", \"))\n-                } else {\n-                    format!(\"[{}]\", pats.join(\", \"))\n-                };\n-                Some(result)\n+                Some(format!(\"[{}]\", pats.join(\", \")))\n             }\n             PatKind::Struct(ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)"}, {"sha": "07b3986f70e43c7914d3f165e1f0d209596eaa8a", "filename": "src/types.rs", "status": "modified", "additions": 13, "deletions": 53, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -59,9 +59,6 @@ pub fn rewrite_path(\n \n     if let Some(qself) = qself {\n         result.push('<');\n-        if context.config.spaces_within_parens_and_brackets() {\n-            result.push_str(\" \")\n-        }\n \n         let fmt_ty = qself.ty.rewrite(context, shape)?;\n         result.push_str(&fmt_ty);\n@@ -86,10 +83,6 @@ pub fn rewrite_path(\n             )?;\n         }\n \n-        if context.config.spaces_within_parens_and_brackets() {\n-            result.push_str(\" \")\n-        }\n-\n         result.push_str(\">::\");\n         span_lo = qself.ty.span.hi() + BytePos(1);\n     }\n@@ -437,13 +430,7 @@ impl Rewrite for ast::WherePredicate {\n                 let lhs = if let Some(lifetime_str) =\n                     rewrite_lifetime_param(context, shape, bound_generic_params)\n                 {\n-                    if context.config.spaces_within_parens_and_brackets()\n-                        && !lifetime_str.is_empty()\n-                    {\n-                        format!(\"for< {} > {}{}\", lifetime_str, type_str, colon)\n-                    } else {\n-                        format!(\"for<{}> {}{}\", lifetime_str, type_str, colon)\n-                    }\n+                    format!(\"for<{}> {}{}\", lifetime_str, type_str, colon)\n                 } else {\n                     format!(\"{}{}\", type_str, colon)\n                 };\n@@ -575,13 +562,7 @@ impl Rewrite for ast::PolyTraitRef {\n                 .trait_ref\n                 .rewrite(context, shape.offset_left(extra_offset)?)?;\n \n-            Some(\n-                if context.config.spaces_within_parens_and_brackets() && !lifetime_str.is_empty() {\n-                    format!(\"for< {} > {}\", lifetime_str, path_str)\n-                } else {\n-                    format!(\"for<{}> {}\", lifetime_str, path_str)\n-                },\n-            )\n+            Some(format!(\"for<{}> {}\", lifetime_str, path_str))\n         } else {\n             self.trait_ref.rewrite(context, shape)\n         }\n@@ -657,28 +638,12 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Paren(ref ty) => {\n                 let budget = shape.width.checked_sub(2)?;\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n-                    .map(|ty_str| {\n-                        if context.config.spaces_within_parens_and_brackets() {\n-                            format!(\"( {} )\", ty_str)\n-                        } else {\n-                            format!(\"({})\", ty_str)\n-                        }\n-                    })\n+                    .map(|ty_str| format!(\"({})\", ty_str))\n             }\n             ast::TyKind::Slice(ref ty) => {\n-                let budget = if context.config.spaces_within_parens_and_brackets() {\n-                    shape.width.checked_sub(4)?\n-                } else {\n-                    shape.width.checked_sub(2)?\n-                };\n+                let budget = shape.width.checked_sub(4)?;\n                 ty.rewrite(context, Shape::legacy(budget, shape.indent + 1))\n-                    .map(|ty_str| {\n-                        if context.config.spaces_within_parens_and_brackets() {\n-                            format!(\"[ {} ]\", ty_str)\n-                        } else {\n-                            format!(\"[{}]\", ty_str)\n-                        }\n-                    })\n+                    .map(|ty_str| format!(\"[{}]\", ty_str))\n             }\n             ast::TyKind::Tup(ref items) => rewrite_tuple(\n                 context,\n@@ -689,19 +654,14 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }\n-            ast::TyKind::Array(ref ty, ref repeats) => {\n-                let use_spaces = context.config.spaces_within_parens_and_brackets();\n-                let lbr = if use_spaces { \"[ \" } else { \"[\" };\n-                let rbr = if use_spaces { \" ]\" } else { \"]\" };\n-                rewrite_pair(\n-                    &**ty,\n-                    &**repeats,\n-                    PairParts::new(lbr, \"; \", rbr),\n-                    context,\n-                    shape,\n-                    SeparatorPlace::Back,\n-                )\n-            }\n+            ast::TyKind::Array(ref ty, ref repeats) => rewrite_pair(\n+                &**ty,\n+                &**repeats,\n+                PairParts::new(\"[\", \"; \", \"]\"),\n+                context,\n+                shape,\n+                SeparatorPlace::Back,\n+            ),\n             ast::TyKind::Infer => {\n                 if shape.width >= 1 {\n                     Some(\"_\".to_owned())"}, {"sha": "961989b3f5d77dfaae595c2524c042aaa9aa31f1", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d726492e65eb597eb7f8eef5d428a9bce4ba4eed/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d726492e65eb597eb7f8eef5d428a9bce4ba4eed", "patch": "@@ -360,15 +360,6 @@ pub fn colon_spaces(before: bool, after: bool) -> &'static str {\n     }\n }\n \n-#[inline]\n-pub fn paren_overhead(context: &RewriteContext) -> usize {\n-    if context.config.spaces_within_parens_and_brackets() {\n-        4\n-    } else {\n-        2\n-    }\n-}\n-\n pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n     match e.node {\n         ast::ExprKind::Call(ref e, _)"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/source/configs/spaces_within_parens_and_brackets/false.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs?ref=7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "patch": "@@ -1,7 +0,0 @@\n-// rustfmt-spaces_within_parens_and_brackets: false\n-// Spaces within parens and brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "2e3c92da2fc3b842fd5023a91df17f71e2b3fea9", "filename": "tests/source/configs/spaces_within_parens_and_brackets/true.rs", "status": "removed", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs?ref=7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "patch": "@@ -1,133 +0,0 @@\n-// rustfmt-spaces_within_parens_and_brackets: true\n-// Spaces within parens and brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}\n-\n-enum E {\n-    A(u32),\n-    B(u32, u32),\n-    C(u32, u32, u32),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1(u32);\n-struct TupleStruct2(u32, u32);\n-\n-fn fooEmpty() {}\n-\n-fn foo(e: E, _: u32) -> (u32, u32) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = (1,);\n-    let t3 = (1, 2);\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1(1);\n-    let ts2 = TupleStruct2(1, 2);\n-\n-    // Tuple pattern\n-    let (a,b,c) = (1,2,3);\n-\n-    // Expressions\n-    let x = (1 + 2) * (3);\n-\n-    // Function call\n-    fooEmpty();\n-    foo(1, 2);\n-\n-    // Pattern matching\n-    match e {\n-        A(_) => (),\n-        B(_, _) => (),\n-        C(..) => (),\n-        D => (),\n-    }\n-\n-    (1,2)\n-}\n-\n-struct Foo<T> {\n-    i: T,\n-}\n-\n-struct Bar<T, E> {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo<'a> {\n-    i: &'a str,\n-}\n-\n-enum E<T> {\n-    T(T),\n-}\n-\n-enum E<T, S> {\n-    T(T),\n-    S(S),\n-}\n-\n-fn foo<T>(a: T) {\n-    foo::<u32>(10);\n-}\n-\n-fn foo<T, E>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-}\n-\n-fn foo<T: Send, E: Send>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-\n-    let opt: Option<u32>;\n-    let res: Result<u32, String>;\n-}\n-\n-fn foo<'a>(a: &'a str) {\n-    foo(\"foo\");\n-}\n-\n-fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n-    foo(\"foo\", \"bar\");\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        <Foo as Foo>::bar();\n-    }\n-}\n-\n-trait MyTrait<A, D> {}\n-impl<A: Send, D: Send> MyTrait<A, D> for Foo {}\n-\n-fn foo() where for<'a> u32: 'a {}\n-\n-fn main() {\n-    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n-    let arr: [i32; 500] = [0; 500];\n-\n-    let v = vec![1, 2, 3];\n-    assert_eq!(arr, [1, 2, 3]);\n-\n-    let i = arr[0];\n-\n-    let slice = &arr[1..2];\n-\n-    let line100_________________________________________________________________________ = [1, 2];\n-    let line101__________________________________________________________________________ = [1, 2];\n-    let line102___________________________________________________________________________ = [1, 2];\n-    let line103____________________________________________________________________________ = [1, 2];\n-    let line104_____________________________________________________________________________ = [1, 2];\n-\n-    let line100_____________________________________________________________________ = vec![1, 2];\n-    let line101______________________________________________________________________ = vec![1, 2];\n-    let line102_______________________________________________________________________ = vec![1, 2];\n-    let line103________________________________________________________________________ = vec![1, 2];\n-    let line104_________________________________________________________________________ = vec![1, 2];\n-}\n-\n-fn f(slice: &[i32]) {}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/target/configs/spaces_within_parens_and_brackets/false.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ffalse.rs?ref=7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "patch": "@@ -1,7 +0,0 @@\n-// rustfmt-spaces_within_parens_and_brackets: false\n-// Spaces within parens and brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "7aff713150694ee135cc2c6f13b29bf6b39c88b5", "filename": "tests/target/configs/spaces_within_parens_and_brackets/true.rs", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fspaces_within_parens_and_brackets%2Ftrue.rs?ref=7b6d2b4699303e9b4f966b7a3db65b979ca4a6fe", "patch": "@@ -1,145 +0,0 @@\n-// rustfmt-spaces_within_parens_and_brackets: true\n-// Spaces within parens and brackets\n-\n-fn lorem< T: Eq >( t: T ) {\n-    let lorem = ( ipsum, dolor );\n-    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n-}\n-\n-enum E {\n-    A( u32 ),\n-    B( u32, u32 ),\n-    C( u32, u32, u32 ),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1( u32 );\n-struct TupleStruct2( u32, u32 );\n-\n-fn fooEmpty() {}\n-\n-fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = ( 1, );\n-    let t3 = ( 1, 2 );\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1( 1 );\n-    let ts2 = TupleStruct2( 1, 2 );\n-\n-    // Tuple pattern\n-    let ( a, b, c ) = ( 1, 2, 3 );\n-\n-    // Expressions\n-    let x = ( 1 + 2 ) * ( 3 );\n-\n-    // Function call\n-    fooEmpty();\n-    foo( 1, 2 );\n-\n-    // Pattern matching\n-    match e {\n-        A( _ ) => (),\n-        B( _, _ ) => (),\n-        C( .. ) => (),\n-        D => (),\n-    }\n-\n-    ( 1, 2 )\n-}\n-\n-struct Foo< T > {\n-    i: T,\n-}\n-\n-struct Bar< T, E > {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo< 'a > {\n-    i: &'a str,\n-}\n-\n-enum E< T > {\n-    T( T ),\n-}\n-\n-enum E< T, S > {\n-    T( T ),\n-    S( S ),\n-}\n-\n-fn foo< T >( a: T ) {\n-    foo::< u32 >( 10 );\n-}\n-\n-fn foo< T, E >( a: T, b: E ) {\n-    foo::< u32, str >( 10, \"bar\" );\n-}\n-\n-fn foo< T: Send, E: Send >( a: T, b: E ) {\n-    foo::< u32, str >( 10, \"bar\" );\n-\n-    let opt: Option< u32 >;\n-    let res: Result< u32, String >;\n-}\n-\n-fn foo< 'a >( a: &'a str ) {\n-    foo( \"foo\" );\n-}\n-\n-fn foo< 'a, 'b >( a: &'a str, b: &'b str ) {\n-    foo( \"foo\", \"bar\" );\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        < Foo as Foo >::bar();\n-    }\n-}\n-\n-trait MyTrait< A, D > {}\n-impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n-\n-fn foo()\n-where\n-    for< 'a > u32: 'a,\n-{\n-}\n-\n-fn main() {\n-    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n-    let arr: [ i32; 500 ] = [ 0; 500 ];\n-\n-    let v = vec![ 1, 2, 3 ];\n-    assert_eq!( arr, [ 1, 2, 3 ] );\n-\n-    let i = arr[ 0 ];\n-\n-    let slice = &arr[ 1..2 ];\n-\n-    let line100_________________________________________________________________________ = [ 1, 2 ];\n-    let line101__________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line102___________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line103____________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line104_____________________________________________________________________________ =\n-        [ 1, 2 ];\n-\n-    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n-    let line101______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line102_______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line103________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line104_________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-}\n-\n-fn f( slice: &[ i32 ] ) {}"}]}