{"sha": "ac3ea3e81cb671088509ccb922d76faa1454566b", "node_id": "C_kwDOAAsO6NoAKGFjM2VhM2U4MWNiNjcxMDg4NTA5Y2NiOTIyZDc2ZmFhMTQ1NDU2NmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-04T21:51:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T21:51:37Z"}, "message": "Merge #11112\n\n11112: Evaluate constants in array repeat expression r=HKalbasi a=HKalbasi\n\ncc #8655 \n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>", "tree": {"sha": "9044128165e059461a0e45ceb2b110f4384fbf05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9044128165e059461a0e45ceb2b110f4384fbf05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac3ea3e81cb671088509ccb922d76faa1454566b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1MFpCRBK7hj4Ov3rIwAAD2wIAARHcaIOuHPgDLAY/5Se97Gj\nSyXdR8I9m7amRzQ4jHWVbrOh9bd2j6Zmo6A+NCKb8OprX1b+aOJ5rCYGnf64AKTH\nsnaEYmzcAaff5fvl5XuOaeVJTgZB4ycCUNo1ROQeSfociMr+AGXN130prjbHZKDx\npYKTXy8sooaoMpWVIHAXgeA7GV+fuRrjtp2RxNzIBctIE+LpAK9PnAp+3/qWcfEd\nU2CB2CgaC9BvNpV+0ONlB1ysjyOxPmEOpDgitXGoAyAvrDt7Zow/m4KttF3Zh40n\nE9lt1G/Bzn8B+Mg/KRv3lh+1NC8Tpv/WkbBR+MRXwnk/Ctt/91bHRr0F03Z+rsY=\n=UPqr\n-----END PGP SIGNATURE-----\n", "payload": "tree 9044128165e059461a0e45ceb2b110f4384fbf05\nparent 67f3b51edbe5ff85061e6cb030ed1a74487e37e9\nparent 75c2acae6ec6b87db5a27d5235ca92ee8d529e08\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641333097 +0000\ncommitter GitHub <noreply@github.com> 1641333097 +0000\n\nMerge #11112\n\n11112: Evaluate constants in array repeat expression r=HKalbasi a=HKalbasi\n\ncc #8655 \n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac3ea3e81cb671088509ccb922d76faa1454566b", "html_url": "https://github.com/rust-lang/rust/commit/ac3ea3e81cb671088509ccb922d76faa1454566b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac3ea3e81cb671088509ccb922d76faa1454566b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67f3b51edbe5ff85061e6cb030ed1a74487e37e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/67f3b51edbe5ff85061e6cb030ed1a74487e37e9", "html_url": "https://github.com/rust-lang/rust/commit/67f3b51edbe5ff85061e6cb030ed1a74487e37e9"}, {"sha": "75c2acae6ec6b87db5a27d5235ca92ee8d529e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c2acae6ec6b87db5a27d5235ca92ee8d529e08", "html_url": "https://github.com/rust-lang/rust/commit/75c2acae6ec6b87db5a27d5235ca92ee8d529e08"}], "stats": {"total": 121, "additions": 94, "deletions": 27}, "files": [{"sha": "9a1a893650cd64befee3e39009619b38916dae3f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ac3ea3e81cb671088509ccb922d76faa1454566b", "patch": "@@ -1540,11 +1540,11 @@ impl Const {\n         let infer = infer.as_ref();\n         let result = eval_const(\n             root,\n-            ConstEvalCtx {\n+            &mut ConstEvalCtx {\n                 exprs: &body.exprs,\n                 pats: &body.pats,\n                 local_data: HashMap::default(),\n-                infer,\n+                infer: &mut |x| infer[x].clone(),\n             },\n         );\n         result"}, {"sha": "68e6e0582e3700344d2c8f91805aa3584dd60618", "filename": "crates/hir_ty/src/consteval.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsteval.rs?ref=ac3ea3e81cb671088509ccb922d76faa1454566b", "patch": "@@ -4,14 +4,13 @@ use std::{collections::HashMap, convert::TryInto, fmt::Display};\n \n use chalk_ir::{IntTy, Scalar};\n use hir_def::{\n-    builtin_type::BuiltinUint,\n     expr::{ArithOp, BinaryOp, Expr, Literal, Pat},\n     type_ref::ConstScalar,\n };\n use hir_expand::name::Name;\n-use la_arena::Arena;\n+use la_arena::{Arena, Idx};\n \n-use crate::{Const, ConstData, ConstValue, InferenceResult, Interner, TyKind};\n+use crate::{Const, ConstData, ConstValue, Interner, Ty, TyKind};\n \n /// Extension trait for [`Const`]\n pub trait ConstExt {\n@@ -41,12 +40,11 @@ impl ConstExt for Const {\n     }\n }\n \n-#[derive(Clone)]\n pub struct ConstEvalCtx<'a> {\n     pub exprs: &'a Arena<Expr>,\n     pub pats: &'a Arena<Pat>,\n     pub local_data: HashMap<Name, ComputedExpr>,\n-    pub infer: &'a InferenceResult,\n+    pub infer: &'a mut dyn FnMut(Idx<Expr>) -> Ty,\n }\n \n #[derive(Debug, Clone)]\n@@ -57,7 +55,7 @@ pub enum ConstEvalError {\n     Panic(String),\n }\n \n-#[derive(Clone)]\n+#[derive(Debug, Clone)]\n pub enum ComputedExpr {\n     Literal(Literal),\n     Tuple(Box<[ComputedExpr]>),\n@@ -130,11 +128,11 @@ fn is_valid(scalar: &Scalar, value: i128) -> bool {\n     }\n }\n \n-pub fn eval_const(expr: &Expr, mut ctx: ConstEvalCtx<'_>) -> Result<ComputedExpr, ConstEvalError> {\n+pub fn eval_const(expr: &Expr, ctx: &mut ConstEvalCtx<'_>) -> Result<ComputedExpr, ConstEvalError> {\n     match expr {\n         Expr::Literal(l) => Ok(ComputedExpr::Literal(l.clone())),\n         &Expr::UnaryOp { expr, op } => {\n-            let ty = &ctx.infer[expr];\n+            let ty = &(ctx.infer)(expr);\n             let ev = eval_const(&ctx.exprs[expr], ctx)?;\n             match op {\n                 hir_def::expr::UnaryOp::Deref => Err(ConstEvalError::NotSupported(\"deref\")),\n@@ -190,9 +188,9 @@ pub fn eval_const(expr: &Expr, mut ctx: ConstEvalCtx<'_>) -> Result<ComputedExpr\n             }\n         }\n         &Expr::BinaryOp { lhs, rhs, op } => {\n-            let ty = &ctx.infer[lhs];\n-            let lhs = eval_const(&ctx.exprs[lhs], ctx.clone())?;\n-            let rhs = eval_const(&ctx.exprs[rhs], ctx.clone())?;\n+            let ty = &(ctx.infer)(lhs);\n+            let lhs = eval_const(&ctx.exprs[lhs], ctx)?;\n+            let rhs = eval_const(&ctx.exprs[rhs], ctx)?;\n             let op = op.ok_or(ConstEvalError::IncompleteExpr)?;\n             let v1 = match lhs {\n                 ComputedExpr::Literal(Literal::Int(v, _)) => v,\n@@ -241,6 +239,7 @@ pub fn eval_const(expr: &Expr, mut ctx: ConstEvalCtx<'_>) -> Result<ComputedExpr\n             }\n         }\n         Expr::Block { statements, tail, .. } => {\n+            let mut prev_values = HashMap::<Name, Option<ComputedExpr>>::default();\n             for statement in &**statements {\n                 match statement {\n                     &hir_def::expr::Statement::Let { pat, initializer, .. } => {\n@@ -252,21 +251,33 @@ pub fn eval_const(expr: &Expr, mut ctx: ConstEvalCtx<'_>) -> Result<ComputedExpr\n                             }\n                         };\n                         let value = match initializer {\n-                            Some(x) => eval_const(&ctx.exprs[x], ctx.clone())?,\n+                            Some(x) => eval_const(&ctx.exprs[x], ctx)?,\n                             None => continue,\n                         };\n-                        ctx.local_data.insert(name, value);\n+                        if !prev_values.contains_key(&name) {\n+                            let prev = ctx.local_data.insert(name.clone(), value);\n+                            prev_values.insert(name, prev);\n+                        } else {\n+                            ctx.local_data.insert(name, value);\n+                        }\n                     }\n                     &hir_def::expr::Statement::Expr { .. } => {\n                         return Err(ConstEvalError::NotSupported(\"this kind of statement\"))\n                     }\n                 }\n             }\n-            let tail_expr = match tail {\n-                &Some(x) => &ctx.exprs[x],\n-                None => return Ok(ComputedExpr::Tuple(Box::new([]))),\n+            let r = match tail {\n+                &Some(x) => eval_const(&ctx.exprs[x], ctx),\n+                None => Ok(ComputedExpr::Tuple(Box::new([]))),\n             };\n-            eval_const(tail_expr, ctx)\n+            // clean up local data, so caller will receive the exact map that passed to us\n+            for (name, val) in prev_values {\n+                match val {\n+                    Some(x) => ctx.local_data.insert(name, x),\n+                    None => ctx.local_data.remove(&name),\n+                };\n+            }\n+            r\n         }\n         Expr::Path(p) => {\n             let name = p.mod_path().as_ident().ok_or(ConstEvalError::NotSupported(\"big paths\"))?;\n@@ -280,12 +291,16 @@ pub fn eval_const(expr: &Expr, mut ctx: ConstEvalCtx<'_>) -> Result<ComputedExpr\n     }\n }\n \n-// FIXME: support more than just evaluating literals\n-pub fn eval_usize(expr: &Expr) -> Option<u64> {\n-    match expr {\n-        Expr::Literal(Literal::Uint(v, None | Some(BuiltinUint::Usize))) => (*v).try_into().ok(),\n-        _ => None,\n+pub fn eval_usize(expr: Idx<Expr>, mut ctx: ConstEvalCtx<'_>) -> Option<u64> {\n+    let expr = &ctx.exprs[expr];\n+    if let Ok(ce) = eval_const(&expr, &mut ctx) {\n+        match ce {\n+            ComputedExpr::Literal(Literal::Int(x, _)) => return x.try_into().ok(),\n+            ComputedExpr::Literal(Literal::Uint(x, _)) => return x.try_into().ok(),\n+            _ => {}\n+        }\n     }\n+    None\n }\n \n /// Interns a possibly-unknown target usize"}, {"sha": "54b1680214e9faeb8fc2ed989c29139d533492e2", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=ac3ea3e81cb671088509ccb922d76faa1454566b", "patch": "@@ -799,8 +799,15 @@ impl<'a> InferenceContext<'a> {\n                             ),\n                         );\n \n-                        let repeat_expr = &self.body.exprs[repeat];\n-                        consteval::eval_usize(repeat_expr)\n+                        consteval::eval_usize(\n+                            repeat,\n+                            consteval::ConstEvalCtx {\n+                                exprs: &body.exprs,\n+                                pats: &body.pats,\n+                                local_data: Default::default(),\n+                                infer: &mut |x| self.infer_expr(x, &expected),\n+                            },\n+                        )\n                     }\n                 };\n "}, {"sha": "ed76c84ab47e8e379953c11678edbe86320b161b", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=ac3ea3e81cb671088509ccb922d76faa1454566b", "patch": "@@ -3350,6 +3350,31 @@ const FOO$0: usize = 1 << 10;\n     check(\n         r#\"\n /// This is a doc\n+const FOO$0: usize = {\n+    let b = 4;\n+    let a = { let b = 2; let a = b; a } + { let a = 1; a + b };\n+    a\n+};\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: usize = 7\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+/// This is a doc\n const FOO$0: usize = 2 - 3;\n \"#,\n         expect![[r#\"\n@@ -3443,6 +3468,24 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn array_repeat_exp() {\n+    check(\n+        r#\"\n+fn main() {\n+    let til$0e4 = [0_u32; (4 * 8 * 8) / 32];\n+}\n+        \"#,\n+        expect![[r#\"\n+            *tile4*\n+\n+            ```rust\n+            let tile4: [u32; 8]\n+            ```\n+            \"#]],\n+    );\n+}\n+\n #[test]\n fn hover_mod_def() {\n     check("}, {"sha": "945edfd999b1d6e0d77b699dcf47c7876bdb77ff", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac3ea3e81cb671088509ccb922d76faa1454566b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=ac3ea3e81cb671088509ccb922d76faa1454566b", "patch": "@@ -208,8 +208,10 @@ fn main() {\n         check_assist_not_applicable(\n             add_explicit_type,\n             r#\"\n+//- minicore: option\n+\n fn main() {\n-    let $0l = [0.0; 2+2];\n+    let $0l = [0.0; Some(2).unwrap()];\n }\n \"#,\n         );"}]}