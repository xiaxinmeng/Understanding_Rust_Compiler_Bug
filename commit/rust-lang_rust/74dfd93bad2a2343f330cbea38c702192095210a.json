{"sha": "74dfd93bad2a2343f330cbea38c702192095210a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGZkOTNiYWQyYTIzNDNmMzMwY2JlYTM4YzcwMjE5MjA5NTIxMGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T11:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T11:51:13Z"}, "message": "auto merge of #9540 : alexcrichton/rust/more-rustdoc-improvements, r=brson\n\nCommit messages have the details, mostly just knocking out more low-hanging-fruit type issues.", "tree": {"sha": "6e23e4c16c926979443daf47b9bf245da2dd9a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e23e4c16c926979443daf47b9bf245da2dd9a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74dfd93bad2a2343f330cbea38c702192095210a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74dfd93bad2a2343f330cbea38c702192095210a", "html_url": "https://github.com/rust-lang/rust/commit/74dfd93bad2a2343f330cbea38c702192095210a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74dfd93bad2a2343f330cbea38c702192095210a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae8a2ff37976b069b24bd0558c7af3474dab5854", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8a2ff37976b069b24bd0558c7af3474dab5854", "html_url": "https://github.com/rust-lang/rust/commit/ae8a2ff37976b069b24bd0558c7af3474dab5854"}, {"sha": "42bcf638b0213747e01af87353413755b9ebc270", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bcf638b0213747e01af87353413755b9ebc270", "html_url": "https://github.com/rust-lang/rust/commit/42bcf638b0213747e01af87353413755b9ebc270"}], "stats": {"total": 247, "additions": 204, "deletions": 43}, "files": [{"sha": "623ac82486d2601cd25d53f9bcfab14331982bec", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -16,6 +16,7 @@ use its = syntax::parse::token::ident_to_str;\n use syntax;\n use syntax::ast;\n use syntax::ast_util;\n+use syntax::attr;\n use syntax::attr::AttributeMethods;\n \n use std;\n@@ -149,6 +150,8 @@ pub enum ItemEnum {\n     MethodItem(Method),\n     StructFieldItem(StructField),\n     VariantItem(Variant),\n+    ForeignFunctionItem(Function),\n+    ForeignStaticItem(Static),\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n@@ -172,6 +175,7 @@ impl Clean<Item> for doctree::Module {\n             inner: ModuleItem(Module {\n                items: std::vec::concat(&[self.structs.clean(),\n                               self.enums.clean(), self.fns.clean(),\n+                              std::vec::concat(self.foreigns.clean()),\n                               self.mods.clean(), self.typedefs.clean(),\n                               self.statics.clean(), self.traits.clean(),\n                               self.impls.clean(), self.view_items.clean()])\n@@ -203,6 +207,25 @@ impl Clean<Attribute> for ast::Attribute {\n     }\n }\n \n+// This is a rough approximation that gets us what we want.\n+impl<'self> attr::AttrMetaMethods for &'self Attribute {\n+    fn name(&self) -> @str {\n+        match **self {\n+            Word(ref n) | List(ref n, _) | NameValue(ref n, _) =>\n+                n.to_managed()\n+        }\n+    }\n+\n+    fn value_str(&self) -> Option<@str> {\n+        match **self {\n+            NameValue(_, ref v) => Some(v.to_managed()),\n+            _ => None,\n+        }\n+    }\n+    fn meta_item_list<'a>(&'a self) -> Option<&'a [@ast::MetaItem]> { None }\n+    fn name_str_pair(&self) -> Option<(@str, @str)> { None }\n+}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub struct TyParam {\n     name: ~str,\n@@ -968,6 +991,41 @@ impl Clean<ViewListIdent> for ast::path_list_ident {\n     }\n }\n \n+impl Clean<~[Item]> for ast::foreign_mod {\n+    fn clean(&self) -> ~[Item] {\n+        self.items.clean()\n+    }\n+}\n+\n+impl Clean<Item> for ast::foreign_item {\n+    fn clean(&self) -> Item {\n+        let inner = match self.node {\n+            ast::foreign_item_fn(ref decl, ref generics) => {\n+                ForeignFunctionItem(Function {\n+                    decl: decl.clean(),\n+                    generics: generics.clean(),\n+                    purity: ast::extern_fn,\n+                })\n+            }\n+            ast::foreign_item_static(ref ty, mutbl) => {\n+                ForeignStaticItem(Static {\n+                    type_: ty.clean(),\n+                    mutability: if mutbl {Mutable} else {Immutable},\n+                    expr: ~\"\",\n+                })\n+            }\n+        };\n+        Item {\n+            name: Some(self.ident.clean()),\n+            attrs: self.attrs.clean(),\n+            source: self.span.clean(),\n+            id: self.id,\n+            visibility: self.vis.clean(),\n+            inner: inner,\n+        }\n+    }\n+}\n+\n // Utilities\n \n trait ToSource {"}, {"sha": "835781907f3d1df1965b5a26543b61df3fca85da", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -30,6 +30,7 @@ pub struct Module {\n     traits: ~[Trait],\n     vis: ast::visibility,\n     impls: ~[Impl],\n+    foreigns: ~[ast::foreign_mod],\n     view_items: ~[ast::view_item],\n }\n \n@@ -50,6 +51,7 @@ impl Module {\n             traits     : ~[],\n             impls      : ~[],\n             view_items : ~[],\n+            foreigns   : ~[],\n         }\n     }\n }"}, {"sha": "3320842c046212c76303fc1ef61c0fd49105317e", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 76, "deletions": 32, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -28,6 +28,7 @@ use extra::json::ToJson;\n use extra::sort;\n \n use syntax::ast;\n+use syntax::attr;\n \n use clean;\n use doctree;\n@@ -521,6 +522,14 @@ impl Context {\n                             }\n                         }\n                     }\n+                    clean::StructItem(s) => {\n+                        let mut it = s.fields.move_iter();\n+                        do self.recurse(name) |this| {\n+                            for item in it {\n+                                f(this, item);\n+                            }\n+                        }\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -532,19 +541,21 @@ impl Context {\n \n fn shortty(item: &clean::Item) -> &'static str {\n     match item.inner {\n-        clean::ModuleItem(*)      => \"mod\",\n-        clean::StructItem(*)      => \"struct\",\n-        clean::EnumItem(*)        => \"enum\",\n-        clean::FunctionItem(*)    => \"fn\",\n-        clean::TypedefItem(*)     => \"typedef\",\n-        clean::StaticItem(*)      => \"static\",\n-        clean::TraitItem(*)       => \"trait\",\n-        clean::ImplItem(*)        => \"impl\",\n-        clean::ViewItemItem(*)    => \"viewitem\",\n-        clean::TyMethodItem(*)    => \"tymethod\",\n-        clean::MethodItem(*)      => \"method\",\n-        clean::StructFieldItem(*) => \"structfield\",\n-        clean::VariantItem(*)     => \"variant\",\n+        clean::ModuleItem(*)          => \"mod\",\n+        clean::StructItem(*)          => \"struct\",\n+        clean::EnumItem(*)            => \"enum\",\n+        clean::FunctionItem(*)        => \"fn\",\n+        clean::TypedefItem(*)         => \"typedef\",\n+        clean::StaticItem(*)          => \"static\",\n+        clean::TraitItem(*)           => \"trait\",\n+        clean::ImplItem(*)            => \"impl\",\n+        clean::ViewItemItem(*)        => \"viewitem\",\n+        clean::TyMethodItem(*)        => \"tymethod\",\n+        clean::MethodItem(*)          => \"method\",\n+        clean::StructFieldItem(*)     => \"structfield\",\n+        clean::VariantItem(*)         => \"variant\",\n+        clean::ForeignFunctionItem(*) => \"ffi\",\n+        clean::ForeignStaticItem(*)   => \"ffs\",\n     }\n }\n \n@@ -558,6 +569,18 @@ impl<'self> Item<'self> {\n \n impl<'self> fmt::Default for Item<'self> {\n     fn fmt(it: &Item<'self>, fmt: &mut fmt::Formatter) {\n+        match attr::find_stability(it.item.attrs.iter()) {\n+            Some(stability) => {\n+                write!(fmt.buf,\n+                       \"<a class='stability {lvl}' title='{reason}'>{lvl}</a>\",\n+                       lvl = stability.level.to_str(),\n+                       reason = match stability.text {\n+                           Some(s) => s, None => @\"\",\n+                       });\n+            }\n+            None => {}\n+        }\n+\n         // Write the breadcrumb trail header for the top\n         write!(fmt.buf, \"<h1 class='fqn'>\");\n         match it.item.inner {\n@@ -584,12 +607,15 @@ impl<'self> fmt::Default for Item<'self> {\n         match it.item.inner {\n             clean::ModuleItem(ref m) => item_module(fmt.buf, it.cx,\n                                                     it.item, m.items),\n-            clean::FunctionItem(ref f) => item_function(fmt.buf, it.item, f),\n+            clean::FunctionItem(ref f) | clean::ForeignFunctionItem(ref f) =>\n+                item_function(fmt.buf, it.item, f),\n             clean::TraitItem(ref t) => item_trait(fmt.buf, it.item, t),\n             clean::StructItem(ref s) => item_struct(fmt.buf, it.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt.buf, it.item, e),\n             clean::TypedefItem(ref t) => item_typedef(fmt.buf, it.item, t),\n             clean::VariantItem(*) => item_variant(fmt.buf, it.cx, it.item),\n+            clean::StructFieldItem(*) => item_struct_field(fmt.buf, it.cx,\n+                                                           it.item),\n             _ => {}\n         }\n     }\n@@ -663,6 +689,10 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             (_, &clean::EnumItem(*)) => false,\n             (&clean::StaticItem(*), _) => true,\n             (_, &clean::StaticItem(*)) => false,\n+            (&clean::ForeignFunctionItem(*), _) => true,\n+            (_, &clean::ForeignFunctionItem(*)) => false,\n+            (&clean::ForeignStaticItem(*), _) => true,\n+            (_, &clean::ForeignStaticItem(*)) => false,\n             (&clean::TraitItem(*), _) => true,\n             (_, &clean::TraitItem(*)) => false,\n             (&clean::FunctionItem(*), _) => true,\n@@ -690,27 +720,31 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             }\n             curty = myty;\n             write!(w, \"<h2>{}</h2>\\n<table>\", match myitem.inner {\n-                clean::ModuleItem(*)      => \"Modules\",\n-                clean::StructItem(*)      => \"Structs\",\n-                clean::EnumItem(*)        => \"Enums\",\n-                clean::FunctionItem(*)    => \"Functions\",\n-                clean::TypedefItem(*)     => \"Type Definitions\",\n-                clean::StaticItem(*)      => \"Statics\",\n-                clean::TraitItem(*)       => \"Traits\",\n-                clean::ImplItem(*)        => \"Implementations\",\n-                clean::ViewItemItem(*)    => \"Reexports\",\n-                clean::TyMethodItem(*)    => \"Type Methods\",\n-                clean::MethodItem(*)      => \"Methods\",\n-                clean::StructFieldItem(*) => \"Struct Fields\",\n-                clean::VariantItem(*)     => \"Variants\",\n+                clean::ModuleItem(*)          => \"Modules\",\n+                clean::StructItem(*)          => \"Structs\",\n+                clean::EnumItem(*)            => \"Enums\",\n+                clean::FunctionItem(*)        => \"Functions\",\n+                clean::TypedefItem(*)         => \"Type Definitions\",\n+                clean::StaticItem(*)          => \"Statics\",\n+                clean::TraitItem(*)           => \"Traits\",\n+                clean::ImplItem(*)            => \"Implementations\",\n+                clean::ViewItemItem(*)        => \"Reexports\",\n+                clean::TyMethodItem(*)        => \"Type Methods\",\n+                clean::MethodItem(*)          => \"Methods\",\n+                clean::StructFieldItem(*)     => \"Struct Fields\",\n+                clean::VariantItem(*)         => \"Variants\",\n+                clean::ForeignFunctionItem(*) => \"Foreign Functions\",\n+                clean::ForeignStaticItem(*)   => \"Foreign Statics\",\n             });\n         }\n \n         match myitem.inner {\n-            clean::StaticItem(ref s) => {\n+            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n                 struct Initializer<'self>(&'self str);\n                 impl<'self> fmt::Default for Initializer<'self> {\n                     fn fmt(s: &Initializer<'self>, f: &mut fmt::Formatter) {\n+                        if s.len() == 0 { return; }\n+                        write!(f.buf, \"<code> = </code>\");\n                         let tag = if s.contains(\"\\n\") { \"pre\" } else { \"code\" };\n                         write!(f.buf, \"<{tag}>{}</{tag}>\",\n                                s.as_slice(), tag=tag);\n@@ -719,7 +753,7 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n \n                 write!(w, \"\n                     <tr>\n-                        <td><code>{}static {}: {} = </code>{}</td>\n+                        <td><code>{}static {}: {}</code>{}</td>\n                         <td class='docblock'>{}&nbsp;</td>\n                     </tr>\n                 \",\n@@ -980,11 +1014,12 @@ fn render_struct(w: &mut io::Writer, it: &clean::Item,\n             for field in fields.iter() {\n                 match field.inner {\n                     clean::StructFieldItem(ref ty) => {\n-                        write!(w, \"    {}{}: {},\\n{}\",\n+                        write!(w, \"    {}<a name='field.{name}'>{name}</a>: \\\n+                                   {},\\n{}\",\n                                VisSpace(field.visibility),\n-                               field.name.get_ref().as_slice(),\n                                ty.type_,\n-                               tab);\n+                               tab,\n+                               name = field.name.get_ref().as_slice());\n                     }\n                     _ => unreachable!()\n                 }\n@@ -1170,3 +1205,12 @@ fn item_variant(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n            *cx.current.last(),\n            it.name.get_ref().as_slice());\n }\n+\n+fn item_struct_field(w: &mut io::Writer, cx: &Context, it: &clean::Item) {\n+    write!(w, \"<DOCTYPE html><html><head>\\\n+                <meta http-equiv='refresh' content='0; \\\n+                      url=../struct.{}.html\\\\#field.{}'>\\\n+               </head><body></body></html>\",\n+           *cx.current.last(),\n+           it.name.get_ref().as_slice());\n+}"}, {"sha": "11ca7a093115d2553ba44b79b6f48dcc4fb13a75", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -269,3 +269,18 @@ a {\n     float: left;\n     padding: 20px;\n }\n+\n+.stability {\n+    border-left: 5px solid #000;\n+    border-radius: 3px;\n+    padding: 0 3px;\n+    float: right;\n+    background: #fff;\n+    text-transform: lowercase;\n+}\n+.stability.Deprecated { border-color: #D60027; color: #880017; }\n+.stability.Experimental { border-color: #EC5315; color: #a53c0e; }\n+.stability.Unstable { border-color: #FFD700; color: #b39800; }\n+.stability.Stable { border-color: #AEC516; color: #7c8b10; }\n+.stability.Frozen { border-color: #009431; color: #007726; }\n+.stability.Locked { border-color: #0084B6; color: #00668c; }"}, {"sha": "bf35c93caae428b9c60c56280541002d4cd4e517", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -10,6 +10,7 @@\n \n use std::num;\n use std::uint;\n+use std::hashmap::HashSet;\n \n use syntax::ast;\n \n@@ -50,16 +51,18 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n \n /// Strip private items from the point of view of a crate or externally from a\n /// crate, specified by the `xcrate` flag.\n-pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n-    struct Stripper;\n-    impl fold::DocFolder for Stripper {\n+pub fn strip_private(mut crate: clean::Crate) -> plugins::PluginResult {\n+    // This stripper collects all *retained* nodes.\n+    struct Stripper<'self>(&'self mut HashSet<ast::NodeId>);\n+    impl<'self> fold::DocFolder for Stripper<'self> {\n         fn fold_item(&mut self, i: Item) -> Option<Item> {\n             match i.inner {\n                 // These items can all get re-exported\n                 clean::TypedefItem(*) | clean::StaticItem(*) |\n                 clean::StructItem(*) | clean::EnumItem(*) |\n                 clean::TraitItem(*) | clean::FunctionItem(*) |\n-                clean::ViewItemItem(*) | clean::MethodItem(*) => {\n+                clean::ViewItemItem(*) | clean::MethodItem(*) |\n+                clean::ForeignFunctionItem(*) | clean::ForeignStaticItem(*) => {\n                     // XXX: re-exported items should get surfaced in the docs as\n                     //      well (using the output of resolve analysis)\n                     if i.visibility != Some(ast::public) {\n@@ -97,6 +100,7 @@ pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n             };\n \n             let i = if fastreturn {\n+                self.insert(i.id);\n                 return Some(i);\n             } else {\n                 self.fold_item_recur(i)\n@@ -108,15 +112,50 @@ pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n                         // emptied modules/impls have no need to exist\n                         clean::ModuleItem(ref m) if m.items.len() == 0 => None,\n                         clean::ImplItem(ref i) if i.methods.len() == 0 => None,\n-                        _ => Some(i),\n+                        _ => {\n+                            self.insert(i.id);\n+                            Some(i)\n+                        }\n                     }\n                 }\n                 None => None,\n             }\n         }\n     }\n-    let mut stripper = Stripper;\n-    let crate = stripper.fold_crate(crate);\n+\n+    // This stripper discards all private impls of traits\n+    struct ImplStripper<'self>(&'self HashSet<ast::NodeId>);\n+    impl<'self> fold::DocFolder for ImplStripper<'self> {\n+        fn fold_item(&mut self, i: Item) -> Option<Item> {\n+            match i.inner {\n+                clean::ImplItem(ref imp) => {\n+                    match imp.trait_ {\n+                        Some(clean::ResolvedPath{ id, _ }) => {\n+                            if !self.contains(&id) {\n+                                return None;\n+                            }\n+                        }\n+                        Some(*) | None => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+            self.fold_item_recur(i)\n+        }\n+    }\n+\n+    let mut retained = HashSet::new();\n+    // First, strip all private items\n+    {\n+        let mut stripper = Stripper(&mut retained);\n+        crate = stripper.fold_crate(crate);\n+    }\n+\n+    // Next, strip all private implementations of traits\n+    {\n+        let mut stripper = ImplStripper(&retained);\n+        crate = stripper.fold_crate(crate);\n+    }\n     (crate, None)\n }\n "}, {"sha": "8e89c07ef001cb13b6f79ce22808463da8ac0a98", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -174,6 +174,9 @@ impl RustdocVisitor {\n                     };\n                     om.impls.push(i);\n                 },\n+                ast::item_foreign_mod(ref fm) => {\n+                    om.foreigns.push(fm.clone());\n+                }\n                 _ => (),\n             }\n         }"}, {"sha": "47a7d0fbf9e958b585a04cc87ae308ff766935a0", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -320,7 +320,7 @@ pub struct Stability {\n }\n \n /// The available stability levels.\n-#[deriving(Eq,Ord,Clone)]\n+#[deriving(Eq,Ord,Clone,ToStr)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,"}, {"sha": "6c905c252c1c1056f6eb1cc722252e9a21907d39", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dfd93bad2a2343f330cbea38c702192095210a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=74dfd93bad2a2343f330cbea38c702192095210a", "patch": "@@ -4219,9 +4219,9 @@ impl Parser {\n     }\n \n     // parse a function declaration from a foreign module\n-    fn parse_item_foreign_fn(&self,  attrs: ~[Attribute]) -> @foreign_item {\n+    fn parse_item_foreign_fn(&self, vis: ast::visibility,\n+                             attrs: ~[Attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility();\n \n         // Parse obsolete purity.\n         let purity = self.parse_fn_purity();\n@@ -4755,7 +4755,7 @@ impl Parser {\n         if (self.is_keyword(keywords::Fn) || self.is_keyword(keywords::Pure) ||\n                 self.is_keyword(keywords::Unsafe)) {\n             // FOREIGN FUNCTION ITEM\n-            let item = self.parse_item_foreign_fn(attrs);\n+            let item = self.parse_item_foreign_fn(visibility, attrs);\n             return iovi_foreign_item(item);\n         }\n         self.parse_macro_use_or_failure(attrs,macros_allowed,lo,visibility)"}]}