{"sha": "8b725a2f77d56ce7f7e7631070573541ff228e8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzI1YTJmNzdkNTZjZTdmN2U3NjMxMDcwNTczNTQxZmYyMjhlOGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T19:55:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-30T19:55:21Z"}, "message": "Switch to expect for the rest of inlay tests", "tree": {"sha": "b288f813f1c754fb309646774f2322c0151757ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b288f813f1c754fb309646774f2322c0151757ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b725a2f77d56ce7f7e7631070573541ff228e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b725a2f77d56ce7f7e7631070573541ff228e8d", "html_url": "https://github.com/rust-lang/rust/commit/8b725a2f77d56ce7f7e7631070573541ff228e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b725a2f77d56ce7f7e7631070573541ff228e8d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a19d5954a4665a7a8572f9592f855f68cf0f2c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a19d5954a4665a7a8572f9592f855f68cf0f2c6", "html_url": "https://github.com/rust-lang/rust/commit/4a19d5954a4665a7a8572f9592f855f68cf0f2c6"}], "stats": {"total": 174, "additions": 100, "deletions": 74}, "files": [{"sha": "62d364bfad8d12eff29a4bbc3776ecc4aca9e1f5", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 100, "deletions": 74, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/8b725a2f77d56ce7f7e7631070573541ff228e8d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b725a2f77d56ce7f7e7631070573541ff228e8d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=8b725a2f77d56ce7f7e7631070573541ff228e8d", "patch": "@@ -345,7 +345,7 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n     use test_utils::extract_annotations;\n \n     use crate::{inlay_hints::InlayHintsConfig, mock_analysis::single_file};\n@@ -363,6 +363,12 @@ mod tests {\n         assert_eq!(expected, actual);\n     }\n \n+    fn check_expect(ra_fixture: &str, config: InlayHintsConfig, expect: Expect) {\n+        let (analysis, file_id) = single_file(ra_fixture);\n+        let inlay_hints = analysis.inlay_hints(file_id, &config).unwrap();\n+        expect.assert_debug_eq(&inlay_hints)\n+    }\n+\n     #[test]\n     fn param_hints_only() {\n         check_with_config(\n@@ -772,34 +778,41 @@ fn main() {\n \n     #[test]\n     fn chaining_hints_ignore_comments() {\n-        let (analysis, file_id) = single_file(\n+        check_expect(\n             r#\"\n-            struct A(B);\n-            impl A { fn into_b(self) -> B { self.0 } }\n-            struct B(C);\n-            impl B { fn into_c(self) -> C { self.0 } }\n-            struct C;\n-\n-            fn main() {\n-                let c = A(B(C))\n-                    .into_b() // This is a comment\n-                    .into_c();\n-            }\"#,\n-        );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n-        [\n-            InlayHint {\n-                range: 147..172,\n-                kind: ChainingHint,\n-                label: \"B\",\n-            },\n-            InlayHint {\n-                range: 147..154,\n-                kind: ChainingHint,\n-                label: \"A\",\n+struct A(B);\n+impl A { fn into_b(self) -> B { self.0 } }\n+struct B(C);\n+impl B { fn into_c(self) -> C { self.0 } }\n+struct C;\n+\n+fn main() {\n+    let c = A(B(C))\n+        .into_b() // This is a comment\n+        .into_c();\n+}\n+\"#,\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n             },\n-        ]\n-        \"###);\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 147..172,\n+                        kind: ChainingHint,\n+                        label: \"B\",\n+                    },\n+                    InlayHint {\n+                        range: 147..154,\n+                        kind: ChainingHint,\n+                        label: \"A\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n@@ -826,7 +839,7 @@ fn main() {\n \n     #[test]\n     fn struct_access_chaining_hints() {\n-        let (analysis, file_id) = single_file(\n+        check_expect(\n             r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n@@ -845,58 +858,71 @@ fn main() {\n     let x = D\n         .foo();\n }\"#,\n-        );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n-        [\n-            InlayHint {\n-                range: 143..190,\n-                kind: ChainingHint,\n-                label: \"C\",\n-            },\n-            InlayHint {\n-                range: 143..179,\n-                kind: ChainingHint,\n-                label: \"B\",\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n             },\n-        ]\n-        \"###);\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 143..190,\n+                        kind: ChainingHint,\n+                        label: \"C\",\n+                    },\n+                    InlayHint {\n+                        range: 143..179,\n+                        kind: ChainingHint,\n+                        label: \"B\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn generic_chaining_hints() {\n-        let (analysis, file_id) = single_file(\n+        check_expect(\n             r#\"\n-            struct A<T>(T);\n-            struct B<T>(T);\n-            struct C<T>(T);\n-            struct X<T,R>(T, R);\n-\n-            impl<T> A<T> {\n-                fn new(t: T) -> Self { A(t) }\n-                fn into_b(self) -> B<T> { B(self.0) }\n-            }\n-            impl<T> B<T> {\n-                fn into_c(self) -> C<T> { C(self.0) }\n-            }\n-            fn main() {\n-                let c = A::new(X(42, true))\n-                    .into_b()\n-                    .into_c();\n-            }\"#,\n-        );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n-        [\n-            InlayHint {\n-                range: 246..283,\n-                kind: ChainingHint,\n-                label: \"B<X<i32, bool>>\",\n-            },\n-            InlayHint {\n-                range: 246..265,\n-                kind: ChainingHint,\n-                label: \"A<X<i32, bool>>\",\n+struct A<T>(T);\n+struct B<T>(T);\n+struct C<T>(T);\n+struct X<T,R>(T, R);\n+\n+impl<T> A<T> {\n+    fn new(t: T) -> Self { A(t) }\n+    fn into_b(self) -> B<T> { B(self.0) }\n+}\n+impl<T> B<T> {\n+    fn into_c(self) -> C<T> { C(self.0) }\n+}\n+fn main() {\n+    let c = A::new(X(42, true))\n+        .into_b()\n+        .into_c();\n+}\n+\"#,\n+            InlayHintsConfig {\n+                parameter_hints: false,\n+                type_hints: false,\n+                chaining_hints: true,\n+                max_length: None,\n             },\n-        ]\n-        \"###);\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 246..283,\n+                        kind: ChainingHint,\n+                        label: \"B<X<i32, bool>>\",\n+                    },\n+                    InlayHint {\n+                        range: 246..265,\n+                        kind: ChainingHint,\n+                        label: \"A<X<i32, bool>>\",\n+                    },\n+                ]\n+            \"#]],\n+        );\n     }\n }"}]}