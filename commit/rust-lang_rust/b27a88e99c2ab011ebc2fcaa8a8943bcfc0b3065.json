{"sha": "b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2E4OGU5OWMyYWIwMTFlYmMyZmNhYThhODk0M2JjZmMwYjMwNjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-15T03:37:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-11-16T23:16:43Z"}, "message": "fix bug in shape where s_int/s_uint were not customized to platform", "tree": {"sha": "36953a9f149dc4688d8d7df125af1f6ef2ba6137", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36953a9f149dc4688d8d7df125af1f6ef2ba6137"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "html_url": "https://github.com/rust-lang/rust/commit/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9043bd97788bd6643c095952516670ce954a1777", "url": "https://api.github.com/repos/rust-lang/rust/commits/9043bd97788bd6643c095952516670ce954a1777", "html_url": "https://github.com/rust-lang/rust/commit/9043bd97788bd6643c095952516670ce954a1777"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "1ed720322f35315ee334efbb68cbfa90062f8c30", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "patch": "@@ -158,7 +158,7 @@ fn node_span(node: ast_node) -> codemap::span {\n mod test {\n     import syntax::ast_util;\n \n-    //FIXME NDM #[test]\n+    #[test]\n     fn test_node_span_item() {\n         let expected: codemap::span = ast_util::mk_sp(20u, 30u);\n         let node =\n@@ -170,7 +170,7 @@ mod test {\n         assert (node_span(node) == expected);\n     }\n \n-    //FIXME NDM #[test]\n+    #[test]\n     fn test_node_span_obj_ctor() {\n         let expected: codemap::span = ast_util::mk_sp(20u, 30u);\n         let node =\n@@ -182,7 +182,7 @@ mod test {\n         assert (node_span(node) == expected);\n     }\n \n-    //FIXME NDM #[test]\n+    #[test]\n     fn test_node_span_native_item() {\n         let expected: codemap::span = ast_util::mk_sp(20u, 30u);\n         let node =\n@@ -194,7 +194,7 @@ mod test {\n         assert (node_span(node) == expected);\n     }\n \n-    //FIXME NDM #[test]\n+    #[test]\n     fn test_node_span_expr() {\n         let expected: codemap::span = ast_util::mk_sp(20u, 30u);\n         let node = node_expr(@{id: 0, node: expr_break, span: expected});"}, {"sha": "de12ea36b932e364105664fa097bdc03e48451c4", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=b27a88e99c2ab011ebc2fcaa8a8943bcfc0b3065", "patch": "@@ -3,6 +3,7 @@\n \n import lib::llvm::True;\n import lib::llvm::llvm::{ModuleRef, TypeRef, ValueRef};\n+import driver::session;\n import middle::{trans, trans_common};\n import middle::trans_common::{crate_ctxt, val_ty, C_bytes,\n                               C_named_struct, C_struct};\n@@ -231,16 +232,32 @@ fn tag_kind(ccx: @crate_ctxt, did: ast::def_id) -> tag_kind {\n \n \n // Returns the code corresponding to the pointer size on this architecture.\n-fn s_int(_tcx: ty_ctxt) -> u8 {\n-    ret shape_i32; // TODO: x86-64\n+fn s_int(tcx: ty_ctxt) -> u8 {\n+    ret alt tcx.sess.get_targ_cfg().arch {\n+        session::arch_x86. { shape_i32 }\n+        session::arch_x86_64. { shape_i64 }\n+        session::arch_arm. { shape_i32 }\n+    };\n }\n \n-fn s_uint(_tcx: ty_ctxt) -> u8 {\n-    ret shape_u32; // TODO: x86-64\n+fn s_uint(tcx: ty_ctxt) -> u8 {\n+    ret alt tcx.sess.get_targ_cfg().arch {\n+        session::arch_x86. { shape_u32 }\n+        session::arch_x86_64. { shape_u64 }\n+        session::arch_arm. { shape_u32 }\n+    };\n }\n \n-fn s_float(_tcx: ty_ctxt) -> u8 {\n-    ret shape_f64; // TODO: x86-64\n+fn s_float(tcx: ty_ctxt) -> u8 {\n+    ret alt tcx.sess.get_targ_cfg().arch {\n+        session::arch_x86. { shape_f64 }\n+        session::arch_x86_64. { shape_f64 }\n+        session::arch_arm. { shape_f64 }\n+    };\n+}\n+\n+fn s_variant_tag_t(tcx: ty_ctxt) -> u8 {\n+    ret s_int(tcx);\n }\n \n fn mk_ctxt(llmod: ModuleRef) -> ctxt {\n@@ -329,9 +346,9 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint],\n         alt tag_kind(ccx, did) {\n           tk_unit. {\n             // FIXME: For now we do this.\n-            s += [shape_u32];\n+            s += [s_variant_tag_t(ccx.tcx)];\n           }\n-          tk_enum. { s += [shape_u32]; }\n+          tk_enum. { s += [s_variant_tag_t(ccx.tcx)]; }\n           tk_complex. {\n             s += [shape_tag];\n "}]}