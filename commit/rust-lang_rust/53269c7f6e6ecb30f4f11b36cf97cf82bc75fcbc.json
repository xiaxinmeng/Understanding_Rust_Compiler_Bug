{"sha": "53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMjY5YzdmNmU2ZWNiMzBmNGYxMWIzNmNmOTdjZjgyYmM3NWZjYmM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-11-30T22:37:18Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-04-25T16:23:36Z"}, "message": "Update trait queries", "tree": {"sha": "226288d78422e8ba302f8fb1b9901784364fc0d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226288d78422e8ba302f8fb1b9901784364fc0d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "html_url": "https://github.com/rust-lang/rust/commit/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b164a2da63530d1e5f67415a5654ccb4f9c68099", "url": "https://api.github.com/repos/rust-lang/rust/commits/b164a2da63530d1e5f67415a5654ccb4f9c68099", "html_url": "https://github.com/rust-lang/rust/commit/b164a2da63530d1e5f67415a5654ccb4f9c68099"}], "stats": {"total": 105, "additions": 69, "deletions": 36}, "files": [{"sha": "1cc6500d0384fde122a9df30a0c290a52e64cb92", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -20,6 +20,44 @@ macro_rules! arena_types {\n             [] item_local_set: rustc::util::nodemap::ItemLocalSet,\n             [decode] mir_const_qualif: rustc_data_structures::bit_set::BitSet<rustc::mir::Local>,\n             [] trait_impls_of: rustc::ty::trait_def::TraitImpls,\n+            [] dropck_outlives:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        rustc::traits::query::dropck_outlives::DropckOutlivesResult<'tcx>\n+                    >\n+                >,\n+            [] normalize_projection_ty:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        rustc::traits::query::normalize::NormalizationResult<'tcx>\n+                    >\n+                >,\n+            [] implied_outlives_bounds:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx,\n+                        Vec<rustc::traits::query::outlives_bounds::OutlivesBound<'tcx>>\n+                    >\n+                >,\n+            [] type_op_subtype:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, ()>\n+                >,\n+            [] type_op_normalize_poly_fn_sig:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::PolyFnSig<'tcx>>\n+                >,\n+            [] type_op_normalize_fn_sig:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::FnSig<'tcx>>\n+                >,\n+            [] type_op_normalize_predicate:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::Predicate<'tcx>>\n+                >,\n+            [] type_op_normalize_ty:\n+                rustc::infer::canonical::Canonical<'tcx,\n+                    rustc::infer::canonical::QueryResponse<'tcx, rustc::ty::Ty<'tcx>>\n+                >,\n         ], $tcx);\n     )\n }"}, {"sha": "fe6b8ac1cdc7ed1f45a3c4f108859bfef0de7004", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -23,7 +23,6 @@\n \n use crate::infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable;\n use serialize::UseSpecializedDecodable;\n use smallvec::SmallVec;\n@@ -186,7 +185,7 @@ pub struct QueryResponse<'tcx, R> {\n pub type Canonicalized<'gcx, V> = Canonical<'gcx, <V as Lift<'gcx>>::Lifted>;\n \n pub type CanonicalizedQueryResponse<'gcx, T> =\n-    Lrc<Canonical<'gcx, QueryResponse<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n+    &'gcx Canonical<'gcx, QueryResponse<'gcx, <T as Lift<'gcx>>::Lifted>>;\n \n /// Indicates whether or not we were able to prove the query to be\n /// true."}, {"sha": "e605aae0fae0d39490553480f48e65e3e933b48b", "filename": "src/librustc/infer/canonical/query_response.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -7,6 +7,7 @@\n //!\n //! [c]: https://rust-lang.github.io/rustc-guide/traits/canonicalization.html\n \n+use crate::arena::ArenaAllocatable;\n use crate::infer::canonical::substitute::substitute_value;\n use crate::infer::canonical::{\n     Canonical, CanonicalVarValues, CanonicalizedQueryResponse, Certainty,\n@@ -17,7 +18,6 @@ use crate::infer::InferCtxtBuilder;\n use crate::infer::{InferCtxt, InferOk, InferResult};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax_pos::DUMMY_SP;\n use crate::traits::query::{Fallible, NoSolution};\n@@ -54,6 +54,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxtBuilder<'cx, 'gcx, 'tcx> {\n     where\n         K: TypeFoldable<'tcx>,\n         R: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+        Canonical<'gcx, <QueryResponse<'gcx, R> as Lift<'gcx>>::Lifted>: ArenaAllocatable,\n     {\n         self.enter_with_canonical(\n             DUMMY_SP,\n@@ -99,6 +100,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     ) -> Fallible<CanonicalizedQueryResponse<'gcx, T>>\n     where\n         T: Debug + Lift<'gcx> + TypeFoldable<'tcx>,\n+        Canonical<'gcx, <QueryResponse<'gcx, T> as Lift<'gcx>>::Lifted>: ArenaAllocatable,\n     {\n         let query_response = self.make_query_response(inference_vars, answer, fulfill_cx)?;\n         let canonical_result = self.canonicalize_response(&query_response);\n@@ -108,7 +110,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             canonical_result\n         );\n \n-        Ok(Lrc::new(canonical_result))\n+        Ok(self.tcx.arena.alloc(canonical_result))\n     }\n \n     /// A version of `make_canonicalized_query_response` that does"}, {"sha": "eaf9fd1bc7659b89a6fdd363921fc4963b53e689", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -892,7 +892,7 @@ rustc_queries! {\n         query normalize_projection_ty(\n             goal: CanonicalProjectionGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, NormalizationResult<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -910,7 +910,7 @@ rustc_queries! {\n         query implied_outlives_bounds(\n             goal: CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -921,7 +921,7 @@ rustc_queries! {\n         query dropck_outlives(\n             goal: CanonicalTyGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -940,7 +940,7 @@ rustc_queries! {\n         query evaluate_goal(\n             goal: traits::ChalkCanonicalGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution\n         > {\n             no_force\n@@ -951,7 +951,7 @@ rustc_queries! {\n         query type_op_ascribe_user_type(\n             goal: CanonicalTypeOpAscribeUserTypeGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -962,7 +962,7 @@ rustc_queries! {\n         query type_op_eq(\n             goal: CanonicalTypeOpEqGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -973,7 +973,7 @@ rustc_queries! {\n         query type_op_subtype(\n             goal: CanonicalTypeOpSubtypeGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -984,7 +984,7 @@ rustc_queries! {\n         query type_op_prove_predicate(\n             goal: CanonicalTypeOpProvePredicateGoal<'tcx>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>,\n             NoSolution,\n         > {\n             no_force\n@@ -995,7 +995,7 @@ rustc_queries! {\n         query type_op_normalize_ty(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, Ty<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Ty<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Ty<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1006,7 +1006,7 @@ rustc_queries! {\n         query type_op_normalize_predicate(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::Predicate<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::Predicate<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::Predicate<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1017,7 +1017,7 @@ rustc_queries! {\n         query type_op_normalize_poly_fn_sig(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::PolyFnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::PolyFnSig<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::PolyFnSig<'tcx>>>,\n             NoSolution,\n         > {\n             no_force\n@@ -1028,7 +1028,7 @@ rustc_queries! {\n         query type_op_normalize_fn_sig(\n             goal: CanonicalTypeOpNormalizeGoal<'tcx, ty::FnSig<'tcx>>\n         ) -> Result<\n-            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ty::FnSig<'tcx>>>>,\n+            &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, ty::FnSig<'tcx>>>,\n             NoSolution,\n         > {\n             no_force"}, {"sha": "04cd632b29793461e345891970dcdec380bca172", "filename": "src/librustc_traits/chalk_context/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fmod.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -36,7 +36,6 @@ use rustc::ty::{self, TyCtxt, InferConst};\n use rustc::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{Kind, UnpackedKind};\n-use rustc_data_structures::sync::Lrc;\n use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n@@ -677,7 +676,7 @@ crate fn evaluate_goal<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     goal: ChalkCanonicalGoal<'tcx>\n ) -> Result<\n-    Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>,\n+    &'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>,\n     traits::query::NoSolution\n > {\n     use crate::lowering::Lower;\n@@ -718,6 +717,6 @@ crate fn evaluate_goal<'a, 'tcx>(\n \n     debug!(\"evaluate_goal: solution = {:?}\", solution);\n \n-    solution.map(|ok| Ok(Lrc::new(ok)))\n-        .unwrap_or(Err(traits::query::NoSolution))\n+    solution.map(|ok| Ok(&*tcx.arena.alloc(ok)))\n+            .unwrap_or(Err(traits::query::NoSolution))\n }"}, {"sha": "737bf6f9e84d565970b3c1e30cf5632f7d578ace", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -7,7 +7,6 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{Subst, InternalSubsts};\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use rustc::util::nodemap::FxHashSet;\n-use rustc_data_structures::sync::Lrc;\n use syntax::source_map::{Span, DUMMY_SP};\n \n crate fn provide(p: &mut Providers<'_>) {\n@@ -21,7 +20,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn dropck_outlives<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonical_goal: CanonicalTyGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, DropckOutlivesResult<'tcx>>>, NoSolution> {\n     debug!(\"dropck_outlives(goal={:#?})\", canonical_goal);\n \n     tcx.infer_ctxt().enter_with_canonical("}, {"sha": "b1688a7fbbb728bdbfdec2e6e41eaf73bb842eae", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -15,8 +15,6 @@ use smallvec::{SmallVec, smallvec};\n use syntax::source_map::DUMMY_SP;\n use rustc::traits::FulfillmentContext;\n \n-use rustc_data_structures::sync::Lrc;\n-\n crate fn provide(p: &mut Providers<'_>) {\n     *p = Providers {\n         implied_outlives_bounds,\n@@ -28,7 +26,7 @@ fn implied_outlives_bounds<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalTyGoal<'tcx>,\n ) -> Result<\n-        Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>>,\n+        &'tcx Canonical<'tcx, canonical::QueryResponse<'tcx, Vec<OutlivesBound<'tcx>>>>,\n         NoSolution,\n > {\n     tcx.infer_ctxt()"}, {"sha": "3ff04bc2853695a706f1549e07dfaa9e61a84556", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -4,7 +4,6 @@ use rustc::traits::query::{normalize::NormalizationResult, CanonicalProjectionGo\n use rustc::traits::{self, ObligationCause, SelectionContext, TraitEngineExt};\n use rustc::ty::query::Providers;\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n-use rustc_data_structures::sync::Lrc;\n use std::sync::atomic::Ordering;\n use syntax_pos::DUMMY_SP;\n \n@@ -18,7 +17,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, NormalizationResult<'tcx>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n     tcx.sess"}, {"sha": "ea37024b84f5bb58b4aee94406f695bb7b6e34de", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=53269c7f6e6ecb30f4f11b36cf97cf82bc75fcbc", "patch": "@@ -17,7 +17,6 @@ use rustc::ty::subst::{Kind, Subst, UserSubsts, UserSelfTy};\n use rustc::ty::{\n     FnSig, Lift, ParamEnv, ParamEnvAnd, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable, Variance,\n };\n-use rustc_data_structures::sync::Lrc;\n use std::fmt;\n use syntax_pos::DUMMY_SP;\n \n@@ -38,7 +37,7 @@ crate fn provide(p: &mut Providers<'_>) {\n fn type_op_ascribe_user_type<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserType<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (\n@@ -170,7 +169,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n fn type_op_eq<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Eq<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Eq { a, b }) = key.into_parts();\n@@ -200,39 +199,39 @@ where\n fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Ty<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<Predicate<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, Predicate<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<FnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, FnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Normalize<PolyFnSig<'tcx>>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, PolyFnSig<'tcx>>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n fn type_op_subtype<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Subtype<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, Subtype { sub, sup }) = key.into_parts();\n@@ -246,7 +245,7 @@ fn type_op_subtype<'tcx>(\n fn type_op_prove_predicate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, ProvePredicate<'tcx>>>,\n-) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt()\n         .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n             let (param_env, ProvePredicate { predicate }) = key.into_parts();"}]}