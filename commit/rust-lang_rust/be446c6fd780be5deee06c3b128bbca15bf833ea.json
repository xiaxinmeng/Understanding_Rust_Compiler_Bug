{"sha": "be446c6fd780be5deee06c3b128bbca15bf833ea", "node_id": "C_kwDOAAsO6NoAKGJlNDQ2YzZmZDc4MGJlNWRlZWUwNmMzYjEyOGJiY2ExNWJmODMzZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T12:19:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T12:19:51Z"}, "message": "Auto merge of #14905 - Veykril:hover-hex, r=Veykril\n\nfeat: Render niches on hover", "tree": {"sha": "af9209ec17d1a10d3a89e14a669091238470dfbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af9209ec17d1a10d3a89e14a669091238470dfbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be446c6fd780be5deee06c3b128bbca15bf833ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be446c6fd780be5deee06c3b128bbca15bf833ea", "html_url": "https://github.com/rust-lang/rust/commit/be446c6fd780be5deee06c3b128bbca15bf833ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be446c6fd780be5deee06c3b128bbca15bf833ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8dbb8e2e06d6fb0cb97c98eef27121e81370c93", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dbb8e2e06d6fb0cb97c98eef27121e81370c93", "html_url": "https://github.com/rust-lang/rust/commit/e8dbb8e2e06d6fb0cb97c98eef27121e81370c93"}, {"sha": "1275adc2004625cb7650ce5a6e99034e50c153cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1275adc2004625cb7650ce5a6e99034e50c153cd", "html_url": "https://github.com/rust-lang/rust/commit/1275adc2004625cb7650ce5a6e99034e50c153cd"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "5c0320f7334218774bf085fbc67bdf894fd0b513", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=be446c6fd780be5deee06c3b128bbca15bf833ea", "patch": "@@ -62,7 +62,7 @@ use hir_ty::{\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n-    layout::{Layout, LayoutError, RustcEnumVariantIdx, TagEncoding},\n+    layout::{Layout as TyLayout, LayoutError, RustcEnumVariantIdx, TagEncoding},\n     method_resolution::{self, TyFingerprint},\n     mir::{self, interpret_mir},\n     primitive::UintTy,\n@@ -961,8 +961,8 @@ impl Field {\n         Type::new(db, var_id, ty)\n     }\n \n-    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n-        db.layout_of_ty(self.ty(db).ty.clone(), self.parent.module(db).krate().into())\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n+        db.layout_of_ty(self.ty(db).ty.clone(), self.parent.module(db).krate().into()).map(Layout)\n     }\n \n     pub fn parent_def(&self, _db: &dyn HirDatabase) -> VariantDef {\n@@ -1135,10 +1135,10 @@ impl Enum {\n         self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }\n \n-    pub fn layout(self, db: &dyn HirDatabase) -> Result<(Arc<Layout>, usize), LayoutError> {\n+    pub fn layout(self, db: &dyn HirDatabase) -> Result<(Layout, usize), LayoutError> {\n         let layout = Adt::from(self).layout(db)?;\n         let tag_size =\n-            if let layout::Variants::Multiple { tag, tag_encoding, .. } = &layout.variants {\n+            if let layout::Variants::Multiple { tag, tag_encoding, .. } = &layout.0.variants {\n                 match tag_encoding {\n                     TagEncoding::Direct => {\n                         let target_data_layout = db\n@@ -1219,11 +1219,11 @@ impl Variant {\n         let parent_enum = self.parent_enum(db);\n         let (parent_layout, tag_size) = parent_enum.layout(db)?;\n         Ok((\n-            match &parent_layout.variants {\n+            match &parent_layout.0.variants {\n                 layout::Variants::Multiple { variants, .. } => {\n-                    variants[RustcEnumVariantIdx(self.id)].clone()\n+                    Layout(Arc::new(variants[RustcEnumVariantIdx(self.id)].clone()))\n                 }\n-                _ => (*parent_layout).clone(),\n+                _ => parent_layout,\n             },\n             tag_size,\n         ))\n@@ -1255,11 +1255,11 @@ impl Adt {\n         })\n     }\n \n-    pub fn layout(self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n+    pub fn layout(self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n         if db.generic_params(self.into()).iter().count() != 0 {\n             return Err(LayoutError::HasPlaceholder);\n         }\n-        db.layout_of_adt(self.into(), Substitution::empty(Interner), self.krate(db).id)\n+        db.layout_of_adt(self.into(), Substitution::empty(Interner), self.krate(db).id).map(Layout)\n     }\n \n     /// Turns this ADT into a type. Any type parameters of the ADT will be\n@@ -4243,8 +4243,8 @@ impl Type {\n             .collect()\n     }\n \n-    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Arc<Layout>, LayoutError> {\n-        db.layout_of_ty(self.ty.clone(), self.env.krate)\n+    pub fn layout(&self, db: &dyn HirDatabase) -> Result<Layout, LayoutError> {\n+        db.layout_of_ty(self.ty.clone(), self.env.krate).map(Layout)\n     }\n }\n \n@@ -4355,6 +4355,35 @@ fn closure_source(db: &dyn HirDatabase, closure: ClosureId) -> Option<ast::Closu\n     }\n }\n \n+#[derive(Clone, Debug, Eq, PartialEq)]\n+pub struct Layout(Arc<TyLayout>);\n+\n+impl Layout {\n+    pub fn size(&self) -> u64 {\n+        self.0.size.bytes()\n+    }\n+\n+    pub fn align(&self) -> u64 {\n+        self.0.align.abi.bytes()\n+    }\n+\n+    pub fn niches(&self, db: &dyn HirDatabase, krate: Crate) -> Option<u128> {\n+        Some(self.0.largest_niche?.available(&*db.target_data_layout(krate.id)?))\n+    }\n+\n+    pub fn field_offset(&self, idx: usize) -> Option<u64> {\n+        match self.0.fields {\n+            layout::FieldsShape::Primitive => None,\n+            layout::FieldsShape::Union(_) => Some(0),\n+            layout::FieldsShape::Array { stride, count } => {\n+                let i = u64::try_from(idx).ok()?;\n+                (i < count).then_some((stride * i).bytes())\n+            }\n+            layout::FieldsShape::Arbitrary { ref offsets, .. } => Some(offsets.get(idx)?.bytes()),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum BindingMode {\n     Move,\n@@ -4506,6 +4535,12 @@ impl HasCrate for Union {\n     }\n }\n \n+impl HasCrate for Enum {\n+    fn krate(&self, db: &dyn HirDatabase) -> Crate {\n+        self.module(db).krate()\n+    }\n+}\n+\n impl HasCrate for Field {\n     fn krate(&self, db: &dyn HirDatabase) -> Crate {\n         self.parent_def(db).module(db).krate()"}, {"sha": "96a97ab44c0f437ce4204590922a1c1e87b5fbdf", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=be446c6fd780be5deee06c3b128bbca15bf833ea", "patch": "@@ -3,8 +3,8 @@ use std::fmt::Display;\n \n use either::Either;\n use hir::{\n-    Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasSource, HirDisplay, Semantics,\n-    TypeInfo,\n+    Adt, AsAssocItem, AttributeTemplate, CaptureKind, HasAttrs, HasCrate, HasSource, HirDisplay,\n+    Layout, Semantics, TypeInfo,\n };\n use ide_db::{\n     base_db::SourceDatabase,\n@@ -401,25 +401,23 @@ pub(super) fn definition(\n                 hir::VariantDef::Struct(s) => Adt::from(s)\n                     .layout(db)\n                     .ok()\n-                    .map(|layout| format!(\", offset = {:#X}\", layout.fields.offset(id).bytes())),\n+                    .and_then(|layout| Some(format!(\", offset = {:#X}\", layout.field_offset(id)?))),\n                 _ => None,\n             };\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n             Some(format!(\n-                \"size = {:#X}, align = {:#X}{}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes(),\n+                \"size = {:#X}, align = {:#X}{}{niches}\",\n+                layout.size(),\n+                layout.align(),\n                 offset.as_deref().unwrap_or_default()\n             ))\n         }),\n         Definition::Module(it) => label_and_docs(db, it),\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.layout(db).ok()?;\n-            Some(format!(\n-                \"size = {:#X}, align = {:#X}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes()\n-            ))\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n+            Some(format!(\"size = {:#X}, align = {:#X}{niches}\", layout.size(), layout.align()))\n         }),\n         Definition::Variant(it) => label_value_and_layout_info_and_docs(\n             db,\n@@ -437,14 +435,15 @@ pub(super) fn definition(\n                     None\n                 }\n             },\n-            |it| {\n+            |&it| {\n                 let (layout, tag_size) = it.layout(db).ok()?;\n-                let size = layout.size.bytes_usize() - tag_size;\n+                let size = layout.size() as usize - tag_size;\n                 if size == 0 {\n                     // There is no value in showing layout info for fieldless variants\n                     return None;\n                 }\n-                Some(format!(\"size = {:#X}\", layout.size.bytes()))\n+                let niches = niches(db, it, &layout).unwrap_or_default();\n+                Some(format!(\"size = {:#X}{niches}\", layout.size()))\n             },\n         ),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n@@ -473,11 +472,8 @@ pub(super) fn definition(\n         Definition::TraitAlias(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.ty(db).layout(db).ok()?;\n-            Some(format!(\n-                \"size = {:#X}, align = {:#X}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes()\n-            ))\n+            let niches = niches(db, it, &layout).unwrap_or_default();\n+            Some(format!(\"size = {:#X}, align = {:#X}{niches}\", layout.size(), layout.align(),))\n         }),\n         Definition::BuiltinType(it) => {\n             return famous_defs\n@@ -513,6 +509,10 @@ pub(super) fn definition(\n     markup(docs, label, mod_path)\n }\n \n+fn niches(db: &RootDatabase, it: impl HasCrate, layout: &Layout) -> Option<String> {\n+    Some(format!(\", niches = {}\", layout.niches(db, it.krate(db).into())?))\n+}\n+\n fn type_info(\n     sema: &Semantics<'_, RootDatabase>,\n     config: &HoverConfig,\n@@ -560,7 +560,7 @@ fn closure_ty(\n     let layout = if config.memory_layout {\n         original\n             .layout(sema.db)\n-            .map(|x| format!(\" // size = {}, align = {}\", x.size.bytes(), x.align.abi.bytes()))\n+            .map(|x| format!(\" // size = {}, align = {}\", x.size(), x.align()))\n             .unwrap_or_default()\n     } else {\n         String::default()\n@@ -771,12 +771,7 @@ fn local(db: &RootDatabase, it: hir::Local, config: &HoverConfig) -> Option<Mark\n     };\n     if config.memory_layout {\n         if let Ok(layout) = it.ty(db).layout(db) {\n-            format_to!(\n-                desc,\n-                \" // size = {}, align = {}\",\n-                layout.size.bytes(),\n-                layout.align.abi.bytes()\n-            );\n+            format_to!(desc, \" // size = {}, align = {}\", layout.size(), layout.align());\n         }\n     }\n     markup(None, desc, None)"}, {"sha": "f8b5b654546f7cf145f2579e99d28d66fc80512f", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be446c6fd780be5deee06c3b128bbca15bf833ea/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=be446c6fd780be5deee06c3b128bbca15bf833ea", "patch": "@@ -1528,7 +1528,7 @@ fn test_hover_function_pointer_show_identifiers() {\n             ```\n \n             ```rust\n-            type foo = fn(a: i32, b: i32) -> i32 // size = 0x8, align = 0x8\n+            type foo = fn(a: i32, b: i32) -> i32 // size = 0x8, align = 0x8, niches = 1\n             ```\n         \"#]],\n     );\n@@ -1546,7 +1546,7 @@ fn test_hover_function_pointer_no_identifier() {\n             ```\n \n             ```rust\n-            type foo = fn(i32, i32) -> i32 // size = 0x8, align = 0x8\n+            type foo = fn(i32, i32) -> i32 // size = 0x8, align = 0x8, niches = 1\n             ```\n         \"#]],\n     );\n@@ -1904,7 +1904,7 @@ fn test_hover_layout_of_enum() {\n             ```\n \n             ```rust\n-            enum Foo // size = 0x10, align = 0x8\n+            enum Foo // size = 0x10, align = 0x8, niches = 254\n             ```\n         \"#]],\n     );"}]}