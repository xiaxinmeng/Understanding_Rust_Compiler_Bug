{"sha": "fd702702ee90ddb47d207f8886818c7f91600713", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNzAyNzAyZWU5MGRkYjQ3ZDIwN2Y4ODg2ODE4YzdmOTE2MDA3MTM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-01T01:03:04Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-02T18:40:18Z"}, "message": "`for x in xs.into_iter()` -> `for x in xs`\n\nAlso `for x in option.into_iter()` -> `if let Some(x) = option`", "tree": {"sha": "7bed4a4d739e1372d9e101b350297e7946f17819", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bed4a4d739e1372d9e101b350297e7946f17819"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd702702ee90ddb47d207f8886818c7f91600713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd702702ee90ddb47d207f8886818c7f91600713", "html_url": "https://github.com/rust-lang/rust/commit/fd702702ee90ddb47d207f8886818c7f91600713", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd702702ee90ddb47d207f8886818c7f91600713/comments", "author": null, "committer": null, "parents": [{"sha": "d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a", "html_url": "https://github.com/rust-lang/rust/commit/d5f61b4332f3edd83c43f3f0d52d0381d7a6c37a"}], "stats": {"total": 156, "additions": 78, "deletions": 78}, "files": [{"sha": "4b0eea33d69b7a2176cd0c0c86d1480f43409c48", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -40,7 +40,7 @@ pub fn run(lib_path: &str,\n     let mut cmd = Command::new(prog);\n     cmd.args(args);\n     add_target_env(&mut cmd, lib_path, aux_path);\n-    for (key, val) in env.into_iter() {\n+    for (key, val) in env {\n         cmd.env(key, val);\n     }\n \n@@ -72,7 +72,7 @@ pub fn run_background(lib_path: &str,\n     let mut cmd = Command::new(prog);\n     cmd.args(args);\n     add_target_env(&mut cmd, lib_path, aux_path);\n-    for (key, val) in env.into_iter() {\n+    for (key, val) in env {\n         cmd.env(key, val);\n     }\n "}, {"sha": "3022973d9c1fa1648966459980fcada3f1ab10d7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1503,7 +1503,7 @@ fn _arm_exec_compiled_test(config: &Config,\n \n     // run test via adb_run_wrapper\n     runargs.push(\"shell\".to_string());\n-    for (key, val) in env.into_iter() {\n+    for (key, val) in env {\n         runargs.push(format!(\"{}={}\", key, val));\n     }\n     runargs.push(format!(\"{}/adb_run_wrapper.sh\", config.adb_test_dir));"}, {"sha": "23eab79e6a4ef6acfae9e0a3b1e3588c36230694", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -197,7 +197,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     pub fn clear(&mut self) {\n         let b = self.b;\n         // avoid recursive destructors by manually traversing the tree\n-        for _ in mem::replace(self, BTreeMap::with_b(b)).into_iter() {};\n+        for _ in mem::replace(self, BTreeMap::with_b(b)) {};\n     }\n \n     // Searching in a B-Tree is pretty straightforward."}, {"sha": "c6c8a6e4a1ecf2b00c6c99a25ea46b7c7b34dff9", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1061,7 +1061,7 @@ mod tests {\n         let mut sum = v;\n         sum.push_all(u.as_slice());\n         assert_eq!(sum.len(), m.len());\n-        for elt in sum.into_iter() {\n+        for elt in sum {\n             assert_eq!(m.pop_front(), Some(elt))\n         }\n         assert_eq!(n.len(), 0);"}, {"sha": "4b4ea3e4c3ca539729dc22c657aabc7be7221a67", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -2699,7 +2699,7 @@ mod tests {\n         }\n         assert_eq!(cnt, 8);\n \n-        for f in v.into_iter() {\n+        for f in v {\n             assert!(f == Foo);\n             cnt += 1;\n         }"}, {"sha": "22b0e0f7cc90762d2efe81d692378f6e1e0a44f4", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -2333,7 +2333,7 @@ mod tests {\n     fn test_move_items() {\n         let vec = vec![1, 2, 3];\n         let mut vec2 : Vec<i32> = vec![];\n-        for i in vec.into_iter() {\n+        for i in vec {\n             vec2.push(i);\n         }\n         assert!(vec2 == vec![1, 2, 3]);\n@@ -2353,7 +2353,7 @@ mod tests {\n     fn test_move_items_zero_sized() {\n         let vec = vec![(), (), ()];\n         let mut vec2 : Vec<()> = vec![];\n-        for i in vec.into_iter() {\n+        for i in vec {\n             vec2.push(i);\n         }\n         assert!(vec2 == vec![(), (), ()]);"}, {"sha": "e480d29541e368d8a52ddfbc1a912772e46e6071", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -984,7 +984,7 @@ mod test_map {\n         let mut m = VecMap::new();\n         m.insert(1, box 2);\n         let mut called = false;\n-        for (k, v) in m.into_iter() {\n+        for (k, v) in m {\n             assert!(!called);\n             called = true;\n             assert_eq!(k, 1);"}, {"sha": "ead49af18d03f27c5f19813b87cbbf7b1ee99629", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -482,7 +482,7 @@ impl<'a> Formatter<'a> {\n \n         // Writes the sign if it exists, and then the prefix if it was requested\n         let write_prefix = |&: f: &mut Formatter| {\n-            for c in sign.into_iter() {\n+            if let Some(c) = sign {\n                 let mut b = [0; 4];\n                 let n = c.encode_utf8(&mut b).unwrap_or(0);\n                 let b = unsafe { str::from_utf8_unchecked(&b[..n]) };"}, {"sha": "91dba90b0d2e2508d1da2c9e571ca0c7096fd6c1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -417,11 +417,11 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n         _ => sess.bug(\"impossible level in raw_emit_lint\"),\n     }\n \n-    for note in note.into_iter() {\n+    if let Some(note) = note {\n         sess.note(&note[]);\n     }\n \n-    for span in def.into_iter() {\n+    if let Some(span) = def {\n         sess.span_note(span, \"lint level defined here\");\n     }\n }\n@@ -492,7 +492,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n         // specified closure\n         let mut pushed = 0;\n \n-        for result in gather_attrs(attrs).into_iter() {\n+        for result in gather_attrs(attrs) {\n             let v = match result {\n                 Err(span) => {\n                     self.tcx.sess.span_err(span, \"malformed lint attribute\");\n@@ -519,7 +519,7 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                 }\n             };\n \n-            for (lint_id, level, span) in v.into_iter() {\n+            for (lint_id, level, span) in v {\n                 let now = self.lints.get_level_source(lint_id).0;\n                 if now == Forbid && level != Forbid {\n                     let lint_name = lint_id.as_str();\n@@ -727,7 +727,7 @@ impl<'a, 'tcx> IdVisitingOperation for Context<'a, 'tcx> {\n         match self.tcx.sess.lints.borrow_mut().remove(&id) {\n             None => {}\n             Some(lints) => {\n-                for (lint_id, span, msg) in lints.into_iter() {\n+                for (lint_id, span, msg) in lints {\n                     self.span_lint(lint_id.lint, span, &msg[])\n                 }\n             }"}, {"sha": "ccd524a2c03955a950b3929a96dae1659de9fffc", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1589,7 +1589,7 @@ fn encode_index<T, F>(rbml_w: &mut Encoder, index: Vec<entry<T>>, mut write_fn:\n     T: Hash<SipHasher>,\n {\n     let mut buckets: Vec<Vec<entry<T>>> = (0..256u16).map(|_| Vec::new()).collect();\n-    for elt in index.into_iter() {\n+    for elt in index {\n         let mut s = SipHasher::new();\n         elt.val.hash(&mut s);\n         let h = s.finish() as uint;"}, {"sha": "30b783cd5098229af5db5cfade719758f956a1d7", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -425,7 +425,7 @@ impl<'a> Context<'a> {\n         // libraries corresponds to the crate id and hash criteria that this\n         // search is being performed for.\n         let mut libraries = Vec::new();\n-        for (_hash, (rlibs, dylibs)) in candidates.into_iter() {\n+        for (_hash, (rlibs, dylibs)) in candidates {\n             let mut metadata = None;\n             let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n             let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n@@ -501,7 +501,7 @@ impl<'a> Context<'a> {\n             }\n         }\n \n-        for (lib, kind) in m.into_iter() {\n+        for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n             let metadata = match get_metadata_section(self.target.options.is_like_osx,\n                                                       &lib) {"}, {"sha": "38084d1c2c06fe42aa067491284e23e4a7a5707c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -77,7 +77,7 @@ impl<'a> fmt::Debug for Matrix<'a> {\n         let total_width = column_widths.iter().map(|n| *n).sum() + column_count * 3 + 1;\n         let br = repeat('+').take(total_width).collect::<String>();\n         try!(write!(f, \"{}\\n\", br));\n-        for row in pretty_printed_matrix.into_iter() {\n+        for row in pretty_printed_matrix {\n             try!(write!(f, \"+\"));\n             for (column, pat_str) in row.into_iter().enumerate() {\n                 try!(write!(f, \" \"));"}, {"sha": "4478e3270874dc43b8642a64b563f260d40afb68", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -318,7 +318,7 @@ fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n     }\n \n     let dead_code = lint::builtin::DEAD_CODE.name_lower();\n-    for attr in lint::gather_attrs(attrs).into_iter() {\n+    for attr in lint::gather_attrs(attrs) {\n         match attr {\n             Ok((ref name, lint::Allow, _))\n                 if name.get() == dead_code => return true,"}, {"sha": "43319540c4ea94a63de47890c500bd9b40b845d5", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -352,7 +352,7 @@ impl<T> VecPerParamSpace<T> {\n     pub fn replace(&mut self, space: ParamSpace, elems: Vec<T>) {\n         // FIXME (#15435): slow; O(n^2); could enhance vec to make it O(n).\n         self.truncate(space, 0);\n-        for t in elems.into_iter() {\n+        for t in elems {\n             self.push(space, t);\n         }\n     }"}, {"sha": "8adcd256ccebcccc825e70aa72fa7dee0b608918", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -125,7 +125,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         let mut selcx = SelectionContext::new(infcx, typer);\n         let normalized = project::normalize_projection_type(&mut selcx, projection_ty, cause, 0);\n \n-        for obligation in normalized.obligations.into_iter() {\n+        for obligation in normalized.obligations {\n             self.register_predicate_obligation(infcx, obligation);\n         }\n \n@@ -289,7 +289,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n \n             // Now go through all the successful ones,\n             // registering any nested obligations for the future.\n-            for new_obligation in new_obligations.into_iter() {\n+            for new_obligation in new_obligations {\n                 self.register_predicate_obligation(selcx.infcx(), new_obligation);\n             }\n         }"}, {"sha": "f69bf31626f628591c721d2d3628988c470e9ddd", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -438,7 +438,7 @@ pub fn normalize_param_env<'a,'tcx>(param_env: &ty::ParameterEnvironment<'a,'tcx\n         let mut fulfill_cx = FulfillmentContext::new();\n         let Normalized { value: predicates, obligations } =\n             project::normalize(selcx, cause, &param_env.caller_bounds);\n-        for obligation in obligations.into_iter() {\n+        for obligation in obligations {\n             fulfill_cx.register_predicate_obligation(selcx.infcx(), obligation);\n         }\n         try!(fulfill_cx.select_all_or_error(selcx.infcx(), param_env));"}, {"sha": "b9bf577b38e62fc479259241cdd1a353ed37b2c6", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -204,7 +204,7 @@ impl<'a> PluginLoader<'a> {\n             }\n         }\n \n-        for mut def in macros.into_iter() {\n+        for mut def in macros {\n             let name = token::get_ident(def.ident);\n             def.use_locally = match macro_selection.as_ref() {\n                 None => true,"}, {"sha": "88f6dc673cf18f8e4b8ab2aaf97e92b03c840272", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -300,7 +300,7 @@ macro_rules! options {\n     pub fn $buildfn(matches: &getopts::Matches) -> $struct_name\n     {\n         let mut op = $defaultfn();\n-        for option in matches.opt_strs($prefix).into_iter() {\n+        for option in matches.opt_strs($prefix) {\n             let mut iter = option.splitn(1, '=');\n             let key = iter.next().unwrap();\n             let value = iter.next();\n@@ -831,7 +831,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let mut describe_lints = false;\n \n     for &level in &[lint::Allow, lint::Warn, lint::Deny, lint::Forbid] {\n-        for lint_name in matches.opt_strs(level.as_str()).into_iter() {\n+        for lint_name in matches.opt_strs(level.as_str()) {\n             if lint_name == \"help\" {\n                 describe_lints = true;\n             } else {"}, {"sha": "8d73532cf52327963ec81140f0afc3cde617eb82", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -424,7 +424,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 diagnostics::plugin::expand_build_diagnostic_array);\n         }\n \n-        for registrar in registrars.into_iter() {\n+        for registrar in registrars {\n             registry.args_hidden = Some(registrar.args);\n             (registrar.fun)(&mut registry);\n         }\n@@ -434,11 +434,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n-        for pass in lint_passes.into_iter() {\n+        for pass in lint_passes {\n             ls.register_pass(Some(sess), true, pass);\n         }\n \n-        for (name, to) in lint_groups.into_iter() {\n+        for (name, to) in lint_groups {\n             ls.register_group(Some(sess), true, name, to);\n         }\n     }"}, {"sha": "794d66e66ab7321f4623fecf29e50be192957668", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -373,7 +373,7 @@ Available lint options:\n     println!(\"    {}  {:7.7}  {}\", padded(\"----\"), \"-------\", \"-------\");\n \n     let print_lints = |&: lints: Vec<&Lint>| {\n-        for lint in lints.into_iter() {\n+        for lint in lints {\n             let name = lint.name_lower().replace(\"_\", \"-\");\n             println!(\"    {}  {:7.7}  {}\",\n                      padded(&name[]), lint.default_level.as_str(), lint.desc);\n@@ -400,7 +400,7 @@ Available lint options:\n     println!(\"    {}  {}\", padded(\"----\"), \"---------\");\n \n     let print_lint_groups = |&: lints: Vec<(&'static str, Vec<lint::LintId>)>| {\n-        for (name, to) in lints.into_iter() {\n+        for (name, to) in lints {\n             let name = name.chars().map(|x| x.to_lowercase())\n                            .collect::<String>().replace(\"_\", \"-\");\n             let desc = to.into_iter().map(|x| x.as_str().replace(\"_\", \"-\"))"}, {"sha": "a5fb57eadc41d0901d6d4f77043c8292b5ee9f39", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -3607,10 +3607,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             TyQPath(ref qpath) => {\n                 self.resolve_type(&*qpath.self_type);\n                 self.resolve_trait_reference(ty.id, &*qpath.trait_ref, TraitQPath);\n-                for ty in qpath.item_path.parameters.types().into_iter() {\n+                for ty in qpath.item_path.parameters.types() {\n                     self.resolve_type(&**ty);\n                 }\n-                for binding in qpath.item_path.parameters.bindings().into_iter() {\n+                for binding in qpath.item_path.parameters.bindings() {\n                     self.resolve_type(&*binding.ty);\n                 }\n             }"}, {"sha": "145cf46ad9daf02bfccf2c77d5a88fdf2f40948c", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1275,7 +1275,7 @@ fn add_upstream_native_libraries(cmd: &mut Command, sess: &Session) {\n     // we're just getting an ordering of crate numbers, we're not worried about\n     // the paths.\n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n-    for (cnum, _) in crates.into_iter() {\n+    for (cnum, _) in crates {\n         let libs = csearch::get_native_libraries(&sess.cstore, cnum);\n         for &(kind, ref lib) in &libs {\n             match kind {"}, {"sha": "38c68bc9fa426005e6add8fc17fd3a2f29ade027", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -48,7 +48,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n     // load the bitcode from the archive. Then merge it into the current LLVM\n     // module that we've got.\n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n-    for (cnum, path) in crates.into_iter() {\n+    for (cnum, path) in crates {\n         let name = sess.cstore.get_crate_data(cnum).name.clone();\n         let path = match path {\n             Some(p) => p,"}, {"sha": "5312d2ca1ddeee3d40675c631a80262e4b82599e", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -941,7 +941,7 @@ fn run_work_multithreaded(sess: &Session,\n     }\n \n     let mut panicked = false;\n-    for rx in futures.into_iter() {\n+    for rx in futures {\n         match rx.recv() {\n             Ok(()) => {},\n             Err(_) => {"}, {"sha": "5f383d54a68ca5d355fb45fc49e90335dd245dfb", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1045,7 +1045,7 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n             }));\n \n             assert_eq!(arg_tys.len(), 1 + rhs.len());\n-            for (rhs, rhs_id) in rhs.into_iter() {\n+            for (rhs, rhs_id) in rhs {\n                 llargs.push(unpack_result!(bcx, {\n                     trans_arg_datum(bcx, arg_tys[1], rhs,\n                                     arg_cleanup_scope,"}, {"sha": "b3d388b0f0236b3e8f257db91d197b44fceba0bd", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -333,7 +333,7 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n            obligations.repr(tcx));\n \n     let mut fulfill_cx = traits::FulfillmentContext::new();\n-    for obligation in obligations.into_iter() {\n+    for obligation in obligations {\n         fulfill_cx.register_predicate_obligation(&infcx, obligation);\n     }\n     let result = drain_fulfillment_cx(DUMMY_SP, &infcx, &mut fulfill_cx, &result);"}, {"sha": "8809931cd80c23b23f81096be36772dd5b33d520", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -537,7 +537,7 @@ pub fn instantiate_poly_trait_ref<'tcx>(\n         instantiate_trait_ref(this, &shifted_rscope, &ast_trait_ref.trait_ref,\n                               self_ty, Some(&mut projections));\n \n-    for projection in projections.into_iter() {\n+    for projection in projections {\n         poly_projections.push(ty::Binder(projection));\n     }\n "}, {"sha": "377af080526b7084a961c372de6535587d5cb511", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -33,7 +33,7 @@ pub fn normalize_associated_types_in<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     debug!(\"normalize_associated_types_in: result={} predicates={}\",\n            result.repr(infcx.tcx),\n            obligations.repr(infcx.tcx));\n-    for obligation in obligations.into_iter() {\n+    for obligation in obligations {\n         fulfillment_cx.register_predicate_obligation(infcx, obligation);\n     }\n     result"}, {"sha": "dc4d7d466472800a9ddb633e0207c32e5be7c9e4", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -248,7 +248,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n \n     let mut selcx = traits::SelectionContext::new(&infcx, &trait_param_env);\n \n-    for predicate in impl_pred.fns.into_iter() {\n+    for predicate in impl_pred.fns {\n         let traits::Normalized { value: predicate, .. } =\n             traits::normalize(&mut selcx, normalize_cause.clone(), &predicate);\n "}, {"sha": "a988fb4cc6e19015e0b58ec43b737db33bbd6742", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -448,7 +448,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n     {\n         let mut duplicates = HashSet::new();\n         let opt_applicable_traits = self.fcx.ccx.trait_map.get(&expr_id);\n-        for applicable_traits in opt_applicable_traits.into_iter() {\n+        if let Some(applicable_traits) = opt_applicable_traits {\n             for &trait_did in applicable_traits {\n                 if duplicates.insert(trait_did) {\n                     try!(self.assemble_extension_candidates_for_trait(trait_did));"}, {"sha": "6f66010925ec0b5411d059312947ce6bdb08c573", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -142,7 +142,7 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n               ty::item_path_str(tcx, object_trait_ref.def_id()));\n \n     let violations = traits::object_safety_violations(tcx, object_trait_ref.clone());\n-    for violation in violations.into_iter() {\n+    for violation in violations {\n         match violation {\n             ObjectSafetyViolation::SizedSelf => {\n                 tcx.sess.span_note(\n@@ -269,7 +269,7 @@ fn check_object_type_binds_all_associated_types<'tcx>(tcx: &ty::ctxt<'tcx>,\n         associated_types.remove(&pair);\n     }\n \n-    for (trait_def_id, name) in associated_types.into_iter() {\n+    for (trait_def_id, name) in associated_types {\n         span_err!(tcx.sess, span, E0191,\n             \"the value of the associated type `{}` (from the trait `{}`) must be specified\",\n                     name.user_string(tcx),"}, {"sha": "71b495af444dd240f313e5a53f59ecedd489355c", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -268,10 +268,10 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                 let selcx = &mut traits::SelectionContext::new(fcx.infcx(), fcx);\n                 traits::normalize(selcx, cause.clone(), &predicates)\n             };\n-            for predicate in predicates.value.into_iter() {\n+            for predicate in predicates.value {\n                 fcx.register_predicate(traits::Obligation::new(cause.clone(), predicate));\n             }\n-            for obligation in predicates.obligations.into_iter() {\n+            for obligation in predicates.obligations {\n                 fcx.register_predicate(obligation);\n             }\n         });"}, {"sha": "4114e92a0969f70d14183ed88288feaa8689582f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1109,7 +1109,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n \n     debug!(\"ty_generics_for_trait: assoc_predicates={}\", assoc_predicates.repr(ccx.tcx));\n \n-    for assoc_predicate in assoc_predicates.into_iter() {\n+    for assoc_predicate in assoc_predicates {\n         generics.predicates.push(subst::TypeSpace, assoc_predicate);\n     }\n \n@@ -1310,7 +1310,7 @@ fn ty_generics<'a,'tcx>(ccx: &CollectCtxt<'a,'tcx>,\n     {\n         for type_param_def in result.types.get_slice(space) {\n             let param_ty = ty::mk_param_from_def(tcx, type_param_def);\n-            for predicate in ty::predicates(tcx, param_ty, &type_param_def.bounds).into_iter() {\n+            for predicate in ty::predicates(tcx, param_ty, &type_param_def.bounds) {\n                 result.predicates.push(space, predicate);\n             }\n         }"}, {"sha": "6247c6dad1496dd23b3e2a9fce432e2427621e94", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1231,7 +1231,7 @@ impl Context {\n                         _ => unreachable!()\n                     };\n                     this.sidebar = this.build_sidebar(&m);\n-                    for item in m.items.into_iter() {\n+                    for item in m.items {\n                         f(this,item);\n                     }\n                     Ok(())"}, {"sha": "531e798a59f9bf7bec895c0e97c468a8eaf4c06a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -431,7 +431,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n         pm.add_plugin(plugin);\n     }\n     info!(\"loading plugins...\");\n-    for pname in plugins.into_iter() {\n+    for pname in plugins {\n         pm.load_plugin(pname);\n     }\n "}, {"sha": "3bc9e699035da3b2f70eef1f2f2bb23aa87a69b4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -2371,7 +2371,7 @@ impl ::Decoder for Decoder {\n     {\n         let obj = try!(expect!(self.pop(), Object));\n         let len = obj.len();\n-        for (key, value) in obj.into_iter() {\n+        for (key, value) in obj {\n             self.stack.push(value);\n             self.stack.push(Json::String(key));\n         }"}, {"sha": "e1006f23996f2fa9e153f619ef3bd4a918695714", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -649,7 +649,7 @@ pub fn rmdir_recursive(path: &Path) -> IoResult<()> {\n \n         // delete all regular files in the way and push subdirs\n         // on the stack\n-        for child in children.into_iter() {\n+        for child in children {\n             // FIXME(#12795) we should use lstat in all cases\n             let child_type = match cfg!(windows) {\n                 true => try!(update_err(stat(&child), path)),"}, {"sha": "bbe3a71dcc0d17a12057884758c81e22de430900", "filename": "src/libstd/old_io/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fmod.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -36,7 +36,7 @@ fn with_addresses<A, T, F>(addr: A, mut action: F) -> IoResult<T> where\n \n     let addresses = try!(addr.to_socket_addr_all());\n     let mut err = DEFAULT_ERROR;\n-    for addr in addresses.into_iter() {\n+    for addr in addresses {\n         match action(addr) {\n             Ok(r) => return Ok(r),\n             Err(e) => err = e"}, {"sha": "3f15cf71ec3f74974e2f1fc8397ae1f9144c294b", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -58,7 +58,7 @@ pub fn cleanup() {\n         // If we never called init, not need to cleanup!\n         if queue as uint != 0 {\n             let queue: Box<Queue> = mem::transmute(queue);\n-            for to_run in queue.into_iter() {\n+            for to_run in *queue {\n                 to_run.invoke(());\n             }\n         }"}, {"sha": "2dfc708e15bebdc7386d96469e0451551b651251", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -508,7 +508,7 @@ mod tests {\n         }\n \n         // Wait for children to pass their asserts\n-        for r in children.into_iter() {\n+        for r in children {\n             assert!(r.join().is_ok());\n         }\n "}, {"sha": "58797111a20710526334b87490d5e7945e021850", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -147,7 +147,7 @@ impl Process {\n \n                 // Split the value and test each path to see if the\n                 // program exists.\n-                for path in os::split_paths(v.container_as_bytes()).into_iter() {\n+                for path in os::split_paths(v.container_as_bytes()) {\n                     let path = path.join(cfg.program().as_bytes())\n                                    .with_extension(os::consts::EXE_EXTENSION);\n                     if path.exists() {"}, {"sha": "e5cd6f636905b25375ccb5661328ca13fa7cd7ad", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -490,7 +490,7 @@ fn find_stability_generic<'a,\n pub fn find_stability(diagnostic: &SpanHandler, attrs: &[Attribute],\n                       item_sp: Span) -> Option<Stability> {\n     let (s, used) = find_stability_generic(diagnostic, attrs.iter(), item_sp);\n-    for used in used.into_iter() { mark_used(used) }\n+    for used in used { mark_used(used) }\n     return s;\n }\n "}, {"sha": "4e10cc9aacc08cf1e625f3b10e890d5153fb165f", "filename": "src/libsyntax/ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -25,7 +25,7 @@ pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n         None => return base::DummyResult::expr(sp)\n     };\n     let mut accumulator = String::new();\n-    for e in es.into_iter() {\n+    for e in es {\n         match e.node {\n             ast::ExprLit(ref lit) => {\n                 match lit.node {"}, {"sha": "2787339aac0316929716ecb7d38d98853da9d9b0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -1420,11 +1420,11 @@ pub fn expand_crate(parse_sess: &parse::ParseSess,\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n     let mut expander = MacroExpander::new(&mut cx);\n \n-    for def in imported_macros.into_iter() {\n+    for def in imported_macros {\n         expander.cx.insert_macro(def);\n     }\n \n-    for (name, extension) in user_exts.into_iter() {\n+    for (name, extension) in user_exts {\n         expander.cx.syntax_env.insert(name, extension);\n     }\n "}, {"sha": "27fd803d3fe5bda59542a548e733541ff1b5f9e6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -5445,7 +5445,7 @@ impl<'a> Parser<'a> {\n                     seq_sep_trailing_allowed(token::Comma),\n                     |p| p.parse_ty_sum()\n                 );\n-                for ty in arg_tys.into_iter() {\n+                for ty in arg_tys {\n                     args.push(ast::VariantArg {\n                         ty: ty,\n                         id: ast::DUMMY_NODE_ID,"}, {"sha": "5c42485f239a524f548d52287781ab45ef0e3b8f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -966,7 +966,7 @@ impl<'a> State<'a> {\n                 try!(self.print_generics(generics));\n                 let bounds: Vec<_> = bounds.iter().map(|b| b.clone()).collect();\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n-                for b in bounds.into_iter() {\n+                for b in bounds {\n                     if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = b {\n                         try!(space(&mut self.s));\n                         try!(self.word_space(\"for ?\"));"}, {"sha": "25377e3afa179178b870c1ed949e35643fe70809", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -806,7 +806,7 @@ fn run_tests<F>(opts: &TestOpts,\n \n     // All benchmarks run at the end, in serial.\n     // (this includes metric fns)\n-    for b in filtered_benchs_and_metrics.into_iter() {\n+    for b in filtered_benchs_and_metrics {\n         try!(callback(TeWait(b.desc.clone(), b.testfn.padding())));\n         run_test(opts, !opts.run_benchmarks, b, tx.clone());\n         let (test, result, stdout) = rx.recv().unwrap();"}, {"sha": "3c9c4bdedcc876febdf62a64dfaa8698ece966c4", "filename": "src/rustbook/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Frustbook%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Frustbook%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbuild.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -177,7 +177,7 @@ impl Subcommand for Build {\n             }\n             Err(errors) => {\n                 let n = errors.len();\n-                for err in errors.into_iter() {\n+                for err in errors {\n                     term.err(&format!(\"error: {}\", err)[]);\n                 }\n "}, {"sha": "d3cb8a7316e8640178eb2c8fb7d726f0c66e857b", "filename": "src/rustbook/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Frustbook%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Frustbook%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Ftest.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -64,7 +64,7 @@ impl Subcommand for Test {\n                 }\n             }\n             Err(errors) => {\n-                for err in errors.into_iter() {\n+                for err in errors {\n                     term.err(&err[]);\n                 }\n                 return Err(box \"There was an error.\" as Box<Error>);"}, {"sha": "259b4d9418dcf428b5bf8312db7fa43e09cf1571", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -75,7 +75,7 @@ fn run(args: &[String]) {\n             server(&from_parent, &to_parent);\n         });\n \n-        for r in worker_results.into_iter() {\n+        for r in worker_results {\n             let _ = r.join();\n         }\n "}, {"sha": "1341c03e5055b05e7645f55f2d0ab011786dbf46", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -82,7 +82,7 @@ fn run(args: &[String]) {\n             server(&from_parent, &to_parent);\n         });\n \n-        for r in worker_results.into_iter() {\n+        for r in worker_results {\n             let _ = r.join();\n         }\n "}, {"sha": "dc65a63c5cb400c2f3d5271d6aa44093a9c3366a", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -114,7 +114,7 @@ fn main() {\n         Thread::scoped(move || inner(depth, iterations))\n     }).collect::<Vec<_>>();\n \n-    for message in messages.into_iter() {\n+    for message in messages {\n         println!(\"{}\", message.join().ok().unwrap());\n     }\n "}, {"sha": "47613e2d69c73c7d5a95637b167daf8e97ce483d", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -171,7 +171,7 @@ fn fannkuch(n: i32) -> (i32, i32) {\n \n     let mut checksum = 0;\n     let mut maxflips = 0;\n-    for fut in futures.into_iter() {\n+    for fut in futures {\n         let (cs, mf) = fut.join().ok().unwrap();\n         checksum += cs;\n         maxflips = cmp::max(maxflips, mf);"}, {"sha": "e3f8e60df93db2fcc7a0901e331abeefa1a7b346", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -308,7 +308,7 @@ fn main() {\n         Thread::scoped(move|| generate_frequencies(input.as_slice(), occ.len()))\n     }).collect();\n \n-    for (i, freq) in nb_freqs.into_iter() {\n+    for (i, freq) in nb_freqs {\n         print_frequencies(&freq.join().ok().unwrap(), i);\n     }\n     for (&occ, freq) in OCCURRENCES.iter().zip(occ_freqs.into_iter()) {"}, {"sha": "3bd786a3be0627804a79ff4a95f6202ae4d0dde7", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -106,7 +106,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n         })\n     }).collect::<Vec<_>>();\n \n-    for res in precalc_futures.into_iter() {\n+    for res in precalc_futures {\n         let (rs, is) = res.join().ok().unwrap();\n         precalc_r.extend(rs.into_iter());\n         precalc_i.extend(is.into_iter());\n@@ -142,7 +142,7 @@ fn mandelbrot<W: old_io::Writer>(w: uint, mut out: W) -> old_io::IoResult<()> {\n     }).collect::<Vec<_>>();\n \n     try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n-    for res in data.into_iter() {\n+    for res in data {\n         try!(out.write(res.join().ok().unwrap().as_slice()));\n     }\n     out.flush()"}, {"sha": "ea1d913b3e2ee9cd5f576908c7d507e40ef989e2", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -82,7 +82,7 @@ fn stress(num_tasks: int) {\n             stress_task(i);\n         }));\n     }\n-    for r in results.into_iter() {\n+    for r in results {\n         let _ = r.join();\n     }\n }"}, {"sha": "0d526d60190ae1aa75acf9f1ef6403aed733e940", "filename": "src/test/debuginfo/destructured-for-loop-variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fdestructured-for-loop-variable.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -215,7 +215,7 @@ fn main() {\n       zzz(); // #break\n     }\n \n-    for simple_tuple_ident in vec![(34903493u32, 232323i64)].into_iter() {\n+    for simple_tuple_ident in vec![(34903493u32, 232323i64)] {\n       zzz(); // #break\n     }\n }"}, {"sha": "902829468381de01093ec8d74bbe3bfb59451699", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -61,7 +61,7 @@ fn test00() {\n     }\n \n     // Join spawned tasks...\n-    for r in results.into_iter() { r.join(); }\n+    for r in results { r.join(); }\n \n     println!(\"Completed: Final number is: \");\n     println!(\"{}\", sum);"}, {"sha": "0b85916d224108922dc2b3bd735cf5464def66ce", "filename": "src/test/run-pass/unboxed-closures-counter-not-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     call(|| {\n         // Move `y`, but do not move `counter`, even though it is read\n         // by value (note that it is also mutated).\n-        for item in y.into_iter() {\n+        for item in y {\n             let v = counter;\n             counter += v;\n         }"}, {"sha": "99663646254e73969c9a22bfeabbb40d26749540", "filename": "src/test/run-pass/unboxed-closures-move-some-upvars-in-by-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd702702ee90ddb47d207f8886818c7f91600713/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs?ref=fd702702ee90ddb47d207f8886818c7f91600713", "patch": "@@ -22,7 +22,7 @@ fn main() {\n         // Here: `x` must be captured with a mutable reference in\n         // order for us to append on it, and `y` must be captured by\n         // value.\n-        for item in y.into_iter() {\n+        for item in y {\n             x.push(item);\n         }\n     });"}]}