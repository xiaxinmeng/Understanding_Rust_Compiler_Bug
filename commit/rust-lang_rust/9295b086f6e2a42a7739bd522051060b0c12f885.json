{"sha": "9295b086f6e2a42a7739bd522051060b0c12f885", "node_id": "C_kwDOAAsO6NoAKDkyOTViMDg2ZjZlMmE0MmE3NzM5YmQ1MjIwNTEwNjBiMGMxMmY4ODU", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:29:16Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T16:29:16Z"}, "message": "Turn validate_simd_type into a function\n\nThis effectively outlines it, significantly reducing the size of\nthe codegen_simd_intrinsic_call llvm ir from 10419 lines to 6378 lines.", "tree": {"sha": "9d7210b98f84a111b889c394515a696d47ec3034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d7210b98f84a111b889c394515a696d47ec3034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9295b086f6e2a42a7739bd522051060b0c12f885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9295b086f6e2a42a7739bd522051060b0c12f885", "html_url": "https://github.com/rust-lang/rust/commit/9295b086f6e2a42a7739bd522051060b0c12f885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9295b086f6e2a42a7739bd522051060b0c12f885/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6d8c1b244213c0a7677504ffeced9cc9c97e27", "html_url": "https://github.com/rust-lang/rust/commit/9e6d8c1b244213c0a7677504ffeced9cc9c97e27"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "f305942a8c3b371ceee0dfca69ad9c85915a1bfe", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9295b086f6e2a42a7739bd522051060b0c12f885/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9295b086f6e2a42a7739bd522051060b0c12f885/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=9295b086f6e2a42a7739bd522051060b0c12f885", "patch": "@@ -91,11 +91,11 @@ macro validate_atomic_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n     }\n }\n \n-macro validate_simd_type($fx:ident, $intrinsic:ident, $span:ident, $ty:expr) {\n-    if !$ty.is_simd() {\n-        $fx.tcx.sess.span_err($span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", $intrinsic, $ty));\n+fn validate_simd_type(fx: &mut FunctionCx<'_, '_, '_>, intrinsic: Symbol, span: Span, ty: Ty<'_>) {\n+    if !ty.is_simd() {\n+        fx.tcx.sess.span_err(span, &format!(\"invalid monomorphization of `{}` intrinsic: expected SIMD input type, found non-SIMD `{}`\", intrinsic, ty));\n         // Prevent verifier error\n-        crate::trap::trap_unreachable($fx, \"compilation should not have succeeded\");\n+        crate::trap::trap_unreachable(fx, \"compilation should not have succeeded\");\n         return;\n     }\n }"}, {"sha": "9e42ff587bd74afd9e531b911fda76e3da65adae", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9295b086f6e2a42a7739bd522051060b0c12f885/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9295b086f6e2a42a7739bd522051060b0c12f885/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=9295b086f6e2a42a7739bd522051060b0c12f885", "patch": "@@ -21,7 +21,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_cast, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n                 let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n \n@@ -34,27 +34,27 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_eq, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, Equal|Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, NotEqual|NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, UnsignedLessThan|SignedLessThan|LessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual|LessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan|GreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_cmp!(\n                 fx,\n                 UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual|GreaterThanOrEqual\n@@ -64,7 +64,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U\n         _ if intrinsic.as_str().starts_with(\"simd_shuffle\"), (c x, c y, o idx) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n \n             // If this intrinsic is the older \"simd_shuffleN\" form, simply parse the integer.\n             // If there is no suffix, use the index array length.\n@@ -166,7 +166,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_extract, (c v, o idx) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             let idx_const = if let Some(idx_const) = crate::constant::mir_operand_get_const_val(fx, idx) {\n                 idx_const\n             } else {\n@@ -194,7 +194,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_neg, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = match lane_layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().ineg(lane),\n@@ -206,39 +206,39 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_fabs, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = fx.bcx.ins().fabs(lane);\n                 CValue::by_val(ret_lane, ret_lane_layout)\n             });\n         };\n \n         simd_fsqrt, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = fx.bcx.ins().sqrt(lane);\n                 CValue::by_val(ret_lane, ret_lane_layout)\n             });\n         };\n \n         simd_add, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, iadd|fadd(x, y) -> ret);\n         };\n         simd_sub, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, isub|fsub(x, y) -> ret);\n         };\n         simd_mul, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, imul|fmul(x, y) -> ret);\n         };\n         simd_div, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, udiv|sdiv|fdiv(x, y) -> ret);\n         };\n         simd_rem, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n                 let res_lane = match lane_layout.ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n@@ -261,28 +261,28 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n         simd_shl, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, ishl(x, y) -> ret);\n         };\n         simd_shr, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, ushr|sshr(x, y) -> ret);\n         };\n         simd_and, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, band(x, y) -> ret);\n         };\n         simd_or, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, bor(x, y) -> ret);\n         };\n         simd_xor, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, bxor(x, y) -> ret);\n         };\n \n         simd_fma, (c a, c b, c c) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             assert_eq!(a.layout(), b.layout());\n             assert_eq!(a.layout(), c.layout());\n             let layout = a.layout();\n@@ -305,16 +305,16 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_fmin, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_flt_binop!(fx, fmin(x, y) -> ret);\n         };\n         simd_fmax, (c x, c y) {\n-            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, x.layout().ty);\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n \n         simd_round, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n                 let res_lane = match lane_layout.ty.kind() {\n                     ty::Float(FloatTy::F32) => fx.lib_call(\n@@ -335,29 +335,29 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n         simd_ceil, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = fx.bcx.ins().ceil(lane);\n                 CValue::by_val(ret_lane, ret_lane_layout)\n             });\n         };\n         simd_floor, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = fx.bcx.ins().floor(lane);\n                 CValue::by_val(ret_lane, ret_lane_layout)\n             });\n         };\n         simd_trunc, (c a) {\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n                 let ret_lane = fx.bcx.ins().trunc(lane);\n                 CValue::by_val(ret_lane, ret_lane_layout)\n             });\n         };\n \n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fadd(a, b)\n@@ -368,7 +368,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_mul_ordered | simd_reduce_mul_unordered, (c v, v acc) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n                 if lane_layout.ty.is_floating_point() {\n                     fx.bcx.ins().fmul(a, b)\n@@ -379,32 +379,32 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_all, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_any, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_and, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().band(a, b));\n         };\n \n         simd_reduce_or, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n         simd_reduce_xor, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bxor(a, b));\n         };\n \n         simd_reduce_min, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n                 let lt = match layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b),\n@@ -417,7 +417,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_reduce_max, (c v) {\n-            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n                 let gt = match layout.ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b),\n@@ -430,8 +430,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_select, (c m, c a, c b) {\n-            validate_simd_type!(fx, intrinsic, span, m.layout().ty);\n-            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, m.layout().ty);\n+            validate_simd_type(fx, intrinsic, span, a.layout().ty);\n             assert_eq!(a.layout(), b.layout());\n \n             let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);"}]}