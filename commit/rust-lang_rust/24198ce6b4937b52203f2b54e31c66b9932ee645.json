{"sha": "24198ce6b4937b52203f2b54e31c66b9932ee645", "node_id": "C_kwDOAAsO6NoAKDI0MTk4Y2U2YjQ5MzdiNTIyMDNmMmI1NGUzMWM2NmI5OTMyZWU2NDU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-12T13:13:42Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-13T13:21:55Z"}, "message": "Move all downloaded repos to the downloads/ dir", "tree": {"sha": "ef529b10d469cc8032a900a5308f845ae744de04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef529b10d469cc8032a900a5308f845ae744de04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24198ce6b4937b52203f2b54e31c66b9932ee645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24198ce6b4937b52203f2b54e31c66b9932ee645", "html_url": "https://github.com/rust-lang/rust/commit/24198ce6b4937b52203f2b54e31c66b9932ee645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24198ce6b4937b52203f2b54e31c66b9932ee645/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1dc206c4f87ba637200dc65d6c125534dcf13eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1dc206c4f87ba637200dc65d6c125534dcf13eb", "html_url": "https://github.com/rust-lang/rust/commit/f1dc206c4f87ba637200dc65d6c125534dcf13eb"}], "stats": {"total": 92, "additions": 53, "deletions": 39}, "files": [{"sha": "fae09592c6ac0dc91be2641093896c0adc9559d8", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24198ce6b4937b52203f2b54e31c66b9932ee645/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/24198ce6b4937b52203f2b54e31c66b9932ee645/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=24198ce6b4937b52203f2b54e31c66b9932ee645", "patch": "@@ -15,9 +15,4 @@ perf.data.old\n /build_sysroot/compiler-builtins\n /build_sysroot/rustc_version\n /rust\n-/rand\n-/regex\n-/simple-raytracer\n-/portable-simd\n-/abi-cafe\n-/abi-checker\n+/download"}, {"sha": "fae5b27163680badc511023892f92fe462ddfbaf", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=24198ce6b4937b52203f2b54e31c66b9932ee645", "patch": "@@ -3,6 +3,7 @@ use std::path::Path;\n \n use super::build_sysroot;\n use super::config;\n+use super::prepare;\n use super::utils::{cargo_command, spawn_and_wait};\n use super::SysrootKind;\n \n@@ -35,9 +36,8 @@ pub(crate) fn run(\n     );\n \n     eprintln!(\"Running abi-cafe\");\n-    let mut abi_cafe_path = env::current_dir().unwrap();\n-    abi_cafe_path.push(\"abi-cafe\");\n-    env::set_current_dir(&abi_cafe_path.clone()).unwrap();\n+    let abi_cafe_path = prepare::ABI_CAFE.source_dir();\n+    env::set_current_dir(abi_cafe_path.clone()).unwrap();\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n "}, {"sha": "f9ab8ae70412b0ec2d909767557777f268755cc3", "filename": "build_system/prepare.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=24198ce6b4937b52203f2b54e31c66b9932ee645", "patch": "@@ -35,6 +35,11 @@ pub(crate) const SIMPLE_RAYTRACER: GitRepo = GitRepo::github(\n );\n \n pub(crate) fn prepare() {\n+    if Path::new(\"download\").exists() {\n+        std::fs::remove_dir_all(Path::new(\"download\")).unwrap();\n+    }\n+    std::fs::create_dir_all(Path::new(\"download\")).unwrap();\n+\n     prepare_sysroot();\n \n     // FIXME maybe install this only locally?\n@@ -48,11 +53,15 @@ pub(crate) fn prepare() {\n     SIMPLE_RAYTRACER.fetch();\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = cargo_command(\"cargo\", \"build\", None, Path::new(\"simple-raytracer\"));\n+    let build_cmd = cargo_command(\"cargo\", \"build\", None, &SIMPLE_RAYTRACER.source_dir());\n     spawn_and_wait(build_cmd);\n     fs::copy(\n-        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n-        Path::new(\"simple-raytracer\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n+        SIMPLE_RAYTRACER\n+            .source_dir()\n+            .join(\"target\")\n+            .join(\"debug\")\n+            .join(get_file_name(\"main\", \"bin\")),\n+        SIMPLE_RAYTRACER.source_dir().join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }\n@@ -106,7 +115,9 @@ impl GitRepo {\n \n     pub(crate) fn source_dir(&self) -> PathBuf {\n         match self.url {\n-            GitRepoUrl::Github { user: _, repo } => PathBuf::from(format!(\"{}\", repo)),\n+            GitRepoUrl::Github { user: _, repo } => {\n+                std::env::current_dir().unwrap().join(\"download\").join(repo)\n+            }\n         }\n     }\n \n@@ -142,9 +153,11 @@ fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &\n         return;\n     }\n \n+    let downloads_dir = std::env::current_dir().unwrap().join(\"download\");\n+\n     let archive_url = format!(\"https://github.com/{}/{}/archive/{}.tar.gz\", user, repo, rev);\n-    let archive_file = format!(\"{}.tar.gz\", rev);\n-    let archive_dir = format!(\"{}-{}\", repo, rev);\n+    let archive_file = downloads_dir.join(format!(\"{}.tar.gz\", rev));\n+    let archive_dir = downloads_dir.join(format!(\"{}-{}\", repo, rev));\n \n     eprintln!(\"[DOWNLOAD] {}/{} from {}\", user, repo, archive_url);\n \n@@ -160,7 +173,7 @@ fn clone_repo_shallow_github(download_dir: &Path, user: &str, repo: &str, rev: &\n \n     // Unpack tar archive\n     let mut unpack_cmd = Command::new(\"tar\");\n-    unpack_cmd.arg(\"xf\").arg(&archive_file);\n+    unpack_cmd.arg(\"xf\").arg(&archive_file).current_dir(downloads_dir);\n     spawn_and_wait(unpack_cmd);\n \n     // Rename unpacked dir to the expected name"}, {"sha": "a414b60f4e06b2b79dccc1ee64bc233f32ae6ba1", "filename": "build_system/tests.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24198ce6b4937b52203f2b54e31c66b9932ee645/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=24198ce6b4937b52203f2b54e31c66b9932ee645", "patch": "@@ -1,5 +1,6 @@\n use super::build_sysroot;\n use super::config;\n+use super::prepare;\n use super::rustc_info::get_wrapper_file_name;\n use super::utils::{cargo_command, hyperfine_command, spawn_and_wait, spawn_and_wait_with_input};\n use build_system::SysrootKind;\n@@ -217,7 +218,7 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n-        runner.in_dir([\"rand\"], |runner| {\n+        runner.in_dir(prepare::RAND.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             if runner.host_triple == runner.target_triple {\n@@ -230,7 +231,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"bench.simple-raytracer\", &|runner| {\n-        runner.in_dir([\"simple-raytracer\"], |runner| {\n+        runner.in_dir(prepare::SIMPLE_RAYTRACER.source_dir(), |runner| {\n             let run_runs = env::var(\"RUN_RUNS\").unwrap_or(\"10\".to_string()).parse().unwrap();\n \n             if runner.host_triple == runner.target_triple {\n@@ -273,19 +274,28 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.libcore\", &|runner| {\n-        runner.in_dir([\"build_sysroot\", \"sysroot_src\", \"library\", \"core\", \"tests\"], |runner| {\n-            runner.run_cargo(\"clean\", []);\n+        runner.in_dir(\n+            std::env::current_dir()\n+                .unwrap()\n+                .join(\"build_sysroot\")\n+                .join(\"sysroot_src\")\n+                .join(\"library\")\n+                .join(\"core\")\n+                .join(\"tests\"),\n+            |runner| {\n+                runner.run_cargo(\"clean\", []);\n \n-            if runner.host_triple == runner.target_triple {\n-                runner.run_cargo(\"test\", []);\n-            } else {\n-                eprintln!(\"Cross-Compiling: Not running tests\");\n-                runner.run_cargo(\"build\", [\"--tests\"]);\n-            }\n-        });\n+                if runner.host_triple == runner.target_triple {\n+                    runner.run_cargo(\"test\", []);\n+                } else {\n+                    eprintln!(\"Cross-Compiling: Not running tests\");\n+                    runner.run_cargo(\"build\", [\"--tests\"]);\n+                }\n+            },\n+        );\n     }),\n     TestCase::new(\"test.regex-shootout-regex-dna\", &|runner| {\n-        runner.in_dir([\"regex\"], |runner| {\n+        runner.in_dir(prepare::REGEX.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n@@ -336,7 +346,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.regex\", &|runner| {\n-        runner.in_dir([\"regex\"], |runner| {\n+        runner.in_dir(prepare::REGEX.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n \n             // newer aho_corasick versions throw a deprecation warning\n@@ -367,7 +377,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         });\n     }),\n     TestCase::new(\"test.portable-simd\", &|runner| {\n-        runner.in_dir([\"portable-simd\"], |runner| {\n+        runner.in_dir(prepare::PORTABLE_SIMD.source_dir(), |runner| {\n             runner.run_cargo(\"clean\", []);\n             runner.run_cargo(\"build\", [\"--all-targets\", \"--target\", &runner.target_triple]);\n \n@@ -506,16 +516,8 @@ impl TestRunner {\n         }\n     }\n \n-    fn in_dir<'a, I, F>(&self, dir: I, callback: F)\n-    where\n-        I: IntoIterator<Item = &'a str>,\n-        F: FnOnce(&TestRunner),\n-    {\n+    fn in_dir(&self, new: impl AsRef<Path>, callback: impl FnOnce(&TestRunner)) {\n         let current = env::current_dir().unwrap();\n-        let mut new = current.clone();\n-        for d in dir {\n-            new.push(d);\n-        }\n \n         env::set_current_dir(new).unwrap();\n         callback(self);"}, {"sha": "fedab2433aa05f66f33949f35ea62cd88ec3f4ed", "filename": "clean_all.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24198ce6b4937b52203f2b54e31c66b9932ee645/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/24198ce6b4937b52203f2b54e31c66b9932ee645/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=24198ce6b4937b52203f2b54e31c66b9932ee645", "patch": "@@ -3,4 +3,8 @@ set -e\n \n rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n rm -rf target/ build/ perf.data{,.old} y.bin\n+rm -rf download/\n+\n+# Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n+# FIXME remove at some point in the future\n rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/"}]}