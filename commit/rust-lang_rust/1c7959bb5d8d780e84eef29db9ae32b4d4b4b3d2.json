{"sha": "1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNzk1OWJiNWQ4ZDc4MGU4NGVlZjI5ZGI5YWUzMmI0ZDRiNGIzZDI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T14:42:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T14:42:42Z"}, "message": "Rollup merge of #64439 - 12101111:fix-owned-box, r=Centril\n\nfix #64430, confusing `owned_box` error message in no_std build\n\nFixes #64430", "tree": {"sha": "02f2665ed12dcf87a18bf431eee4d8ae31a90adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f2665ed12dcf87a18bf431eee4d8ae31a90adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfPxiCRBK7hj4Ov3rIwAAdHIIAE9KWbJFECih3/dHPz+q+m8U\nDmSPD8BEeG72hKi6KkGP+i3TqQQty7DNTzBoI3QUu1gG5v6G75epu0im6i/Q+xPq\nxBZGpNO+y+nUjRcNndiRCBvhcnq1wquLdHc+xbyt+NonJgZy3cQBuNrDpeROQrSs\n7sEFj8xq7gGmhui3lwfueAqZYQapGpYy2M5iL1iB0Lrei4GBjSY4fJ9H2W5ObSn8\nIoPgUDI3b2nKxnL+C0ATm574xZQXgDpEEQ/hhWRlP9u2SRdELpHKrooyB7/fUBCD\npIjudaa7pI38bSOT2kKk9vQocR+qMoDx6rNMJxWXhruyLX06QhCfG7HAV67UfNY=\n=gc02\n-----END PGP SIGNATURE-----\n", "payload": "tree 02f2665ed12dcf87a18bf431eee4d8ae31a90adc\nparent bf1253b347d26cc930f769f2e61205075a953b3c\nparent e484f213eebd2a61870eb25a6cee0992eab6275c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568472162 +0200\ncommitter GitHub <noreply@github.com> 1568472162 +0200\n\nRollup merge of #64439 - 12101111:fix-owned-box, r=Centril\n\nfix #64430, confusing `owned_box` error message in no_std build\n\nFixes #64430\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "html_url": "https://github.com/rust-lang/rust/commit/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf1253b347d26cc930f769f2e61205075a953b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf1253b347d26cc930f769f2e61205075a953b3c", "html_url": "https://github.com/rust-lang/rust/commit/bf1253b347d26cc930f769f2e61205075a953b3c"}, {"sha": "e484f213eebd2a61870eb25a6cee0992eab6275c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e484f213eebd2a61870eb25a6cee0992eab6275c", "html_url": "https://github.com/rust-lang/rust/commit/e484f213eebd2a61870eb25a6cee0992eab6275c"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "25d921b7cea4ce3e537b51a45ad231b06a8a158d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "patch": "@@ -2396,9 +2396,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: lang_items::LangItem)  -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(item, None);\n-        self.mk_generic_adt(def_id, ty)\n+    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: lang_items::LangItem)  -> Option<Ty<'tcx>> {\n+        let def_id = self.lang_items().require(item).ok()?;\n+        Some(self.mk_generic_adt(def_id, ty))\n     }\n \n     #[inline]"}, {"sha": "56bd903040ab43548007350392a1dc2bb500e47d", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "patch": "@@ -813,18 +813,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>\n     ) {\n         let rcvr = &args[0];\n-        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, new_rcvr_t| {\n-            if let Ok(pick) = self.lookup_probe(\n-                span,\n-                segment.ident,\n-                new_rcvr_t,\n-                rcvr,\n-                probe::ProbeScope::AllTraits,\n-            ) {\n-                err.span_label(\n-                    pick.item.ident.span,\n-                    &format!(\"the method is available for `{}` here\", new_rcvr_t),\n-                );\n+        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, rcvr_t, lang_item| {\n+            if let Some(new_rcvr_t) = self.tcx.mk_lang_item(rcvr_t, lang_item) {\n+                if let Ok(pick) = self.lookup_probe(\n+                    span,\n+                    segment.ident,\n+                    new_rcvr_t,\n+                    rcvr,\n+                    probe::ProbeScope::AllTraits,\n+                ) {\n+                    err.span_label(\n+                        pick.item.ident.span,\n+                        &format!(\"the method is available for `{}` here\", new_rcvr_t),\n+                    );\n+                }\n             }\n         };\n \n@@ -840,17 +842,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Try alternative arbitrary self types that could fulfill this call.\n                 // FIXME: probe for all types that *could* be arbitrary self-types, not\n                 // just this whitelist.\n-                let box_rcvr_t = self.tcx.mk_box(rcvr_t);\n-                try_alt_rcvr(&mut err, box_rcvr_t);\n-                let pin_rcvr_t = self.tcx.mk_lang_item(\n-                    rcvr_t,\n-                    lang_items::PinTypeLangItem,\n-                );\n-                try_alt_rcvr(&mut err, pin_rcvr_t);\n-                let arc_rcvr_t = self.tcx.mk_lang_item(rcvr_t, lang_items::Arc);\n-                try_alt_rcvr(&mut err, arc_rcvr_t);\n-                let rc_rcvr_t = self.tcx.mk_lang_item(rcvr_t, lang_items::Rc);\n-                try_alt_rcvr(&mut err, rc_rcvr_t);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::OwnedBoxLangItem);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::PinTypeLangItem);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::Arc);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::Rc);\n             }\n             err.emit();\n         }"}, {"sha": "0bc66e06e67319b04bb7a49b25627716e5ce7c72", "filename": "src/test/ui/issues/issue-64430.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Ftest%2Fui%2Fissues%2Fissue-64430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Ftest%2Fui%2Fissues%2Fissue-64430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64430.rs?ref=1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags:-C panic=abort\n+\n+#![no_std]\n+pub struct Foo;\n+\n+fn main() {\n+    Foo.bar()\n+    //~^ ERROR E0599\n+}\n+\n+#[panic_handler]\n+fn panic(_info: &core::panic::PanicInfo) -> ! {\n+    loop{}\n+}"}, {"sha": "f1b2de8d8b36f21525c215c166aacb68e840251c", "filename": "src/test/ui/issues/issue-64430.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64430.stderr?ref=1c7959bb5d8d780e84eef29db9ae32b4d4b4b3d2", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no method named `bar` found for type `Foo` in the current scope\n+  --> $DIR/issue-64430.rs:7:9\n+   |\n+LL | pub struct Foo;\n+   | --------------- method `bar` not found for this\n+...\n+LL |     Foo.bar()\n+   |         ^^^ method not found in `Foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}