{"sha": "6104aefef576c04b36602b6426f90c63be406f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMDRhZWZlZjU3NmMwNGIzNjYwMmI2NDI2ZjkwYzYzYmU0MDZmNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T07:04:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-11T07:04:44Z"}, "message": "Auto merge of #3938 - phansch:more_uicleanup, r=oli-obk\n\nUI test cleanup: Extract or_fun_call and iter_nth tests\n\ncc #2038", "tree": {"sha": "2d7500196fb3815f1255df6ed25b9e6a1f862de1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d7500196fb3815f1255df6ed25b9e6a1f862de1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6104aefef576c04b36602b6426f90c63be406f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6104aefef576c04b36602b6426f90c63be406f69", "html_url": "https://github.com/rust-lang/rust/commit/6104aefef576c04b36602b6426f90c63be406f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6104aefef576c04b36602b6426f90c63be406f69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad3e080bdaa03af627abaec9dbd07d33ad272d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad3e080bdaa03af627abaec9dbd07d33ad272d7", "html_url": "https://github.com/rust-lang/rust/commit/bad3e080bdaa03af627abaec9dbd07d33ad272d7"}, {"sha": "25e2affd3116bd258789768c50a4d43a29779e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e2affd3116bd258789768c50a4d43a29779e8f", "html_url": "https://github.com/rust-lang/rust/commit/25e2affd3116bd258789768c50a4d43a29779e8f"}], "stats": {"total": 493, "additions": 257, "deletions": 236}, "files": [{"sha": "9c21dd82ee45efe0a70c1f0b08b2b0688502fa13", "filename": "tests/ui/iter_nth.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.rs?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -0,0 +1,56 @@\n+// aux-build:option_helpers.rs\n+\n+#![warn(clippy::iter_nth)]\n+\n+#[macro_use]\n+extern crate option_helpers;\n+\n+use option_helpers::IteratorFalsePositives;\n+use std::collections::VecDeque;\n+\n+/// Struct to generate false positives for things with `.iter()`.\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+/// Checks implementation of `ITER_NTH` lint.\n+fn iter_nth() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types.\n+        let bad_vec = some_vec.iter().nth(3);\n+        let bad_slice = &some_vec[..].iter().nth(3);\n+        let bad_boxed_slice = boxed_slice.iter().nth(3);\n+        let bad_vec_deque = some_vec_deque.iter().nth(3);\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types.\n+        let bad_vec = some_vec.iter_mut().nth(3);\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().nth(3);\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+    }\n+\n+    // Make sure we don't lint for non-relevant types.\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    let ok_mut = false_positive.iter_mut().nth(3);\n+}\n+\n+fn main() {}"}, {"sha": "70412f784040a47f62330da2766420cb8caf9398", "filename": "tests/ui/iter_nth.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -0,0 +1,46 @@\n+error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:33:23\n+   |\n+LL |         let bad_vec = some_vec.iter().nth(3);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::iter-nth` implied by `-D warnings`\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:34:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter().nth(3);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:35:31\n+   |\n+LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:36:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:41:23\n+   |\n+LL |         let bad_vec = some_vec.iter_mut().nth(3);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:44:26\n+   |\n+LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+  --> $DIR/iter_nth.rs:47:29\n+   |\n+LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "673176911a9a87304df382eb9ca19e0ab3bfcb56", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -215,20 +215,6 @@ fn option_methods() {\n                 );\n }\n \n-/// Struct to generate false positives for things with `.iter()`.\n-#[derive(Copy, Clone)]\n-struct HasIter;\n-\n-impl HasIter {\n-    fn iter(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-\n-    fn iter_mut(self) -> IteratorFalsePositives {\n-        IteratorFalsePositives { foo: 0 }\n-    }\n-}\n-\n /// Checks implementation of `FILTER_NEXT` lint.\n #[rustfmt::skip]\n fn filter_next() {\n@@ -287,100 +273,6 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-/// Checks implementation of the `OR_FUN_CALL` lint.\n-fn or_fun_call() {\n-    struct Foo;\n-\n-    impl Foo {\n-        fn new() -> Foo {\n-            Foo\n-        }\n-    }\n-\n-    enum Enum {\n-        A(i32),\n-    }\n-\n-    fn make<T>() -> T {\n-        unimplemented!();\n-    }\n-\n-    let with_enum = Some(Enum::A(1));\n-    with_enum.unwrap_or(Enum::A(5));\n-\n-    let with_const_fn = Some(::std::time::Duration::from_secs(1));\n-    with_const_fn.unwrap_or(::std::time::Duration::from_secs(5));\n-\n-    let with_constructor = Some(vec![1]);\n-    with_constructor.unwrap_or(make());\n-\n-    let with_new = Some(vec![1]);\n-    with_new.unwrap_or(Vec::new());\n-\n-    let with_const_args = Some(vec![1]);\n-    with_const_args.unwrap_or(Vec::with_capacity(12));\n-\n-    let with_err: Result<_, ()> = Ok(vec![1]);\n-    with_err.unwrap_or(make());\n-\n-    let with_err_args: Result<_, ()> = Ok(vec![1]);\n-    with_err_args.unwrap_or(Vec::with_capacity(12));\n-\n-    let with_default_trait = Some(1);\n-    with_default_trait.unwrap_or(Default::default());\n-\n-    let with_default_type = Some(1);\n-    with_default_type.unwrap_or(u64::default());\n-\n-    let with_vec = Some(vec![1]);\n-    with_vec.unwrap_or(vec![]);\n-\n-    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n-\n-    let without_default = Some(Foo);\n-    without_default.unwrap_or(Foo::new());\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-\n-    let stringy = Some(String::from(\"\"));\n-    let _ = stringy.unwrap_or(\"\".to_owned());\n-}\n-\n-/// Checks implementation of `ITER_NTH` lint.\n-fn iter_nth() {\n-    let mut some_vec = vec![0, 1, 2, 3];\n-    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n-    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n-\n-    {\n-        // Make sure we lint `.iter()` for relevant types.\n-        let bad_vec = some_vec.iter().nth(3);\n-        let bad_slice = &some_vec[..].iter().nth(3);\n-        let bad_boxed_slice = boxed_slice.iter().nth(3);\n-        let bad_vec_deque = some_vec_deque.iter().nth(3);\n-    }\n-\n-    {\n-        // Make sure we lint `.iter_mut()` for relevant types.\n-        let bad_vec = some_vec.iter_mut().nth(3);\n-    }\n-    {\n-        let bad_slice = &some_vec[..].iter_mut().nth(3);\n-    }\n-    {\n-        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-    }\n-\n-    // Make sure we don't lint for non-relevant types.\n-    let false_positive = HasIter;\n-    let ok = false_positive.iter().nth(3);\n-    let ok_mut = false_positive.iter_mut().nth(3);\n-}\n-\n #[allow(clippy::similar_names)]\n fn main() {\n     let opt = Some(0);"}, {"sha": "b86220f5dc26ad5ab539fab7fbcdb5ed474888d1", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 10, "deletions": 128, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -154,7 +154,7 @@ LL |                        });\n    |\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:238:13\n+  --> $DIR/methods.rs:224:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:241:13\n+  --> $DIR/methods.rs:227:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -173,7 +173,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:257:13\n+  --> $DIR/methods.rs:243:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -182,7 +182,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:246:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -192,15 +192,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:266:13\n+  --> $DIR/methods.rs:252:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:255:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -210,15 +210,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:275:13\n+  --> $DIR/methods.rs:261:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:278:13\n+  --> $DIR/methods.rs:264:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -227,131 +227,13 @@ LL | |                                }\n LL | |                    ).is_some();\n    | |______________________________^\n \n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:315:22\n-   |\n-LL |     with_constructor.unwrap_or(make());\n-   |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n-   |\n-   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n-\n-error: use of `unwrap_or` followed by a call to `new`\n-  --> $DIR/methods.rs:318:5\n-   |\n-LL |     with_new.unwrap_or(Vec::new());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:321:21\n-   |\n-LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:324:14\n-   |\n-LL |     with_err.unwrap_or(make());\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:327:19\n-   |\n-LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:330:5\n-   |\n-LL |     with_default_trait.unwrap_or(Default::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-  --> $DIR/methods.rs:333:5\n-   |\n-LL |     with_default_type.unwrap_or(u64::default());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:336:14\n-   |\n-LL |     with_vec.unwrap_or(vec![]);\n-   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:341:21\n-   |\n-LL |     without_default.unwrap_or(Foo::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:344:19\n-   |\n-LL |     map.entry(42).or_insert(String::new());\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-  --> $DIR/methods.rs:347:21\n-   |\n-LL |     btree.entry(42).or_insert(String::new());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n-\n-error: use of `unwrap_or` followed by a function call\n-  --> $DIR/methods.rs:350:21\n-   |\n-LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n-\n-error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:361:23\n-   |\n-LL |         let bad_vec = some_vec.iter().nth(3);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::iter-nth` implied by `-D warnings`\n-\n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:362:26\n-   |\n-LL |         let bad_slice = &some_vec[..].iter().nth(3);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:363:31\n-   |\n-LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-  --> $DIR/methods.rs:364:29\n-   |\n-LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:369:23\n-   |\n-LL |         let bad_vec = some_vec.iter_mut().nth(3);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:372:26\n-   |\n-LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-  --> $DIR/methods.rs:375:29\n-   |\n-LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:387:13\n+  --> $DIR/methods.rs:279:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 44 previous errors\n+error: aborting due to 25 previous errors\n "}, {"sha": "562120c3ea0f985cf2ebdf1215d76262130034f4", "filename": "tests/ui/or_fun_call.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -0,0 +1,69 @@\n+#![warn(clippy::or_fun_call)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint.\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo {\n+            Foo\n+        }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    fn make<T>() -> T {\n+        unimplemented!();\n+    }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(::std::time::Duration::from_secs(1));\n+    with_const_fn.unwrap_or(::std::time::Duration::from_secs(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or(make());\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or(Vec::new());\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or(Vec::with_capacity(12));\n+\n+    let with_err: Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or(make());\n+\n+    let with_err_args: Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or(Vec::with_capacity(12));\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or(Default::default());\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or(u64::default());\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or(vec![]);\n+\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or(Foo::new());\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+}\n+\n+fn main() {}"}, {"sha": "40ae09cc20e776f6f7b6c4734bbe9e7cb4b6bbe1", "filename": "tests/ui/or_fun_call.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6104aefef576c04b36602b6426f90c63be406f69/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=6104aefef576c04b36602b6426f90c63be406f69", "patch": "@@ -0,0 +1,76 @@\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:31:22\n+   |\n+LL |     with_constructor.unwrap_or(make());\n+   |                      ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(make)`\n+   |\n+   = note: `-D clippy::or-fun-call` implied by `-D warnings`\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+  --> $DIR/or_fun_call.rs:34:5\n+   |\n+LL |     with_new.unwrap_or(Vec::new());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:37:21\n+   |\n+LL |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:40:14\n+   |\n+LL |     with_err.unwrap_or(make());\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| make())`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:43:19\n+   |\n+LL |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|_| Vec::with_capacity(12))`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:46:5\n+   |\n+LL |     with_default_trait.unwrap_or(Default::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+  --> $DIR/or_fun_call.rs:49:5\n+   |\n+LL |     with_default_type.unwrap_or(u64::default());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:52:14\n+   |\n+LL |     with_vec.unwrap_or(vec![]);\n+   |              ^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| vec![])`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:57:21\n+   |\n+LL |     without_default.unwrap_or(Foo::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:60:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:63:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `unwrap_or` followed by a function call\n+  --> $DIR/or_fun_call.rs:66:21\n+   |\n+LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n+\n+error: aborting due to 12 previous errors\n+"}]}