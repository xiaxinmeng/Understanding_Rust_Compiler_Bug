{"sha": "60f969a4f24c44f4ec763027bfbfe1747ae876b6", "node_id": "C_kwDOAAsO6NoAKDYwZjk2OWE0ZjI0YzQ0ZjRlYzc2MzAyN2JmYmZlMTc0N2FlODc2YjY", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-15T04:58:25Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-16T21:43:39Z"}, "message": "Adopt let_else in even more places", "tree": {"sha": "d9295176131e87a872183451c85170d92c2eac2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9295176131e87a872183451c85170d92c2eac2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60f969a4f24c44f4ec763027bfbfe1747ae876b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60f969a4f24c44f4ec763027bfbfe1747ae876b6", "html_url": "https://github.com/rust-lang/rust/commit/60f969a4f24c44f4ec763027bfbfe1747ae876b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60f969a4f24c44f4ec763027bfbfe1747ae876b6/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cfa4def7c87d571bd46d92fed608edf8fad236e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cfa4def7c87d571bd46d92fed608edf8fad236e", "html_url": "https://github.com/rust-lang/rust/commit/3cfa4def7c87d571bd46d92fed608edf8fad236e"}], "stats": {"total": 154, "additions": 50, "deletions": 104}, "files": [{"sha": "dca787604fc2cb6119b7fe833382f1859554d305", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -142,11 +142,9 @@ trait TypeOpInfo<'tcx> {\n         let tcx = mbcx.infcx.tcx;\n         let base_universe = self.base_universe();\n \n-        let adjusted_universe = if let Some(adjusted) =\n+        let Some(adjusted_universe) =\n             placeholder.universe.as_u32().checked_sub(base_universe.as_u32())\n-        {\n-            adjusted\n-        } else {\n+        else {\n             mbcx.buffer_error(self.fallback_error(tcx, cause.span));\n             return;\n         };"}, {"sha": "b37f56f98e3b83a32c161a17d420399519bf5fcb", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -892,15 +892,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             kind: TerminatorKind::Call { fn_span, from_hir_call, .. }, ..\n         }) = &self.body[location.block].terminator\n         {\n-            let (method_did, method_substs) = if let Some(info) =\n+            let Some((method_did, method_substs)) =\n                 rustc_const_eval::util::find_self_call(\n                     self.infcx.tcx,\n                     &self.body,\n                     target_temp,\n                     location.block,\n-                ) {\n-                info\n-            } else {\n+                )\n+            else {\n                 return normal_ret;\n             };\n "}, {"sha": "7d0dde53c2b6d5481c2ef0f352f88a2938b407c7", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -639,11 +639,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let hir_map = self.infcx.tcx.hir();\n         let my_def = self.body.source.def_id();\n         let my_hir = hir_map.local_def_id_to_hir_id(my_def.as_local().unwrap());\n-        let td = if let Some(a) =\n+        let Some(td) =\n             self.infcx.tcx.impl_of_method(my_def).and_then(|x| self.infcx.tcx.trait_id_of_impl(x))\n-        {\n-            a\n-        } else {\n+        else {\n             return (false, None);\n         };\n         ("}, {"sha": "c06af5206d5b1b04205ab22fdde8ccd290b48f1a", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -6,9 +6,7 @@ use rustc_expand::base::{self, DummyResult};\n \n /// Emits errors for literal expressions that are invalid inside and outside of an array.\n fn invalid_type_err(cx: &mut base::ExtCtxt<'_>, expr: &P<rustc_ast::Expr>, is_nested: bool) {\n-    let lit = if let ast::ExprKind::Lit(lit) = &expr.kind {\n-        lit\n-    } else {\n+    let ast::ExprKind::Lit(lit) = &expr.kind else {\n         unreachable!();\n     };\n     match lit.kind {"}, {"sha": "38877399943ef77574acfd04697ab2e3d7ddc8ec", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -9,6 +9,7 @@\n #![feature(decl_macro)]\n #![feature(is_sorted)]\n #![feature(nll)]\n+#![feature(let_else)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "58e0667d678986abd01f903d46d2242da324f1c4", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -216,17 +216,18 @@ pub fn each_linked_rlib(\n         }\n         let name = &info.crate_name[&cnum];\n         let used_crate_source = &info.used_crate_source[&cnum];\n-        let path = if let Some((path, _)) = &used_crate_source.rlib {\n-            path\n-        } else if used_crate_source.rmeta.is_some() {\n-            return Err(format!(\n-                \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n-                name\n-            ));\n+        if let Some((path, _)) = &used_crate_source.rlib {\n+            f(cnum, &path);\n         } else {\n-            return Err(format!(\"could not find rlib for: `{}`\", name));\n-        };\n-        f(cnum, &path);\n+            if used_crate_source.rmeta.is_some() {\n+                return Err(format!(\n+                    \"could not find rlib for: `{}`, found rmeta (metadata) file\",\n+                    name\n+                ));\n+            } else {\n+                return Err(format!(\"could not find rlib for: `{}`\", name));\n+            }\n+        }\n     }\n     Ok(())\n }"}, {"sha": "9ebbcac76a28a45f0ac3f6d8f12ad02cee25d3dd", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -200,9 +200,7 @@ fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n //   `SHF_EXCLUDE` flag we can set on sections in an object file to get\n //   automatically removed from the final output.\n pub fn create_rmeta_file(sess: &Session, metadata: &[u8]) -> Vec<u8> {\n-    let mut file = if let Some(file) = create_object_file(sess) {\n-        file\n-    } else {\n+    let Some(mut file) = create_object_file(sess) else {\n         // This is used to handle all \"other\" targets. This includes targets\n         // in two categories:\n         //\n@@ -262,9 +260,7 @@ pub fn create_compressed_metadata_file(\n ) -> Vec<u8> {\n     let mut compressed = rustc_metadata::METADATA_HEADER.to_vec();\n     FrameEncoder::new(&mut compressed).write_all(metadata.raw_data()).unwrap();\n-    let mut file = if let Some(file) = create_object_file(sess) {\n-        file\n-    } else {\n+    let Some(mut file) = create_object_file(sess) else {\n         return compressed.to_vec();\n     };\n     let section = file.add_section("}, {"sha": "7f376c5fbe54b71a9937151c12e86b67ad9bddf1", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -852,11 +852,7 @@ impl<T: Idx> HybridBitSet<T> {\n             Bound::Excluded(end) => end.index(),\n             Bound::Unbounded => self.domain_size() - 1,\n         };\n-        let len = if let Some(l) = end.checked_sub(start) {\n-            l\n-        } else {\n-            return;\n-        };\n+        let Some(len) = end.checked_sub(start) else { return };\n         match self {\n             HybridBitSet::Sparse(sparse) if sparse.len() + len < SPARSE_MAX => {\n                 // The set is sparse and has space for `elems`."}, {"sha": "62f94ff17e832c43163d85653e3dc06826b4a36d", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -553,8 +553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let ty_msg = match (local_visitor.found_node_ty, local_visitor.found_exact_method_call) {\n             (_, Some(_)) => String::new(),\n             (Some(ty), _) if ty.is_closure() => {\n-                let substs =\n-                    if let ty::Closure(_, substs) = *ty.kind() { substs } else { unreachable!() };\n+                let ty::Closure(_, substs) = *ty.kind() else { unreachable!() };\n                 let fn_sig = substs.as_closure().sig();\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n@@ -597,8 +596,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let param_type = arg_data.kind.descr();\n         let suffix = match local_visitor.found_node_ty {\n             Some(ty) if ty.is_closure() => {\n-                let substs =\n-                    if let ty::Closure(_, substs) = *ty.kind() { substs } else { unreachable!() };\n+                let ty::Closure(_, substs) = *ty.kind() else { unreachable!() };\n                 let fn_sig = substs.as_closure().sig();\n                 let ret = fn_sig.output().skip_binder().to_string();\n "}, {"sha": "3b0a13f7f00507333cac7df70c3ccdc861fe6e10", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -982,7 +982,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         for local_id in hir.iter_local_def_id() {\n             let def_id = local_id.to_def_id();\n             let def_kind = tcx.opt_def_kind(local_id);\n-            let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };\n+            let Some(def_kind) = def_kind else { continue };\n             record!(self.tables.def_kind[def_id] <- match def_kind {\n                 // Replace Ctor by the enclosing object to avoid leaking details in children crates.\n                 DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,"}, {"sha": "6bfd1b7ffab2443a024db15cfe6b46a4832e9be3", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -61,7 +61,7 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         OP: for<'a> FnOnce(TaskDepsRef<'a>),\n     {\n         ty::tls::with_context_opt(|icx| {\n-            let icx = if let Some(icx) = icx { icx } else { return };\n+            let Some(icx) = icx else { return };\n             op(icx.task_deps)\n         })\n     }"}, {"sha": "05de52458add2e74dfefcdfaba0ffd03850f2beb", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -1241,9 +1241,7 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let yield_ty = if let Some(yield_ty) = body.yield_ty() {\n-            yield_ty\n-        } else {\n+        let Some(yield_ty) = body.yield_ty() else {\n             // This only applies to generators\n             return;\n         };"}, {"sha": "17689d9e5fac96807439e1167206b20d50b04034", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -211,12 +211,7 @@ fn normalize_array_len_call<'tcx>(\n                         let Some(local) = place.as_local() else { return };\n                         match operand {\n                             Operand::Copy(place) | Operand::Move(place) => {\n-                                let operand_local =\n-                                    if let Some(local) = place.local_or_deref_local() {\n-                                        local\n-                                    } else {\n-                                        return;\n-                                    };\n+                                let Some(operand_local) = place.local_or_deref_local() else { return; };\n                                 if !interesting_locals.contains(operand_local) {\n                                     return;\n                                 }"}, {"sha": "810cf171b13ff37a2b238371e13a0ef8359285d5", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -947,9 +947,7 @@ fn visit_instance_use<'tcx>(\n /// Returns `true` if we should codegen an instance in the local crate, or returns `false` if we\n /// can just link to the upstream crate and therefore don't need a mono item.\n fn should_codegen_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n-    let def_id = if let Some(def_id) = instance.def.def_id_if_not_guaranteed_local_codegen() {\n-        def_id\n-    } else {\n+    let Some(def_id) = instance.def.def_id_if_not_guaranteed_local_codegen() else {\n         return true;\n     };\n "}, {"sha": "04baa01832be64e171a8178d9442bda61e978039", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -8,13 +8,11 @@ use std::io::prelude::*;\n /// During the same compile all closures dump the information in the same file\n /// \"closure_profile_XXXXX.csv\", which is created in the directory where the compiler is invoked.\n crate fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: Instance<'tcx>) {\n-    let mut file = if let Ok(file) = OpenOptions::new()\n+    let Ok(mut file) = OpenOptions::new()\n         .create(true)\n         .append(true)\n         .open(&format!(\"closure_profile_{}.csv\", std::process::id()))\n-    {\n-        file\n-    } else {\n+    else {\n         eprintln!(\"Cound't open file for writing closure profile\");\n         return;\n     };"}, {"sha": "4cdd83c0acd3c5a4af56fdce6b4418970228ecef", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -158,9 +158,7 @@ impl<'a> StringReader<'a> {\n         Some(match token {\n             rustc_lexer::TokenKind::LineComment { doc_style } => {\n                 // Skip non-doc comments\n-                let doc_style = if let Some(doc_style) = doc_style {\n-                    doc_style\n-                } else {\n+                let Some(doc_style) = doc_style else {\n                     self.lint_unicode_text_flow(start);\n                     return None;\n                 };\n@@ -185,9 +183,7 @@ impl<'a> StringReader<'a> {\n                 }\n \n                 // Skip non-doc comments\n-                let doc_style = if let Some(doc_style) = doc_style {\n-                    doc_style\n-                } else {\n+                let Some(doc_style) = doc_style else {\n                     self.lint_unicode_text_flow(start);\n                     return None;\n                 };"}, {"sha": "eb0d1a12c778f471333f10ac21babd5b9a2253dc", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -4,6 +4,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n #![feature(box_patterns)]\n+#![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "ddec4c3dda7bbd946abf5d471137a0f642d769ce", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -704,17 +704,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ) = &bounded_ty.kind\n         {\n             // use this to verify that ident is a type param.\n-            let partial_res = if let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n+            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n                 bounded_ty.id,\n                 None,\n                 &Segment::from_path(path),\n                 Namespace::TypeNS,\n                 span,\n                 true,\n                 CrateLint::No,\n-            ) {\n-                partial_res\n-            } else {\n+            ) else {\n                 return false;\n             };\n             if !(matches!(\n@@ -731,17 +729,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         if let ast::TyKind::Path(None, type_param_path) = &ty.peel_refs().kind {\n             // Confirm that the `SelfTy` is a type parameter.\n-            let partial_res = if let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n+            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n                 bounded_ty.id,\n                 None,\n                 &Segment::from_path(type_param_path),\n                 Namespace::TypeNS,\n                 span,\n                 true,\n                 CrateLint::No,\n-            ) {\n-                partial_res\n-            } else {\n+            ) else {\n                 return false;\n             };\n             if !(matches!("}, {"sha": "559075a2a3ac390aeac52fc9466123e3112a4829", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -1099,9 +1099,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             _ => return false,\n         };\n \n-        let ret_ty = if let hir::FnRetTy::Return(ret_ty) = sig.decl.output {\n-            ret_ty\n-        } else {\n+        let hir::FnRetTy::Return(ret_ty) = sig.decl.output else {\n             return false;\n         };\n \n@@ -1168,17 +1166,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             };\n \n         let sm = self.tcx.sess.source_map();\n-        let snippet = if let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n+        let (true, hir::TyKind::TraitObject(..), Ok(snippet), true) = (\n             // Verify that we're dealing with a return `dyn Trait`\n             ret_ty.span.overlaps(span),\n             &ret_ty.kind,\n             sm.span_to_snippet(ret_ty.span),\n             // If any of the return types does not conform to the trait, then we can't\n             // suggest `impl Trait` nor trait objects: it is a type mismatch error.\n             all_returns_conform_to_trait,\n-        ) {\n-            snippet\n-        } else {\n+        ) else {\n             return false;\n         };\n         err.code(error_code!(E0746));"}, {"sha": "4b280e7afd5d0166e090ffe896a784d9c97676a8", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -1318,10 +1318,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         base_expr: &'tcx Option<&'tcx hir::Expr<'tcx>>,\n     ) -> Ty<'tcx> {\n         // Find the relevant variant\n-        let (variant, adt_ty) = if let Some(variant_ty) = self.check_struct_path(qpath, expr.hir_id)\n-        {\n-            variant_ty\n-        } else {\n+        let Some((variant, adt_ty)) = self.check_struct_path(qpath, expr.hir_id) else {\n             self.check_struct_fields_on_error(fields, base_expr);\n             return self.tcx.ty_error();\n         };"}, {"sha": "ea18d915deb7a96e5fb97c4c0cf6067e9203f271", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -51,9 +51,7 @@ crate fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates\n     equalities.retain(|&(ref lhs, ref rhs)| {\n-        let (self_, trait_did, name) = if let Some(p) = lhs.projection() {\n-            p\n-        } else {\n+        let Some((self_, trait_did, name)) = lhs.projection() else {\n             return true;\n         };\n         let generic = match self_ {"}, {"sha": "7061a9674e4fb63be45ec59f5704763dcf47cd36", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -236,9 +236,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n         let should_panic;\n         let ignore;\n         let edition;\n-        let kind = if let Some(Event::Start(Tag::CodeBlock(kind))) = event {\n-            kind\n-        } else {\n+        let Some(Event::Start(Tag::CodeBlock(kind))) = event else {\n             return event;\n         };\n "}, {"sha": "e84dc6c72409f6ee2bc98089a3ad6144a8e77503", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -1752,9 +1752,7 @@ fn document_type_layout(w: &mut Buffer, cx: &Context<'_>, ty_def_id: DefId) {\n                             <ul>\",\n                     );\n \n-                    let adt = if let Adt(adt, _) = ty_layout.ty.kind() {\n-                        adt\n-                    } else {\n+                    let Adt(adt, _) = ty_layout.ty.kind() else {\n                         span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n                     };\n "}, {"sha": "33a1530d588efc031e8af5254abdaffe75d0f7ba", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -1226,9 +1226,7 @@ impl LinkCollector<'_, '_> {\n         let base_node =\n             if item.is_mod() && inner_docs { self.mod_ids.last().copied() } else { parent_node };\n \n-        let mut module_id = if let Some(id) = base_node {\n-            id\n-        } else {\n+        let Some(mut module_id) = base_node else {\n             // This is a bug.\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n             resolution_failure(\n@@ -1977,9 +1975,7 @@ fn resolution_failure(\n                     // If so, report it and say the first which failed; if not, say the first path segment didn't resolve.\n                     let mut name = path_str;\n                     'outer: loop {\n-                        let (start, end) = if let Some(x) = split(name) {\n-                            x\n-                        } else {\n+                        let Some((start, end)) = split(name) else {\n                             // avoid bug that marked [Quux::Z] as missing Z, not Quux\n                             if partial_res.is_none() {\n                                 *unresolved = name.into();"}, {"sha": "f9e91c299eabb32bb398519ad3bdf385f11dd0cb", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -152,9 +152,7 @@ where\n             }\n             hir::ExprKind::MethodCall(_, _, span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n-                let def_id = if let Some(def_id) = types.type_dependent_def_id(ex.hir_id) {\n-                    def_id\n-                } else {\n+                let Some(def_id) = types.type_dependent_def_id(ex.hir_id) else {\n                     trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);\n                     return;\n                 };"}, {"sha": "e8b3a0929db61c3022a9c6e5160f07d006b9256c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60f969a4f24c44f4ec763027bfbfe1747ae876b6/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=60f969a4f24c44f4ec763027bfbfe1747ae876b6", "patch": "@@ -188,9 +188,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         debug!(\"maybe_inline_local res: {:?}\", res);\n \n         let tcx = self.cx.tcx;\n-        let res_did = if let Some(did) = res.opt_def_id() {\n-            did\n-        } else {\n+        let Some(res_did) = res.opt_def_id() else {\n             return false;\n         };\n "}]}