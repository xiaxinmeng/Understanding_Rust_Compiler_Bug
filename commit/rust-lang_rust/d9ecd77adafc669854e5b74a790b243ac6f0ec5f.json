{"sha": "d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZWNkNzdhZGFmYzY2OTg1NGU1Yjc0YTc5MGIyNDNhYzZmMGVjNWY=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-24T16:01:01Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-25T13:27:49Z"}, "message": "add dummy stat shim", "tree": {"sha": "460199b3eedd8c2514bf44690373e26b03020cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460199b3eedd8c2514bf44690373e26b03020cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgNj1RgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClBbswEAlHbOh96jg6TJCtd3VfH60cwJ\nsMub95sVdYeSKcXhPR4BAJaKmd6J1F3mD9+gJTSJqHWuTa6+VYjyhqLPxu9yNVoC\n=Ej9k\n-----END PGP SIGNATURE-----", "payload": "tree 460199b3eedd8c2514bf44690373e26b03020cfd\nparent aafb7c931d54358b5cdc8175a42b2f760b3a0f4d\nauthor Christian Poveda <git@christianpoveda.xyz> 1577203261 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577280469 -0500\n\nadd dummy stat shim\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "html_url": "https://github.com/rust-lang/rust/commit/d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d", "html_url": "https://github.com/rust-lang/rust/commit/aafb7c931d54358b5cdc8175a42b2f760b3a0f4d"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "9092828a1556b0b178eeebc8e85dca0f0c4d9288", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "patch": "@@ -494,6 +494,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"stat64\" => {\n+                let result = this.stat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "d891d132f24f638531e5cb618de0815a03f28989", "filename": "src/shims/fs.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "patch": "@@ -261,6 +261,55 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.try_unwrap_io_result(result)\n     }\n \n+    fn stat(&mut self,\n+        _path_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        let buf = this.deref_operand(buf_op)?;\n+\n+        let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n+        let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n+        let nlink_t_layout = this.libc_ty_layout(\"nlink_t\")?;\n+        let ino_t_layout = this.libc_ty_layout(\"ino_t\")?;\n+        let uid_t_layout = this.libc_ty_layout(\"uid_t\")?;\n+        let gid_t_layout = this.libc_ty_layout(\"gid_t\")?;\n+        let time_t_layout = this.libc_ty_layout(\"time_t\")?;\n+        let long_layout = this.libc_ty_layout(\"c_long\")?;\n+        let off_t_layout = this.libc_ty_layout(\"off_t\")?;\n+        let blkcnt_t_layout = this.libc_ty_layout(\"blkcnt_t\")?;\n+        let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n+        let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n+\n+        let imms = [\n+            immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n+            immty_from_uint_checked(0u128, mode_t_layout)?, // st_mode\n+            immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n+            immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n+            immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n+            immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n+            immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n+            immty_from_uint_checked(0u128, time_t_layout)?, // st_atime\n+            immty_from_uint_checked(0u128, long_layout)?, // st_atime_nsec\n+            immty_from_uint_checked(0u128, time_t_layout)?, // st_mtime\n+            immty_from_uint_checked(0u128, long_layout)?, // st_mtime_nsec\n+            immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n+            immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n+            immty_from_uint_checked(0u128, time_t_layout)?, // st_birthtime\n+            immty_from_uint_checked(0u128, long_layout)?, // st_birthtime_nsec\n+            immty_from_uint_checked(0u128, off_t_layout)?, // st_size\n+            immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n+            immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n+            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n+            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n+        ];\n+\n+        this.write_packed_immediates(&buf, &imms)?;\n+\n+        Ok(0)\n+    }\n+\n     fn statx(\n         &mut self,\n         dirfd_op: OpTy<'tcx, Tag>,    // Should be an `int`"}, {"sha": "9f000961d5a054e27d989bb79ecc08ca0c7e62e5", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9ecd77adafc669854e5b74a790b243ac6f0ec5f/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=d9ecd77adafc669854e5b74a790b243ac6f0ec5f", "patch": "@@ -5,7 +5,6 @@ use std::fs::{File, remove_file};\n use std::io::{Read, Write, ErrorKind, Result};\n use std::path::{PathBuf, Path};\n \n-#[cfg(target_os = \"linux\")]\n fn test_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n     // Test that the file metadata is correct.\n     let metadata = path.metadata()?;\n@@ -16,12 +15,6 @@ fn test_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n     Ok(())\n }\n \n-// FIXME: Implement stat64 for macos.\n-#[cfg(not(target_os = \"linux\"))]\n-fn test_metadata(_bytes: &[u8], _path: &Path) -> Result<()> {\n-    Ok(())\n-}\n-\n fn main() {\n     let tmp = std::env::temp_dir();\n     let filename = PathBuf::from(\"miri_test_fs.txt\");"}]}