{"sha": "2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODViNmZhZTBiMmRiYjFhZjkxZmQ4YzVmZGQyYzAxNDBhNDM5MTU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-21T12:22:44Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-10-30T11:25:24Z"}, "message": "TypeVisitor: use `std::ops::ControlFlow` instead of `bool`", "tree": {"sha": "b6eb98cc1cdcfabc2ae2cd563bdfee3db8ccdccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6eb98cc1cdcfabc2ae2cd563bdfee3db8ccdccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "html_url": "https://github.com/rust-lang/rust/commit/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8df58ae03a8fda8ed126c02fbc16b530d18344df", "url": "https://api.github.com/repos/rust-lang/rust/commits/8df58ae03a8fda8ed126c02fbc16b530d18344df", "html_url": "https://github.com/rust-lang/rust/commit/8df58ae03a8fda8ed126c02fbc16b530d18344df"}], "stats": {"total": 406, "additions": 242, "deletions": 164}, "files": [{"sha": "7aab3fe4c3a6d7913fa49148c573b950b9f2eaa7", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -15,8 +15,12 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             }\n         })\n     });\n-    let body_visit = s.fold(false, |acc, bind| {\n-        quote! { #acc || ::rustc_middle::ty::fold::TypeFoldable::visit_with(#bind, __folder) }\n+\n+    let body_visit = s.fold(quote!(), |acc, bind| {\n+        quote! {\n+            #acc\n+            ::rustc_middle::ty::fold::TypeFoldable::visit_with(#bind, __folder)?;\n+        }\n     });\n \n     s.bound_impl(\n@@ -32,8 +36,9 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             fn super_visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n                 &self,\n                 __folder: &mut __F\n-            ) -> bool {\n+            ) -> ::std::ops::ControlFlow<(), ()> {\n                 match *self { #body_visit }\n+                ::std::ops::ControlFlow::CONTINUE\n             }\n         },\n     )"}, {"sha": "4b915fe020fc396b9ff3f97547e380e06c2ac8c4", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -49,6 +49,7 @@\n #![feature(int_error_matching)]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n+#![feature(control_flow_enum)]\n #![recursion_limit = \"512\"]\n \n #[macro_use]"}, {"sha": "7437443bed9b5054d98218f2b628fece697d422a", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -62,9 +62,9 @@ macro_rules! CloneTypeFoldableImpls {\n                 fn super_visit_with<F: $crate::ty::fold::TypeVisitor<$tcx>>(\n                     &self,\n                     _: &mut F)\n-                    -> bool\n+                    -> ::std::ops::ControlFlow<(), ()>\n                 {\n-                    false\n+                    ::std::ops::ControlFlow::CONTINUE\n                 }\n             }\n         )+\n@@ -105,7 +105,7 @@ macro_rules! EnumTypeFoldableImpl {\n             fn super_visit_with<V: $crate::ty::fold::TypeVisitor<$tcx>>(\n                 &self,\n                 visitor: &mut V,\n-            ) -> bool {\n+            ) -> ::std::ops::ControlFlow<(), ()> {\n                 EnumTypeFoldableImpl!(@VisitVariants(self, visitor) input($($variants)*) output())\n             }\n         }\n@@ -179,9 +179,10 @@ macro_rules! EnumTypeFoldableImpl {\n                 input($($input)*)\n                 output(\n                     $variant ( $($variant_arg),* ) => {\n-                        false $(|| $crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::fold::TypeFoldable::visit_with(\n                             $variant_arg, $visitor\n-                        ))*\n+                        )?;)*\n+                        ::std::ops::ControlFlow::CONTINUE\n                     }\n                     $($output)*\n                 )\n@@ -196,9 +197,10 @@ macro_rules! EnumTypeFoldableImpl {\n                 input($($input)*)\n                 output(\n                     $variant { $($variant_arg),* } => {\n-                        false $(|| $crate::ty::fold::TypeFoldable::visit_with(\n+                        $($crate::ty::fold::TypeFoldable::visit_with(\n                             $variant_arg, $visitor\n-                        ))*\n+                        )?;)*\n+                        ::std::ops::ControlFlow::CONTINUE\n                     }\n                     $($output)*\n                 )\n@@ -212,7 +214,7 @@ macro_rules! EnumTypeFoldableImpl {\n             @VisitVariants($this, $visitor)\n                 input($($input)*)\n                 output(\n-                    $variant => { false }\n+                    $variant => { ::std::ops::ControlFlow::CONTINUE }\n                     $($output)*\n                 )\n         )"}, {"sha": "9e1a53d9ed43cae3be8c71b5b8826982e8512276", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -32,7 +32,7 @@ use rustc_target::abi;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n-use std::ops::{Index, IndexMut};\n+use std::ops::{ControlFlow, Index, IndexMut};\n use std::slice;\n use std::{iter, mem, option};\n \n@@ -2489,7 +2489,7 @@ impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n         UserTypeProjection { base, projs }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> bool {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<(), ()> {\n         self.base.visit_with(visitor)\n         // Note: there's nothing in `self.proj` to visit.\n     }"}, {"sha": "8eb7dc7559d80b2b5e3c78f452c08c662539e750", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -87,41 +87,46 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n         Terminator { source_info: self.source_info, kind }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         use crate::mir::TerminatorKind::*;\n \n         match self.kind {\n             SwitchInt { ref discr, switch_ty, .. } => {\n-                discr.visit_with(visitor) || switch_ty.visit_with(visitor)\n+                discr.visit_with(visitor)?;\n+                switch_ty.visit_with(visitor)\n             }\n             Drop { ref place, .. } => place.visit_with(visitor),\n             DropAndReplace { ref place, ref value, .. } => {\n-                place.visit_with(visitor) || value.visit_with(visitor)\n+                place.visit_with(visitor)?;\n+                value.visit_with(visitor)\n             }\n             Yield { ref value, .. } => value.visit_with(visitor),\n             Call { ref func, ref args, ref destination, .. } => {\n-                let dest = if let Some((ref loc, _)) = *destination {\n-                    loc.visit_with(visitor)\n-                } else {\n-                    false\n+                if let Some((ref loc, _)) = *destination {\n+                    loc.visit_with(visitor)?;\n                 };\n-                dest || func.visit_with(visitor) || args.visit_with(visitor)\n+                func.visit_with(visitor)?;\n+                args.visit_with(visitor)\n             }\n             Assert { ref cond, ref msg, .. } => {\n-                if cond.visit_with(visitor) {\n+                if cond.visit_with(visitor) == ControlFlow::BREAK {\n                     use AssertKind::*;\n                     match msg {\n                         BoundsCheck { ref len, ref index } => {\n-                            len.visit_with(visitor) || index.visit_with(visitor)\n+                            len.visit_with(visitor)?;\n+                            index.visit_with(visitor)\n+                        }\n+                        Overflow(_, l, r) => {\n+                            l.visit_with(visitor)?;\n+                            r.visit_with(visitor)\n                         }\n-                        Overflow(_, l, r) => l.visit_with(visitor) || r.visit_with(visitor),\n                         OverflowNeg(op) | DivisionByZero(op) | RemainderByZero(op) => {\n                             op.visit_with(visitor)\n                         }\n-                        ResumedAfterReturn(_) | ResumedAfterPanic(_) => false,\n+                        ResumedAfterReturn(_) | ResumedAfterPanic(_) => ControlFlow::CONTINUE,\n                     }\n                 } else {\n-                    false\n+                    ControlFlow::CONTINUE\n                 }\n             }\n             InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n@@ -132,7 +137,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             | GeneratorDrop\n             | Unreachable\n             | FalseEdge { .. }\n-            | FalseUnwind { .. } => false,\n+            | FalseUnwind { .. } => ControlFlow::CONTINUE,\n         }\n     }\n }\n@@ -142,8 +147,8 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorKind {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n@@ -152,8 +157,9 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n         Place { local: self.local.fold_with(folder), projection: self.projection.fold_with(folder) }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.local.visit_with(visitor) || self.projection.visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.local.visit_with(visitor)?;\n+        self.projection.visit_with(visitor)\n     }\n }\n \n@@ -163,8 +169,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n         folder.tcx().intern_place_elems(&v)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -213,32 +219,47 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         use crate::mir::Rvalue::*;\n         match *self {\n             Use(ref op) => op.visit_with(visitor),\n             Repeat(ref op, _) => op.visit_with(visitor),\n             ThreadLocalRef(did) => did.visit_with(visitor),\n-            Ref(region, _, ref place) => region.visit_with(visitor) || place.visit_with(visitor),\n+            Ref(region, _, ref place) => {\n+                region.visit_with(visitor)?;\n+                place.visit_with(visitor)\n+            }\n             AddressOf(_, ref place) => place.visit_with(visitor),\n             Len(ref place) => place.visit_with(visitor),\n-            Cast(_, ref op, ty) => op.visit_with(visitor) || ty.visit_with(visitor),\n+            Cast(_, ref op, ty) => {\n+                op.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n             BinaryOp(_, ref rhs, ref lhs) | CheckedBinaryOp(_, ref rhs, ref lhs) => {\n-                rhs.visit_with(visitor) || lhs.visit_with(visitor)\n+                rhs.visit_with(visitor)?;\n+                lhs.visit_with(visitor)\n             }\n             UnaryOp(_, ref val) => val.visit_with(visitor),\n             Discriminant(ref place) => place.visit_with(visitor),\n             NullaryOp(_, ty) => ty.visit_with(visitor),\n             Aggregate(ref kind, ref fields) => {\n-                (match **kind {\n-                    AggregateKind::Array(ty) => ty.visit_with(visitor),\n-                    AggregateKind::Tuple => false,\n+                match **kind {\n+                    AggregateKind::Array(ty) => {\n+                        ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Tuple => {}\n                     AggregateKind::Adt(_, _, substs, user_ty, _) => {\n-                        substs.visit_with(visitor) || user_ty.visit_with(visitor)\n+                        substs.visit_with(visitor)?;\n+                        user_ty.visit_with(visitor)?;\n+                    }\n+                    AggregateKind::Closure(_, substs) => {\n+                        substs.visit_with(visitor)?;\n                     }\n-                    AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n-                    AggregateKind::Generator(_, substs, _) => substs.visit_with(visitor),\n-                }) || fields.visit_with(visitor)\n+                    AggregateKind::Generator(_, substs, _) => {\n+                        substs.visit_with(visitor)?;\n+                    }\n+                }\n+                fields.visit_with(visitor)\n             }\n         }\n     }\n@@ -253,7 +274,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         match *self {\n             Operand::Copy(ref place) | Operand::Move(ref place) => place.visit_with(visitor),\n             Operand::Constant(ref c) => c.visit_with(visitor),\n@@ -277,13 +298,13 @@ impl<'tcx> TypeFoldable<'tcx> for PlaceElem<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> bool {\n+    fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<(), ()> {\n         use crate::mir::ProjectionElem::*;\n \n         match self {\n             Field(_, ty) => ty.visit_with(visitor),\n             Index(v) => v.visit_with(visitor),\n-            _ => false,\n+            _ => ControlFlow::CONTINUE,\n         }\n     }\n }\n@@ -292,26 +313,26 @@ impl<'tcx> TypeFoldable<'tcx> for Field {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         self.clone()\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n@@ -323,7 +344,7 @@ impl<'tcx> TypeFoldable<'tcx> for Constant<'tcx> {\n             literal: self.literal.fold_with(folder),\n         }\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         self.literal.visit_with(visitor)\n     }\n }"}, {"sha": "4e42ee5aa1f198c3381651d4c5421ba5a27470fe", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 77, "deletions": 46, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -37,6 +37,7 @@ use rustc_hir::def_id::DefId;\n use rustc_data_structures::fx::FxHashSet;\n use std::collections::BTreeMap;\n use std::fmt;\n+use std::ops::ControlFlow;\n \n /// This trait is implemented for every type that can be folded.\n /// Basically, every type that has a corresponding method in `TypeFolder`.\n@@ -48,8 +49,8 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n         self.super_fold_with(folder)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool;\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()>;\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         self.super_visit_with(visitor)\n     }\n \n@@ -59,6 +60,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     /// there are any late-bound regions that appear free.\n     fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n         self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder })\n+            == ControlFlow::Break(())\n     }\n \n     /// Returns `true` if this `self` has any regions that escape `binder` (and\n@@ -72,7 +74,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n-        self.visit_with(&mut HasTypeFlagsVisitor { flags })\n+        self.visit_with(&mut HasTypeFlagsVisitor { flags }) == ControlFlow::Break(())\n     }\n     fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n@@ -143,11 +145,14 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     /// A visitor that does not recurse into types, works like `fn walk_shallow` in `Ty`.\n-    fn visit_tys_shallow(&self, visit: impl FnMut(Ty<'tcx>) -> bool) -> bool {\n+    fn visit_tys_shallow(\n+        &self,\n+        visit: impl FnMut(Ty<'tcx>) -> ControlFlow<(), ()>,\n+    ) -> ControlFlow<(), ()> {\n         pub struct Visitor<F>(F);\n \n-        impl<'tcx, F: FnMut(Ty<'tcx>) -> bool> TypeVisitor<'tcx> for Visitor<F> {\n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+        impl<'tcx, F: FnMut(Ty<'tcx>) -> ControlFlow<(), ()>> TypeVisitor<'tcx> for Visitor<F> {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n                 self.0(ty)\n             }\n         }\n@@ -160,8 +165,8 @@ impl TypeFoldable<'tcx> for hir::Constness {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, _: &mut F) -> Self {\n         *self\n     }\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n@@ -194,23 +199,23 @@ pub trait TypeFolder<'tcx>: Sized {\n }\n \n pub trait TypeVisitor<'tcx>: Sized {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n         c.super_visit_with(self)\n     }\n \n-    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> bool {\n+    fn visit_predicate(&mut self, p: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n         p.super_visit_with(self)\n     }\n }\n@@ -302,8 +307,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         value: &impl TypeFoldable<'tcx>,\n         callback: impl FnMut(ty::Region<'tcx>) -> bool,\n     ) -> bool {\n-        return value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback });\n-\n         struct RegionVisitor<F> {\n             /// The index of a binder *just outside* the things we have\n             /// traversed. If we encounter a bound region bound by this\n@@ -330,31 +333,43 @@ impl<'tcx> TyCtxt<'tcx> {\n         where\n             F: FnMut(ty::Region<'tcx>) -> bool,\n         {\n-            fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+            fn visit_binder<T: TypeFoldable<'tcx>>(\n+                &mut self,\n+                t: &Binder<T>,\n+            ) -> ControlFlow<(), ()> {\n                 self.outer_index.shift_in(1);\n                 let result = t.as_ref().skip_binder().visit_with(self);\n                 self.outer_index.shift_out(1);\n                 result\n             }\n \n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n                 match *r {\n                     ty::ReLateBound(debruijn, _) if debruijn < self.outer_index => {\n-                        false // ignore bound regions, keep visiting\n+                        ControlFlow::CONTINUE\n+                    }\n+                    _ => {\n+                        if (self.callback)(r) {\n+                            ControlFlow::BREAK\n+                        } else {\n+                            ControlFlow::CONTINUE\n+                        }\n                     }\n-                    _ => (self.callback)(r),\n                 }\n             }\n \n-            fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+            fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<(), ()> {\n                 // We're only interested in types involving regions\n                 if ty.flags().intersects(TypeFlags::HAS_FREE_REGIONS) {\n                     ty.super_visit_with(self)\n                 } else {\n-                    false // keep visiting\n+                    ControlFlow::CONTINUE\n                 }\n             }\n         }\n+\n+        value.visit_with(&mut RegionVisitor { outer_index: ty::INNERMOST, callback })\n+            == ControlFlow::BREAK\n     }\n }\n \n@@ -670,7 +685,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     {\n         let mut collector = LateBoundRegionsCollector::new(just_constraint);\n         let result = value.as_ref().skip_binder().visit_with(&mut collector);\n-        assert!(!result); // should never have stopped early\n+        assert!(result == ControlFlow::Continue(())); // should never have stopped early\n         collector.regions\n     }\n \n@@ -836,43 +851,55 @@ struct HasEscapingVarsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n         self.outer_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.outer_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n         // If the outer-exclusive-binder is *strictly greater* than\n         // `outer_index`, that means that `t` contains some content\n         // bound at `outer_index` or above (because\n         // `outer_exclusive_binder` is always 1 higher than the\n         // content in `t`). Therefore, `t` has some escaping vars.\n-        t.outer_exclusive_binder > self.outer_index\n+        if t.outer_exclusive_binder > self.outer_index {\n+            ControlFlow::BREAK\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n         // If the region is bound by `outer_index` or anything outside\n         // of outer index, then it escapes the binders we have\n         // visited.\n-        r.bound_at_or_above_binder(self.outer_index)\n+        if r.bound_at_or_above_binder(self.outer_index) {\n+            ControlFlow::BREAK\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n \n-    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> bool {\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n         // we don't have a `visit_infer_const` callback, so we have to\n         // hook in here to catch this case (annoying...), but\n         // otherwise we do want to remember to visit the rest of the\n         // const, as it has types/regions embedded in a lot of other\n         // places.\n         match ct.val {\n-            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => true,\n+            ty::ConstKind::Bound(debruijn, _) if debruijn >= self.outer_index => ControlFlow::BREAK,\n             _ => ct.super_visit_with(self),\n         }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n-        predicate.inner.outer_exclusive_binder > self.outer_index\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n+        if predicate.inner.outer_exclusive_binder > self.outer_index {\n+            ControlFlow::BREAK\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n }\n \n@@ -882,34 +909,38 @@ struct HasTypeFlagsVisitor {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n-    fn visit_ty(&mut self, t: Ty<'_>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<(), ()> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n             t,\n             t.flags(),\n             self.flags\n         );\n-        t.flags().intersects(self.flags)\n+        if t.flags().intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n-        flags.intersects(self.flags)\n+        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n-        flags.intersects(self.flags)\n+        if flags.intersects(self.flags) { ControlFlow::BREAK } else { ControlFlow::CONTINUE }\n     }\n \n-    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> bool {\n+    fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<(), ()> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\",\n             predicate, predicate.inner.flags, self.flags\n         );\n-        predicate.inner.flags.intersects(self.flags)\n+        if predicate.inner.flags.intersects(self.flags) {\n+            ControlFlow::BREAK\n+        } else {\n+            ControlFlow::CONTINUE\n+        }\n     }\n }\n \n@@ -940,45 +971,45 @@ impl LateBoundRegionsCollector {\n }\n \n impl<'tcx> TypeVisitor<'tcx> for LateBoundRegionsCollector {\n-    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> bool {\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<(), ()> {\n         self.current_index.shift_in(1);\n         let result = t.super_visit_with(self);\n         self.current_index.shift_out(1);\n         result\n     }\n \n-    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<(), ()> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs to a projection, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::Projection(..) | ty::Opaque(..) = t.kind() {\n-                return false;\n+                return ControlFlow::CONTINUE;\n             }\n         }\n \n         t.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<(), ()> {\n         // if we are only looking for \"constrained\" region, we have to\n         // ignore the inputs of an unevaluated const, as they may not appear\n         // in the normalized form\n         if self.just_constrained {\n             if let ty::ConstKind::Unevaluated(..) = c.val {\n-                return false;\n+                return ControlFlow::CONTINUE;\n             }\n         }\n \n         c.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n         if let ty::ReLateBound(debruijn, br) = *r {\n             if debruijn == self.current_index {\n                 self.regions.insert(br);\n             }\n         }\n-        false\n+        ControlFlow::CONTINUE\n     }\n }"}, {"sha": "871a2c2e710135067bec43cfa7ae38536211e1df", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -46,7 +46,7 @@ use std::cell::RefCell;\n use std::cmp::Ordering;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n-use std::ops::Range;\n+use std::ops::{ControlFlow, Range};\n use std::ptr;\n use std::str;\n \n@@ -1776,8 +1776,9 @@ impl<'tcx> TypeFoldable<'tcx> for ParamEnv<'tcx> {\n         ParamEnv::new(self.caller_bounds().fold_with(folder), self.reveal().fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.caller_bounds().visit_with(visitor) || self.reveal().visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.caller_bounds().visit_with(visitor)?;\n+        self.reveal().visit_with(visitor)\n     }\n }\n "}, {"sha": "43305b8b5721189ff4a93690007eed724f2d458c", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -22,7 +22,7 @@ use std::cell::Cell;\n use std::char;\n use std::collections::BTreeMap;\n use std::fmt::{self, Write as _};\n-use std::ops::{Deref, DerefMut};\n+use std::ops::{ControlFlow, Deref, DerefMut};\n \n // `pretty` is a separate module only for organization.\n use super::*;\n@@ -1803,7 +1803,7 @@ impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     {\n         struct LateBoundRegionNameCollector<'a>(&'a mut FxHashSet<Symbol>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for LateBoundRegionNameCollector<'_> {\n-            fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+            fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<(), ()> {\n                 if let ty::ReLateBound(_, ty::BrNamed(_, name)) = *r {\n                     self.0.insert(name);\n                 }"}, {"sha": "0d14c37b25416869a537fec84d043ab939d49ae0", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 72, "deletions": 56, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -14,6 +14,7 @@ use rustc_index::vec::{Idx, IndexVec};\n \n use smallvec::SmallVec;\n use std::fmt;\n+use std::ops::ControlFlow;\n use std::rc::Rc;\n use std::sync::Arc;\n \n@@ -727,8 +728,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::AdtDef {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n \n@@ -737,8 +738,9 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n         (self.0.fold_with(folder), self.1.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.0.visit_with(visitor) || self.1.visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.0.visit_with(visitor)?;\n+        self.1.visit_with(visitor)\n     }\n }\n \n@@ -749,8 +751,10 @@ impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n         (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.0.visit_with(visitor) || self.1.visit_with(visitor) || self.2.visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.0.visit_with(visitor)?;\n+        self.1.visit_with(visitor)?;\n+        self.2.visit_with(visitor)\n     }\n }\n \n@@ -773,7 +777,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Rc<T> {\n         Rc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -783,7 +787,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Arc<T> {\n         Arc::new((**self).fold_with(folder))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -794,7 +798,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<T> {\n         box content\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         (**self).visit_with(visitor)\n     }\n }\n@@ -804,8 +808,8 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {\n         self.iter().map(|t| t.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -814,8 +818,8 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {\n         self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>().into_boxed_slice()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -828,11 +832,11 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n         folder.fold_binder(self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         self.as_ref().skip_binder().visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         visitor.visit_binder(self)\n     }\n }\n@@ -842,8 +846,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n         fold_list(*self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|p| p.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n \n@@ -852,8 +856,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -862,8 +866,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -888,20 +892,24 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         use crate::ty::InstanceDef::*;\n-        self.substs.visit_with(visitor)\n-            || match self.def {\n-                Item(def) => def.visit_with(visitor),\n-                VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n-                    did.visit_with(visitor)\n-                }\n-                FnPtrShim(did, ty) | CloneShim(did, ty) => {\n-                    did.visit_with(visitor) || ty.visit_with(visitor)\n-                }\n-                DropGlue(did, ty) => did.visit_with(visitor) || ty.visit_with(visitor),\n-                ClosureOnceShim { call_once } => call_once.visit_with(visitor),\n+        self.substs.visit_with(visitor)?;\n+        match self.def {\n+            Item(def) => def.visit_with(visitor),\n+            VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+                did.visit_with(visitor)\n+            }\n+            FnPtrShim(did, ty) | CloneShim(did, ty) => {\n+                did.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n+            DropGlue(did, ty) => {\n+                did.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n             }\n+            ClosureOnceShim { call_once } => call_once.visit_with(visitor),\n+        }\n     }\n }\n \n@@ -910,7 +918,7 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n         Self { instance: self.instance.fold_with(folder), promoted: self.promoted }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         self.instance.visit_with(visitor)\n     }\n }\n@@ -959,19 +967,26 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n         folder.fold_ty(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         match self.kind() {\n             ty::RawPtr(ref tm) => tm.visit_with(visitor),\n-            ty::Array(typ, sz) => typ.visit_with(visitor) || sz.visit_with(visitor),\n+            ty::Array(typ, sz) => {\n+                typ.visit_with(visitor)?;\n+                sz.visit_with(visitor)\n+            }\n             ty::Slice(typ) => typ.visit_with(visitor),\n             ty::Adt(_, substs) => substs.visit_with(visitor),\n             ty::Dynamic(ref trait_ty, ref reg) => {\n-                trait_ty.visit_with(visitor) || reg.visit_with(visitor)\n+                trait_ty.visit_with(visitor)?;\n+                reg.visit_with(visitor)\n             }\n             ty::Tuple(ts) => ts.visit_with(visitor),\n             ty::FnDef(_, substs) => substs.visit_with(visitor),\n             ty::FnPtr(ref f) => f.visit_with(visitor),\n-            ty::Ref(r, ty, _) => r.visit_with(visitor) || ty.visit_with(visitor),\n+            ty::Ref(r, ty, _) => {\n+                r.visit_with(visitor)?;\n+                ty.visit_with(visitor)\n+            }\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n@@ -990,11 +1005,11 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             | ty::Placeholder(..)\n             | ty::Param(..)\n             | ty::Never\n-            | ty::Foreign(..) => false,\n+            | ty::Foreign(..) => ControlFlow::CONTINUE,\n         }\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         visitor.visit_ty(self)\n     }\n }\n@@ -1008,11 +1023,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n         folder.fold_region(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         visitor.visit_region(*self)\n     }\n }\n@@ -1023,11 +1038,11 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         folder.tcx().reuse_or_mk_predicate(*self, new)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         ty::PredicateKind::super_visit_with(&self.inner.kind, visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         visitor.visit_predicate(*self)\n     }\n \n@@ -1045,8 +1060,8 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n         fold_list(*self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|p| p.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|p| p.visit_with(visitor))\n     }\n }\n \n@@ -1055,8 +1070,8 @@ impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T>\n         self.iter().map(|x| x.fold_with(folder)).collect()\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n \n@@ -1075,11 +1090,12 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         folder.fold_const(*self)\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.ty.visit_with(visitor) || self.val.visit_with(visitor)\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.ty.visit_with(visitor)?;\n+        self.val.visit_with(visitor)\n     }\n \n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         visitor.visit_const(self)\n     }\n }\n@@ -1099,15 +1115,15 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         match *self {\n             ty::ConstKind::Infer(ic) => ic.visit_with(visitor),\n             ty::ConstKind::Param(p) => p.visit_with(visitor),\n             ty::ConstKind::Unevaluated(_, substs, _) => substs.visit_with(visitor),\n             ty::ConstKind::Value(_)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(_)\n-            | ty::ConstKind::Error(_) => false,\n+            | ty::ConstKind::Error(_) => ControlFlow::CONTINUE,\n         }\n     }\n }\n@@ -1117,8 +1133,8 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         *self\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> bool {\n-        false\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<(), ()> {\n+        ControlFlow::CONTINUE\n     }\n }\n "}, {"sha": "a4cb894398522a816fe30ee09419fe61e0640532", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=2c85b6fae0b2dbb1af91fd8c5fdd2c0140a43915", "patch": "@@ -17,6 +17,7 @@ use std::fmt;\n use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n+use std::ops::ControlFlow;\n \n /// An entity in the Rust type system, which can be one of\n /// several kinds (types, lifetimes, and consts).\n@@ -159,7 +160,7 @@ impl<'tcx> TypeFoldable<'tcx> for GenericArg<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.visit_with(visitor),\n             GenericArgKind::Type(ty) => ty.visit_with(visitor),\n@@ -391,8 +392,8 @@ impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {\n         }\n     }\n \n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.iter().any(|t| t.visit_with(visitor))\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<(), ()> {\n+        self.iter().try_for_each(|t| t.visit_with(visitor))\n     }\n }\n "}]}