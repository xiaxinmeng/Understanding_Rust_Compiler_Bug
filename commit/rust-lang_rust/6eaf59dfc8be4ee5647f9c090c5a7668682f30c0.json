{"sha": "6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYWY1OWRmYzhiZTRlZTU2NDdmOWMwOTBjNWE3NjY4NjgyZjMwYzA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-23T19:51:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-23T19:51:56Z"}, "message": "use `diagnostic_item` and modify wording", "tree": {"sha": "d3763ff2dd82a1d96b9319748de88101229f8668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3763ff2dd82a1d96b9319748de88101229f8668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "html_url": "https://github.com/rust-lang/rust/commit/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c775927d7fee06743631d138eac91a862c8f6faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c775927d7fee06743631d138eac91a862c8f6faf", "html_url": "https://github.com/rust-lang/rust/commit/c775927d7fee06743631d138eac91a862c8f6faf"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "cb4247d98745eb8e52af0fd9e2de8de382cd54b0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "patch": "@@ -151,6 +151,7 @@ use crate::{\n \n /// The `Option` type. See [the module level documentation](index.html) for more.\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n+#[rustc_diagnostic_item = \"option_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Option<T> {\n     /// No value"}, {"sha": "bc70dbd62eb52720bfd95e94849ec1af71749bd9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "patch": "@@ -242,6 +242,7 @@ use crate::ops::{self, Deref, DerefMut};\n /// [`Err`]: enum.Result.html#variant.Err\n #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n #[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n+#[rustc_diagnostic_item = \"result_type\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "43121b38da01a1160e3794ef18321dfec4bccd63", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_span::source_map::DesugaringKind;\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use crate::borrow_check::diagnostics::UseSpans;\n use crate::borrow_check::prefixes::PrefixSet;\n@@ -384,10 +384,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        let move_ty = format!(\"{:?}\", move_place.ty(*self.body, self.infcx.tcx).ty,);\n         if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n-            let is_option = move_ty.starts_with(\"std::option::Option\");\n-            let is_result = move_ty.starts_with(\"std::result::Result\");\n+            let def_id = match move_place.ty(*self.body, self.infcx.tcx).ty.kind {\n+                ty::Adt(self_def, _) => self_def.did,\n+                ty::Foreign(def_id)\n+                | ty::FnDef(def_id, _)\n+                | ty::Closure(def_id, _)\n+                | ty::Generator(def_id, ..)\n+                | ty::Opaque(def_id, _) => def_id,\n+                _ => return err,\n+            };\n+            let is_option =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"option_type\"), def_id);\n+            let is_result =\n+                self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"result_type\"), def_id);\n             if (is_option || is_result) && use_spans.map_or(true, |v| !v.for_closure()) {\n                 err.span_suggestion(\n                     span,\n@@ -399,12 +409,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else if span.is_desugaring(DesugaringKind::ForLoop)\n-                && move_ty.starts_with(\"std::vec::Vec\")\n+                && self.infcx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id)\n             {\n                 // FIXME: suggest for anything that implements `IntoIterator`.\n                 err.span_suggestion(\n                     span,\n-                    \"consider iterating over a slice of the `Vec`'s content\",\n+                    \"consider iterating over a slice of the `Vec<_>`'s content\",\n                     format!(\"&{}\", snippet),\n                     Applicability::MaybeIncorrect,\n                 );"}, {"sha": "576a7cc2f6043b8e31250830cf7fbffb53c14f8a", "filename": "src/test/ui/suggestions/for-i-in-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eaf59dfc8be4ee5647f9c090c5a7668682f30c0/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffor-i-in-vec.stderr?ref=6eaf59dfc8be4ee5647f9c090c5a7668682f30c0", "patch": "@@ -5,7 +5,7 @@ LL |         for _ in self.v {\n    |                  ^^^^^^\n    |                  |\n    |                  move occurs because `self.v` has type `std::vec::Vec<u32>`, which does not implement the `Copy` trait\n-   |                  help: consider iterating over a slice of the `Vec`'s content: `&self.v`\n+   |                  help: consider iterating over a slice of the `Vec<_>`'s content: `&self.v`\n \n error: aborting due to previous error\n "}]}