{"sha": "101b3abfd70cc988b24f30a610d46a3986df54d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMWIzYWJmZDcwY2M5ODhiMjRmMzBhNjEwZDQ2YTM5ODZkZjU0ZDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-13T22:12:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-14T06:03:43Z"}, "message": "store macro kind in HirFileId", "tree": {"sha": "61a44635319fae9a4670b4a660c72b462aec682f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a44635319fae9a4670b4a660c72b462aec682f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/101b3abfd70cc988b24f30a610d46a3986df54d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/101b3abfd70cc988b24f30a610d46a3986df54d3", "html_url": "https://github.com/rust-lang/rust/commit/101b3abfd70cc988b24f30a610d46a3986df54d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/101b3abfd70cc988b24f30a610d46a3986df54d3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d", "html_url": "https://github.com/rust-lang/rust/commit/ee0ab7c00b4b8c5375c14b44e3d7288ebf0d732d"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "288f85b018551c9f85f4d1177003e5b9b1cc9c86", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=101b3abfd70cc988b24f30a610d46a3986df54d3", "patch": "@@ -6,11 +6,11 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id, map::ArenaMap};\n use ra_syntax::{\n     SyntaxNodePtr, AstPtr, AstNode,\n-    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner}\n+    ast::{self, LoopBodyOwner, ArgListOwner, NameOwner, LiteralKind,ArrayExprKind, TypeAscriptionOwner},\n };\n \n use crate::{\n-    Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId, MacroCallLoc,\n+    Path, Name, HirDatabase, Resolver,DefWithBody, Either, HirFileId, MacroCallLoc, MacroFileKind,\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n@@ -833,8 +833,11 @@ where\n                     if let Some(tt) = self.db.macro_expand(call_id).ok() {\n                         if let Some(expr) = mbe::token_tree_to_expr(&tt).ok() {\n                             log::debug!(\"macro expansion {}\", expr.syntax().debug_dump());\n-                            let old_file_id =\n-                                std::mem::replace(&mut self.current_file_id, call_id.into());\n+                            let old_file_id = std::mem::replace(\n+                                &mut self.current_file_id,\n+                                //BUG\n+                                call_id.as_file(MacroFileKind::Items),\n+                            );\n                             let id = self.collect_expr(&expr);\n                             self.current_file_id = old_file_id;\n                             return id;"}, {"sha": "357ef2a800041f82d319ceec6dc7fee2e9ffe510", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=101b3abfd70cc988b24f30a610d46a3986df54d3", "patch": "@@ -39,8 +39,8 @@ impl HirFileId {\n     pub fn original_file(self, db: &impl DefDatabase) -> FileId {\n         match self.0 {\n             HirFileIdRepr::File(file_id) => file_id,\n-            HirFileIdRepr::Macro(macro_call_id) => {\n-                let loc = macro_call_id.loc(db);\n+            HirFileIdRepr::Macro(macro_file) => {\n+                let loc = macro_file.macro_call_id.loc(db);\n                 loc.ast_id.file_id().original_file(db)\n             }\n         }\n@@ -62,9 +62,10 @@ impl HirFileId {\n     ) -> TreeArc<SourceFile> {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n-            HirFileIdRepr::Macro(macro_call_id) => {\n-                match db.macro_expand(macro_call_id) {\n-                    Ok(tt) => mbe::token_tree_to_ast_item_list(&tt),\n+            HirFileIdRepr::Macro(macro_file) => {\n+                let macro_call_id = macro_file.macro_call_id;\n+                let tt = match db.macro_expand(macro_call_id) {\n+                    Ok(it) => it,\n                     Err(err) => {\n                         // Note:\n                         // The final goal we would like to make all parse_macro success,\n@@ -74,10 +75,12 @@ impl HirFileId {\n                             err,\n                             macro_call_id.debug_dump(db)\n                         );\n-\n                         // returning an empty string looks fishy...\n-                        SourceFile::parse(\"\")\n+                        return SourceFile::parse(\"\");\n                     }\n+                };\n+                match macro_file.macro_file_kind {\n+                    MacroFileKind::Items => mbe::token_tree_to_ast_item_list(&tt),\n                 }\n             }\n         }\n@@ -87,7 +90,18 @@ impl HirFileId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n enum HirFileIdRepr {\n     File(FileId),\n-    Macro(MacroCallId),\n+    Macro(MacroFile),\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+struct MacroFile {\n+    macro_call_id: MacroCallId,\n+    macro_file_kind: MacroFileKind,\n+}\n+\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) enum MacroFileKind {\n+    Items,\n }\n \n impl From<FileId> for HirFileId {\n@@ -96,12 +110,6 @@ impl From<FileId> for HirFileId {\n     }\n }\n \n-impl From<MacroCallId> for HirFileId {\n-    fn from(macro_call_id: MacroCallId) -> HirFileId {\n-        HirFileId(HirFileIdRepr::Macro(macro_call_id))\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId(pub(crate) AstId<ast::MacroCall>);\n \n@@ -173,6 +181,11 @@ impl MacroCallId {\n     pub(crate) fn loc(self, db: &impl DefDatabase) -> MacroCallLoc {\n         db.lookup_intern_macro(self)\n     }\n+\n+    pub(crate) fn as_file(self, kind: MacroFileKind) -> HirFileId {\n+        let macro_file = MacroFile { macro_call_id: self, macro_file_kind: kind };\n+        HirFileId(HirFileIdRepr::Macro(macro_file))\n+    }\n }\n \n impl MacroCallLoc {\n@@ -342,7 +355,7 @@ impl MacroCallId {\n         let syntax_str = node.syntax().text().chunks().collect::<Vec<_>>().join(\" \");\n \n         // dump the file name\n-        let file_id: HirFileId = self.clone().into();\n+        let file_id: HirFileId = self.loc(db).ast_id.file_id();\n         let original = file_id.original_file(db);\n         let macro_rules = db.macro_def(loc.def);\n "}, {"sha": "0c6d7c2b760ddc6d01a0d376bbc28fbc1f9178cd", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=101b3abfd70cc988b24f30a610d46a3986df54d3", "patch": "@@ -53,6 +53,7 @@ use crate::{\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n     resolve::Resolver,\n+    ids::MacroFileKind,\n };\n \n pub use self::{"}, {"sha": "c615d80c3609d5d79a4c10866ce119a40e3eb1f1", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/101b3abfd70cc988b24f30a610d46a3986df54d3/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=101b3abfd70cc988b24f30a610d46a3986df54d3", "patch": "@@ -15,7 +15,7 @@ use crate::{\n         diagnostics::DefDiagnostic,\n         raw,\n     },\n-    ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId},\n+    ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId, MacroFileKind},\n     AstId,\n };\n \n@@ -371,7 +371,7 @@ where\n         self.macro_stack_monitor.increase(macro_def_id);\n \n         if !self.macro_stack_monitor.is_poison(macro_def_id) {\n-            let file_id: HirFileId = macro_call_id.into();\n+            let file_id: HirFileId = macro_call_id.as_file(MacroFileKind::Items);\n             let raw_items = self.db.raw_items(file_id);\n             ModCollector { def_collector: &mut *self, file_id, module_id, raw_items: &raw_items }\n                 .collect(raw_items.items());"}]}