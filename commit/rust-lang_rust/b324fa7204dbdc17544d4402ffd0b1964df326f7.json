{"sha": "b324fa7204dbdc17544d4402ffd0b1964df326f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMjRmYTcyMDRkYmRjMTc1NDRkNDQwMmZmZDBiMTk2NGRmMzI2Zjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-18T19:03:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-18T19:03:14Z"}, "message": "Auto merge of #33081 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 6 pull requests\n\n- Successful merges: #32558, #32906, #33007, #33008, #33035, #33058\n- Failed merges: #32912", "tree": {"sha": "67e4bcf0b273718594c1dd33c6dcace22c48aeb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e4bcf0b273718594c1dd33c6dcace22c48aeb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b324fa7204dbdc17544d4402ffd0b1964df326f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b324fa7204dbdc17544d4402ffd0b1964df326f7", "html_url": "https://github.com/rust-lang/rust/commit/b324fa7204dbdc17544d4402ffd0b1964df326f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b324fa7204dbdc17544d4402ffd0b1964df326f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00782494b47ca7a4ae8e665f99ab10012b45f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00782494b47ca7a4ae8e665f99ab10012b45f9c", "html_url": "https://github.com/rust-lang/rust/commit/d00782494b47ca7a4ae8e665f99ab10012b45f9c"}, {"sha": "ec44ddc33a77192f2b9a03ec1747200f0fcb9ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec44ddc33a77192f2b9a03ec1747200f0fcb9ac3", "html_url": "https://github.com/rust-lang/rust/commit/ec44ddc33a77192f2b9a03ec1747200f0fcb9ac3"}], "stats": {"total": 126, "additions": 74, "deletions": 52}, "files": [{"sha": "4b404259480b5ee24fb238a65e3b301ee4caa32a", "filename": "RELEASES.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -140,9 +140,9 @@ Cargo\n Performance\n -----------\n \n-* [During type unification, the complexity of comparing variables for\n-  equivalance was reduced from `O(n!)` to `O(n)`][1.9tu]. This leads\n-  to major compile-time improvements in some scenarios.\n+* [The time complexity of comparing variables for equivalence during type \n+  unification is reduced from _O_(_n_!) to _O_(_n_)][1.9tu]. This leads\n+  to major compilation time improvement in some scenarios.\n * [`ToString` is specialized for `str`, giving it the same performance\n   as `to_owned`][1.9ts].\n * [Spawning processes with `Command::output` no longer creates extra"}, {"sha": "6aad3c5f746557c64d3d7f01fa4727a757996d2e", "filename": "src/doc/book/mutability.md", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fmutability.md", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fmutability.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmutability.md?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -24,18 +24,16 @@ changed from one `i32` to another.\n \n [vb]: variable-bindings.html\n \n-If you want to change what the binding points to, you\u2019ll need a [mutable reference][mr]:\n+You can also create a [reference][ref] to it, using `&x`, but if you want to use the reference to change it, you will need a mutable reference:\n \n ```rust\n let mut x = 5;\n let y = &mut x;\n ```\n \n-[mr]: references-and-borrowing.html\n+[ref]: references-and-borrowing.html\n \n-`y` is an immutable binding to a mutable reference, which means that you can\u2019t\n-bind `y` to something else (`y = &mut z`), but you can mutate the thing that\u2019s\n-bound to `y` (`*y = 5`). A subtle distinction.\n+`y` is an immutable binding to a mutable reference, which means that you can\u2019t bind 'y' to something else (`y = &mut z`), but `y` can be used to bind `x` to something else (`*y = 5`). A subtle distinction.\n \n Of course, if you need both:\n "}, {"sha": "988103a1180324087c25141c73313fb40bedb09e", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -173,11 +173,11 @@ For example if we truncated the vector to just two elements through `v2`:\n v2.truncate(2);\n ```\n \n-and `v1` were still accessible we'd end up with an invalid vector since `v1`\n+and `v` were still accessible we'd end up with an invalid vector since `v`\n would not know that the heap data has been truncated. Now, the part of the\n-vector `v1` on the stack does not agree with the corresponding part on the\n-heap. `v1` still thinks there are three elements in the vector and will\n-happily let us access the non existent element `v1[2]` but as you might\n+vector `v` on the stack does not agree with the corresponding part on the\n+heap. `v` still thinks there are three elements in the vector and will\n+happily let us access the non existent element `v[2]` but as you might\n already know this is a recipe for disaster. Especially because it might lead\n to a segmentation fault or worse allow an unauthorized user to read from\n memory to which they don't have access."}, {"sha": "2a4b7ba37f25bc79d6cc9a494311c04ca2993138", "filename": "src/doc/book/primitive-types.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fprimitive-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Fdoc%2Fbook%2Fprimitive-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fprimitive-types.md?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -97,9 +97,10 @@ and `i64` is a signed, 64-bit integer.\n \n ## Variable-size types\n \n-Rust also provides types whose size depends on the size of a pointer of the\n-underlying machine. These types have \u2018size\u2019 as the category, and come in signed\n-and unsigned varieties. This makes for two types: `isize` and `usize`.\n+Rust also provides types whose particular size depends on the underlying machine\n+architecture. Their range is sufficient to express the size of any collection, so\n+these types have \u2018size\u2019 as the category. They come in signed and unsigned varieties\n+which account for two types: `isize` and `usize`.\n \n ## Floating-point types\n "}, {"sha": "582b9696bb1aa09c189029bf49cde33d55daf3dc", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -1420,45 +1420,24 @@ fn main() {\n \"##,\n \n E0102: r##\"\n-You hit this error because the compiler lacks information to\n-determine a type for this variable. Erroneous code example:\n+You hit this error because the compiler lacks the information to\n+determine the type of this variable. Erroneous code example:\n \n ```compile_fail\n-fn demo(devil: fn () -> !) {\n-    let x: &_ = devil();\n-    // error: cannot determine a type for this local variable\n-}\n-\n-fn oh_no() -> ! { panic!(\"the devil is in the details\") }\n-\n fn main() {\n-    demo(oh_no);\n+    // could be an array of anything\n+    let x = []; // error: cannot determine a type for this local variable\n }\n ```\n \n To solve this situation, constrain the type of the variable.\n Examples:\n \n-```no_run\n+```\n #![allow(unused_variables)]\n \n-fn some_func(x: &u32) {\n-    // some code\n-}\n-\n-fn demo(devil: fn () -> !) {\n-    let x: &u32 = devil();\n-    // Here we defined the type at the variable creation\n-\n-    let x: &_ = devil();\n-    some_func(x);\n-    // Here, the type is determined by the function argument type\n-}\n-\n-fn oh_no() -> ! { panic!(\"the devil is in the details\") }\n-\n fn main() {\n-    demo(oh_no);\n+    let x: [u8; 0] = [];\n }\n ```\n \"##,"}, {"sha": "023da1612e6a37e43fe998508b21e04316d1514a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -1518,6 +1518,13 @@ impl Type {\n             _ => None,\n         }\n     }\n+\n+    pub fn trait_name(&self) -> Option<String> {\n+        match *self {\n+            ResolvedPath { ref path, .. } => Some(path.last_name()),\n+            _ => None,\n+        }\n+    }\n }\n \n impl GetDefId for Type {\n@@ -2009,6 +2016,10 @@ impl Path {\n             }]\n         }\n     }\n+\n+    pub fn last_name(&self) -> String {\n+        self.segments.last().unwrap().name.clone()\n+    }\n }\n \n impl Clean<Path> for hir::Path {"}, {"sha": "1a228b4af8b8feb79c328e1e902ddf821512bc4a", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -561,19 +561,33 @@ impl fmt::Display for clean::Type {\n     }\n }\n \n+fn fmt_impl(i: &clean::Impl, f: &mut fmt::Formatter, link_trait: bool) -> fmt::Result {\n+    write!(f, \"impl{} \", i.generics)?;\n+    if let Some(ref ty) = i.trait_ {\n+        write!(f, \"{}\",\n+               if i.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" })?;\n+        if link_trait {\n+            write!(f, \"{}\", *ty)?;\n+        } else {\n+            write!(f, \"{}\", ty.trait_name().unwrap())?;\n+        }\n+        write!(f, \" for \")?;\n+    }\n+    write!(f, \"{}{}\", i.for_, WhereClause(&i.generics))?;\n+    Ok(())\n+}\n+\n impl fmt::Display for clean::Impl {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"impl{} \", self.generics)?;\n-        if let Some(ref ty) = self.trait_ {\n-            write!(f, \"{}{} for \",\n-                   if self.polarity == Some(clean::ImplPolarity::Negative) { \"!\" } else { \"\" },\n-                   *ty)?;\n-        }\n-        write!(f, \"{}{}\", self.for_, WhereClause(&self.generics))?;\n-        Ok(())\n+        fmt_impl(self, f, true)\n     }\n }\n \n+// The difference from above is that trait is not hyperlinked.\n+pub fn fmt_impl_for_trait_page(i: &clean::Impl, f: &mut fmt::Formatter) -> fmt::Result {\n+    fmt_impl(i, f, false)\n+}\n+\n impl fmt::Display for clean::Arguments {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         for (i, input) in self.values.iter().enumerate() {\n@@ -667,7 +681,7 @@ impl fmt::Display for clean::Import {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             clean::SimpleImport(ref name, ref src) => {\n-                if *name == src.path.segments.last().unwrap().name {\n+                if *name == src.path.last_name() {\n                     write!(f, \"use {};\", *src)\n                 } else {\n                     write!(f, \"use {} as {};\", *src, *name)"}, {"sha": "31071cdc3ca65ea9e16e9637ea1ac27e33dd7076", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -69,6 +69,7 @@ use html::escape::Escape;\n use html::format::{ConstnessSpace};\n use html::format::{TyParamBounds, WhereClause, href, AbiSpace};\n use html::format::{VisSpace, Method, UnsafetySpace, MutableSpace};\n+use html::format::fmt_impl_for_trait_page;\n use html::item_type::ItemType;\n use html::markdown::{self, Markdown};\n use html::{highlight, layout};\n@@ -2010,7 +2011,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     match cache.implementors.get(&it.def_id) {\n         Some(implementors) => {\n             for i in implementors {\n-                writeln!(w, \"<li><code>{}</code></li>\", i.impl_)?;\n+                write!(w, \"<li><code>\")?;\n+                fmt_impl_for_trait_page(&i.impl_, w)?;\n+                writeln!(w, \"</code></li>\")?;\n             }\n         }\n         None => {}"}, {"sha": "3233fb96c5c354f18e896d8e36991e43f6ae4143", "filename": "src/test/rustdoc/trait-self-link.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b324fa7204dbdc17544d4402ffd0b1964df326f7/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-self-link.rs?ref=b324fa7204dbdc17544d4402ffd0b1964df326f7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// @!has trait_self_link/trait.Foo.html //a/@href ../trait_self_link/trait.Foo.html\n+pub trait Foo {}\n+\n+pub struct Bar;\n+\n+impl Foo for Bar {}"}]}