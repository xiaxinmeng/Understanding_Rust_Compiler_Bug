{"sha": "9495ee21b740fc1a8bcec651c5f2135806a71b03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0OTVlZTIxYjc0MGZjMWE4YmNlYzY1MWM1ZjIxMzU4MDZhNzFiMDM=", "commit": {"author": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-09T10:21:36Z"}, "committer": {"name": "Nathan Corbyn", "email": "me@nathancorbyn.com", "date": "2020-06-09T10:21:36Z"}, "message": "Address comments", "tree": {"sha": "7adf8d48408e7b7c7c81bd73e7f1f183482d1673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7adf8d48408e7b7c7c81bd73e7f1f183482d1673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9495ee21b740fc1a8bcec651c5f2135806a71b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9495ee21b740fc1a8bcec651c5f2135806a71b03", "html_url": "https://github.com/rust-lang/rust/commit/9495ee21b740fc1a8bcec651c5f2135806a71b03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9495ee21b740fc1a8bcec651c5f2135806a71b03/comments", "author": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "doctorn", "id": 6421560, "node_id": "MDQ6VXNlcjY0MjE1NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6421560?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doctorn", "html_url": "https://github.com/doctorn", "followers_url": "https://api.github.com/users/doctorn/followers", "following_url": "https://api.github.com/users/doctorn/following{/other_user}", "gists_url": "https://api.github.com/users/doctorn/gists{/gist_id}", "starred_url": "https://api.github.com/users/doctorn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doctorn/subscriptions", "organizations_url": "https://api.github.com/users/doctorn/orgs", "repos_url": "https://api.github.com/users/doctorn/repos", "events_url": "https://api.github.com/users/doctorn/events{/privacy}", "received_events_url": "https://api.github.com/users/doctorn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4fd22618730f63689d8dc36972bc2a56d46067", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4fd22618730f63689d8dc36972bc2a56d46067", "html_url": "https://github.com/rust-lang/rust/commit/1c4fd22618730f63689d8dc36972bc2a56d46067"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "8150c328316cbb3d9faceeb47064f5bb288d1f52", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9495ee21b740fc1a8bcec651c5f2135806a71b03/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9495ee21b740fc1a8bcec651c5f2135806a71b03/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=9495ee21b740fc1a8bcec651c5f2135806a71b03", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::{\n };\n use rustc_span::def_id::DefId;\n \n+#[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n     Unwind,\n     Normal,\n@@ -54,7 +55,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    fn check_bb(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n+    fn check_edge(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n         if let Some(bb) = self.body.basic_blocks().get(bb) {\n             let src = self.body.basic_blocks().get(location.block).unwrap();\n             match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n@@ -68,7 +69,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 _ => {\n                     self.fail(\n                         location,\n-                        format!(\"encountered jump that does not respect unwind invariants {:?}\", bb)\n+                        format!(\n+                            \"{:?} edge to {:?} violates unwind invariants (cleanup {:?} -> {:?})\",\n+                            edge_kind,\n+                            bb,\n+                            src.is_cleanup,\n+                            bb.is_cleanup,\n+                        )\n                     )\n                 }\n             }\n@@ -114,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(location, *target, EdgeKind::Normal);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n@@ -128,19 +135,19 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(location, *target, EdgeKind::Normal);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(location, *target, EdgeKind::Normal);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(location, *target, EdgeKind::Normal);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Call { func, destination, cleanup, .. } => {\n@@ -153,10 +160,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(location, *target, EdgeKind::Normal);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup, EdgeKind::Unwind);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n@@ -170,30 +177,30 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                self.check_bb(location, *target, EdgeKind::Normal);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup, EdgeKind::Unwind);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(location, *resume, EdgeKind::Normal);\n+                self.check_edge(location, *resume, EdgeKind::Normal);\n                 if let Some(drop) = drop {\n-                    self.check_bb(location, *drop, EdgeKind::Normal);\n+                    self.check_edge(location, *drop, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n-                self.check_bb(location, *real_target, EdgeKind::Normal);\n-                self.check_bb(location, *imaginary_target, EdgeKind::Normal);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n+                self.check_edge(location, *imaginary_target, EdgeKind::Normal);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(location, *real_target, EdgeKind::Normal);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind, EdgeKind::Unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(location, *destination, EdgeKind::Normal);\n+                    self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n             }\n             // Nothing to validate for these."}]}