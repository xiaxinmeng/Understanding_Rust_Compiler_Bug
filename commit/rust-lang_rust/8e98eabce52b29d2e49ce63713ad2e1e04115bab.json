{"sha": "8e98eabce52b29d2e49ce63713ad2e1e04115bab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOThlYWJjZTUyYjI5ZDJlNDljZTYzNzEzYWQyZTFlMDQxMTViYWI=", "commit": {"author": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-08-01T22:08:51Z"}, "committer": {"name": "toddaaro", "email": "github@opprobrio.us", "date": "2013-08-01T22:38:48Z"}, "message": "modified local to include an implementation for try_unsafe_borrow::<Task> so that the log methods will work", "tree": {"sha": "bdb6d50d12751f70db7c3425834f62011b438595", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb6d50d12751f70db7c3425834f62011b438595"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e98eabce52b29d2e49ce63713ad2e1e04115bab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e98eabce52b29d2e49ce63713ad2e1e04115bab", "html_url": "https://github.com/rust-lang/rust/commit/8e98eabce52b29d2e49ce63713ad2e1e04115bab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e98eabce52b29d2e49ce63713ad2e1e04115bab/comments", "author": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toddaaro", "id": 366431, "node_id": "MDQ6VXNlcjM2NjQzMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/366431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toddaaro", "html_url": "https://github.com/toddaaro", "followers_url": "https://api.github.com/users/toddaaro/followers", "following_url": "https://api.github.com/users/toddaaro/following{/other_user}", "gists_url": "https://api.github.com/users/toddaaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/toddaaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toddaaro/subscriptions", "organizations_url": "https://api.github.com/users/toddaaro/orgs", "repos_url": "https://api.github.com/users/toddaaro/repos", "events_url": "https://api.github.com/users/toddaaro/events{/privacy}", "received_events_url": "https://api.github.com/users/toddaaro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d82fe5aea71b1c265634f32716b268972141efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d82fe5aea71b1c265634f32716b268972141efb", "html_url": "https://github.com/rust-lang/rust/commit/1d82fe5aea71b1c265634f32716b268972141efb"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "2daa64e808530c4298eb2b7378395557672abc2e", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=8e98eabce52b29d2e49ce63713ad2e1e04115bab", "patch": "@@ -380,7 +380,7 @@ mod test {\n             }\n \n             do spawntask {\n-                for max.times {\n+                do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n                 }\n@@ -405,7 +405,7 @@ mod test {\n             }\n \n             do spawntask {\n-                for max.times {\n+                do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n                 }"}, {"sha": "7ab63233cff2f62694152eca6964ecc9e1c7435a", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=8e98eabce52b29d2e49ce63713ad2e1e04115bab", "patch": "@@ -44,7 +44,13 @@ impl Local for Task {\n         }\n     }\n     unsafe fn unsafe_borrow() -> *mut Task { local_ptr::unsafe_borrow() }\n-    unsafe fn try_unsafe_borrow() -> Option<*mut Task> { rtabort!(\"unimpl task try_unsafe_borrow\") }\n+    unsafe fn try_unsafe_borrow() -> Option<*mut Task> {\n+        if Local::exists::<Task>() {\n+            Some(Local::unsafe_borrow())\n+        } else {\n+            None\n+        }\n+    }\n }\n \n impl Local for Scheduler {\n@@ -95,7 +101,7 @@ impl Local for Scheduler {\n         }\n     }\n     unsafe fn try_unsafe_borrow() -> Option<*mut Scheduler> {\n-        if Local::exists::<Task>() {\n+        if Local::exists::<Scheduler>() {\n             Some(Local::unsafe_borrow())\n         } else {\n             None"}, {"sha": "23a0d28e45777ff1f89d0f5d5f646807d58d3c16", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=8e98eabce52b29d2e49ce63713ad2e1e04115bab", "patch": "@@ -129,6 +129,7 @@ impl Task {\n             death: Death::new(),\n             destroyed: false,\n             coroutine: Some(Coroutine::empty()),\n+            name: None,\n             sched: None,\n             task_type: SchedTask\n         }"}, {"sha": "7a864ecb8679d67a7b51f65ae6a96d561e4a41d1", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e98eabce52b29d2e49ce63713ad2e1e04115bab/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=8e98eabce52b29d2e49ce63713ad2e1e04115bab", "patch": "@@ -685,7 +685,7 @@ fn test_spawn_unlinked_unsup_no_fail_down() { // grandchild sends on a port\n             let ch = ch.clone();\n             do spawn_unlinked {\n                 // Give middle task a chance to fail-but-not-kill-us.\n-                for 16.times { task::yield(); }\n+                do 16.times { task::yield(); }\n                 ch.send(()); // If killed first, grandparent hangs.\n             }\n             fail!(); // Shouldn't kill either (grand)parent or (grand)child.\n@@ -706,7 +706,7 @@ fn test_spawn_unlinked_sup_no_fail_up() { // child unlinked fails\n     do run_in_newsched_task {\n         do spawn_supervised { fail!(); }\n         // Give child a chance to fail-but-not-kill-us.\n-        for 16.times { task::yield(); }\n+        do 16.times { task::yield(); }\n     }\n }\n #[test] #[ignore(cfg(windows))]\n@@ -808,7 +808,7 @@ fn test_spawn_failure_propagate_grandchild() {\n             do spawn_supervised {\n                 do spawn_supervised { block_forever(); }\n             }\n-            for 16.times { task::yield(); }\n+            do 16.times { task::yield(); }\n             fail!();\n         };\n         assert!(result.is_err());\n@@ -824,7 +824,7 @@ fn test_spawn_failure_propagate_secondborn() {\n             do spawn_supervised {\n                 do spawn { block_forever(); } // linked\n             }\n-            for 16.times { task::yield(); }\n+            do 16.times { task::yield(); }\n             fail!();\n         };\n         assert!(result.is_err());\n@@ -840,7 +840,7 @@ fn test_spawn_failure_propagate_nephew_or_niece() {\n             do spawn { // linked\n                 do spawn_supervised { block_forever(); }\n             }\n-            for 16.times { task::yield(); }\n+            do 16.times { task::yield(); }\n             fail!();\n         };\n         assert!(result.is_err());\n@@ -856,7 +856,7 @@ fn test_spawn_linked_sup_propagate_sibling() {\n             do spawn { // linked\n                 do spawn { block_forever(); } // linked\n             }\n-            for 16.times { task::yield(); }\n+            do 16.times { task::yield(); }\n             fail!();\n         };\n         assert!(result.is_err());"}]}