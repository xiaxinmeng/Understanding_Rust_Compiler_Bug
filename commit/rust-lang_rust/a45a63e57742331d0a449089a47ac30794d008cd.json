{"sha": "a45a63e57742331d0a449089a47ac30794d008cd", "node_id": "C_kwDOAAsO6NoAKGE0NWE2M2U1Nzc0MjMzMWQwYTQ0OTA4OWE0N2FjMzA3OTRkMDA4Y2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T13:05:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T13:05:47Z"}, "message": "Auto merge of #12013 - XFFXFF:associated_const_equality, r=Veykril\n\nfix: support `associated_const_equality` in parser\n\nThis pr fixes #11965.  The parser now allows eq constraints on associated constants.\n\nI've added tests for `HasCount<Count = {N}>` and `HasCount<Count = 0>`", "tree": {"sha": "20e509b8ead8408829354ff897a84bd09873d423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e509b8ead8408829354ff897a84bd09873d423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a45a63e57742331d0a449089a47ac30794d008cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a45a63e57742331d0a449089a47ac30794d008cd", "html_url": "https://github.com/rust-lang/rust/commit/a45a63e57742331d0a449089a47ac30794d008cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a45a63e57742331d0a449089a47ac30794d008cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c675d652f2e1e16a5d2ca5fadf019a5afd527a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c675d652f2e1e16a5d2ca5fadf019a5afd527a6", "html_url": "https://github.com/rust-lang/rust/commit/9c675d652f2e1e16a5d2ca5fadf019a5afd527a6"}, {"sha": "6580d75308ce5d8935f56e8dda578804b08cc819", "url": "https://api.github.com/repos/rust-lang/rust/commits/6580d75308ce5d8935f56e8dda578804b08cc819", "html_url": "https://github.com/rust-lang/rust/commit/6580d75308ce5d8935f56e8dda578804b08cc819"}], "stats": {"total": 125, "additions": 121, "deletions": 4}, "files": [{"sha": "862d3b259feb6ab76f2d650f3987f9b1207454e5", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=a45a63e57742331d0a449089a47ac30794d008cd", "patch": "@@ -40,11 +40,19 @@ fn generic_arg(p: &mut Parser) {\n             name_ref(p);\n             opt_generic_arg_list(p, false);\n             match p.current() {\n-                // test assoc_type_eq\n-                // type T = StreamingIterator<Item<'a> = &'a T>;\n                 T![=] => {\n                     p.bump_any();\n-                    types::type_(p);\n+                    if types::TYPE_FIRST.contains(p.current()) {\n+                        // test assoc_type_eq\n+                        // type T = StreamingIterator<Item<'a> = &'a T>;\n+                        types::type_(p);\n+                    } else {\n+                        // test assoc_const_eq\n+                        // fn foo<F: Foo<N=3>>() {}\n+                        // const TEST: usize = 3;\n+                        // fn bar<F: Foo<N={TEST}>>() {}\n+                        const_arg(p);\n+                    }\n                     m.complete(p, ASSOC_TYPE_ARG);\n                 }\n                 // test assoc_type_bound"}, {"sha": "fa2733e7f96c316ae20e528feb94316e5ffff978", "filename": "crates/parser/test_data/parser/inline/ok/0200_assoc_const_eq.rast", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rast?ref=a45a63e57742331d0a449089a47ac30794d008cd", "patch": "@@ -0,0 +1,105 @@\n+SOURCE_FILE\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"foo\"\n+    GENERIC_PARAM_LIST\n+      L_ANGLE \"<\"\n+      TYPE_PARAM\n+        NAME\n+          IDENT \"F\"\n+        COLON \":\"\n+        WHITESPACE \" \"\n+        TYPE_BOUND_LIST\n+          TYPE_BOUND\n+            PATH_TYPE\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Foo\"\n+                  GENERIC_ARG_LIST\n+                    L_ANGLE \"<\"\n+                    ASSOC_TYPE_ARG\n+                      NAME_REF\n+                        IDENT \"N\"\n+                      EQ \"=\"\n+                      CONST_ARG\n+                        LITERAL\n+                          INT_NUMBER \"3\"\n+                    R_ANGLE \">\"\n+      R_ANGLE \">\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\"\n+  CONST\n+    CONST_KW \"const\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"TEST\"\n+    COLON \":\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"usize\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    LITERAL\n+      INT_NUMBER \"3\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\"\n+  FN\n+    FN_KW \"fn\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"bar\"\n+    GENERIC_PARAM_LIST\n+      L_ANGLE \"<\"\n+      TYPE_PARAM\n+        NAME\n+          IDENT \"F\"\n+        COLON \":\"\n+        WHITESPACE \" \"\n+        TYPE_BOUND_LIST\n+          TYPE_BOUND\n+            PATH_TYPE\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Foo\"\n+                  GENERIC_ARG_LIST\n+                    L_ANGLE \"<\"\n+                    ASSOC_TYPE_ARG\n+                      NAME_REF\n+                        IDENT \"N\"\n+                      EQ \"=\"\n+                      CONST_ARG\n+                        BLOCK_EXPR\n+                          STMT_LIST\n+                            L_CURLY \"{\"\n+                            PATH_EXPR\n+                              PATH\n+                                PATH_SEGMENT\n+                                  NAME_REF\n+                                    IDENT \"TEST\"\n+                            R_CURLY \"}\"\n+                    R_ANGLE \">\"\n+      R_ANGLE \">\"\n+    PARAM_LIST\n+      L_PAREN \"(\"\n+      R_PAREN \")\"\n+    WHITESPACE \" \"\n+    BLOCK_EXPR\n+      STMT_LIST\n+        L_CURLY \"{\"\n+        R_CURLY \"}\"\n+  WHITESPACE \"\\n\""}, {"sha": "b43c4e36acd99fd677c882c5c17ec7864d0bfe39", "filename": "crates/parser/test_data/parser/inline/ok/0200_assoc_const_eq.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0200_assoc_const_eq.rs?ref=a45a63e57742331d0a449089a47ac30794d008cd", "patch": "@@ -0,0 +1,3 @@\n+fn foo<F: Foo<N=3>>() {}\n+const TEST: usize = 3;\n+fn bar<F: Foo<N={TEST}>>() {}"}, {"sha": "62aa47839942a42b596723d7da9b241f128afc58", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=a45a63e57742331d0a449089a47ac30794d008cd", "patch": "@@ -51,7 +51,7 @@ TypeArg =\n   Type\n \n AssocTypeArg =\n-  NameRef GenericParamList? (':' TypeBoundList | '=' Type)\n+  NameRef GenericParamList? (':' TypeBoundList | ('=' Type | ConstArg))\n \n LifetimeArg =\n   Lifetime"}, {"sha": "cf90ba64cff1ab5ba6e41e3e7c9246698a21fc11", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45a63e57742331d0a449089a47ac30794d008cd/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a45a63e57742331d0a449089a47ac30794d008cd", "patch": "@@ -123,6 +123,7 @@ impl AssocTypeArg {\n     pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n+    pub fn const_arg(&self) -> Option<ConstArg> { support::child(&self.syntax) }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}