{"sha": "c6f4a03d12d97162e2775c14ab006d355b04126d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2ZjRhMDNkMTJkOTcxNjJlMjc3NWMxNGFiMDA2ZDM1NWIwNDEyNmQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-05T00:16:55Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-01-05T22:26:04Z"}, "message": "Stabilization of impls and fallout from stabilization", "tree": {"sha": "b579b493904ab0721365f959b1b692edf3a51d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b579b493904ab0721365f959b1b692edf3a51d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6f4a03d12d97162e2775c14ab006d355b04126d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6f4a03d12d97162e2775c14ab006d355b04126d", "html_url": "https://github.com/rust-lang/rust/commit/c6f4a03d12d97162e2775c14ab006d355b04126d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6f4a03d12d97162e2775c14ab006d355b04126d/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb765ce7e190c70313858738e7427d99338a4f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb765ce7e190c70313858738e7427d99338a4f3f", "html_url": "https://github.com/rust-lang/rust/commit/cb765ce7e190c70313858738e7427d99338a4f3f"}], "stats": {"total": 177, "additions": 128, "deletions": 49}, "files": [{"sha": "25f80ad11bd1124b87ef34445b799b4dd67f80cf", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -246,7 +246,7 @@ impl<T> BorrowFrom<Arc<T>> for T {\n     }\n }\n \n-#[experimental = \"Deref is experimental.\"]\n+#[stable]\n impl<T> Deref for Arc<T> {\n     type Target = T;\n \n@@ -290,7 +290,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n }\n \n #[unsafe_destructor]\n-#[experimental = \"waiting on stability of Drop\"]\n+#[stable]\n impl<T: Sync + Send> Drop for Arc<T> {\n     /// Drops the `Arc<T>`.\n     ///\n@@ -418,7 +418,7 @@ impl<T: Sync + Send> Clone for Weak<T> {\n }\n \n #[unsafe_destructor]\n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[stable]\n impl<T: Sync + Send> Drop for Weak<T> {\n     /// Drops the `Weak<T>`.\n     ///"}, {"sha": "33d1cc7f4c74596cbc23ba54485eec44c3dbffc8", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -155,12 +155,14 @@ impl fmt::Show for Box<Any> {\n     }\n }\n \n+#[stable]\n impl<Sized? T> Deref for Box<T> {\n     type Target = T;\n \n     fn deref(&self) -> &T { &**self }\n }\n \n+#[stable]\n impl<Sized? T> DerefMut for Box<T> {\n     fn deref_mut(&mut self) -> &mut T { &mut **self }\n }"}, {"sha": "175bba4e71dc46f9671f04658e5a3b034914a43e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -354,7 +354,7 @@ impl<T> BorrowFrom<Rc<T>> for T {\n     }\n }\n \n-#[experimental = \"Deref is experimental.\"]\n+#[stable]\n impl<T> Deref for Rc<T> {\n     type Target = T;\n \n@@ -365,7 +365,7 @@ impl<T> Deref for Rc<T> {\n }\n \n #[unsafe_destructor]\n-#[experimental = \"Drop is experimental.\"]\n+#[stable]\n impl<T> Drop for Rc<T> {\n     /// Drops the `Rc<T>`.\n     ///\n@@ -656,7 +656,7 @@ impl<T> Weak<T> {\n }\n \n #[unsafe_destructor]\n-#[experimental = \"Weak pointers may not belong in this module.\"]\n+#[stable]\n impl<T> Drop for Weak<T> {\n     /// Drops the `Weak<T>`.\n     ///"}, {"sha": "01693391abed51037186c9f781eca4141ae148b9", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -562,11 +562,13 @@ impl<T: Ord> BinaryHeap<T> {\n }\n \n /// `BinaryHeap` iterator.\n+#[stable]\n pub struct Iter <'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n+#[stable]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> {\n         Iter { iter: self.iter.clone() }\n@@ -594,6 +596,7 @@ impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n /// An iterator that moves out of a `BinaryHeap`.\n+#[stable]\n pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n@@ -619,6 +622,7 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n+#[unstable = \"recent addition\"]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }"}, {"sha": "c9b090bfb232373551710a94052cb03c1a1ba66e", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -113,8 +113,7 @@ mod prelude {\n     pub use core::iter::range;\n     pub use core::iter::{FromIterator, Extend, IteratorExt};\n     pub use core::iter::{Iterator, DoubleEndedIterator, RandomAccessIterator};\n-    pub use core::iter::{IteratorCloneExt, CloneIteratorExt};\n-    pub use core::iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n+    pub use core::iter::{ExactSizeIterator};\n     pub use core::kinds::{Copy, Send, Sized, Sync};\n     pub use core::mem::drop;\n     pub use core::ops::{Drop, Fn, FnMut, FnOnce};"}, {"sha": "e3bf5d63b1dfde37713086a565e7159d43b6f1ca", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -1092,6 +1092,7 @@ struct SizeDirection {\n     dir: Direction,\n }\n \n+#[stable]\n impl Iterator for ElementSwaps {\n     type Item = (uint, uint);\n "}, {"sha": "9f3ab6dd5c0cb4fa249d84228154ea2447ce218d", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -165,13 +165,15 @@ enum DecompositionType {\n /// External iterator for a string's decomposition's characters.\n /// Use with the `std::iter` module.\n #[derive(Clone)]\n+#[unstable]\n pub struct Decompositions<'a> {\n     kind: DecompositionType,\n     iter: Chars<'a>,\n     buffer: Vec<(char, u8)>,\n     sorted: bool\n }\n \n+#[stable]\n impl<'a> Iterator for Decompositions<'a> {\n     type Item = char;\n \n@@ -253,6 +255,7 @@ enum RecompositionState {\n /// External iterator for a string's recomposition's characters.\n /// Use with the `std::iter` module.\n #[derive(Clone)]\n+#[unstable]\n pub struct Recompositions<'a> {\n     iter: Decompositions<'a>,\n     state: RecompositionState,\n@@ -261,6 +264,7 @@ pub struct Recompositions<'a> {\n     last_ccc: Option<u8>\n }\n \n+#[stable]\n impl<'a> Iterator for Recompositions<'a> {\n     type Item = char;\n \n@@ -348,10 +352,12 @@ impl<'a> Iterator for Recompositions<'a> {\n /// External iterator for a string's UTF16 codeunits.\n /// Use with the `std::iter` module.\n #[derive(Clone)]\n+#[unstable]\n pub struct Utf16Units<'a> {\n     encoder: Utf16Encoder<Chars<'a>>\n }\n \n+#[stable]\n impl<'a> Iterator for Utf16Units<'a> {\n     type Item = u16;\n "}, {"sha": "8ffca7e57b20eabe3f7a8e6d9f44d509a14074e1", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -711,7 +711,7 @@ impl fmt::Show for FromUtf16Error {\n     }\n }\n \n-#[experimental = \"waiting on FromIterator stabilization\"]\n+#[stable]\n impl FromIterator<char> for String {\n     fn from_iter<I:Iterator<Item=char>>(iterator: I) -> String {\n         let mut buf = String::new();\n@@ -720,7 +720,7 @@ impl FromIterator<char> for String {\n     }\n }\n \n-#[experimental = \"waiting on FromIterator stabilization\"]\n+#[stable]\n impl<'a> FromIterator<&'a str> for String {\n     fn from_iter<I:Iterator<Item=&'a str>>(iterator: I) -> String {\n         let mut buf = String::new();\n@@ -832,7 +832,7 @@ impl<H: hash::Writer> hash::Hash<H> for String {\n     }\n }\n \n-#[experimental = \"waiting on Add stabilization\"]\n+#[unstable = \"recent addition, needs more experience\"]\n impl<'a> Add<&'a str> for String {\n     type Output = String;\n \n@@ -864,7 +864,7 @@ impl ops::Slice<uint, str> for String {\n     }\n }\n \n-#[experimental = \"waiting on Deref stabilization\"]\n+#[stable]\n impl ops::Deref for String {\n     type Target = str;\n "}, {"sha": "b8bcba84cee0867599e63a6340b4bb66a3518229", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -1272,19 +1272,19 @@ impl<T> ops::SliceMut<uint, [T]> for Vec<T> {\n     }\n }\n \n-#[experimental = \"waiting on Deref stability\"]\n+#[stable]\n impl<T> ops::Deref for Vec<T> {\n     type Target = [T];\n \n     fn deref<'a>(&'a self) -> &'a [T] { self.as_slice() }\n }\n \n-#[experimental = \"waiting on DerefMut stability\"]\n+#[stable]\n impl<T> ops::DerefMut for Vec<T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut [T] { self.as_mut_slice() }\n }\n \n-#[experimental = \"waiting on FromIterator stability\"]\n+#[stable]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n     fn from_iter<I:Iterator<Item=T>>(mut iterator: I) -> Vec<T> {\n@@ -1414,6 +1414,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     }\n }\n \n+#[unstable = \"recent addition, needs more experience\"]\n impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {\n     type Output = Vec<T>;\n \n@@ -1425,6 +1426,7 @@ impl<'a, T: Clone> Add<&'a [T]> for Vec<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {\n         // This is (and should always remain) a no-op if the fields are\n@@ -1470,6 +1472,7 @@ impl<'a> fmt::Writer for Vec<u8> {\n /// A clone-on-write vector\n pub type CowVec<'a, T> = Cow<'a, Vec<T>, [T]>;\n \n+#[unstable]\n impl<'a, T> FromIterator<T> for CowVec<'a, T> where T: Clone {\n     fn from_iter<I: Iterator<Item=T>>(it: I) -> CowVec<'a, T> {\n         Cow::Owned(FromIterator::from_iter(it))\n@@ -1515,6 +1518,7 @@ impl<T> IntoIter<T> {\n     }\n }\n \n+#[stable]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n \n@@ -1551,6 +1555,7 @@ impl<T> Iterator for IntoIter<T> {\n     }\n }\n \n+#[stable]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back<'a>(&'a mut self) -> Option<T> {\n@@ -1574,9 +1579,11 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n     }\n }\n \n+#[stable]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n #[unsafe_destructor]\n+#[stable]\n impl<T> Drop for IntoIter<T> {\n     fn drop(&mut self) {\n         // destroy the remaining elements\n@@ -1598,6 +1605,7 @@ pub struct Drain<'a, T> {\n     marker: ContravariantLifetime<'a>,\n }\n \n+#[stable]\n impl<'a, T> Iterator for Drain<'a, T> {\n     type Item = T;\n \n@@ -1634,6 +1642,7 @@ impl<'a, T> Iterator for Drain<'a, T> {\n     }\n }\n \n+#[stable]\n impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n@@ -1657,9 +1666,11 @@ impl<'a, T> DoubleEndedIterator for Drain<'a, T> {\n     }\n }\n \n+#[stable]\n impl<'a, T> ExactSizeIterator for Drain<'a, T> {}\n \n #[unsafe_destructor]\n+#[stable]\n impl<'a, T> Drop for Drain<'a, T> {\n     fn drop(&mut self) {\n         // self.ptr == self.end == null if drop has already been called,\n@@ -1692,7 +1703,7 @@ impl<'a, T> Deref for DerefVec<'a, T> {\n \n // Prevent the inner `Vec<T>` from attempting to deallocate memory.\n #[unsafe_destructor]\n-#[experimental]\n+#[stable]\n impl<'a, T> Drop for DerefVec<'a, T> {\n     fn drop(&mut self) {\n         self.x.len = 0;"}, {"sha": "63b3be00f55f5fe79608a0c294e8c702e384f19d", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -191,6 +191,7 @@ impl<'a, T, Sized? B> Cow<'a, T, B> where B: ToOwned<T> {\n     }\n }\n \n+#[stable]\n impl<'a, T, Sized? B> Deref for Cow<'a, T, B> where B: ToOwned<T>  {\n     type Target = B;\n "}, {"sha": "fd18d6ac3f3b409e389b599e5292343feccb720f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -419,7 +419,7 @@ pub struct Ref<'b, T:'b> {\n     _borrow: BorrowRef<'b>,\n }\n \n-#[unstable = \"waiting for `Deref` to become stable\"]\n+#[stable]\n impl<'b, T> Deref for Ref<'b, T> {\n     type Target = T;\n \n@@ -477,7 +477,7 @@ pub struct RefMut<'b, T:'b> {\n     _borrow: BorrowRefMut<'b>,\n }\n \n-#[unstable = \"waiting for `Deref` to become stable\"]\n+#[stable]\n impl<'b, T> Deref for RefMut<'b, T> {\n     type Target = T;\n \n@@ -487,7 +487,7 @@ impl<'b, T> Deref for RefMut<'b, T> {\n     }\n }\n \n-#[unstable = \"waiting for `DerefMut` to become stable\"]\n+#[stable]\n impl<'b, T> DerefMut for RefMut<'b, T> {\n     #[inline]\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {"}, {"sha": "caac894c0daa327c5ccf98edb285de9014b7fa08", "filename": "src/libcore/char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -314,6 +314,7 @@ pub struct EscapeUnicode {\n }\n \n #[derive(Clone)]\n+#[unstable]\n enum EscapeUnicodeState {\n     Backslash,\n     Type,\n@@ -375,6 +376,7 @@ pub struct EscapeDefault {\n }\n \n #[derive(Clone)]\n+#[unstable]\n enum EscapeDefaultState {\n     Backslash(char),\n     Char(char),"}, {"sha": "e5753f6cc2e7857e6e76c3a7cc3d4eaa5e151b89", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -2401,7 +2401,7 @@ impl<A, St, F> Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n     }\n }\n \n-#[experimental]\n+#[stable]\n impl<A, St, F> Iterator for Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n     type Item = A;\n "}, {"sha": "74702c66f7ba58e8bb4ee426764df38fbdfc8cd7", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -984,6 +984,7 @@ pub struct Range<Idx> {\n \n // FIXME(#19391) needs a snapshot\n //impl<Idx: Clone + Step<T=uint>> Iterator<Idx> for Range<Idx> {\n+#[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> Iterator for Range<Idx> {\n     type Item = Idx;\n \n@@ -1008,6 +1009,7 @@ impl<Idx: Clone + Step> Iterator for Range<Idx> {\n     }\n }\n \n+#[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n     #[inline]\n     fn next_back(&mut self) -> Option<Idx> {\n@@ -1020,6 +1022,7 @@ impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n     }\n }\n \n+#[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n \n /// A range which is only bounded below.\n@@ -1031,6 +1034,7 @@ pub struct RangeFrom<Idx> {\n     pub start: Idx,\n }\n \n+#[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> Iterator for RangeFrom<Idx> {\n     type Item = Idx;\n "}, {"sha": "39d0f024d4d4143f63c1419065d42481b8b5beb8", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -807,6 +807,7 @@ impl<A> ExactSizeIterator for Item<A> {}\n #[stable]\n pub struct Iter<'a, A: 'a> { inner: Item<&'a A> }\n \n+#[stable]\n impl<'a, A> Iterator for Iter<'a, A> {\n     type Item = &'a A;\n \n@@ -816,11 +817,13 @@ impl<'a, A> Iterator for Iter<'a, A> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n+#[stable]\n impl<'a, A> DoubleEndedIterator for Iter<'a, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a A> { self.inner.next_back() }\n }\n \n+#[stable]\n impl<'a, A> ExactSizeIterator for Iter<'a, A> {}\n \n #[stable]\n@@ -834,6 +837,7 @@ impl<'a, A> Clone for Iter<'a, A> {\n #[stable]\n pub struct IterMut<'a, A: 'a> { inner: Item<&'a mut A> }\n \n+#[stable]\n impl<'a, A> Iterator for IterMut<'a, A> {\n     type Item = &'a mut A;\n \n@@ -843,17 +847,20 @@ impl<'a, A> Iterator for IterMut<'a, A> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n+#[stable]\n impl<'a, A> DoubleEndedIterator for IterMut<'a, A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut A> { self.inner.next_back() }\n }\n \n+#[stable]\n impl<'a, A> ExactSizeIterator for IterMut<'a, A> {}\n \n /// An iterator over the item contained inside an Option.\n #[stable]\n pub struct IntoIter<A> { inner: Item<A> }\n \n+#[stable]\n impl<A> Iterator for IntoIter<A> {\n     type Item = A;\n \n@@ -863,11 +870,13 @@ impl<A> Iterator for IntoIter<A> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n }\n \n+#[stable]\n impl<A> DoubleEndedIterator for IntoIter<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.inner.next_back() }\n }\n \n+#[stable]\n impl<A> ExactSizeIterator for IntoIter<A> {}\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "e88cb73c8a9b7f6f8d7b6f1a0a6c1207febc3f0d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -43,8 +43,7 @@ pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use iter::{Extend, IteratorExt};\n pub use iter::{Iterator, DoubleEndedIterator};\n-pub use iter::{IteratorCloneExt, CloneIteratorExt};\n-pub use iter::{IteratorOrdExt, ExactSizeIterator};\n+pub use iter::{ExactSizeIterator};\n pub use option::Option::{self, Some, None};\n pub use ptr::{PtrExt, MutPtrExt};\n pub use result::Result::{self, Ok, Err};"}, {"sha": "7293ed6455b084aa74cd5932a0b494b75cc99ec8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -807,6 +807,7 @@ impl<T, E> AsSlice<T> for Result<T, E> {\n #[stable]\n pub struct Iter<'a, T: 'a> { inner: Option<&'a T> }\n \n+#[stable]\n impl<'a, T> Iterator for Iter<'a, T> {\n     type Item = &'a T;\n \n@@ -819,11 +820,13 @@ impl<'a, T> Iterator for Iter<'a, T> {\n     }\n }\n \n+#[stable]\n impl<'a, T> DoubleEndedIterator for Iter<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a T> { self.inner.take() }\n }\n \n+#[stable]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n impl<'a, T> Clone for Iter<'a, T> {\n@@ -834,6 +837,7 @@ impl<'a, T> Clone for Iter<'a, T> {\n #[stable]\n pub struct IterMut<'a, T: 'a> { inner: Option<&'a mut T> }\n \n+#[stable]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n \n@@ -846,17 +850,20 @@ impl<'a, T> Iterator for IterMut<'a, T> {\n     }\n }\n \n+#[stable]\n impl<'a, T> DoubleEndedIterator for IterMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut T> { self.inner.take() }\n }\n \n+#[stable]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n /// An iterator over the value in a `Ok` variant of a `Result`.\n #[stable]\n pub struct IntoIter<T> { inner: Option<T> }\n \n+#[stable]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n \n@@ -869,11 +876,13 @@ impl<T> Iterator for IntoIter<T> {\n     }\n }\n \n+#[stable]\n impl<T> DoubleEndedIterator for IntoIter<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> { self.inner.take() }\n }\n \n+#[stable]\n impl<T> ExactSizeIterator for IntoIter<T> {}\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "7161bfdcd5a9ed02e4a487b5d8e060b112dc78ba", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -672,7 +672,7 @@ impl<'a, T> Default for &'a [T] {\n // The shared definition of the `Iter` and `IterMut` iterators\n macro_rules! iterator {\n     (struct $name:ident -> $ptr:ty, $elem:ty) => {\n-        #[experimental = \"needs review\"]\n+        #[stable]\n         impl<'a, T> Iterator for $name<'a, T> {\n             type Item = $elem;\n \n@@ -710,7 +710,7 @@ macro_rules! iterator {\n             }\n         }\n \n-        #[experimental = \"needs review\"]\n+        #[stable]\n         impl<'a, T> DoubleEndedIterator for $name<'a, T> {\n             #[inline]\n             fn next_back(&mut self) -> Option<$elem> {\n@@ -793,15 +793,15 @@ impl<'a,T> Copy for Iter<'a,T> {}\n \n iterator!{struct Iter -> *const T, &'a T}\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> ExactSizeIterator for Iter<'a, T> {}\n \n #[stable]\n impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { *self }\n }\n \n-#[experimental = \"needs review\"]\n+#[experimental = \"trait is experimental\"]\n impl<'a, T> RandomAccessIterator for Iter<'a, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -887,7 +887,7 @@ impl<'a, T> IterMut<'a, T> {\n \n iterator!{struct IterMut -> *mut T, &'a mut T}\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n \n /// An internal abstraction over the splitting iterators, so that\n@@ -919,7 +919,7 @@ impl<'a, T, P> Clone for Split<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a [T];\n \n@@ -947,7 +947,7 @@ impl<'a, T, P> Iterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T, P> DoubleEndedIterator for Split<'a, T, P> where P: FnMut(&T) -> bool {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -992,7 +992,7 @@ impl<'a, T, P> SplitIter for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T, P> Iterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     type Item = &'a mut [T];\n \n@@ -1027,7 +1027,7 @@ impl<'a, T, P> Iterator for SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T, P> DoubleEndedIterator for SplitMut<'a, T, P> where\n     P: FnMut(&T) -> bool,\n {\n@@ -1060,7 +1060,6 @@ struct GenericSplitN<I> {\n     invert: bool\n }\n \n-#[experimental = \"needs review\"]\n impl<T, I: SplitIter + Iterator<Item=T>> Iterator for GenericSplitN<I> {\n     type Item = T;\n \n@@ -1113,6 +1112,7 @@ pub struct RSplitNMut<'a, T: 'a, P> where P: FnMut(&T) -> bool {\n \n macro_rules! forward_iterator {\n     ($name:ident: $elem:ident, $iter_of:ty) => {\n+        #[stable]\n         impl<'a, $elem, P> Iterator for $name<'a, $elem, P> where\n             P: FnMut(&T) -> bool\n         {\n@@ -1144,6 +1144,7 @@ pub struct Windows<'a, T:'a> {\n     size: uint\n }\n \n+#[stable]\n impl<'a, T> Iterator for Windows<'a, T> {\n     type Item = &'a [T];\n \n@@ -1181,7 +1182,7 @@ pub struct Chunks<'a, T:'a> {\n     size: uint\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> Iterator for Chunks<'a, T> {\n     type Item = &'a [T];\n \n@@ -1210,7 +1211,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a [T]> {\n@@ -1226,7 +1227,7 @@ impl<'a, T> DoubleEndedIterator for Chunks<'a, T> {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[experimental = \"trait is experimental\"]\n impl<'a, T> RandomAccessIterator for Chunks<'a, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1256,7 +1257,7 @@ pub struct ChunksMut<'a, T:'a> {\n     chunk_size: uint\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> Iterator for ChunksMut<'a, T> {\n     type Item = &'a mut [T];\n \n@@ -1286,7 +1287,7 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n     }\n }\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> DoubleEndedIterator for ChunksMut<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a mut [T]> {"}, {"sha": "a3c6a3fe470c3096c3905791e34b15b38318149a", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -37,18 +37,16 @@ use uint;\n macro_rules! delegate_iter {\n     (exact $te:ty in $ti:ty) => {\n         delegate_iter!{$te in $ti}\n+        #[stable]\n         impl<'a> ExactSizeIterator for $ti {\n-            #[inline]\n-            fn rposition<P>(&mut self, predicate: P) -> Option<uint> where P: FnMut($te) -> bool{\n-                self.0.rposition(predicate)\n-            }\n             #[inline]\n             fn len(&self) -> uint {\n                 self.0.len()\n             }\n         }\n     };\n     ($te:ty in $ti:ty) => {\n+        #[stable]\n         impl<'a> Iterator for $ti {\n             type Item = $te;\n \n@@ -61,6 +59,7 @@ macro_rules! delegate_iter {\n                 self.0.size_hint()\n             }\n         }\n+        #[stable]\n         impl<'a> DoubleEndedIterator for $ti {\n             #[inline]\n             fn next_back(&mut self) -> Option<$te> {\n@@ -69,6 +68,7 @@ macro_rules! delegate_iter {\n         }\n     };\n     (pattern $te:ty in $ti:ty) => {\n+        #[stable]\n         impl<'a, P: CharEq> Iterator for $ti {\n             type Item = $te;\n \n@@ -81,6 +81,7 @@ macro_rules! delegate_iter {\n                 self.0.size_hint()\n             }\n         }\n+        #[stable]\n         impl<'a, P: CharEq> DoubleEndedIterator for $ti {\n             #[inline]\n             fn next_back(&mut self) -> Option<$te> {\n@@ -89,6 +90,7 @@ macro_rules! delegate_iter {\n         }\n     };\n     (pattern forward $te:ty in $ti:ty) => {\n+        #[stable]\n         impl<'a, P: CharEq> Iterator for $ti {\n             type Item = $te;\n \n@@ -275,6 +277,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n     }\n }\n \n+#[stable]\n impl<'a> Iterator for Chars<'a> {\n     type Item = char;\n \n@@ -320,6 +323,7 @@ impl<'a> Iterator for Chars<'a> {\n     }\n }\n \n+#[stable]\n impl<'a> DoubleEndedIterator for Chars<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<char> {\n@@ -356,11 +360,13 @@ impl<'a> DoubleEndedIterator for Chars<'a> {\n /// External iterator for a string's characters and their byte offsets.\n /// Use with the `std::iter` module.\n #[derive(Clone)]\n+#[stable]\n pub struct CharIndices<'a> {\n     front_offset: uint,\n     iter: Chars<'a>,\n }\n \n+#[stable]\n impl<'a> Iterator for CharIndices<'a> {\n     type Item = (uint, char);\n \n@@ -384,6 +390,7 @@ impl<'a> Iterator for CharIndices<'a> {\n     }\n }\n \n+#[stable]\n impl<'a> DoubleEndedIterator for CharIndices<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(uint, char)> {\n@@ -465,6 +472,7 @@ impl<'a, Sep> CharSplits<'a, Sep> {\n     }\n }\n \n+#[stable]\n impl<'a, Sep: CharEq> Iterator for CharSplits<'a, Sep> {\n     type Item = &'a str;\n \n@@ -499,6 +507,7 @@ impl<'a, Sep: CharEq> Iterator for CharSplits<'a, Sep> {\n     }\n }\n \n+#[stable]\n impl<'a, Sep: CharEq> DoubleEndedIterator for CharSplits<'a, Sep> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> {\n@@ -540,6 +549,7 @@ impl<'a, Sep: CharEq> DoubleEndedIterator for CharSplits<'a, Sep> {\n     }\n }\n \n+#[stable]\n impl<'a, Sep: CharEq> Iterator for CharSplitsN<'a, Sep> {\n     type Item = &'a str;\n \n@@ -865,6 +875,7 @@ pub struct SplitStr<'a> {\n     finished: bool\n }\n \n+#[stable]\n impl<'a> Iterator for MatchIndices<'a> {\n     type Item = (uint, uint);\n \n@@ -881,6 +892,7 @@ impl<'a> Iterator for MatchIndices<'a> {\n     }\n }\n \n+#[stable]\n impl<'a> Iterator for SplitStr<'a> {\n     type Item = &'a str;\n \n@@ -1586,26 +1598,30 @@ impl<'a> Default for &'a str {\n     fn default() -> &'a str { \"\" }\n }\n \n+#[stable]\n impl<'a> Iterator for Lines<'a> {\n     type Item = &'a str;\n \n     #[inline]\n     fn next(&mut self) -> Option<&'a str> { self.inner.next() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n-}\n+\n+#[stable]}\n impl<'a> DoubleEndedIterator for Lines<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> { self.inner.next_back() }\n-}\n+\n+#[stable]}\n impl<'a> Iterator for LinesAny<'a> {\n     type Item = &'a str;\n \n     #[inline]\n     fn next(&mut self) -> Option<&'a str> { self.inner.next() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.inner.size_hint() }\n-}\n+\n+#[stable]}\n impl<'a> DoubleEndedIterator for LinesAny<'a> {\n     #[inline]\n     fn next_back(&mut self) -> Option<&'a str> { self.inner.next_back() }"}, {"sha": "c44d6c34cd94608a365398acca31aee454e86d8d", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -18,7 +18,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, IteratorExt, IteratorCloneExt, FromIterator, Map, Chain, Extend};\n+use iter::{Iterator, IteratorExt, FromIterator, Map, Chain, Extend};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n use option::Option::{Some, None, self};\n use result::Result::{Ok, Err};"}, {"sha": "c4e37264e2aeeb2d3ff1a83d58be901a2cc8e24a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -14,7 +14,7 @@\n \n use cmp;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::ExactSizeIterator;\n+use iter::{IteratorExt, ExactSizeIterator};\n use ops::Drop;\n use option::Option;\n use option::Option::{Some, None};"}, {"sha": "9e9a483e1a5e3f510922eb6ae9b652eda2848162", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -25,11 +25,9 @@\n #[stable] #[doc(no_inline)] pub use char::CharExt;\n #[stable] #[doc(no_inline)] pub use clone::Clone;\n #[stable] #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n-#[stable] #[doc(no_inline)] pub use iter::CloneIteratorExt;\n #[stable] #[doc(no_inline)] pub use iter::DoubleEndedIterator;\n #[stable] #[doc(no_inline)] pub use iter::ExactSizeIterator;\n #[stable] #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n-#[stable] #[doc(no_inline)] pub use iter::{IteratorCloneExt, IteratorOrdExt};\n #[stable] #[doc(no_inline)] pub use option::Option::{self, Some, None};\n #[stable] #[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n #[stable] #[doc(no_inline)] pub use result::Result::{self, Ok, Err};"}, {"sha": "e97be51fdbc25af6ccc56aec377ee00aee43173a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -188,6 +188,7 @@ impl Condvar {\n     pub fn notify_all(&self) { unsafe { self.inner.inner.notify_all() } }\n }\n \n+#[stable]\n impl Drop for Condvar {\n     fn drop(&mut self) {\n         unsafe { self.inner.inner.destroy() }"}, {"sha": "09ff8f440f33ea6c492f69c8045b00224148ce11", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -657,6 +657,7 @@ impl<T: Send> Clone for Sender<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for Sender<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n@@ -720,6 +721,7 @@ impl<T: Send> Clone for SyncSender<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n         unsafe { (*self.inner.get()).drop_chan(); }\n@@ -935,14 +937,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<'a, T: Send> Iterator for Iter<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for Receiver<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {"}, {"sha": "9ad24a5a11ec5dfb61080a507b4d4a61920a8198", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -138,6 +138,7 @@ impl<T: Send> Queue<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {"}, {"sha": "6b3dd89f33b07fcc71cc4a4a02cdfd7c4072ec2a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -228,6 +228,7 @@ impl<T: Send> Mutex<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n@@ -291,20 +292,23 @@ impl<'mutex, T> MutexGuard<'mutex, T> {\n     }\n }\n \n+#[stable]\n impl<'mutex, T> Deref for MutexGuard<'mutex, T> {\n     type Target = T;\n \n     fn deref<'a>(&'a self) -> &'a T {\n         unsafe { &*self.__data.get() }\n     }\n }\n+#[stable]\n impl<'mutex, T> DerefMut for MutexGuard<'mutex, T> {\n     fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n         unsafe { &mut *self.__data.get() }\n     }\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<'a, T> Drop for MutexGuard<'a, T> {\n     #[inline]\n     fn drop(&mut self) {"}, {"sha": "c8ca1b02aab1a29256aa756b03e4138fa7e11a9c", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -228,6 +228,7 @@ impl<T: Send + Sync> RWLock<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T> Drop for RWLock<T> {\n     fn drop(&mut self) {\n         unsafe { self.inner.lock.destroy() }\n@@ -327,30 +328,35 @@ impl<'rwlock, T> RWLockWriteGuard<'rwlock, T> {\n     }\n }\n \n+#[stable]\n impl<'rwlock, T> Deref for RWLockReadGuard<'rwlock, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T { unsafe { &*self.__data.get() } }\n }\n+#[stable]\n impl<'rwlock, T> Deref for RWLockWriteGuard<'rwlock, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T { unsafe { &*self.__data.get() } }\n }\n+#[stable]\n impl<'rwlock, T> DerefMut for RWLockWriteGuard<'rwlock, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__data.get() }\n     }\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<'a, T> Drop for RWLockReadGuard<'a, T> {\n     fn drop(&mut self) {\n         unsafe { self.__lock.lock.read_unlock(); }\n     }\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<'a, T> Drop for RWLockWriteGuard<'a, T> {\n     fn drop(&mut self) {\n         self.__lock.poison.done(&self.__poison);"}, {"sha": "505819fbf8a246cf4ee618b64e89cb921dd8d8a7", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -99,6 +99,7 @@ impl Semaphore {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<'a> Drop for SemaphoreGuard<'a> {\n     fn drop(&mut self) {\n         self.sem.release();"}, {"sha": "cc82d38ae2af1f01140701dd4e6894296fc594d6", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6f4a03d12d97162e2775c14ab006d355b04126d/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=c6f4a03d12d97162e2775c14ab006d355b04126d", "patch": "@@ -423,6 +423,7 @@ impl<T: Send> JoinGuard<T> {\n }\n \n #[unsafe_destructor]\n+#[stable]\n impl<T: Send> Drop for JoinGuard<T> {\n     fn drop(&mut self) {\n         if !self.joined {"}]}