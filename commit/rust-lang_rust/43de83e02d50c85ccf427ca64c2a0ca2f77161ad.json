{"sha": "43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "node_id": "C_kwDOAAsO6NoAKDQzZGU4M2UwMmQ1MGM4NWNjZjQyN2NhNjRjMmEwY2EyZjc3MTYxYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T14:54:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T14:54:23Z"}, "message": "Auto merge of #2600 - saethlin:ice, r=RalfJung\n\nFix ICE when trying to GC a Stack with an unknown bottom\n\nFixes https://github.com/rust-lang/rust/issues/103167\n\n`@RalfJung` I prefer this approach because the whole GC system is sloppy already in order to be efficient (doesn't run often, ignores small stacks) so a bit more imprecision for a simple implementation seems worth it to me. But I'm of course willing to be convinced otherwise.", "tree": {"sha": "bb2c9b50e6954a833c95f6c914e0da070c379ef4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2c9b50e6954a833c95f6c914e0da070c379ef4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "html_url": "https://github.com/rust-lang/rust/commit/43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43de83e02d50c85ccf427ca64c2a0ca2f77161ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4207f9e088dd574827aa35c3273cceee712820a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4207f9e088dd574827aa35c3273cceee712820a9", "html_url": "https://github.com/rust-lang/rust/commit/4207f9e088dd574827aa35c3273cceee712820a9"}, {"sha": "e7faf046c0aca0438d948461b8a39046281248ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7faf046c0aca0438d948461b8a39046281248ea", "html_url": "https://github.com/rust-lang/rust/commit/e7faf046c0aca0438d948461b8a39046281248ea"}], "stats": {"total": 33, "additions": 29, "deletions": 4}, "files": [{"sha": "aa549e34c5f65cf5d07421c820731a96b9617d76", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43de83e02d50c85ccf427ca64c2a0ca2f77161ad/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de83e02d50c85ccf427ca64c2a0ca2f77161ad/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "patch": "@@ -43,10 +43,14 @@ impl Stack {\n     pub fn retain(&mut self, tags: &FxHashSet<SbTag>) {\n         let mut first_removed = None;\n \n-        // For stacks with a known bottom, we never consider removing the bottom-most tag, because\n-        // that is the base tag which exists whether or not there are any pointers to the\n-        // allocation.\n-        let mut read_idx = if self.unknown_bottom.is_some() { 0 } else { 1 };\n+        // We never consider removing the bottom-most tag. For stacks without an unknown\n+        // bottom this preserves the base tag.\n+        // Note that the algorithm below is based on considering the tag at read_idx - 1,\n+        // so precisely considering the tag at index 0 for removal when we have an unknown\n+        // bottom would complicate the implementation. The simplification of not considering\n+        // it does not have a significant impact on the degree to which the GC mititages\n+        // memory growth.\n+        let mut read_idx = 1;\n         let mut write_idx = read_idx;\n         while read_idx < self.borrows.len() {\n             let left = self.borrows[read_idx - 1];"}, {"sha": "e62ee528686d82438588f8f17274e0a876811ca0", "filename": "src/tools/miri/tests/pass/stacked-borrows/unknown-bottom-gc.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/43de83e02d50c85ccf427ca64c2a0ca2f77161ad/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Funknown-bottom-gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43de83e02d50c85ccf427ca64c2a0ca2f77161ad/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Funknown-bottom-gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fstacked-borrows%2Funknown-bottom-gc.rs?ref=43de83e02d50c85ccf427ca64c2a0ca2f77161ad", "patch": "@@ -0,0 +1,21 @@\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![feature(strict_provenance)]\n+\n+use std::ptr;\n+\n+fn main() {\n+    let mut v = 1u8;\n+    let ptr = &mut v as *mut u8;\n+\n+    // Expose the allocation and use the exposed pointer, creating an unknown bottom\n+    unsafe {\n+        let p: *mut u8 = ptr::from_exposed_addr::<u8>(ptr.expose_addr()) as *mut u8;\n+        *p = 1;\n+    }\n+\n+    // Pile on a lot of SharedReadOnly at the top of the stack\n+    let r = &v;\n+    for _ in 0..1024 {\n+        let _x = &*r;\n+    }\n+}"}]}