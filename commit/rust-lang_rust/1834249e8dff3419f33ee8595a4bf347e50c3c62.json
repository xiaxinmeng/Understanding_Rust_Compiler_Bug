{"sha": "1834249e8dff3419f33ee8595a4bf347e50c3c62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzQyNDllOGRmZjM0MTlmMzNlZTg1OTVhNGJmMzQ3ZTUwYzNjNjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-14T23:02:02Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-09-15T20:38:41Z"}, "message": "libcore: add find_ref/get_ref to SendMap trait", "tree": {"sha": "97ae851772c0d0a8ea5d35a96bb0f2678e488708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ae851772c0d0a8ea5d35a96bb0f2678e488708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1834249e8dff3419f33ee8595a4bf347e50c3c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1834249e8dff3419f33ee8595a4bf347e50c3c62", "html_url": "https://github.com/rust-lang/rust/commit/1834249e8dff3419f33ee8595a4bf347e50c3c62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1834249e8dff3419f33ee8595a4bf347e50c3c62/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e317de547851bdf714ada4d21b41f5b989d4ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e317de547851bdf714ada4d21b41f5b989d4ed", "html_url": "https://github.com/rust-lang/rust/commit/10e317de547851bdf714ada4d21b41f5b989d4ed"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "5e8147c55c789a6854a9e49ee334319a575dba40", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1834249e8dff3419f33ee8595a4bf347e50c3c62/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1834249e8dff3419f33ee8595a4bf347e50c3c62/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=1834249e8dff3419f33ee8595a4bf347e50c3c62", "patch": "@@ -22,8 +22,8 @@ trait SendMap<K:Eq Hash, V: Copy> {\n     fn each_value_ref(&self, blk: fn(v: &V) -> bool);\n     fn find(&const self, k: &K) -> Option<V>;\n     fn get(&const self, k: &K) -> V;\n-    fn with_find_ref<T>(&const self, k: &K, blk: fn(Option<&V>) -> T) -> T;\n-    fn with_get_ref<T>(&const self, k: &K, blk: fn(v: &V) -> T) -> T;\n+    fn find_ref(&self, k: &K) -> Option<&self/V>;\n+    fn get_ref(&self, k: &K) -> &self/V;\n }\n \n /// Open addressing with linear probing.\n@@ -304,6 +304,13 @@ mod linear {\n             }\n         }\n \n+        fn get_ref(&self, k: &K) -> &self/V {\n+            match self.find_ref(k) {\n+                Some(v) => v,\n+                None => fail fmt!(\"No entry found for key: %?\", k),\n+            }\n+        }\n+\n         fn each_ref(&self, blk: fn(k: &K, v: &V) -> bool) {\n             for vec::each(self.buckets) |slot| {\n                 let mut broke = false;"}]}