{"sha": "83573a377602a27dd65c8b564391e5706d5d76be", "node_id": "C_kwDOAAsO6NoAKDgzNTczYTM3NzYwMmEyN2RkNjVjOGI1NjQzOTFlNTcwNmQ1ZDc2YmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-29T19:19:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T19:19:48Z"}, "message": "Rollup merge of #109554 - MU001999:master, r=WaffleLapkin\n\nSuggest ..= when someone tries to create an overflowing range\n\nFixes #109529", "tree": {"sha": "d6abcea1a5e2268e86198701740c36f7ce6cf7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6abcea1a5e2268e86198701740c36f7ce6cf7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83573a377602a27dd65c8b564391e5706d5d76be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkJI9UCRBK7hj4Ov3rIwAAqU0IABRVVpjFtNkl+q8u4LtbneXU\nONTE0DRK1ajIR06a2TinNhQcaMzNLrudqgTT7GrA5xPSkAyZPWu1VKNcb2U0ZL9Z\n6o8IUK0VQOyaWQT/WJ2IZRnWJqc7ABivblJJzbB5TVrlsgEb0OV7SYuzdjm0l8Z8\nRyz2UcLFSpsgtiU5jN9i/U5M7svy1+thhOPx/JmtZBXLofi7HSA0o9bLQ7HLpEN2\nCyFlGr14ipoHikxIukaD9lI+WBQgYNK8twf5cwCBA4lEGBmWUiyNTtLqf/vOV5gu\nSl+aY7eKeKGgroa3BIVR9ScpsV4Zh93qWp3TuA2BY7w0b6bfwpS4L6Ep0Ar2eTY=\n=BUy1\n-----END PGP SIGNATURE-----\n", "payload": "tree d6abcea1a5e2268e86198701740c36f7ce6cf7b4\nparent 9f28c983575e57e8692ce9429544d625b624962c\nparent dde26b31b6b625496e8dc0933e231c27f35b8933\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680117588 +0200\ncommitter GitHub <noreply@github.com> 1680117588 +0200\n\nRollup merge of #109554 - MU001999:master, r=WaffleLapkin\n\nSuggest ..= when someone tries to create an overflowing range\n\nFixes #109529\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83573a377602a27dd65c8b564391e5706d5d76be", "html_url": "https://github.com/rust-lang/rust/commit/83573a377602a27dd65c8b564391e5706d5d76be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83573a377602a27dd65c8b564391e5706d5d76be/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f28c983575e57e8692ce9429544d625b624962c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f28c983575e57e8692ce9429544d625b624962c", "html_url": "https://github.com/rust-lang/rust/commit/9f28c983575e57e8692ce9429544d625b624962c"}, {"sha": "dde26b31b6b625496e8dc0933e231c27f35b8933", "url": "https://api.github.com/repos/rust-lang/rust/commits/dde26b31b6b625496e8dc0933e231c27f35b8933", "html_url": "https://github.com/rust-lang/rust/commit/dde26b31b6b625496e8dc0933e231c27f35b8933"}], "stats": {"total": 109, "additions": 94, "deletions": 15}, "files": [{"sha": "5b7e994e035f4f4474537801a1ba50901de993f2", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -197,7 +197,9 @@ lint_drop_glue =\n     types that do not implement `Drop` can still have drop glue, consider instead using `{$needs_drop}` to detect whether a type is trivially dropped\n \n lint_range_endpoint_out_of_range = range endpoint is out of range for `{$ty}`\n-    .suggestion = use an inclusive range instead\n+\n+lint_range_use_inclusive_range = use an inclusive range instead\n+\n \n lint_overflowing_bin_hex = literal out of range for `{$ty}`\n     .negative_note = the literal `{$lit}` (decimal `{$dec}`) does not fit into the type `{$ty}`"}, {"sha": "8ec4c2b3d463ab6b51cd9df703a7392bf504426f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -1210,11 +1210,33 @@ impl<'a> DecorateLint<'a, ()> for DropGlue<'_> {\n #[diag(lint_range_endpoint_out_of_range)]\n pub struct RangeEndpointOutOfRange<'a> {\n     pub ty: &'a str,\n-    #[suggestion(code = \"{start}..={literal}{suffix}\", applicability = \"machine-applicable\")]\n-    pub suggestion: Span,\n-    pub start: String,\n-    pub literal: u128,\n-    pub suffix: &'a str,\n+    #[subdiagnostic]\n+    pub sub: UseInclusiveRange<'a>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UseInclusiveRange<'a> {\n+    #[suggestion(\n+        lint_range_use_inclusive_range,\n+        code = \"{start}..={literal}{suffix}\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    WithoutParen {\n+        #[primary_span]\n+        sugg: Span,\n+        start: String,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n+    #[multipart_suggestion(lint_range_use_inclusive_range, applicability = \"machine-applicable\")]\n+    WithParen {\n+        #[suggestion_part(code = \"=\")]\n+        eq_sugg: Span,\n+        #[suggestion_part(code = \"{literal}{suffix}\")]\n+        lit_sugg: Span,\n+        literal: u128,\n+        suffix: &'a str,\n+    },\n }\n \n #[derive(LintDiagnostic)]"}, {"sha": "f6bca7045c846cca4ea466841880c483a839e4bd", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -4,7 +4,8 @@ use crate::{\n         AtomicOrderingFence, AtomicOrderingLoad, AtomicOrderingStore, ImproperCTypes,\n         InvalidAtomicOrderingDiag, OnlyCastu8ToChar, OverflowingBinHex, OverflowingBinHexSign,\n         OverflowingBinHexSub, OverflowingInt, OverflowingIntHelp, OverflowingLiteral,\n-        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, VariantSizeDifferencesDiag,\n+        OverflowingUInt, RangeEndpointOutOfRange, UnusedComparisons, UseInclusiveRange,\n+        VariantSizeDifferencesDiag,\n     },\n };\n use crate::{LateContext, LateLintPass, LintContext};\n@@ -136,6 +137,14 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     expr: &'tcx hir::Expr<'tcx>,\n     ty: &str,\n ) -> bool {\n+    // Look past casts to support cases like `0..256 as u8`\n+    let (expr, lit_span) = if let Node::Expr(par_expr) = cx.tcx.hir().get(cx.tcx.hir().parent_id(expr.hir_id))\n+      && let ExprKind::Cast(_, _) = par_expr.kind {\n+        (par_expr, expr.span)\n+    } else {\n+        (expr, expr.span)\n+    };\n+\n     // We only want to handle exclusive (`..`) ranges,\n     // which are represented as `ExprKind::Struct`.\n     let par_id = cx.tcx.hir().parent_id(expr.hir_id);\n@@ -155,7 +164,6 @@ fn lint_overflowing_range_endpoint<'tcx>(\n     if !(eps[1].expr.hir_id == expr.hir_id && lit_val - 1 == max) {\n         return false;\n     };\n-    let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n \n     use rustc_ast::{LitIntType, LitKind};\n     let suffix = match lit.node {\n@@ -164,16 +172,28 @@ fn lint_overflowing_range_endpoint<'tcx>(\n         LitKind::Int(_, LitIntType::Unsuffixed) => \"\",\n         _ => bug!(),\n     };\n-    cx.emit_spanned_lint(\n-        OVERFLOWING_LITERALS,\n-        struct_expr.span,\n-        RangeEndpointOutOfRange {\n-            ty,\n-            suggestion: struct_expr.span,\n+\n+    let sub_sugg = if expr.span.lo() == lit_span.lo() {\n+        let Ok(start) = cx.sess().source_map().span_to_snippet(eps[0].span) else { return false };\n+        UseInclusiveRange::WithoutParen {\n+            sugg: struct_expr.span.shrink_to_lo().to(lit_span.shrink_to_hi()),\n             start,\n             literal: lit_val - 1,\n             suffix,\n-        },\n+        }\n+    } else {\n+        UseInclusiveRange::WithParen {\n+            eq_sugg: expr.span.shrink_to_lo(),\n+            lit_sugg: lit_span,\n+            literal: lit_val - 1,\n+            suffix,\n+        }\n+    };\n+\n+    cx.emit_spanned_lint(\n+        OVERFLOWING_LITERALS,\n+        struct_expr.span,\n+        RangeEndpointOutOfRange { ty, sub: sub_sugg },\n     );\n \n     // We've just emitted a lint, special cased for `(...)..MAX+1` ranges,"}, {"sha": "5ad489073eead94c271652ee85f3d24f21f7934d", "filename": "tests/ui/lint/issue-109529.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.fixed?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _ in 0..=255 as u8 {} //~ ERROR range endpoint is out of range\n+    for _ in 0..=(255 as u8) {} //~ ERROR range endpoint is out of range\n+}"}, {"sha": "383d7bc4cf31f1fc50aee6fb6e3636bf09b672e0", "filename": "tests/ui/lint/issue-109529.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.rs?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    for _ in 0..256 as u8 {} //~ ERROR range endpoint is out of range\n+    for _ in 0..(256 as u8) {} //~ ERROR range endpoint is out of range\n+}"}, {"sha": "9e857d1b0ab5dd3564b3e2348d7c2ae7e1ab8a61", "filename": "tests/ui/lint/issue-109529.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83573a377602a27dd65c8b564391e5706d5d76be/tests%2Fui%2Flint%2Fissue-109529.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fissue-109529.stderr?ref=83573a377602a27dd65c8b564391e5706d5d76be", "patch": "@@ -0,0 +1,23 @@\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:4:14\n+   |\n+LL |     for _ in 0..256 as u8 {}\n+   |              ------^^^^^^\n+   |              |\n+   |              help: use an inclusive range instead: `0..=255`\n+   |\n+   = note: `#[deny(overflowing_literals)]` on by default\n+\n+error: range endpoint is out of range for `u8`\n+  --> $DIR/issue-109529.rs:5:14\n+   |\n+LL |     for _ in 0..(256 as u8) {}\n+   |              ^^^^^^^^^^^^^^\n+   |\n+help: use an inclusive range instead\n+   |\n+LL |     for _ in 0..=(255 as u8) {}\n+   |                 + ~~~\n+\n+error: aborting due to 2 previous errors\n+"}]}