{"sha": "74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZGMyYjZmNmZjODBkY2IwZDM5NDk0OWI5ZDcwMTAwMDlmYzRiZWQ=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-06-21T15:35:48Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-08-01T15:01:33Z"}, "message": "Remove mach dependency", "tree": {"sha": "c0cb56f35f8b3f3abe791a61136de948edca9e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0cb56f35f8b3f3abe791a61136de948edca9e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "html_url": "https://github.com/rust-lang/rust/commit/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9d0b0ccb994274e8da7f010a09c681da38f745", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9d0b0ccb994274e8da7f010a09c681da38f745", "html_url": "https://github.com/rust-lang/rust/commit/0b9d0b0ccb994274e8da7f010a09c681da38f745"}], "stats": {"total": 36, "additions": 23, "deletions": 13}, "files": [{"sha": "5334c4dfc68cc731f62f4170f1763ef0ac9b241b", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "patch": "@@ -53,9 +53,6 @@ rustc_tsan = { path = \"../librustc_tsan\" }\n [target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.1\", features = ['rustc-dep-of-std'] }\n \n-[target.'cfg(any(target_os = \"macos\", target_os = \"ios\"))'.dependencies]\n-mach = { version = \"0.3.2\", default-features = false, features = ['rustc-dep-of-std'] }\n-\n [target.x86_64-fortanix-unknown-sgx.dependencies]\n fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n "}, {"sha": "8fd76eabe394371a0b569c496cf4031a6b876086", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "patch": "@@ -338,10 +338,6 @@ extern crate alloc as alloc_crate;\n #[allow(unused_extern_crates)]\n extern crate libc;\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-#[allow(unused_extern_crates)]\n-extern crate mach;\n-\n // We always need an unwinder currently for backtraces\n #[doc(masked)]\n #[allow(unused_extern_crates)]"}, {"sha": "02f377d55c919de5ce58eaf0a42c69a6bccb40a5", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "patch": "@@ -137,9 +137,21 @@ mod inner {\n         t: Timespec::zero(),\n     };\n \n+    #[repr(C)]\n+    #[derive(Copy, Clone)]\n+    struct mach_timebase_info {\n+        numer: u32,\n+        denom: u32,\n+    }\n+    type mach_timebase_info_t = *mut mach_timebase_info;\n+    type kern_return_t = libc::c_int;\n+\n     impl Instant {\n         pub fn now() -> Instant {\n-            Instant { t: unsafe { mach::mach_time::mach_absolute_time() } }\n+            extern \"C\" {\n+                fn mach_absolute_time() -> u64;\n+            }\n+            Instant { t: unsafe { mach_absolute_time() } }\n         }\n \n         pub const fn zero() -> Instant {\n@@ -230,9 +242,8 @@ mod inner {\n         Some(mul_div_u64(nanos, info.denom as u64, info.numer as u64))\n     }\n \n-    fn info() -> mach::mach_time::mach_timebase_info {\n-        static mut INFO: mach::mach_time::mach_timebase_info\n-            = mach::mach_time::mach_timebase_info {\n+    fn info() -> mach_timebase_info {\n+        static mut INFO: mach_timebase_info = mach_timebase_info {\n             numer: 0,\n             denom: 0,\n         };\n@@ -246,7 +257,12 @@ mod inner {\n \n             // ... otherwise learn for ourselves ...\n             let mut info = mem::zeroed();\n-            mach::mach_time::mach_timebase_info(&mut info);\n+            extern \"C\" {\n+                fn mach_timebase_info(info: mach_timebase_info_t)\n+                                      -> kern_return_t;\n+            }\n+\n+            mach_timebase_info(&mut info);\n \n             // ... and attempt to be the one thread that stores it globally for\n             // all other threads"}, {"sha": "ae255b9d03ca97295b6f8ced94079fd78a8205ed", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74dc2b6f6fc80dcb0d394949b9d7010009fc4bed/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=74dc2b6f6fc80dcb0d394949b9d7010009fc4bed", "patch": "@@ -48,11 +48,12 @@ const EXCEPTIONS: &[&str] = &[\n     \"bytesize\",           // Apache-2.0, cargo\n     \"im-rc\",              // MPL-2.0+, cargo\n     \"adler32\",            // BSD-3-Clause AND Zlib, cargo dep that isn't used\n-    \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n     \"constant_time_eq\",   // CC0-1.0, rustfmt\n     \"utf8parse\",          // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n     \"vte\",                // Apache-2.0 OR MIT, cargo via strip-ansi-escapes\n     \"sized-chunks\",       // MPL-2.0+, cargo via im-rc\n+    // FIXME: this dependency violates the documentation comment above:\n+    \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n ];\n \n /// Which crates to check against the whitelist?"}]}