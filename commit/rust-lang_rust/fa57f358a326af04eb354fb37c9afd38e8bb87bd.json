{"sha": "fa57f358a326af04eb354fb37c9afd38e8bb87bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNTdmMzU4YTMyNmFmMDRlYjM1NGZiMzdjOWFmZDM4ZThiYjg3YmQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-14T17:29:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T17:29:47Z"}, "message": "Rollup merge of #35392 - malbarbo:cell-from, r=brson\n\nImplement From for Cell, RefCell and UnsafeCell\n\nConsidering that `From` is implemented for `Box`, `Rc` and `Arc`, it seems [reasonable](https://internals.rust-lang.org/t/implementing-from-t-for-other-std-types/3744) to implement it for `Cell`, `RefCell` and `UnsafeCell`.", "tree": {"sha": "3a8e5c424a48ff9d990d799c68bd1ef57762be57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a8e5c424a48ff9d990d799c68bd1ef57762be57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa57f358a326af04eb354fb37c9afd38e8bb87bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa57f358a326af04eb354fb37c9afd38e8bb87bd", "html_url": "https://github.com/rust-lang/rust/commit/fa57f358a326af04eb354fb37c9afd38e8bb87bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa57f358a326af04eb354fb37c9afd38e8bb87bd/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d1900b417a8425c887b1007df6b1c4eaebddb08", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d1900b417a8425c887b1007df6b1c4eaebddb08", "html_url": "https://github.com/rust-lang/rust/commit/9d1900b417a8425c887b1007df6b1c4eaebddb08"}, {"sha": "1403df72c82d3c3c2c19369c5f4bb34b3e095604", "url": "https://api.github.com/repos/rust-lang/rust/commits/1403df72c82d3c3c2c19369c5f4bb34b3e095604", "html_url": "https://github.com/rust-lang/rust/commit/1403df72c82d3c3c2c19369c5f4bb34b3e095604"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "17ec325e257b028f43ca709041f1769829309500", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa57f358a326af04eb354fb37c9afd38e8bb87bd/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa57f358a326af04eb354fb37c9afd38e8bb87bd/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=fa57f358a326af04eb354fb37c9afd38e8bb87bd", "patch": "@@ -146,6 +146,7 @@\n \n use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n+use convert::From;\n use default::Default;\n use fmt::{self, Debug, Display};\n use marker::{Copy, PhantomData, Send, Sync, Sized, Unsize};\n@@ -329,6 +330,13 @@ impl<T:Ord + Copy> Ord for Cell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T: Copy> From<T> for Cell<T> {\n+    fn from(t: T) -> Cell<T> {\n+        Cell::new(t)\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -742,6 +750,13 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n     }\n }\n \n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T> From<T> for RefCell<T> {\n+    fn from(t: T) -> RefCell<T> {\n+        RefCell::new(t)\n+    }\n+}\n+\n struct BorrowRef<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }\n@@ -1064,3 +1079,10 @@ impl<T: Default> Default for UnsafeCell<T> {\n         UnsafeCell::new(Default::default())\n     }\n }\n+\n+#[stable(feature = \"cell_from\", since = \"1.12.0\")]\n+impl<T> From<T> for UnsafeCell<T> {\n+    fn from(t: T) -> UnsafeCell<T> {\n+        UnsafeCell::new(t)\n+    }\n+}"}]}