{"sha": "7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NzAwNTA3OTZlNTkwNGEwZmM4NWVjYmU2ZmE2ZGRlMWNmZTBjOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-04T20:33:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-04T20:33:02Z"}, "message": "Auto merge of #63649 - tlively:emscripten-upstream-upgrade, r=alexcrichton\n\nUpgrade Emscripten targets to use upstream LLVM backend\n\n - Refactors the Emscripten target spec to share code with other wasm\n   targets.\n - Replaces the incorrect wasm32 C call ABI with the old asmjs\n   version, which is correct for both wasm32 and JS.\n - Updates the varargs ABI used by Emscripten and deletes the old one.\n - Removes the obsolete wasm32-experimental-emscripten target.\n - Temporarily makes Emscripten targets use panic=abort by default\n   because supporting unwinding will require an LLVM patch.", "tree": {"sha": "9a1cd1fe1091eb7e2ddaf1df8f9ea93eb70c6fa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1cd1fe1091eb7e2ddaf1df8f9ea93eb70c6fa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "html_url": "https://github.com/rust-lang/rust/commit/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7244807a7878f6eca3eb7d97ae9b413aa49014", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7244807a7878f6eca3eb7d97ae9b413aa49014", "html_url": "https://github.com/rust-lang/rust/commit/2e7244807a7878f6eca3eb7d97ae9b413aa49014"}, {"sha": "4a4df29d6fa12c303e3991f0e0e3677342c4787c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4df29d6fa12c303e3991f0e0e3677342c4787c", "html_url": "https://github.com/rust-lang/rust/commit/4a4df29d6fa12c303e3991f0e0e3677342c4787c"}], "stats": {"total": 914, "additions": 377, "deletions": 537}, "files": [{"sha": "2e3b714f9228ab76bfdc3811fc71ecb596bd673f", "filename": "config.toml.example", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -377,6 +377,7 @@\n # but you can also optionally enable the \"emscripten\" backend for asm.js or\n # make this an empty array (but that probably won't get too far in the\n # bootstrap)\n+# FIXME: remove the obsolete emscripten backend option.\n #codegen-backends = [\"llvm\"]\n \n # This is the name of the directory in which codegen backends will get installed"}, {"sha": "9b43bb0eff0e845c94b0d8a7da8ad4cdd8c60c97", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -970,6 +970,7 @@ impl<'a> Builder<'a> {\n                 Some(\"-Wl,-rpath,@loader_path/../lib\")\n             } else if !target.contains(\"windows\") &&\n                       !target.contains(\"wasm32\") &&\n+                      !target.contains(\"emscripten\") &&\n                       !target.contains(\"fuchsia\") {\n                 Some(\"-Wl,-rpath,$ORIGIN/../lib\")\n             } else {"}, {"sha": "e09e25de64a34b421b7e95c427b2e126ad8d1e3d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1047,10 +1047,11 @@ impl Step for Compiletest {\n         // Also provide `rust_test_helpers` for the host.\n         builder.ensure(native::TestHelpers { target: compiler.host });\n \n-        // wasm32 can't build the test helpers\n-        if !target.contains(\"wasm32\") {\n+        // As well as the target, except for plain wasm32, which can't build it\n+        if !target.contains(\"wasm32\") || target.contains(\"emscripten\") {\n             builder.ensure(native::TestHelpers { target });\n         }\n+\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n         let mut cmd = builder.tool_cmd(Tool::Compiletest);"}, {"sha": "d136fae79aa447c4dd830e3981175bc53dae086e", "filename": "src/ci/docker/asmjs/Dockerfile", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fasmjs%2FDockerfile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -11,7 +11,8 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils\n+  xz-utils \\\n+  bzip2\n \n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n@@ -20,28 +21,16 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n-ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n-ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n-ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n-ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n+ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n+ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n+ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=asmjs-unknown-emscripten\n \n-ENV RUST_CONFIGURE_ARGS --enable-emscripten --disable-optimize-tests\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n \n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n-  src/test/ui \\\n-  src/test/run-fail \\\n-  src/libstd \\\n-  src/liballoc \\\n-  src/libcore\n-\n-# Debug assertions in rustc are largely covered by other builders, and LLVM\n-# assertions cause this builder to slow down by quite a large amount and don't\n-# buy us a huge amount over other builders (not sure if we've ever seen an\n-# asmjs-specific backend assertion trip), so disable assertions for these\n-# tests.\n-ENV NO_LLVM_ASSERTIONS=1\n+# This is almost identical to the wasm32-unknown-emscripten target, so\n+# running with assertions again is not useful\n ENV NO_DEBUG_ASSERTIONS=1\n+ENV NO_LLVM_ASSERTIONS=1"}, {"sha": "420d47b314c0f63da8e006eb78688c6051eec6c5", "filename": "src/ci/docker/disabled/wasm32-exp/Dockerfile", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2FDockerfile?ref=2e7244807a7878f6eca3eb7d97ae9b413aa49014", "patch": "@@ -1,35 +0,0 @@\n-FROM ubuntu:16.04\n-\n-RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n-  make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n-  python \\\n-  git \\\n-  cmake \\\n-  sudo \\\n-  gdb \\\n-  xz-utils \\\n-  jq \\\n-  bzip2\n-\n-# emscripten\n-COPY scripts/emscripten-wasm.sh /scripts/\n-COPY wasm32-exp/node.sh /usr/local/bin/node\n-RUN bash /scripts/emscripten-wasm.sh\n-\n-# cache\n-COPY scripts/sccache.sh /scripts/\n-RUN sh /scripts/sccache.sh\n-\n-# env\n-ENV PATH=/wasm-install/emscripten:/wasm-install/bin:$PATH\n-ENV EM_CONFIG=/root/.emscripten\n-\n-ENV TARGETS=wasm32-experimental-emscripten\n-\n-ENV RUST_CONFIGURE_ARGS --experimental-targets=WebAssembly\n-\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS"}, {"sha": "aa938971c702f713e857c159d8bd8b67003ff982", "filename": "src/ci/docker/disabled/wasm32-exp/node.sh", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32-exp%2Fnode.sh?ref=2e7244807a7878f6eca3eb7d97ae9b413aa49014", "patch": "@@ -1,9 +0,0 @@\n-#!/usr/bin/env bash\n-\n-path=\"$(dirname $1)\"\n-file=\"$(basename $1)\"\n-\n-shift\n-\n-cd \"$path\"\n-exec /node-v8.0.0-linux-x64/bin/node \"$file\" \"$@\""}, {"sha": "b2cf862c0a510060d54aa3773761d853dc565e62", "filename": "src/ci/docker/disabled/wasm32/Dockerfile", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdisabled%2Fwasm32%2FDockerfile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -11,22 +11,28 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  xz-utils\n+  xz-utils \\\n+  bzip2\n \n-# emscripten\n COPY scripts/emscripten.sh /scripts/\n RUN bash /scripts/emscripten.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV PATH=$PATH:/emsdk-portable\n-ENV PATH=$PATH:/emsdk-portable/clang/e1.38.15_64bit/\n-ENV PATH=$PATH:/emsdk-portable/emscripten/1.38.15/\n-ENV PATH=$PATH:/emsdk-portable/node/8.9.1_64bit/bin/\n-ENV EMSCRIPTEN=/emsdk-portable/emscripten/1.38.15/\n-ENV BINARYEN_ROOT=/emsdk-portable/clang/e1.38.15_64bit/binaryen/\n+ENV PATH=$PATH:/emsdk-portable/upstream/emscripten/\n+ENV PATH=$PATH:/emsdk-portable/node/12.9.1_64bit/bin/\n+ENV BINARYEN_ROOT=/emsdk-portable/upstream/\n ENV EM_CONFIG=/emsdk-portable/.emscripten\n \n ENV TARGETS=wasm32-unknown-emscripten\n-ENV SCRIPT python2.7 ../x.py test --target $TARGETS\n+\n+# FIXME: Re-enable these tests once Cargo stops trying to execute wasms\n+ENV SCRIPT python2.7 ../x.py test --target $TARGETS \\\n+    --exclude src/libcore \\\n+    --exclude src/liballoc \\\n+    --exclude src/libproc_macro \\\n+    --exclude src/libstd \\\n+    --exclude src/libterm \\\n+    --exclude src/libtest"}, {"sha": "e4a93d7a100920a6941c97bb1e62e095b8b74a83", "filename": "src/ci/docker/scripts/emscripten-wasm.sh", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten-wasm.sh?ref=2e7244807a7878f6eca3eb7d97ae9b413aa49014", "patch": "@@ -1,37 +0,0 @@\n-set -ex\n-\n-hide_output() {\n-  set +x\n-  on_err=\"\n-echo ERROR: An error was encountered with the build.\n-cat /tmp/build.log\n-exit 1\n-\"\n-  trap \"$on_err\" ERR\n-  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n-  PING_LOOP_PID=$!\n-  $@ &> /tmp/build.log\n-  trap - ERR\n-  kill $PING_LOOP_PID\n-  rm -f /tmp/build.log\n-  set -x\n-}\n-\n-# Download last known good emscripten from WebAssembly waterfall\n-BUILD=$(curl -fL https://storage.googleapis.com/wasm-llvm/builds/linux/lkgr.json | \\\n-    jq '.build | tonumber')\n-curl -sL https://storage.googleapis.com/wasm-llvm/builds/linux/$BUILD/wasm-binaries.tbz2 | \\\n-    hide_output tar xvkj\n-\n-# node 8 is required to run wasm\n-cd /\n-curl -sL https://nodejs.org/dist/v8.0.0/node-v8.0.0-linux-x64.tar.xz | \\\n-    tar -xJ\n-\n-# Make emscripten use wasm-ready node and LLVM tools\n-echo \"EMSCRIPTEN_ROOT = '/wasm-install/emscripten'\" >> /root/.emscripten\n-echo \"NODE_JS='/usr/local/bin/node'\" >> /root/.emscripten\n-echo \"LLVM_ROOT='/wasm-install/bin'\" >> /root/.emscripten\n-echo \"BINARYEN_ROOT = '/wasm-install'\" >> /root/.emscripten\n-echo \"COMPILER_ENGINE = NODE_JS\" >> /root/.emscripten\n-echo \"JS_ENGINES = [NODE_JS]\" >> /root/.emscripten"}, {"sha": "9c7a09e227a474f9302af39e08486f16f98b2311", "filename": "src/ci/docker/scripts/emscripten.sh", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Femscripten.sh?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -17,20 +17,15 @@ exit 1\n   set -x\n }\n \n-cd /\n-curl -fL https://mozilla-games.s3.amazonaws.com/emscripten/releases/emsdk-portable.tar.gz | \\\n-    tar -xz\n-\n+git clone https://github.com/emscripten-core/emsdk.git /emsdk-portable\n cd /emsdk-portable\n-./emsdk update\n-hide_output ./emsdk install sdk-1.38.15-64bit\n-./emsdk activate sdk-1.38.15-64bit\n+hide_output ./emsdk install 1.38.46-upstream\n+./emsdk activate 1.38.46-upstream\n \n # Compile and cache libc\n source ./emsdk_env.sh\n echo \"main(){}\" > a.c\n HOME=/emsdk-portable/ emcc a.c\n-HOME=/emsdk-portable/ emcc -s BINARYEN=1 a.c\n rm -f a.*\n \n # Make emsdk usable by any user"}, {"sha": "b8c720264d0abce13e893dc35b461f3e9d685520", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,10 +1,5 @@\n-use std::cmp;\n use std::collections::BinaryHeap;\n use std::collections::binary_heap::{Drain, PeekMut};\n-use std::panic::{self, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicUsize, Ordering};\n-\n-use rand::{thread_rng, seq::SliceRandom};\n \n #[test]\n fn test_iterator() {\n@@ -281,9 +276,15 @@ fn assert_covariance() {\n // even if the order may not be correct.\n //\n // Destructors must be called exactly once per element.\n+// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n fn panic_safe() {\n+    use std::cmp;\n+    use std::panic::{self, AssertUnwindSafe};\n+    use std::sync::atomic::{AtomicUsize, Ordering};\n+    use rand::{thread_rng, seq::SliceRandom};\n+\n     static DROP_COUNTER: AtomicUsize = AtomicUsize::new(0);\n \n     #[derive(Eq, PartialEq, Ord, Clone, Debug)]"}, {"sha": "cb73c7c179cbf2edba72a0337199e1bbd55f092c", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -483,7 +483,7 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n+    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n     #[cfg(not(miri))] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {"}, {"sha": "abcba0c2e8479a314a6ae30552ce3053e1ffd82f", "filename": "src/liballoc/tests/str.rs.rej", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fstr.rs.rej", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs.rej?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -0,0 +1,10 @@\n+diff a/src/liballoc/tests/str.rs b/src/liballoc/tests/str.rs\t(rejected hunks)\n+@@ -483,7 +483,7 @@ mod slice_index {\n+     }\n+ \n+     #[test]\n+-    #[cfg(not(target_arch = \"asmjs\"))] // hits an OOM\n++    #[cfg(not(target_arch = \"js\"))] // hits an OOM\n+     #[cfg(not(miri))] // Miri is too slow\n+     fn simple_big() {\n+         fn a_million_letter_x() -> String {"}, {"sha": "80537217697adebedb4e1c31fd3b3f79869e2ab6", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -944,8 +944,10 @@ fn drain_filter_complex() {\n     }\n }\n \n+// Miri does not support catching panics\n+// FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))]\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -995,8 +997,9 @@ fn drain_filter_consumed_panic() {\n     }\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics\n #[test]\n-#[cfg(not(miri))] // Miri does not support catching panics\n+#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;"}, {"sha": "0ea4187ccd4829b414daed1dd0ac1ebb75445039", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -49,8 +49,10 @@ impl fmt::Debug for c_void {\n /// Basic implementation of a `va_list`.\n // The name is WIP, using `VaListImpl` for now.\n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+              not(target_arch = \"x86_64\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n+          target_arch = \"wasm32\",\n+          target_arch = \"asmjs\",\n           windows))]\n #[repr(transparent)]\n #[unstable(feature = \"c_variadic\",\n@@ -67,8 +69,10 @@ pub struct VaListImpl<'f> {\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+              not(target_arch = \"x86_64\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n+          target_arch = \"wasm32\",\n+          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -137,38 +141,6 @@ pub struct VaListImpl<'f> {\n     _marker: PhantomData<&'f mut &'f c_void>,\n }\n \n-/// asm.js ABI implementation of a `va_list`.\n-// asm.js uses the PNaCl ABI, which specifies that a `va_list` is\n-// an array of 4 32-bit integers, according to the old PNaCl docs at\n-// https://web.archive.org/web/20130518054430/https://www.chromium.org/nativeclient/pnacl/bitcode-abi#TOC-Derived-Types\n-// and clang does the same in `CreatePNaClABIBuiltinVaListDecl` from `lib/AST/ASTContext.cpp`\n-#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n-#[repr(C)]\n-#[unstable(feature = \"c_variadic\",\n-           reason = \"the `c_variadic` feature has not been properly tested on \\\n-                     all supported platforms\",\n-           issue = \"44930\")]\n-#[lang = \"va_list\"]\n-pub struct VaListImpl<'f> {\n-    inner: [crate::mem::MaybeUninit<i32>; 4],\n-    _marker: PhantomData<&'f mut &'f c_void>,\n-}\n-\n-#[cfg(all(target_arch = \"asmjs\", not(windows)))]\n-#[unstable(feature = \"c_variadic\",\n-           reason = \"the `c_variadic` feature has not been properly tested on \\\n-                     all supported platforms\",\n-           issue = \"44930\")]\n-impl<'f> fmt::Debug for VaListImpl<'f> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        unsafe {\n-            write!(f, \"va_list* [{:#x}, {:#x}, {:#x}, {:#x}]\",\n-                   self.inner[0].read(), self.inner[1].read(),\n-                   self.inner[2].read(), self.inner[3].read())\n-        }\n-    }\n-}\n-\n /// A wrapper for a `va_list`\n #[repr(transparent)]\n #[derive(Debug)]\n@@ -178,23 +150,29 @@ impl<'f> fmt::Debug for VaListImpl<'f> {\n            issue = \"44930\")]\n pub struct VaList<'a, 'f: 'a> {\n     #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-                  not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+                  not(target_arch = \"x86_64\")),\n               all(target_arch = \"aarch64\", target_os = \"ios\"),\n+              target_arch = \"wasm32\",\n+              target_arch = \"asmjs\",\n               windows))]\n     inner: VaListImpl<'f>,\n \n     #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-                  target_arch = \"x86_64\", target_arch = \"asmjs\"),\n+                  target_arch = \"x86_64\"),\n               any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+              not(target_arch = \"wasm32\"),\n+              not(target_arch = \"asmjs\"),\n               not(windows)))]\n     inner: &'a mut VaListImpl<'f>,\n \n     _marker: PhantomData<&'a mut VaListImpl<'f>>,\n }\n \n #[cfg(any(all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"),\n-              not(target_arch = \"x86_64\"), not(target_arch = \"asmjs\")),\n+              not(target_arch = \"x86_64\")),\n           all(target_arch = \"aarch64\", target_os = \"ios\"),\n+          target_arch = \"wasm32\",\n+          target_arch = \"asmjs\",\n           windows))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\\n@@ -212,8 +190,10 @@ impl<'f> VaListImpl<'f> {\n }\n \n #[cfg(all(any(target_arch = \"aarch64\", target_arch = \"powerpc\",\n-              target_arch = \"x86_64\", target_arch = \"asmjs\"),\n+              target_arch = \"x86_64\"),\n           any(not(target_arch = \"aarch64\"), not(target_os = \"ios\")),\n+          not(target_arch = \"wasm32\"),\n+          not(target_arch = \"asmjs\"),\n           not(windows)))]\n #[unstable(feature = \"c_variadic\",\n            reason = \"the `c_variadic` feature has not been properly tested on \\"}, {"sha": "368a2f16b281e726530a25285c057e5daf80093f", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -114,24 +114,8 @@ pub fn black_box<T>(dummy: T) -> T {\n     // this. LLVM's intepretation of inline assembly is that it's, well, a black\n     // box. This isn't the greatest implementation since it probably deoptimizes\n     // more than we want, but it's so far good enough.\n-    #[cfg(not(any(\n-        target_arch = \"asmjs\",\n-        all(\n-            target_arch = \"wasm32\",\n-            target_os = \"emscripten\"\n-        )\n-    )))]\n     unsafe {\n         asm!(\"\" : : \"r\"(&dummy));\n         return dummy;\n     }\n-\n-    // Not all platforms support inline assembly so try to do something without\n-    // inline assembly which in theory still hinders at least some optimizations\n-    // on those targets. This is the \"best effort\" scenario.\n-    unsafe {\n-        let ret = crate::ptr::read_volatile(&dummy);\n-        crate::mem::forget(dummy);\n-        ret\n-    }\n }"}, {"sha": "2dce9b04c9e9eecff196da53b671ee368322f8fc", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -257,8 +257,7 @@ pub fn target_feature_whitelist(sess: &Session)\n         \"hexagon\" => HEXAGON_WHITELIST,\n         \"mips\" | \"mips64\" => MIPS_WHITELIST,\n         \"powerpc\" | \"powerpc64\" => POWERPC_WHITELIST,\n-        // wasm32 on emscripten does not support these target features\n-        \"wasm32\" if !sess.target.target.options.is_like_emscripten => WASM_WHITELIST,\n+        \"wasm32\" => WASM_WHITELIST,\n         _ => &[],\n     }\n }"}, {"sha": "caaa500766d014a1f7c755e016bbc538decfa294", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -142,15 +142,12 @@ impl ModuleConfig {\n         // Copy what clang does by turning on loop vectorization at O2 and\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n         // of this pass manager builder.\n-        // Turn off vectorization for emscripten, as it's not very well supported.\n         self.vectorize_loop = !sess.opts.cg.no_vectorize_loops &&\n                              (sess.opts.optimize == config::OptLevel::Default ||\n-                              sess.opts.optimize == config::OptLevel::Aggressive) &&\n-                             !sess.target.target.options.is_like_emscripten;\n+                              sess.opts.optimize == config::OptLevel::Aggressive);\n \n         self.vectorize_slp = !sess.opts.cg.no_vectorize_slp &&\n-                            sess.opts.optimize == config::OptLevel::Aggressive &&\n-                            !sess.target.target.options.is_like_emscripten;\n+                            sess.opts.optimize == config::OptLevel::Aggressive;\n \n         // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n         // pass. This is because MergeFunctions can generate new function calls"}, {"sha": "92c86372a86f331c5b7a0ab137958e1996fe9b1f", "filename": "src/librustc_target/abi/call/asmjs.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fasmjs.rs?ref=2e7244807a7878f6eca3eb7d97ae9b413aa49014", "patch": "@@ -1,47 +0,0 @@\n-use crate::abi::call::{FnType, ArgType, Uniform};\n-use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n-\n-// Data layout: e-p:32:32-i64:64-v128:32:128-n32-S128\n-\n-// See the https://github.com/kripken/emscripten-fastcomp-clang repository.\n-// The class `EmscriptenABIInfo` in `/lib/CodeGen/TargetInfo.cpp` contains the ABI definitions.\n-\n-fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n-    if ret.layout.is_aggregate() {\n-        if let Some(unit) = ret.layout.homogeneous_aggregate(cx).unit() {\n-            let size = ret.layout.size;\n-            if unit.size == size {\n-                ret.cast_to(Uniform {\n-                    unit,\n-                    total: size\n-                });\n-                return;\n-            }\n-        }\n-\n-        ret.make_indirect();\n-    }\n-}\n-\n-fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n-    if arg.layout.is_aggregate() {\n-        arg.make_indirect_byval();\n-    }\n-}\n-\n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n-    where Ty: TyLayoutMethods<'a, C> + Copy,\n-          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n-{\n-    if !fty.ret.is_ignore() {\n-        classify_ret_ty(cx, &mut fty.ret);\n-    }\n-\n-    for arg in &mut fty.args {\n-        if arg.is_ignore() { continue; }\n-        classify_arg_ty(arg);\n-    }\n-}"}, {"sha": "17bad189bcfdad0d72d204b7272d9364d965b74e", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -5,7 +5,6 @@ use crate::spec::{self, HasTargetSpec};\n mod aarch64;\n mod amdgpu;\n mod arm;\n-mod asmjs;\n mod hexagon;\n mod mips;\n mod mips64;\n@@ -22,6 +21,7 @@ mod x86;\n mod x86_64;\n mod x86_win64;\n mod wasm32;\n+mod wasm32_bindgen_compat;\n \n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub enum PassMode {\n@@ -557,14 +557,6 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"powerpc\" => powerpc::compute_abi_info(cx, self),\n             \"powerpc64\" => powerpc64::compute_abi_info(cx, self),\n             \"s390x\" => s390x::compute_abi_info(cx, self),\n-            \"asmjs\" => asmjs::compute_abi_info(cx, self),\n-            \"wasm32\" => {\n-                if cx.target_spec().llvm_target.contains(\"emscripten\") {\n-                    asmjs::compute_abi_info(cx, self)\n-                } else {\n-                    wasm32::compute_abi_info(self)\n-                }\n-            }\n             \"msp430\" => msp430::compute_abi_info(self),\n             \"sparc\" => sparc::compute_abi_info(cx, self),\n             \"sparc64\" => sparc64::compute_abi_info(cx, self),\n@@ -573,6 +565,9 @@ impl<'a, Ty> FnType<'a, Ty> {\n             \"hexagon\" => hexagon::compute_abi_info(self),\n             \"riscv32\" => riscv::compute_abi_info(self, 32),\n             \"riscv64\" => riscv::compute_abi_info(self, 64),\n+            \"wasm32\" if cx.target_spec().target_os != \"emscripten\"\n+                => wasm32_bindgen_compat::compute_abi_info(self),\n+            \"wasm32\" | \"asmjs\" => wasm32::compute_abi_info(cx, self),\n             a => return Err(format!(\"unrecognized arch \\\"{}\\\" in target specification\", a))\n         }\n "}, {"sha": "27799edab91954dbbd842c9bfca90211ab560dc8", "filename": "src/librustc_target/abi/call/wasm32.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,20 +1,60 @@\n-use crate::abi::call::{FnType, ArgType};\n+use crate::abi::call::{FnType, ArgType, Uniform};\n+use crate::abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n \n-fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n+fn unwrap_trivial_aggregate<'a, Ty, C>(cx: &C, val: &mut ArgType<'a, Ty>) -> bool\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+    if val.layout.is_aggregate() {\n+        if let Some(unit) = val.layout.homogeneous_aggregate(cx).unit() {\n+            let size = val.layout.size;\n+            if unit.size == size {\n+                val.cast_to(Uniform {\n+                    unit,\n+                    total: size\n+                });\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+\n+fn classify_ret_ty<'a, Ty, C>(cx: &C, ret: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     ret.extend_integer_width_to(32);\n+    if ret.layout.is_aggregate() {\n+        if !unwrap_trivial_aggregate(cx, ret) {\n+            ret.make_indirect();\n+        }\n+    }\n }\n \n-fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     arg.extend_integer_width_to(32);\n+    if arg.layout.is_aggregate() {\n+        if !unwrap_trivial_aggregate(cx, arg) {\n+            arg.make_indirect_byval();\n+        }\n+    }\n }\n \n-pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fty: &mut FnType<'a, Ty>)\n+    where Ty: TyLayoutMethods<'a, C> + Copy,\n+          C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n     if !fty.ret.is_ignore() {\n-        classify_ret_ty(&mut fty.ret);\n+        classify_ret_ty(cx, &mut fty.ret);\n     }\n \n     for arg in &mut fty.args {\n         if arg.is_ignore() { continue; }\n-        classify_arg_ty(arg);\n+        classify_arg_ty(cx, arg);\n     }\n }"}, {"sha": "2645e30594ceae0725fff9690ba20309bf6156b6", "filename": "src/librustc_target/abi/call/wasm32_bindgen_compat.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fwasm32_bindgen_compat.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -0,0 +1,27 @@\n+// This is not and has never been a correct C ABI for WebAssembly, but\n+// for a long time this was the C ABI that Rust used. wasm-bindgen\n+// depends on ABI details for this ABI and is incompatible with the\n+// correct C ABI, so this ABI is being kept around until wasm-bindgen\n+// can be fixed to work with the correct ABI. See #63649 for further\n+// discussion.\n+\n+use crate::abi::call::{FnType, ArgType};\n+\n+fn classify_ret_ty<Ty>(ret: &mut ArgType<'_, Ty>) {\n+    ret.extend_integer_width_to(32);\n+}\n+\n+fn classify_arg_ty<Ty>(arg: &mut ArgType<'_, Ty>) {\n+    arg.extend_integer_width_to(32);\n+}\n+\n+pub fn compute_abi_info<Ty>(fty: &mut FnType<'_, Ty>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(&mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(arg);\n+    }\n+}"}, {"sha": "e8f9c1f3d61dea198a3eb9cef22b5ecf8098f7e7", "filename": "src/librustc_target/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,40 +1,10 @@\n-use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n+use super::{LinkerFlavor, Target, wasm32_unknown_emscripten};\n \n pub fn target() -> Result<Target, String> {\n-    let mut args = LinkArgs::new();\n-    args.insert(LinkerFlavor::Em,\n-                vec![\"-s\".to_string(),\n-                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n-                     \"-s\".to_string(),\n-                     \"ABORTING_MALLOC=0\".to_string(),\n-                     \"-s\".to_string(),\n-                     \"WASM=0\".to_string()]);\n-\n-    let opts = TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        exe_suffix: \".js\".to_string(),\n-        linker_is_gnu: true,\n-        allow_asm: false,\n-        obj_is_bitcode: true,\n-        is_like_emscripten: true,\n-        max_atomic_width: Some(32),\n-        post_link_args: args,\n-        target_family: Some(\"unix\".to_string()),\n-        codegen_backend: \"emscripten\".to_string(),\n-        .. Default::default()\n-    };\n-    Ok(Target {\n-        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"emscripten\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n-        arch: \"asmjs\".to_string(),\n-        linker_flavor: LinkerFlavor::Em,\n-        options: opts,\n-    })\n+    let mut target = wasm32_unknown_emscripten::target()?;\n+    target.options.post_link_args\n+        .entry(LinkerFlavor::Em)\n+        .or_default()\n+        .extend(vec![\"-s\".to_string(), \"WASM=0\".to_string()]);\n+    Ok(target)\n }"}, {"sha": "cf1a84dec97bccf625742399a4d9c5e0bd2f8b4e", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -462,7 +462,6 @@ supported_targets! {\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n     (\"wasm32-wasi\", wasm32_wasi),\n-    (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),\n     (\"thumbv7m-none-eabi\", thumbv7m_none_eabi),"}, {"sha": "b802bee25ae7a04ee301dc597e6e1c048694452e", "filename": "src/librustc_target/spec/wasm32_experimental_emscripten.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e7244807a7878f6eca3eb7d97ae9b413aa49014/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_experimental_emscripten.rs?ref=2e7244807a7878f6eca3eb7d97ae9b413aa49014", "patch": "@@ -1,44 +0,0 @@\n-use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n-\n-pub fn target() -> Result<Target, String> {\n-    let mut post_link_args = LinkArgs::new();\n-    post_link_args.insert(LinkerFlavor::Em,\n-                          vec![\"-s\".to_string(),\n-                               \"WASM=1\".to_string(),\n-                               \"-s\".to_string(),\n-                               \"ASSERTIONS=1\".to_string(),\n-                               \"-s\".to_string(),\n-                               \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n-                               \"-g3\".to_string()]);\n-\n-    let opts = TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        // Today emcc emits two files - a .js file to bootstrap and\n-        // possibly interpret the wasm, and a .wasm file\n-        exe_suffix: \".js\".to_string(),\n-        linker_is_gnu: true,\n-        link_env: vec![(\"EMCC_WASM_BACKEND\".to_string(), \"1\".to_string())],\n-        allow_asm: false,\n-        obj_is_bitcode: true,\n-        is_like_emscripten: true,\n-        max_atomic_width: Some(32),\n-        post_link_args,\n-        limit_rdylib_exports: false,\n-        target_family: Some(\"unix\".to_string()),\n-        .. Default::default()\n-    };\n-    Ok(Target {\n-        llvm_target: \"wasm32-unknown-unknown\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        target_os: \"emscripten\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n-        arch: \"wasm32\".to_string(),\n-        linker_flavor: LinkerFlavor::Em,\n-        options: opts,\n-    })\n-}"}, {"sha": "6a2c8c495372f2d3483283aa7c6dd9065f975e41", "filename": "src/librustc_target/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,45 +1,46 @@\n-use super::{LinkArgs, LinkerFlavor, Target, TargetOptions};\n+use super::wasm32_base;\n+use super::{LinkArgs, LinkerFlavor, Target, TargetOptions, PanicStrategy};\n \n pub fn target() -> Result<Target, String> {\n-    // FIXME(nikic) BINARYEN_TRAP_MODE=clamp is needed to avoid trapping in our\n-    // -Zsaturating-float-casts implementation. This can be dropped if/when\n-    // we have native fpto[su]i.sat intrinsics, or the implementation otherwise\n-    // stops relying on non-trapping fpto[su]i.\n     let mut post_link_args = LinkArgs::new();\n     post_link_args.insert(LinkerFlavor::Em,\n                           vec![\"-s\".to_string(),\n-                               \"BINARYEN=1\".to_string(),\n-                               \"-s\".to_string(),\n                                \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n                                \"-s\".to_string(),\n-                               \"BINARYEN_TRAP_MODE='clamp'\".to_string()]);\n+                               \"ASSERTIONS=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"DISABLE_EXCEPTION_CATCHING=1\".to_string(),\n+                               \"-s\".to_string(),\n+                               \"ABORTING_MALLOC=0\".to_string(),\n+                               // FIXME(tlively): Enable this linker option once libc type errors\n+                               // are resolved. See https://github.com/rust-lang/libc/pull/1478.\n+                               // \"-Wl,--fatal-warnings\".to_string(),\n+                               ]);\n \n     let opts = TargetOptions {\n-        dynamic_linking: false,\n-        executables: true,\n-        // Today emcc emits two files - a .js file to bootstrap and\n-        // possibly interpret the wasm, and a .wasm file\n+        // emcc emits two files - a .js file to instantiate the wasm and supply platform\n+        // functionality, and a .wasm file.\n         exe_suffix: \".js\".to_string(),\n+        linker: None,\n         linker_is_gnu: true,\n-        allow_asm: false,\n-        obj_is_bitcode: true,\n         is_like_emscripten: true,\n-        max_atomic_width: Some(32),\n+        // FIXME(tlively): Emscripten supports unwinding, but we would have to pass\n+        // -enable-emscripten-cxx-exceptions to LLVM at codegen time and merge\n+        // https://reviews.llvm.org/rG5c3cdef84b82464756bb571c13c31cf7773860c3to use it.\n+        panic_strategy: PanicStrategy::Abort,\n         post_link_args,\n-        limit_rdylib_exports: false,\n         target_family: Some(\"unix\".to_string()),\n-        codegen_backend: \"emscripten\".to_string(),\n-        .. Default::default()\n+        .. wasm32_base::options()\n     };\n     Ok(Target {\n-        llvm_target: \"asmjs-unknown-emscripten\".to_string(),\n+        llvm_target: \"wasm32-unknown-emscripten\".to_string(),\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n         target_os: \"emscripten\".to_string(),\n         target_env: String::new(),\n         target_vendor: \"unknown\".to_string(),\n-        data_layout: \"e-p:32:32-i64:64-v128:32:128-n32-S128\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n         arch: \"wasm32\".to_string(),\n         linker_flavor: LinkerFlavor::Em,\n         options: opts,"}, {"sha": "7de2583b9f6c6e383174eebe9d57fbc3cf74ca52", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -360,7 +360,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"target_arch\", Some(arch)) => match &*arch.as_str() {\n                         \"aarch64\" => \"AArch64\",\n                         \"arm\" => \"ARM\",\n-                        \"asmjs\" => \"asm.js\",\n+                        \"asmjs\" => \"JavaScript\",\n                         \"mips\" => \"MIPS\",\n                         \"mips64\" => \"MIPS-64\",\n                         \"msp430\" => \"MSP430\","}, {"sha": "d7e733b7fa032bc834fae05f15f8b9de0e5ec041", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -10,7 +10,8 @@\n // fallback implementation to use as well.\n //\n // Due to rust-lang/rust#18804, make sure this is not generic!\n-#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"fuchsia\", target_os = \"hermit\", target_os = \"redox\",\n+          target_os = \"emscripten\"))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n     use crate::mem;\n     use crate::sys_common::thread_local::register_dtor_fallback;"}, {"sha": "e8f3434b958d35cc236095cd9b8dacd5e75a6537", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1478,9 +1478,9 @@ pub fn run_test(\n ) {\n     let TestDescAndFn { desc, testfn } = test;\n \n-    let ignore_because_no_process_support = cfg!(target_arch = \"wasm32\")\n-        && !cfg!(target_os = \"emscripten\")\n-        && desc.should_panic != ShouldPanic::No;\n+    // FIXME: Re-enable emscripten once it can catch panics again\n+    let ignore_because_no_process_support = desc.should_panic != ShouldPanic::No\n+        && (cfg!(target_arch = \"wasm32\") || cfg!(target_os = \"emscripten\"));\n \n     if force_ignore || desc.ignore || ignore_because_no_process_support {\n         monitor_ch.send((desc, TrIgnored, None, Vec::new())).unwrap();"}, {"sha": "c3727b3013fc8921e01d05ec837b33412d047214", "filename": "src/libtest/tests.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibtest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Flibtest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftests.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n use crate::test::{\n     filter_tests, parse_opts, run_test, DynTestFn, DynTestName, MetricMap, RunIgnored, RunStrategy,\n-    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts, TrFailedMsg,\n+    ShouldPanic, StaticTestName, TestDesc, TestDescAndFn, TestOpts,\n     TrIgnored, TrOk,\n };\n use std::sync::mpsc::channel;\n@@ -90,7 +90,9 @@ pub fn ignored_tests_result_in_ignored() {\n     assert!(res == TrIgnored);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic() {\n     fn f() {\n         panic!();\n@@ -110,7 +112,9 @@ fn test_should_panic() {\n     assert!(res == TrOk);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_good_message() {\n     fn f() {\n         panic!(\"an error message\");\n@@ -130,8 +134,11 @@ fn test_should_panic_good_message() {\n     assert!(res == TrOk);\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_bad_message() {\n+    use crate::tests::TrFailedMsg;\n     fn f() {\n         panic!(\"an error message\");\n     }\n@@ -152,7 +159,9 @@ fn test_should_panic_bad_message() {\n     assert!(res == TrFailedMsg(format!(\"{} '{}'\", failed_msg, expected)));\n }\n \n+// FIXME: Re-enable emscripten once it can catch panics again\n #[test]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn test_should_panic_but_succeeds() {\n     fn f() {}\n     let desc = TestDescAndFn {"}, {"sha": "7fa61d15f77c4af42e3ef9eeb331f3916e9295ab", "filename": "src/test/codegen/c-variadic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fc-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fc-variadic.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n // ignore-tidy-linelength\n "}, {"sha": "49e40d5f243f16c80e9e5990037108c9105f3dbe", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "786f2c8422b788ab02ff750c295f9cb6a0925015", "filename": "src/test/codegen/extern-functions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fextern-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fextern-functions.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "ee61814678ce4a7d119e2b950eef9e1f4eb72a3e", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions"}, {"sha": "88b8692b0ac540b1c8d411cd76f2cae9f1757dbc", "filename": "src/test/codegen/link_section.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Flink_section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Flink_section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink_section.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten default visibility is hidden\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "47b38d29417424a5c8b206b715a9f7976868dca9", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,5 @@\n // compile-flags: -O\n \n-// ignore-asmjs\n-\n #![feature(asm)]\n #![crate_type = \"lib\"]\n "}, {"sha": "c82ae476b1b2c2a9cc3c10c26177895201e44d6f", "filename": "src/test/codegen/personality_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fpersonality_lifetimes.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,5 @@\n // ignore-msvc\n+// ignore-emscripten compiled with panic=abort by default\n \n // compile-flags: -O -C no-prepopulate-passes\n "}, {"sha": "afefb9c9f71a53eb2a6fb6a5ceeb56f7a01cd38b", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,15 +1,14 @@\n // compile-flags: -C no-prepopulate-passes\n \n // ignore-aarch64\n-// ignore-asmjs\n+// ignore-emscripten\n // ignore-mips64\n // ignore-powerpc\n // ignore-powerpc64\n // ignore-powerpc64le\n // ignore-s390x\n // ignore-sparc\n // ignore-sparc64\n-// ignore-wasm\n // ignore-x86\n // ignore-x86_64\n // See repr-transparent.rs"}, {"sha": "0a687078cd8eb3c7c05063fe368c447ab6b600b6", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-abs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-abs.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "9d47339d163cc362f45e59a1be1ff06801e87b6f", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-ceil.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-ceil.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "770b2a730377b6be40f1e4f505d2aa8497beacb1", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-cos.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-cos.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "33c8605066686f028d971a22de2e1e63562cee45", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "f7a8986242d17e80608cc43e9cc2d6b4c61e6697", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-exp2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-exp2.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "a4070317a62bb8cf4f4f5dfcaa07c0b3ef0d85f7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-floor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-floor.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "0800a498cb718f74661e7ba22d3a57df5f05bd2d", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fma.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fma.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "adc44ffd811758a49eacb72ee52974097b5ddaac", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-fsqrt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-fsqrt.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "9c236f196362ec6276509d829e18c2b8bf5a7ae7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "a922161affab600411039669e036f796b35eeb89", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log10.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log10.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "9624acb383fbd17f42bd34c1fd36aab833bd98e7", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-log2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-log2.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "7b9b1aec6c855615d245690bd8ded9def8e278f6", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-minmax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-minmax.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten\n // min-llvm-version 7.0\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "6639e5d652b04be215b89d43e2c65e4926cdadd6", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-pow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-pow.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "5e82ea023d8e094070734651abdf6938a1e4ca11", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-powi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-powi.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "8ca2ca86076492709a79d971b7b2fa26c871768c", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-float-sin.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-float-sin.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,3 @@\n-// ignore-emscripten\n-\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "237d15a5c68cf4239f1e990aebcde51523a637bc", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 80, "deletions": 80, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -119,140 +119,140 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @sadd_i8x2\n #[no_mangle]\n pub unsafe fn sadd_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.sadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x4\n #[no_mangle]\n pub unsafe fn sadd_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.sadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x8\n #[no_mangle]\n pub unsafe fn sadd_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.sadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x16\n #[no_mangle]\n pub unsafe fn sadd_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.sadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x32\n #[no_mangle]\n pub unsafe fn sadd_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.sadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i8x64\n #[no_mangle]\n pub unsafe fn sadd_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.sadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x2\n #[no_mangle]\n pub unsafe fn sadd_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.sadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x4\n #[no_mangle]\n pub unsafe fn sadd_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.sadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x8\n #[no_mangle]\n pub unsafe fn sadd_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x16\n #[no_mangle]\n pub unsafe fn sadd_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i16x32\n #[no_mangle]\n pub unsafe fn sadd_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.sadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x2\n #[no_mangle]\n pub unsafe fn sadd_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.sadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x4\n #[no_mangle]\n pub unsafe fn sadd_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.sadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x8\n #[no_mangle]\n pub unsafe fn sadd_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.sadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i32x16\n #[no_mangle]\n pub unsafe fn sadd_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.sadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x2\n #[no_mangle]\n pub unsafe fn sadd_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.sadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x4\n #[no_mangle]\n pub unsafe fn sadd_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.sadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i64x8\n #[no_mangle]\n pub unsafe fn sadd_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.sadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x2\n #[no_mangle]\n pub unsafe fn sadd_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.sadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @sadd_i128x4\n #[no_mangle]\n pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.sadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -261,140 +261,140 @@ pub unsafe fn sadd_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @uadd_u8x2\n #[no_mangle]\n pub unsafe fn uadd_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.uadd.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x4\n #[no_mangle]\n pub unsafe fn uadd_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.uadd.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x8\n #[no_mangle]\n pub unsafe fn uadd_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.uadd.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x16\n #[no_mangle]\n pub unsafe fn uadd_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.uadd.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x32\n #[no_mangle]\n pub unsafe fn uadd_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.uadd.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u8x64\n #[no_mangle]\n pub unsafe fn uadd_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.uadd.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x2\n #[no_mangle]\n pub unsafe fn uadd_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.uadd.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x4\n #[no_mangle]\n pub unsafe fn uadd_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.uadd.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x8\n #[no_mangle]\n pub unsafe fn uadd_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.uadd.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x16\n #[no_mangle]\n pub unsafe fn uadd_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.uadd.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u16x32\n #[no_mangle]\n pub unsafe fn uadd_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.uadd.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x2\n #[no_mangle]\n pub unsafe fn uadd_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.uadd.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x4\n #[no_mangle]\n pub unsafe fn uadd_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.uadd.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x8\n #[no_mangle]\n pub unsafe fn uadd_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.uadd.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u32x16\n #[no_mangle]\n pub unsafe fn uadd_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.uadd.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x2\n #[no_mangle]\n pub unsafe fn uadd_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.uadd.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x4\n #[no_mangle]\n pub unsafe fn uadd_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.uadd.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u64x8\n #[no_mangle]\n pub unsafe fn uadd_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.uadd.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x2\n #[no_mangle]\n pub unsafe fn uadd_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.uadd.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n // CHECK-LABEL: @uadd_u128x4\n #[no_mangle]\n pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.uadd.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_add(x, y)\n }\n \n@@ -405,140 +405,140 @@ pub unsafe fn uadd_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n // CHECK-LABEL: @ssub_i8x2\n #[no_mangle]\n pub unsafe fn ssub_i8x2(x: i8x2, y: i8x2) -> i8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.ssub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x4\n #[no_mangle]\n pub unsafe fn ssub_i8x4(x: i8x4, y: i8x4) -> i8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.ssub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x8\n #[no_mangle]\n pub unsafe fn ssub_i8x8(x: i8x8, y: i8x8) -> i8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.ssub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x16\n #[no_mangle]\n pub unsafe fn ssub_i8x16(x: i8x16, y: i8x16) -> i8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.ssub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x32\n #[no_mangle]\n pub unsafe fn ssub_i8x32(x: i8x32, y: i8x32) -> i8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.ssub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i8x64\n #[no_mangle]\n pub unsafe fn ssub_i8x64(x: i8x64, y: i8x64) -> i8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.ssub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x2\n #[no_mangle]\n pub unsafe fn ssub_i16x2(x: i16x2, y: i16x2) -> i16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.ssub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x4\n #[no_mangle]\n pub unsafe fn ssub_i16x4(x: i16x4, y: i16x4) -> i16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.ssub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x8\n #[no_mangle]\n pub unsafe fn ssub_i16x8(x: i16x8, y: i16x8) -> i16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.ssub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x16\n #[no_mangle]\n pub unsafe fn ssub_i16x16(x: i16x16, y: i16x16) -> i16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.ssub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i16x32\n #[no_mangle]\n pub unsafe fn ssub_i16x32(x: i16x32, y: i16x32) -> i16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.ssub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x2\n #[no_mangle]\n pub unsafe fn ssub_i32x2(x: i32x2, y: i32x2) -> i32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.ssub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x4\n #[no_mangle]\n pub unsafe fn ssub_i32x4(x: i32x4, y: i32x4) -> i32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.ssub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x8\n #[no_mangle]\n pub unsafe fn ssub_i32x8(x: i32x8, y: i32x8) -> i32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.ssub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i32x16\n #[no_mangle]\n pub unsafe fn ssub_i32x16(x: i32x16, y: i32x16) -> i32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.ssub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x2\n #[no_mangle]\n pub unsafe fn ssub_i64x2(x: i64x2, y: i64x2) -> i64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.ssub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x4\n #[no_mangle]\n pub unsafe fn ssub_i64x4(x: i64x4, y: i64x4) -> i64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.ssub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i64x8\n #[no_mangle]\n pub unsafe fn ssub_i64x8(x: i64x8, y: i64x8) -> i64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.ssub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x2\n #[no_mangle]\n pub unsafe fn ssub_i128x2(x: i128x2, y: i128x2) -> i128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.ssub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @ssub_i128x4\n #[no_mangle]\n pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.ssub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n@@ -547,139 +547,139 @@ pub unsafe fn ssub_i128x4(x: i128x4, y: i128x4) -> i128x4 {\n // CHECK-LABEL: @usub_u8x2\n #[no_mangle]\n pub unsafe fn usub_u8x2(x: u8x2, y: u8x2) -> u8x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9]+}}, <2 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i8> @llvm.usub.sat.v2i8(<2 x i8> %{{[0-9a-z]+}}, <2 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x4\n #[no_mangle]\n pub unsafe fn usub_u8x4(x: u8x4, y: u8x4) -> u8x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9]+}}, <4 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i8> @llvm.usub.sat.v4i8(<4 x i8> %{{[0-9a-z]+}}, <4 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x8\n #[no_mangle]\n pub unsafe fn usub_u8x8(x: u8x8, y: u8x8) -> u8x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9]+}}, <8 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i8> @llvm.usub.sat.v8i8(<8 x i8> %{{[0-9a-z]+}}, <8 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x16\n #[no_mangle]\n pub unsafe fn usub_u8x16(x: u8x16, y: u8x16) -> u8x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9]+}}, <16 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i8> @llvm.usub.sat.v16i8(<16 x i8> %{{[0-9a-z]+}}, <16 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x32\n #[no_mangle]\n pub unsafe fn usub_u8x32(x: u8x32, y: u8x32) -> u8x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9]+}}, <32 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i8> @llvm.usub.sat.v32i8(<32 x i8> %{{[0-9a-z]+}}, <32 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u8x64\n #[no_mangle]\n pub unsafe fn usub_u8x64(x: u8x64, y: u8x64) -> u8x64 {\n-    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9]+}}, <64 x i8> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <64 x i8> @llvm.usub.sat.v64i8(<64 x i8> %{{[0-9a-z]+}}, <64 x i8> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x2\n #[no_mangle]\n pub unsafe fn usub_u16x2(x: u16x2, y: u16x2) -> u16x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9]+}}, <2 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i16> @llvm.usub.sat.v2i16(<2 x i16> %{{[0-9a-z]+}}, <2 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x4\n #[no_mangle]\n pub unsafe fn usub_u16x4(x: u16x4, y: u16x4) -> u16x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9]+}}, <4 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i16> @llvm.usub.sat.v4i16(<4 x i16> %{{[0-9a-z]+}}, <4 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x8\n #[no_mangle]\n pub unsafe fn usub_u16x8(x: u16x8, y: u16x8) -> u16x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9]+}}, <8 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i16> @llvm.usub.sat.v8i16(<8 x i16> %{{[0-9a-z]+}}, <8 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x16\n #[no_mangle]\n pub unsafe fn usub_u16x16(x: u16x16, y: u16x16) -> u16x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9]+}}, <16 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i16> @llvm.usub.sat.v16i16(<16 x i16> %{{[0-9a-z]+}}, <16 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u16x32\n #[no_mangle]\n pub unsafe fn usub_u16x32(x: u16x32, y: u16x32) -> u16x32 {\n-    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9]+}}, <32 x i16> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <32 x i16> @llvm.usub.sat.v32i16(<32 x i16> %{{[0-9a-z]+}}, <32 x i16> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x2\n #[no_mangle]\n pub unsafe fn usub_u32x2(x: u32x2, y: u32x2) -> u32x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9]+}}, <2 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i32> @llvm.usub.sat.v2i32(<2 x i32> %{{[0-9a-z]+}}, <2 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x4\n #[no_mangle]\n pub unsafe fn usub_u32x4(x: u32x4, y: u32x4) -> u32x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9]+}}, <4 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i32> @llvm.usub.sat.v4i32(<4 x i32> %{{[0-9a-z]+}}, <4 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x8\n #[no_mangle]\n pub unsafe fn usub_u32x8(x: u32x8, y: u32x8) -> u32x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9]+}}, <8 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i32> @llvm.usub.sat.v8i32(<8 x i32> %{{[0-9a-z]+}}, <8 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u32x16\n #[no_mangle]\n pub unsafe fn usub_u32x16(x: u32x16, y: u32x16) -> u32x16 {\n-    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9]+}}, <16 x i32> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <16 x i32> @llvm.usub.sat.v16i32(<16 x i32> %{{[0-9a-z]+}}, <16 x i32> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x2\n #[no_mangle]\n pub unsafe fn usub_u64x2(x: u64x2, y: u64x2) -> u64x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9]+}}, <2 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i64> @llvm.usub.sat.v2i64(<2 x i64> %{{[0-9a-z]+}}, <2 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x4\n #[no_mangle]\n pub unsafe fn usub_u64x4(x: u64x4, y: u64x4) -> u64x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9]+}}, <4 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i64> @llvm.usub.sat.v4i64(<4 x i64> %{{[0-9a-z]+}}, <4 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u64x8\n #[no_mangle]\n pub unsafe fn usub_u64x8(x: u64x8, y: u64x8) -> u64x8 {\n-    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9]+}}, <8 x i64> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <8 x i64> @llvm.usub.sat.v8i64(<8 x i64> %{{[0-9a-z]+}}, <8 x i64> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x2\n #[no_mangle]\n pub unsafe fn usub_u128x2(x: u128x2, y: u128x2) -> u128x2 {\n-    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9]+}}, <2 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <2 x i128> @llvm.usub.sat.v2i128(<2 x i128> %{{[0-9a-z]+}}, <2 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }\n \n // CHECK-LABEL: @usub_u128x4\n #[no_mangle]\n pub unsafe fn usub_u128x4(x: u128x4, y: u128x4) -> u128x4 {\n-    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9]+}}, <4 x i128> %{{[0-9]+}})\n+    // CHECK: %{{[0-9]+}} = call <4 x i128> @llvm.usub.sat.v4i128(<4 x i128> %{{[0-9a-z]+}}, <4 x i128> %{{[0-9a-z]+}})\n     simd_saturating_sub(x, y)\n }"}, {"sha": "543664014868c5ad07606c2053bf3f6f0a866701", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-bitmask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-bitmask.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -29,7 +29,7 @@ extern \"platform-intrinsic\" {\n // CHECK-LABEL: @bitmask_int\n #[no_mangle]\n pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -39,7 +39,7 @@ pub unsafe fn bitmask_int(x: i32x2) -> u8 {\n // CHECK-LABEL: @bitmask_uint\n #[no_mangle]\n pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9]+}}, <i32 31, i32 31>\n+    // CHECK: [[A:%[0-9]+]] = lshr <2 x i32> %{{[0-9a-z]+}}, <i32 31, i32 31>\n     // CHECK: [[B:%[0-9]+]] = trunc <2 x i32> [[A]] to <2 x i1>\n     // CHECK: [[C:%[0-9]+]] = bitcast <2 x i1> [[B]] to i2\n     // CHECK: %{{[0-9]+}} = zext i2 [[C]] to i8\n@@ -49,7 +49,7 @@ pub unsafe fn bitmask_uint(x: u32x2) -> u8 {\n // CHECK-LABEL: @bitmask_int16\n #[no_mangle]\n pub unsafe fn bitmask_int16(x: i8x16) -> u16 {\n-    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n+    // CHECK: [[A:%[0-9]+]] = lshr <16 x i8> %{{[0-9a-z]+}}, <i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7, i8 7>\n     // CHECK: [[B:%[0-9]+]] = trunc <16 x i8> [[A]] to <16 x i1>\n     // CHECK: %{{[0-9]+}} = bitcast <16 x i1> [[B]] to i16\n     // CHECK-NOT: zext"}, {"sha": "3b1f4398f90054e3de104711b478a3751512878b", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-gather.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-gather.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "9fce849e5238c572b20a0534b23af7053ce71ab2", "filename": "src/test/codegen/simd-intrinsic/simd-intrinsic-generic-scatter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-scatter.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,3 @@\n-// ignore-emscripten\n // ignore-tidy-linelength\n \n // compile-flags: -C no-prepopulate-passes"}, {"sha": "98a9ff9cbe441da5b50473fe093740cdd359ad78", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,3 +1,4 @@\n+// ignore-emscripten vectors passed directly\n // compile-flags: -C no-prepopulate-passes\n \n // This test that using union forward the abi of the inner type, as"}, {"sha": "3fa3822831b5275b54d7e43df427a68f04a2d825", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,7 @@\n // aux-build:weak-lang-items.rs\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n-// ignore-wasm32-bare compiled with panic=abort, personality not required\n+// ignore-emscripten compiled with panic=abort, personality not required\n \n #![no_std]\n "}, {"sha": "2bcb06d6eb8b7c976ac80659c75912b29cdda788", "filename": "src/test/incremental/change_crate_dep_kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_crate_dep_kind.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // Test that we detect changes to the `dep_kind` query. If the change is not\n // detected then -Zincremental-verify-ich will trigger an assertion.\n \n+// ignore-emscripten compiled with panic=abort by default\n // revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph -Cpanic=unwind\n // build-pass (FIXME(62277): could be check-pass?)"}, {"sha": "08a0232f661f72f9c8765f2151c5eced51bb8bc5", "filename": "src/test/incremental/commandline-args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fcommandline-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcommandline-args.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // Test that changing a tracked commandline argument invalidates\n // the cache while changing an untracked one doesn't.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2 rpass3\n // compile-flags: -Z query-dep-graph\n "}, {"sha": "b01f02444eae8dfa516799efc3e30177dee12b19", "filename": "src/test/incremental/remapped_paths_cc/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fremapped_paths_cc%2Fmain.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Z query-dep-graph -g\n // aux-build:extern_crate.rs\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // This test case makes sure that we detect if paths emitted into debuginfo\n // are changed, even when the change happens in an external crate.\n "}, {"sha": "367416430f86b5a63c81aa0b637976982510753e", "filename": "src/test/incremental/span_hash_stable/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspan_hash_stable%2Fmain.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -3,6 +3,7 @@\n // the spans and this test makes sure that we handle them correctly by hashing\n // file:line:column instead of raw byte offset.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -g -Z query-dep-graph\n "}, {"sha": "f5cae15a4bc7cf22a3d4021625bd4e3af3ffdbba", "filename": "src/test/incremental/spans_in_type_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_in_type_debuginfo.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // Test that moving a type definition within a source file does not affect\n // re-compilation.\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph -g\n "}, {"sha": "e6fdc7cb3a0fc24138d3ea1e113fff88757a592e", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -3,6 +3,7 @@\n \n // revisions:rpass1 rpass2\n \n+// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n \n #![feature(rustc_attrs)]"}, {"sha": "4b66c07b0934b48560f6276bfbaae6f4de180bca", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "b595c100039d6bed04a7c5ae388a61668ad8e0b7", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // Test that we generate StorageDead on unwind paths for generators.\n //"}, {"sha": "8824496fdb07cc4a68530ae82a862828d20c52a6", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // check that we don't emit multiple drop flags when they are not needed.\n "}, {"sha": "93250fd48d82d00935eb568c10135625baa5b78c", "filename": "src/test/mir-opt/issue-62289.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fissue-62289.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-62289.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,7 @@\n // check that we don't forget to drop the Box if we early return before\n // initializing it\n // ignore-tidy-linelength\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(box_syntax)]\n "}, {"sha": "370cd593b02bb75aad365419f82e84c6bfa35965", "filename": "src/test/mir-opt/no-spurious-drop-after-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-spurious-drop-after-call.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // Test that after the call to `std::mem::drop` we do not generate a\n // MIR drop of the argument. (We used to have a `DROP(_2)` in the code"}, {"sha": "eaa1fbd69ecc6beec8277fa021d44118a4bc577a", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n fn main() {\n     let mut x = Packed(Aligned(Droppy(0)));"}, {"sha": "71beaa736639ddfa8151b6b953a779f3dfc2d129", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // Test that the fake borrows for matches are removed after borrow checking.\n \n-// ignore-wasm32-bare\n+// ignore-emscripten compiled with panic=abort by default\n \n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {"}, {"sha": "a0bdfb3ab8ba94c9fb5fae19aafb2fe6cf476c0c", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,4 @@\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // ignore-tidy-linelength\n // compile-flags: -Z mir-emit-retag -Z mir-opt-level=0 -Z span_free_formats\n "}, {"sha": "2f48b852566e0370e2ff9dbb2f0a48fcf128181b", "filename": "src/test/run-make/wasm-custom-section/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "76698c0aae3ba509a6e942522c9fb1df09876812", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown"}, {"sha": "7e47ba4850e38a2047082f3143467d6b5b050736", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown"}, {"sha": "fe63e66f242b4c5e03fd0bc271fdb7c6e24c7378", "filename": "src/test/run-make/wasm-import-module/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n- # only-wasm32\n+ # only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "68397e4bc6e18332b5875f9327759f3374d13039", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a"}, {"sha": "62bd0f0872ebee45a5306b8f8f551b4be02ff356", "filename": "src/test/run-make/wasm-symbols-not-exported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "7a923375c1813720912b3b075f7f599c03834289", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-# only-wasm32\n+# only-wasm32-bare\n \n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown"}, {"sha": "b30e8f00e4035c93067b64624a8c52c085608c99", "filename": "src/test/ui/abi/statics/static-mut-foreign.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fstatics%2Fstatic-mut-foreign.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -5,6 +5,10 @@\n \n // ignore-wasm32-bare no libc to test ffi with\n \n+// FIXME: This will work on emscripten once libc is updated to include\n+// rust-lang/libc/#1478\n+// ignore-emscripten libc type mismatch\n+\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "b63d5408a7147f9d66bcdd72b684db25d6003fb1", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -7,7 +7,7 @@\n //\n // See issue #59123 for a full explanation.\n \n-// ignore-wasm32-bare (sizes don't match)\n+// ignore-emscripten (sizes don't match)\n // run-pass\n \n // edition:2018"}, {"sha": "61f6ed1b7b2ce4fac4e4a2237c85c1afc4e92225", "filename": "src/test/ui/async-await/issue-60709.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -Copt-level=z -Cdebuginfo=2 --edition=2018\n \n // run-pass\n+// ignore-asmjs wasm2js does not support source maps yet\n \n use std::future::Future;\n use std::task::Poll;"}, {"sha": "4e0a238c5d48d9b86c02a4abe18a389cc7182a1c", "filename": "src/test/ui/binding/fn-arg-incomplete-pattern-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Ffn-arg-incomplete-pattern-drop-order.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,7 +2,7 @@\n // Check that partially moved from function parameters are dropped after the\n // named bindings that move from them.\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n use std::{panic, cell::RefCell};\n "}, {"sha": "e6d17def1477e0ff7dec6967047903bc2e7ec8e3", "filename": "src/test/ui/binding/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fmatch-arm-statics.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(dead_code)]\n // compile-flags: -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n #[derive(PartialEq, Eq)]\n struct NewBool(bool);"}, {"sha": "1fd91440a7884b4d07006a24b01c213f0674dfdf", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(unused_variables)]\n #![allow(unused_imports)]\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n // Test that builtin implementations of `Clone` cleanup everything\n // in case of unwinding."}, {"sha": "c2c21bca7ef71be79dfafb356545828905e463f0", "filename": "src/test/ui/catch-unwind-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcatch-unwind-bang.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n fn worker() -> ! {\n     panic!()"}, {"sha": "d0a3eccd17763ec157559bc839e760e79955fbfc", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-emscripten no i128 support\n #![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);"}, {"sha": "43f75b0344be76f2cc7e87c2575b0c17f0f6d64c", "filename": "src/test/ui/debuginfo-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdebuginfo-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo-lto.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -7,6 +7,7 @@\n // aux-build:debuginfo-lto-aux.rs\n // compile-flags: -C lto -g\n // no-prefer-dynamic\n+// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate debuginfo_lto_aux;\n "}, {"sha": "bec86d6465ae94e261e9357fb499a82c15bdd38a", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -5,7 +5,7 @@\n \n // run-pass\n // edition:2018\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(slice_patterns)]\n #![allow(unused)]"}, {"sha": "7fd3f420a6d5bab7cd08c449f7cb4bc47395c819", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,7 +2,7 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(generators, generator_trait, untagged_unions)]\n #![feature(slice_patterns)]"}, {"sha": "9d96b4f63fb6c2e6b97af4db1fc5547c874d1935", "filename": "src/test/ui/extern/extern-const.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.fixed?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -5,7 +5,8 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32 no external library to link to.\n+// ignore-wasm32-bare no external library to link to.\n+// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "7cef5b3497b5a22b4a7d56fdcd9d2135fba49fa9", "filename": "src/test/ui/extern/extern-const.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -5,7 +5,8 @@\n // compile. To sidestep this by using one that *is* defined.\n \n // run-rustfix\n-// ignore-wasm32 no external library to link to.\n+// ignore-wasm32-bare no external library to link to.\n+// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g\n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "258202b6903d31cc3e18070a31b5ffa057e7f25d", "filename": "src/test/ui/extern/extern-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n error: extern items cannot be `const`\n-  --> $DIR/extern-const.rs:15:5\n+  --> $DIR/extern-const.rs:16:5\n    |\n LL |     const rust_dbg_static_mut: libc::c_int;\n    |     ^^^^^ help: try using a static value: `static`"}, {"sha": "d42d09d401e874655082fbb9a019c15049eb78ba", "filename": "src/test/ui/generator/issue-58888.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-58888.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // compile-flags: -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "b1a5cc67e86b368e4045a9c0768c70e360510f1f", "filename": "src/test/ui/generator/panic-drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-drops.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-wasm32-bare compiled as panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "06c026180190a08ebb8998815f8e241c09f3277f", "filename": "src/test/ui/generator/panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpanic-safe.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "ab18be58155df89db560adfdf37305939c2a206c", "filename": "src/test/ui/generator/resume-after-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-after-return.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "2864fbb2f3c8d4dcfe565f9b0e4df00586a5caa1", "filename": "src/test/ui/generator/size-moved-locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsize-moved-locals.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -11,6 +11,7 @@\n \n // edition:2018\n // ignore-wasm32 issue #62807\n+// ignore-asmjs issue #62807\n \n #![feature(generators, generator_trait)]\n "}, {"sha": "bac6c8d872b401236efcd33516224d4be52c6459", "filename": "src/test/ui/intrinsics/intrinsics-integer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fintrinsics-integer.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-emscripten no i128 support\n \n #![feature(intrinsics)]\n "}, {"sha": "29e974ad83d1e27079a740d0eee6b53a5a7dd294", "filename": "src/test/ui/issues/issue-14875.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14875.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare always compiled as panic=abort right now\n+// ignore-emscripten compiled with panic=abort by default\n \n // Check that values are not leaked when a dtor panics (#14875)\n "}, {"sha": "988ebe03ccf6644e6e787f349e38d07b2c84d681", "filename": "src/test/ui/issues/issue-23477.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23477.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,4 +1,5 @@\n // build-pass\n+// ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g\n \n pub struct Dst {"}, {"sha": "f08bcdfe6d16cfececeffc4a1f66f80ba5ed5479", "filename": "src/test/ui/issues/issue-24687-embed-debuginfo/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24687-embed-debuginfo%2Fmain.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n // aux-build:issue-24687-lib.rs\n // compile-flags:-g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n extern crate issue_24687_lib as d;\n "}, {"sha": "0f92fc2f7f31add41fb1e5587aaa35c6e676ae9a", "filename": "src/test/ui/issues/issue-24945-repeat-dash-opts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24945-repeat-dash-opts.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -3,6 +3,7 @@\n // as options to the compiler.\n \n // compile-flags:-g -g -O -O\n+// ignore-asmjs wasm2js does not support source maps yet\n \n fn main() {\n     assert_eq!(1, 1);"}, {"sha": "2a8750d3e431fbb53145878efa9fedae346b21f0", "filename": "src/test/ui/issues/issue-26484.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26484.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // compile-flags:-g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n fn helper<F: FnOnce(usize) -> bool>(_f: F) {\n     print!(\"\");"}, {"sha": "5237a2f67bdd7036d2dd512eb72237b3294287c5", "filename": "src/test/ui/issues/issue-29948.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29948.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "2501e1430b3d1ee658291e9cc42872f35052f0d6", "filename": "src/test/ui/issues/issue-33096.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33096.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // compile-flags: -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ops::Deref;\n "}, {"sha": "a6b137ba64594d21b6a68a5f045ef635265e1265", "filename": "src/test/ui/issues/issue-33992.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33992.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-windows\n // ignore-macos\n-// ignore-wasm32-bare common linkage not implemented right now\n+// ignore-emscripten common linkage not implemented right now\n \n #![feature(linkage)]\n "}, {"sha": "88dcdd4113807cb4fc3473abfad566c194592957", "filename": "src/test/ui/issues/issue-34569.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34569.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n // compile-flags:-g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n // In this test we just want to make sure that the code below does not lead to\n // a debuginfo verification assertion during compilation. This was caused by the"}, {"sha": "5657ba69f9449eb9d7e3bc9bcfa6f284acbf00a4", "filename": "src/test/ui/issues/issue-36856.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36856.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,6 +2,7 @@\n // Regression test for #36856.\n \n // compile-flags:-g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n fn g() -> bool {\n     false"}, {"sha": "01a5d563639b53900885d06d37d4d6a2e1b89d2b", "filename": "src/test/ui/issues/issue-42210.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42210.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,6 +2,7 @@\n // Regression test for #42210.\n \n // compile-flags: -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n trait Foo {\n     fn foo() { }"}, {"sha": "2a932db05af26142c2e2913699fecff765079fef", "filename": "src/test/ui/issues/issue-43853.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43853.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n use std::panic;\n "}, {"sha": "5c5ac59873a3a386eddee4e4fccf5b18cabf4e14", "filename": "src/test/ui/issues/issue-45731.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45731.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_variables)]\n // compile-flags:--test -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n #[cfg(target_os = \"macos\")]\n #[test]"}, {"sha": "40c3117f01ce904b6d03ef3e760464e4e952e0da", "filename": "src/test/ui/issues/issue-46519.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46519.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,8 @@\n // run-pass\n // compile-flags:--test -O\n \n+// ignore-emscripten compiled with panic=abort by default\n+\n #[test]\n #[should_panic(expected = \"creating inhabited type\")]\n fn test() {"}, {"sha": "b7aa6422876389ee90f8b80933c36e9dac44f309", "filename": "src/test/ui/issues/issue-48508.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48508.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -8,6 +8,7 @@\n \n // compile-flags:-g\n // ignore-pretty issue #37195\n+// ignore-asmjs wasm2js does not support source maps yet\n \n #![feature(non_ascii_idents)]\n "}, {"sha": "767e06c4e90c5b3358fb68a0c16850c4fb846785", "filename": "src/test/ui/issues/issue-49579.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49579.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,4 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-// ignore-emscripten no i128 support\n \n fn fibs(n: u32) -> impl Iterator<Item=u128> {\n     (0 .. n)"}, {"sha": "af93f76221d4e2d271258fb44d06dc93ececc90f", "filename": "src/test/ui/issues/issue-58463.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58463.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // compile-flags:-C debuginfo=2\n+// ignore-asmjs wasm2js does not support source maps yet\n+\n fn foo() -> impl Copy {\n     foo\n }"}, {"sha": "fdd285dcad2a13334a8484581bfd4fca3ab7a679", "filename": "src/test/ui/iterators/iter-count-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-count-overflow-debug.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "b578999af8e948ed6cf29d6fd8b75d77318ad746", "filename": "src/test/ui/iterators/iter-position-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-position-overflow-debug.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // only-32bit too impatient for 2\u2076\u2074 items\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes -C opt-level=3\n \n use std::panic;"}, {"sha": "3872a03b682592cabce8cf18b7cfc8a7a51d8091", "filename": "src/test/ui/iterators/iter-step-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-step-overflow-debug.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "4a9e8cdb72e70bb7fac183549d792d85f47cabf7", "filename": "src/test/ui/iterators/iter-sum-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-debug.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C debug_assertions=yes\n \n use std::panic;"}, {"sha": "6bd1425e32465f05451fbba66d6891fd197c073e", "filename": "src/test/ui/iterators/iter-sum-overflow-overflow-checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fiter-sum-overflow-overflow-checks.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: -C overflow-checks\n \n use std::panic;"}, {"sha": "1c791bb1ca3d61f061c6f79668c3db65c620b82b", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -13,6 +13,8 @@\n // compile-flags: --test -C debug_assertions=yes\n // revisions: std core\n \n+// ignore-emscripten compiled with panic=abort by default\n+\n #![cfg_attr(core, no_std)]\n \n #[cfg(std)] use std::fmt;"}, {"sha": "de8d958af45e34a144561acecba37cb6c7db61d4", "filename": "src/test/ui/mir/mir_calls_to_shims.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_calls_to_shims.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![feature(fn_traits)]\n #![feature(never_type)]"}, {"sha": "2bc5cf1c976373b83721ac4a3e0648212bec3312", "filename": "src/test/ui/mir/mir_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_drop_order.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n use std::cell::RefCell;\n use std::panic;"}, {"sha": "ced3c61ec162a6d784e3382ca31f04af1111f803", "filename": "src/test/ui/numbers-arithmetic/float-int-invalid-const-cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Ffloat-int-invalid-const-cast.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-emscripten no i128 support\n \n #![deny(const_err)]\n "}, {"sha": "ef558c0aa0c02c54ae8cd4f3aeb750423c029ada", "filename": "src/test/ui/numbers-arithmetic/i128.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fi128.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,9 +1,6 @@\n // run-pass\n #![allow(overflowing_literals)]\n \n-// ignore-emscripten i128 doesn't work\n-\n-\n #![feature(test)]\n \n extern crate test;"}, {"sha": "c1959866e5c257ceea998dfd25c57324f2ff7bab", "filename": "src/test/ui/numbers-arithmetic/next-power-of-two-overflow-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fnext-power-of-two-overflow-debug.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // compile-flags: -C debug_assertions=yes\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // ignore-emscripten dies with an LLVM error\n \n use std::panic;"}, {"sha": "2671a267f4a870c57f11976648bde8acaf346656", "filename": "src/test/ui/numbers-arithmetic/u128-as-f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128-as-f32.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-// ignore-emscripten u128 not supported\n \n #![feature(test)]\n #![deny(overflowing_literals)]"}, {"sha": "0b2305c6e8b1acc9c34ac28e2fb99a0f61f584f7", "filename": "src/test/ui/numbers-arithmetic/u128.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumbers-arithmetic%2Fu128.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,4 @@\n // run-pass\n-// ignore-emscripten u128 not supported\n-\n \n #![feature(test)]\n "}, {"sha": "6dcb852a3669f66f31cf49db429d4ea5f83c9f16", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -4,7 +4,7 @@\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // error-pattern: is not compiled with this crate's panic strategy `unwind`\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "e7811d40b5b9a74f1e3bf1be6df673eeaa58c207", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:is incompatible with this crate's strategy of `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "44671796c01a3e37b4cc77f50806e4c4fc189e58", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -2,7 +2,7 @@\n // aux-build:panic-runtime-abort.rs\n // aux-build:wants-panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![no_std]\n #![no_main]"}, {"sha": "72b844d8b4886d366a4a81eea4bc2e2d792365d8", "filename": "src/test/ui/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-uninitialized-zeroed.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare always compiled as panic=abort right now and this requires unwinding\n+// ignore-emscripten compiled with panic=abort by default\n // This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n // in a runtime panic.\n "}, {"sha": "690a76ef3e0afe8a0c9531355bfe78db3abd5056", "filename": "src/test/ui/proc-macro/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // aux-build:expand-with-a-macro.rs\n \n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![deny(warnings)]\n "}, {"sha": "26c51efea1e1ca8ed7310f741aece8cb5c3bffc4", "filename": "src/test/ui/reachable-unnameable-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Freachable-unnameable-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable-unnameable-items.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // aux-build:reachable-unnameable-items.rs\n \n extern crate reachable_unnameable_items;"}, {"sha": "c8e8b9dcfc6a7e6788aa2b43c0e73d20b8272214", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,6 +1,8 @@\n // compile-flags: --test\n // run-pass\n \n+// ignore-emscripten compiled with panic=abort by default\n+\n #![feature(test)]\n \n extern crate test;"}, {"sha": "b10b6ec11b53a346f19d47a7cdb891a5a19664b0", "filename": "src/test/ui/rfcs/rfc1857-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1857-drop-order.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n \n #![allow(dead_code, unreachable_code)]\n "}, {"sha": "51a572899f81952979ee056fd9e0d1eb6c91cc0e", "filename": "src/test/ui/sepcomp/sepcomp-lib-lto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsepcomp%2Fsepcomp-lib-lto.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -4,6 +4,7 @@\n \n // aux-build:sepcomp_lib.rs\n // compile-flags: -C lto -g\n+// ignore-asmjs wasm2js does not support source maps yet\n // no-prefer-dynamic\n \n extern crate sepcomp_lib;"}, {"sha": "55b743ab7c7ea315b3527e0f1002e3d3060356e3", "filename": "src/test/ui/test-attrs/test-allow-fail-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-allow-fail-attr.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: --test\n #![feature(allow_fail)]\n "}, {"sha": "2284953fbbe947365182df835157d8ce835eee35", "filename": "src/test/ui/test-attrs/test-should-fail-good-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-should-fail-good-message.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-emscripten compiled with panic=abort by default\n // compile-flags: --test\n #[test]\n #[should_panic(expected = \"foo\")]"}, {"sha": "5d1e00d2d3535edac4eae6ca5f88ce9bbf34187f", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unique-type-id.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -10,6 +10,7 @@\n // This is a regression test for issue #17021.\n //\n // compile-flags: -g\n+// ignore-asmjs wasm2js does not support source maps yet\n \n use std::ptr;\n "}, {"sha": "03094885065847b8a7f9624af9a1d9fe5e9ef647", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7870050796e5904a0fc85ecbe6fa6dde1cfe0c91/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=7870050796e5904a0fc85ecbe6fa6dde1cfe0c91", "patch": "@@ -141,7 +141,10 @@ impl EarlyProps {\n                 if config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln) {\n                     props.ignore = Ignore::Ignore;\n                 }\n-\n+                // FIXME: Re-enable run-fail once panics are handled correctly\n+                if config.target.contains(\"emscripten\") && config.mode == common::RunFail {\n+                    props.ignore = Ignore::Ignore;\n+                }\n             }\n \n             if (config.mode == common::DebugInfoGdb || config.mode == common::DebugInfoGdbLldb) &&"}]}