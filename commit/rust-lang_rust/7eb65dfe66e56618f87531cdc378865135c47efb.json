{"sha": "7eb65dfe66e56618f87531cdc378865135c47efb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjY1ZGZlNjZlNTY2MThmODc1MzFjZGMzNzg4NjUxMzVjNDdlZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T00:58:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-09T00:58:38Z"}, "message": "Auto merge of #64108 - estebank:issue-36836, r=Centril\n\nDo not complain about unconstrained params when Self is Ty Error\n\nFix #36836.", "tree": {"sha": "93b0dedbfd2a054b8de311e8e8b51e30dcc9dfd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b0dedbfd2a054b8de311e8e8b51e30dcc9dfd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb65dfe66e56618f87531cdc378865135c47efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb65dfe66e56618f87531cdc378865135c47efb", "html_url": "https://github.com/rust-lang/rust/commit/7eb65dfe66e56618f87531cdc378865135c47efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb65dfe66e56618f87531cdc378865135c47efb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6624ed9806fe4caa10de5b94e590f71a4a1eab9", "html_url": "https://github.com/rust-lang/rust/commit/a6624ed9806fe4caa10de5b94e590f71a4a1eab9"}, {"sha": "c44ffafab902e687ef01d2366a7de7237e25245c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44ffafab902e687ef01d2366a7de7237e25245c", "html_url": "https://github.com/rust-lang/rust/commit/c44ffafab902e687ef01d2366a7de7237e25245c"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "dd44f86717fe5fd1fe472261ca6a99ee4fa14957", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=7eb65dfe66e56618f87531cdc378865135c47efb", "patch": "@@ -20,10 +20,10 @@ impl From<ty::ParamConst> for Parameter {\n }\n \n /// Returns the set of parameters constrained by the impl header.\n-pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,\n-                                 impl_trait_ref: Option<ty::TraitRef<'tcx>>)\n-                                 -> FxHashSet<Parameter>\n-{\n+pub fn parameters_for_impl<'tcx>(\n+    impl_self_ty: Ty<'tcx>,\n+    impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n+) -> FxHashSet<Parameter> {\n     let vec = match impl_trait_ref {\n         Some(tr) => parameters_for(&tr, false),\n         None => parameters_for(&impl_self_ty, false),\n@@ -36,12 +36,10 @@ pub fn parameters_for_impl<'tcx>(impl_self_ty: Ty<'tcx>,\n /// uniquely determined by `t` (see RFC 447). If it is true, return the list\n /// of parameters whose values are needed in order to constrain `ty` - these\n /// differ, with the latter being a superset, in the presence of projections.\n-pub fn parameters_for<'tcx, T>(t: &T,\n-                               include_nonconstraining: bool)\n-                               -> Vec<Parameter>\n-    where T: TypeFoldable<'tcx>\n-{\n-\n+pub fn parameters_for<'tcx>(\n+    t: &impl TypeFoldable<'tcx>,\n+    include_nonconstraining: bool,\n+) -> Vec<Parameter> {\n     let mut collector = ParameterCollector {\n         parameters: vec![],\n         include_nonconstraining,"}, {"sha": "bc0f17c3bf0fb6290ab877278b8c678dd2841785", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=7eb65dfe66e56618f87531cdc378865135c47efb", "patch": "@@ -12,7 +12,7 @@ use crate::constrained_generic_params as cgp;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n@@ -99,6 +99,15 @@ fn enforce_impl_params_are_constrained(\n ) {\n     // Every lifetime used in an associated type must be constrained.\n     let impl_self_ty = tcx.type_of(impl_def_id);\n+    if impl_self_ty.references_error() {\n+        // Don't complain about unconstrained type params when self ty isn't known due to errors.\n+        // (#36836)\n+        tcx.sess.delay_span_bug(\n+            tcx.def_span(impl_def_id),\n+            \"potentially unconstrained type parameters weren't evaluated\",\n+        );\n+        return;\n+    }\n     let impl_generics = tcx.generics_of(impl_def_id);\n     let impl_predicates = tcx.predicates_of(impl_def_id);\n     let impl_trait_ref = tcx.impl_trait_ref(impl_def_id);"}, {"sha": "99c56213153e40180d74baa9bfc54b9ed8681b27", "filename": "src/test/ui/issues/issue-36836.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36836.rs?ref=7eb65dfe66e56618f87531cdc378865135c47efb", "patch": "@@ -0,0 +1,15 @@\n+// Previously, in addition to the real cause of the problem as seen below,\n+// the compiler would tell the user:\n+//\n+// ```\n+// error[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or\n+// predicates\n+// ```\n+//\n+// With this test, we check that only the relevant error is emitted.\n+\n+trait Foo {}\n+\n+impl<T> Foo for Bar<T> {} //~ ERROR cannot find type `Bar` in this scope\n+\n+fn main() {}"}, {"sha": "418194fac9923c49e5cefcb5215eb37117365864", "filename": "src/test/ui/issues/issue-36836.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7eb65dfe66e56618f87531cdc378865135c47efb/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36836.stderr?ref=7eb65dfe66e56618f87531cdc378865135c47efb", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `Bar` in this scope\n+  --> $DIR/issue-36836.rs:13:17\n+   |\n+LL | impl<T> Foo for Bar<T> {}\n+   |                 ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}