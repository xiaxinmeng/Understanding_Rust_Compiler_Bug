{"sha": "3acee3b6c5381d84fe4ad68e077517bd0975333d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhY2VlM2I2YzUzODFkODRmZTRhZDY4ZTA3NzUxN2JkMDk3NTMzM2Q=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T09:18:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T09:18:48Z"}, "message": "const_err lint all constant expressions", "tree": {"sha": "51fe56f8c4eb0df70573a858dc344a193fdbdffe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51fe56f8c4eb0df70573a858dc344a193fdbdffe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3acee3b6c5381d84fe4ad68e077517bd0975333d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3acee3b6c5381d84fe4ad68e077517bd0975333d", "html_url": "https://github.com/rust-lang/rust/commit/3acee3b6c5381d84fe4ad68e077517bd0975333d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3acee3b6c5381d84fe4ad68e077517bd0975333d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee983230c965de4f45032a1bdb852a23dae0dbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee983230c965de4f45032a1bdb852a23dae0dbad", "html_url": "https://github.com/rust-lang/rust/commit/ee983230c965de4f45032a1bdb852a23dae0dbad"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "32bcac40289eb466953c5b13950eaecb7bbcb168", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=3acee3b6c5381d84fe4ad68e077517bd0975333d", "patch": "@@ -28,8 +28,8 @@ use rustc::dep_graph::DepNode;\n use rustc::ty::cast::{CastKind};\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n-use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal};\n-use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n+use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll};\n+use rustc_const_eval::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp};\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n@@ -437,29 +437,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 }\n                 intravisit::walk_expr(self, ex);\n             }\n-            // Division by zero and overflow checking.\n-            hir::ExprBinary(op, _, _) => {\n-                intravisit::walk_expr(self, ex);\n-                let div_or_rem = op.node == hir::BiDiv || op.node == hir::BiRem;\n-                match node_ty.sty {\n-                    ty::TyUint(_) | ty::TyInt(_) if div_or_rem => {\n-                        if !self.qualif.intersects(ConstQualif::NOT_CONST) {\n-                            match eval_const_expr_partial(\n-                                    self.tcx, ex, ExprTypeChecked, None) {\n-                                Ok(_) => {}\n-                                Err(ConstEvalErr { kind: UnimplementedConstVal(_), ..}) |\n-                                Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n-                                Err(msg) => {\n-                                    self.tcx.sess.add_lint(CONST_ERR, ex.id,\n-                                                           msg.span,\n-                                                           msg.description().into_owned())\n-                                }\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n             _ => intravisit::walk_expr(self, ex)\n         }\n \n@@ -505,6 +482,24 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n             }\n             None => {}\n         }\n+\n+        if self.mode == Mode::Var && !self.qualif.intersects(ConstQualif::NOT_CONST) {\n+            match eval_const_expr_partial(self.tcx, ex, ExprTypeChecked, None) {\n+                Ok(_) => {}\n+                Err(ConstEvalErr { kind: UnimplementedConstVal(_), ..}) |\n+                Err(ConstEvalErr { kind: MiscCatchAll, ..}) |\n+                Err(ConstEvalErr { kind: MiscBinaryOp, ..}) |\n+                Err(ConstEvalErr { kind: ErroneousReferencedConstant(_), ..}) |\n+                Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n+                Err(msg) => {\n+                    self.qualif = self.qualif | ConstQualif::NOT_CONST;\n+                    self.tcx.sess.add_lint(CONST_ERR, ex.id,\n+                                           msg.span,\n+                                           msg.description().into_owned())\n+                }\n+            }\n+        }\n+\n         self.tcx.const_qualif_map.borrow_mut().insert(ex.id, self.qualif);\n         // Don't propagate certain flags.\n         self.qualif = outer | (self.qualif - ConstQualif::HAS_STATIC_BORROWS);"}, {"sha": "7567791c24066040bef4596f7a2fd7213f077a35", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=3acee3b6c5381d84fe4ad68e077517bd0975333d", "patch": "@@ -18,5 +18,5 @@ pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempted to subtract with overfl\n pub const E: u8 = [5u8][1]; //~ ERROR index out of bounds\n \n fn main() {\n-    let _e = [6u8][1];\n+    let _e = [6u8][1]; //~ ERROR: array index out of bounds\n }"}, {"sha": "816799eabf792eb3063865ea2af74a118f7e174d", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=3acee3b6c5381d84fe4ad68e077517bd0975333d", "patch": "@@ -21,7 +21,6 @@ fn main() {\n     //~^ WARN attempted to negate with overflow\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ WARN attempted to add with overflow\n-    //~^^ WARN attempted to add with overflow\n     let c = 200u8 * 4;\n     //~^ WARN attempted to multiply with overflow\n     let d = 42u8 - (42u8 + 1);"}, {"sha": "a3ae0671c54cb2213a35f75df5bc4d3257859d9e", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=3acee3b6c5381d84fe4ad68e077517bd0975333d", "patch": "@@ -16,58 +16,79 @@\n fn main() {\n       let n = 1u8 << 7;\n       let n = 1u8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1u16 << 15;\n       let n = 1u16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1u32 << 31;\n       let n = 1u32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1u64 << 63;\n       let n = 1u64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1i8 << 7;\n       let n = 1i8 << 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1i16 << 15;\n       let n = 1i16 << 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1i32 << 31;\n       let n = 1i32 << 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1i64 << 63;\n       let n = 1i64 << 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n \n       let n = 1u8 >> 7;\n       let n = 1u8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1u16 >> 15;\n       let n = 1u16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1u32 >> 31;\n       let n = 1u32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1u64 >> 63;\n       let n = 1u64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1i8 >> 7;\n       let n = 1i8 >> 8;   //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1i16 >> 15;\n       let n = 1i16 >> 16; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1i32 >> 31;\n       let n = 1i32 >> 32; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n       let n = 1i64 >> 63;\n       let n = 1i64 >> 64; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n \n       let n = 1u8;\n       let n = n << 7;\n       let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift by a negative amount\n \n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n \n       let n = 1_isize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n       let n = 1_usize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift left with overflow\n \n \n       let n = 1i8<<(1isize+-1);\n \n       let n = 1i64 >> [63][0];\n       let n = 1i64 >> [64][0]; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift right with overflow\n }"}, {"sha": "e99dfb9aa0f0e9b6a425e6c9329ff3896feb9899", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acee3b6c5381d84fe4ad68e077517bd0975333d/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=3acee3b6c5381d84fe4ad68e077517bd0975333d", "patch": "@@ -10,10 +10,12 @@\n //\n \n #![deny(overflowing_literals)]\n+#![deny(const_err)]\n \n #[allow(unused_variables)]\n fn main() {\n     let x2: i8 = --128; //~ error: literal out of range for i8\n+    //~^ error: attempted to negate with overflow\n \n     let x = -3.40282348e+38_f32; //~ error: literal out of range for f32\n     let x =  3.40282348e+38_f32; //~ error: literal out of range for f32"}]}