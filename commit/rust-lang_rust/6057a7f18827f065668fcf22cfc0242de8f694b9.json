{"sha": "6057a7f18827f065668fcf22cfc0242de8f694b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNTdhN2YxODgyN2YwNjU2NjhmY2YyMmNmYzAyNDJkZThmNjk0Yjk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-01T06:59:28Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-03T15:52:55Z"}, "message": "change the newly-added errors to warnings\n\nthis commit should be reverted after a release cycle", "tree": {"sha": "c5bd4f5e058992db09614e07de39d6226e4f4a81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5bd4f5e058992db09614e07de39d6226e4f4a81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6057a7f18827f065668fcf22cfc0242de8f694b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6057a7f18827f065668fcf22cfc0242de8f694b9", "html_url": "https://github.com/rust-lang/rust/commit/6057a7f18827f065668fcf22cfc0242de8f694b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6057a7f18827f065668fcf22cfc0242de8f694b9/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5876b4b12aca5c614cf83218a1ca1fe10dde5422", "url": "https://api.github.com/repos/rust-lang/rust/commits/5876b4b12aca5c614cf83218a1ca1fe10dde5422", "html_url": "https://github.com/rust-lang/rust/commit/5876b4b12aca5c614cf83218a1ca1fe10dde5422"}], "stats": {"total": 480, "additions": 363, "deletions": 117}, "files": [{"sha": "6dd98425df3175cd8e5f4f38e6518ec098814c21", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -185,6 +185,18 @@ declare_lint! {\n     \"detects super or self keywords at the beginning of global path\"\n }\n \n+declare_lint! {\n+    pub UNSIZED_IN_TUPLE,\n+    Warn,\n+    \"unsized types in the interior of a tuple were erroneously allowed\"\n+}\n+\n+declare_lint! {\n+    pub OBJECT_UNSAFE_FRAGMENT,\n+    Warn,\n+    \"object-unsafe non-principal fragments in object types were erroneously allowed\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -220,7 +232,9 @@ impl LintPass for HardwiredLints {\n             TRANSMUTE_FROM_FN_ITEM_TYPES,\n             OVERLAPPING_INHERENT_IMPLS,\n             RENAMED_AND_REMOVED_LINTS,\n-            SUPER_OR_SELF_IN_GLOBAL_PATH\n+            SUPER_OR_SELF_IN_GLOBAL_PATH,\n+            UNSIZED_IN_TUPLE,\n+            OBJECT_UNSAFE_FRAGMENT\n         )\n     }\n }"}, {"sha": "758fb7a81fd94537360865650899ad8359c6c15b", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -56,6 +56,7 @@ impl FreeRegionMap {\n             match *predicate {\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n+                ty::Predicate::Rfc1592(..) |\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |"}, {"sha": "b89ce2ce3b2cf312528dbe7234fd2b07f28599da", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 114, "deletions": 47, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -36,37 +36,51 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n+use syntax::ast;\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n \n #[derive(Debug, PartialEq, Eq, Hash)]\n pub struct TraitErrorKey<'tcx> {\n     span: Span,\n+    warning_node_id: Option<ast::NodeId>,\n     predicate: ty::Predicate<'tcx>\n }\n \n impl<'tcx> TraitErrorKey<'tcx> {\n     fn from_error<'a>(infcx: &InferCtxt<'a, 'tcx>,\n-                      e: &FulfillmentError<'tcx>) -> Self {\n+                      e: &FulfillmentError<'tcx>,\n+                      warning_node_id: Option<ast::NodeId>) -> Self {\n         let predicate =\n             infcx.resolve_type_vars_if_possible(&e.obligation.predicate);\n         TraitErrorKey {\n             span: e.obligation.cause.span,\n-            predicate: infcx.tcx.erase_regions(&predicate)\n+            predicate: infcx.tcx.erase_regions(&predicate),\n+            warning_node_id: warning_node_id\n         }\n     }\n }\n \n pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                            errors: &Vec<FulfillmentError<'tcx>>) {\n     for error in errors {\n-        report_fulfillment_error(infcx, error);\n+        report_fulfillment_error(infcx, error, None);\n+    }\n+}\n+\n+pub fn report_fulfillment_errors_as_warnings<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n+                                                       errors: &Vec<FulfillmentError<'tcx>>,\n+                                                       node_id: ast::NodeId)\n+{\n+    for error in errors {\n+        report_fulfillment_error(infcx, error, Some(node_id));\n     }\n }\n \n fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n-                                      error: &FulfillmentError<'tcx>) {\n-    let error_key = TraitErrorKey::from_error(infcx, error);\n+                                      error: &FulfillmentError<'tcx>,\n+                                      warning_node_id: Option<ast::NodeId>) {\n+    let error_key = TraitErrorKey::from_error(infcx, error, warning_node_id);\n     debug!(\"report_fulfillment_errors({:?}) - key={:?}\",\n            error, error_key);\n     if !infcx.reported_trait_errors.borrow_mut().insert(error_key) {\n@@ -75,10 +89,10 @@ fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     }\n     match error.code {\n         FulfillmentErrorCode::CodeSelectionError(ref e) => {\n-            report_selection_error(infcx, &error.obligation, e);\n+            report_selection_error(infcx, &error.obligation, e, warning_node_id);\n         }\n         FulfillmentErrorCode::CodeProjectionError(ref e) => {\n-            report_projection_error(infcx, &error.obligation, e);\n+            report_projection_error(infcx, &error.obligation, e, warning_node_id);\n         }\n         FulfillmentErrorCode::CodeAmbiguity => {\n             maybe_report_ambiguity(infcx, &error.obligation);\n@@ -88,18 +102,29 @@ fn report_fulfillment_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n \n pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                          obligation: &PredicateObligation<'tcx>,\n-                                         error: &MismatchedProjectionTypes<'tcx>)\n+                                         error: &MismatchedProjectionTypes<'tcx>,\n+                                         warning_node_id: Option<ast::NodeId>)\n {\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);\n \n     if !predicate.references_error() {\n-        let mut err = struct_span_err!(infcx.tcx.sess, obligation.cause.span, E0271,\n-            \"type mismatch resolving `{}`: {}\",\n-            predicate,\n-            error.err);\n-        note_obligation_cause(infcx, &mut err, obligation);\n-        err.emit();\n+        if let Some(warning_node_id) = warning_node_id {\n+            infcx.tcx.sess.add_lint(\n+                ::lint::builtin::UNSIZED_IN_TUPLE,\n+                warning_node_id,\n+                obligation.cause.span,\n+                format!(\"type mismatch resolving `{}`: {}\",\n+                        predicate,\n+                        error.err));\n+        } else {\n+            let mut err = struct_span_err!(infcx.tcx.sess, obligation.cause.span, E0271,\n+                                           \"type mismatch resolving `{}`: {}\",\n+                                           predicate,\n+                                           error.err);\n+            note_obligation_cause(infcx, &mut err, obligation);\n+            err.emit();\n+        }\n     }\n }\n \n@@ -383,7 +408,8 @@ pub fn recursive_type_with_infinite_size_error<'tcx>(tcx: &TyCtxt<'tcx>,\n \n pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                         obligation: &PredicateObligation<'tcx>,\n-                                        error: &SelectionError<'tcx>)\n+                                        error: &SelectionError<'tcx>,\n+                                        warning_node_id: Option<ast::NodeId>)\n {\n     match *error {\n         SelectionError::Unimplemented => {\n@@ -401,6 +427,17 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n \n                         if !infcx.tcx.sess.has_errors() || !trait_predicate.references_error() {\n                             let trait_ref = trait_predicate.to_poly_trait_ref();\n+\n+                            if let Some(warning_node_id) = warning_node_id {\n+                                infcx.tcx.sess.add_lint(\n+                                    ::lint::builtin::UNSIZED_IN_TUPLE,\n+                                    warning_node_id,\n+                                    obligation.cause.span,\n+                                    format!(\"the trait bound `{}` is not satisfied\",\n+                                            trait_ref.to_predicate()));\n+                                return;\n+                            }\n+\n                             let mut err = struct_span_err!(\n                                 infcx.tcx.sess, obligation.cause.span, E0277,\n                                 \"the trait bound `{}` is not satisfied\",\n@@ -480,12 +517,15 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                     ty::Predicate::ObjectSafe(trait_def_id) => {\n                         let violations = object_safety_violations(\n                             infcx.tcx, trait_def_id);\n-                        let mut err = report_object_safety_error(infcx.tcx,\n-                                                                 obligation.cause.span,\n-                                                                 trait_def_id,\n-                                                                 violations);\n-                        note_obligation_cause(infcx, &mut err, obligation);\n-                        err.emit();\n+                        let err = report_object_safety_error(infcx.tcx,\n+                                                             obligation.cause.span,\n+                                                             trait_def_id,\n+                                                             warning_node_id,\n+                                                             violations);\n+                        if let Some(mut err) = err {\n+                            note_obligation_cause(infcx, &mut err, obligation);\n+                            err.emit();\n+                        }\n                     }\n \n                     ty::Predicate::ClosureKind(closure_def_id, kind) => {\n@@ -514,6 +554,13 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                             \"WF predicate not satisfied for {:?}\",\n                             ty);\n                     }\n+\n+                    ty::Predicate::Rfc1592(ref data) => {\n+                        span_bug!(\n+                            obligation.cause.span,\n+                            \"RFC1592 predicate not satisfied for {:?}\",\n+                            data);\n+                    }\n                 }\n             }\n         }\n@@ -537,58 +584,84 @@ pub fn report_selection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n \n         TraitNotObjectSafe(did) => {\n             let violations = object_safety_violations(infcx.tcx, did);\n-            let mut err = report_object_safety_error(infcx.tcx, obligation.cause.span, did,\n-                                                     violations);\n-            note_obligation_cause(infcx, &mut err, obligation);\n-            err.emit();\n+            let err = report_object_safety_error(infcx.tcx, obligation.cause.span, did,\n+                                                 warning_node_id,\n+                                                 violations);\n+            if let Some(mut err) = err {\n+                note_obligation_cause(infcx, &mut err, obligation);\n+                err.emit();\n+            }\n         }\n     }\n }\n \n pub fn report_object_safety_error<'tcx>(tcx: &TyCtxt<'tcx>,\n                                         span: Span,\n                                         trait_def_id: DefId,\n+                                        warning_node_id: Option<ast::NodeId>,\n                                         violations: Vec<ObjectSafetyViolation>)\n-                                        -> DiagnosticBuilder<'tcx>\n+                                        -> Option<DiagnosticBuilder<'tcx>>\n {\n-    let mut err = struct_span_err!(\n-        tcx.sess, span, E0038,\n-        \"the trait `{}` cannot be made into an object\",\n-        tcx.item_path_str(trait_def_id));\n+    let mut err = match warning_node_id {\n+        Some(_) => None,\n+        None => {\n+            Some(struct_span_err!(\n+                tcx.sess, span, E0038,\n+                \"the trait `{}` cannot be made into an object\",\n+                tcx.item_path_str(trait_def_id)))\n+        }\n+    };\n \n     let mut reported_violations = FnvHashSet();\n     for violation in violations {\n         if !reported_violations.insert(violation.clone()) {\n             continue;\n         }\n-        match violation {\n+        let buf;\n+        let note = match violation {\n             ObjectSafetyViolation::SizedSelf => {\n-                err.note(\"the trait cannot require that `Self : Sized`\");\n+                \"the trait cannot require that `Self : Sized`\"\n             }\n \n             ObjectSafetyViolation::SupertraitSelf => {\n-                err.note(\"the trait cannot use `Self` as a type parameter \\\n-                          in the supertrait listing\");\n+                \"the trait cannot use `Self` as a type parameter \\\n+                     in the supertrait listing\"\n             }\n \n             ObjectSafetyViolation::Method(method,\n                                           MethodViolationCode::StaticMethod) => {\n-                err.note(&format!(\"method `{}` has no receiver\",\n-                         method.name));\n+                buf = format!(\"method `{}` has no receiver\",\n+                              method.name);\n+                &buf\n             }\n \n             ObjectSafetyViolation::Method(method,\n                                           MethodViolationCode::ReferencesSelf) => {\n-                err.note(&format!(\"method `{}` references the `Self` type \\\n+                buf = format!(\"method `{}` references the `Self` type \\\n                                    in its arguments or return type\",\n-                                  method.name));\n+                              method.name);\n+                &buf\n             }\n \n             ObjectSafetyViolation::Method(method,\n                                           MethodViolationCode::Generic) => {\n-                err.note(&format!(\"method `{}` has generic type parameters\",\n-                                  method.name));\n+                buf = format!(\"method `{}` has generic type parameters\",\n+                              method.name);\n+                &buf\n             }\n+        };\n+        match (warning_node_id, &mut err) {\n+            (Some(node_id), &mut None) => {\n+                tcx.sess.add_lint(\n+                    ::lint::builtin::OBJECT_UNSAFE_FRAGMENT,\n+                    node_id,\n+                    span,\n+                    note.to_string());\n+            }\n+            (None, &mut Some(ref mut err)) => {\n+                err.note(note);\n+            }\n+            _ => unreachable!()\n         }\n     }\n     err\n@@ -765,13 +838,7 @@ fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n             err.note(\"slice and array elements must have `Sized` type\");\n         }\n         ObligationCauseCode::TupleElem => {\n-            err.fileline_note(\n-                cause_span,\n-                \"tuple elements must have `Sized` type\");\n-\n-            err.fileline_warn(\n-                cause_span,\n-                \"this is a new restriction added in rustc 1.10\");\n+            err.note(\"tuple elements must have `Sized` type\");\n         }\n         ObligationCauseCode::ProjectionWf(data) => {\n             err.note(&format!(\"required so that the projection `{}` is well-formed\","}, {"sha": "a184e951b834cf725f389bfccc715591349af926", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -13,6 +13,7 @@ use infer::{InferCtxt, InferOk};\n use ty::{self, Ty, TyCtxt, TypeFoldable, ToPolyTraitRef};\n use rustc_data_structures::obligation_forest::{Backtrace, ObligationForest, Error};\n use std::iter;\n+use std::mem;\n use syntax::ast;\n use util::common::ErrorReported;\n use util::nodemap::{FnvHashMap, FnvHashSet, NodeMap};\n@@ -70,6 +71,9 @@ pub struct FulfillmentContext<'tcx> {\n     predicates: ObligationForest<PendingPredicateObligation<'tcx>,\n                                  LocalFulfilledPredicates<'tcx>>,\n \n+    // A list of new obligations due to RFC1592.\n+    rfc1592_obligations: Vec<PredicateObligation<'tcx>>,\n+\n     // A set of constraints that regionck must validate. Each\n     // constraint has the form `T:'a`, meaning \"some type `T` must\n     // outlive the lifetime 'a\". These constraints derive from\n@@ -116,6 +120,7 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         FulfillmentContext {\n             duplicate_set: LocalFulfilledPredicates::new(),\n             predicates: ObligationForest::new(),\n+            rfc1592_obligations: Vec::new(),\n             region_obligations: NodeMap(),\n         }\n     }\n@@ -197,6 +202,13 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         self.predicates.push_tree(obligation, LocalFulfilledPredicates::new());\n     }\n \n+    pub fn register_rfc1592_obligation<'a>(&mut self,\n+                                           _infcx: &InferCtxt<'a,'tcx>,\n+                                           obligation: PredicateObligation<'tcx>)\n+    {\n+        self.rfc1592_obligations.push(obligation);\n+    }\n+\n     pub fn region_obligations(&self,\n                               body_id: ast::NodeId)\n                               -> &[RegionObligation<'tcx>]\n@@ -207,11 +219,26 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         }\n     }\n \n+    pub fn select_rfc1592_obligations<'a>(&mut self,\n+                                      infcx: &InferCtxt<'a,'tcx>)\n+                                      -> Result<(),Vec<FulfillmentError<'tcx>>>\n+    {\n+        while !self.rfc1592_obligations.is_empty() {\n+            for obligation in mem::replace(&mut self.rfc1592_obligations, Vec::new()) {\n+                self.register_predicate_obligation(infcx, obligation);\n+            }\n+\n+            self.select_all_or_error(infcx)?;\n+        }\n+\n+        Ok(())\n+    }\n     pub fn select_all_or_error<'a>(&mut self,\n                                    infcx: &InferCtxt<'a,'tcx>)\n                                    -> Result<(),Vec<FulfillmentError<'tcx>>>\n     {\n         self.select_where_possible(infcx)?;\n+\n         let errors: Vec<_> =\n             self.predicates.to_errors(CodeAmbiguity)\n                            .into_iter()\n@@ -279,12 +306,14 @@ impl<'tcx> FulfillmentContext<'tcx> {\n             // Process pending obligations.\n             let outcome = {\n                 let region_obligations = &mut self.region_obligations;\n+                let rfc1592_obligations = &mut self.rfc1592_obligations;\n                 self.predicates.process_obligations(\n                     |obligation, tree, backtrace| process_predicate(selcx,\n-                                                                     tree,\n-                                                                     obligation,\n-                                                                     backtrace,\n-                                                                     region_obligations))\n+                                                                    tree,\n+                                                                    obligation,\n+                                                                    backtrace,\n+                                                                    region_obligations,\n+                                                                    rfc1592_obligations))\n             };\n \n             debug!(\"select: outcome={:?}\", outcome);\n@@ -321,11 +350,13 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                               tree_cache: &mut LocalFulfilledPredicates<'tcx>,\n                               pending_obligation: &mut PendingPredicateObligation<'tcx>,\n                               backtrace: Backtrace<PendingPredicateObligation<'tcx>>,\n-                              region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>)\n+                              region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>,\n+                              rfc1592_obligations: &mut Vec<PredicateObligation<'tcx>>)\n                               -> Result<Option<Vec<PendingPredicateObligation<'tcx>>>,\n                                         FulfillmentErrorCode<'tcx>>\n {\n-    match process_predicate1(selcx, pending_obligation, region_obligations) {\n+    match process_predicate1(selcx, pending_obligation, region_obligations,\n+                             rfc1592_obligations) {\n         Ok(Some(v)) => process_child_obligations(selcx,\n                                                  tree_cache,\n                                                  &pending_obligation.obligation,\n@@ -507,7 +538,8 @@ fn trait_ref_type_vars<'a, 'tcx>(selcx: &mut SelectionContext<'a, 'tcx>,\n /// - `Err` if the predicate does not hold\n fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                                pending_obligation: &mut PendingPredicateObligation<'tcx>,\n-                               region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>)\n+                               region_obligations: &mut NodeMap<Vec<RegionObligation<'tcx>>>,\n+                               rfc1592_obligations: &mut Vec<PredicateObligation<'tcx>>)\n                                -> Result<Option<Vec<PredicateObligation<'tcx>>>,\n                                          FulfillmentErrorCode<'tcx>>\n {\n@@ -677,6 +709,14 @@ fn process_predicate1<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                 s => Ok(s)\n             }\n         }\n+\n+        ty::Predicate::Rfc1592(ref inner) => {\n+            rfc1592_obligations.push(PredicateObligation {\n+                predicate: ty::Predicate::clone(inner),\n+                ..obligation.clone()\n+            });\n+            Ok(Some(vec![]))\n+        }\n     }\n }\n "}, {"sha": "7da95b6646ae32b87796edb64b4a01f62038a6b9", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -28,6 +28,7 @@ use syntax::codemap::{Span, DUMMY_SP};\n pub use self::error_reporting::TraitErrorKey;\n pub use self::error_reporting::recursive_type_with_infinite_size_error;\n pub use self::error_reporting::report_fulfillment_errors;\n+pub use self::error_reporting::report_fulfillment_errors_as_warnings;\n pub use self::error_reporting::report_overflow_error;\n pub use self::error_reporting::report_overflow_error_cycle;\n pub use self::error_reporting::report_selection_error;"}, {"sha": "59db68b1c3c292300fb6764ca09bdad57033f397", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -166,6 +166,7 @@ pub fn supertraits_reference_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                 ty::Predicate::TypeOutlives(..) |\n                 ty::Predicate::RegionOutlives(..) |\n                 ty::Predicate::ClosureKind(..) |\n+                ty::Predicate::Rfc1592(..) |\n                 ty::Predicate::Equate(..) => {\n                     false\n                 }\n@@ -204,6 +205,7 @@ fn generics_require_sized_self<'tcx>(tcx: &TyCtxt<'tcx>,\n                 }\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n+                ty::Predicate::Rfc1592(..) |\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::RegionOutlives(..) |\n                 ty::Predicate::WellFormed(..) |"}, {"sha": "2338eff3ec30a65cdfb2cf1bbb2a7f4e7ff43510", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -419,6 +419,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         match obligation.predicate {\n+            ty::Predicate::Rfc1592(..) => EvaluatedToOk,\n+\n             ty::Predicate::Trait(ref t) => {\n                 assert!(!t.has_escaping_regions());\n                 let obligation = obligation.with(t.clone());\n@@ -1661,10 +1663,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::TyStr | ty::TySlice(_) | ty::TyTrait(..) => Never,\n \n             ty::TyTuple(ref tys) => {\n-                Where(ty::Binder(match tys.last() {\n-                    Some(ty) => vec![ty],\n-                    _ => vec![]\n-                }))\n+                // FIXME(#33242) we only need to constrain the last field\n+                Where(ty::Binder(tys.clone()))\n             }\n \n             ty::TyStruct(def, substs) | ty::TyEnum(def, substs) => {\n@@ -2408,11 +2408,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             // T -> Trait.\n             (_, &ty::TyTrait(ref data)) => {\n-                let mut object_dids =\n-                    data.bounds.builtin_bounds.iter().flat_map(|bound| {\n-                        tcx.lang_items.from_builtin_kind(bound).ok()\n-                    })\n-                    .chain(Some(data.principal_def_id()));\n+                let mut object_dids = Some(data.principal_def_id()).into_iter();\n+                // FIXME(#33243)\n+//                    data.bounds.builtin_bounds.iter().flat_map(|bound| {\n+//                        tcx.lang_items.from_builtin_kind(bound).ok()\n+//                    })\n+//                    .chain(Some(data.principal_def_id()));\n                 if let Some(did) = object_dids.find(|did| {\n                     !object_safety::is_object_safe(tcx, *did)\n                 }) {"}, {"sha": "d82f9d7549d907e1f3a151825c5d660c1d819096", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -18,6 +18,39 @@ use util::nodemap::FnvHashSet;\n \n use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n+fn anonymize_predicate<'tcx>(tcx: &TyCtxt<'tcx>, pred: &ty::Predicate<'tcx>)\n+                             -> ty::Predicate<'tcx> {\n+    match *pred {\n+        ty::Predicate::Trait(ref data) =>\n+            ty::Predicate::Trait(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::Rfc1592(ref data) =>\n+            ty::Predicate::Rfc1592(Box::new(anonymize_predicate(tcx, data))),\n+\n+        ty::Predicate::Equate(ref data) =>\n+            ty::Predicate::Equate(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::RegionOutlives(ref data) =>\n+            ty::Predicate::RegionOutlives(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::TypeOutlives(ref data) =>\n+            ty::Predicate::TypeOutlives(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::Projection(ref data) =>\n+            ty::Predicate::Projection(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::WellFormed(data) =>\n+            ty::Predicate::WellFormed(data),\n+\n+        ty::Predicate::ObjectSafe(data) =>\n+            ty::Predicate::ObjectSafe(data),\n+\n+        ty::Predicate::ClosureKind(closure_def_id, kind) =>\n+            ty::Predicate::ClosureKind(closure_def_id, kind)\n+    }\n+}\n+\n+\n struct PredicateSet<'a,'tcx:'a> {\n     tcx: &'a TyCtxt<'tcx>,\n     set: FnvHashSet<ty::Predicate<'tcx>>,\n@@ -39,32 +72,7 @@ impl<'a,'tcx> PredicateSet<'a,'tcx> {\n         //\n         // to be considered equivalent. So normalize all late-bound\n         // regions before we throw things into the underlying set.\n-        let normalized_pred = match *pred {\n-            ty::Predicate::Trait(ref data) =>\n-                ty::Predicate::Trait(self.tcx.anonymize_late_bound_regions(data)),\n-\n-            ty::Predicate::Equate(ref data) =>\n-                ty::Predicate::Equate(self.tcx.anonymize_late_bound_regions(data)),\n-\n-            ty::Predicate::RegionOutlives(ref data) =>\n-                ty::Predicate::RegionOutlives(self.tcx.anonymize_late_bound_regions(data)),\n-\n-            ty::Predicate::TypeOutlives(ref data) =>\n-                ty::Predicate::TypeOutlives(self.tcx.anonymize_late_bound_regions(data)),\n-\n-            ty::Predicate::Projection(ref data) =>\n-                ty::Predicate::Projection(self.tcx.anonymize_late_bound_regions(data)),\n-\n-            ty::Predicate::WellFormed(data) =>\n-                ty::Predicate::WellFormed(data),\n-\n-            ty::Predicate::ObjectSafe(data) =>\n-                ty::Predicate::ObjectSafe(data),\n-\n-            ty::Predicate::ClosureKind(closure_def_id, kind) =>\n-                ty::Predicate::ClosureKind(closure_def_id, kind)\n-        };\n-        self.set.insert(normalized_pred)\n+        self.set.insert(anonymize_predicate(self.tcx, pred))\n     }\n }\n \n@@ -143,6 +151,9 @@ impl<'cx, 'tcx> Elaborator<'cx, 'tcx> {\n \n                 self.stack.extend(predicates);\n             }\n+            ty::Predicate::Rfc1592(..) => {\n+                // Nothing to elaborate.\n+            }\n             ty::Predicate::WellFormed(..) => {\n                 // Currently, we do not elaborate WF predicates,\n                 // although we easily could."}, {"sha": "3e3dae3b3e9855441ba2f40ccd03cba066c7ee6b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -804,6 +804,9 @@ pub enum Predicate<'tcx> {\n     /// would be the parameters in the `TypeSpace`.\n     Trait(PolyTraitPredicate<'tcx>),\n \n+    /// A predicate created by RFC1592\n+    Rfc1592(Box<Predicate<'tcx>>),\n+\n     /// where `T1 == T2`.\n     Equate(PolyEquatePredicate<'tcx>),\n \n@@ -904,6 +907,8 @@ impl<'tcx> Predicate<'tcx> {\n         match *self {\n             Predicate::Trait(ty::Binder(ref data)) =>\n                 Predicate::Trait(ty::Binder(data.subst(tcx, substs))),\n+            Predicate::Rfc1592(ref pi) =>\n+                Predicate::Rfc1592(Box::new(pi.subst_supertrait(tcx, trait_ref))),\n             Predicate::Equate(ty::Binder(ref data)) =>\n                 Predicate::Equate(ty::Binder(data.subst(tcx, substs))),\n             Predicate::RegionOutlives(ty::Binder(ref data)) =>\n@@ -1083,6 +1088,9 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::Trait(ref data) => {\n                 data.0.trait_ref.substs.types.as_slice().to_vec()\n             }\n+            ty::Predicate::Rfc1592(ref data) => {\n+                return data.walk_tys()\n+            }\n             ty::Predicate::Equate(ty::Binder(ref data)) => {\n                 vec![data.0, data.1]\n             }\n@@ -1123,6 +1131,7 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::Trait(ref t) => {\n                 Some(t.to_poly_trait_ref())\n             }\n+            Predicate::Rfc1592(..) |\n             Predicate::Projection(..) |\n             Predicate::Equate(..) |\n             Predicate::RegionOutlives(..) |\n@@ -1835,7 +1844,8 @@ impl<'tcx> AdtDefData<'tcx, 'tcx> {\n             }\n \n             TyTuple(ref tys) => {\n-                tys.last().into_iter().flat_map(|ty| {\n+                // FIXME(#33242) we only need to constrain the last field\n+                tys.iter().flat_map(|ty| {\n                     self.sized_constraint_for_ty(tcx, stack, ty)\n                 }).collect()\n             }"}, {"sha": "ac3dfa82bd6d235b441bc0aa96cfc7e9cc532831", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -634,6 +634,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n         match *self {\n             ty::Predicate::Trait(ref a) =>\n                 ty::Predicate::Trait(a.fold_with(folder)),\n+            ty::Predicate::Rfc1592(ref a) =>\n+                ty::Predicate::Rfc1592(a.fold_with(folder)),\n             ty::Predicate::Equate(ref binder) =>\n                 ty::Predicate::Equate(binder.fold_with(folder)),\n             ty::Predicate::RegionOutlives(ref binder) =>\n@@ -654,6 +656,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n             ty::Predicate::Trait(ref a) => a.visit_with(visitor),\n+            ty::Predicate::Rfc1592(ref a) => a.visit_with(visitor),\n             ty::Predicate::Equate(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::RegionOutlives(ref binder) => binder.visit_with(visitor),\n             ty::Predicate::TypeOutlives(ref binder) => binder.visit_with(visitor),"}, {"sha": "b6bd8f5f55fba6dc5bc2b3693cbe90df65aec337", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -299,6 +299,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 match predicate {\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::Trait(..) |\n+                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |"}, {"sha": "609252f948ab3ff9c9a8525a8415a8497d626241", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -94,6 +94,9 @@ pub fn predicate_obligations<'a,'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n         }\n         ty::Predicate::ClosureKind(..) => {\n         }\n+        ty::Predicate::Rfc1592(ref data) => {\n+            bug!(\"RFC1592 predicate `{:?}` in predicate_obligations\", data);\n+        }\n     }\n \n     wf.normalize()\n@@ -155,6 +158,7 @@ pub fn implied_bounds<'a,'tcx>(\n                 assert!(!obligation.has_escaping_regions());\n                 match obligation.predicate {\n                     ty::Predicate::Trait(..) |\n+                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::Projection(..) |\n                     ty::Predicate::ClosureKind(..) |\n@@ -280,16 +284,23 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n         }\n     }\n \n-    fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n+    fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>,\n+                     rfc1592: bool) {\n         if !subty.has_escaping_regions() {\n             let cause = self.cause(cause);\n             match traits::trait_ref_for_builtin_bound(self.infcx.tcx,\n                                                       ty::BoundSized,\n                                                       subty) {\n                 Ok(trait_ref) => {\n+                    let predicate = trait_ref.to_predicate();\n+                    let predicate = if rfc1592 {\n+                        ty::Predicate::Rfc1592(box predicate)\n+                    } else {\n+                        predicate\n+                    };\n                     self.out.push(\n                         traits::Obligation::new(cause,\n-                                                trait_ref.to_predicate()));\n+                                                predicate));\n                 }\n                 Err(ErrorReported) => { }\n             }\n@@ -318,13 +329,13 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n \n                 ty::TySlice(subty) |\n                 ty::TyArray(subty, _) => {\n-                    self.require_sized(subty, traits::SliceOrArrayElem);\n+                    self.require_sized(subty, traits::SliceOrArrayElem, false);\n                 }\n \n                 ty::TyTuple(ref tys) => {\n                     if let Some((_last, rest)) = tys.split_last() {\n                         for elem in rest {\n-                            self.require_sized(elem, traits::TupleElem);\n+                            self.require_sized(elem, traits::TupleElem, true);\n                         }\n                     }\n                 }\n@@ -387,18 +398,23 @@ impl<'a,'tcx> WfPredicates<'a,'tcx> {\n \n                     let cause = self.cause(traits::MiscObligation);\n \n+                    // FIXME(#33243): remove RFC1592\n+                    self.out.push(traits::Obligation::new(\n+                        cause.clone(),\n+                        ty::Predicate::ObjectSafe(data.principal_def_id())\n+                    ));\n                     let component_traits =\n                         data.bounds.builtin_bounds.iter().flat_map(|bound| {\n                             tcx.lang_items.from_builtin_kind(bound).ok()\n-                        })\n-                        .chain(Some(data.principal_def_id()));\n+                        });\n+//                        .chain(Some(data.principal_def_id()));\n                     self.out.extend(\n-                        component_traits.map(|did| {\n-                            traits::Obligation::new(\n-                                cause.clone(),\n-                                ty::Predicate::ObjectSafe(did)\n+                        component_traits.map(|did| { traits::Obligation::new(\n+                            cause.clone(),\n+                            ty::Predicate::Rfc1592(\n+                                box ty::Predicate::ObjectSafe(did)\n                             )\n-                        })\n+                        )})\n                     );\n                 }\n "}, {"sha": "728306b25ddc7c2245f13acc749461e705f3aafa", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -459,6 +459,9 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref a) => write!(f, \"{:?}\", a),\n+            ty::Predicate::Rfc1592(ref a) => {\n+                write!(f, \"RFC1592({:?})\", a)\n+            }\n             ty::Predicate::Equate(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::RegionOutlives(ref pair) => write!(f, \"{:?}\", pair),\n             ty::Predicate::TypeOutlives(ref pair) => write!(f, \"{:?}\", pair),\n@@ -1056,6 +1059,7 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             ty::Predicate::Trait(ref data) => write!(f, \"{}\", data),\n+            ty::Predicate::Rfc1592(ref data) => write!(f, \"{}\", data),\n             ty::Predicate::Equate(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::RegionOutlives(ref predicate) => write!(f, \"{}\", predicate),\n             ty::Predicate::TypeOutlives(ref predicate) => write!(f, \"{}\", predicate),"}, {"sha": "4832f18f21322e0b576228d713370559df020866", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -190,6 +190,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n             reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(UNSIZED_IN_TUPLE),\n+            reference: \"RFC PR 1592 <https://github.com/rust-lang/rfcs/pull/1592>\",\n+        }\n         ]);\n \n     // We have one lint pass defined specially"}, {"sha": "57aa347847e15ad66d4e7de4b2e7d438f8b18db1", "filename": "src/librustc_metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_metadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_metadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftyencode.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -449,6 +449,9 @@ pub fn enc_predicate<'a, 'tcx>(w: &mut Cursor<Vec<u8>>,\n                                p: &ty::Predicate<'tcx>)\n {\n     match *p {\n+        ty::Predicate::Rfc1592(..) => {\n+            bug!(\"RFC1592 predicate in metadata `{:?}`\", p);\n+        }\n         ty::Predicate::Trait(ref trait_ref) => {\n             write!(w, \"t\");\n             enc_trait_ref(w, cx, trait_ref.0.trait_ref);"}, {"sha": "6fb9739fca4f464ed12ded481ad61a974a3850b0", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -277,6 +277,9 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                 traits::report_fulfillment_errors(&infcx, errors);\n             }\n         }\n+        if let Err(ref errors) = fulfillment_cx.select_rfc1592_obligations(&infcx) {\n+            traits::report_fulfillment_errors_as_warnings(&infcx, errors, e.id);\n+        }\n     }\n }\n "}, {"sha": "5e07011d5bafdf085e913bc6a9304c71a07f62e1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -1143,8 +1143,8 @@ fn make_object_type<'tcx>(this: &AstConv<'tcx>,\n         traits::astconv_object_safety_violations(tcx, principal.def_id());\n     if !object_safety_violations.is_empty() {\n         traits::report_object_safety_error(\n-            tcx, span, principal.def_id(), object_safety_violations)\n-            .emit();\n+            tcx, span, principal.def_id(), None, object_safety_violations)\n+            .unwrap().emit();\n         return tcx.types.err;\n     }\n "}, {"sha": "b84ded1ea7acf6f2ef38133116c21d8f4936a01b", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -179,6 +179,7 @@ fn deduce_expectations_from_obligations<'a,'tcx>(\n                 ty::Predicate::TypeOutlives(..) => None,\n                 ty::Predicate::WellFormed(..) => None,\n                 ty::Predicate::ObjectSafe(..) => None,\n+                ty::Predicate::Rfc1592(..) => None,\n \n                 // NB: This predicate is created by breaking down a\n                 // `ClosureType: FnFoo()` predicate, where"}, {"sha": "6c8d437f429f9b9ed19c36e00d9d9a6d5ee7b188", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -477,7 +477,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n                 // Object safety violations or miscellaneous.\n                 Err(err) => {\n-                    report_selection_error(self.fcx.infcx(), &obligation, &err);\n+                    report_selection_error(self.fcx.infcx(), &obligation, &err, None);\n                     // Treat this like an obligation and follow through\n                     // with the unsizing - the lack of a coercion should\n                     // be silent, as it causes a type mismatch later."}, {"sha": "b9fda2104546b44aec23a7f36bc7a4bfafcf0081", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -114,6 +114,11 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n         return Err(());\n     }\n \n+    if let Err(ref errors) = fulfillment_cx.select_rfc1592_obligations(&infcx) {\n+        traits::report_fulfillment_errors_as_warnings(&infcx, errors,\n+                                                      drop_impl_node_id);\n+    }\n+\n     let free_regions = FreeRegionMap::new();\n     infcx.resolve_regions_and_report_errors(&free_regions, drop_impl_node_id);\n     Ok(())"}, {"sha": "8a71debdf206ba9bb05c6645bbe83d7f278344af", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -492,6 +492,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |\n+                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::TypeOutlives(..) => {\n                         None\n                     }"}, {"sha": "6599199c239af625bfd7e5fc03e085981b864859", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -1989,13 +1989,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // upvar inference should have ensured that all deferred call\n         // resolutions are handled by now.\n         assert!(self.inh.deferred_call_resolutions.borrow().is_empty());\n+        let infcx = self.infcx();\n \n         self.select_all_obligations_and_apply_defaults();\n \n         let mut fulfillment_cx = self.inh.fulfillment_cx.borrow_mut();\n-        match fulfillment_cx.select_all_or_error(self.infcx()) {\n+        match fulfillment_cx.select_all_or_error(infcx) {\n             Ok(()) => { }\n-            Err(errors) => { report_fulfillment_errors(self.infcx(), &errors); }\n+            Err(errors) => { report_fulfillment_errors(infcx, &errors); }\n+        }\n+\n+        if let Err(ref errors) = fulfillment_cx.select_rfc1592_obligations(infcx) {\n+            traits::report_fulfillment_errors_as_warnings(infcx, errors, self.body_id);\n         }\n     }\n "}, {"sha": "4dd093e2e4bfdcca1796b14f08e408f602de9160", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -450,6 +450,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n                     ty::Predicate::TypeOutlives(ref data) => {\n                         data.skip_binder().0.is_param(def.space, def.index)\n                     }\n+                    ty::Predicate::Rfc1592(..) |\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::WellFormed(..) |"}, {"sha": "f62404e60e69e55d7dad756cabd9d2e620e34999", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -15,5 +15,4 @@ pub fn main() {\n     //~^ ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n     //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n     //~| ERROR `Trait + Sized: std::marker::Sized` is not satisfied\n-    //~| ERROR `std::marker::Sized` cannot be made into an object\n }"}, {"sha": "c4e8f7661175236022333fef3788f65467ccf9c9", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -16,6 +16,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n \n fn main() {\n     size_of_copy::<Misc+Copy>();\n-    //~^ ERROR `std::marker::Copy` cannot be made into an object\n-    //~| ERROR `Misc + Copy: std::marker::Copy` is not satisfied\n+    //~^ ERROR `Misc + Copy: std::marker::Copy` is not satisfied\n }"}, {"sha": "0c12c1c4444015d905be646ccda4aa2d12868527", "filename": "src/test/compile-fail/rfc1592-deprecated.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1592-deprecated.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+trait Foo {\n+    fn foo(&self) -> (Self, Self);\n+    //~^ WARNING hard error\n+}\n+\n+impl<T: Copy> Foo for T {\n+    fn foo(&self) -> (Self, Self) {\n+        (*self, *self)\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!((11).foo(), (11, 11));\n+\n+    let junk: Box<fmt::Debug+Sized> = Box::new(42);\n+    //~^ WARNING hard error\n+    let f = format!(\"{:?}\", junk);\n+    assert_eq!(f, \"42\");\n+}"}, {"sha": "f88165c02e988cd5e34bc3af44292b6cdb0d2a9c", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -60,9 +60,6 @@ fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34));\n     //~^ ERROR `X: std::marker::Sized` is not satisfied\n-    //~| WARNING this is a new restriction added in rustc 1.10\n-    //~^^^ ERROR `X: std::marker::Sized` is not satisfied\n-    //~| WARNING this is a new restriction added in rustc 1.10\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {"}, {"sha": "d40c12f67a08da43a38d3eadf754ab8a5601c78e", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -14,16 +14,13 @@ trait T {}\n \n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer.\n-    let _: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfied\n-    //~| WARNING this is a new restriction added in rustc 1.10\n+    let _: (isize, (X, isize));\n     let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n     let y: (isize, (X, usize)); //~ERROR `X: std::marker::Sized` is not satisfied\n-    //~| WARNING this is a new restriction added in rustc 1.10\n }\n fn f2<X: ?Sized + T>(x: &X) {\n     let y: X; //~ERROR `X: std::marker::Sized` is not satisfied\n     let y: (isize, (X, isize)); //~ERROR `X: std::marker::Sized` is not satisfied\n-    //~| WARNING this is a new restriction added in rustc 1.10\n }\n \n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {"}, {"sha": "81bf02587896fbac62b953d7986e0fc7db914067", "filename": "src/test/run-pass/rfc1592-deprecated.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6057a7f18827f065668fcf22cfc0242de8f694b9/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1592-deprecated.rs?ref=6057a7f18827f065668fcf22cfc0242de8f694b9", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+trait Foo {\n+    fn foo(&self) -> (Self, Self);\n+}\n+\n+impl<T: Copy> Foo for T {\n+    fn foo(&self) -> (Self, Self) {\n+        (*self, *self)\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!((11).foo(), (11, 11));\n+\n+    let junk: Box<fmt::Debug+Sized> = Box::new(42);\n+    let f = format!(\"{:?}\", junk);\n+    assert_eq!(f, \"42\");\n+}"}]}