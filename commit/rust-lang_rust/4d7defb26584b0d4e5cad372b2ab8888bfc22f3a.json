{"sha": "4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkN2RlZmIyNjU4NGIwZDRlNWNhZDM3MmIyYWI4ODg4YmZjMjJmM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T12:13:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-05T12:13:52Z"}, "message": "Auto merge of #59721 - Centril:rollup-ieam9ke, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #59665 (improve worst-case performance of HashSet.is_subset)\n - #59687 (cleanup shebang handling in the lexer)\n - #59690 (Mark unix::ffi::OsStrExt methods as inline)\n - #59702 (Use declare_lint_pass! and impl_lint_pass! in more places)\n - #59712 (wasm32: Default to a \"static\" relocation model)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "701541189e7d5651cb6553be6b8bdaf4ec881559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701541189e7d5651cb6553be6b8bdaf4ec881559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "html_url": "https://github.com/rust-lang/rust/commit/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a781c47243a5ebde3f84a9635ffddd1cfc82ed9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a781c47243a5ebde3f84a9635ffddd1cfc82ed9c", "html_url": "https://github.com/rust-lang/rust/commit/a781c47243a5ebde3f84a9635ffddd1cfc82ed9c"}, {"sha": "7249036de5c6a2e8aad93512e3f529f3024d03e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7249036de5c6a2e8aad93512e3f529f3024d03e5", "html_url": "https://github.com/rust-lang/rust/commit/7249036de5c6a2e8aad93512e3f529f3024d03e5"}], "stats": {"total": 56, "additions": 24, "deletions": 32}, "files": [{"sha": "030a9c1f935318fb0de1ca995f6e965ce85be740", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -28,15 +28,7 @@ impl DefaultHashTypes {\n     }\n }\n \n-impl LintPass for DefaultHashTypes {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(DEFAULT_HASH_TYPES)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"DefaultHashTypes\"\n-    }\n-}\n+impl_lint_pass!(DefaultHashTypes => [DEFAULT_HASH_TYPES]);\n \n impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n@@ -68,17 +60,7 @@ declare_lint! {\n     \"Usage of `ty::TyKind` outside of the `ty::sty` module\"\n }\n \n-pub struct TyKindUsage;\n-\n-impl LintPass for TyKindUsage {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(USAGE_OF_TY_TYKIND)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TyKindUsage\"\n-    }\n-}\n+declare_lint_pass!(TyKindUsage => [USAGE_OF_TY_TYKIND]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n     fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {"}, {"sha": "edaf902c130d8995055ba81c084501b90f32884c", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -118,6 +118,15 @@ pub fn options() -> TargetOptions {\n \n         pre_link_args,\n \n+        // This has no effect in LLVM 8 or prior, but in LLVM 9 and later when\n+        // PIC code is implemented this has quite a drastric effect if it stays\n+        // at the default, `pic`. In an effort to keep wasm binaries as minimal\n+        // as possible we're defaulting to `static` for now, but the hope is\n+        // that eventually we can ship a `pic`-compatible standard library which\n+        // works with `static` as well (or works with some method of generating\n+        // non-relative calls and such later on).\n+        relocation_model: \"static\".to_string(),\n+\n         .. Default::default()\n     }\n }"}, {"sha": "b9fcc2365fa7c87efc0297779c656c8422fa82a3", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -627,7 +627,11 @@ impl<T, S> HashSet<T, S>\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_subset(&self, other: &HashSet<T, S>) -> bool {\n-        self.iter().all(|v| other.contains(v))\n+        if self.len() <= other.len() {\n+            self.iter().all(|v| other.contains(v))\n+        } else {\n+            false\n+        }\n     }\n \n     /// Returns `true` if the set is a superset of another,"}, {"sha": "13aee783750f1dfbb8a9cc81fcddcce61890baa0", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -960,6 +960,7 @@ impl IntoInner<Buf> for OsString {\n }\n \n impl AsInner<Slice> for OsStr {\n+    #[inline]\n     fn as_inner(&self) -> &Slice {\n         &self.inner\n     }"}, {"sha": "a4961974d89ab3ed2c6aeda0a22b21644ea596b0", "filename": "src/libstd/sys_common/os_str_bytes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fos_str_bytes.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -236,9 +236,11 @@ pub trait OsStrExt {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl OsStrExt for OsStr {\n+    #[inline]\n     fn from_bytes(slice: &[u8]) -> &OsStr {\n         unsafe { mem::transmute(slice) }\n     }\n+    #[inline]\n     fn as_bytes(&self) -> &[u8] {\n         &self.as_inner().inner\n     }"}, {"sha": "5557e281a6639b6595cd0fa5c14fac512aff6d8b", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7defb26584b0d4e5cad372b2ab8888bfc22f3a/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=4d7defb26584b0d4e5cad372b2ab8888bfc22f3a", "patch": "@@ -1,10 +1,9 @@\n use crate::ast::{self, Ident};\n-use crate::source_map::{SourceMap, FilePathMapping};\n use crate::parse::{token, ParseSess};\n use crate::symbol::Symbol;\n \n use errors::{Applicability, FatalError, Diagnostic, DiagnosticBuilder};\n-use syntax_pos::{BytePos, CharPos, Pos, Span, NO_EXPANSION};\n+use syntax_pos::{BytePos, Pos, Span, NO_EXPANSION};\n use core::unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n@@ -667,14 +666,9 @@ impl<'a> StringReader<'a> {\n                     return None;\n                 }\n \n-                // I guess this is the only way to figure out if\n-                // we're at the beginning of the file...\n-                let smap = SourceMap::new(FilePathMapping::empty());\n-                smap.files.borrow_mut().source_files.push(self.source_file.clone());\n-                let loc = smap.lookup_char_pos_adj(self.pos);\n-                debug!(\"Skipping a shebang\");\n-                if loc.line == 1 && loc.col == CharPos(0) {\n-                    // FIXME: Add shebang \"token\", return it\n+                let is_beginning_of_file = self.pos == self.source_file.start_pos;\n+                if is_beginning_of_file {\n+                    debug!(\"Skipping a shebang\");\n                     let start = self.pos;\n                     while !self.ch_is('\\n') && !self.is_eof() {\n                         self.bump();\n@@ -1911,7 +1905,7 @@ mod tests {\n \n     use crate::ast::{Ident, CrateConfig};\n     use crate::symbol::Symbol;\n-    use crate::source_map::SourceMap;\n+    use crate::source_map::{SourceMap, FilePathMapping};\n     use crate::feature_gate::UnstableFeatures;\n     use crate::parse::token;\n     use crate::diagnostics::plugin::ErrorMap;"}]}