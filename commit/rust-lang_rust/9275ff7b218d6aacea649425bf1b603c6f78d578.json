{"sha": "9275ff7b218d6aacea649425bf1b603c6f78d578", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNzVmZjdiMjE4ZDZhYWNlYTY0OTQyNWJmMWI2MDNjNmY3OGQ1Nzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T01:00:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T01:00:03Z"}, "message": "Rollup merge of #72738 - mati865:self-contained-option, r=petrochenkov\n\nSelf contained linking option\n\nWith objects moved to self-contained directory by https://github.com/rust-lang/rust/pull/72999 we can now add option to control whether to use self-contained on native linkage mode.", "tree": {"sha": "2594c9b311a9706c973e570e2dd693b1356620cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2594c9b311a9706c973e570e2dd693b1356620cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9275ff7b218d6aacea649425bf1b603c6f78d578", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9UiUCRBK7hj4Ov3rIwAAdHIIAC6KasQ9o/XYcbem/+qYGGF2\newOjQqsf1L4uSQ4FHjLUE6QLCAHOqBIAoepqlEdsHUORELXau+q9QlReT6lextkb\nYWEcHrE3sKWcQJRjVYm8DQHwrk2WrIAjhE41RKWNbiLCTHZt/FvurPGu6inG+seC\nlD8G6jdOkeRxfYxyCZsnWLEQT1kkvxMIPtzBKK29oSbYJq6SJY7J0omwc60GF82H\nPGbSLQ1FEDMg4BfIKy2aSeXw7pg3NnRt00BQ6vJDCkaKRkvKhdGR6TQn+JapmsIB\nEBz1YUp8j/YSGL/S6wxpMIozUV4NsQtHhiVJPuDDEgtY0bW84IUIOLLylB5+TTU=\n=Aqak\n-----END PGP SIGNATURE-----\n", "payload": "tree 2594c9b311a9706c973e570e2dd693b1356620cf\nparent 5158b3c9989a1872fae0cb72e5cd0b5228cf12c0\nparent f27dcd7ee05e948c92fb7e742d6b26c34e20b39c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593133203 -0700\ncommitter GitHub <noreply@github.com> 1593133203 -0700\n\nRollup merge of #72738 - mati865:self-contained-option, r=petrochenkov\n\nSelf contained linking option\n\nWith objects moved to self-contained directory by https://github.com/rust-lang/rust/pull/72999 we can now add option to control whether to use self-contained on native linkage mode.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9275ff7b218d6aacea649425bf1b603c6f78d578", "html_url": "https://github.com/rust-lang/rust/commit/9275ff7b218d6aacea649425bf1b603c6f78d578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9275ff7b218d6aacea649425bf1b603c6f78d578/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5158b3c9989a1872fae0cb72e5cd0b5228cf12c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5158b3c9989a1872fae0cb72e5cd0b5228cf12c0", "html_url": "https://github.com/rust-lang/rust/commit/5158b3c9989a1872fae0cb72e5cd0b5228cf12c0"}, {"sha": "f27dcd7ee05e948c92fb7e742d6b26c34e20b39c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27dcd7ee05e948c92fb7e742d6b26c34e20b39c", "html_url": "https://github.com/rust-lang/rust/commit/f27dcd7ee05e948c92fb7e742d6b26c34e20b39c"}], "stats": {"total": 89, "additions": 60, "deletions": 29}, "files": [{"sha": "a34029410784ac33efd70849d843fe2cb6984bcc", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 54, "deletions": 26, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=9275ff7b218d6aacea649425bf1b603c6f78d578", "patch": "@@ -140,7 +140,12 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(\n // The third parameter is for env vars, used on windows to set up the\n // path for MSVC to find its DLLs, and gcc to find its bundled\n // toolchain\n-fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n+fn get_linker(\n+    sess: &Session,\n+    linker: &Path,\n+    flavor: LinkerFlavor,\n+    self_contained: bool,\n+) -> Command {\n     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), \"link.exe\");\n \n     // If our linker looks like a batch script on Windows then to execute this\n@@ -199,7 +204,7 @@ fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {\n \n     // The compiler's sysroot often has some bundled tools, so add it to the\n     // PATH for the child.\n-    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths();\n+    let mut new_path = sess.host_filesearch(PathKind::All).get_tools_search_paths(self_contained);\n     let mut msvc_changed_path = false;\n     if sess.target.target.options.is_like_msvc {\n         if let Some(ref tool) = msvc_tool {\n@@ -551,19 +556,25 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n                 \"Linker does not support -static-pie command line option. Retrying with -static instead.\"\n             );\n             // Mirror `add_(pre,post)_link_objects` to replace CRT objects.\n-            let fallback = crt_objects_fallback(sess, crate_type);\n+            let self_contained = crt_objects_fallback(sess, crate_type);\n             let opts = &sess.target.target.options;\n-            let pre_objects =\n-                if fallback { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n-            let post_objects =\n-                if fallback { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n+            let pre_objects = if self_contained {\n+                &opts.pre_link_objects_fallback\n+            } else {\n+                &opts.pre_link_objects\n+            };\n+            let post_objects = if self_contained {\n+                &opts.post_link_objects_fallback\n+            } else {\n+                &opts.post_link_objects\n+            };\n             let get_objects = |objects: &CrtObjects, kind| {\n                 objects\n                     .get(&kind)\n                     .iter()\n                     .copied()\n                     .flatten()\n-                    .map(|obj| get_object_file_path(sess, obj).into_os_string())\n+                    .map(|obj| get_object_file_path(sess, obj, self_contained).into_os_string())\n                     .collect::<Vec<_>>()\n             };\n             let pre_objects_static_pie = get_objects(pre_objects, LinkOutputKind::StaticPicExe);\n@@ -1066,9 +1077,11 @@ fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n     }\n }\n \n-fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n+fn get_object_file_path(sess: &Session, name: &str, self_contained: bool) -> PathBuf {\n     // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n-    if sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+    if sess.opts.debugging_opts.link_self_contained.is_none()\n+        && sess.target.target.llvm_target.contains(\"windows-gnu\")\n+    {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n             let file_path = compiler_libs_path.join(name);\n             if file_path.exists() {\n@@ -1081,9 +1094,12 @@ fn get_object_file_path(sess: &Session, name: &str) -> PathBuf {\n     if file_path.exists() {\n         return file_path;\n     }\n-    let file_path = fs.get_selfcontained_lib_path().join(name);\n-    if file_path.exists() {\n-        return file_path;\n+    // Special directory with objects used only in self-contained linkage mode\n+    if self_contained {\n+        let file_path = fs.get_self_contained_lib_path().join(name);\n+        if file_path.exists() {\n+            return file_path;\n+        }\n     }\n     for search_path in fs.search_paths() {\n         let file_path = search_path.dir.join(name);\n@@ -1268,6 +1284,10 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n /// Whether we link to our own CRT objects instead of relying on gcc to pull them.\n /// We only provide such support for a very limited number of targets.\n fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n+    if let Some(self_contained) = sess.opts.debugging_opts.link_self_contained {\n+        return self_contained;\n+    }\n+\n     match sess.target.target.options.crt_objects_fallback {\n         // FIXME: Find a better heuristic for \"native musl toolchain is available\",\n         // based on host and linker path, for example.\n@@ -1287,12 +1307,13 @@ fn add_pre_link_objects(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     link_output_kind: LinkOutputKind,\n-    fallback: bool,\n+    self_contained: bool,\n ) {\n     let opts = &sess.target.target.options;\n-    let objects = if fallback { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n+    let objects =\n+        if self_contained { &opts.pre_link_objects_fallback } else { &opts.pre_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n-        cmd.add_object(&get_object_file_path(sess, obj));\n+        cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n }\n \n@@ -1301,12 +1322,13 @@ fn add_post_link_objects(\n     cmd: &mut dyn Linker,\n     sess: &Session,\n     link_output_kind: LinkOutputKind,\n-    fallback: bool,\n+    self_contained: bool,\n ) {\n     let opts = &sess.target.target.options;\n-    let objects = if fallback { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n+    let objects =\n+        if self_contained { &opts.post_link_objects_fallback } else { &opts.post_link_objects };\n     for obj in objects.get(&link_output_kind).iter().copied().flatten() {\n-        cmd.add_object(&get_object_file_path(sess, obj));\n+        cmd.add_object(&get_object_file_path(sess, obj, self_contained));\n     }\n }\n \n@@ -1468,9 +1490,12 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n }\n \n /// Add sysroot and other globally set directories to the directory search list.\n-fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session) {\n+fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // Prefer system mingw-w64 libs, see get_crt_libs_path comment for more details.\n-    if cfg!(windows) && sess.target.target.llvm_target.contains(\"windows-gnu\") {\n+    if sess.opts.debugging_opts.link_self_contained.is_none()\n+        && cfg!(windows)\n+        && sess.target.target.llvm_target.contains(\"windows-gnu\")\n+    {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n             cmd.include_path(&compiler_libs_path);\n         }\n@@ -1481,8 +1506,11 @@ fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session) {\n     let lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n     cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n \n-    let lib_path = sess.target_filesearch(PathKind::All).get_selfcontained_lib_path();\n-    cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+    // Special directory with libraries used only in self-contained linkage mode\n+    if self_contained {\n+        let lib_path = sess.target_filesearch(PathKind::All).get_self_contained_lib_path();\n+        cmd.include_path(&fix_windows_verbatim_for_gcc(&lib_path));\n+    }\n }\n \n /// Add options making relocation sections in the produced ELF files read-only\n@@ -1545,13 +1573,13 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     codegen_results: &CodegenResults,\n     target_cpu: &str,\n ) -> Command {\n-    let base_cmd = get_linker(sess, path, flavor);\n+    let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n+    let base_cmd = get_linker(sess, path, flavor, crt_objects_fallback);\n     // FIXME: Move `/LIBPATH` addition for uwp targets from the linker construction\n     // to the linker args construction.\n     assert!(base_cmd.get_args().is_empty() || sess.target.target.target_vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n     let link_output_kind = link_output_kind(sess, crate_type);\n-    let crt_objects_fallback = crt_objects_fallback(sess, crate_type);\n \n     // NO-OPT-OUT, OBJECT-FILES-MAYBE, CUSTOMIZATION-POINT\n     add_pre_link_args(cmd, sess, flavor);\n@@ -1597,7 +1625,7 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n \n     // NO-OPT-OUT, OBJECT-FILES-NO, AUDIT-ORDER\n     // FIXME: Order-dependent, at least relatively to other args adding searh directories.\n-    add_library_search_dirs(cmd, sess);\n+    add_library_search_dirs(cmd, sess, crt_objects_fallback);\n \n     // OBJECT-FILES-YES\n     add_local_crate_regular_objects(cmd, codegen_results);"}, {"sha": "27396c524f4e6f4134dfeee763fd2f77a7cf283f", "filename": "src/librustc_session/filesearch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=9275ff7b218d6aacea649425bf1b603c6f78d578", "patch": "@@ -41,7 +41,7 @@ impl<'a> FileSearch<'a> {\n         make_target_lib_path(self.sysroot, self.triple)\n     }\n \n-    pub fn get_selfcontained_lib_path(&self) -> PathBuf {\n+    pub fn get_self_contained_lib_path(&self) -> PathBuf {\n         self.get_lib_path().join(\"self-contained\")\n     }\n \n@@ -92,13 +92,13 @@ impl<'a> FileSearch<'a> {\n     }\n \n     // Returns a list of directories where target-specific tool binaries are located.\n-    pub fn get_tools_search_paths(&self) -> Vec<PathBuf> {\n+    pub fn get_tools_search_paths(&self, self_contained: bool) -> Vec<PathBuf> {\n         let mut p = PathBuf::from(self.sysroot);\n         p.push(find_libdir(self.sysroot).as_ref());\n         p.push(RUST_LIB_DIR);\n         p.push(&self.triple);\n         p.push(\"bin\");\n-        vec![p.clone(), p.join(\"self-contained\")]\n+        if self_contained { vec![p.clone(), p.join(\"self-contained\")] } else { vec![p.clone()] }\n     }\n }\n "}, {"sha": "9337f241d7022fd322a2a708cba2fde5271ee716", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9275ff7b218d6aacea649425bf1b603c6f78d578/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=9275ff7b218d6aacea649425bf1b603c6f78d578", "patch": "@@ -889,6 +889,9 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"keep hygiene data after analysis (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n+    link_self_contained: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+        \"control whether to link Rust provided C objects/libraries or rely\n+         on C toolchain installed in the system\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],"}]}