{"sha": "e5fe9eb8996d2d8236755e1f21f673f86f8c854c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZmU5ZWI4OTk2ZDJkODIzNjc1NWUxZjIxZjY3M2Y4NmY4Yzg1NGM=", "commit": {"author": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-08T21:06:21Z"}, "committer": {"name": "Timoth\u00e9e Delabrouille", "email": "timothee.delabrouille@musicworldmedia.com", "date": "2021-04-08T21:06:21Z"}, "message": "New 'Label' section with example and explainations", "tree": {"sha": "e668319e02147d77756279918c2e18a43544f1e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e668319e02147d77756279918c2e18a43544f1e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5fe9eb8996d2d8236755e1f21f673f86f8c854c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5fe9eb8996d2d8236755e1f21f673f86f8c854c", "html_url": "https://github.com/rust-lang/rust/commit/e5fe9eb8996d2d8236755e1f21f673f86f8c854c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5fe9eb8996d2d8236755e1f21f673f86f8c854c/comments", "author": null, "committer": null, "parents": [{"sha": "69e1d22ddbc67b25141a735a22a8895a678b32ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e1d22ddbc67b25141a735a22a8895a678b32ca", "html_url": "https://github.com/rust-lang/rust/commit/69e1d22ddbc67b25141a735a22a8895a678b32ca"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "0503c26014a842b6bb31cd725809b15ba1ccf39c", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e5fe9eb8996d2d8236755e1f21f673f86f8c854c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/e5fe9eb8996d2d8236755e1f21f673f86f8c854c/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=e5fe9eb8996d2d8236755e1f21f673f86f8c854c", "patch": "@@ -372,6 +372,43 @@ unsafe {\n # }\n ```\n \n+## Labels\n+\n+The compiler is allowed to instantiate multiple copies an `asm!` block, for example when the function containing it is inlined in multiple places. As a consequence, you should only use GNU assembler [local labels] inside inline assembly code. Defining symbols in assembly code may lead to assembler and/or linker errors due to duplicate symbol definitions.\n+\n+Moreover due to [a llvm bug], you cannot use `0` or `1` as labels. Therefore only labels in the `2`-`99` range are allowed.\n+\n+```rust\n+#![feature(asm)]\n+\n+let mut a = 0;\n+unsafe {\n+    asm!(\n+        \"mov {0}, 10\",\n+        \"2:\",\n+        \"sub {0}, 1\",\n+        \"cmp {0}, 3\",\n+        \"jle 2f\",\n+        \"jmp 2b\",\n+        \"2:\",\n+        \"add {0}, 2\",\n+        out(reg) a\n+    );\n+}\n+assert_eq!(a, 5);\n+```\n+\n+This will decrement the `{0}` register value from 10 to 3, then add 2 and store it in `a`.\n+\n+This example show a few thing:\n+\n+First that the same number can be used as a label multiple times in the same inline block.\n+\n+Second, that when a numeric label is used as a reference (as an instruction operand, for example), the suffixes b (\u201cbackward\u201d) or f (\u201cforward\u201d) should be added to the numeric label. It will then refer to the nearest label defined by this number in this direction.\n+\n+[local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n+[a llvm bug]: https://bugs.llvm.org/show_bug.cgi?id=36144\n+\n ## Options\n \n By default, an inline assembly block is treated the same way as an external FFI function call with a custom calling convention: it may read/write memory, have observable side effects, etc. However in many cases, it is desirable to give the compiler more information about what the assembly code is actually doing so that it can optimize better.\n@@ -787,8 +824,5 @@ The compiler performs some additional checks on options:\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n - You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n-  - As a consequence, you should only use [local labels] inside inline assembly code. Defining symbols in assembly code may lead to assembler and/or linker errors due to duplicate symbol definitions.\n \n > **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call.\n-\n-[local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels"}]}