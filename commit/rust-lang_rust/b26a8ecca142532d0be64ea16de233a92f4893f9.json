{"sha": "b26a8ecca142532d0be64ea16de233a92f4893f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNmE4ZWNjYTE0MjUzMmQwYmU2NGVhMTZkZTIzM2E5MmY0ODkzZjk=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-22T17:39:59Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T13:02:49Z"}, "message": "Move document highlighting computation from rust-analyzer to ide", "tree": {"sha": "49f4b246d3260b049e70511deb010e337b82f5ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f4b246d3260b049e70511deb010e337b82f5ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b26a8ecca142532d0be64ea16de233a92f4893f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b26a8ecca142532d0be64ea16de233a92f4893f9", "html_url": "https://github.com/rust-lang/rust/commit/b26a8ecca142532d0be64ea16de233a92f4893f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b26a8ecca142532d0be64ea16de233a92f4893f9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b", "html_url": "https://github.com/rust-lang/rust/commit/3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b"}], "stats": {"total": 253, "additions": 214, "deletions": 39}, "files": [{"sha": "ad202cf270561cbab3e64132c5bcd88b5f57a223", "filename": "crates/ide/src/document_highlight.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Fdocument_highlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Fdocument_highlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdocument_highlight.rs?ref=b26a8ecca142532d0be64ea16de233a92f4893f9", "patch": "@@ -0,0 +1,138 @@\n+use hir::Semantics;\n+use ide_db::{\n+    base_db::FilePosition,\n+    defs::Definition,\n+    search::{FileReference, ReferenceAccess, SearchScope},\n+    RootDatabase,\n+};\n+use syntax::{AstNode, TextRange};\n+\n+use crate::{display::TryToNav, references, NavigationTarget};\n+\n+pub struct DocumentHighlight {\n+    pub range: TextRange,\n+    pub access: Option<ReferenceAccess>,\n+}\n+\n+// Feature: Document highlight\n+//\n+// Highlights the definition and its all references of the item at the cursor location in the current file.\n+pub(crate) fn document_highlight(\n+    sema: &Semantics<RootDatabase>,\n+    position: FilePosition,\n+) -> Option<Vec<DocumentHighlight>> {\n+    let _p = profile::span(\"document_highlight\");\n+    let syntax = sema.parse(position.file_id).syntax().clone();\n+    let def = references::find_def(sema, &syntax, position)?;\n+    let usages = def.usages(sema).set_scope(Some(SearchScope::single_file(position.file_id))).all();\n+\n+    let declaration = match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+            Some(NavigationTarget::from_module_to_decl(sema.db, module))\n+        }\n+        def => def.try_to_nav(sema.db),\n+    }\n+    .filter(|decl| decl.file_id == position.file_id)\n+    .and_then(|decl| {\n+        let range = decl.focus_range?;\n+        let access = references::decl_access(&def, &syntax, range);\n+        Some(DocumentHighlight { range, access })\n+    });\n+\n+    let file_refs = usages.references.get(&position.file_id).map_or(&[][..], Vec::as_slice);\n+    let mut res = Vec::with_capacity(file_refs.len() + 1);\n+    res.extend(declaration);\n+    res.extend(\n+        file_refs\n+            .iter()\n+            .map(|&FileReference { access, range, .. }| DocumentHighlight { range, access }),\n+    );\n+    Some(res)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::fixture;\n+\n+    use super::*;\n+\n+    fn check(ra_fixture: &str) {\n+        let (analysis, pos, annotations) = fixture::annotations(ra_fixture);\n+        let hls = analysis.highlight_document(pos).unwrap().unwrap();\n+\n+        let mut expected = annotations\n+            .into_iter()\n+            .map(|(r, access)| (r.range, (!access.is_empty()).then(|| access)))\n+            .collect::<Vec<_>>();\n+\n+        let mut actual = hls\n+            .into_iter()\n+            .map(|hl| {\n+                (\n+                    hl.range,\n+                    hl.access.map(|it| {\n+                        match it {\n+                            ReferenceAccess::Read => \"read\",\n+                            ReferenceAccess::Write => \"write\",\n+                        }\n+                        .to_string()\n+                    }),\n+                )\n+            })\n+            .collect::<Vec<_>>();\n+        actual.sort_by_key(|(range, _)| range.start());\n+        expected.sort_by_key(|(range, _)| range.start());\n+\n+        assert_eq!(expected, actual);\n+    }\n+\n+    #[test]\n+    fn test_hl_module() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo$0;\n+ // ^^^\n+//- /foo.rs\n+struct Foo;\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_self_in_crate_root() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+use self$0;\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_self_in_module() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+use self$0;\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hl_local() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+fn foo() {\n+    let mut bar = 3;\n+         // ^^^ write\n+    bar$0;\n+ // ^^^ read\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "9661b8d4ad173c8008ca294c8eb0bd64d8da7d9a", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b26a8ecca142532d0be64ea16de233a92f4893f9", "patch": "@@ -24,32 +24,33 @@ mod display;\n \n mod annotations;\n mod call_hierarchy;\n+mod doc_links;\n+mod document_highlight;\n mod expand_macro;\n mod extend_selection;\n mod file_structure;\n+mod fn_references;\n mod folding_ranges;\n mod goto_definition;\n mod goto_implementation;\n mod goto_type_definition;\n-mod view_hir;\n mod hover;\n mod inlay_hints;\n mod join_lines;\n+mod markdown_remove;\n mod matching_brace;\n mod move_item;\n mod parent_module;\n mod references;\n mod rename;\n-mod fn_references;\n mod runnables;\n mod ssr;\n mod status;\n mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n-mod markdown_remove;\n-mod doc_links;\n mod view_crate_graph;\n+mod view_hir;\n mod view_item_tree;\n \n use std::sync::Arc;\n@@ -72,6 +73,7 @@ pub use crate::{\n     annotations::{Annotation, AnnotationConfig, AnnotationKind},\n     call_hierarchy::CallItem,\n     display::navigation_target::NavigationTarget,\n+    document_highlight::DocumentHighlight,\n     expand_macro::ExpandedMacro,\n     file_structure::{StructureNode, StructureNodeKind},\n     folding_ranges::{Fold, FoldKind},\n@@ -483,6 +485,14 @@ impl Analysis {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id, None, false))\n     }\n \n+    /// Computes all ranges to highlight for a given item in a file.\n+    pub fn highlight_document(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancellable<Option<Vec<DocumentHighlight>>> {\n+        self.with_db(|db| document_highlight::document_highlight(&Semantics::new(db), position))\n+    }\n+\n     /// Computes syntax highlighting for the given file range.\n     pub fn highlight_range(&self, frange: FileRange) -> Cancellable<Vec<HlRange>> {\n         self.with_db(|db| {"}, {"sha": "4aed2b526bd81cbbdea7f1afcf0dded7578797eb", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=b26a8ecca142532d0be64ea16de233a92f4893f9", "patch": "@@ -90,7 +90,13 @@ pub(crate) fn find_all_refs(\n             _ => {}\n         }\n     }\n-    let declaration = def.try_to_nav(sema.db).map(|nav| {\n+    let declaration = match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+            Some(NavigationTarget::from_module_to_decl(sema.db, module))\n+        }\n+        def => def.try_to_nav(sema.db),\n+    }\n+    .map(|nav| {\n         let decl_range = nav.focus_or_full_range();\n         Declaration { nav, access: decl_access(&def, &syntax, decl_range) }\n     });\n@@ -104,7 +110,7 @@ pub(crate) fn find_all_refs(\n     Some(ReferenceSearchResult { declaration, references })\n }\n \n-fn find_def(\n+pub(crate) fn find_def(\n     sema: &Semantics<RootDatabase>,\n     syntax: &SyntaxNode,\n     position: FilePosition,\n@@ -126,7 +132,11 @@ fn find_def(\n     Some(def)\n }\n \n-fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Option<ReferenceAccess> {\n+pub(crate) fn decl_access(\n+    def: &Definition,\n+    syntax: &SyntaxNode,\n+    range: TextRange,\n+) -> Option<ReferenceAccess> {\n     match def {\n         Definition::Local(_) | Definition::Field(_) => {}\n         _ => return None,\n@@ -658,9 +668,6 @@ fn f() {\n         );\n     }\n \n-    // `mod foo;` is not in the results because `foo` is an `ast::Name`.\n-    // So, there are two references: the first one is a definition of the `foo` module,\n-    // which is the whole `foo.rs`, and the second one is in `use foo::Foo`.\n     #[test]\n     fn test_find_all_refs_decl_module() {\n         check(\n@@ -680,13 +687,44 @@ pub struct Foo {\n }\n \"#,\n             expect![[r#\"\n-                foo Module FileId(1) 0..35\n+                foo Module FileId(0) 0..8 4..7\n \n                 FileId(0) 14..17\n             \"#]],\n         );\n     }\n \n+    #[test]\n+    fn test_find_all_refs_decl_module_on_self() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+mod foo;\n+\n+//- /foo.rs\n+use self$0;\n+\"#,\n+            expect![[r#\"\n+                foo Module FileId(0) 0..8 4..7\n+\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_find_all_refs_decl_module_on_self_crate_root() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+use self$0;\n+\"#,\n+            expect![[r#\"\n+                Module FileId(0) 0..10\n+\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_find_all_refs_super_mod_vis() {\n         check("}, {"sha": "d83ae25e3e276eb18afba9bae3b4b9b6b0defea6", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b26a8ecca142532d0be64ea16de233a92f4893f9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b26a8ecca142532d0be64ea16de233a92f4893f9", "patch": "@@ -9,21 +9,21 @@ use std::{\n \n use ide::{\n     AnnotationConfig, AssistKind, AssistResolveStrategy, FileId, FilePosition, FileRange,\n-    HoverAction, HoverGotoTypeData, Query, RangeInfo, Runnable, RunnableKind, SearchScope,\n-    SingleResolve, SourceChange, TextEdit,\n+    HoverAction, HoverGotoTypeData, Query, RangeInfo, Runnable, RunnableKind, SingleResolve,\n+    SourceChange, TextEdit,\n };\n use ide_db::SymbolKind;\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n     CallHierarchyIncomingCall, CallHierarchyIncomingCallsParams, CallHierarchyItem,\n     CallHierarchyOutgoingCall, CallHierarchyOutgoingCallsParams, CallHierarchyPrepareParams,\n-    CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams,\n-    DocumentHighlight, FoldingRange, FoldingRangeParams, HoverContents, Location, NumberOrString,\n-    Position, PrepareRenameResponse, Range, RenameParams, SemanticTokensDeltaParams,\n-    SemanticTokensFullDeltaResult, SemanticTokensParams, SemanticTokensRangeParams,\n-    SemanticTokensRangeResult, SemanticTokensResult, SymbolInformation, SymbolTag,\n-    TextDocumentIdentifier, TextDocumentPositionParams, Url, WorkspaceEdit,\n+    CodeLens, CompletionItem, Diagnostic, DiagnosticTag, DocumentFormattingParams, FoldingRange,\n+    FoldingRangeParams, HoverContents, Location, NumberOrString, Position, PrepareRenameResponse,\n+    Range, RenameParams, SemanticTokensDeltaParams, SemanticTokensFullDeltaResult,\n+    SemanticTokensParams, SemanticTokensRangeParams, SemanticTokensRangeResult,\n+    SemanticTokensResult, SymbolInformation, SymbolTag, TextDocumentIdentifier,\n+    TextDocumentPositionParams, Url, WorkspaceEdit,\n };\n use project_model::TargetKind;\n use serde::{Deserialize, Serialize};\n@@ -1163,33 +1163,22 @@ pub(crate) fn handle_code_lens_resolve(\n pub(crate) fn handle_document_highlight(\n     snap: GlobalStateSnapshot,\n     params: lsp_types::DocumentHighlightParams,\n-) -> Result<Option<Vec<DocumentHighlight>>> {\n+) -> Result<Option<Vec<lsp_types::DocumentHighlight>>> {\n     let _p = profile::span(\"handle_document_highlight\");\n     let position = from_proto::file_position(&snap, params.text_document_position_params)?;\n     let line_index = snap.file_line_index(position.file_id)?;\n \n-    let refs = match snap\n-        .analysis\n-        .find_all_refs(position, Some(SearchScope::single_file(position.file_id)))?\n-    {\n+    let refs = match snap.analysis.highlight_document(position)? {\n         None => return Ok(None),\n         Some(refs) => refs,\n     };\n-\n-    let decl = refs.declaration.filter(|decl| decl.nav.file_id == position.file_id).map(|decl| {\n-        DocumentHighlight {\n-            range: to_proto::range(&line_index, decl.nav.focus_or_full_range()),\n-            kind: decl.access.map(to_proto::document_highlight_kind),\n-        }\n-    });\n-\n-    let file_refs = refs.references.get(&position.file_id).map_or(&[][..], Vec::as_slice);\n-    let mut res = Vec::with_capacity(file_refs.len() + 1);\n-    res.extend(decl);\n-    res.extend(file_refs.iter().map(|&(range, access)| DocumentHighlight {\n-        range: to_proto::range(&line_index, range),\n-        kind: access.map(to_proto::document_highlight_kind),\n-    }));\n+    let res = refs\n+        .into_iter()\n+        .map(|ide::DocumentHighlight { range, access }| lsp_types::DocumentHighlight {\n+            range: to_proto::range(&line_index, range),\n+            kind: access.map(to_proto::document_highlight_kind),\n+        })\n+        .collect();\n     Ok(Some(res))\n }\n "}]}