{"sha": "104902100d8894d7578694754590668d6d725a17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNDkwMjEwMGQ4ODk0ZDc1Nzg2OTQ3NTQ1OTA2NjhkNmQ3MjVhMTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-09T19:37:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-09T19:37:59Z"}, "message": "Reduce code bloat from conversion traits in function parameters", "tree": {"sha": "283a1e8614e4d460fa4f9848ce81f096d17753ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/283a1e8614e4d460fa4f9848ce81f096d17753ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/104902100d8894d7578694754590668d6d725a17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/104902100d8894d7578694754590668d6d725a17", "html_url": "https://github.com/rust-lang/rust/commit/104902100d8894d7578694754590668d6d725a17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/104902100d8894d7578694754590668d6d725a17/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0762f58c1143b4ff0ae5d0cdda9cdd8249512e77", "url": "https://api.github.com/repos/rust-lang/rust/commits/0762f58c1143b4ff0ae5d0cdda9cdd8249512e77", "html_url": "https://github.com/rust-lang/rust/commit/0762f58c1143b4ff0ae5d0cdda9cdd8249512e77"}], "stats": {"total": 129, "additions": 101, "deletions": 28}, "files": [{"sha": "04739c7418cd0333e8516723de5f794a6c258df2", "filename": "src/librustc_back/tempdir.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibrustc_back%2Ftempdir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibrustc_back%2Ftempdir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftempdir.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -38,8 +38,12 @@ impl TempDir {\n     #[allow(deprecated)] // rand usage\n     pub fn new_in<P: AsRef<Path>>(tmpdir: P, prefix: &str)\n                                   -> io::Result<TempDir> {\n+        Self::_new_in(tmpdir.as_ref(), prefix)\n+    }\n+\n+    fn _new_in(tmpdir: &Path, prefix: &str) -> io::Result<TempDir> {\n         let storage;\n-        let mut tmpdir = tmpdir.as_ref();\n+        let mut tmpdir = tmpdir;\n         if !tmpdir.is_absolute() {\n             let cur_dir = try!(env::current_dir());\n             storage = cur_dir.join(tmpdir);"}, {"sha": "3447d1683a800347fbc7fc5fa79d35583096cb1c", "filename": "src/libstd/env.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -174,6 +174,10 @@ impl Iterator for VarsOs {\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {\n+    _var(key.as_ref())\n+}\n+\n+fn _var(key: &OsStr) -> Result<String, VarError> {\n     match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n         None => Err(VarError::NotPresent)\n@@ -196,8 +200,12 @@ pub fn var<K: AsRef<OsStr>>(key: K) -> Result<String, VarError> {\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var_os<K: AsRef<OsStr>>(key: K) -> Option<OsString> {\n+    _var_os(key.as_ref())\n+}\n+\n+fn _var_os(key: &OsStr) -> Option<OsString> {\n     let _g = ENV_LOCK.lock();\n-    os_imp::getenv(key.as_ref())\n+    os_imp::getenv(key)\n }\n \n /// Possible errors from the `env::var` method.\n@@ -263,8 +271,12 @@ impl Error for VarError {\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_var<K: AsRef<OsStr>, V: AsRef<OsStr>>(k: K, v: V) {\n+    _set_var(k.as_ref(), v.as_ref())\n+}\n+\n+fn _set_var(k: &OsStr, v: &OsStr) {\n     let _g = ENV_LOCK.lock();\n-    os_imp::setenv(k.as_ref(), v.as_ref())\n+    os_imp::setenv(k, v)\n }\n \n /// Removes an environment variable from the environment of the currently running process.\n@@ -294,8 +306,12 @@ pub fn set_var<K: AsRef<OsStr>, V: AsRef<OsStr>>(k: K, v: V) {\n /// ```\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn remove_var<K: AsRef<OsStr>>(k: K) {\n+    _remove_var(k.as_ref())\n+}\n+\n+fn _remove_var(k: &OsStr) {\n     let _g = ENV_LOCK.lock();\n-    os_imp::unsetenv(k.as_ref())\n+    os_imp::unsetenv(k)\n }\n \n /// An iterator over `Path` instances for parsing an environment variable"}, {"sha": "6181c6c4ca6cb5829bd630ce0d4d3df7e43d6588", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -181,7 +181,10 @@ impl CString {\n     /// the position of the nul byte.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new<T: Into<Vec<u8>>>(t: T) -> Result<CString, NulError> {\n-        let bytes = t.into();\n+        Self::_new(t.into())\n+    }\n+\n+    fn _new(bytes: Vec<u8>) -> Result<CString, NulError> {\n         match bytes.iter().position(|x| *x == 0) {\n             Some(i) => Err(NulError(i, bytes)),\n             None => Ok(unsafe { CString::from_vec_unchecked(bytes) }),"}, {"sha": "7409d9b45d28eeaecff58c46eef9d60155aa4a88", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -73,18 +73,18 @@ impl OsString {\n     /// convert; non UTF-8 data will produce `None`.\n     #[unstable(feature = \"convert\", reason = \"recently added\", issue = \"27704\")]\n     pub fn from_bytes<B>(bytes: B) -> Option<OsString> where B: Into<Vec<u8>> {\n-        #[cfg(unix)]\n-        fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n-            use os::unix::ffi::OsStringExt;\n-            Some(OsString::from_vec(vec))\n-        }\n+        Self::_from_bytes(bytes.into())\n+    }\n \n-        #[cfg(windows)]\n-        fn from_bytes_inner(vec: Vec<u8>) -> Option<OsString> {\n-            String::from_utf8(vec).ok().map(OsString::from)\n-        }\n+    #[cfg(unix)]\n+    fn _from_bytes(vec: Vec<u8>) -> Option<OsString> {\n+        use os::unix::ffi::OsStringExt;\n+        Some(OsString::from_vec(vec))\n+    }\n \n-        from_bytes_inner(bytes.into())\n+    #[cfg(windows)]\n+    fn _from_bytes(vec: Vec<u8>) -> Option<OsString> {\n+        String::from_utf8(vec).ok().map(OsString::from)\n     }\n \n     /// Converts to an `OsStr` slice."}, {"sha": "a3d509ba0f12dd83d2542fbf4f67be3b77305a80", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -184,7 +184,7 @@ impl File {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n-        OpenOptions::new().read(true).open(path)\n+        OpenOptions::new().read(true).open(path.as_ref())\n     }\n \n     /// Opens a file in write-only mode.\n@@ -206,7 +206,7 @@ impl File {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn create<P: AsRef<Path>>(path: P) -> io::Result<File> {\n-        OpenOptions::new().write(true).create(true).truncate(true).open(path)\n+        OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n     /// Attempts to sync all OS-internal metadata to disk.\n@@ -494,7 +494,10 @@ impl OpenOptions {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn open<P: AsRef<Path>>(&self, path: P) -> io::Result<File> {\n-        let path = path.as_ref();\n+        self._open(path.as_ref())\n+    }\n+\n+    fn _open(&self, path: &Path) -> io::Result<File> {\n         let inner = try!(fs_imp::File::open(path, &self.0));\n         Ok(File { inner: inner })\n     }\n@@ -1048,7 +1051,10 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n-    let path = path.as_ref();\n+    _remove_dir_all(path.as_ref())\n+}\n+\n+fn _remove_dir_all(path: &Path) -> io::Result<()> {\n     for child in try!(read_dir(path)) {\n         let child = try!(child).path();\n         let stat = try!(symlink_metadata(&*child));\n@@ -1113,6 +1119,10 @@ pub fn read_dir<P: AsRef<Path>>(path: P) -> io::Result<ReadDir> {\n                      as symlinks differently\",\n            issue = \"27707\")]\n pub fn walk_dir<P: AsRef<Path>>(path: P) -> io::Result<WalkDir> {\n+    _walk_dir(path.as_ref())\n+}\n+\n+fn _walk_dir(path: &Path) -> io::Result<WalkDir> {\n     let start = try!(read_dir(path));\n     Ok(WalkDir { cur: Some(start), stack: Vec::new() })\n }\n@@ -1272,7 +1282,10 @@ impl DirBuilder {\n     /// Create the specified directory with the options configured in this\n     /// builder.\n     pub fn create<P: AsRef<Path>>(&self, path: P) -> io::Result<()> {\n-        let path = path.as_ref();\n+        self._create(path.as_ref())\n+    }\n+\n+    fn _create(&self, path: &Path) -> io::Result<()> {\n         if self.recursive {\n             self.create_dir_all(path)\n         } else {"}, {"sha": "9b55eaea13aca5a283423e543596daced01c49bf", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -191,10 +191,14 @@ impl Error {\n     pub fn new<E>(kind: ErrorKind, error: E) -> Error\n         where E: Into<Box<error::Error+Send+Sync>>\n     {\n+        Self::_new(kind, error.into())\n+    }\n+\n+    fn _new(kind: ErrorKind, error: Box<error::Error+Send+Sync>) -> Error {\n         Error {\n             repr: Repr::Custom(Box::new(Custom {\n                 kind: kind,\n-                error: error.into(),\n+                error: error,\n             }))\n         }\n     }"}, {"sha": "8eb5d1f2726d644cd25100bba0a4aa2fbf41b6b1", "filename": "src/libstd/path.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/104902100d8894d7578694754590668d6d725a17/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=104902100d8894d7578694754590668d6d725a17", "patch": "@@ -965,8 +965,10 @@ impl PathBuf {\n     /// * if `path` has a prefix but no root, it replaces `self`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push<P: AsRef<Path>>(&mut self, path: P) {\n-        let path = path.as_ref();\n+        self._push(path.as_ref())\n+    }\n \n+    fn _push(&mut self, path: &Path) {\n         // in general, a separator is needed if the rightmost byte is not a separator\n         let mut need_sep = self.as_mut_vec().last().map(|c| !is_sep_byte(*c)).unwrap_or(false);\n \n@@ -1033,11 +1035,15 @@ impl PathBuf {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_file_name<S: AsRef<OsStr>>(&mut self, file_name: S) {\n+        self._set_file_name(file_name.as_ref())\n+    }\n+\n+    fn _set_file_name(&mut self, file_name: &OsStr) {\n         if self.file_name().is_some() {\n             let popped = self.pop();\n             debug_assert!(popped);\n         }\n-        self.push(file_name.as_ref());\n+        self.push(file_name);\n     }\n \n     /// Updates `self.extension()` to `extension`.\n@@ -1048,14 +1054,17 @@ impl PathBuf {\n     /// is added; otherwise it is replaced.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn set_extension<S: AsRef<OsStr>>(&mut self, extension: S) -> bool {\n+        self._set_extension(extension.as_ref())\n+    }\n+\n+    fn _set_extension(&mut self, extension: &OsStr) -> bool {\n         if self.file_name().is_none() { return false; }\n \n         let mut stem = match self.file_stem() {\n             Some(stem) => stem.to_os_string(),\n             None => OsString::new(),\n         };\n \n-        let extension = extension.as_ref();\n         if !os_str_as_u8_slice(extension).is_empty() {\n             stem.push(\".\");\n             stem.push(extension);\n@@ -1106,7 +1115,7 @@ impl<P: AsRef<Path>> iter::FromIterator<P> for PathBuf {\n impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n     fn extend<I: IntoIterator<Item = P>>(&mut self, iter: I) {\n         for p in iter {\n-            self.push(p)\n+            self.push(p.as_ref())\n         }\n     }\n }\n@@ -1452,7 +1461,11 @@ impl Path {\n                issue = \"23284\")]\n     pub fn relative_from<'a, P: ?Sized + AsRef<Path>>(&'a self, base: &'a P) -> Option<&Path>\n     {\n-        iter_after(self.components(), base.as_ref().components()).map(|c| c.as_path())\n+        self._relative_from(base.as_ref())\n+    }\n+\n+    fn _relative_from<'a>(&'a self, base: &'a Path) -> Option<&'a Path> {\n+        iter_after(self.components(), base.components()).map(|c| c.as_path())\n     }\n \n     /// Determines whether `base` is a prefix of `self`.\n@@ -1472,7 +1485,11 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<P: AsRef<Path>>(&self, base: P) -> bool {\n-        iter_after(self.components(), base.as_ref().components()).is_some()\n+        self._starts_with(base.as_ref())\n+    }\n+\n+    fn _starts_with(&self, base: &Path) -> bool {\n+        iter_after(self.components(), base.components()).is_some()\n     }\n \n     /// Determines whether `child` is a suffix of `self`.\n@@ -1490,7 +1507,11 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn ends_with<P: AsRef<Path>>(&self, child: P) -> bool {\n-        iter_after(self.components().rev(), child.as_ref().components().rev()).is_some()\n+        self._ends_with(child.as_ref())\n+    }\n+\n+    fn _ends_with(&self, child: &Path) -> bool {\n+        iter_after(self.components().rev(), child.components().rev()).is_some()\n     }\n \n     /// Extracts the stem (non-extension) portion of `self.file_name()`.\n@@ -1552,6 +1573,10 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn join<P: AsRef<Path>>(&self, path: P) -> PathBuf {\n+        self._join(path.as_ref())\n+    }\n+\n+    fn _join(&self, path: &Path) -> PathBuf {\n         let mut buf = self.to_path_buf();\n         buf.push(path);\n         buf\n@@ -1571,6 +1596,10 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {\n+        self._with_file_name(file_name.as_ref())\n+    }\n+\n+    fn _with_file_name(&self, file_name: &OsStr) -> PathBuf {\n         let mut buf = self.to_path_buf();\n         buf.set_file_name(file_name);\n         buf\n@@ -1590,6 +1619,10 @@ impl Path {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n+        self._with_extension(extension.as_ref())\n+    }\n+\n+    fn _with_extension(&self, extension: &OsStr) -> PathBuf {\n         let mut buf = self.to_path_buf();\n         buf.set_extension(extension);\n         buf"}]}