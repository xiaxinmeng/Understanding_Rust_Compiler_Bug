{"sha": "232785251bc80bc32c2ab52b624ecffbf5e35185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMjc4NTI1MWJjODBiYzMyYzJhYjUyYjYyNGVjZmZiZjVlMzUxODU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-29T16:49:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-29T16:49:40Z"}, "message": "Merge #2061\n\n2061: Theme loading and \"editor.tokenColorCustomizations\" support. r=matklad a=seivan\n\nFixes: [Issue#1294](https://github.com/rust-analyzer/rust-analyzer/issues/1294#issuecomment-497450325)\r\n\r\nTODO: \r\n- [x] Load themes\r\n- [x] Load existing `ralsp`-prefixed overrides from `\"workbench.colorCustomizations\"`.\r\n- [x] Load overrides from `\"editor.tokenColorCustomizations.textMateRules\"`.\r\n- [x] Use RA tags to load `vscode.DecorationRenderOptions` (colors) from theme & overrides.\r\n- [x] Map RA tags to common TextMate scopes before loading colors.\r\n- [x] Add default scope mappings in extension.\r\n- [x] Cache mappings between settings updates. \r\n- [x] Add scope mapping configuration manifest in `package.json`\r\n- [x] Load configurable scope mappings from settings.\r\n- [x] Load JSON Scheme for text mate scope rules in settings.\r\n- [x] Update [Readme](https://github.com/seivan/rust-analyzer/blob/feature/themes/docs/user/README.md#settings).\r\n\r\nBorrowed the theme loading (`scopes.ts`) from `Tree Sitter` with some modifications to reading `\"editor.tokenColorCustomizations\"` for merging with loaded themes and had to remove the async portions to be able to load it from settings updates. \r\n\r\n~Just a PoC and an idea I toyed around with a lot of room for improvement.~\r\nFor starters, certain keywords aren't part of the standard TextMate grammar, so it still reads colors from the `ralsp` prefixed values in `\"workbench.colorCustomizations\"`. \r\n\r\nBut I think there's more value making the extension work with existing themes by maping some of the decoration tags to existing key or keys. \r\n\r\n<img width=\"453\" alt=\"Screenshot 2019-11-09 at 17 43 18\" src=\"https://user-images.githubusercontent.com/55424/68531968-71b4e380-0318-11ea-924e-cdbb8d5eae06.png\">\r\n<img width=\"780\" alt=\"Screenshot 2019-11-09 at 17 41 45\" src=\"https://user-images.githubusercontent.com/55424/68531950-4b8f4380-0318-11ea-8f85-24a84efaf23b.png\">\r\n<img width=\"468\" alt=\"Screenshot 2019-11-09 at 17 40 29\" src=\"https://user-images.githubusercontent.com/55424/68531952-51852480-0318-11ea-800a-6ae9215f5368.png\">\r\n\r\n\r\nThese will merge with the default ones coming with the extension, so you don't have to implement all of them and works well with overrides defined in settings. \r\n\r\n```jsonc\r\n    \"editor.tokenColorCustomizations\": {\r\n        \"textMateRules\": [\r\n            {\r\n                \"scope\": \"keyword\",\r\n                \"settings\": {\r\n                    \"fontStyle\": \"bold\",\r\n                }\r\n            },\r\n        ]\r\n    },\r\n```\r\n\r\n\r\nEdit: The idea is to work with 90% of the themes out there by working within existing scopes available that are generally styled. It's not to say I want to erase the custom Rust scopes - those should still remain and eventually worked into a custom grammar bundle for Rust specific themes that target those, I just want to make it work with generic themes offered on the market place for now. \r\n\r\nA custom grammar bundle and themes for Rust specific scopes is out of... scope for this PR. \r\nWe'll make another round to tackle those issues. \r\n\r\n\r\nCurrent fallbacks implemented\r\n\r\n```typescript\r\n    [\r\n        'comment',\r\n        [\r\n            'comment',\r\n            'comment.block',\r\n            'comment.line',\r\n            'comment.block.documentation'\r\n        ]\r\n    ],\r\n    ['string', ['string']],\r\n    ['keyword', ['keyword']],\r\n    ['keyword.control', ['keyword.control', 'keyword', 'keyword.other']],\r\n    [\r\n        'keyword.unsafe',\r\n        ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword']\r\n    ],\r\n    ['function', ['entity.name.function']],\r\n    ['parameter', ['variable.parameter']],\r\n    ['constant', ['constant', 'variable']],\r\n    ['type', ['entity.name.type']],\r\n    ['builtin', ['variable.language', 'support.type', 'support.type']],\r\n    ['text', ['string', 'string.quoted', 'string.regexp']],\r\n    ['attribute', ['keyword']],\r\n    ['literal', ['string', 'string.quoted', 'string.regexp']],\r\n    ['macro', ['support.other']],\r\n    ['variable', ['variable']],\r\n    ['variable.mut', ['variable', 'storage.modifier']],\r\n    [\r\n        'field',\r\n        [\r\n            'variable.object.property',\r\n            'meta.field.declaration',\r\n            'meta.definition.property',\r\n            'variable.other'\r\n        ]\r\n    ],\r\n    ['module', ['entity.name.section', 'entity.other']]\r\n```\r\n\n\nCo-authored-by: Seivan Heidari <seivan.heidari@icloud.com>", "tree": {"sha": "6f8005b895d4005a9c6997d65f6994260bbbca12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f8005b895d4005a9c6997d65f6994260bbbca12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/232785251bc80bc32c2ab52b624ecffbf5e35185", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCNkkCRBK7hj4Ov3rIwAAdHIIAD7PeAakJ4p6TGl/qoxKR1Uf\nWgqRka8XkXFCAbzkVYKj0vU1w0NHXd5d06BJFfpKxipGwRDeAJjSmIfOZQYkERcr\n8XFo3/BQ88VcMHnm1pr6kiEe6mEL1icqMGW4IIS5eS2JqZobgPOTX9Y+jjsB1Doo\ngj2H43B3bIcCSY9IbOLxifi4wrWB3X6/e1e5joAJgm/AnlJzOQBEuARru67K1FKU\n2TkXst1u3+Aw1i80DkVa0GUx8eat9rinarD/R+6aqKxno5dyx6ZRkHwWAt/m6w4V\nkBJOvCTz2BPyM1DYUnbpM1VyC+Os2PeRcqJpy0bS/Sdr0xj33tMprkRecZl9048=\n=lDKj\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f8005b895d4005a9c6997d65f6994260bbbca12\nparent 523b4cbc602447b14202dd2520f84241bb07c4e2\nparent 25537d294cb7a3e01d2329a7d07b469d734fc829\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577638180 +0000\ncommitter GitHub <noreply@github.com> 1577638180 +0000\n\nMerge #2061\n\n2061: Theme loading and \"editor.tokenColorCustomizations\" support. r=matklad a=seivan\n\nFixes: [Issue#1294](https://github.com/rust-analyzer/rust-analyzer/issues/1294#issuecomment-497450325)\r\n\r\nTODO: \r\n- [x] Load themes\r\n- [x] Load existing `ralsp`-prefixed overrides from `\"workbench.colorCustomizations\"`.\r\n- [x] Load overrides from `\"editor.tokenColorCustomizations.textMateRules\"`.\r\n- [x] Use RA tags to load `vscode.DecorationRenderOptions` (colors) from theme & overrides.\r\n- [x] Map RA tags to common TextMate scopes before loading colors.\r\n- [x] Add default scope mappings in extension.\r\n- [x] Cache mappings between settings updates. \r\n- [x] Add scope mapping configuration manifest in `package.json`\r\n- [x] Load configurable scope mappings from settings.\r\n- [x] Load JSON Scheme for text mate scope rules in settings.\r\n- [x] Update [Readme](https://github.com/seivan/rust-analyzer/blob/feature/themes/docs/user/README.md#settings).\r\n\r\nBorrowed the theme loading (`scopes.ts`) from `Tree Sitter` with some modifications to reading `\"editor.tokenColorCustomizations\"` for merging with loaded themes and had to remove the async portions to be able to load it from settings updates. \r\n\r\n~Just a PoC and an idea I toyed around with a lot of room for improvement.~\r\nFor starters, certain keywords aren't part of the standard TextMate grammar, so it still reads colors from the `ralsp` prefixed values in `\"workbench.colorCustomizations\"`. \r\n\r\nBut I think there's more value making the extension work with existing themes by maping some of the decoration tags to existing key or keys. \r\n\r\n<img width=\"453\" alt=\"Screenshot 2019-11-09 at 17 43 18\" src=\"https://user-images.githubusercontent.com/55424/68531968-71b4e380-0318-11ea-924e-cdbb8d5eae06.png\">\r\n<img width=\"780\" alt=\"Screenshot 2019-11-09 at 17 41 45\" src=\"https://user-images.githubusercontent.com/55424/68531950-4b8f4380-0318-11ea-8f85-24a84efaf23b.png\">\r\n<img width=\"468\" alt=\"Screenshot 2019-11-09 at 17 40 29\" src=\"https://user-images.githubusercontent.com/55424/68531952-51852480-0318-11ea-800a-6ae9215f5368.png\">\r\n\r\n\r\nThese will merge with the default ones coming with the extension, so you don't have to implement all of them and works well with overrides defined in settings. \r\n\r\n```jsonc\r\n    \"editor.tokenColorCustomizations\": {\r\n        \"textMateRules\": [\r\n            {\r\n                \"scope\": \"keyword\",\r\n                \"settings\": {\r\n                    \"fontStyle\": \"bold\",\r\n                }\r\n            },\r\n        ]\r\n    },\r\n```\r\n\r\n\r\nEdit: The idea is to work with 90% of the themes out there by working within existing scopes available that are generally styled. It's not to say I want to erase the custom Rust scopes - those should still remain and eventually worked into a custom grammar bundle for Rust specific themes that target those, I just want to make it work with generic themes offered on the market place for now. \r\n\r\nA custom grammar bundle and themes for Rust specific scopes is out of... scope for this PR. \r\nWe'll make another round to tackle those issues. \r\n\r\n\r\nCurrent fallbacks implemented\r\n\r\n```typescript\r\n    [\r\n        'comment',\r\n        [\r\n            'comment',\r\n            'comment.block',\r\n            'comment.line',\r\n            'comment.block.documentation'\r\n        ]\r\n    ],\r\n    ['string', ['string']],\r\n    ['keyword', ['keyword']],\r\n    ['keyword.control', ['keyword.control', 'keyword', 'keyword.other']],\r\n    [\r\n        'keyword.unsafe',\r\n        ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword']\r\n    ],\r\n    ['function', ['entity.name.function']],\r\n    ['parameter', ['variable.parameter']],\r\n    ['constant', ['constant', 'variable']],\r\n    ['type', ['entity.name.type']],\r\n    ['builtin', ['variable.language', 'support.type', 'support.type']],\r\n    ['text', ['string', 'string.quoted', 'string.regexp']],\r\n    ['attribute', ['keyword']],\r\n    ['literal', ['string', 'string.quoted', 'string.regexp']],\r\n    ['macro', ['support.other']],\r\n    ['variable', ['variable']],\r\n    ['variable.mut', ['variable', 'storage.modifier']],\r\n    [\r\n        'field',\r\n        [\r\n            'variable.object.property',\r\n            'meta.field.declaration',\r\n            'meta.definition.property',\r\n            'variable.other'\r\n        ]\r\n    ],\r\n    ['module', ['entity.name.section', 'entity.other']]\r\n```\r\n\n\nCo-authored-by: Seivan Heidari <seivan.heidari@icloud.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/232785251bc80bc32c2ab52b624ecffbf5e35185", "html_url": "https://github.com/rust-lang/rust/commit/232785251bc80bc32c2ab52b624ecffbf5e35185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/232785251bc80bc32c2ab52b624ecffbf5e35185/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523b4cbc602447b14202dd2520f84241bb07c4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/523b4cbc602447b14202dd2520f84241bb07c4e2", "html_url": "https://github.com/rust-lang/rust/commit/523b4cbc602447b14202dd2520f84241bb07c4e2"}, {"sha": "25537d294cb7a3e01d2329a7d07b469d734fc829", "url": "https://api.github.com/repos/rust-lang/rust/commits/25537d294cb7a3e01d2329a7d07b469d734fc829", "html_url": "https://github.com/rust-lang/rust/commit/25537d294cb7a3e01d2329a7d07b469d734fc829"}], "stats": {"total": 383, "additions": 369, "deletions": 14}, "files": [{"sha": "968d2e34c8040096c39df4ba2fd9f92c0d344fdf", "filename": "docs/user/README.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -87,7 +87,16 @@ host.\n \n ### Settings\n \n-* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting\n+* `rust-analyzer.highlightingOn`: enables experimental syntax highlighting.\n+* `rust-analyzer.scopeMappings` -- a scheme backed JSON object to tweak Rust Analyzer scopes to TextMate scopes.\n+   ```jsonc\n+    {\n+        //Will autocomplete keys to available RA scopes. \n+        \"keyword.unsafe\": [\"keyword\", \"keyword.control\"],\n+        //Values are string | TextMateScope | [string | TextMateScope]\n+        \"variable.mut\": \"variable\"\n+    }\n+   ```\n * `rust-analyzer.enableEnhancedTyping`: by default, rust-analyzer intercepts\n   `Enter` key to make it easier to continue comments. Note that it may conflict with VIM emulation plugin.\n * `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n@@ -106,7 +115,7 @@ host.\n * `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n * `RUST_SRC_PATH`: environment variable that overwrites the sysroot\n * `rust-analyzer.featureFlags` -- a JSON object to tweak fine-grained behavior:\n-   ```js\n+   ```jsonc\n    {\n        // Show diagnostics produced by rust-analyzer itself.\n        \"lsp.diagnostics\": true,"}, {"sha": "67081f3fdde827704068d0ea06c499b919380c18", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -750,6 +750,11 @@\n                 \"esprima\": \"^4.0.0\"\n             }\n         },\n+        \"jsonc-parser\": {\n+            \"version\": \"2.2.0\",\n+            \"resolved\": \"https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-2.2.0.tgz\",\n+            \"integrity\": \"sha512-4fLQxW1j/5fWj6p78vAlAafoCKtuBm6ghv+Ij5W2DrDx0qE+ZdEl2c6Ko1mgJNF5ftX1iEWQQ4Ap7+3GlhjkOA==\"\n+        },\n         \"lines-and-columns\": {\n             \"version\": \"1.1.6\",\n             \"resolved\": \"https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.1.6.tgz\","}, {"sha": "f28ce17720a5dcfbe446c42bcb36caa0e9ad886d", "filename": "editors/code/package.json", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -34,7 +34,8 @@\n     \"dependencies\": {\n         \"lookpath\": \"^1.0.4\",\n         \"seedrandom\": \"^3.0.5\",\n-        \"vscode-languageclient\": \"^6.0.0-next.9\"\n+        \"vscode-languageclient\": \"^6.0.0-next.9\",\n+        \"jsonc-parser\": \"^2.1.0\"\n     },\n     \"devDependencies\": {\n         \"@types/glob\": \"^7.1.1\",\n@@ -166,6 +167,68 @@\n                     \"default\": false,\n                     \"description\": \"Highlight Rust code (overrides built-in syntax highlighting)\"\n                 },\n+                \"rust-analyzer.scopeMappings\": {\n+                    \"type\": \"object\",\n+                    \"definitions\": {},\n+                    \"properties\": {\n+                        \"comment\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"string\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword.control\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"keyword.unsafe\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"function\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"parameter\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"constant\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"type\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"builtin\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"text\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"attribute\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"literal\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"macro\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"variable\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"variable.mut\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"field\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        },\n+                        \"module\": {\n+                            \"$ref\": \"vscode://schemas/textmate-colors#/items/properties/scope\"\n+                        }\n+                    },\n+                    \"additionalProperties\": false,\n+                    \"description\": \"Mapping Rust Analyzer scopes to TextMateRule scopes list.\"\n+                },\n                 \"rust-analyzer.rainbowHighlightingOn\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,"}, {"sha": "a88be6e35093d916df2dac590a7b09131f77834b", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -1,5 +1,6 @@\n import * as vscode from 'vscode';\n-\n+import * as scopes from './scopes';\n+import * as scopesMapper from './scopes_mapper';\n import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n@@ -54,10 +55,17 @@ export class Config {\n \n     public userConfigChanged() {\n         const config = vscode.workspace.getConfiguration('rust-analyzer');\n+\n+        Server.highlighter.removeHighlights();\n+\n         let requireReloadMessage = null;\n \n         if (config.has('highlightingOn')) {\n             this.highlightingOn = config.get('highlightingOn') as boolean;\n+            if (this.highlightingOn) {\n+                scopes.load();\n+                scopesMapper.load();\n+            }\n         }\n \n         if (config.has('rainbowHighlightingOn')) {\n@@ -66,10 +74,6 @@ export class Config {\n             ) as boolean;\n         }\n \n-        if (!this.highlightingOn && Server) {\n-            Server.highlighter.removeHighlights();\n-        }\n-\n         if (config.has('enableEnhancedTyping')) {\n             this.enableEnhancedTyping = config.get(\n                 'enableEnhancedTyping',"}, {"sha": "4e224a54c11652056989fb2dbf97d5fb70e3d6c4", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -1,6 +1,8 @@\n import seedrandom = require('seedrandom');\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n+import * as scopes from './scopes';\n+import * as scopesMapper from './scopes_mapper';\n \n import { Server } from './server';\n \n@@ -23,6 +25,41 @@ function fancify(seed: string, shade: 'light' | 'dark') {\n     return `hsl(${h},${s}%,${l}%)`;\n }\n \n+function createDecorationFromTextmate(\n+    themeStyle: scopes.TextMateRuleSettings,\n+): vscode.TextEditorDecorationType {\n+    const decorationOptions: vscode.DecorationRenderOptions = {};\n+    decorationOptions.rangeBehavior = vscode.DecorationRangeBehavior.OpenOpen;\n+\n+    if (themeStyle.foreground) {\n+        decorationOptions.color = themeStyle.foreground;\n+    }\n+\n+    if (themeStyle.background) {\n+        decorationOptions.backgroundColor = themeStyle.background;\n+    }\n+\n+    if (themeStyle.fontStyle) {\n+        const parts: string[] = themeStyle.fontStyle.split(' ');\n+        parts.forEach(part => {\n+            switch (part) {\n+                case 'italic':\n+                    decorationOptions.fontStyle = 'italic';\n+                    break;\n+                case 'bold':\n+                    decorationOptions.fontWeight = 'bold';\n+                    break;\n+                case 'underline':\n+                    decorationOptions.textDecoration = 'underline';\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+    return vscode.window.createTextEditorDecorationType(decorationOptions);\n+}\n+\n export class Highlighter {\n     private static initDecorations(): Map<\n         string,\n@@ -32,12 +69,25 @@ export class Highlighter {\n             tag: string,\n             textDecoration?: string,\n         ): [string, vscode.TextEditorDecorationType] => {\n-            const color = new vscode.ThemeColor('ralsp.' + tag);\n-            const decor = vscode.window.createTextEditorDecorationType({\n-                color,\n-                textDecoration,\n-            });\n-            return [tag, decor];\n+            const rule = scopesMapper.toRule(tag, scopes.find);\n+\n+            if (rule) {\n+                const decor = createDecorationFromTextmate(rule);\n+                return [tag, decor];\n+            } else {\n+                const fallBackTag = 'ralsp.' + tag;\n+                // console.log(' ');\n+                // console.log('Missing theme for: <\"' + tag + '\"> for following mapped scopes:');\n+                // console.log(scopesMapper.find(tag));\n+                // console.log('Falling back to values defined in: ' + fallBackTag);\n+                // console.log(' ');\n+                const color = new vscode.ThemeColor(fallBackTag);\n+                const decor = vscode.window.createTextEditorDecorationType({\n+                    color,\n+                    textDecoration,\n+                });\n+                return [tag, decor];\n+            }\n         };\n \n         const decorations: Iterable<["}, {"sha": "cb250b853ad0ecf50e721fdd441a4a73ea7a64e0", "filename": "editors/code/src/scopes.ts", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fscopes.ts", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fscopes.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes.ts?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -0,0 +1,146 @@\n+import * as fs from 'fs';\n+import * as jsonc from 'jsonc-parser';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+\n+export interface TextMateRule {\n+    scope: string | string[];\n+    settings: TextMateRuleSettings;\n+}\n+\n+export interface TextMateRuleSettings {\n+    foreground: string | undefined;\n+    background: string | undefined;\n+    fontStyle: string | undefined;\n+}\n+\n+// Current theme colors\n+const rules = new Map<string, TextMateRuleSettings>();\n+\n+export function find(scope: string): TextMateRuleSettings | undefined {\n+    return rules.get(scope);\n+}\n+\n+// Load all textmate scopes in the currently active theme\n+export function load() {\n+    // Remove any previous theme\n+    rules.clear();\n+    // Find out current color theme\n+    const themeName = vscode.workspace\n+        .getConfiguration('workbench')\n+        .get('colorTheme');\n+\n+    if (typeof themeName !== 'string') {\n+        // console.warn('workbench.colorTheme is', themeName)\n+        return;\n+    }\n+    // Try to load colors from that theme\n+    try {\n+        loadThemeNamed(themeName);\n+    } catch (e) {\n+        // console.warn('failed to load theme', themeName, e)\n+    }\n+}\n+\n+function filterThemeExtensions(extension: vscode.Extension<any>): boolean {\n+    return (\n+        extension.extensionKind === vscode.ExtensionKind.UI &&\n+        extension.packageJSON.contributes &&\n+        extension.packageJSON.contributes.themes\n+    );\n+}\n+\n+// Find current theme on disk\n+function loadThemeNamed(themeName: string) {\n+    const themePaths = vscode.extensions.all\n+        .filter(filterThemeExtensions)\n+        .reduce((list, extension) => {\n+            return extension.packageJSON.contributes.themes\n+                .filter(\n+                    (element: any) =>\n+                        (element.id || element.label) === themeName,\n+                )\n+                .map((element: any) =>\n+                    path.join(extension.extensionPath, element.path),\n+                )\n+                .concat(list);\n+        }, Array<string>());\n+\n+    themePaths.forEach(loadThemeFile);\n+\n+    const tokenColorCustomizations: [any] = [\n+        vscode.workspace\n+            .getConfiguration('editor')\n+            .get('tokenColorCustomizations'),\n+    ];\n+\n+    tokenColorCustomizations\n+        .filter(custom => custom && custom.textMateRules)\n+        .map(custom => custom.textMateRules)\n+        .forEach(loadColors);\n+}\n+\n+function loadThemeFile(themePath: string) {\n+    const themeContent = [themePath]\n+        .filter(isFile)\n+        .map(readFileText)\n+        .map(parseJSON)\n+        .filter(theme => theme);\n+\n+    themeContent\n+        .filter(theme => theme.tokenColors)\n+        .map(theme => theme.tokenColors)\n+        .forEach(loadColors);\n+\n+    themeContent\n+        .filter(theme => theme.include)\n+        .map(theme => path.join(path.dirname(themePath), theme.include))\n+        .forEach(loadThemeFile);\n+}\n+\n+function mergeRuleSettings(\n+    defaultSetting: TextMateRuleSettings | undefined,\n+    override: TextMateRuleSettings,\n+): TextMateRuleSettings {\n+    if (defaultSetting === undefined) {\n+        return override;\n+    }\n+    const mergedRule = defaultSetting;\n+\n+    mergedRule.background = override.background || defaultSetting.background;\n+    mergedRule.foreground = override.foreground || defaultSetting.foreground;\n+    mergedRule.fontStyle = override.fontStyle || defaultSetting.foreground;\n+\n+    return mergedRule;\n+}\n+\n+function updateRules(\n+    scope: string,\n+    updatedSettings: TextMateRuleSettings,\n+): void {\n+    [rules.get(scope)]\n+        .map(settings => mergeRuleSettings(settings, updatedSettings))\n+        .forEach(settings => rules.set(scope, settings));\n+}\n+\n+function loadColors(textMateRules: TextMateRule[]): void {\n+    textMateRules.forEach(rule => {\n+        if (typeof rule.scope === 'string') {\n+            updateRules(rule.scope, rule.settings);\n+        } else if (rule.scope instanceof Array) {\n+            rule.scope.forEach(scope => updateRules(scope, rule.settings));\n+        }\n+    });\n+}\n+\n+function isFile(filePath: string): boolean {\n+    return [filePath].map(fs.statSync).every(stat => stat.isFile());\n+}\n+\n+function readFileText(filePath: string): string {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function parseJSON(content: string): any {\n+    return jsonc.parse(content);\n+}"}, {"sha": "e738fa2396d6c9f7fe22a3dbaca3147fcc1d9e0d", "filename": "editors/code/src/scopes_mapper.ts", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "raw_url": "https://github.com/rust-lang/rust/raw/232785251bc80bc32c2ab52b624ecffbf5e35185/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fscopes_mapper.ts?ref=232785251bc80bc32c2ab52b624ecffbf5e35185", "patch": "@@ -0,0 +1,78 @@\n+import * as vscode from 'vscode';\n+import { TextMateRuleSettings } from './scopes';\n+\n+let mappings = new Map<string, string[]>();\n+\n+const defaultMapping = new Map<string, string[]>([\n+    [\n+        'comment',\n+        [\n+            'comment',\n+            'comment.block',\n+            'comment.line',\n+            'comment.block.documentation',\n+        ],\n+    ],\n+    ['string', ['string']],\n+    ['keyword', ['keyword']],\n+    ['keyword.control', ['keyword.control', 'keyword', 'keyword.other']],\n+    [\n+        'keyword.unsafe',\n+        ['storage.modifier', 'keyword.other', 'keyword.control', 'keyword'],\n+    ],\n+    ['function', ['entity.name.function']],\n+    ['parameter', ['variable.parameter']],\n+    ['constant', ['constant', 'variable']],\n+    ['type', ['entity.name.type']],\n+    ['builtin', ['variable.language', 'support.type', 'support.type']],\n+    ['text', ['string', 'string.quoted', 'string.regexp']],\n+    ['attribute', ['keyword']],\n+    ['literal', ['string', 'string.quoted', 'string.regexp']],\n+    ['macro', ['entity.name.function', 'keyword.other', 'entity.name.macro']],\n+    ['variable', ['variable']],\n+    ['variable.mut', ['variable', 'storage.modifier']],\n+    [\n+        'field',\n+        [\n+            'variable.object.property',\n+            'meta.field.declaration',\n+            'meta.definition.property',\n+            'variable.other',\n+        ],\n+    ],\n+    ['module', ['entity.name.section', 'entity.other']],\n+]);\n+\n+export function find(scope: string): string[] {\n+    return mappings.get(scope) || [];\n+}\n+\n+export function toRule(\n+    scope: string,\n+    intoRule: (scope: string) => TextMateRuleSettings | undefined,\n+): TextMateRuleSettings | undefined {\n+    return find(scope)\n+        .map(intoRule)\n+        .filter(rule => rule !== undefined)[0];\n+}\n+\n+function isString(value: any): value is string {\n+    return typeof value === 'string';\n+}\n+\n+function isArrayOfString(value: any): value is string[] {\n+    return Array.isArray(value) && value.every(item => isString(item));\n+}\n+\n+export function load() {\n+    const rawConfig: { [key: string]: any } =\n+        vscode.workspace\n+            .getConfiguration('rust-analyzer')\n+            .get('scopeMappings') || {};\n+\n+    mappings = Object.entries(rawConfig)\n+        .filter(([_, value]) => isString(value) || isArrayOfString(value))\n+        .reduce((list, [key, value]: [string, string | string[]]) => {\n+            return list.set(key, isString(value) ? [value] : value);\n+        }, defaultMapping);\n+}"}]}