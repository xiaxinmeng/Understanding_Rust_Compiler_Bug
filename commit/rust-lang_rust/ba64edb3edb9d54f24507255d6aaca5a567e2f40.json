{"sha": "ba64edb3edb9d54f24507255d6aaca5a567e2f40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjRlZGIzZWRiOWQ1NGYyNDUwNzI1NWQ2YWFjYTVhNTY3ZTJmNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T14:52:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T14:52:12Z"}, "message": "Auto merge of #50533 - GuillaumeGomez:rustdoc-prim-auto, r=QuietMisdreavus\n\nadd auto-impl for primitive type\n\nPart of #50431.\n\nI have no clue how to test this though with the rustdoc test suite...\n\nr? @QuietMisdreavus", "tree": {"sha": "938eaef84b1f61fab9cfada76d9659884278e042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938eaef84b1f61fab9cfada76d9659884278e042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba64edb3edb9d54f24507255d6aaca5a567e2f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba64edb3edb9d54f24507255d6aaca5a567e2f40", "html_url": "https://github.com/rust-lang/rust/commit/ba64edb3edb9d54f24507255d6aaca5a567e2f40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba64edb3edb9d54f24507255d6aaca5a567e2f40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df40e61382a2cba0be621fdabb9971ce3475e9a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df40e61382a2cba0be621fdabb9971ce3475e9a7", "html_url": "https://github.com/rust-lang/rust/commit/df40e61382a2cba0be621fdabb9971ce3475e9a7"}, {"sha": "564511e58b09c50932287f005e046865bd015430", "url": "https://api.github.com/repos/rust-lang/rust/commits/564511e58b09c50932287f005e046865bd015430", "html_url": "https://github.com/rust-lang/rust/commit/564511e58b09c50932287f005e046865bd015430"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "73a7e0e690fe92399e9ced4f24d6f0d870fe980d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=ba64edb3edb9d54f24507255d6aaca5a567e2f40", "patch": "@@ -35,10 +35,29 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                 AdtKind::Enum => Def::Enum,\n                 AdtKind::Union => Def::Union,\n             }\n-            _ => panic!(\"Unexpected type {:?}\", def_id),\n+            ty::TyInt(_) |\n+            ty::TyUint(_) |\n+            ty::TyFloat(_) |\n+            ty::TyStr |\n+            ty::TyBool |\n+            ty::TyChar => return self.get_auto_trait_impls(def_id, &move |_: DefId| {\n+                match ty.sty {\n+                    ty::TyInt(x) => Def::PrimTy(hir::TyInt(x)),\n+                    ty::TyUint(x) => Def::PrimTy(hir::TyUint(x)),\n+                    ty::TyFloat(x) => Def::PrimTy(hir::TyFloat(x)),\n+                    ty::TyStr => Def::PrimTy(hir::TyStr),\n+                    ty::TyBool => Def::PrimTy(hir::TyBool),\n+                    ty::TyChar => Def::PrimTy(hir::TyChar),\n+                    _ => unreachable!(),\n+                }\n+            }, None),\n+            _ => {\n+                debug!(\"Unexpected type {:?}\", def_id);\n+                return Vec::new()\n+            }\n         };\n \n-        self.get_auto_trait_impls(def_id, def_ctor, None)\n+        self.get_auto_trait_impls(def_id, &def_ctor, None)\n     }\n \n     pub fn get_with_node_id(&self, id: ast::NodeId, name: String) -> Vec<Item> {\n@@ -52,25 +71,26 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n             _ => panic!(\"Unexpected type {:?} {:?}\", item, id),\n         };\n \n-        self.get_auto_trait_impls(did, def_ctor, Some(name))\n+        self.get_auto_trait_impls(did, &def_ctor, Some(name))\n     }\n \n-    pub fn get_auto_trait_impls(\n+    pub fn get_auto_trait_impls<F>(\n         &self,\n         def_id: DefId,\n-        def_ctor: fn(DefId) -> Def,\n+        def_ctor: &F,\n         name: Option<String>,\n-    ) -> Vec<Item> {\n+    ) -> Vec<Item>\n+    where F: Fn(DefId) -> Def {\n         if self.cx\n             .tcx\n             .get_attrs(def_id)\n             .lists(\"doc\")\n             .has_word(\"hidden\")\n         {\n             debug!(\n-                \"get_auto_trait_impls(def_id={:?}, def_ctor={:?}): item has doc('hidden'), \\\n+                \"get_auto_trait_impls(def_id={:?}, def_ctor=...): item has doc('hidden'), \\\n                  aborting\",\n-                def_id, def_ctor\n+                def_id\n             );\n             return Vec::new();\n         }\n@@ -79,8 +99,8 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         let generics = self.cx.tcx.generics_of(def_id);\n \n         debug!(\n-            \"get_auto_trait_impls(def_id={:?}, def_ctor={:?}, generics={:?}\",\n-            def_id, def_ctor, generics\n+            \"get_auto_trait_impls(def_id={:?}, def_ctor=..., generics={:?}\",\n+            def_id, generics\n         );\n         let auto_traits: Vec<_> = self.cx\n             .send_trait\n@@ -110,23 +130,24 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n         auto_traits\n     }\n \n-    fn get_auto_trait_impl_for(\n+    fn get_auto_trait_impl_for<F>(\n         &self,\n         def_id: DefId,\n         name: Option<String>,\n         generics: ty::Generics,\n-        def_ctor: fn(DefId) -> Def,\n+        def_ctor: &F,\n         trait_def_id: DefId,\n-    ) -> Option<Item> {\n+    ) -> Option<Item>\n+    where F: Fn(DefId) -> Def {\n         if !self.cx\n             .generated_synthetics\n             .borrow_mut()\n             .insert((def_id, trait_def_id))\n         {\n             debug!(\n-                \"get_auto_trait_impl_for(def_id={:?}, generics={:?}, def_ctor={:?}, \\\n+                \"get_auto_trait_impl_for(def_id={:?}, generics={:?}, def_ctor=..., \\\n                  trait_def_id={:?}): already generated, aborting\",\n-                def_id, generics, def_ctor, trait_def_id\n+                def_id, generics, trait_def_id\n             );\n             return None;\n         }"}, {"sha": "da04068107d3f7088133d4ccc5d025f0768a515a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=ba64edb3edb9d54f24507255d6aaca5a567e2f40", "patch": "@@ -302,6 +302,14 @@ pub fn build_impls(cx: &DocContext, did: DefId, auto_traits: bool) -> Vec<clean:\n     for def_id in primitive_impls.iter().filter_map(|&def_id| def_id) {\n         if !def_id.is_local() {\n             build_impl(cx, def_id, &mut impls);\n+\n+            let auto_impls = get_auto_traits_with_def_id(cx, def_id);\n+            let mut renderinfo = cx.renderinfo.borrow_mut();\n+\n+            let new_impls: Vec<clean::Item> = auto_impls.into_iter()\n+                .filter(|i| renderinfo.inlined.insert(i.def_id)).collect();\n+\n+            impls.extend(new_impls);\n         }\n     }\n "}, {"sha": "6beb64dced16ea1a7ea16ca8f24380fba381f7a1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ba64edb3edb9d54f24507255d6aaca5a567e2f40", "patch": "@@ -4183,7 +4183,8 @@ pub fn path_to_def(tcx: &TyCtxt, path: &[&str]) -> Option<DefId> {\n     }\n }\n \n-fn get_path_for_type(tcx: TyCtxt, def_id: DefId, def_ctor: fn(DefId) -> Def) -> hir::Path {\n+fn get_path_for_type<F>(tcx: TyCtxt, def_id: DefId, def_ctor: F) -> hir::Path\n+where F: Fn(DefId) -> Def {\n     struct AbsolutePathBuffer {\n         names: Vec<String>,\n     }"}, {"sha": "a3887b33cc2bbe1b7e5d4fda9ebc74340290f8cb", "filename": "src/test/rustdoc/auto-impl-primitive.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Ftest%2Frustdoc%2Fauto-impl-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64edb3edb9d54f24507255d6aaca5a567e2f40/src%2Ftest%2Frustdoc%2Fauto-impl-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto-impl-primitive.rs?ref=ba64edb3edb9d54f24507255d6aaca5a567e2f40", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+pub use std::fs::File;\n+\n+// @has 'foo/primitive.i16.html' '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementation'\n+#[doc(primitive = \"i16\")]\n+/// I love poneys!\n+mod prim {}"}]}