{"sha": "6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc", "node_id": "C_kwDOAAsO6NoAKDZlZWEyYTg4YzE2ZDQ0ZGQ2ZDgxY2RhYmNiZjJjMTVmZmE0MjRmZGM", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-26T07:27:43Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:02Z"}, "message": "errors: implement fallback diagnostic translation\n\nThis commit updates the signatures of all diagnostic functions to accept\ntypes that can be converted into a `DiagnosticMessage`. This enables\nexisting diagnostic calls to continue to work as before and Fluent\nidentifiers to be provided. The `SessionDiagnostic` derive just\ngenerates normal diagnostic calls, so these APIs had to be modified to\naccept Fluent identifiers.\n\nIn addition, loading of the \"fallback\" Fluent bundle, which contains the\nbuilt-in English messages, has been implemented.\n\nEach diagnostic now has \"arguments\" which correspond to variables in the\nFluent messages (necessary to render a Fluent message) but no API for\nadding arguments has been added yet. Therefore, diagnostics (that do not\nrequire interpolation) can be converted to use Fluent identifiers and\nwill be output as before.", "tree": {"sha": "8e5021b8f6b03f546bf95310feee3f51b4e8aeff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5021b8f6b03f546bf95310feee3f51b4e8aeff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc", "html_url": "https://github.com/rust-lang/rust/commit/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d0bae9f1682c215693e71d2d738b58639ebdff", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d0bae9f1682c215693e71d2d738b58639ebdff", "html_url": "https://github.com/rust-lang/rust/commit/11d0bae9f1682c215693e71d2d738b58639ebdff"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "4563dbf6c16b022e755c4ec71c8b994882cbb035", "filename": "src/parse/session.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc/src%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc/src%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fsession.rs?ref=6eea2a88c16d44dd6d81cdabcbf2c15ffa424fdc", "patch": "@@ -33,6 +33,12 @@ impl Emitter for SilentEmitter {\n         None\n     }\n     fn emit_diagnostic(&mut self, _db: &Diagnostic) {}\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        None\n+    }\n+    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+        panic!(\"silent emitter attempted to translate a diagnostic\");\n+    }\n }\n \n fn silent_emitter() -> Box<dyn Emitter + Send> {\n@@ -82,6 +88,14 @@ impl Emitter for SilentOnIgnoredFilesEmitter {\n         }\n         self.handle_non_ignoreable_error(db);\n     }\n+\n+    fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+        self.emitter.fluent_bundle()\n+    }\n+\n+    fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+        self.emitter.fallback_fluent_bundle()\n+    }\n }\n \n fn default_handler(\n@@ -100,9 +114,11 @@ fn default_handler(\n     let emitter = if hide_parse_errors {\n         silent_emitter()\n     } else {\n+        let fallback_bundle = rustc_errors::fallback_fluent_bundle();\n         Box::new(EmitterWriter::stderr(\n             color_cfg,\n             Some(source_map.clone()),\n+            fallback_bundle,\n             false,\n             false,\n             None,\n@@ -329,6 +345,12 @@ mod tests {\n             fn emit_diagnostic(&mut self, _db: &Diagnostic) {\n                 self.num_emitted_errors.fetch_add(1, Ordering::Release);\n             }\n+            fn fluent_bundle(&self) -> Option<&Lrc<rustc_errors::FluentBundle>> {\n+                None\n+            }\n+            fn fallback_fluent_bundle(&self) -> &Lrc<rustc_errors::FluentBundle> {\n+                panic!(\"test emitter attempted to translate a diagnostic\");\n+            }\n         }\n \n         fn build_diagnostic(level: DiagnosticLevel, span: Option<MultiSpan>) -> Diagnostic {"}]}