{"sha": "d5173b1f2cc174d53272be0d14a8290c05b8670a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MTczYjFmMmNjMTc0ZDUzMjcyYmUwZDE0YTgyOTBjMDViODY3MGE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T19:27:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-26T20:20:23Z"}, "message": "Use cstrcache in C_str, C_cstr, C_shape.\n\nThis fixes up the current leaks.", "tree": {"sha": "0d483074e67fdc106a62ac75ffb9543666d30ce0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d483074e67fdc106a62ac75ffb9543666d30ce0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5173b1f2cc174d53272be0d14a8290c05b8670a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5173b1f2cc174d53272be0d14a8290c05b8670a", "html_url": "https://github.com/rust-lang/rust/commit/d5173b1f2cc174d53272be0d14a8290c05b8670a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5173b1f2cc174d53272be0d14a8290c05b8670a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e136d1fd9bd5536d441c062d41e7b71b375a942", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e136d1fd9bd5536d441c062d41e7b71b375a942", "html_url": "https://github.com/rust-lang/rust/commit/4e136d1fd9bd5536d441c062d41e7b71b375a942"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "98c2c23596d72e1f68935c2e44de1c2020269348", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d5173b1f2cc174d53272be0d14a8290c05b8670a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5173b1f2cc174d53272be0d14a8290c05b8670a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d5173b1f2cc174d53272be0d14a8290c05b8670a", "patch": "@@ -6395,7 +6395,8 @@ fn trans_crate(sess: &session::session, crate: &@ast::crate, tcx: &ty::ctxt,\n           task_type: task_type,\n           builder: BuilderRef_res(llvm::LLVMCreateBuilder()),\n           shape_cx: shape::mk_ctxt(llmod),\n-          gc_cx: gc::mk_ctxt()};\n+          gc_cx: gc::mk_ctxt(),\n+          cstrcache: cstrcache::mk()};\n     let cx = new_local_ctxt(ccx);\n     collect_items(ccx, crate);\n     collect_tag_ctors(ccx, crate);"}, {"sha": "74b049960f62ee595e1c17eca6a9a62a49b523e7", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d5173b1f2cc174d53272be0d14a8290c05b8670a/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5173b1f2cc174d53272be0d14a8290c05b8670a/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=d5173b1f2cc174d53272be0d14a8290c05b8670a", "patch": "@@ -154,7 +154,8 @@ type crate_ctxt =\n      task_type: TypeRef,\n      builder: BuilderRef_res,\n      shape_cx: shape::ctxt,\n-     gc_cx: gc::ctxt};\n+     gc_cx: gc::ctxt,\n+     cstrcache: cstrcache::t};\n \n type local_ctxt =\n     {path: [str],\n@@ -842,10 +843,11 @@ fn C_u8(i: uint) -> ValueRef { ret C_integral(T_i8(), i, False); }\n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n fn C_cstr(cx: &@crate_ctxt, s: &str) -> ValueRef {\n-    let sc = llvm::LLVMConstString(str::buf(s), str::byte_len(s), False);\n+    let sc = llvm::LLVMConstString(safe_sbuf(cx, s),\n+                                   str::byte_len(s), False);\n     let g =\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(sc),\n-                            str::buf(cx.names.next(\"str\")));\n+                            safe_sbuf(cx, cx.names.next(\"str\")));\n     llvm::LLVMSetInitializer(g, sc);\n     llvm::LLVMSetGlobalConstant(g, True);\n     llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -863,10 +865,10 @@ fn C_str(cx: &@crate_ctxt, s: &str) -> ValueRef {\n     let box =\n         C_struct([C_int(abi::const_refcount as int), C_int(len + 1u as int),\n                   C_int(len + 1u as int), C_int(0),\n-                  llvm::LLVMConstString(str::buf(s), len, False)]);\n+                  llvm::LLVMConstString(safe_sbuf(cx, s), len, False)]);\n     let g =\n         llvm::LLVMAddGlobal(cx.llmod, val_ty(box),\n-                            str::buf(cx.names.next(\"str\")));\n+                            safe_sbuf(cx, cx.names.next(\"str\")));\n     llvm::LLVMSetInitializer(g, box);\n     llvm::LLVMSetGlobalConstant(g, True);\n     llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -909,14 +911,18 @@ fn C_shape(ccx: &@crate_ctxt, bytes: &[u8]) -> ValueRef {\n     let llshape = C_bytes(bytes);\n     let llglobal =\n         llvm::LLVMAddGlobal(ccx.llmod, val_ty(llshape),\n-                            str::buf(ccx.names.next(\"shape\")));\n+                            safe_sbuf(ccx, ccx.names.next(\"shape\")));\n     llvm::LLVMSetInitializer(llglobal, llshape);\n     llvm::LLVMSetGlobalConstant(llglobal, True);\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n     ret llvm::LLVMConstPointerCast(llglobal, T_ptr(T_i8()));\n }\n \n+fn safe_sbuf(ccx: &@crate_ctxt, s: &str) -> str::rustrt::sbuf {\n+    cstrcache::get_cstr(ccx.cstrcache, s)\n+}\n+\n //\n // Local Variables:\n // mode: rust"}]}