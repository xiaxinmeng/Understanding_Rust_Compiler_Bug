{"sha": "17ba11d105937ec980928f292d96f17c1a41fe02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3YmExMWQxMDU5MzdlYzk4MDkyOGYyOTJkOTZmMTdjMWE0MWZlMDI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-24T12:42:57Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-24T12:43:50Z"}, "message": "Rollup merge of #33125 - Manishearth:closure-span, r=Manishearth\n\n Track the span corresponding to the `|...|` part of the closure.\n\nlifted from #32756\ncc #31645\n\nlibsyntax-[breaking change]", "tree": {"sha": "7a432350551dca07301964d3976dec283fbf3965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a432350551dca07301964d3976dec283fbf3965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17ba11d105937ec980928f292d96f17c1a41fe02", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXHL+GAAoJEDu/TT4u95+YVOwP/1voDXHq9r0ePab1OqY8x64X\nle6nm0MflPBMqo5J05Ly63Scy7KGItaRd9WlBHsSFjetncyd3uiiuhNXyNMoOfiw\ns0vPvNKWBEe1ng2TDNoR4dOhqPd9lEUwn5UfrY2CCUCsp4f8suUIpnOrDo0aedmA\n5A3TlJ/kLg6XJ9xsTa5ZUNP8iPMJjcgex6fU+k/AELpynmPAjsYk4kle+EBDDCo1\nJs+W47OnN4Z4Ib4ghffz6WcCFqU2T06vDMHVRIaa1gdj6pPrknSY5SRRbIv66ccS\nDvELsdRleS69OeWLMm6EzXPT4dZxR9EPadWQ1kkTNmwQUaeXtghjo5RpjrGM7HO0\nAl+Hiadrm+bH5+b3nhyskCV3R0sWZ+6MQDRXNR91JCKHtMK0o2ilszvYtEgEoT/M\nzOgy25QqqhmVCV3a9wupa1dorOPFOW4ER6m7M1OS1uOQ/XI1dC85mu5xmZ/Ufx7c\nia+x4SGnKCDCdfBqlSQWEWvJDPjUheAs8e237Mj2G0jTr4Svzgv60KiVnJHe+/1z\n0btgt6uAQbnNz77ui0KU2m0KbmoOAzUnuDux5pDi0RYx0WOz38k8O5XMAVp22aeD\nXZwco1Kfndb70/19ZUWUzgl9GS7ENq0P8JVaVEXwWklydSObPtmn3kODCYdCeRCb\nuv/SjTqC89zjcp0U0B5g\n=f4aI\n-----END PGP SIGNATURE-----", "payload": "tree 7a432350551dca07301964d3976dec283fbf3965\nparent 8d0dd7876e733555b0284e9b6cbf0f33ed792b67\nparent ecd10f04cea34352ff240b0462d40cd1d95a4e0f\nauthor Manish Goregaokar <manishsmail@gmail.com> 1461501777 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1461501830 +0530\n\nRollup merge of #33125 - Manishearth:closure-span, r=Manishearth\n\n Track the span corresponding to the `|...|` part of the closure.\n\nlifted from #32756\ncc #31645\n\nlibsyntax-[breaking change]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17ba11d105937ec980928f292d96f17c1a41fe02", "html_url": "https://github.com/rust-lang/rust/commit/17ba11d105937ec980928f292d96f17c1a41fe02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17ba11d105937ec980928f292d96f17c1a41fe02/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d0dd7876e733555b0284e9b6cbf0f33ed792b67", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0dd7876e733555b0284e9b6cbf0f33ed792b67", "html_url": "https://github.com/rust-lang/rust/commit/8d0dd7876e733555b0284e9b6cbf0f33ed792b67"}, {"sha": "ecd10f04cea34352ff240b0462d40cd1d95a4e0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd10f04cea34352ff240b0462d40cd1d95a4e0f", "html_url": "https://github.com/rust-lang/rust/commit/ecd10f04cea34352ff240b0462d40cd1d95a4e0f"}], "stats": {"total": 140, "additions": 87, "deletions": 53}, "files": [{"sha": "1c27e7c53f914c9b02af737175bb8ae8695566bc", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1060,10 +1060,11 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n                           arms.move_map(|x| folder.fold_arm(x)),\n                           source)\n             }\n-            ExprClosure(capture_clause, decl, body) => {\n+            ExprClosure(capture_clause, decl, body, fn_decl_span) => {\n                 ExprClosure(capture_clause,\n                             folder.fold_fn_decl(decl),\n-                            folder.fold_block(body))\n+                            folder.fold_block(body),\n+                            folder.new_span(fn_decl_span))\n             }\n             ExprBlock(blk) => ExprBlock(folder.fold_block(blk)),\n             ExprAssign(el, er) => {"}, {"sha": "ec9b465521b97bd02faeb9547951a7331231dca6", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -785,7 +785,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprClosure(_, ref function_declaration, ref body) => {\n+        ExprClosure(_, ref function_declaration, ref body, _fn_decl_span) => {\n             visitor.visit_fn(FnKind::Closure(expression.attrs.as_attr_slice()),\n                              function_declaration,\n                              body,"}, {"sha": "6f30553e2663868c1652ed8057a046da81a86756", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1260,11 +1260,12 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                                arms.iter().map(|x| lower_arm(lctx, x)).collect(),\n                                hir::MatchSource::Normal)\n             }\n-            ExprKind::Closure(capture_clause, ref decl, ref body) => {\n+            ExprKind::Closure(capture_clause, ref decl, ref body, fn_decl_span) => {\n                 lctx.with_parent_def(e.id, || {\n                     hir::ExprClosure(lower_capture_clause(lctx, capture_clause),\n                                      lower_fn_decl(lctx, decl),\n-                                     lower_block(lctx, body))\n+                                     lower_block(lctx, body),\n+                                     fn_decl_span)\n                 })\n             }\n             ExprKind::Block(ref blk) => hir::ExprBlock(lower_block(lctx, blk)),"}, {"sha": "4af37fe16adb1030fbc125c321d3f77edcb4b1bc", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -250,7 +250,7 @@ impl<'a> FnLikeNode<'a> {\n                 }\n             }\n             map::NodeExpr(e) => match e.node {\n-                ast::ExprClosure(_, ref decl, ref block) =>\n+                ast::ExprClosure(_, ref decl, ref block, _fn_decl_span) =>\n                     closure(ClosureParts::new(&decl,\n                                               &block,\n                                               e.id,"}, {"sha": "7eaace91ae9b6fc60dd1d30145898ab944aba2cf", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -949,8 +949,10 @@ pub enum Expr_ {\n     /// A `match` block, with a source that indicates whether or not it is\n     /// the result of a desugaring, and if so, which kind.\n     ExprMatch(P<Expr>, HirVec<Arm>, MatchSource),\n-    /// A closure (for example, `move |a, b, c| {a + b + c}`)\n-    ExprClosure(CaptureClause, P<FnDecl>, P<Block>),\n+    /// A closure (for example, `move |a, b, c| {a + b + c}`).\n+    ///\n+    /// The final span is the span of the argument block `|...|`\n+    ExprClosure(CaptureClause, P<FnDecl>, P<Block>, Span),\n     /// A block (`{ ... }`)\n     ExprBlock(P<Block>),\n "}, {"sha": "8335ce3c736b88c162942df8db562b2111d7a710", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1392,7 +1392,7 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose_(expr.span, indent_unit)?;\n             }\n-            hir::ExprClosure(capture_clause, ref decl, ref body) => {\n+            hir::ExprClosure(capture_clause, ref decl, ref body, _fn_decl_span) => {\n                 self.print_capture_clause(capture_clause)?;\n \n                 self.print_fn_block_args(&decl)?;"}, {"sha": "002f202796cefc04fa656836a8558c115af95603", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -537,8 +537,8 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                 self.consume_expr(&count);\n             }\n \n-            hir::ExprClosure(..) => {\n-                self.walk_captures(expr)\n+            hir::ExprClosure(_, _, _, fn_decl_span) => {\n+                self.walk_captures(expr, fn_decl_span)\n             }\n \n             hir::ExprBox(ref base) => {\n@@ -1142,7 +1142,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         }));\n     }\n \n-    fn walk_captures(&mut self, closure_expr: &hir::Expr) {\n+    fn walk_captures(&mut self, closure_expr: &hir::Expr, fn_decl_span: Span) {\n         debug!(\"walk_captures({:?})\", closure_expr);\n \n         self.tcx().with_freevars(closure_expr.id, |freevars| {\n@@ -1152,7 +1152,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                                              closure_expr_id: closure_expr.id };\n                 let upvar_capture = self.typer.upvar_capture(upvar_id).unwrap();\n                 let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n-                                                                   closure_expr.span,\n+                                                                   fn_decl_span,\n                                                                    freevar.def));\n                 match upvar_capture {\n                     ty::UpvarCapture::ByValue => {\n@@ -1161,7 +1161,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n                     }\n                     ty::UpvarCapture::ByRef(upvar_borrow) => {\n                         self.delegate.borrow(closure_expr.id,\n-                                             closure_expr.span,\n+                                             fn_decl_span,\n                                              cmt_var,\n                                              upvar_borrow.region,\n                                              upvar_borrow.kind,"}, {"sha": "ff20d41ce9dc40b2057cd148f64960de4d51ff8d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&e, succ)\n           }\n \n-          hir::ExprClosure(_, _, ref blk) => {\n+          hir::ExprClosure(_, _, ref blk, _) => {\n               debug!(\"{} is an ExprClosure\",\n                      expr_to_string(expr));\n "}, {"sha": "7b31cd815677ec40f3010c2eef38267ffa637f16", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -728,7 +728,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             };\n \n             match fn_expr.node {\n-                hir::ExprClosure(_, _, ref body) => body.id,\n+                hir::ExprClosure(_, _, ref body, _) => body.id,\n                 _ => bug!()\n             }\n         };"}, {"sha": "15db356b1ba952c4138d5f0f162148e2087f5c81", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -415,7 +415,7 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: &TyCtxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         hir_map::NodeExpr(expr) => match expr.node {\n-            hir::ExprClosure(_, _, ref block) => {\n+            hir::ExprClosure(_, _, ref block, _) => {\n                 block.id\n             }\n             _ => {"}, {"sha": "7dab8c4c5fb2a726c521ebbbd491acd1b7c85741", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -725,7 +725,7 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             let body_id = match cx.tcx.map.find(closure_expr_id) {\n                 Some(map::NodeExpr(expr)) => {\n                     match expr.node {\n-                        hir::ExprClosure(_, _, ref body) => body.id,\n+                        hir::ExprClosure(_, _, ref body, _) => body.id,\n                         _ => {\n                             span_bug!(expr.span, \"closure expr is not a closure expr\");\n                         }"}, {"sha": "2174d1cf9b82a0cd7efc478635b203a3247a0d33", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -48,7 +48,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n             hir::ExprLoop(ref b, _) => {\n                 self.with_context(Loop, |v| v.visit_block(&b));\n             }\n-            hir::ExprClosure(_, _, ref b) => {\n+            hir::ExprClosure(_, _, ref b, _) => {\n                 self.with_context(Closure, |v| v.visit_block(&b));\n             }\n             hir::ExprBreak(_) => self.require_loop(\"break\", e.span),"}, {"sha": "e96be4714d0ee6968e0c14f61beacd81dd8fc571", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1258,7 +1258,7 @@ impl<'v, 'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'v> for DumpVisitor<'l, 'tcx,\n                                    ty),\n                 }\n             }\n-            ast::ExprKind::Closure(_, ref decl, ref body) => {\n+            ast::ExprKind::Closure(_, ref decl, ref body, _fn_decl_span) => {\n                 let mut id = String::from(\"$\");\n                 id.push_str(&ex.id.to_string());\n                 self.process_formals(&decl.inputs, &id);"}, {"sha": "9190389b722b603a84468d61863d5a5f3bbc7825", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1339,7 +1339,7 @@ fn build_cfg(tcx: &TyCtxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>) {\n         }\n         Some(hir_map::NodeExpr(e)) => {\n             match e.node {\n-                hir::ExprClosure(_, _, ref blk) => blk,\n+                hir::ExprClosure(_, _, ref blk, _) => blk,\n                 _ => bug!(\"unexpected expr variant in has_nested_returns\"),\n             }\n         }"}, {"sha": "b9af0bbe3d123cc0d5f6a63153d9ced41c207185", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -990,7 +990,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 None => C_nil(cx),\n             }\n         },\n-        hir::ExprClosure(_, ref decl, ref body) => {\n+        hir::ExprClosure(_, ref decl, ref body, _) => {\n             match ety.sty {\n                 ty::TyClosure(def_id, ref substs) => {\n                     closure::trans_closure_expr(closure::Dest::Ignore(cx),"}, {"sha": "3a8974c2aca037bdaa590dd360fb5825dcf58bc6", "filename": "src/librustc_trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -479,7 +479,7 @@ fn walk_expr(cx: &CrateContext,\n             })\n         }\n \n-        hir::ExprClosure(_, ref decl, ref block) => {\n+        hir::ExprClosure(_, ref decl, ref block, _) => {\n             with_new_scope(cx,\n                            block.span,\n                            scope_stack,"}, {"sha": "cd11ca586890ce8466cc2c187a2da99ff222820c", "filename": "src/librustc_trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_trans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fexpr.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1118,7 +1118,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         hir::ExprVec(..) | hir::ExprRepeat(..) => {\n             tvec::trans_fixed_vstore(bcx, expr, dest)\n         }\n-        hir::ExprClosure(_, ref decl, ref body) => {\n+        hir::ExprClosure(_, ref decl, ref body, _) => {\n             let dest = match dest {\n                 SaveIn(lldest) => closure::Dest::SaveIn(bcx, lldest),\n                 Ignore => closure::Dest::Ignore(bcx.ccx())"}, {"sha": "d187f82c59644997184b7e5e4aac9b961f6c8db2", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -3530,7 +3530,7 @@ fn check_expr_with_expectation_and_lvalue_pref<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       hir::ExprMatch(ref discrim, ref arms, match_src) => {\n         _match::check_match(fcx, expr, &discrim, arms, expected, match_src);\n       }\n-      hir::ExprClosure(capture, ref decl, ref body) => {\n+      hir::ExprClosure(capture, ref decl, ref body, _) => {\n           closure::check_expr_closure(fcx, expr, capture, &decl, &body, expected);\n       }\n       hir::ExprBlock(ref b) => {"}, {"sha": "5efd57c4d1fc9b26bc35b4c7b575ce5db34556ba", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -782,7 +782,7 @@ fn visit_expr(rcx: &mut Rcx, expr: &hir::Expr) {\n             intravisit::walk_expr(rcx, expr);\n         }\n \n-        hir::ExprClosure(_, _, ref body) => {\n+        hir::ExprClosure(_, _, ref body, _) => {\n             check_expr_fn_block(rcx, expr, &body);\n         }\n "}, {"sha": "c39e992eb3642abcd32b3d35870cd369abdf062f", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -98,7 +98,7 @@ struct SeedBorrowKind<'a,'tcx:'a> {\n impl<'a, 'tcx, 'v> Visitor<'v> for SeedBorrowKind<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &hir::Expr) {\n         match expr.node {\n-            hir::ExprClosure(cc, _, ref body) => {\n+            hir::ExprClosure(cc, _, ref body, _) => {\n                 self.check_closure(expr, cc, &body);\n             }\n "}, {"sha": "ad78740921cbc5e8b1feee9a7ba6a6d2dcfa6091", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -156,7 +156,7 @@ impl<'cx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'tcx> {\n         self.visit_method_map_entry(ResolvingExpr(e.span),\n                                     MethodCall::expr(e.id));\n \n-        if let hir::ExprClosure(_, ref decl, _) = e.node {\n+        if let hir::ExprClosure(_, ref decl, _, _) = e.node {\n             for input in &decl.inputs {\n                 self.visit_node_id(ResolvingExpr(e.span), input.id);\n             }"}, {"sha": "70b3edac5c5dc3f22cde86b6f1a73087c18f2d4d", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -830,7 +830,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn keys<'a>(&'a self) -> Keys<'a, K, V> {\n+    pub fn keys(&self) -> Keys<K, V> {\n         Keys { inner: self.iter() }\n     }\n \n@@ -852,7 +852,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n+    pub fn values(&self) -> Values<K, V> {\n         Values { inner: self.iter() }\n     }\n \n@@ -880,7 +880,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// }\n     /// ```\n     #[unstable(feature = \"map_values_mut\", reason = \"recently added\", issue = \"32551\")]\n-    pub fn values_mut<'a>(&'a mut self) -> ValuesMut<'a, K, V> {\n+    pub fn values_mut<'a>(&'a mut self) -> ValuesMut<K, V> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n "}, {"sha": "dc59d47528610cc886f26aa4e501cfb64773b811", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -986,7 +986,9 @@ pub enum ExprKind {\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n     /// A closure (for example, `move |a, b, c| {a + b + c}`)\n-    Closure(CaptureBy, P<FnDecl>, P<Block>),\n+    ///\n+    /// The final span is the span of the argument block `|...|`\n+    Closure(CaptureBy, P<FnDecl>, P<Block>, Span),\n     /// A block (`{ ... }`)\n     Block(P<Block>),\n "}, {"sha": "8ebf4863af5fa45ffa280d91a1b2802577a04396", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -194,10 +194,14 @@ pub trait AstBuilder {\n                cond: P<ast::Expr>, then: P<ast::Expr>, els: Option<P<ast::Expr>>) -> P<ast::Expr>;\n     fn expr_loop(&self, span: Span, block: P<ast::Block>) -> P<ast::Expr>;\n \n-    fn lambda_fn_decl(&self, span: Span,\n-                      fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> P<ast::Expr>;\n+    fn lambda_fn_decl(&self,\n+                      span: Span,\n+                      fn_decl: P<ast::FnDecl>,\n+                      blk: P<ast::Block>,\n+                      fn_decl_span: Span)\n+                      -> P<ast::Expr>;\n \n-    fn lambda(&self, span: Span, ids: Vec<ast::Ident> , blk: P<ast::Block>) -> P<ast::Expr>;\n+    fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr>;\n     fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr>;\n     fn lambda1(&self, span: Span, blk: P<ast::Block>, ident: ast::Ident) -> P<ast::Expr>;\n \n@@ -894,17 +898,34 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr(span, ast::ExprKind::Loop(block, None))\n     }\n \n-    fn lambda_fn_decl(&self, span: Span,\n-                      fn_decl: P<ast::FnDecl>, blk: P<ast::Block>) -> P<ast::Expr> {\n-        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref, fn_decl, blk))\n+    fn lambda_fn_decl(&self,\n+                      span: Span,\n+                      fn_decl: P<ast::FnDecl>,\n+                      blk: P<ast::Block>,\n+                      fn_decl_span: Span) // span of the `|...|` part\n+                      -> P<ast::Expr> {\n+        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref,\n+                                               fn_decl,\n+                                               blk,\n+                                               fn_decl_span))\n     }\n-    fn lambda(&self, span: Span, ids: Vec<ast::Ident>, blk: P<ast::Block>) -> P<ast::Expr> {\n+\n+    fn lambda(&self,\n+              span: Span,\n+              ids: Vec<ast::Ident>,\n+              blk: P<ast::Block>)\n+              -> P<ast::Expr> {\n         let fn_decl = self.fn_decl(\n             ids.iter().map(|id| self.arg(span, *id, self.ty_infer(span))).collect(),\n             self.ty_infer(span));\n \n-        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref, fn_decl, blk))\n+        // FIXME -- We are using `span` as the span of the `|...|`\n+        // part of the lambda, but it probably (maybe?) corresponds to\n+        // the entire lambda body. Probably we should extend the API\n+        // here, but that's not entirely clear.\n+        self.expr(span, ast::ExprKind::Closure(ast::CaptureBy::Ref, fn_decl, blk, span))\n     }\n+\n     fn lambda0(&self, span: Span, blk: P<ast::Block>) -> P<ast::Expr> {\n         self.lambda(span, Vec::new(), blk)\n     }"}, {"sha": "38132eb42ee8029d9fabd667035ad9e8e28d4156", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -149,14 +149,17 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             fld.cx.expr(span, il).with_attrs(fold_thin_attrs(attrs, fld))\n         }\n \n-        ast::ExprKind::Closure(capture_clause, fn_decl, block) => {\n+        ast::ExprKind::Closure(capture_clause, fn_decl, block, fn_decl_span) => {\n             let (rewritten_fn_decl, rewritten_block)\n                 = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n             let new_node = ast::ExprKind::Closure(capture_clause,\n-                                            rewritten_fn_decl,\n-                                            rewritten_block);\n-            P(ast::Expr{id:id, node: new_node, span: fld.new_span(span),\n-                        attrs: fold_thin_attrs(attrs, fld)})\n+                                                  rewritten_fn_decl,\n+                                                  rewritten_block,\n+                                                  fld.new_span(fn_decl_span));\n+            P(ast::Expr{ id:id,\n+                         node: new_node,\n+                         span: fld.new_span(span),\n+                         attrs: fold_thin_attrs(attrs, fld) })\n         }\n \n         _ => {"}, {"sha": "3f788a52d2b398379752501640e0fae2f010a2ad", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -1241,10 +1241,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 ExprKind::Match(folder.fold_expr(expr),\n                           arms.move_map(|x| folder.fold_arm(x)))\n             }\n-            ExprKind::Closure(capture_clause, decl, body) => {\n+            ExprKind::Closure(capture_clause, decl, body, span) => {\n                 ExprKind::Closure(capture_clause,\n-                            folder.fold_fn_decl(decl),\n-                            folder.fold_block(body))\n+                                  folder.fold_fn_decl(decl),\n+                                  folder.fold_block(body),\n+                                  folder.new_span(span))\n             }\n             ExprKind::Block(blk) => ExprKind::Block(folder.fold_block(blk)),\n             ExprKind::Assign(el, er) => {"}, {"sha": "a4284d0b6742fdd6cb021b9c41310c87627e2626", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -3225,13 +3225,15 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo, hi, ExprKind::IfLet(pat, expr, thn, els), attrs))\n     }\n \n-    // `|args| expr`\n-    pub fn parse_lambda_expr(&mut self, lo: BytePos,\n+    // `move |args| expr`\n+    pub fn parse_lambda_expr(&mut self,\n+                             lo: BytePos,\n                              capture_clause: CaptureBy,\n                              attrs: ThinAttributes)\n                              -> PResult<'a, P<Expr>>\n     {\n         let decl = self.parse_fn_block_decl()?;\n+        let decl_hi = self.last_span.hi;\n         let body = match decl.output {\n             FunctionRetTy::Default(_) => {\n                 // If no explicit return type is given, parse any\n@@ -3255,7 +3257,8 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(\n             lo,\n             body.span.hi,\n-            ExprKind::Closure(capture_clause, decl, body), attrs))\n+            ExprKind::Closure(capture_clause, decl, body, mk_sp(lo, decl_hi)),\n+            attrs))\n     }\n \n     // `else` token already eaten"}, {"sha": "d266866987535e8ae08c7d71d2d5662d92a7a9c8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -2086,7 +2086,7 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose_(expr.span, INDENT_UNIT)?;\n             }\n-            ast::ExprKind::Closure(capture_clause, ref decl, ref body) => {\n+            ast::ExprKind::Closure(capture_clause, ref decl, ref body, _) => {\n                 self.print_capture_clause(capture_clause)?;\n \n                 self.print_fn_block_args(&decl)?;"}, {"sha": "f50a480e5e55a538081e4e1587717b4a015fd20f", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ba11d105937ec980928f292d96f17c1a41fe02/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=17ba11d105937ec980928f292d96f17c1a41fe02", "patch": "@@ -743,7 +743,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             visitor.visit_expr(subexpression);\n             walk_list!(visitor, visit_arm, arms);\n         }\n-        ExprKind::Closure(_, ref function_declaration, ref body) => {\n+        ExprKind::Closure(_, ref function_declaration, ref body, _decl_span) => {\n             visitor.visit_fn(FnKind::Closure,\n                              function_declaration,\n                              body,"}]}