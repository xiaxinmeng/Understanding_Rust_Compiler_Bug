{"sha": "d264e406be13f7dbd01508ce506ded925d996be9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjRlNDA2YmUxM2Y3ZGJkMDE1MDhjZTUwNmRlZDkyNWQ5OTZiZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T08:51:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-05T08:51:13Z"}, "message": "Auto merge of #3627 - detrumi:use_self_local_macro, r=phansch\n\nTrigger `use_self` lint in local macros\n\nCloses #2098\n\nThe test currently only covers local macros. #2098 suggested this:\n> You could add the macro in question into the `mini_macro` subcrate\n\nBut that doesn't work for a `macro_rules`:\n```\nerror: cannot export macro_rules! macros from a `proc-macro` crate type currently\n```\n\nSo I suggest leaving out the test for external macros, as using `in_external_macro` seems straigtforward enough. Alternatives would be to use to add an additional crate (overkill if you ask me), or test with a `proc-macro`.", "tree": {"sha": "de2adb5b29fca5cc8ecf66e30be869acb248024b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de2adb5b29fca5cc8ecf66e30be869acb248024b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d264e406be13f7dbd01508ce506ded925d996be9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d264e406be13f7dbd01508ce506ded925d996be9", "html_url": "https://github.com/rust-lang/rust/commit/d264e406be13f7dbd01508ce506ded925d996be9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d264e406be13f7dbd01508ce506ded925d996be9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bcf67c2cb46c8cbdc34e7ebe8d8ab4e1ab7a2b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bcf67c2cb46c8cbdc34e7ebe8d8ab4e1ab7a2b3", "html_url": "https://github.com/rust-lang/rust/commit/3bcf67c2cb46c8cbdc34e7ebe8d8ab4e1ab7a2b3"}, {"sha": "407ff74dcc6223185f57a675843bc95cbc66d5a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/407ff74dcc6223185f57a675843bc95cbc66d5a2", "html_url": "https://github.com/rust-lang/rust/commit/407ff74dcc6223185f57a675843bc95cbc66d5a2"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "aa4302e12a74410eec16b29e44e5d2085eacc08d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d264e406be13f7dbd01508ce506ded925d996be9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264e406be13f7dbd01508ce506ded925d996be9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=d264e406be13f7dbd01508ce506ded925d996be9", "patch": "@@ -7,12 +7,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use crate::utils::{in_macro, span_lint_and_sugg};\n+use crate::utils::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc::hir::def::{CtorKind, Def};\n use rustc::hir::intravisit::{walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n-use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n use rustc_errors::Applicability;\n@@ -172,7 +172,7 @@ fn check_trait_method_impl_decl<'a, 'tcx: 'a>(\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n-        if in_macro(item.span) {\n+        if in_external_macro(cx.sess(), item.span) {\n             return;\n         }\n         if_chain! {"}, {"sha": "a01cb3e7021d30f006f68935a6eea9568779c62e", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d264e406be13f7dbd01508ce506ded925d996be9/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d264e406be13f7dbd01508ce506ded925d996be9/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=d264e406be13f7dbd01508ce506ded925d996be9", "patch": "@@ -226,6 +226,22 @@ mod tuple_structs {\n     }\n }\n \n+mod macros {\n+    macro_rules! use_self_expand {\n+        () => {\n+            fn new() -> Foo {\n+                Foo {}\n+            }\n+        };\n+    }\n+\n+    struct Foo {}\n+\n+    impl Foo {\n+        use_self_expand!(); // Should lint in local macros\n+    }\n+}\n+\n mod issue3410 {\n \n     struct A;"}, {"sha": "6c5dbf9111d6eb6083891a500b0e17ae15ddede6", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d264e406be13f7dbd01508ce506ded925d996be9/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d264e406be13f7dbd01508ce506ded925d996be9/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=d264e406be13f7dbd01508ce506ded925d996be9", "patch": "@@ -132,5 +132,23 @@ error: unnecessary structure name repetition\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 22 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:232:25\n+   |\n+LL |             fn new() -> Foo {\n+   |                         ^^^ help: use the applicable keyword: `Self`\n+...\n+LL |         use_self_expand!(); // Should lint in local macros\n+   |         ------------------- in this macro invocation\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:233:17\n+   |\n+LL |                 Foo {}\n+   |                 ^^^ help: use the applicable keyword: `Self`\n+...\n+LL |         use_self_expand!(); // Should lint in local macros\n+   |         ------------------- in this macro invocation\n+\n+error: aborting due to 24 previous errors\n "}]}