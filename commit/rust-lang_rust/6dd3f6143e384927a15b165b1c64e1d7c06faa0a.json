{"sha": "6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZDNmNjE0M2UzODQ5MjdhMTViMTY1YjFjNjRlMWQ3YzA2ZmFhMGE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-05T18:43:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-05T21:21:53Z"}, "message": "convert from hard error to future-incompatible lint", "tree": {"sha": "5ec160156860f2b04c3fe9ca7f28ff0b7b091404", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ec160156860f2b04c3fe9ca7f28ff0b7b091404"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "html_url": "https://github.com/rust-lang/rust/commit/6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d6b9d215f95f1013b102f241524f63330c60a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d6b9d215f95f1013b102f241524f63330c60a3", "html_url": "https://github.com/rust-lang/rust/commit/27d6b9d215f95f1013b102f241524f63330c60a3"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "aff925d108272cb40f96dad30552e4911013300a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "patch": "@@ -127,6 +127,12 @@ declare_lint! {\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n \n+declare_lint! {\n+    pub INVALID_TYPE_PARAM_DEFAULT,\n+    Warn,\n+    \"type parameter default erroneously allowed in invalid location\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -152,6 +158,7 @@ impl LintPass for HardwiredLints {\n             TRIVIAL_CASTS,\n             TRIVIAL_NUMERIC_CASTS,\n             PRIVATE_IN_PUBLIC,\n+            INVALID_TYPE_PARAM_DEFAULT,\n             CONST_ERR\n         )\n     }"}, {"sha": "f2e75960406f188e5e10309212f7c85b3a82053a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "patch": "@@ -143,8 +143,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_MUT, UNREACHABLE_CODE, UNUSED_MUST_USE,\n                     UNUSED_UNSAFE, PATH_STATEMENTS, UNUSED_ATTRIBUTES);\n \n-    add_lint_group!(sess, \"future_incompatible\",\n-                    PRIVATE_IN_PUBLIC);\n+    add_lint_group!(sess, FUTURE_INCOMPATIBLE,\n+                    PRIVATE_IN_PUBLIC, INVALID_TYPE_PARAM_DEFAULT);\n \n     // We have one lint pass defined specially\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);"}, {"sha": "a03caba2a676e90db13d2b9ca40bd63285b38a9d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "patch": "@@ -65,6 +65,7 @@ There are some shortcomings in this design:\n */\n \n use astconv::{self, AstConv, ty_of_arg, ast_ty_to_ty, ast_region_to_region};\n+use lint;\n use middle::def;\n use middle::def_id::DefId;\n use constrained_type_params as ctp;\n@@ -92,7 +93,6 @@ use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n-use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n use rustc_front::hir;\n@@ -1936,13 +1936,12 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     if space != TypeSpace && default.is_some() {\n         if !tcx.sess.features.borrow().default_type_parameter_fallback {\n-            emit_feature_err(&tcx.sess.parse_sess.span_diagnostic,\n-                             \"default_type_parameter_fallback\",\n-                             param.span,\n-                             GateIssue::Language,\n-                             \"other than on a `struct` or `enum` definition, \\\n-                              defaults for type parameters are experimental \\\n-                              and known to be buggy\");\n+            tcx.sess.add_lint(\n+                lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                param.id,\n+                param.span,\n+                format!(\"defaults for type parameters are only allowed \\\n+                         on `struct` or `enum` definitions (see issue #27336)\"));\n         }\n     }\n "}, {"sha": "a3ecbfa84f0a86650ea79343aa1c56a40f40d3bf", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dd3f6143e384927a15b165b1c64e1d7c06faa0a/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=6dd3f6143e384927a15b165b1c64e1d7c06faa0a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(future_incompatible)]\n+#![allow(dead_code)]\n+\n+fn avg<T=i32>(_: T) {}\n+//~^ ERROR defaults for type parameters are only allowed\n+//~| NOTE HARD ERROR\n+fn main() {}"}]}